DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
id INT AUTO_INCREMENT,
name VARCHAR(255),
category_id INT,
d TIMESTAMP,
PRIMARY KEY (id)
);
INSERT INTO t1 (id, name, category_id, d) VALUES
(1, 'aaa', 1, '2010-06-10 19:14:37'),
(2, 'bbb', 2, '2010-06-10 19:14:55'),
(3, 'ccc', 1, '2010-06-10 19:16:02'),
(4, 'ddd', 1, '2010-06-10 19:16:15'),
(5, 'eee', 2, '2010-06-10 19:16:35');
SELECT * FROM t1 ORDER BY d;
id    name    category_id    d
1    aaa    1    2010-06-10 19:14:37
2    bbb    2    2010-06-10 19:14:55
3    ccc    1    2010-06-10 19:16:02
4    ddd    1    2010-06-10 19:16:15
5    eee    2    2010-06-10 19:16:35
SELECT * FROM (SELECT * FROM t1 ORDER BY d DESC) temp ORDER BY d DESC;
id    name    category_id    d
5    eee    2    2010-06-10 19:16:35
4    ddd    1    2010-06-10 19:16:15
3    ccc    1    2010-06-10 19:16:02
2    bbb    2    2010-06-10 19:14:55
1    aaa    1    2010-06-10 19:14:37
SELECT * FROM t1 WHERE category_id = 1 ORDER BY id;
id    name    category_id    d
1    aaa    1    2010-06-10 19:14:37
3    ccc    1    2010-06-10 19:16:02
4    ddd    1    2010-06-10 19:16:15
SELECT * FROM t1 WHERE category_id = 1 ORDER BY d;
id    name    category_id    d
1    aaa    1    2010-06-10 19:14:37
3    ccc    1    2010-06-10 19:16:02
4    ddd    1    2010-06-10 19:16:15
SELECT * FROM t1 WHERE category_id = 1 ORDER BY 1;
id    name    category_id    d
1    aaa    1    2010-06-10 19:14:37
3    ccc    1    2010-06-10 19:16:02
4    ddd    1    2010-06-10 19:16:15
SELECT * FROM t1 WHERE category_id = 1 ORDER BY 1+1;
id    name    category_id    d
1    aaa    1    2010-06-10 19:14:37
3    ccc    1    2010-06-10 19:16:02
4    ddd    1    2010-06-10 19:16:15
SELECT * FROM t1 WHERE category_id = 1 ORDER BY SIN(1);
id    name    category_id    d
1    aaa    1    2010-06-10 19:14:37
3    ccc    1    2010-06-10 19:16:02
4    ddd    1    2010-06-10 19:16:15
SELECT * FROM t1 WHERE category_id = 1 ORDER BY TRUE;
SQL syntax error: non-integer constant in ORDER BY
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
name VARCHAR(200),
area CHAR(200),
PRIMARY KEY (name)
);
INSERT INTO t1() VALUES
('a','b'),
('tewr','lojj'),
('The index may also be used even if the ORDER BY d', ' all unused portions of the index and all ex'),
('ssed by the query, the index is used', 'ex is more efficient than a table scan if c'),
('more expensive than scanning the table and', 'e optimizer probably does not use the index. If SELECT'),
('imilar to the same queries without DESC', 'homogeneity, but need not have the same actual direction.');
SELECT name FROM t1 ORDER BY name;
name
The index may also be used even if the ORDER BY d
a
imilar to the same queries without DESC
more expensive than scanning the table and
ssed by the query, the index is used
tewr
SELECT name FROM t1 ORDER BY name,area;
name
The index may also be used even if the ORDER BY d
a
imilar to the same queries without DESC
more expensive than scanning the table and
ssed by the query, the index is used
tewr
SELECT name FROM t1 ORDER BY area,name;
name
The index may also be used even if the ORDER BY d
a
more expensive than scanning the table and
ssed by the query, the index is used
imilar to the same queries without DESC
tewr
SELECT * FROM t1 WHERE name = 'a' ORDER BY area;
name    area
a    b
SELECT * FROM t1 WHERE LENGTH(name) > 10 ORDER BY name ASC;
name    area
The index may also be used even if the ORDER BY d     all unused portions of the index and all ex
imilar to the same queries without DESC    homogeneity, but need not have the same actual direction.
more expensive than scanning the table and    e optimizer probably does not use the index. If SELECT
ssed by the query, the index is used    ex is more efficient than a table scan if c
SELECT * FROM t1 WHERE LENGTH(name) < 10 ORDER BY name DESC;
name    area
tewr    lojj
a    b
SELECT * FROM t1 WHERE LENGTH(name) > 10 ORDER BY LENGTH(area);
name    area
ssed by the query, the index is used    ex is more efficient than a table scan if c
The index may also be used even if the ORDER BY d     all unused portions of the index and all ex
more expensive than scanning the table and    e optimizer probably does not use the index. If SELECT
imilar to the same queries without DESC    homogeneity, but need not have the same actual direction.
SELECT name FROM t1 ORDER BY name ASC, area DESC;
name
The index may also be used even if the ORDER BY d
a
imilar to the same queries without DESC
more expensive than scanning the table and
ssed by the query, the index is used
tewr
SELECT name FROM t1 ORDER BY name DESC, area ASC;
name
tewr
ssed by the query, the index is used
more expensive than scanning the table and
imilar to the same queries without DESC
a
The index may also be used even if the ORDER BY d
DELETE FROM t1;
INSERT INTO t1(name) VALUES('abkl'),('bfdjskl'),('cdjkl'),('djiofj'),('efjkl;'),('fjkldsa'),('gljfdka');
SELECT * FROM t1 ORDER BY name DESC, name ASC;
name    area
gljfdka    null
fjkldsa    null
efjkl;    null
djiofj    null
cdjkl    null
bfdjskl    null
abkl    null
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
d1 DATE,
d2 DATETIME,
d3 TIMESTAMP
);
INSERT INTO t1() VALUES ('2020-08-08','2020-08-07 00:01:02','2020-08-07 00:01:02.136487');
INSERT INTO t1() VALUES ('2021-09-09','2020-09-09 10:11:02','2020-09-09 10:11:02.136558');
INSERT INTO t1() VALUES ('2021-07-07','2020-07-07 17:17:12','2020-07-07 07:07:05.135582');
INSERT INTO t1() VALUES ('2021-06-06','2020-06-06 21:21:22','2020-06-06 02:21:22.135418');
SELECT * FROM t1 ORDER BY d1 DESC;
d1    d2    d3
2021-09-09    2020-09-09 10:11:02    2020-09-09 10:11:02
2021-07-07    2020-07-07 17:17:12    2020-07-07 07:07:05
2021-06-06    2020-06-06 21:21:22    2020-06-06 02:21:22
2020-08-08    2020-08-07 00:01:02    2020-08-07 00:01:02
SELECT * FROM t1 ORDER BY d1 DESC, d2 ASC, d3 DESC;
d1    d2    d3
2021-09-09    2020-09-09 10:11:02    2020-09-09 10:11:02
2021-07-07    2020-07-07 17:17:12    2020-07-07 07:07:05
2021-06-06    2020-06-06 21:21:22    2020-06-06 02:21:22
2020-08-08    2020-08-07 00:01:02    2020-08-07 00:01:02
SELECT * FROM t1 ORDER BY d2 ASC, d1 ASC, d3 DESC;
d1    d2    d3
2021-06-06    2020-06-06 21:21:22    2020-06-06 02:21:22
2021-07-07    2020-07-07 17:17:12    2020-07-07 07:07:05
2020-08-08    2020-08-07 00:01:02    2020-08-07 00:01:02
2021-09-09    2020-09-09 10:11:02    2020-09-09 10:11:02
SELECT * FROM t1 WHERE d1 BETWEEN '2021-06-06' AND '2021-08-08' ORDER BY d1;
d1    d2    d3
2021-06-06    2020-06-06 21:21:22    2020-06-06 02:21:22
2021-07-07    2020-07-07 17:17:12    2020-07-07 07:07:05
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(
tiny TINYINT NOT NULL,
small SMALLINT NOT NULL,
int_test INT NOT NULL,
big BIGINT NOT NULL
);
INSERT INTO t1() VALUES(1, 2, 3, 4),(100, 101, 102, 103),(NULL, NULL, NULL, 204),(64,1,4564,46843);
constraint violation: Column 'tiny' cannot be null
SELECT * FROM t1 ORDER BY small DESC;
tiny    small    int_test    big
SELECT * FROM t1 WHERE tiny < 100 ORDER BY big ASC;
tiny    small    int_test    big
SELECT * FROM t1 ORDER BY tiny ASC, small DESC, int_test ASC, big DESC;
tiny    small    int_test    big
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(
float_32 FLOAT,
float_64 DOUBLE,
d DECIMAL
);
INSERT INTO t1() VALUES(0.01, 0.02, 0.03), (0.000001,0.000002,0),(-1,-1.1,-1.2),(0.000003,0.000001,3);
SELECT * FROM t1 ORDER BY float_32 ASC, float_64 DESC;
float_32    float_64    d
-1.0    -1.1    -1
1.0E-6    2.0E-6    0
3.0E-6    1.0E-6    3
0.01    0.02    0
SELECT * FROM t1 ORDER BY float_64 DESC;
float_32    float_64    d
0.01    0.02    0
1.0E-6    2.0E-6    0
3.0E-6    1.0E-6    3
-1.0    -1.1    -1
SELECT * FROM t1 ORDER BY d ASC;
float_32    float_64    d
-1.0    -1.1    -1
0.01    0.02    0
1.0E-6    2.0E-6    0
3.0E-6    1.0E-6    3
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
DROP TABLE IF EXISTS t3;
CREATE TABLE t1(
id INT NOT NULL,
name CHAR(20) NOT NULL,
PRIMARY KEY (id)
);
CREATE TABLE t2(
id VARCHAR(10) NOT NULL,
nation VARCHAR(20) NOT NULL,
PRIMARY KEY(id)
);
CREATE TABLE t3(
nation VARCHAR(20) NOT NULL,
city CHAR(20) NOT NULL,
GDP FLOAT NOT NULL,
PRIMARY KEY(nation)
);
INSERT INTO t1() VALUES(1,'ronaldo'), (2,'kante'), (3,'noyer'),(4,'modrici');
INSERT INTO t2() VALUES(1,'Poutanga'), (2,'NA'), (4,'Fenland');
INSERT INTO t3() VALUES('Poutanga','liseber',520135), ('NA','bolando',62102), ('Fenland','yisdilne', 612094);
SELECT * FROM t1 JOIN t2 ON t1.id = t2.id WHERE t1.id BETWEEN 1 AND 4+1 ORDER BY name;
id    name    id    nation
2    kante    2    NA
4    modrici    4    Fenland
1    ronaldo    1    Poutanga
SELECT * FROM t1 JOIN t2 ON t1.id = t2.id ORDER BY t1.id;
id    name    id    nation
1    ronaldo    1    Poutanga
2    kante    2    NA
4    modrici    4    Fenland
SELECT * FROM t1 JOIN t2 ON t1.id = t2.id JOIN t3 ON t2.nation = t3.nation ORDER BY t2.nation ASC, t3.GDP DESC;
id    name    id    nation    nation    city    gdp
4    modrici    4    Fenland    Fenland    yisdilne    612094.0
2    kante    2    NA    NA    bolando    62102.0
1    ronaldo    1    Poutanga    Poutanga    liseber    520135.0
SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id RIGHT JOIN t3 ON t2.nation = t3.nation ORDER BY t2.nation ASC, t3.GDP DESC;
id    name    id    nation    nation    city    gdp
4    modrici    4    Fenland    Fenland    yisdilne    612094.0
2    kante    2    NA    NA    bolando    62102.0
1    ronaldo    1    Poutanga    Poutanga    liseber    520135.0
SELECT * FROM t1 INNER JOIN t2 ON t1.id = t2.id RIGHT JOIN t3 ON t2.nation = t3.nation ORDER BY t2.nation DESC, t3.GDP DESC;
id    name    id    nation    nation    city    gdp
1    ronaldo    1    Poutanga    Poutanga    liseber    520135.0
2    kante    2    NA    NA    bolando    62102.0
4    modrici    4    Fenland    Fenland    yisdilne    612094.0
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(
id INT NOT NULL,
name CHAR(20) NOT NULL,
sex CHAR(4) NOT NULL,
PRIMARY KEY (id)
);
CREATE TABLE t2(
id VARCHAR(10) NOT NULL,
name VARCHAR(20) NOT NULL,
nation VARCHAR(20) NOT NULL,
PRIMARY KEY(id)
);
INSERT INTO t1() VALUES(1,'ronaldo','F'), (2,'kante','M'), (3,'noyer','F'),(4,'modrici','M');
INSERT INTO t2() VALUES(1,'ronaldo','American'), (2,'kante','Franch'), (3,'noyer','Germany'),(4,'modrici','UK');
SELECT * FROM t1 UNION ALL SELECT * FROM t2 ORDER BY name;
id    name    sex
2    kante    M
2    kante    Franch
4    modrici    M
4    modrici    UK
3    noyer    F
3    noyer    Germany
1    ronaldo    F
1    ronaldo    American
(SELECT * FROM t1 UNION ALL SELECT * FROM t2) ORDER BY name DESC, id ASC;
id    name    sex
1    ronaldo    F
1    ronaldo    American
3    noyer    F
3    noyer    Germany
4    modrici    M
4    modrici    UK
2    kante    M
2    kante    Franch
(SELECT * FROM t1) UNION (SELECT * FROM t2 ORDER BY nation) ORDER BY id DESC;
id    name    sex
4    modrici    UK
4    modrici    M
3    noyer    F
3    noyer    Germany
2    kante    M
2    kante    Franch
1    ronaldo    F
1    ronaldo    American
(SELECT * FROM t1 ORDER BY sex) UNION (SELECT * FROM t2);
id    name    sex
2    kante    M
4    modrici    UK
1    ronaldo    F
3    noyer    F
4    modrici    M
3    noyer    Germany
1    ronaldo    American
2    kante    Franch
(SELECT * FROM t1 WHERE sex = 'M' ORDER BY sex DESC)
UNION
(SELECT * FROM t2 WHERE id >= 3 ORDER BY nation ASC) ORDER BY id ASC;
id    name    sex
2    kante    M
3    noyer    Germany
4    modrici    UK
4    modrici    M
(SELECT * FROM t1 WHERE id BETWEEN 1 AND 2 ORDER BY name)
UNION ALL
(SELECT * FROM t2 WHERE nation BETWEEN 'A' AND 'F' ORDER BY id DESC);
[unknown result because it is related to issue#5370]
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
DROP TABLE IF EXISTS t3;
CREATE TABLE t1(
id INT NOT NULL,
name CHAR(20) NOT NULL,
PRIMARY KEY (id)
);
CREATE TABLE t2(
id VARCHAR(10) NOT NULL,
nation VARCHAR(20) NOT NULL,
PRIMARY KEY(id)
);
CREATE TABLE t3(
id VARCHAR(10) NOT NULL,
area VARCHAR(20) NOT NULL,
PRIMARY KEY(id)
);
INSERT INTO t1() VALUES(1,'ronaldo'), (2,'kante'), (3,'noyer'),(4,'modrici');
INSERT INTO t2() VALUES(1,'UK'), (2,'USA'), (3,'RA'),(4,'CN');
INSERT INTO t3() VALUES(1,'EU'), (2,'NA'), (3,'AU'),(4,'AS');
(SELECT * FROM t1) UNION (SELECT * FROM t2 ORDER BY id DESC) UNION ALL (SELECT * FROM t3 ORDER BY area);
id    name
2    kante
2    USA
1    ronaldo
4    modrici
3    noyer
1    UK
4    CN
3    RA
4    AS
3    AU
1    EU
2    NA
((SELECT * FROM t1 ORDER BY id DESC) UNION (SELECT * FROM t2) UNION ALL (SELECT * FROM t3 ORDER BY area)) ORDER BY id;
id    name
1    ronaldo
1    UK
1    EU
2    kante
2    USA
2    NA
3    noyer
3    RA
3    AU
4    modrici
4    CN
4    AS
(SELECT * FROM t1 ORDER BY name) UNION (SELECT * FROM t2 ORDER BY id) UNION ALL (SELECT * FROM t3 ORDER BY area);
id    name
2    kante
2    USA
4    modrici
1    ronaldo
3    noyer
1    UK
4    CN
3    RA
4    AS
3    AU
1    EU
2    NA
(SELECT * FROM t1 JOIN t2 ON t1.id = t2.id ORDER BY t2.id)
UNION
(SELECT * FROM t2 RIGHT JOIN t3 ON t2.id = t3.id ORDER BY t3.id DESC);
id    name    id    nation
1    UK    1    EU
1    ronaldo    1    UK
2    USA    2    NA
2    kante    2    USA
3    RA    3    AU
4    modrici    4    CN
4    CN    4    AS
3    noyer    3    RA
(SELECT * FROM t1 LEFT JOIN t3 ON t1.id = t3.id ORDER BY t1.id DESC, t3.area ASC)
UNION
(SELECT * FROM t2 RIGHT JOIN t3 ON t2.id = t3.id ORDER BY t2.nation ASC, t3.id DESC);
id    name    id    area
1    UK    1    EU
2    USA    2    NA
3    RA    3    AU
2    kante    2    NA
4    CN    4    AS
4    modrici    4    AS
3    noyer    3    AU
1    ronaldo    1    EU
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(
id INT NOT NULL,
d1 CHAR(50) NOT NULL,
salary FLOAT NOT NULL,
PRIMARY KEY (id)
);
CREATE TABLE t2(
id INT NOT NULL,
name CHAR(50) NOT NULL,
sex CHAR(4) NOT NULL,
PRIMARY KEY (id)
);
INSERT INTO t1() VALUES(1,'2020-01-01',23.6), (2,'2020-01-01',89.6), (3,'2020-01-02',45.6);
INSERT INTO t1() VALUES(4,'2020-01-01',66.6), (5,'2020-01-03',17.6), (6,'2020-01-03',123.6);
INSERT INTO t2() VALUES(1,'jaca','F'), (2,'mecan','M'),(3,'right','F'),(4,'rodia','M');
INSERT INTO t2() VALUES(5,'hila','F'), (6,'pika','M');
SELECT DATE(d1), MAX(salary) FROM t1 GROUP BY d1 ORDER BY MAX(salary) DESC;
date(d1)    max(salary)
2020-01-03    123.6
2020-01-01    89.6
2020-01-02    45.6
SELECT DATE(d1), MAX(salary) FROM t1 GROUP BY d1 ORDER BY MAX(salary) ASC;
date(d1)    max(salary)
2020-01-02    45.6
2020-01-01    89.6
2020-01-03    123.6
SELECT DATE(d1), MAX(salary) FROM t1 JOIN t2 ON t1.id = t2.id GROUP BY d1 ORDER BY MAX(salary) DESC;
date(d1)    max(salary)
2020-01-03    123.6
2020-01-01    89.6
2020-01-02    45.6
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(
id INT,
name CHAR(20),
PRIMARY KEY(id)
);
INSERT INTO t1() VALUES(1, 'jacak'), (2, 'tommy'), (3, 'rorgdbs'), (4, NULL);
SELECT * FROM t1 ORDER BY name ASC;
id    name
4    null
1    jacak
3    rorgdbs
2    tommy
SELECT * FROM t1 ORDER BY name DESC, id ASC;
id    name
2    tommy
3    rorgdbs
1    jacak
4    null
SELECT * FROM t1 ORDER BY name ASC NULLS LAST;
id    name
1    jacak
3    rorgdbs
2    tommy
4    null
SELECT * FROM t1 ORDER BY name ASC NULLS FIRST;
id    name
4    null
1    jacak
3    rorgdbs
2    tommy
SELECT * FROM t1 ORDER BY name ASC NULLS FIRST LAST;
SQL parser error: You have an error in your SQL syntax; check the manual that corresponds to your MatrixOne server version for the right syntax to use. syntax error at line 1 column 51 near " LAST;";
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(
id INT,
name CHAR(20),
salary FLOAT,
dept INT,
PRIMARY KEY(id)
);
INSERT INTO t1() VALUES(1,'bdkia',133.1,11), (2, 'dodro',983.6,NULL), (3, 'fafeaz',301.5,10), (4, NULL,NULL,13);
SELECT * FROM t1 WHERE id > 1 ORDER BY id DESC, salary NULLS FIRST;
id    name    salary    dept
4    null    null    13
3    fafeaz    301.5    10
2    dodro    983.6    null
SELECT * FROM t1 WHERE id BETWEEN 1 AND 4 ORDER BY id DESC, dept NULLS LAST, salary DESC NULLS FIRST;
id    name    salary    dept
4    null    null    13
3    fafeaz    301.5    10
2    dodro    983.6    null
1    bdkia    133.1    11
SELECT id,name FROM t1 ORDER BY salary DESC NULLS FIRST, dept DESC NULLS LAST, name ASC NULLS FIRST;
id    name
4    null
2    dodro
3    fafeaz
1    bdkia
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(
id INT,
name CHAR(20),
PRIMARY KEY(id)
);
CREATE TABLE t2(
id INT,
nation CHAR(20),
PRIMARY KEY(id)
);
INSERT INTO t1() VALUES(1, 'jacak'), (2, 'tommy'), (3, 'roses'), (4, NULL);
INSERT INTO t2() VALUES(1, 'US'), (2, 'UK'), (3, NULL), (4, NULL), (5, NULL);
SELECT * FROM t1 JOIN t2 ON t1.id = t2.id ORDER BY name DESC NULLS FIRST;
id    name    id    nation
4    null    4    null
2    tommy    2    UK
3    roses    3    null
1    jacak    1    US
SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id ORDER BY name ASC NULLS LAST;
id    name    id    nation
1    jacak    1    US
3    roses    3    null
2    tommy    2    UK
4    null    4    null
SELECT * FROM t1 RIGHT JOIN t2 ON t1.id = t2.id ORDER BY name ASC, nation DESC NULLS LAST;
id    name    id    nation
4    null    4    null
null    null    5    null
1    jacak    1    US
3    roses    3    null
2    tommy    2    UK
SELECT * FROM t1 INNER JOIN t2 ON t1.id = t2.id ORDER BY name DESC, nation ASC NULLS FIRST;
id    name    id    nation
2    tommy    2    UK
3    roses    3    null
1    jacak    1    US
4    null    4    null
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;
CREATE TABLE t1(
id INT,
sex CHAR(20)
);
CREATE TABLE t2(
id INT,
home CHAR(20)
);
INSERT INTO t1() VALUES(1, 'F'), (2, 'M'), (NULL, 'M'), (4, NULL), (NULL, NULL);
INSERT INTO t2() VALUES(1, 'EU'), (2, 'UK'), (3, NULL), (4, NULL), (5, NULL), (NULL, NULL);
SELECT * FROM t1 LEFT JOIN t2 ON t1.id = t2.id ORDER BY sex ASC NULLS LAST;
id    sex    id    home
1    F    1    EU
2    M    2    UK
null    M    null    null
4    null    4    null
null    null    null    null
SELECT * FROM t1 RIGHT JOIN t2 ON t1.id = t2.id ORDER BY home ASC NULLS FIRST;
id    sex    id    home
null    null    3    null
4    null    4    null
null    null    5    null
null    null    null    null
1    F    1    EU
2    M    2    UK
SELECT * FROM t1 INNER JOIN t2 ON t1.id = t2.id ORDER BY home ASC, sex DESC NULLS FIRST;
id    sex    id    home
4    null    4    null
1    F    1    EU
2    M    2    UK
