drop account if exists bvt_purge_log;
create account bvt_purge_log admin_name 'admin' identified by '111';
select purge_log('rawlog', '2023-06-30') a;
not supported: only support sys account
select REGEXP_REPLACE(a, '[0-9]+', '*') a from (select mo_ctl('dn', 'inspect', 'objprune -t system_metrics.metric -d 2021h') a) a;
a
\nmsg: success. arg prune: table *-metric, *h*m*s ago, cacheLen *\n\ntotal: *, stale: *, selected: *, no valid objs to prune
select REGEXP_REPLACE(a, '[0-9]+', '*') a from (select purge_log('rawlog', '2021-02-01') a) a;
a
\nmsg: success. arg prune: table *-rawlog, *h*m*s ago, cacheLen *\n\ntotal: *, stale: *, selected: *, no valid objs to prune
select REGEXP_REPLACE(a, '[0-9]+', '*') a from (select purge_log('statement_info', '2021-02-01') a) a;
a
\nmsg: success. arg prune: table *-statement_info, *h*m*s ago, cacheLen *\n\ntotal: *, stale: *, selected: *, no valid objs to prune
select REGEXP_REPLACE(a, '[0-9]+', '*') a from (select purge_log('metric', '2021-02-01') a) a;
a
\nmsg: success. arg prune: table *-metric, *h*m*s ago, cacheLen *\n\ntotal: *, stale: *, selected: *, no valid objs to prune
select purge_log('rawlog,statement_info,metric', '2021-02-01') a;
not supported: table name contains comma.
select purge_log('rawlog_not_exist', '2023-06-30') a;
not supported: purge 'rawlog_not_exist'
select purge_log('rawlog_not_exist', '123') a;
invalid argument parsedate, bad value 123
select purge_log('rawlog_not_exist', NULL) a;
a
NULL
select purge_log(NULL, '2023-06-30') a;
a
NULL
select purge_log(NULL, NULL) a;
a
NULL
set @ts=(select max(collecttime) from system_metrics.metric);
set @metric_name=(select metric_name from system_metrics.metric where collecttime between @ts and date_add(@ts, interval 1 second) limit 1);
set @node=(select node from system_metrics.metric where collecttime between @ts and date_add(@ts, interval 1 second) and metric_name=@metric_name limit 1);
select purge_log('metric', DATE_ADD( @ts, interval 1 day)) a;
a
success
select count(1) cnt, @ts, @metric_name, @node from  system_metrics.metric where collecttime between @ts and date_add(@ts, interval 1 second) and metric_name=@metric_name and node=@node;
cnt    @ts    @metric_name    @node
0    date time    any_value    any_value
drop account if exists bvt_purge_log;
