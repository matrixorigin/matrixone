# Test int
select * from generate_series(1, 5) g;
select * from generate_series(5, 1) g;
select * from generate_series(1, 5, 2) g;
select * from generate_series(5, 1, -2) g;
select * from generate_series(1, 5, 0) g;
select * from generate_series(1, 5, -1) g;
select * from generate_series(5, 1, 1) g;
select * from generate_series(2147483646, 2147483647,5) g;
select * from generate_series(-2147483645, -2147483648,-2) g;

# Test bigint
select * from generate_series(2147483647, 2147483649) g;
select * from generate_series(2147483647, 2147483649, 2) g;
select * from generate_series(2147483649, 2147483647, -2) g;
select * from generate_series(2147483647, 2147483649, 0) g;
select * from generate_series(2147483647, 2147483649, -1) g;
select * from generate_series(2147483649, 2147483647, 1) g;
select * from generate_series(9223372036854775806, 9223372036854775807) g;
select * from generate_series(9223372036854775806, 9223372036854775807, 2) g;
select * from generate_series(-9223372036854775805, -9223372036854775807) g;
select * from generate_series(-9223372036854775805, -9223372036854775807,-2) g;
select * from generate_series(-9223372036854775805, cast(-9223372036854775808 as bigint),-2) g;

# Test datetime
select * from generate_series('2020-02-28 00:00:00','2021-03-01 00:01:00', '1 year') g;
select * from generate_series('2020-02-29 00:00:00','2021-03-01 00:01:00', '1 year') g;
select * from generate_series('2020-02-29 00:00:00','2021-03-01 00:01:00', '1 quarter') g;
select * from generate_series('2020-02-28 00:00:00','2021-03-01 00:01:00', '1 quarter') g;
select * from generate_series('2020-02-29 00:00:00','2021-03-01 00:01:00', '1 month') g;
select * from generate_series('2020-02-28 00:00:00','2021-03-01 00:01:00', '1 month') g;
select * from generate_series('2020-02-29 00:00:00','2020-03-08 00:01:00', '1 week') g;
select * from generate_series('2000-01-01 00:00:00', '2000-01-05 00:00:00','1 day') g;
select * from generate_series('2020-02-29 23:59:59','2020-03-01 00:01:00', '1 hour') g;
select * from generate_series('2020-02-29 23:59:59','2020-03-01 00:01:00', '1 minute') g;
select * from generate_series('2020-02-29 23:59:59','2020-03-01 00:00:10', '1 second') g;
select * from generate_series('2020-02-29 23:59:59.124356','2020-02-29 23:59:59.124360', '1 microsecond') g;

# Test one parameter
select * from generate_series(5) g;

# Test split
create table t(a int, b text);
insert into t select result, repeat('foobarzoo', 500) t from generate_series(1, 200000) t;
select count(*) as ttl from t;
drop table t;

# Test cross apply
create table t(a int, b int);
-- @separator:table
explain select t.*, tf.* from t cross apply generate_series(t.a, t.b) tf;
-- @separator:table
explain select t.*, tf.* from t cross apply generate_series(t.a, t.b) tf where t.a > 1;
drop table t;

create table t (id int);
insert into t select result from generate_series(1,100.0) g; 
insert into t select result from generate_series(1,1e2) g; 
insert into t select result from generate_series(1,100, "step") g; 

-- Test generate randoms
-- fail:
select * from generate_random_int64() t;
select * from generate_random_int64(10, 42, 'foo') t;
select * from generate_random_int64(10, 42, 'exp') t; 
select * from generate_random_float64(10, 42, 'int64n') t; 
select * from generate_random_float64(10, 42, 'exp', 10) t; 

-- gen with seed so that it is stable.
select * from generate_random_int64(10, 42) t;
select * from generate_random_int64(10, 42, 'int64n', 100) t;
select * from generate_random_float64(10, 42) t;
select * from generate_random_float64(10, 42, '') t;
select * from generate_random_float64(10, 42, 'exp') t;
select * from generate_random_float64(10, 42, 'normal') t;

