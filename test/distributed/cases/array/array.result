drop database if exists vecdb;
create database vecdb;
use vecdb;
drop table if exists vec_table;
create table vec_table(a int, b vecf32(3), c vecf64(3));
desc vec_table;
Field    Type    Null    Key    Default    Extra    Comment
a    INT(32)    YES        null        
b    VECF32(3)    YES        null        
c    VECF64(3)    YES        null        
insert into vec_table values(1, "[1,2,3]", "[4,5,6]");
select * from vec_table;
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select b+b from vec_table;
b + b
[2, 4, 6]
select b-b from vec_table;
b - b
[0, 0, 0]
select b*b from vec_table;
b * b
[1, 4, 9]
select b/b from vec_table;
b / b
[1, 1, 1]
select * from vec_table where b> "[1,2,3]";
a    b    c
select * from vec_table where b< "[1,2,3]";
a    b    c
select * from vec_table where b>= "[1,2,3]";
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select * from vec_table where b<= "[1,2,3]";
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select * from vec_table where b!= "[1,2,3]";
a    b    c
select * from vec_table where b= "[1,2,3]";
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select * from vec_table where b= cast("[1,2,3]" as vecf32(3));
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select b + "[1,2,3]" from vec_table;
b + [1,2,3]
[2, 4, 6]
select b + "[1,2]" from vec_table;
invalid input: vector ops between different dimensions (3, 2) is not permitted.
select b + "[1,2,3,4]" from vec_table;
invalid input: vector ops between different dimensions (3, 4) is not permitted.
select cast("[1,2,3]" as vecf32(3));
cast([1,2,3] as vecf32(3))
[1, 2, 3]
select b + "[1,2,3]" from vec_table;
b + [1,2,3]
[2, 4, 6]
select b + sqrt(b) from vec_table;
b + sqrt(b)
[2, 3.414213562373095, 4.732050807568877]
select b + c from vec_table;
b + c
[5, 7, 9]
select abs(b) from vec_table;
abs(b)
[1, 2, 3]
select abs(cast("[-1,-2,3]" as vecf32(3)));
abs(cast([-1,-2,3] as vecf32(3)))
[1, 2, 3]
select sqrt(b) from vec_table;
sqrt(b)
[1, 1.4142135623730951, 1.7320508075688772]
select summation(b) from vec_table;
summation(b)
6.0
select l1_norm(b) from vec_table;
l1_norm(b)
6.0
select l2_norm(b) from vec_table;
l2_norm(b)
3.741657386773941
select vector_dims(b) from vec_table;
vector_dims(b)
3
select inner_product(b,"[1,2,3]") from vec_table;
inner_product(b, [1,2,3])
14.0
select cosine_similarity(b,"[1,2,3]") from vec_table;
cosine_similarity(b, [1,2,3])
1.0
select l2_distance(b,"[1,2,3]") from vec_table;
l2_distance(b, [1,2,3])
0.0
select cosine_distance(b,"[1,2,3]") from vec_table;
cosine_distance(b, [1,2,3])
0.0
select normalize_l2(b) from vec_table;
normalize_l2(b)
[0.26726124, 0.5345225, 0.80178374]
select * FROM vec_table ORDER BY cosine_similarity(b, '[3,1,2]') LIMIT 5;
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select * FROM vec_table ORDER BY l2_distance(b, '[3,1,2]') LIMIT 5;
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select * FROM vec_table ORDER BY inner_product(b, '[3,1,2]') LIMIT 5;
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select b + "[1,2,3" from vec_table;
internal error: malformed vector input: [1,2,3
select b + "1,2,3" from vec_table;
internal error: malformed vector input: 1,2,3
create table t2(a int, b vecf32(3) primary key);
not supported: VECTOR column 'b' cannot be in primary key
create unique index t3 on vec_table(b);
not supported: VECTOR column 'b' cannot be in index
create table t3(a int, b vecf32(65537));
Data truncation: data out of range: data type vecf32,  typeLen is over the MaxVectorLen : 65535
select sqrt(cast("[1,2,-3]" as vecf32(3)));
invalid argument Sqrt, bad value -3
select b/(cast("[1,2,0]" as vecf32(3))) from vec_table;
Data truncation: division by zero
select count(b) from vec_table;
count(b)
1
create table t4(a int, b vecf32(5), c vecf64(5));
insert into t4 values(1, "[1,2,3,4,5]", "[1,2,3,4,5]");
insert into t4 values(1, "[1,2]", "[1,2]");
invalid input: expected vector dimension 5 != actual dimension 2.
insert into t4 values(1, "[1,2,3,4,5,6]", "[1,2,3,4,5,6]");
invalid input: expected vector dimension 5 != actual dimension 6.
select * from t4;
a    b    c
1    [1, 2, 3, 4, 5]    [1, 2, 3, 4, 5]
create table t5(a int, b vecf32(3));
insert into t5 values(1, cast(unhex('7e98b23e9e10383b2f41133f') as blob));
insert into t5 values(2, cast(unhex('0363733ff13e0b3f7aa39d3e') as blob));
insert into t5 values(3, cast(unhex('be1ac03e485d083ef6bc723f') as blob));
insert into t5 values(4, "[0,2,3]");
insert into t5 values(5, cast(unhex('05486c3f3ee2863e713d503dd58e8e3e7b88743f') as blob)); -- this is float32[5]
invalid input: expected vector dimension 3 != actual dimension 5.
insert into t5 values(6, cast(unhex('9be2123fcf92de3e') as blob)); -- this is float32[2]
invalid input: expected vector dimension 3 != actual dimension 2.
select * from t5;
a    b
1    [0.34881967, 0.0028086076, 0.5752134]
2    [0.95072955, 0.54392916, 0.30788785]
3    [0.37520403, 0.13316834, 0.9481958]
4    [0, 2, 3]
select * from t5 where t5.b > "[0,0,0]";
a    b
1    [0.34881967, 0.0028086076, 0.5752134]
2    [0.95072955, 0.54392916, 0.30788785]
3    [0.37520403, 0.13316834, 0.9481958]
4    [0, 2, 3]
select hex(b) from t5;
hex(b)
7e98b23e9e10383b2f41133f
0363733ff13e0b3f7aa39d3e
be1ac03e485d083ef6bc723f
000000000000004000004040
create table t6(a int, b vecf32(3));
insert into t6 values(1, null);
insert into t6 (a,b) values (1, '[1,2,3]'), (2, '[4,5,6]'), (3, '[2,1,1]'), (4, '[7,8,9]'), (5, '[0,0,0]'), (6, '[3,1,2]');
select * from t6;
a    b
1    null
1    [1, 2, 3]
2    [4, 5, 6]
3    [2, 1, 1]
4    [7, 8, 9]
5    [0, 0, 0]
6    [3, 1, 2]
update t6 set b = NULL;
select * from t6;
a    b
1    null
1    null
2    null
3    null
4    null
5    null
6    null
create table t7(a int, b vecf32(3), c vecf32(5));
insert into t7 values(1, NULL,NULL);
insert into t7 values(2, "[0.8166459, 0.66616553, 0.4886152]", NULL);
insert into t7 values(3, "[0.1726299, 3.2908857, 30.433094]","[0.45052445, 2.1984527, 9.579752, 123.48039, 4635.894]");
insert into t7 values(4, "[8.560689, 6.790359, 821.9778]", "[0.46323407, 23.498016, 563.923, 56.076736, 8732.958]");
select * from t7;
a    b    c
1    null    null
2    [0.8166459, 0.66616553, 0.4886152]    null
3    [0.1726299, 3.2908857, 30.433094]    [0.45052445, 2.1984527, 9.579752, 123.48039, 4635.894]
4    [8.560689, 6.790359, 821.9778]    [0.46323407, 23.498016, 563.923, 56.076736, 8732.958]
select a, b + b, c + c from t7;
a    b + b    c + c
1    null    null
2    [1.6332918, 1.3323311, 0.9772304]    null
3    [0.3452598, 6.5817714, 60.866188]    [0.9010489, 4.3969054, 19.159504, 246.96078, 9271.788]
4    [17.121378, 13.580718, 1643.9556]    [0.92646813, 46.996033, 1127.846, 112.15347, 17465.916]
select a, b * b, c * c from t7;
a    b * b    c * c
1    null    null
2    [0.6669106, 0.44377652, 0.23874483]    null
3    [0.02980108, 10.829928, 926.1732]    [0.20297228, 4.8331943, 91.771645, 15247.407, 21491514]
4    [73.28539, 46.108974, 675647.5]    [0.2145858, 552.1568, 318009.12, 3144.6003, 76264550]
select l2_norm(b), l2_norm(c) from t7;
l2_norm(b)    l2_norm(c)
null    null
1.1616505074810406    null
30.610993802842444    4637.5486836009195
822.0504062713129    8751.35770370157
insert into vec_table values(2, "[0,2,3]", "[4,4,6]");
insert into vec_table values(3, "[1,3,3]", "[4,1,6]");
select mo_ctl('dn', 'flush', 'vecdb.vec_table');
mo_ctl(dn, flush, vecdb.vec_table)
{\n  "method": "Flush",\n  "result": [\n    {\n      "returnStr": "OK"\n    }\n  ]\n}\n
select mo_ctl('dn', 'flush', 'vecdb.t6');
mo_ctl(dn, flush, vecdb.t6)
{\n  "method": "Flush",\n  "result": [\n    {\n      "returnStr": "OK"\n    }\n  ]\n}\n
select * from vec_table where b> "[1,2,3]";
a    b    c
3    [1, 3, 3]    [4, 1, 6]
select * from vec_table where b!= "[1,2,3]";
a    b    c
2    [0, 2, 3]    [4, 4, 6]
3    [1, 3, 3]    [4, 1, 6]
select * from vec_table where b= "[1,2,3]";
a    b    c
1    [1, 2, 3]    [4, 5, 6]
create table vec_table1(a int, b vecf32(3), c vecf64(3));
insert into vec_table1 values(1, "[1,2,3]", "[4,5,6]");
select * from vec_table1;
a    b    c
1    [1, 2, 3]    [4, 5, 6]
create table vec_table2(a int primary key, b vecf32(3), c vecf64(3));
insert into vec_table2 values(1, "[1,2,3]", "[4,5,6]");
select * from vec_table2;
a    b    c
1    [1, 2, 3]    [4, 5, 6]
create table vec_table3(a int unique key, b vecf32(3), c vecf64(3));
insert into vec_table3 values(1, "[1,2,3]", "[4,5,6]");
select * from vec_table3;
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select summation(null);
summation(null)
null
select l1_norm(null);
l1_norm(null)
null
select l2_norm(null);
l2_norm(null)
null
select vector_dims(null);
vector_dims(null)
null
select inner_product(null, "[1,2,3]");
inner_product(null, [1,2,3])
null
select cosine_similarity(null, "[1,2,3]");
cosine_similarity(null, [1,2,3])
null
select l2_distance(null, "[1,2,3]");
l2_distance(null, [1,2,3])
null
select cosine_distance(null, "[1,2,3]");
cosine_distance(null, [1,2,3])
null
select normalize_l2(null);
normalize_l2(null)
null
select cast(null as vecf32(3));
cast(null as vecf32(3))
null
select cast(null as vecf64(3));
cast(null as vecf64(3))
null
create table t8(a int, b vecf32(3), c vecf32(5));
INSERT INTO `t8` VALUES (1,NULL,NULL);
INSERT INTO `t8` VALUES(2,'[0.8166459, 0.66616553, 0.4886152]',NULL);
INSERT INTO `t8` VALUES(3,'[0.1726299, 3.2908857, 30.433094]','[0.45052445, 2.1984527, 9.579752, 123.48039, 4635.894]');
INSERT INTO `t8` VALUES(4,'[8.560689, 6.790359, 821.9778]','[0.46323407, 23.498016, 563.923, 56.076736, 8732.958]');
select cosine_similarity(b,b), cosine_similarity(c,c) from t8;
cosine_similarity(b, b)    cosine_similarity(c, c)
null    null
1.0    null
1.0    1.0
1.0    1.0
create table t9(a int, b vecf64(3), c vecf64(5));
INSERT INTO `t9` VALUES (1,NULL,NULL);
INSERT INTO `t9` VALUES (2,'[0.8166459, 0.66616553, 0.4886152]',NULL);
INSERT INTO `t9` VALUES (3,'[8.5606893, 6.7903588, 821.977768]','[0.46323407, 23.49801546, 563.9229458, 56.07673508, 8732.9583881]');
INSERT INTO `t9` VALUES (4,'[0.9260021, 0.26637346, 0.06567037]','[0.45756745, 65.2996871, 321.623636, 3.60082066, 87.58445764]');
select cosine_similarity(b,b), cosine_similarity(c,c) from t9;
cosine_similarity(b, b)    cosine_similarity(c, c)
null    null
1.0    null
1.0    1.0
1.0    1.0
create table t10(a int, b vecf32(3), c vecf64(3));
insert into t10 values(1, "[1,2.4,3]", "[4.1,5,6]");
insert into t10 values(2, "[3,4,5]", "[6,7.3,8]");
insert into t10 values(3, "[5,6,7]", "[8,9,10]");
select subvector(b,1) from t10;
subvector(b, 1)
[1, 2.4, 3]
[3, 4, 5]
[5, 6, 7]
select subvector(b,2) from t10;
subvector(b, 2)
[2.4, 3]
[4, 5]
[6, 7]
select subvector(b,3) from t10;
subvector(b, 3)
[3]
[5]
[7]
select subvector(b,4) from t10;
subvector(b, 4)
[]
[]
[]
select subvector(b,-1) from t10;
subvector(b, -1)
[3]
[5]
[7]
select subvector(b,-2) from t10;
subvector(b, -2)
[2.4, 3]
[4, 5]
[6, 7]
select subvector(b,-3) from t10;
subvector(b, -3)
[1, 2.4, 3]
[3, 4, 5]
[5, 6, 7]
select subvector(b, 1, 1) from t10;
subvector(b, 1, 1)
[1]
[3]
[5]
select subvector(b, 1, 2) from t10;
subvector(b, 1, 2)
[1, 2.4]
[3, 4]
[5, 6]
select subvector(b, 1, 3) from t10;
subvector(b, 1, 3)
[1, 2.4, 3]
[3, 4, 5]
[5, 6, 7]
select subvector(b, 1, 4) from t10;
subvector(b, 1, 4)
[1, 2.4, 3]
[3, 4, 5]
[5, 6, 7]
select subvector(b, -1, 1) from t10;
subvector(b, -1, 1)
[3]
[5]
[7]
select subvector(b, -2, 1) from t10;
subvector(b, -2, 1)
[2.4]
[4]
[6]
select subvector(b, -3, 1) from t10;
subvector(b, -3, 1)
[1]
[3]
[5]
SELECT SUBVECTOR("[1,2,3]", 2);
subvector([1,2,3], 2)
[2, 3]
SELECT SUBVECTOR("[1,2,3]",2,1);
subvector([1,2,3], 2, 1)
[2]
select b + 2 from t10;
b + 2
[3, 4.4, 5]
[5, 6, 7]
[7, 8, 9]
select b - 2 from t10;
b - 2
[-1, 0.4000001, 1]
[1, 2, 3]
[3, 4, 5]
select b * 2 from t10;
b * 2
[2, 4.8, 6]
[6, 8, 10]
[10, 12, 14]
select b / 2 from t10;
b / 2
[0.5, 1.2, 1.5]
[1.5, 2, 2.5]
[2.5, 3, 3.5]
select 2 + b from t10;
2 + b
[3, 4.4, 5]
[5, 6, 7]
[7, 8, 9]
select 2 - b from t10;
invalid argument operator -, bad value [BIGINT VECF32]
select 2 * b from t10;
2 * b
[2, 4.8, 6]
[6, 8, 10]
[10, 12, 14]
select 2 / b from t10;
invalid argument operator /, bad value [BIGINT VECF32]
select b + 2.0 from t10;
b + 2.0
[3, 4.4, 5]
[5, 6, 7]
[7, 8, 9]
select b - 2.0 from t10;
b - 2.0
[-1, 0.4000001, 1]
[1, 2, 3]
[3, 4, 5]
select b * 2.0 from t10;
b * 2.0
[2, 4.8, 6]
[6, 8, 10]
[10, 12, 14]
select b / 2.0 from t10;
b / 2.0
[0.5, 1.2, 1.5]
[1.5, 2, 2.5]
[2.5, 3, 3.5]
select 2.0 + b from t10;
2.0 + b
[3, 4.4, 5]
[5, 6, 7]
[7, 8, 9]
select 2.0 - b from t10;
invalid argument operator -, bad value [DECIMAL64 VECF32]
select 2.0 * b from t10;
2.0 * b
[2, 4.8, 6]
[6, 8, 10]
[10, 12, 14]
select 2.0 / b from t10;
invalid argument operator /, bad value [DECIMAL64 VECF32]
select cast("[1,2,3]" as vecf32(3)) + 2;
cast([1,2,3] as vecf32(3)) + 2
[3, 4, 5]
select cast("[1,2,3]" as vecf32(3)) - 2;
cast([1,2,3] as vecf32(3)) - 2
[-1, 0, 1]
select cast("[1,2,3]" as vecf32(3)) * 2;
cast([1,2,3] as vecf32(3)) * 2
[2, 4, 6]
select cast("[1,2,3]" as vecf32(3)) / 2;
cast([1,2,3] as vecf32(3)) / 2
[0.5, 1, 1.5]
select 2 + cast("[1,2,3]" as vecf32(3));
2 + cast([1,2,3] as vecf32(3))
[3, 4, 5]
select 2 - cast("[1,2,3]" as vecf32(3));
invalid argument operator -, bad value [BIGINT VECF32]
select 2 * cast("[1,2,3]" as vecf32(3));
2 * cast([1,2,3] as vecf32(3))
[2, 4, 6]
select 2 / cast("[1,2,3]" as vecf32(3));
invalid argument operator /, bad value [BIGINT VECF32]
select cast("[1,2,3]" as vecf32(3)) + 2.0;
cast([1,2,3] as vecf32(3)) + 2.0
[3, 4, 5]
select cast("[1,2,3]" as vecf32(3)) - 2.0;
cast([1,2,3] as vecf32(3)) - 2.0
[-1, 0, 1]
select cast("[1,2,3]" as vecf32(3)) * 2.0;
cast([1,2,3] as vecf32(3)) * 2.0
[2, 4, 6]
select cast("[1,2,3]" as vecf32(3)) / 2.0;
cast([1,2,3] as vecf32(3)) / 2.0
[0.5, 1, 1.5]
select 2.0 + cast("[1,2,3]" as vecf32(3));
2.0 + cast([1,2,3] as vecf32(3))
[3, 4, 5]
select 2.0 - cast("[1,2,3]" as vecf32(3));
invalid argument operator -, bad value [DECIMAL64 VECF32]
select 2.0 * cast("[1,2,3]" as vecf32(3));
2.0 * cast([1,2,3] as vecf32(3))
[2, 4, 6]
select 2.0 / cast("[1,2,3]" as vecf32(3));
invalid argument operator /, bad value [DECIMAL64 VECF32]
select cast("[1,2,3]" as vecf32(3)) / 0 ;
Data truncation: division by zero
select 5 + (-1*cast("[1,2,3]" as vecf32(3)));
5 + (-1 * cast([1,2,3] as vecf32(3)))
[4, 3, 2]
create table t11(a vecf32(2));
insert into t11 values('[1,0]');
insert into t11 values('[1,2]');
select distinct a from t11;
a
[1, 0]
[1, 2]
select distinct a,a from t11;
a    a
[1, 0]    [1, 0]
[1, 2]    [1, 2]
drop table if exists t1;
create table t1(c1 int,c2 vecf32(5),c3 tinyint unsigned,c4 bigint,c5 decimal(4,2),c6 float,c7 double);
insert into t1 values(10 ,"[1, 0, 1, 6, 6]",3,10,7.1,0.36,2.10);
insert into t1 values(60,"[6, 0, 8, 10,129]",2,5,3.26,4.89,1.26);
insert into t1 values(20,"[ 9, 18, 1, 4, 132]",6,1,9.36,6.9,5.6);
select c2+c3 from t1;
c2 + c3
[4, 3, 4, 9, 9]
[8, 2, 10, 12, 131]
[15, 24, 7, 10, 138]
select * from t8 except select * from t9;
a    b    c
3    [0.1726299, 3.2908857, 30.433094]    [0.45052445, 2.1984527, 9.579752, 123.48039, 4635.894]
4    [8.560689, 6.790359, 821.9778]    [0.46323407, 23.498016, 563.923, 56.076736, 8732.958]
select cast("[76875768584509877574546435800000005,8955885757767774774774774456466]" as vecf32(2)) *623585864455;
internal error: vector contains infinity values
drop database vecdb;
