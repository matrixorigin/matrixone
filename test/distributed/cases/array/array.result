drop database if exists vecdb;
create database vecdb;
use vecdb;
drop table if exists vec_table;
create table vec_table(a int, b vecf32(3), c vecf64(3));
desc vec_table;
Field    Type    Null    Key    Default    Extra    Comment
a    INT(32)    YES        null        
b    VECF32(3)    YES        null        
c    VECF64(3)    YES        null        
insert into vec_table values(1, "[1,2,3]", "[4,5,6]");
select * from vec_table;
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select b+b from vec_table;
b + b
[2, 4, 6]
select b-b from vec_table;
b - b
[0, 0, 0]
select b*b from vec_table;
b * b
[1, 4, 9]
select b/b from vec_table;
b / b
[1, 1, 1]
select * from vec_table where b> "[1,2,3]";
a    b    c
select * from vec_table where b< "[1,2,3]";
a    b    c
select * from vec_table where b>= "[1,2,3]";
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select * from vec_table where b<= "[1,2,3]";
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select * from vec_table where b!= "[1,2,3]";
a    b    c
select * from vec_table where b= "[1,2,3]";
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select * from vec_table where b= cast("[1,2,3]" as vecf32(3));
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select b + "[1,2,3]" from vec_table;
b + [1,2,3]
[2, 4, 6]
select b + "[1,2]" from vec_table;
invalid input: vector ops between different dimensions (3, 2) is not permitted.
select b + "[1,2,3,4]" from vec_table;
invalid input: vector ops between different dimensions (3, 4) is not permitted.
select cast("[1,2,3]" as vecf32(3));
cast([1,2,3] as vecf32(3))
[1, 2, 3]
select b + "[1,2,3]" from vec_table;
b + [1,2,3]
[2, 4, 6]
select b + sqrt(b) from vec_table;
b + sqrt(b)
[2, 3.414213562373095, 4.732050807568877]
select b + c from vec_table;
b + c
[5, 7, 9]
select abs(b) from vec_table;
abs(b)
[1, 2, 3]
select abs(cast("[-1,-2,3]" as vecf32(3)));
abs(cast([-1,-2,3] as vecf32(3)))
[1, 2, 3]
select sqrt(b) from vec_table;
sqrt(b)
[1, 1.4142135623730951, 1.7320508075688772]
select summation(b) from vec_table;
summation(b)
6.0
select l1_norm(b) from vec_table;
l1_norm(b)
6.0
select l2_norm(b) from vec_table;
l2_norm(b)
3.7416573867739413
select vector_dims(b) from vec_table;
vector_dims(b)
3
select inner_product(b,"[1,2,3]") from vec_table;
inner_product(b, [1,2,3])
14.0
select cosine_similarity(b,"[1,2,3]") from vec_table;
cosine_similarity(b, [1,2,3])
1.0
select * FROM vec_table ORDER BY cosine_similarity(b, '[3,1,2]') LIMIT 5;
a    b    c
1    [1, 2, 3]    [4, 5, 6]
select b + "[1,2,3" from vec_table;
internal error: malformed vector input: [1,2,3
select b + "1,2,3" from vec_table;
internal error: malformed vector input: 1,2,3
create table t2(a int, b vecf32(3) primary key);
not supported: VECTOR column 'b' cannot be in primary key
create unique index t3 on vec_table(b);
not supported: VECTOR column 'b' cannot be in index
create table t3(a int, b vecf32(65537));
Data truncation: data out of range: data type vecf32,  typeLen is over the MaxVectorLen : 65536
select sqrt(cast("[1,2,-3]" as vecf32(3)));
invalid argument Sqrt, bad value -3
select b/(cast("[1,2,0]" as vecf32(3))) from vec_table;
Data truncation: division by zero
select count(b) from vec_table;
count(b)
1
create table t4(a int, b vecf32(5), c vecf64(5));
insert into t4 values(1, "[1,2,3,4,5]", "[1,2,3,4,5]");
insert into t4 values(1, "[1,2]", "[1,2]");
invalid input: expected vector dimension 5 != actual dimension 2.
insert into t4 values(1, "[1,2,3,4,5,6]", "[1,2,3,4,5,6]");
invalid input: expected vector dimension 5 != actual dimension 6.
select * from t4;
a    b    c
1    [1, 2, 3, 4, 5]    [1, 2, 3, 4, 5]
create table t5(a int, b vecf32(3));
insert into t5 values(1, decode('7e98b23e9e10383b2f41133f','hex'));
insert into t5 values(2, decode('0363733ff13e0b3f7aa39d3e','hex'));
insert into t5 values(3, decode('be1ac03e485d083ef6bc723f','hex'));
insert into t5 values(4, "[0,2,3]");
insert into t5 values(5, decode('05486c3f3ee2863e713d503dd58e8e3e7b88743f','hex')); -- be1... is float32[5]
invalid input: expected vector dimension 3 != actual dimension 5.
insert into t5 values(6, decode('9be2123fcf92de3e','hex')); -- be1... is float32[2]
invalid input: expected vector dimension 3 != actual dimension 2.
select * from t5;
a    b
1    [0.34881967, 0.0028086076, 0.5752134]
2    [0.95072955, 0.54392916, 0.30788785]
3    [0.37520403, 0.13316834, 0.9481958]
4    [0, 2, 3]
select * from t5 where t5.b > "[0,0,0]";
a    b
1    [0.34881967, 0.0028086076, 0.5752134]
2    [0.95072955, 0.54392916, 0.30788785]
3    [0.37520403, 0.13316834, 0.9481958]
4    [0, 2, 3]
select encode(b,'hex') from t5;
encode(b, hex)
7e98b23e9e10383b2f41133f
0363733ff13e0b3f7aa39d3e
be1ac03e485d083ef6bc723f
000000000000004000004040
create table t6(a int, b vecf32(3));
insert into t6 values(1, null);
insert into t6 (a,b) values (1, '[1,2,3]'), (2, '[4,5,6]'), (3, '[2,1,1]'), (4, '[7,8,9]'), (5, '[0,0,0]'), (6, '[3,1,2]');
select * from t6;
a    b
1    null
1    [1, 2, 3]
2    [4, 5, 6]
3    [2, 1, 1]
4    [7, 8, 9]
5    [0, 0, 0]
6    [3, 1, 2]
update t6 set b = NULL;
select * from t6;
a    b
1    null
1    null
2    null
3    null
4    null
5    null
6    null
insert into vec_table values(2, "[0,2,3]", "[4,4,6]");
insert into vec_table values(3, "[1,3,3]", "[4,1,6]");
select mo_ctl('dn', 'flush', 'vecdb.vec_table');
mo_ctl(dn, flush, vecdb.vec_table)
{\n  "method": "Flush",\n  "result": [\n    {\n      "returnStr": "OK"\n    }\n  ]\n}\n
select mo_ctl('dn', 'flush', 'vecdb.t6');
mo_ctl(dn, flush, vecdb.t6)
{\n  "method": "Flush",\n  "result": [\n    {\n      "returnStr": "OK"\n    }\n  ]\n}\n
select * from vec_table where b> "[1,2,3]";
a    b    c
3    [1, 3, 3]    [4, 1, 6]
select * from vec_table where b!= "[1,2,3]";
a    b    c
2    [0, 2, 3]    [4, 4, 6]
3    [1, 3, 3]    [4, 1, 6]
select * from vec_table where b= "[1,2,3]";
a    b    c
1    [1, 2, 3]    [4, 5, 6]
drop database vecdb;
