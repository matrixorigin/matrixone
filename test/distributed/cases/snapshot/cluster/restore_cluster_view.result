drop account if exists acc01;
create account acc01 admin_name = 'test_account' identified by '111';
drop account if exists acc02;
create account acc02 admin_name = 'test_account' identified by '111';
CREATE DATABASE School;
USE School;
drop table if exists Students;
CREATE TABLE Students (
StudentID INT PRIMARY KEY,
Name VARCHAR(100),
Grade DECIMAL(3, 2)
);
drop table if exists Courses;
CREATE TABLE Courses (
CourseID INT PRIMARY KEY,
Title VARCHAR(100),
Credits INT
);
drop table if exists Enrollments;
CREATE TABLE Enrollments (
EnrollmentID INT PRIMARY KEY,
StudentID INT,
CourseID INT,
Grade DECIMAL(3, 2),
FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);
INSERT INTO Students (StudentID, Name, Grade) VALUES (1, 'Alice Smith', 3.5);
INSERT INTO Students (StudentID, Name, Grade) VALUES (2, 'Bob Johnson', 3.7);
INSERT INTO Courses (CourseID, Title, Credits) VALUES (101, 'Calculus', 4);
INSERT INTO Courses (CourseID, Title, Credits) VALUES (102, 'Physics', 4);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (1, 1, 101, 3.5);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (2, 2, 101, 3.6);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (3, 1, 102, 3.7);
select * from Students;
studentid    name    grade
1    Alice Smith    3.50
2    Bob Johnson    3.70
select * from Courses;
courseid    title    credits
101    Calculus    4
102    Physics    4
select * from Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    101    3.60
3    1    102    3.70
CREATE VIEW StudentCourses AS
SELECT s.Name AS StudentName, c.Title AS CourseTitle, e.Grade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID;
CREATE VIEW HighGradeStudents AS
SELECT s.StudentID, s.Name, AVG(e.Grade) AS AverageGrade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID, s.Name
HAVING AVG(e.Grade) >3;
CREATE VIEW CourseAverageGrades AS
SELECT c.CourseID, c.Title, AVG(e.Grade) AS AverageGrade
FROM Courses c
JOIN Enrollments e ON c.CourseID = e.CourseID
GROUP BY c.CourseID, c.Title;
select * from StudentCourses;
studentname    coursetitle    grade
Alice Smith    Calculus    3.50
Bob Johnson    Calculus    3.60
Alice Smith    Physics    3.70
select * from HighGradeStudents;
studentid    name    averagegrade
1    Alice Smith    3.60000000
2    Bob Johnson    3.60000000
select * from CourseAverageGrades;
courseid    title    averagegrade
101    Calculus    3.55000000
102    Physics    3.70000000
CREATE DATABASE University;
USE University;
drop table if exists Departments;
CREATE TABLE Departments (
DepartmentID INT PRIMARY KEY,
Name VARCHAR(100),
Head VARCHAR(100)
);
drop table if exists Professors;
CREATE TABLE Professors (
ProfessorID INT PRIMARY KEY,
Name VARCHAR(100),
DepartmentID INT,
FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);
drop table if exists Students;
CREATE TABLE Students (
StudentID INT PRIMARY KEY,
Name VARCHAR(100),
DepartmentID INT,
FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);
drop table if exists Courses;
CREATE TABLE Courses (
CourseID INT PRIMARY KEY,
Title VARCHAR(100),
DepartmentID INT,
Credits INT,
FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);
drop table if exists Enrollments;
CREATE TABLE Enrollments (
EnrollmentID INT PRIMARY KEY,
StudentID INT,
CourseID INT,
Grade DECIMAL(3, 2),
FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);
drop table if exists ProfessorsCourses;
CREATE TABLE ProfessorCourses (
ProfessorID INT,
CourseID INT,
Semester VARCHAR(50),
FOREIGN KEY (ProfessorID) REFERENCES Professors(ProfessorID),
FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),
PRIMARY KEY (ProfessorID, CourseID, Semester)
);
INSERT INTO Departments (DepartmentID, Name, Head) VALUES (1, 'Computer Science', 'Dr. Alice');
INSERT INTO Departments (DepartmentID, Name, Head) VALUES (2, 'Mathematics', 'Dr. Bob');
INSERT INTO Professors (ProfessorID, Name, DepartmentID) VALUES (1, 'Dr. Charlie', 1);
INSERT INTO Professors (ProfessorID, Name, DepartmentID) VALUES (2, 'Dr. Delta', 2);
INSERT INTO Students (StudentID, Name, DepartmentID) VALUES (1, 'Eve', 1);
INSERT INTO Students (StudentID, Name, DepartmentID) VALUES (2, 'Frank', 2);
INSERT INTO Courses (CourseID, Title, DepartmentID, Credits) VALUES (101, 'Introduction to Computer Science', 1, 4);
INSERT INTO Courses (CourseID, Title, DepartmentID, Credits) VALUES (102, 'Advanced Mathematics', 2, 3);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (1, 1, 101, 3.5);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (2, 2, 102, 3.6);
INSERT INTO ProfessorCourses (ProfessorID, CourseID, Semester) VALUES (1, 101, 'Fall 2024');
INSERT INTO ProfessorCourses (ProfessorID, CourseID, Semester) VALUES (2, 102, 'Spring 2024');
select * from Departments;
departmentid    name    head
1    Computer Science    Dr. Alice
2    Mathematics    Dr. Bob
select * from Professors;
professorid    name    departmentid
1    Dr. Charlie    1
2    Dr. Delta    2
select * from Students;
studentid    name    departmentid
1    Eve    1
2    Frank    2
select * from Courses;
courseid    title    departmentid    credits
101    Introduction to Computer Science    1    4
102    Advanced Mathematics    2    3
select * from Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    102    3.60
select * from ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
CREATE VIEW StudentCourses AS
SELECT s.Name AS StudentName, c.Title AS CourseTitle, e.Grade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID;
CREATE VIEW ProfessorCourses AS
SELECT p.Name AS ProfessorName, c.Title AS CourseTitle, pc.Semester
FROM Professors p
JOIN ProfessorCourses pc ON p.ProfessorID = pc.ProfessorID
JOIN Courses c ON pc.CourseID = c.CourseID;
table professorcourses already exists
CREATE VIEW DepartmentAverageGrade AS
SELECT d.Name AS DepartmentName, AVG(e.Grade) AS AverageGrade
FROM Departments d
JOIN Students s ON d.DepartmentID = s.DepartmentID
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY d.DepartmentID, d.Name;
CREATE VIEW TopStudents AS
SELECT s.Name, AVG(e.Grade) AS AverageGrade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID, s.Name
HAVING AVG(e.Grade) >= 3;
select * from StudentCourses;
studentname    coursetitle    grade
Eve    Introduction to Computer Science    3.50
Frank    Advanced Mathematics    3.60
select * from ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
select * from DepartmentAverageGrade;
departmentname    averagegrade
Computer Science    3.50000000
Mathematics    3.60000000
select * from TopStudents;
name    averagegrade
Eve    3.50000000
Frank    3.60000000
CREATE DATABASE EducationSystem;
USE EducationSystem;
CREATE VIEW ComprehensiveStudentCourseInfo AS
SELECT s.Name AS StudentName, s.Grade AS StudentGrade, c.Title AS CourseTitle, e.Grade AS CourseGrade
FROM School.Students s
JOIN School.Enrollments e ON s.StudentID = e.StudentID
JOIN School.Courses c ON e.CourseID = c.CourseID
UNION
SELECT u.Name AS StudentName, NULL AS StudentGrade, uc.Title AS CourseTitle, ue.Grade AS CourseGrade
FROM University.Students u
JOIN University.Enrollments ue ON u.StudentID = ue.StudentID
JOIN University.Courses uc ON ue.CourseID = uc.CourseID;
CREATE VIEW ComprehensiveEducatorInfo AS
SELECT p.Name AS ProfessorName, d.Name AS DepartmentName, c.Title AS CourseTitle, pc.Semester
FROM University.Professors p
JOIN University.ProfessorCourses pc ON p.ProfessorID = pc.ProfessorID
JOIN University.Courses c ON pc.CourseID = c.CourseID
JOIN University.Departments d ON p.DepartmentID = d.DepartmentID;
CREATE VIEW StudentOverallPerformance AS
SELECT s.Name AS StudentName, s.Grade AS StudentGrade, AVG(e.Grade) AS AverageGrade
FROM School.Students s
JOIN School.Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID, s.Name, s.Grade
UNION
SELECT u.Name AS StudentName, NULL AS StudentGrade, AVG(ue.Grade) AS AverageGrade
FROM University.Students u
JOIN University.Enrollments ue ON u.StudentID = ue.StudentID
GROUP BY u.StudentID, u.Name;
select * from ComprehensiveStudentCourseInfo;
studentname    studentgrade    coursetitle    coursegrade
Eve    null    Introduction to Computer Science    3.50
Frank    null    Advanced Mathematics    3.60
Alice Smith    3.50    Calculus    3.50
Bob Johnson    3.70    Calculus    3.60
Alice Smith    3.50    Physics    3.70
select * from ComprehensiveEducatorInfo;
professorname    departmentname    coursetitle    semester
Dr. Charlie    Computer Science    Introduction to Computer Science    Fall 2024
Dr. Delta    Mathematics    Advanced Mathematics    Spring 2024
select * from StudentOverallPerformance;
studentname    studentgrade    averagegrade
Eve    null    3.50000000
Frank    null    3.60000000
Alice Smith    3.50    3.60000000
Bob Johnson    3.70    3.60000000
CREATE DATABASE School;
USE School;
drop table if exists Students;
CREATE TABLE Students (
StudentID INT PRIMARY KEY,
Name VARCHAR(100),
Grade DECIMAL(3, 2)
);
drop table if exists Courses;
CREATE TABLE Courses (
CourseID INT PRIMARY KEY,
Title VARCHAR(100),
Credits INT
);
drop table if exists Enrollments;
CREATE TABLE Enrollments (
EnrollmentID INT PRIMARY KEY,
StudentID INT,
CourseID INT,
Grade DECIMAL(3, 2),
FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);
INSERT INTO Students (StudentID, Name, Grade) VALUES (1, 'Alice Smith', 3.5);
INSERT INTO Students (StudentID, Name, Grade) VALUES (2, 'Bob Johnson', 3.7);
INSERT INTO Courses (CourseID, Title, Credits) VALUES (101, 'Calculus', 4);
INSERT INTO Courses (CourseID, Title, Credits) VALUES (102, 'Physics', 4);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (1, 1, 101, 3.5);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (2, 2, 101, 3.6);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (3, 1, 102, 3.7);
select * from Students;
studentid    name    grade
1    Alice Smith    3.50
2    Bob Johnson    3.70
select * from Courses;
courseid    title    credits
101    Calculus    4
102    Physics    4
select * from Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    101    3.60
3    1    102    3.70
CREATE VIEW StudentCourses AS
SELECT s.Name AS StudentName, c.Title AS CourseTitle, e.Grade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID;
CREATE VIEW HighGradeStudents AS
SELECT s.StudentID, s.Name, AVG(e.Grade) AS AverageGrade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID, s.Name
HAVING AVG(e.Grade) >3;
CREATE VIEW CourseAverageGrades AS
SELECT c.CourseID, c.Title, AVG(e.Grade) AS AverageGrade
FROM Courses c
JOIN Enrollments e ON c.CourseID = e.CourseID
GROUP BY c.CourseID, c.Title;
select * from StudentCourses;
studentname    coursetitle    grade
Alice Smith    Calculus    3.50
Bob Johnson    Calculus    3.60
Alice Smith    Physics    3.70
select * from HighGradeStudents;
studentid    name    averagegrade
1    Alice Smith    3.60000000
2    Bob Johnson    3.60000000
select * from CourseAverageGrades;
courseid    title    averagegrade
101    Calculus    3.55000000
102    Physics    3.70000000
CREATE DATABASE University;
USE University;
drop table if exists Departments;
CREATE TABLE Departments (
DepartmentID INT PRIMARY KEY,
Name VARCHAR(100),
Head VARCHAR(100)
);
drop table if exists Professors;
CREATE TABLE Professors (
ProfessorID INT PRIMARY KEY,
Name VARCHAR(100),
DepartmentID INT,
FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);
drop table if exists Students;
CREATE TABLE Students (
StudentID INT PRIMARY KEY,
Name VARCHAR(100),
DepartmentID INT,
FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);
drop table if exists Courses;
CREATE TABLE Courses (
CourseID INT PRIMARY KEY,
Title VARCHAR(100),
DepartmentID INT,
Credits INT,
FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);
drop table if exists Enrollments;
CREATE TABLE Enrollments (
EnrollmentID INT PRIMARY KEY,
StudentID INT,
CourseID INT,
Grade DECIMAL(3, 2),
FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);
drop table if exists ProfessorsCourses;
CREATE TABLE ProfessorCourses (
ProfessorID INT,
CourseID INT,
Semester VARCHAR(50),
FOREIGN KEY (ProfessorID) REFERENCES Professors(ProfessorID),
FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),
PRIMARY KEY (ProfessorID, CourseID, Semester)
);
INSERT INTO Departments (DepartmentID, Name, Head) VALUES (1, 'Computer Science', 'Dr. Alice');
INSERT INTO Departments (DepartmentID, Name, Head) VALUES (2, 'Mathematics', 'Dr. Bob');
INSERT INTO Professors (ProfessorID, Name, DepartmentID) VALUES (1, 'Dr. Charlie', 1);
INSERT INTO Professors (ProfessorID, Name, DepartmentID) VALUES (2, 'Dr. Delta', 2);
INSERT INTO Students (StudentID, Name, DepartmentID) VALUES (1, 'Eve', 1);
INSERT INTO Students (StudentID, Name, DepartmentID) VALUES (2, 'Frank', 2);
INSERT INTO Courses (CourseID, Title, DepartmentID, Credits) VALUES (101, 'Introduction to Computer Science', 1, 4);
INSERT INTO Courses (CourseID, Title, DepartmentID, Credits) VALUES (102, 'Advanced Mathematics', 2, 3);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (1, 1, 101, 3.5);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (2, 2, 102, 3.6);
INSERT INTO ProfessorCourses (ProfessorID, CourseID, Semester) VALUES (1, 101, 'Fall 2024');
INSERT INTO ProfessorCourses (ProfessorID, CourseID, Semester) VALUES (2, 102, 'Spring 2024');
select * from Departments;
departmentid    name    head
1    Computer Science    Dr. Alice
2    Mathematics    Dr. Bob
select * from Professors;
professorid    name    departmentid
1    Dr. Charlie    1
2    Dr. Delta    2
select * from Students;
studentid    name    departmentid
1    Eve    1
2    Frank    2
select * from Courses;
courseid    title    departmentid    credits
101    Introduction to Computer Science    1    4
102    Advanced Mathematics    2    3
select * from Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    102    3.60
select * from ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
CREATE VIEW StudentCourses AS
SELECT s.Name AS StudentName, c.Title AS CourseTitle, e.Grade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID;
CREATE VIEW ProfessorCourses AS
SELECT p.Name AS ProfessorName, c.Title AS CourseTitle, pc.Semester
FROM Professors p
JOIN ProfessorCourses pc ON p.ProfessorID = pc.ProfessorID
JOIN Courses c ON pc.CourseID = c.CourseID;
table professorcourses already exists
CREATE VIEW DepartmentAverageGrade AS
SELECT d.Name AS DepartmentName, AVG(e.Grade) AS AverageGrade
FROM Departments d
JOIN Students s ON d.DepartmentID = s.DepartmentID
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY d.DepartmentID, d.Name;
CREATE VIEW TopStudents AS
SELECT s.Name, AVG(e.Grade) AS AverageGrade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID, s.Name
HAVING AVG(e.Grade) >= 3;
select * from StudentCourses;
studentname    coursetitle    grade
Eve    Introduction to Computer Science    3.50
Frank    Advanced Mathematics    3.60
select * from ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
select * from DepartmentAverageGrade;
departmentname    averagegrade
Computer Science    3.50000000
Mathematics    3.60000000
select * from TopStudents;
name    averagegrade
Eve    3.50000000
Frank    3.60000000
CREATE DATABASE EducationSystem;
USE EducationSystem;
CREATE VIEW ComprehensiveStudentCourseInfo AS
SELECT s.Name AS StudentName, s.Grade AS StudentGrade, c.Title AS CourseTitle, e.Grade AS CourseGrade
FROM School.Students s
JOIN School.Enrollments e ON s.StudentID = e.StudentID
JOIN School.Courses c ON e.CourseID = c.CourseID
UNION
SELECT u.Name AS StudentName, NULL AS StudentGrade, uc.Title AS CourseTitle, ue.Grade AS CourseGrade
FROM University.Students u
JOIN University.Enrollments ue ON u.StudentID = ue.StudentID
JOIN University.Courses uc ON ue.CourseID = uc.CourseID;
CREATE VIEW ComprehensiveEducatorInfo AS
SELECT p.Name AS ProfessorName, d.Name AS DepartmentName, c.Title AS CourseTitle, pc.Semester
FROM University.Professors p
JOIN University.ProfessorCourses pc ON p.ProfessorID = pc.ProfessorID
JOIN University.Courses c ON pc.CourseID = c.CourseID
JOIN University.Departments d ON p.DepartmentID = d.DepartmentID;
CREATE VIEW StudentOverallPerformance AS
SELECT s.Name AS StudentName, s.Grade AS StudentGrade, AVG(e.Grade) AS AverageGrade
FROM School.Students s
JOIN School.Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID, s.Name, s.Grade
UNION
SELECT u.Name AS StudentName, NULL AS StudentGrade, AVG(ue.Grade) AS AverageGrade
FROM University.Students u
JOIN University.Enrollments ue ON u.StudentID = ue.StudentID
GROUP BY u.StudentID, u.Name;
select * from ComprehensiveStudentCourseInfo;
studentname    studentgrade    coursetitle    coursegrade
Alice Smith    3.50    Calculus    3.50
Bob Johnson    3.70    Calculus    3.60
Alice Smith    3.50    Physics    3.70
Eve    null    Introduction to Computer Science    3.50
Frank    null    Advanced Mathematics    3.60
select * from ComprehensiveEducatorInfo;
professorname    departmentname    coursetitle    semester
Dr. Charlie    Computer Science    Introduction to Computer Science    Fall 2024
Dr. Delta    Mathematics    Advanced Mathematics    Spring 2024
select * from StudentOverallPerformance;
studentname    studentgrade    averagegrade
Eve    null    3.50000000
Frank    null    3.60000000
Alice Smith    3.50    3.60000000
Bob Johnson    3.70    3.60000000
CREATE DATABASE School;
USE School;
drop table if exists Students;
CREATE TABLE Students (
StudentID INT PRIMARY KEY,
Name VARCHAR(100),
Grade DECIMAL(3, 2)
);
drop table if exists Courses;
CREATE TABLE Courses (
CourseID INT PRIMARY KEY,
Title VARCHAR(100),
Credits INT
);
drop table if exists Enrollments;
CREATE TABLE Enrollments (
EnrollmentID INT PRIMARY KEY,
StudentID INT,
CourseID INT,
Grade DECIMAL(3, 2),
FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);
INSERT INTO Students (StudentID, Name, Grade) VALUES (1, 'Alice Smith', 3.5);
INSERT INTO Students (StudentID, Name, Grade) VALUES (2, 'Bob Johnson', 3.7);
INSERT INTO Courses (CourseID, Title, Credits) VALUES (101, 'Calculus', 4);
INSERT INTO Courses (CourseID, Title, Credits) VALUES (102, 'Physics', 4);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (1, 1, 101, 3.5);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (2, 2, 101, 3.6);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (3, 1, 102, 3.7);
select * from Students;
studentid    name    grade
1    Alice Smith    3.50
2    Bob Johnson    3.70
select * from Courses;
courseid    title    credits
101    Calculus    4
102    Physics    4
select * from Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    101    3.60
3    1    102    3.70
CREATE VIEW StudentCourses AS
SELECT s.Name AS StudentName, c.Title AS CourseTitle, e.Grade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID;
CREATE VIEW HighGradeStudents AS
SELECT s.StudentID, s.Name, AVG(e.Grade) AS AverageGrade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID, s.Name
HAVING AVG(e.Grade) >3;
CREATE VIEW CourseAverageGrades AS
SELECT c.CourseID, c.Title, AVG(e.Grade) AS AverageGrade
FROM Courses c
JOIN Enrollments e ON c.CourseID = e.CourseID
GROUP BY c.CourseID, c.Title;
select * from StudentCourses;
studentname    coursetitle    grade
Alice Smith    Calculus    3.50
Bob Johnson    Calculus    3.60
Alice Smith    Physics    3.70
select * from HighGradeStudents;
studentid    name    averagegrade
1    Alice Smith    3.60000000
2    Bob Johnson    3.60000000
select * from CourseAverageGrades;
courseid    title    averagegrade
101    Calculus    3.55000000
102    Physics    3.70000000
CREATE DATABASE University;
USE University;
drop table if exists Departments;
CREATE TABLE Departments (
DepartmentID INT PRIMARY KEY,
Name VARCHAR(100),
Head VARCHAR(100)
);
drop table if exists Professors;
CREATE TABLE Professors (
ProfessorID INT PRIMARY KEY,
Name VARCHAR(100),
DepartmentID INT,
FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);
drop table if exists Students;
CREATE TABLE Students (
StudentID INT PRIMARY KEY,
Name VARCHAR(100),
DepartmentID INT,
FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);
drop table if exists Courses;
CREATE TABLE Courses (
CourseID INT PRIMARY KEY,
Title VARCHAR(100),
DepartmentID INT,
Credits INT,
FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);
drop table if exists Enrollments;
CREATE TABLE Enrollments (
EnrollmentID INT PRIMARY KEY,
StudentID INT,
CourseID INT,
Grade DECIMAL(3, 2),
FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);
drop table if exists ProfessorsCourses;
CREATE TABLE ProfessorCourses (
ProfessorID INT,
CourseID INT,
Semester VARCHAR(50),
FOREIGN KEY (ProfessorID) REFERENCES Professors(ProfessorID),
FOREIGN KEY (CourseID) REFERENCES Courses(CourseID),
PRIMARY KEY (ProfessorID, CourseID, Semester)
);
INSERT INTO Departments (DepartmentID, Name, Head) VALUES (1, 'Computer Science', 'Dr. Alice');
INSERT INTO Departments (DepartmentID, Name, Head) VALUES (2, 'Mathematics', 'Dr. Bob');
INSERT INTO Professors (ProfessorID, Name, DepartmentID) VALUES (1, 'Dr. Charlie', 1);
INSERT INTO Professors (ProfessorID, Name, DepartmentID) VALUES (2, 'Dr. Delta', 2);
INSERT INTO Students (StudentID, Name, DepartmentID) VALUES (1, 'Eve', 1);
INSERT INTO Students (StudentID, Name, DepartmentID) VALUES (2, 'Frank', 2);
INSERT INTO Courses (CourseID, Title, DepartmentID, Credits) VALUES (101, 'Introduction to Computer Science', 1, 4);
INSERT INTO Courses (CourseID, Title, DepartmentID, Credits) VALUES (102, 'Advanced Mathematics', 2, 3);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (1, 1, 101, 3.5);
INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES (2, 2, 102, 3.6);
INSERT INTO ProfessorCourses (ProfessorID, CourseID, Semester) VALUES (1, 101, 'Fall 2024');
INSERT INTO ProfessorCourses (ProfessorID, CourseID, Semester) VALUES (2, 102, 'Spring 2024');
select * from Departments;
departmentid    name    head
1    Computer Science    Dr. Alice
2    Mathematics    Dr. Bob
select * from Professors;
professorid    name    departmentid
1    Dr. Charlie    1
2    Dr. Delta    2
select * from Students;
studentid    name    departmentid
1    Eve    1
2    Frank    2
select * from Courses;
courseid    title    departmentid    credits
101    Introduction to Computer Science    1    4
102    Advanced Mathematics    2    3
select * from Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    102    3.60
select * from ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
CREATE VIEW StudentCourses AS
SELECT s.Name AS StudentName, c.Title AS CourseTitle, e.Grade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID;
CREATE VIEW ProfessorCourses AS
SELECT p.Name AS ProfessorName, c.Title AS CourseTitle, pc.Semester
FROM Professors p
JOIN ProfessorCourses pc ON p.ProfessorID = pc.ProfessorID
JOIN Courses c ON pc.CourseID = c.CourseID;
table professorcourses already exists
CREATE VIEW DepartmentAverageGrade AS
SELECT d.Name AS DepartmentName, AVG(e.Grade) AS AverageGrade
FROM Departments d
JOIN Students s ON d.DepartmentID = s.DepartmentID
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY d.DepartmentID, d.Name;
CREATE VIEW TopStudents AS
SELECT s.Name, AVG(e.Grade) AS AverageGrade
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID, s.Name
HAVING AVG(e.Grade) >= 3;
select * from StudentCourses;
studentname    coursetitle    grade
Eve    Introduction to Computer Science    3.50
Frank    Advanced Mathematics    3.60
select * from ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
select * from DepartmentAverageGrade;
departmentname    averagegrade
Computer Science    3.50000000
Mathematics    3.60000000
select * from TopStudents;
name    averagegrade
Eve    3.50000000
Frank    3.60000000
CREATE DATABASE EducationSystem;
USE EducationSystem;
CREATE VIEW ComprehensiveStudentCourseInfo AS
SELECT s.Name AS StudentName, s.Grade AS StudentGrade, c.Title AS CourseTitle, e.Grade AS CourseGrade
FROM School.Students s
JOIN School.Enrollments e ON s.StudentID = e.StudentID
JOIN School.Courses c ON e.CourseID = c.CourseID
UNION
SELECT u.Name AS StudentName, NULL AS StudentGrade, uc.Title AS CourseTitle, ue.Grade AS CourseGrade
FROM University.Students u
JOIN University.Enrollments ue ON u.StudentID = ue.StudentID
JOIN University.Courses uc ON ue.CourseID = uc.CourseID;
CREATE VIEW ComprehensiveEducatorInfo AS
SELECT p.Name AS ProfessorName, d.Name AS DepartmentName, c.Title AS CourseTitle, pc.Semester
FROM University.Professors p
JOIN University.ProfessorCourses pc ON p.ProfessorID = pc.ProfessorID
JOIN University.Courses c ON pc.CourseID = c.CourseID
JOIN University.Departments d ON p.DepartmentID = d.DepartmentID;
CREATE VIEW StudentOverallPerformance AS
SELECT s.Name AS StudentName, s.Grade AS StudentGrade, AVG(e.Grade) AS AverageGrade
FROM School.Students s
JOIN School.Enrollments e ON s.StudentID = e.StudentID
GROUP BY s.StudentID, s.Name, s.Grade
UNION
SELECT u.Name AS StudentName, NULL AS StudentGrade, AVG(ue.Grade) AS AverageGrade
FROM University.Students u
JOIN University.Enrollments ue ON u.StudentID = ue.StudentID
GROUP BY u.StudentID, u.Name;
select * from ComprehensiveStudentCourseInfo;
studentname    studentgrade    coursetitle    coursegrade
Eve    null    Introduction to Computer Science    3.50
Frank    null    Advanced Mathematics    3.60
Alice Smith    3.50    Calculus    3.50
Bob Johnson    3.70    Calculus    3.60
Alice Smith    3.50    Physics    3.70
select * from ComprehensiveEducatorInfo;
professorname    departmentname    coursetitle    semester
Dr. Charlie    Computer Science    Introduction to Computer Science    Fall 2024
Dr. Delta    Mathematics    Advanced Mathematics    Spring 2024
select * from StudentOverallPerformance;
studentname    studentgrade    averagegrade
Eve    null    3.50000000
Frank    null    3.60000000
Alice Smith    3.50    3.60000000
Bob Johnson    3.70    3.60000000
drop snapshot if exists cluster_sp;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
create snapshot cluster_sp for cluster;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
cluster_sp    2024-06-28 02:33:52.143117    cluster            
drop database if exists EducationSystem;
drop database if exists School;
drop database if exists University;
drop database if exists EducationSystem;
drop database if exists School;
drop database if exists University;
drop database if exists EducationSystem;
drop database if exists School;
drop database if exists University;
restore cluster from snapshot cluster_sp;
select * from School.Students;
studentid    name    grade
1    Alice Smith    3.50
2    Bob Johnson    3.70
select * from School.Courses;
courseid    title    credits
101    Calculus    4
102    Physics    4
select * from School.Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    101    3.60
3    1    102    3.70
select * from School.StudentCourses;
studentname    coursetitle    grade
Alice Smith    Calculus    3.50
Bob Johnson    Calculus    3.60
Alice Smith    Physics    3.70
select * from School.HighGradeStudents;
studentid    name    averagegrade
1    Alice Smith    3.60000000
2    Bob Johnson    3.60000000
select * from School.CourseAverageGrades;
courseid    title    averagegrade
101    Calculus    3.55000000
102    Physics    3.70000000
select * from University.Departments;
departmentid    name    head
1    Computer Science    Dr. Alice
2    Mathematics    Dr. Bob
select * from University.Professors;
professorid    name    departmentid
1    Dr. Charlie    1
2    Dr. Delta    2
select * from University.Students;
studentid    name    departmentid
1    Eve    1
2    Frank    2
select * from University.Courses;
courseid    title    departmentid    credits
101    Introduction to Computer Science    1    4
102    Advanced Mathematics    2    3
select * from University.Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    102    3.60
select * from University.ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
select * from University.StudentCourses;
studentname    coursetitle    grade
Eve    Introduction to Computer Science    3.50
Frank    Advanced Mathematics    3.60
select * from University.ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
select * from University.DepartmentAverageGrade;
departmentname    averagegrade
Computer Science    3.50000000
Mathematics    3.60000000
select * from University.TopStudents;
name    averagegrade
Eve    3.50000000
Frank    3.60000000
select * from EducationSystem.ComprehensiveStudentCourseInfo;
studentname    studentgrade    coursetitle    coursegrade
Alice Smith    3.50    Calculus    3.50
Bob Johnson    3.70    Calculus    3.60
Alice Smith    3.50    Physics    3.70
Eve    null    Introduction to Computer Science    3.50
Frank    null    Advanced Mathematics    3.60
select * from EducationSystem.ComprehensiveEducatorInfo;
professorname    departmentname    coursetitle    semester
Dr. Charlie    Computer Science    Introduction to Computer Science    Fall 2024
Dr. Delta    Mathematics    Advanced Mathematics    Spring 2024
select * from EducationSystem.StudentOverallPerformance;
studentname    studentgrade    averagegrade
Eve    null    3.50000000
Frank    null    3.60000000
Alice Smith    3.50    3.60000000
Bob Johnson    3.70    3.60000000
select * from School.Students;
studentid    name    grade
1    Alice Smith    3.50
2    Bob Johnson    3.70
select * from School.Courses;
courseid    title    credits
101    Calculus    4
102    Physics    4
select * from School.Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    101    3.60
3    1    102    3.70
select * from School.StudentCourses;
studentname    coursetitle    grade
Alice Smith    Calculus    3.50
Bob Johnson    Calculus    3.60
Alice Smith    Physics    3.70
select * from School.HighGradeStudents;
studentid    name    averagegrade
1    Alice Smith    3.60000000
2    Bob Johnson    3.60000000
select * from School.CourseAverageGrades;
courseid    title    averagegrade
101    Calculus    3.55000000
102    Physics    3.70000000
select * from University.Departments;
departmentid    name    head
1    Computer Science    Dr. Alice
2    Mathematics    Dr. Bob
select * from University.Professors;
professorid    name    departmentid
1    Dr. Charlie    1
2    Dr. Delta    2
select * from University.Students;
studentid    name    departmentid
1    Eve    1
2    Frank    2
select * from University.Courses;
courseid    title    departmentid    credits
101    Introduction to Computer Science    1    4
102    Advanced Mathematics    2    3
select * from University.Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    102    3.60
select * from University.ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
select * from University.StudentCourses;
studentname    coursetitle    grade
Eve    Introduction to Computer Science    3.50
Frank    Advanced Mathematics    3.60
select * from University.ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
select * from University.DepartmentAverageGrade;
departmentname    averagegrade
Computer Science    3.50000000
Mathematics    3.60000000
select * from University.TopStudents;
name    averagegrade
Eve    3.50000000
Frank    3.60000000
select * from EducationSystem.ComprehensiveStudentCourseInfo;
studentname    studentgrade    coursetitle    coursegrade
Alice Smith    3.50    Calculus    3.50
Bob Johnson    3.70    Calculus    3.60
Alice Smith    3.50    Physics    3.70
Eve    null    Introduction to Computer Science    3.50
Frank    null    Advanced Mathematics    3.60
select * from EducationSystem.ComprehensiveEducatorInfo;
professorname    departmentname    coursetitle    semester
Dr. Charlie    Computer Science    Introduction to Computer Science    Fall 2024
Dr. Delta    Mathematics    Advanced Mathematics    Spring 2024
select * from EducationSystem.StudentOverallPerformance;
studentname    studentgrade    averagegrade
Eve    null    3.50000000
Frank    null    3.60000000
Alice Smith    3.50    3.60000000
Bob Johnson    3.70    3.60000000
select * from School.Students;
studentid    name    grade
1    Alice Smith    3.50
2    Bob Johnson    3.70
select * from School.Courses;
courseid    title    credits
101    Calculus    4
102    Physics    4
select * from School.Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    101    3.60
3    1    102    3.70
select * from School.StudentCourses;
studentname    coursetitle    grade
Alice Smith    Calculus    3.50
Bob Johnson    Calculus    3.60
Alice Smith    Physics    3.70
select * from School.HighGradeStudents;
studentid    name    averagegrade
1    Alice Smith    3.60000000
2    Bob Johnson    3.60000000
select * from School.CourseAverageGrades;
courseid    title    averagegrade
101    Calculus    3.55000000
102    Physics    3.70000000
select * from University.Departments;
departmentid    name    head
1    Computer Science    Dr. Alice
2    Mathematics    Dr. Bob
select * from University.Professors;
professorid    name    departmentid
1    Dr. Charlie    1
2    Dr. Delta    2
select * from University.Students;
studentid    name    departmentid
1    Eve    1
2    Frank    2
select * from University.Courses;
courseid    title    departmentid    credits
101    Introduction to Computer Science    1    4
102    Advanced Mathematics    2    3
select * from University.Enrollments;
enrollmentid    studentid    courseid    grade
1    1    101    3.50
2    2    102    3.60
select * from University.ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
select * from University.StudentCourses;
studentname    coursetitle    grade
Eve    Introduction to Computer Science    3.50
Frank    Advanced Mathematics    3.60
select * from University.ProfessorCourses;
professorid    courseid    semester
1    101    Fall 2024
2    102    Spring 2024
select * from University.DepartmentAverageGrade;
departmentname    averagegrade
Computer Science    3.50000000
Mathematics    3.60000000
select * from University.TopStudents;
name    averagegrade
Eve    3.50000000
Frank    3.60000000
select * from EducationSystem.ComprehensiveStudentCourseInfo;
studentname    studentgrade    coursetitle    coursegrade
Alice Smith    3.50    Calculus    3.50
Bob Johnson    3.70    Calculus    3.60
Alice Smith    3.50    Physics    3.70
Eve    null    Introduction to Computer Science    3.50
Frank    null    Advanced Mathematics    3.60
select * from EducationSystem.ComprehensiveEducatorInfo;
professorname    departmentname    coursetitle    semester
Dr. Charlie    Computer Science    Introduction to Computer Science    Fall 2024
Dr. Delta    Mathematics    Advanced Mathematics    Spring 2024
select * from EducationSystem.StudentOverallPerformance;
studentname    studentgrade    averagegrade
Eve    null    3.50000000
Frank    null    3.60000000
Alice Smith    3.50    3.60000000
Bob Johnson    3.70    3.60000000
drop snapshot if exists cluster_sp;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
drop database if exists EducationSystem;
drop database if exists School;
drop database if exists University;
drop account if exists acc01;
drop account if exists acc02;
