set global enable_privilege_cache = off;
create database db1;
use db1;
select name, db from mo_catalog.mo_user_defined_function;
name    db
create function helloworld () returns int language sql as 'select id from tbl1 limit 1';
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
create function db1.helloworld5 () returns int language sql as 'select id from tbl1 limit 1';
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
helloworld5    db1
create snapshot snapshot1 for account sys;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot1    2024-07-03 07:28:57.400898    account    sys        
drop function helloworld();
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld5    db1
create snapshot snapshot2 for account sys;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:57.426417    account    sys        
snapshot1    2024-07-03 07:28:57.400898    account    sys        
drop database db1;
select name, db from mo_catalog.mo_user_defined_function;
name    db
restore account sys from snapshot snapshot1;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:57.426417    account    sys        
snapshot1    2024-07-03 07:28:57.400898    account    sys        
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
helloworld5    db1
restore account sys from snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:57.426417    account    sys        
snapshot1    2024-07-03 07:28:57.400898    account    sys        
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld5    db1
drop snapshot snapshot1;
drop snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
drop database if exists db1;
CREATE STAGE my_ext_stage URL='s3://load/files/';
CREATE STAGE my_ext_stage URL='s3://load/files/';
internal error: the stage my_ext_stage exists
CREATE STAGE if not exists my_ext_stage URL='s3://load/files/';
SELECT stage_name from mo_catalog.mo_stages;
stage_name
my_ext_stage
CREATE STAGE my_ext_stage1 URL='s3://load/files/' CREDENTIALS={'AWS_KEY_ID'='1a2b3c' ,'AWS_SECRET_KEY'='4x5y6z'};
CREATE STAGE my_ext_stage2 URL='s3://load/files/' CREDENTIALS={'AWS_KEY_ID'='1a2b3c' ,'AWS_SECRET_KEY'='4x5y6z'};
SELECT stage_name, stage_status from mo_catalog.mo_stages;
stage_name    stage_status
my_ext_stage    disabled
my_ext_stage1    disabled
my_ext_stage2    disabled
CREATE STAGE my_ext_stage3 URL='s3://load/files/' CREDENTIALS={'AWS_KEY_ID'='1a2b3c' ,'AWS_SECRET_KEY'='4x5y6z'} ENABLE = TRUE;
SELECT stage_name, stage_status from mo_catalog.mo_stages;
stage_name    stage_status
my_ext_stage    disabled
my_ext_stage1    disabled
my_ext_stage2    disabled
my_ext_stage3    enabled
create snapshot snapshot1 for account sys;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot1    2024-07-03 07:28:57.863832    account    sys        
ALTER STAGE my_ext_stage4 SET URL='s3://load/files2/';
internal error: the stage my_ext_stage4 not exists
ALTER STAGE if exists my_ext_stage4 SET URL='s3://load/files2/';
ALTER STAGE my_ext_stage1 SET URL='s3://load/files2/' CREDENTIALS={'AWS_KEY_ID'='1a2b3d' ,'AWS_SECRET_KEY'='4x5y6z'};
internal error: at most one option at a time
ALTER STAGE my_ext_stage1 SET URL='s3://load/files2/';
ALTER STAGE my_ext_stage1 SET CREDENTIALS={'AWS_KEY_ID'='1a2b3d' ,'AWS_SECRET_KEY'='4x5y6z'};
create snapshot snapshot2 for account sys;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:57.880394    account    sys        
snapshot1    2024-07-03 07:28:57.863832    account    sys        
DROP STAGE my_ext_stage5;
internal error: the stage my_ext_stage5 not exists
DROP STAGE if exists my_ext_stage5;
DROP STAGE my_ext_stage;
DROP STAGE my_ext_stage1;
DROP STAGE my_ext_stage2;
DROP STAGE my_ext_stage3;
restore account sys from snapshot snapshot1;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:57.880394    account    sys        
snapshot1    2024-07-03 07:28:57.863832    account    sys        
SELECT stage_name from mo_catalog.mo_stages;
stage_name
my_ext_stage
my_ext_stage1
my_ext_stage2
my_ext_stage3
restore account sys from snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:57.880394    account    sys        
snapshot1    2024-07-03 07:28:57.863832    account    sys        
SELECT stage_name from mo_catalog.mo_stages;
stage_name
my_ext_stage
my_ext_stage2
my_ext_stage3
my_ext_stage1
drop snapshot snapshot1;
drop snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
DROP STAGE if exists my_ext_stage5;
DROP STAGE if exists my_ext_stage5;
DROP STAGE if exists my_ext_stage;
DROP STAGE if exists my_ext_stage1;
DROP STAGE if exists my_ext_stage2;
DROP STAGE if exists my_ext_stage3;
show stages;
STAGE_NAME    URL    STATUS    COMMENT
drop database if exists procedure_test;
create database procedure_test;
use procedure_test;
create table tbh1(id int primary key, val int);
create table tbh2(id int primary key, val char);
create table tbh3(id int primary key, val float);
insert into tbh1(id, val) values(1,10),(2,20),(3,30);
insert into tbh2(id, val) values(1,'a'),(2,'b'),(3,'c');
insert into tbh3(id, val) values(1,1.5),(2,2.5),(3,3.5);
select name from mo_catalog.mo_stored_procedure;
name
drop procedure if exists test_if_hit_if;
create procedure test_if_hit_if () 'begin DECLARE v1 INT; SET v1 = 10; IF v1 > 5 THEN select * from tbh1; ELSEIF v1 = 5 THEN select * from tbh2; ELSEIF v1 = 4 THEN select * from tbh2 limit 1; ELSE select * from tbh3; END IF; end'
call test_if_hit_if();
id    val
1    10
2    20
3    30
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_if
create snapshot snapshot1 for account sys;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot1    2024-07-03 07:28:58.312793    account    sys        
drop procedure if exists test_if_hit_if;
drop procedure if exists test_if_hit_elseif_first_elseif;
create procedure test_if_hit_elseif_first_elseif() 'begin DECLARE v1 INT; SET v1 = 5; IF v1 > 5 THEN select * from tbh1; ELSEIF v1 = 5 THEN select * from tbh2; ELSEIF v1 = 4 THEN select * from tbh2 limit 1; ELSE select * from tbh3; END IF; end'
call test_if_hit_elseif_first_elseif();
id    val
1    a
2    b
3    c
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_elseif_first_elseif
create snapshot snapshot2 for account sys;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:58.330773    account    sys        
snapshot1    2024-07-03 07:28:58.312793    account    sys        
restore account sys from snapshot snapshot1;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:58.330773    account    sys        
snapshot1    2024-07-03 07:28:58.312793    account    sys        
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_if
call test_if_hit_if();
id    val
1    10
2    20
3    30
restore account sys from snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:58.330773    account    sys        
snapshot1    2024-07-03 07:28:58.312793    account    sys        
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_elseif_first_elseif
call test_if_hit_elseif_first_elseif();
id    val
1    a
2    b
3    c
drop snapshot snapshot1;
drop snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
drop procedure if exists test_if_hit_if;
drop procedure if exists test_if_hit_elseif_first_elseif;
drop database if exists procedure_test;
select user_id,user_name,authentication_string from mo_catalog.mo_user;
user_id    user_name    authentication_string
0    root    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
1    dump    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
select role_id,user_id from mo_catalog.mo_user_grant;
role_id    user_id
0    0
1    0
0    1
1    1
create user u_a identified by 'a111', u_b identified by 'b111';
create user u_c identified by 'c111', u_d identified by 'd111';
select user_id,user_name,authentication_string from mo_catalog.mo_user;
user_id    user_name    authentication_string
0    root    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
1    dump    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
2    u_a    *8CEE9E1B21098E7CB4691717A980257DC4F93F23
3    u_b    *97D6A234F2882F45432E3C14150E6B9ACAB2255F
4    u_c    *27D12E3982A4C57809ED4F6CEF9D2F51F9A73B3C
5    u_d    *977C6D2AD24235019E65CABAB3EC59B6411F444E
select role_id,user_id from mo_catalog.mo_user_grant;
role_id    user_id
0    0
1    0
0    1
1    1
1    2
1    3
1    4
1    5
create snapshot snapshot1 for account sys;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot1    2024-07-03 07:28:58.781362    account    sys        
drop user if exists u_a, u_b, u_d;
alter user u_c identified by 'c111111';
select user_id,user_name,authentication_string from mo_catalog.mo_user;
user_id    user_name    authentication_string
0    root    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
1    dump    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
4    u_c    *7F494961F862DCB97144C0E5D77CE4FCD30D8281
select role_id,user_id from mo_catalog.mo_user_grant;
role_id    user_id
0    0
1    0
0    1
1    1
1    4
create snapshot snapshot2 for account sys;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:58.802799    account    sys        
snapshot1    2024-07-03 07:28:58.781362    account    sys        
restore account sys from snapshot snapshot1;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:58.802799    account    sys        
snapshot1    2024-07-03 07:28:58.781362    account    sys        
select user_id,user_name,authentication_string from mo_catalog.mo_user;
user_id    user_name    authentication_string
0    root    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
1    dump    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
2    u_a    *8CEE9E1B21098E7CB4691717A980257DC4F93F23
3    u_b    *97D6A234F2882F45432E3C14150E6B9ACAB2255F
4    u_c    *27D12E3982A4C57809ED4F6CEF9D2F51F9A73B3C
5    u_d    *977C6D2AD24235019E65CABAB3EC59B6411F444E
select role_id,user_id from mo_catalog.mo_user_grant;
role_id    user_id
0    0
1    0
0    1
1    1
1    2
1    3
1    4
1    5
restore account sys from snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:58.802799    account    sys        
snapshot1    2024-07-03 07:28:58.781362    account    sys        
select user_id,user_name,authentication_string from mo_catalog.mo_user;
user_id    user_name    authentication_string
0    root    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
1    dump    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
4    u_c    *7F494961F862DCB97144C0E5D77CE4FCD30D8281
select role_id,user_id from mo_catalog.mo_user_grant;
role_id    user_id
0    0
1    0
0    1
1    1
1    4
drop snapshot snapshot1;
drop snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
drop user if exists u_a, u_b, u_c, u_d;
select user_id,user_name,authentication_string from mo_catalog.mo_user;
user_id    user_name    authentication_string
0    root    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
1    dump    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
select role_id,user_id from mo_catalog.mo_user_grant;
role_id    user_id
0    0
1    0
0    1
1    1
drop account if exists acc01;
create account acc01 admin_name = 'test_account' identified by '111';
create database db1;
use db1;
select name, db from mo_catalog.mo_user_defined_function;
name    db
create function helloworld () returns int language sql as 'select id from tbl1 limit 1';
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
create function db1.helloworld5 () returns int language sql as 'select id from tbl1 limit 1';
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
helloworld5    db1
create snapshot snapshot1 for account acc01;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot1    2024-07-03 07:28:59.698122    account    acc01        
drop function helloworld();
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld5    db1
create snapshot snapshot2 for account acc01;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:59.730879    account    acc01        
snapshot1    2024-07-03 07:28:59.698122    account    acc01        
drop database db1;
select name, db from mo_catalog.mo_user_defined_function;
name    db
restore account acc01 from snapshot snapshot1;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:59.730879    account    acc01        
snapshot1    2024-07-03 07:28:59.698122    account    acc01        
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
helloworld5    db1
restore account acc01 from snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:28:59.730879    account    acc01        
snapshot1    2024-07-03 07:28:59.698122    account    acc01        
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld5    db1
drop snapshot snapshot1;
drop snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
drop database if exists db1;
CREATE STAGE my_ext_stage URL='s3://load/files/';
CREATE STAGE my_ext_stage URL='s3://load/files/';
internal error: the stage my_ext_stage exists
CREATE STAGE if not exists my_ext_stage URL='s3://load/files/';
SELECT stage_name from mo_catalog.mo_stages;
stage_name
my_ext_stage
CREATE STAGE my_ext_stage1 URL='s3://load/files/' CREDENTIALS={'AWS_KEY_ID'='1a2b3c' ,'AWS_SECRET_KEY'='4x5y6z'};
CREATE STAGE my_ext_stage2 URL='s3://load/files/' CREDENTIALS={'AWS_KEY_ID'='1a2b3c' ,'AWS_SECRET_KEY'='4x5y6z'};
SELECT stage_name, stage_status from mo_catalog.mo_stages;
stage_name    stage_status
my_ext_stage    disabled
my_ext_stage1    disabled
my_ext_stage2    disabled
CREATE STAGE my_ext_stage3 URL='s3://load/files/' CREDENTIALS={'AWS_KEY_ID'='1a2b3c' ,'AWS_SECRET_KEY'='4x5y6z'} ENABLE = TRUE;
SELECT stage_name, stage_status from mo_catalog.mo_stages;
stage_name    stage_status
my_ext_stage    disabled
my_ext_stage1    disabled
my_ext_stage2    disabled
my_ext_stage3    enabled
create snapshot snapshot1 for account acc01;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot1    2024-07-03 07:29:00.11775    account    acc01        
ALTER STAGE my_ext_stage4 SET URL='s3://load/files2/';
internal error: the stage my_ext_stage4 not exists
ALTER STAGE if exists my_ext_stage4 SET URL='s3://load/files2/';
ALTER STAGE my_ext_stage1 SET URL='s3://load/files2/' CREDENTIALS={'AWS_KEY_ID'='1a2b3d' ,'AWS_SECRET_KEY'='4x5y6z'};
internal error: at most one option at a time
ALTER STAGE my_ext_stage1 SET URL='s3://load/files2/';
ALTER STAGE my_ext_stage1 SET CREDENTIALS={'AWS_KEY_ID'='1a2b3d' ,'AWS_SECRET_KEY'='4x5y6z'};
create snapshot snapshot2 for account acc01;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:29:00.133089    account    acc01        
snapshot1    2024-07-03 07:29:00.11775    account    acc01        
DROP STAGE my_ext_stage5;
internal error: the stage my_ext_stage5 not exists
DROP STAGE if exists my_ext_stage5;
DROP STAGE my_ext_stage;
DROP STAGE my_ext_stage1;
DROP STAGE my_ext_stage2;
DROP STAGE my_ext_stage3;
restore account acc01 from snapshot snapshot1;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:29:00.133089    account    acc01        
snapshot1    2024-07-03 07:29:00.11775    account    acc01        
SELECT stage_name from mo_catalog.mo_stages;
stage_name
my_ext_stage
my_ext_stage1
my_ext_stage2
my_ext_stage3
restore account acc01 from snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:29:00.133089    account    acc01        
snapshot1    2024-07-03 07:29:00.11775    account    acc01        
SELECT stage_name from mo_catalog.mo_stages;
stage_name
my_ext_stage
my_ext_stage2
my_ext_stage3
my_ext_stage1
drop snapshot snapshot1;
drop snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
DROP STAGE if exists my_ext_stage5;
DROP STAGE if exists my_ext_stage5;
DROP STAGE if exists my_ext_stage;
DROP STAGE if exists my_ext_stage1;
DROP STAGE if exists my_ext_stage2;
DROP STAGE if exists my_ext_stage3;
show stages;
STAGE_NAME    URL    STATUS    COMMENT
drop database if exists procedure_test;
create database procedure_test;
use procedure_test;
create table tbh1(id int primary key, val int);
create table tbh2(id int primary key, val char);
create table tbh3(id int primary key, val float);
insert into tbh1(id, val) values(1,10),(2,20),(3,30);
insert into tbh2(id, val) values(1,'a'),(2,'b'),(3,'c');
insert into tbh3(id, val) values(1,1.5),(2,2.5),(3,3.5);
select name from mo_catalog.mo_stored_procedure;
name
drop procedure if exists test_if_hit_if;
create procedure test_if_hit_if () 'begin DECLARE v1 INT; SET v1 = 10; IF v1 > 5 THEN select * from tbh1; ELSEIF v1 = 5 THEN select * from tbh2; ELSEIF v1 = 4 THEN select * from tbh2 limit 1; ELSE select * from tbh3; END IF; end'
call test_if_hit_if();
id    val
1    10
2    20
3    30
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_if
create snapshot snapshot1 for account acc01;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot1    2024-07-03 07:29:00.480714    account    acc01        
drop procedure if exists test_if_hit_if;
drop procedure if exists test_if_hit_elseif_first_elseif;
create procedure test_if_hit_elseif_first_elseif() 'begin DECLARE v1 INT; SET v1 = 5; IF v1 > 5 THEN select * from tbh1; ELSEIF v1 = 5 THEN select * from tbh2; ELSEIF v1 = 4 THEN select * from tbh2 limit 1; ELSE select * from tbh3; END IF; end'
call test_if_hit_elseif_first_elseif();
id    val
1    a
2    b
3    c
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_elseif_first_elseif
create snapshot snapshot2 for account acc01;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:29:00.495211    account    acc01        
snapshot1    2024-07-03 07:29:00.480714    account    acc01        
restore account acc01 from snapshot snapshot1;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:29:00.495211    account    acc01        
snapshot1    2024-07-03 07:29:00.480714    account    acc01        
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_if
call test_if_hit_if();
id    val
1    10
2    20
3    30
restore account acc01 from snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:29:00.495211    account    acc01        
snapshot1    2024-07-03 07:29:00.480714    account    acc01        
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_elseif_first_elseif
call test_if_hit_elseif_first_elseif();
id    val
1    a
2    b
3    c
drop snapshot snapshot1;
drop snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
drop procedure if exists test_if_hit_if;
drop procedure if exists test_if_hit_elseif_first_elseif;
drop database if exists procedure_test;
create user u_a identified by 'a111', u_b identified by 'b111' default role public lock;
create user if not exists u_a identified by 'a111', u_b identified by 'b111' default role public lock;
create user u_c identified by 'a111', u_d identified by 'b111';
select user_name,authentication_string from mo_catalog.mo_user;
user_name    authentication_string
test_account    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
u_a    *8CEE9E1B21098E7CB4691717A980257DC4F93F23
u_b    *97D6A234F2882F45432E3C14150E6B9ACAB2255F
u_c    *8CEE9E1B21098E7CB4691717A980257DC4F93F23
u_d    *97D6A234F2882F45432E3C14150E6B9ACAB2255F
create snapshot snapshot1 for account acc01;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot1    2024-07-03 07:29:00.892304    account    acc01        
drop user if exists u_a, u_b, u_d;
alter user u_c identified by 'c111111';
select user_name,authentication_string from mo_catalog.mo_user;
user_name    authentication_string
test_account    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
u_c    *7F494961F862DCB97144C0E5D77CE4FCD30D8281
create snapshot snapshot2 for account acc01;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:29:00.908065    account    acc01        
snapshot1    2024-07-03 07:29:00.892304    account    acc01        
restore account acc01 from snapshot snapshot1;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:29:00.908065    account    acc01        
snapshot1    2024-07-03 07:29:00.892304    account    acc01        
select user_name,authentication_string from mo_catalog.mo_user;
user_name    authentication_string
test_account    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
u_a    *8CEE9E1B21098E7CB4691717A980257DC4F93F23
u_b    *97D6A234F2882F45432E3C14150E6B9ACAB2255F
u_c    *8CEE9E1B21098E7CB4691717A980257DC4F93F23
u_d    *97D6A234F2882F45432E3C14150E6B9ACAB2255F
restore account acc01 from snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
snapshot2    2024-07-03 07:29:00.908065    account    acc01        
snapshot1    2024-07-03 07:29:00.892304    account    acc01        
select user_name,authentication_string from mo_catalog.mo_user;
user_name    authentication_string
test_account    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
u_c    *7F494961F862DCB97144C0E5D77CE4FCD30D8281
drop snapshot snapshot1;
drop snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
drop user if exists u_a, u_b, u_c, u_d;
drop account acc01;
drop account if exists acc01;
create account acc01 admin_name = 'test_account' identified by '111';
drop account if exists acc02;
create account acc02 admin_name = 'test_account' identified by '111';
drop account if exists acc03;
create account acc03 admin_name = 'test_account' identified by '111';
create database db1;
use db1;
select name, db from mo_catalog.mo_user_defined_function;
name    db
create function helloworld () returns int language sql as 'select id from tbl1 limit 1';
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
create function db1.helloworld5 () returns int language sql as 'select id from tbl1 limit 1';
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
helloworld5    db1
CREATE STAGE my_ext_stage URL='s3://load/files/';
CREATE STAGE my_ext_stage URL='s3://load/files/';
internal error: the stage my_ext_stage exists
CREATE STAGE if not exists my_ext_stage URL='s3://load/files/';
SELECT stage_name from mo_catalog.mo_stages;
stage_name
my_ext_stage
CREATE STAGE my_ext_stage1 URL='s3://load/files/' CREDENTIALS={'AWS_KEY_ID'='1a2b3c' ,'AWS_SECRET_KEY'='4x5y6z'};
CREATE STAGE my_ext_stage2 URL='s3://load/files/' CREDENTIALS={'AWS_KEY_ID'='1a2b3c' ,'AWS_SECRET_KEY'='4x5y6z'};
SELECT stage_name, stage_status from mo_catalog.mo_stages;
stage_name    stage_status
my_ext_stage    disabled
my_ext_stage1    disabled
my_ext_stage2    disabled
CREATE STAGE my_ext_stage3 URL='s3://load/files/' CREDENTIALS={'AWS_KEY_ID'='1a2b3c' ,'AWS_SECRET_KEY'='4x5y6z'} ENABLE = TRUE;
SELECT stage_name, stage_status from mo_catalog.mo_stages;
stage_name    stage_status
my_ext_stage    disabled
my_ext_stage1    disabled
my_ext_stage2    disabled
my_ext_stage3    enabled
drop database if exists procedure_test;
create database procedure_test;
use procedure_test;
create table tbh1(id int primary key, val int);
create table tbh2(id int primary key, val char);
create table tbh3(id int primary key, val float);
insert into tbh1(id, val) values(1,10),(2,20),(3,30);
insert into tbh2(id, val) values(1,'a'),(2,'b'),(3,'c');
insert into tbh3(id, val) values(1,1.5),(2,2.5),(3,3.5);
select name from mo_catalog.mo_stored_procedure;
name
drop procedure if exists test_if_hit_if;
create procedure test_if_hit_if () 'begin DECLARE v1 INT; SET v1 = 10; IF v1 > 5 THEN select * from tbh1; ELSEIF v1 = 5 THEN select * from tbh2; ELSEIF v1 = 4 THEN select * from tbh2 limit 1; ELSE select * from tbh3; END IF; end'
call test_if_hit_if();
id    val
1    10
2    20
3    30
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_if
create user u_a identified by 'a111', u_b identified by 'b111' default role public lock;
create user if not exists u_a identified by 'a111', u_b identified by 'b111' default role public lock;
create user u_c identified by 'a111', u_d identified by 'b111';
select user_name,authentication_string from mo_catalog.mo_user;
user_name    authentication_string
test_account    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
u_a    *8CEE9E1B21098E7CB4691717A980257DC4F93F23
u_b    *97D6A234F2882F45432E3C14150E6B9ACAB2255F
u_c    *8CEE9E1B21098E7CB4691717A980257DC4F93F23
u_d    *97D6A234F2882F45432E3C14150E6B9ACAB2255F
create snapshot snapshot1 for account acc01;
drop function helloworld();
function helloworld doesn't exist
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
helloworld5    db1
ALTER STAGE my_ext_stage4 SET URL='s3://load/files2/';
internal error: the stage my_ext_stage4 not exists
ALTER STAGE if exists my_ext_stage4 SET URL='s3://load/files2/';
ALTER STAGE my_ext_stage1 SET URL='s3://load/files2/' CREDENTIALS={'AWS_KEY_ID'='1a2b3d' ,'AWS_SECRET_KEY'='4x5y6z'};
internal error: at most one option at a time
ALTER STAGE my_ext_stage1 SET URL='s3://load/files2/';
ALTER STAGE my_ext_stage1 SET CREDENTIALS={'AWS_KEY_ID'='1a2b3d' ,'AWS_SECRET_KEY'='4x5y6z'};
select stage_name from mo_catalog.mo_stages;
stage_name
my_ext_stage
my_ext_stage2
my_ext_stage3
my_ext_stage1
drop procedure if exists test_if_hit_if;
drop procedure if exists test_if_hit_if;
drop procedure if exists test_if_hit_elseif_first_elseif;
create procedure test_if_hit_elseif_first_elseif() 'begin DECLARE v1 INT; SET v1 = 5; IF v1 > 5 THEN select * from tbh1; ELSEIF v1 = 5 THEN select * from tbh2; ELSEIF v1 = 4 THEN select * from tbh2 limit 1; ELSE select * from tbh3; END IF; end'
call test_if_hit_elseif_first_elseif();
id    val
1    a
2    b
3    c
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_elseif_first_elseif
drop user if exists u_a, u_b, u_c, u_d;
alter user u_c identified by 'c111111';
internal error: Operation ALTER USER failed for 'u_c'@'%', user does't exist
select user_name,authentication_string from mo_catalog.mo_user;
user_name    authentication_string
test_account    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
create snapshot snapshot2 for account acc01;
drop database db1;
select name, db from mo_catalog.mo_user_defined_function;
name    db
DROP STAGE my_ext_stage5;
internal error: the stage my_ext_stage5 not exists
DROP STAGE if exists my_ext_stage5;
DROP STAGE my_ext_stage;
DROP STAGE my_ext_stage1;
DROP STAGE my_ext_stage2;
DROP STAGE my_ext_stage3;
drop database if exists procedure_test;
restore account acc01 from snapshot snapshot1 to account acc02;
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
helloworld5    db1
select stage_name from mo_catalog.mo_stages;
stage_name
my_ext_stage
my_ext_stage1
my_ext_stage2
my_ext_stage3
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_if
select user_name,authentication_string from mo_catalog.mo_user;
user_name    authentication_string
test_account    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
u_a    *8CEE9E1B21098E7CB4691717A980257DC4F93F23
u_b    *97D6A234F2882F45432E3C14150E6B9ACAB2255F
u_c    *8CEE9E1B21098E7CB4691717A980257DC4F93F23
u_d    *97D6A234F2882F45432E3C14150E6B9ACAB2255F
restore account acc01 from snapshot snapshot2 to account acc03;
select name, db from mo_catalog.mo_user_defined_function;
name    db
helloworld    db1
helloworld5    db1
select stage_name from mo_catalog.mo_stages;
stage_name
my_ext_stage
my_ext_stage2
my_ext_stage3
my_ext_stage1
select name from mo_catalog.mo_stored_procedure;
name
test_if_hit_elseif_first_elseif
select user_name,authentication_string from mo_catalog.mo_user;
user_name    authentication_string
test_account    *832EB84CB764129D05D498ED9CA7E5CE9B8F83EB
drop account acc01;
drop account acc02;
drop account acc03;
drop snapshot snapshot1;
drop snapshot snapshot2;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
set global enable_privilege_cache = on;
use mo_catalog;
drop table if exists cluster_table_1;
create cluster table cluster_table_1(a int, b int);
insert into cluster_table_1 values(0,0,0),(1,1,0);
insert into cluster_table_1 values(0,0,1),(1,1,1);
select * from cluster_table_1;
a    b    account_id
0    0    0
1    1    0
0    0    1
1    1    1
create snapshot snapshot1 for account sys;
drop table if exists cluster_table_1;
create cluster table cluster_table_2(a int, b int);
insert into cluster_table_2 values(0,0,0),(1,1,0);
insert into cluster_table_2 values(0,0,1),(1,1,1);
select * from cluster_table_2;
a    b    account_id
0    0    0
1    1    0
0    0    1
1    1    1
create snapshot snapshot2 for account sys;
restore account sys from snapshot snapshot1;
select * from mo_catalog.cluster_table_1;
a    b    account_id
0    0    0
1    1    0
0    0    1
1    1    1
restore account sys from snapshot snapshot2;
select * from mo_catalog.cluster_table_2;
a    b    account_id
0    0    0
1    1    0
0    0    1
1    1    1
drop snapshot snapshot1;
drop snapshot snapshot2;
drop table if exists cluster_table_1;
drop table if exists cluster_table_2;
drop database if exists procedure_test;
show snapshots;
SNAPSHOT_NAME    TIMESTAMP    SNAPSHOT_LEVEL    ACCOUNT_NAME    DATABASE_NAME    TABLE_NAME
