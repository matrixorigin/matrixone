# This is a basic workflow to help you get started with Actions

name: WeWork Robot

# Controls when the workflow will run
on:
  issues:
    types: [opened, reopened, assigned]
  schedule:
    - cron: '30 9 * * *'
  workflow_dispatch:



# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  issue-notify:
    if : github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name : ISSUE Triggered
        uses: chf007/action-wechat-work@master
        env:
          WECHAT_WORK_BOT_WEBHOOK: ${{secrets.WECHAT_WORK_BOT_WEBHOOK}}
        with:
          msgtype: markdown
          mentioned_list: '["@all"]'
          content: "New Issue Opened or Assigned: [${{ github.event.issue.title }}](${{ github.event.issue.html_url }})\nAssignees:<font color=\"warning\">${{ join(github.event.issue.assignees.*.login, ', ') }}</font>\nOpen Issue Number: <font color=\"warning\">${{ github.event.repository.open_issues }}</font>"


  Nightly-check:
    if: github.event_name != 'issues'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '3'

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Build MatrixOne
        run: |
          cd $GITHUB_WORKSPACE && make clean && make config && make build
      - name: Static Code Analysis
        continue-on-error: true
        run: |
          cd $GITHUB_WORKSPACE
          make install-static-check-tools
          make static-check &>lint.out
      - name: count sca failed files
        run: |
          cd $GITHUB_WORKSPACE
          echo "FAILED_FILES_NUM=$(cat lint.out | grep -E '^pkg|^cmd' | awk -F ".go" '{if(NF>=2) {print $1}}' | sort -u | wc -l)" >> $GITHUB_ENV
      - name: Unit Testing
        timeout-minutes: 60
        run: |
          cd $GITHUB_WORKSPACE
          test_scope=$(go list ./...)
          leave_out=$(egrep -lr  --include="*.go" 'Code generated by protoc-gen-gogo. DO NOT EDIT.' ./pkg/* | sort -u | xargs basename -a)
          echo "INF" "Ingore code coverage $(echo ${leave_out[@]}|tr " " "|")"
          ut_report="UT-Report.out"
          cover_profile='profile.raw'
          raw_coverage="coverage.out"
          html_coverage="coverage.html"

          go test -v -tags matrixone_test -p 1 -covermode=count -coverprofile=$cover_profile -coverpkg=./pkg/... $test_scope | tee ut_report

          echo "ut finished"
          cat $cover_profile | egrep -v $(echo ${leave_out[*]} | tr " " "|") > $raw_coverage
          echo "raw_coverage finished"
          go tool cover -o $html_coverage -html=$raw_coverage
          echo "html_coverage finished"
          rm $cover_profile
          rm $raw_coverage


      - name: calc pkg code coverage
        run: |
          cd $GITHUB_WORKSPACE
          echo "CODE_COVERAGE=$(awk '{if ($3>1) covered[$1] = true; all[$1] = true} END {print length(covered) / length(all)}' profile.raw)" >> $GITHUB_ENV
      - name: Archive Files
        run: |
          cd ${{ github.workspace }}
          tar zcvf code_quality_reports.tar.gz coverage.html lint.out
      - name: Upload
        id: uploadCoverageFile
        uses: fjogeleit/http-request-action@v1
        with:
          url: https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=${{ secrets.WECHAT_WORK_BOT_WEBHOOK_KEY }}&type=file&debug=1
          contentType: 'multipart/form-data'
          method: 'POST'
          data: '{}'
          files: '{ "file": "${{ github.workspace }}/code_quality_reports.tar.gz" }'

      - name: Show Response
        run: |
          cd ${{ github.workspace }}
          echo '${{ steps.uploadCoverageFile.outputs.response }}' > r.json
          echo "MEDIA_ID=$(jq -r '.media_id' r.json)"  >> $GITHUB_ENV
      - name: WeChat Work notification
        id: notification

        uses: chf007/action-wechat-work@master
        env:
          WECHAT_WORK_BOT_WEBHOOK: ${{secrets.WECHAT_WORK_BOT_WEBHOOK}}
        with:
          msgtype: markdown
          mentioned_list: '["@all"]'
          content: "<font color=\"warning\">Nightly Code Quality Checks</font>\nNumber of files failed static checks:<font color=\"warning\">${{ env.FAILED_FILES_NUM }}</font>\nCode Coverage Summary:<font color=\"warning\">${{ env.CODE_COVERAGE }}</font>\n"

      - name: WeChat Work notification by file
        uses: chf007/action-wechat-work@master
        env:
          WECHAT_WORK_BOT_WEBHOOK: ${{secrets.WECHAT_WORK_BOT_WEBHOOK}}
        with:
          msgtype: file
          media_id: ${{ env.MEDIA_ID }}

      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        continue-on-error: true
        with:
          name: test_reports
          path: |
            ${{ github.workspace }}
          retention-days: 7