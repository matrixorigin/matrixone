name: PR Unit Test Coverage
on:
  pull_request_target:
    types: [ opened, synchronize ]
    branches: [ main,'[0-9]+.[0-9]+.[0-9]+' ]

concurrency: 
  group: ${{ github.event.pull_request.head.repo.full_name}}/${{ github.event.pull_request.head.ref }}/${{ github.workflow }}
  cancel-in-progress: true

jobs:
  ut_coverage:
    if: ${{ !github.event.pull_request.draft }}
    name: PR Unit Test Coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '3'
          path: ./matrixone
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set Variables
        run: |
          cd $GITHUB_WORKSPACE/matrixone
          echo "test_scope=$(go list ./... | grep -v 'driver\|engine/aoe\|engine/memEngine\|pkg/catalog' | xargs)" >> $GITHUB_ENV
          echo "raw_ut_coverage='ut_coverage.raw'" >> $GITHUB_ENV
          echo "raw_bvt_coverage='bvt_coverage.raw'" >> $GITHUB_ENV
          echo "raw_bvt_coverage_temp='bvt_coverage_temp.raw'" >> $GITHUB_ENV
          echo "raw_ut_coverage_temp='ut_coverage_temp.raw'" >> $GITHUB_ENV
          echo "all_coervage='all_coverage.raw'" >> $GITHUB_ENV
          echo "test_report='test_report.out'" >> $GITHUB_ENV
          echo "coverage_line=75" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with: 
          go-version: '1.20'

      - name: Set env
        run: |
          echo "endpoint=${{ secrets.S3ENDPOINT }}" >> $GITHUB_ENV
          echo "region=${{ secrets.S3REGION }}" >> $GITHUB_ENV
          echo "apikey=${{ secrets.S3APIKEY }}" >> $GITHUB_ENV
          echo "apisecret=${{ secrets.S3APISECRET }}" >> $GITHUB_ENV
          echo "bucket=${{ secrets.S3BUCKET }}" >> $GITHUB_ENV
          
      - name: Get Changed Paths
        uses: guguducken/change-paths-action@v0.0.7
        id: ut-pr 
        with:
          github-token: ${{ secrets.TOKEN_ACTION }}
          ignore: "/,etc/,optools/,LICENSES/,cgo/,cmd/,docs/,proto/,test/,.github/,pkg/pb/"
          source-path: ${{ env.test_scope }}
      
      - name: Start PR Unit Test
        if: ${{ steps.ut-pr.outputs.paths != '' }}
        timeout-minutes: 60
        run: |
          cd $GITHUB_WORKSPACE/matrixone
          echo "-----------------------ut start-----------------------"
          CGO_CFLAGS="-I${GITHUB_WORKSPACE}/matrixone/cgo"
          CGO_LDFLAGS="-L${GITHUB_WORKSPACE}/matrixone/cgo -lmo -lm"
          make clean && make config && make cgo
          go test -v -cover -tags matrixone_test -p 1 -covermode=set -coverprofile ${{ env.raw_ut_coverage }} -count=1 ${{ steps.ut-pr.outputs.paths }}
          echo "-----------------------ut finish-----------------------"

      - name: Clone mo-tester repository
        if: ${{ steps.ut-pr.outputs.paths != '' }}
        uses: actions/checkout@v3
        with:
          repository: matrixorigin/mo-tester
          path: ./mo-tester
          ref: main
      
      - name: Set up JDK 8 for x64
        if: ${{ steps.ut-pr.outputs.paths != '' }}
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          architecture: x64

      - name: Start Test Service
        if: ${{ steps.ut-pr.outputs.paths != '' }}
        timeout-minutes: 10
        run: |
          cd $GITHUB_WORKSPACE/matrixone
          if  [ -d  "./store"  ]; then rm -rf ./store; fi
          GOLDFLAGS=-ldflags="-X 'main.GoVersion=$(go version)' -X 'main.BranchName=$(git rev-parse --abbrev-ref HEAD)' -X 'main.CommitID=$(git rev-parse HEAD)' -X 'main.BuildTime=$(date)' -X 'main.Version=$(git describe --always --tags $(git rev-list --tags --max-count=1))'"
          export GOCOVERDIR=$GITHUB_WORKSPACE/matrixone
          go build -cover "$GOLDFLAGS" -o mo-service ./cmd/mo-service/
          ./optools/run_bvt.sh $GITHUB_WORKSPACE/matrixone launch-tae-CN-tae-DN
      
      - name: Start PR BVT Test
        if: ${{ steps.ut-pr.outputs.paths != '' }}
        id: bvt_on_pr_version
        continue-on-error: true
        run: |
          cd $GITHUB_WORKSPACE/mo-tester
          ./run.sh -n -g -p $GITHUB_WORKSPACE/matrixone/test/distributed/cases 2>&1

      - name: Coverage Calculate
        if: ${{ steps.ut-pr.outputs.paths != '' }}
        run: |
          cd $GITHUB_WORKSPACE/matrixone
          echo "--------------------coverage start--------------------"
          go tool covdata textfmt -i="$GITHUB_WORKSPACE/matrixone" -o ${{ env.raw_bvt_coverage }}
          cat ${{ env.raw_bvt_coverage }} | grep "${{ steps.ut-pr.outputs.files }}" > ${{ env.raw_bvt_coverage_temp }}
          cat ${{ env.raw_ut_coverage }} | grep "${{ steps.ut-pr.outputs.files }}" > ${{ env.raw_ut_coverage_temp }}
          awk -F '[ ]+' 'FNR==NR{arr[$1,$2]=$3;next}{if(arr[$1,$2]==0 && $3>=1){arr[$1,$2]=1}}END{for(i in arr){split(i,ind,SUBSEP);printf("%s %s %s\n",ind[1],ind[2],arr[i])};}' ${{ env.raw_ut_coverage_temp }} ${{ env.raw_bvt_coverage_temp }} > ${{ env.all_coervage }}
          awk -F '[:, ]+' '{all[$1]+=$4;hit[$1]+=0;if($5>0) hit[$1]+=$4;}END{for(i in all) print(i,all[i],hit[i],hit[i]/all[i]*100)}' ${{ env.all_coervage }} > ${{ env.test_report }}
          awk 'BEGIN{flag=1}{if($4<${{ env.coverage_line }}){flag=0;print("error: the code coverage of "$1" is "$4"% which is below ${{ env.coverage_line }}%");} else { print("info: the code coverage of "$1" is "$4"% which is up to ${{ env.coverage_line }}%") }}END{if(flag==0) {exit 1;}}' ${{ env.test_report }}
          rm -rf ${{ env.raw_ut_coverage }} ${{ env.test_report }} ${{ env.raw_bvt_coverage_temp }} ${{ env.raw_bvt_coverage }} ${{ env.all_coervage }}
          echo "--------------------coverage finished--------------------"