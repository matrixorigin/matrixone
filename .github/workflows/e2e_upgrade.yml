name: MatrixOne e2e upgrade CI

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ main,'[0-9]+.[0-9]+.[0-9]+*' ]

env:
  release: v1.0.0-rc1
  oldrelease: v0.8.0

jobs:
  upgrade-release-linux-x86:
    runs-on: aws-arm64-runner
    name: Compatibility Test With Release on Linux/x64(LAUNCH)
    timeout-minutes: 60

    steps:
      - name: checkout head
        uses: actions/checkout@v3
        with:
          path: ./head
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: checkout release ${{ env.release }}
        uses: actions/checkout@v3
        with:
          path: ./upstream
          repository: ${{ github.event.pull_request.base.repo.full_name }}
          ref: ${{ env.release }}
      - name: Clone mo-load Repo
        if: ${{ always() && !cancelled() }}
        uses: actions/checkout@v3
        with:
          repository: matrixorigin/mo-load
          token: ${{secrets.TOKEN_ACTION}}
          path: ./mo-load
          ref: main
      - name: Clone mo-load-data Repo
        if: ${{ always() && !cancelled() }}
        uses: actions/checkout@v3
        with:
          repository: matrixorigin/mo-load-data
          token: ${{secrets.TOKEN_ACTION}}
          path: ./mo-load-data
          ref: main

      - name: Clone mo-tpcc Repo
        if: ${{ always() && !cancelled() }}
        uses: actions/checkout@v3
        with:
          repository: matrixorigin/mo-tpcc
          token: ${{secrets.TOKEN_ACTION}}
          path: ./mo-tpcc
          ref: main

      - name: Set up Go
        uses: ./head/.github/actions/setup_env
      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2

      - name: Build MatrixOne for head
        run: |
          cd $GITHUB_WORKSPACE/head && make clean && make build
          git rev-parse --short HEAD          

      - name: Build MatrixOne for release ${{ env.release }}
        run: |
          cd $GITHUB_WORKSPACE/upstream && make clean && make build          
          git rev-parse --short HEAD

      - name: Create path for execution
        run: |
          cd $GITHUB_WORKSPACE && mkdir workspace 

      - name: Start the Release ${{ env.release }} Version of MO
        run: |
          cd $GITHUB_WORKSPACE/workspace
          mv $GITHUB_WORKSPACE/upstream/etc .
          mv $GITHUB_WORKSPACE/upstream/mo-service .
          mv $GITHUB_WORKSPACE/upstream/optools .
          
          # Explicitly declare pessimistic mode
          echo "==============cn configuration of upstram=============="
          echo ""  >> ./etc/launch/cn.toml
          echo '[cn.txn]' >> ./etc/launch/cn.toml
          echo 'mode = "Pessimistic"' >> ./etc/launch/cn.toml
          echo "==============tn configuration of upstram=============="
          echo ""  >> ./etc/launch/tn.toml
          echo '[dn.txn]' >> ./etc/launch/tn.toml
          echo 'mode = "Pessimistic"' >> ./etc/launch/tn.toml
          cat ./etc/launch/tn.toml
          echo "==============mo service binary information=============="
          ./mo-service -version
          ./optools/run_bvt.sh $GITHUB_WORKSPACE/workspace launch

      - name: Start OLTP Point Select Test With 100 Threads
        if: ${{ always() && !cancelled()  }}
        timeout-minutes: 15
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale
          sleep 60s
          
          cd $GITHUB_WORKSPACE/mo-load
          mkdir -p report
          echo 'Start Prepare Data of 10-tables-100000-per-table'
          ./start.sh -m SYSBENCH -n 10 -s 100000 -t 1 | tee report/load-oltp-select.log
          sleep 10
          
          echo ''
          echo 'Start OLTP Point Select Test With 100 threads'
          ./start.sh -c cases/sysbench/point_select_10_100000 -t 100 -d 5 -g -b sbtest | tee report/oltp-select.log
 
      # start tpcc test
      - name: Load TPCC 10 Warehouse Data
        if: ${{ always() && !cancelled() }}
        timeout-minutes: 10
        id: load_tpcc_data
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale
          sleep 60s
          cd $GITHUB_WORKSPACE/mo-load-data
          mkdir -p report
          sed -i  "s/s3_bucket: \"mo-load-data\"/s3_bucket: \"prepared-load-data\"/g" `grep s3_bucket -rl cases/00_from_s3/tpcc_10`
          ./load.sh -c cases/00_from_s3/tpcc_10 -r -m -g | tee report/mo-load-data-tpcc.log
          
      - name: Start TPCC 10 Warehouses 100 terminals Test
        if: ${{ always() && !cancelled() && steps.load_tpcc_data.conclusion == 'success' }}
        timeout-minutes: 15
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale          
          cd $GITHUB_WORKSPACE/mo-tpcc
          mkdir -p report
          cp props.mo props_10.mo
          sed -i '/.*terminals=*/c\terminals=100' props_10.mo
          sed -i '/.*warehouses=*/c\warehouses=10' props_10.mo
          sed -i 's/tpcc/tpcc_10/g' props_10.mo
          sed -i 's/127.0.0.1/${{ needs.setup_mo_test_env.outputs.mo_svc_ip }}/g' props_10.mo
          sed -i '/runMins=*/c\runMins=5' props_10.mo
          sed -i '/.*expectedErrorCodes=*/c\expectedErrorCodes=20619,1062,9999' props_10.mo
          sed -i 's/user=.*/user=${{ steps.account_for_tpcc.outputs.tpcc_account }}/g' props_10.mo
          sed -i 's/password=.*/password=${{ steps.account_for_tpcc.outputs.tpcc_password }}/g' props_10.mo
          ./runBenchmark.sh props_10.mo | tee report/tpcc-benchmark-10-100.log
          ./runVerify.sh props_10.mo | tee report/tpcc-verify-10-100.log

      - name: Dump mo-service goroutines
        if: ${{ always() && !cancelled() }}
        run: |
          max_retry=5
          retry=0
          while [ "$(ps -ef | grep 'mo-service' | grep -v "grep" | wc -l)" -gt 0 ]; do
            curl http://localhost:12345/debug/pprof/goroutine\?debug=2 -o ${{ github.workspace }}/workspace/upstream-dump-stacks${retry}.log
            pkill -9 mo-service
            retry=$((retry+1))
            if [ ${retry} -ge ${max_retry} ]; then
              echo 'after retry, still cannot shutdown mo-service'
              exit 1
            fi
            sleep 2
          done

      - name: Start the Version of Head of MO
        run: |
          cd $GITHUB_WORKSPACE/workspace
          mv mo-service mo-service-upstream
          mv mo-service.log upstream-mo-service.log
          rm -rf mo-data/etl
          rm -rf etc
          rm -rf optools
          # delete for clear the start finish status of mo
          rm -rf mo-data/local/system_init_completed
          mv $GITHUB_WORKSPACE/head/etc .
          mv $GITHUB_WORKSPACE/head/optools .
          mv $GITHUB_WORKSPACE/head/mo-service .
          echo "==============cn configuration of upstram=============="
          cat ./etc/launch/cn.toml
          echo "==============tn configuration of upstram=============="
          if [[ -f ./etc/launch/dn.toml ]]; then
            cat ./etc/launch/dn.toml     
          else 
            cat ./etc/launch/tn.toml     
          fi
          echo "==============mo service binary information=============="
          ./mo-service -version
          ./optools/run_bvt.sh $GITHUB_WORKSPACE/workspace launch

      - name: Start OLTP Point Select Test With 100 Threads For HEAD
        if: ${{ always() && !cancelled()  }}
        timeout-minutes: 15
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale
          sleep 60s
          
          cd $GITHUB_WORKSPACE/mo-load
          mv report report-release
          mkdir -p report
          echo 'Start Prepare Data of 10-tables-100000-per-table'
          ./start.sh -m SYSBENCH -n 10 -s 100000 -t 1 | tee report/load-oltp-select.log
          sleep 10
          
          echo ''
          echo 'Start OLTP Point Select Test With 100 threads'
          ./start.sh -c cases/sysbench/point_select_10_100000 -t 100 -d 5 -g -b sbtest | tee report/oltp-select.log
      # start tpcc test
      - name: Load TPCC 10 Warehouse Data
        if: ${{ always() && !cancelled() }}
        timeout-minutes: 10
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale
          sleep 60s
          cd $GITHUB_WORKSPACE/mo-load-data
          mv report report-release
          mkdir -p report
          sed -i  "s/s3_bucket: \"mo-load-data\"/s3_bucket: \"prepared-load-data\"/g" `grep s3_bucket -rl cases/00_from_s3/tpcc_10`
          ./load.sh -c cases/00_from_s3/tpcc_10 -r -m -g | tee report/mo-load-data-tpcc.log
          
      - name: Start TPCC 10 Warehouses 100 terminals Test
        if: ${{ always() && !cancelled() && steps.load_tpcc_data.conclusion == 'success' }}
        timeout-minutes: 30
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale          
          cd $GITHUB_WORKSPACE/mo-tpcc
          mv report report-release
          mkdir -p report
          cp props.mo props_10.mo
          sed -i '/.*terminals=*/c\terminals=100' props_10.mo
          sed -i '/.*warehouses=*/c\warehouses=10' props_10.mo
          sed -i 's/tpcc/tpcc_10/g' props_10.mo
          sed -i '/runMins=*/c\runMins=5' props_10.mo
          sed -i '/.*expectedErrorCodes=*/c\expectedErrorCodes=20619,1062,9999' props_10.mo
          ./runBenchmark.sh props_10.mo | tee report/tpcc-benchmark-10-100.log
          ./runVerify.sh props_10.mo | tee report/tpcc-verify-10-100.log

      - name: Dump mo-service-new goroutines
        if: ${{ always() && !cancelled() }}
        run: |
          max_retry=5
          retry=0
          while [ "$(ps -ef | grep 'mo-service' | grep -v "grep" | wc -l)" -gt 0 ]; do
            curl http://localhost:12345/debug/pprof/goroutine\?debug=2 -o ${{ github.workspace }}/workspace/new-dump-stacks${retry}.log
            pkill -9 mo-service
            retry=$((retry+1))
            if [ ${retry} -ge ${max_retry} ]; then
              echo 'after retry, still cannot shutdown mo-service'
              exit 1
            fi
            sleep 2
          done

      - name: generate upload files
        if: ${{ always() }}
        continue-on-error: true
        run: |
          mkdir -p ${{ github.workspace }}/upload
          mv ${{ github.workspace }}/workspace ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-load/report ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-load/report-release ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-load-data/report ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-load-data/report-release ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-tpcc/report ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-tpcc/report-release ${{ github.workspace }}/upload/

      - uses: actions/upload-artifact@v3
        if: ${{ failure() || cancelled()}}
        continue-on-error: true
        with:
          name: compatibility-test-With-${{ env.release }}
          path: |
            ${{ github.workspace }}/upload
          retention-days: 7
          
  upgrade-oldrelease-linux-x86:
    runs-on: aws-arm64-runner
    name: Compatibility Test With OldRelease on Linux/x64(LAUNCH)
    timeout-minutes: 60

    steps:
      - name: checkout head
        uses: actions/checkout@v3
        with:
          path: ./head
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: checkout oldrelease ${{ env.oldrelease }}
        uses: actions/checkout@v3
        with:
          path: ./upstream
          repository: ${{ github.event.pull_request.base.repo.full_name }}
          ref: ${{ env.oldrelease }}
      - name: Clone mo-load Repo
        if: ${{ always() && !cancelled() }}
        uses: actions/checkout@v3
        with:
          repository: matrixorigin/mo-load
          token: ${{secrets.TOKEN_ACTION}}
          path: ./mo-load
          ref: main
      - name: Clone mo-load-data Repo
        if: ${{ always() && !cancelled() }}
        uses: actions/checkout@v3
        with:
          repository: matrixorigin/mo-load-data
          token: ${{secrets.TOKEN_ACTION}}
          path: ./mo-load-data
          ref: main

      - name: Clone mo-tpcc Repo
        if: ${{ always() && !cancelled() }}
        uses: actions/checkout@v3
        with:
          repository: matrixorigin/mo-tpcc
          token: ${{secrets.TOKEN_ACTION}}
          path: ./mo-tpcc
          ref: main

      - name: Set up Go
        uses: ./head/.github/actions/setup_env
      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2

      - name: Build MatrixOne for head
        run: |
          cd $GITHUB_WORKSPACE/head && make clean && make build
          git rev-parse --short HEAD          

      - name: Build MatrixOne for oldrelease ${{ env.oldrelease }}
        run: |
          cd $GITHUB_WORKSPACE/upstream && make clean && make build          
          git rev-parse --short HEAD

      - name: Create path for execution
        run: |
          cd $GITHUB_WORKSPACE && mkdir workspace 

      - name: Start the OldRelease ${{ env.oldrelease }} of MO
        run: |
          cd $GITHUB_WORKSPACE/workspace
          mv $GITHUB_WORKSPACE/upstream/etc .
          mv $GITHUB_WORKSPACE/upstream/mo-service .
          mv $GITHUB_WORKSPACE/upstream/optools .
          
          # Explicitly declare pessimistic mode
          # echo "==============cn configuration of upstram=============="
          # echo 'mode = "Pessimistic"' >> ./etc/launch-tae-CN-tae-DN/cn.toml
          # cat ./etc/launch-tae-CN-tae-DN/cn.toml
          # echo "==============tn configuration of upstram=============="
          # sed -i 's@\[dn\.Txn\]@\[dn\.txn\]\nmode = "Pessimistic"@g' ./etc/launch-tae-CN-tae-DN/dn.toml
          # cat ./etc/launch-tae-CN-tae-DN/dn.toml
          echo "==============mo service binary information=============="
          ./mo-service -version
          ./optools/run_bvt.sh $GITHUB_WORKSPACE/workspace launch-tae-CN-tae-DN

      - name: Start OLTP Point Select Test With 100 Threads
        if: ${{ always() && !cancelled()  }}
        timeout-minutes: 15
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale
          sleep 60s
          
          cd $GITHUB_WORKSPACE/mo-load
          mkdir -p report
          echo 'Start Prepare Data of 10-tables-100000-per-table'
          ./start.sh -m SYSBENCH -n 10 -s 100000 -t 1 | tee report/load-oltp-select.log
          sleep 10
          
          echo ''
          echo 'Start OLTP Point Select Test With 100 threads'
          ./start.sh -c cases/sysbench/point_select_10_100000 -t 100 -d 5 -g -b sbtest | tee report/oltp-select.log
      # start tpcc test
      - name: Load TPCC 10 Warehouse Data
        if: ${{ always() && !cancelled() }}
        timeout-minutes: 10
        id: load_tpcc_data
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale
          sleep 60s
          cd $GITHUB_WORKSPACE/mo-load-data
          mkdir -p report
          sed -i  "s/s3_bucket: \"mo-load-data\"/s3_bucket: \"prepared-load-data\"/g" `grep s3_bucket -rl cases/00_from_s3/tpcc_10`
          ./load.sh -c cases/00_from_s3/tpcc_10 -r -m -g | tee report/mo-load-data-tpcc.log
          
      - name: Start TPCC 10 Warehouses 100 terminals Test
        if: ${{ always() && !cancelled() && steps.load_tpcc_data.conclusion == 'success' }}
        timeout-minutes: 15
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale          
          cd $GITHUB_WORKSPACE/mo-tpcc
          mkdir -p report
          cp props.mo props_10.mo
          sed -i '/.*terminals=*/c\terminals=100' props_10.mo
          sed -i '/.*warehouses=*/c\warehouses=10' props_10.mo
          sed -i 's/tpcc/tpcc_10/g' props_10.mo
          sed -i 's/127.0.0.1/${{ needs.setup_mo_test_env.outputs.mo_svc_ip }}/g' props_10.mo
          sed -i '/runMins=*/c\runMins=5' props_10.mo
          sed -i '/.*expectedErrorCodes=*/c\expectedErrorCodes=20619,1062,9999' props_10.mo
          sed -i 's/user=.*/user=${{ steps.account_for_tpcc.outputs.tpcc_account }}/g' props_10.mo
          sed -i 's/password=.*/password=${{ steps.account_for_tpcc.outputs.tpcc_password }}/g' props_10.mo
          ./runBenchmark.sh props_10.mo | tee report/tpcc-benchmark-10-100.log
          ./runVerify.sh props_10.mo | tee report/tpcc-verify-10-100.log

      - name: Dump mo-service goroutines
        if: ${{ always() && !cancelled() }}
        run: |
          max_retry=5
          retry=0
          while [ "$(ps -ef | grep 'mo-service' | grep -v "grep" | wc -l)" -gt 0 ]; do
            curl http://localhost:12345/debug/pprof/goroutine\?debug=2 -o ${{ github.workspace }}/workspace/upstream-dump-stacks${retry}.log
            pkill -9 mo-service
            retry=$((retry+1))
            if [ ${retry} -ge ${max_retry} ]; then
              echo 'after retry, still cannot shutdown mo-service'
              exit 1
            fi
            sleep 2
          done

      - name: Start the Version of Head of MO
        run: |
          cd $GITHUB_WORKSPACE/workspace
          mv mo-service mo-service-upstream
          mv mo-service.log upstream-mo-service.log
          rm -rf mo-data/etl
          rm -rf etc
          rm -rf optools
          # delete for clear the start finish status of mo
          rm -rf mo-data/local/system_init_completed
          mv $GITHUB_WORKSPACE/head/etc .
          mv $GITHUB_WORKSPACE/head/optools .
          mv $GITHUB_WORKSPACE/head/mo-service .
          echo "==============cn configuration of upstram=============="
          cat ./etc/launch/cn.toml
          echo "==============tn configuration of upstram=============="
          if [[ -f ./etc/launch/dn.toml ]]; then
            cat ./etc/launch/dn.toml     
          else 
            cat ./etc/launch/tn.toml     
          fi
          echo "==============mo service binary information=============="
          ./mo-service -version
          ./optools/run_bvt.sh $GITHUB_WORKSPACE/workspace launch

      - name: Start OLTP Point Select Test With 100 Threads For HEAD
        if: ${{ always() && !cancelled()  }}
        timeout-minutes: 15
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale
          sleep 60s
          
          cd $GITHUB_WORKSPACE/mo-load
          mv report report-release
          mkdir -p report
          echo 'Start Prepare Data of 10-tables-100000-per-table'
          ./start.sh -m SYSBENCH -n 10 -s 100000 -t 1 | tee report/load-oltp-select.log
          sleep 10
          
          echo ''
          echo 'Start OLTP Point Select Test With 100 threads'
          ./start.sh -c cases/sysbench/point_select_10_100000 -t 100 -d 5 -g -b sbtest | tee report/oltp-select.log
      # start tpcc test
      - name: Load TPCC 10 Warehouse Data
        if: ${{ always() && !cancelled() }}
        timeout-minutes: 10
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale
          sleep 60s
          cd $GITHUB_WORKSPACE/mo-load-data
          mv report report-release
          mkdir -p report
          sed -i  "s/s3_bucket: \"mo-load-data\"/s3_bucket: \"prepared-load-data\"/g" `grep s3_bucket -rl cases/00_from_s3/tpcc_10`
          ./load.sh -c cases/00_from_s3/tpcc_10 -r -m -g | tee report/mo-load-data-tpcc.log
          
      - name: Start TPCC 10 Warehouses 100 terminals Test
        if: ${{ always() && !cancelled() && steps.load_tpcc_data.conclusion == 'success' }}
        timeout-minutes: 30
        run: |
          set -uo pipefail
          export LC_ALL="C.UTF-8"
          locale          
          cd $GITHUB_WORKSPACE/mo-tpcc
          mv report report-release
          mkdir -p report
          cp props.mo props_10.mo
          sed -i '/.*terminals=*/c\terminals=100' props_10.mo
          sed -i '/.*warehouses=*/c\warehouses=10' props_10.mo
          sed -i 's/tpcc/tpcc_10/g' props_10.mo
          sed -i '/runMins=*/c\runMins=5' props_10.mo
          sed -i '/.*expectedErrorCodes=*/c\expectedErrorCodes=20619,1062,9999' props_10.mo
          ./runBenchmark.sh props_10.mo | tee report/tpcc-benchmark-10-100.log
          ./runVerify.sh props_10.mo | tee report/tpcc-verify-10-100.log


      - name: Dump mo-service-new goroutines
        if: ${{ always() && !cancelled() }}
        run: |
          max_retry=5
          retry=0
          while [ "$(ps -ef | grep 'mo-service' | grep -v "grep" | wc -l)" -gt 0 ]; do
            curl http://localhost:12345/debug/pprof/goroutine\?debug=2 -o ${{ github.workspace }}/workspace/new-dump-stacks${retry}.log
            pkill -9 mo-service
            retry=$((retry+1))
            if [ ${retry} -ge ${max_retry} ]; then
              echo 'after retry, still cannot shutdown mo-service'
              exit 1
            fi
            sleep 2
          done

      - name: generate upload files
        if: ${{ always() }}
        continue-on-error: true
        run: |
          mkdir -p ${{ github.workspace }}/upload
          mv ${{ github.workspace }}/workspace ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-load/report ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-load/report-release ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-load-data/report ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-load-data/report-release ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-tpcc/report ${{ github.workspace }}/upload/
          mv ${{ github.workspace }}/mo-tpcc/report-release ${{ github.workspace }}/upload/


      - uses: actions/upload-artifact@v3
        if: ${{ failure() || cancelled()}}
        continue-on-error: true
        with:
          name: compatibility-test-With-${{ env.oldrelease }}
          path: |
            ${{ github.workspace }}/upload
          retention-days: 7
