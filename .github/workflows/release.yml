# This is a basic workflow to help you get started with Actions

name: release

on:
  release:
    types: [published]


jobs:
  linux-build-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
      - name: Use Golang
        uses: actions/setup-go@v1
        with:
          go-version: "1.19"
      - name: Build normal
        run: |
          make build
          zip -r mo-linux-amd64.zip mo-service ./etc/launch-tae-CN-tae-DN
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_ACTION }}
      - name: Upload Release normal linux
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_ACTION }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./mo-linux-amd64.zip
          asset_name: mo-${{ steps.get_release.outputs.tag_name }}-linux-amd64.zip
          asset_content_type: application/zip

  darwin-build-job:
    runs-on: macos-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v1
      - name: Use Golang
        uses: actions/setup-go@v1
        with:
          go-version: "1.19"
      - name: Build normal
        run: |
          make build
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      - name: Install gon via HomeBrew for code signing and app notarization
        env:
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon
          cp ./optools/sign/gon.json ./gon.json
          gon -log-json ./gon.json
          unzip -d ./mo-macos11 mo-macos11.zip
          mkdir -p ./mo-macos11/etc
          cp -r ./etc/launch-tae-CN-tae-DN ./mo-macos11/etc/
          cd ./mo-macos11
          spctl -a -vvv -t install mo-service
          codesign --test-requirement="=notarized" -vv mo-service
          zip -r mo-darwin-x86_64.zip mo-service ./etc/launch-tae-CN-tae-DN
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_ACTION }}
      - name: Upload Release normal linux
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_ACTION }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./mo-macos11/mo-darwin-x86_64.zip
          asset_name: mo-${{ steps.get_release.outputs.tag_name }}-darwin-x86_64.zip
          asset_content_type: application/zip
