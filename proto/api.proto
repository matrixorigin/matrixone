/* 
 * Copyright 2021 Matrix Origin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
syntax = "proto3";
package api;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "timestamp.proto";
import "plan.proto";


option go_package = "github.com/matrixorigin/matrixone/pkg/pb/api";
option (gogoproto.sizer_all) = false;
option (gogoproto.protosizer_all) = true;

//types.type
enum TypeID {
    T_any   = 0;
    T_star  = 1;

    // bool family
    T_bool  = 10;

    // numeric/integer family
    T_int8     = 20;
    T_int16    = 21;
    T_int32    = 22;
    T_int64    = 23;
    T_int128   = 24;
    T_uint8    = 25;
    T_uint16   = 26;
    T_uint32   = 27;
    T_uint64   = 28;
    T_uint128  = 29;

    // numeric/float family
    T_float32  = 30;
    T_float64  = 31;

    // numeric/decimals
    T_decimal64   = 32;
    T_decimal128  = 33;

    // pseudo numerics, not used

    // date and time
    T_date       = 50;
    T_time       = 51;
    T_datetime   = 52;
    T_timestamp  = 53;
    T_interval   = 54;

    // string family
    T_char     = 60;
    T_varchar  = 61;
    T_json     = 62;

    // blobs
    T_blob  = 70;

    // Transaction TS
    T_TS  = 100;

    // system family
    T_sel    = 200;
    T_tuple  = 201;
}

message Type {
	TypeID	id           = 1;
	bool 	nullable		= 2;
	int32 	width			= 3;
	int32 	precision		= 4;
	int32 	size 			= 5;
	int32 	scale 		= 6;
};


message Vector {
    bytes data = 1;
    Type  type = 2;
    bool  nullable = 3;
    bytes nsp = 4;
    bool is_const = 5;
};

message TSRange {
    timestamp.Timestamp from = 1;
    timestamp.Timestamp to   = 2;
};

message Batch {
    repeated string attrs = 1;
    repeated Vector vecs = 2;
};

message TableID {
    uint64 db_id  = 1; 
    uint64 tb_id  = 2;
}

// CN pull the tail of redo logs from DN.
message SyncLogTailReq {
    timestamp.Timestamp checkpoint_ts = 1;
    TSRange   range = 2;
    repeated TableID tables = 3;
    bool all = 4;
};

message SyncLogTailResp {
    timestamp.Timestamp checkpoint_ts = 1;
    repeated timestamp.Timestamp new_checkpoints = 2;
    repeated Entry commands = 3;
};

//DN--->CN: DML
//Append batch of data which comes from localsegment of table into multiple blocks.

//// Append batch of data into table : 
//      Entry {
//          entry_type = Insert
//          table_id =  tid
//          database_id = dbId
//          table_name =  xxx
//          database_name = xxx
//          file_name = "" 
//          block_id = 0
//          bat.attrs = {"rowid", "commit timestamp", "primary column value",  "column1 value", ...}
//      }

//// delete a batch of data from a block : 
//      Entry {
//          entry_type = Delte
//          table_id =  tid
//          database_id = dbId
//          table_name =  xxx
//          database_name = xxx
//          file_name = "" 
//          FIXME:: transient block id when bulk loading.
//          block_id = 0
//          bat.attrs = {"rowid", "commit timestamp"}
//      }
// DDL:
// create block : 
//      Entry {
//          entry_type = Insert
//          table_id = tid
//          database_id = dbId
//          table_name =  xxx
//          database_name = xxx
//          file_name = "" 
//          block_id = 0
//          FIXME:: "Start" is the latest txn's start timestamp, "End" is the latest txn's commit timestamp
//          bat.attrs = {"BlockId", "EntryState", "CreatedAt", 
//                            "Start", "End", "MetaLoc", "DeltaLoc"}
//      }

// delete block : 
//      Entry {
//          entry_type = Delete
//          table_id = tid
//          database_id = dbId
//          table_name =  xxx
//          database_name = xxx
//          file_name = "" 
//          block_id = 0
//          bat.attrs = {"BlockId", "EntryState", "DeletedAt",
//                         "Start", "End", "MetaLoc", "DeltaLoc"}
//      }

// create segment: pls refer to "create block"

// delete segment: pls refer to "delete block"


// create a user table: 
//   insert entry into mo_tables and ...
//      Entry {
//          entry_type = Insert
//          table_id = 1
//          database_id =  0
//          table_name =  mo_tables
//          database_name = mo_catalog
//          file_name = "" 
//          block_id = 0
//          bat.attrs = {"relid", "relname", ..., "CreatedAt", "Start", "End"} 
//                        
//      }

// drop table: 
//  drop entries from mo_tables and ...
//      Entry {
//          entry_type = delete
//          table_id = 1
//          database_id = 0
//          table_name =  mo_tables
//          database_name = mo_catalog
//          file_name = "" 
//          block_id = 0
//          bat.attrs = {"relid", "relname", ... , "DeletedAt", "Start", "End"}
//      }


//message BatchCommands {
//    TSRange desc = 1;
 //   ScopeDesc scope = 2;
  //  repeated  Entry commands = 3;
//};

message PrecommitWriteCmd {
    repeated Entry entry_list = 1;
};

// cn->dn or dn->cn
message Message {
    repeated Entry entry_list = 1;
};

// CN--->DN, DDL
// create database test: 
//      Entry {
//          entry_type = Insert
//          table_id = 0
//          database_id = 0
//          table_name = mo_database
//          database_name = mo_catalog
//          file_name = "" 
//          block_id = 0
//          bat = "test, 0, ..." 
//      }
// drop database test:
//      Entry {
//          entry_type = Delete
//          table_id = 0
//          database_id = 0
//          table_name = mo_database
//          database_name = mo_catalog
//          file_name = "" 
//          block_id = 0
//          bat= "test, 0, ..." 
//      }

// create a user table: 
//  insert entry into mo_tables and ...;
//      Entry {
//          entry_type = Insert
//          table_id = 1
//          database_id =  0
//          table_name =  mo_tables
//          database_name = mo_catalog
//          file_name = "" 
//          block_id = 0
//          bat.attrs = {"relid", "relname", "reldatabase", ...}
//      }

// drop table: 
//  delete entry from mo_tables and ...;
//      Entry {
//          entry_type = delete
//          table_id = 1
//          database_id = 0
//          table_name =  mo_tables
//          database_name = mo_catalog
//          file_name = "" 
//          block_id = 0
//          bat.attrs = {"relid", "relname",...}
//      }

//  bulk load:
// bulk loads a block into S3.
//      Entry {
//          entry_type = Insert
//          table_id = tid
//          database_id = dbId
//          table_name =  xxx
//          database_name = xxx
//          file_name = "s3 file name" 
//          //transient block id;
//          block_id = "xxx" 

//          //block meta info and colunm meta info
//          bat.attrs = {"clounm index", "min", "max", "bf location", "data location",...}
//      }

//  DML:
// append a batch of data into table;
//            Entry {
    //          entry_type = Insert
    //          table_id =  tid
    //          database_id = dbId
    //          table_name =  xxx
    //          database_name = xxx
    //          file_name = "" 
    //          block_id = 0
    //          bat.attrs = {"primary column value",  "column1 value", ...}
    //      }

//  delete batch of data from table;
//            Entry {
    //          entry_type = Insert
    //          table_id =  tid
    //          database_id = dbId
    //          table_name =  xxx
    //          database_name = xxx
    //          file_name = "" 
    //          block_id = 0
    //          bat.attrs = {"rowid", "primary column value",  "column1 value", ...}
    //      }


message Entry {
    enum EntryType {
        Insert = 0;
        Delete = 1;
    }
    EntryType entry_type = 1;
    uint64    table_id = 2;
    uint64    database_id = 3;
    string    table_name = 4;
    string    database_name = 5;
    string    file_name = 6;
    uint64    block_id = 7;
    Batch     bat = 8;
};
