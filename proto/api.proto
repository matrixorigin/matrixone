/* 
 * Copyright 2021 Matrix Origin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
syntax = "proto3";
package api;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "timestamp.proto";
import "plan.proto";


option go_package = "github.com/matrixorigin/matrixone/pkg/pb/api";
option (gogoproto.sizer_all) = false;
option (gogoproto.protosizer_all) = true;

//types.type
enum TypeID {
    T_any   = 0;
    T_star  = 1;

    // bool family
    T_bool  = 10;

    // numeric/integer family
    T_int8     = 20;
    T_int16    = 21;
    T_int32    = 22;
    T_int64    = 23;
    T_int128   = 24;
    T_uint8    = 25;
    T_uint16   = 26;
    T_uint32   = 27;
    T_uint64   = 28;
    T_uint128  = 29;

    // numeric/float family
    T_float32  = 30;
    T_float64  = 31;

    // numeric/decimals
    T_decimal64   = 32;
    T_decimal128  = 33;

    // pseudo numerics, not used

    // date and time
    T_date       = 50;
    T_time       = 51;
    T_datetime   = 52;
    T_timestamp  = 53;
    T_interval   = 54;

    // string family
    T_char     = 60;
    T_varchar  = 61;
    T_json     = 62;

    // blobs
    T_blob  = 70;

    // Transaction TS
    T_TS  = 100;

    // system family
    T_sel    = 200;
    T_tuple  = 201;
}

message Type {
	TypeID	id           = 1;
	bool 	nullable		= 2;
	int32 	width			= 3;
	int32 	precision		= 4;
	int32 	size 			= 5;
	int32 	scale 		= 6;
};


message DBInfo {
    string name         =1;
    bool   is_sys        =2;
};

message DatabaseCmd {
    uint64 db_id  = 1;
    uint64 mask  = 2;
    //creating database 
    DBInfo create = 3;
    map<uint64, TableCmd> table_cmds = 4;
    bool drop = 5;
};

message Location {
    string key = 1;
    uint32 offset = 2;
    uint32 len = 3;
    uint32 olen = 4;
};
message ZoneMap {
    TypeID typ = 1;
    plan.Const min = 2;
    plan.Const max = 3;
};

message ColumnMeta {
    uint32 idx = 1;
    ZoneMap zm = 2;
    Location bf_location = 3;
    Location data_location = 4;
};

message BlockMeta {
    uint32 colunm_cnt = 1;
    uint32 alog      = 2;
};

message BlockInfo {
    BlockMeta block_meta = 1;
    repeated ColumnMeta columns_meta = 2;
};

message Vector {
    bytes data = 1;
    Type  type = 2;
    bool  nullable = 3;
    bytes nsp = 4;
    bool is_const = 5;
};

message AppendInfo {
    //[]string
    repeated string attrs = 1;
    //[]Vector
    repeated Vector vecs  = 2;
};

message RowRange {
    uint32 start = 1;
    uint32 end = 2;
};

message DeleteInfo {
    message DefType {
		oneof def {
            RowRange range = 1;                       
            //bitmap
            string   rows = 2;
		}
	}
    DefType range_rows = 1; 
    //RowRange range = 1;
    //bitmap
    //[]byte? too expensive ?
    //string rows = 2;
}

message BlockCmd {
    uint64 id = 1;
    //bitmap
    uint32 mask = 2;
    BlockInfo create = 3;
    AppendInfo append = 4;
    DeleteInfo delete = 5;
    bool drop = 6;
};

message AccessInfo {
    uint32 tenant_id = 1;
    uint32 user_id  = 2;
    uint32 role_id  = 3;
    timestamp.Timestamp create_at = 4;
};

message ColDef {
    string name = 1;
    int32    idx  = 2;
    Type   type = 3;
    bool   hidden = 4;
    bool   phy_addr = 5;
    bool   null_ability = 6;
    bool   auto_increment = 7;
    bool   primary  = 8;
    int32  sort_idx = 9;
    bool   sort_key = 10;
    string comment = 11;
    plan.Default default = 12;

};

message TableDef {
    AccessInfo ac_info = 1;
    string     name = 2;
    //[]ColDef?
    repeated ColDef cols_def = 3;
    map<string, int32> name_index = 4;
    string comment = 5;
    string rel_kind = 6;
    string create_sql = 7;
    string view = 8;
};

message TableCmd {
    uint64 tid = 1;
    //bitmap
    uint64 mask = 2;
    TableDef create = 3;
	//FIXME::transient block id is unique in CN's workspace.
    map<uint64, BlockCmd> block_cmds = 4;
    bool drop = 5;
};


// CN precommit the write command  
/*
message PrecommitWriteCmd {
    map<uint64, DatabaseCmd> db_cmds = 1;
};
*/

message DatabaseID {
    uint64 id = 1;
};

message TableID {
    uint64 tab_id = 1;
    DatabaseID db_id = 2;
};

message SegmentID {
    uint64 seg_id = 1;
    TableID tab_id = 2;
};

message BlockID {
    uint64  block_id = 1;
    SegmentID seg_id = 2;
};

message TSRange {
    timestamp.Timestamp from = 1;
    timestamp.Timestamp to   = 2;
};

message ScopeDesc {
    bool all = 1;
    //[]TableID?
    repeated TableID tables = 2;
};


// CN pull the tail of redo logs from DN.
message SyncLogTailReq {
    timestamp.Timestamp checkpoint_ts = 1;
    TSRange   range = 2;
    //[]TableID
    repeated TableID tables = 3;
    bool all = 4;
};


enum CmdType {
    CmdBatch = 0;
	CmdAppend = 1;
	CmdMvccUpdate = 2;
	CmdMetaEntry = 3;
	CmdComposed = 4;
	CmdCompactBlock = 5;
	CmdMergeBlocks = 6;
};

message Batch {
    //[]string?
    repeated string attrs = 1;
    //[]Vector?
    repeated Vector vecs = 2;
    //bitmap --->string
    //[]byte
    //bytes deletes = 3;
};


//Append batch of data which comes from localsegment of table into multiple blocks.

//// Append batch of data into table : 
//      Entry {
//          entry_type = Insert
//          table_id =  tid
//          database_id = dbId
//          table_name =  xxx
//          database_name = xxx
//          file_name = "" 
//          block_id = 0
//          block.attrs = {"rowid", "commit timestamp", "primary column data",  "column1 data", ...}
//      }

//// delete a batch of data from a block : 
//      Entry {
//          entry_type = Delte
//          table_id =  tid
//          database_id = dbId
//          table_name =  xxx
//          database_name = xxx
//          file_name = "" 
//          FIXME:: transient block id when bulk loading.
//          block_id = 0
//          block.attrs = {"rowid", "commit timestamp"}
//      }

// create block : 
//      Entry {
//          entry_type = Insert
//          table_id = tid
//          database_id = dbId
//          table_name =  xxx
//          database_name = xxx
//          file_name = "" 
//          block_id = 0
//          FIXME:: what's the type? hardencoded?
//          block.attrs = {"BlockId", "EntryState", "CreatedAt", "DeletedAt",
//                            "Start", "End", "MetaLoc", "DeltaLoc"}
//      }

// delete block : 
//      Entry {
//          entry_type = Delete
//          table_id = tid
//          database_id = dbId
//          table_name =  xxx
//          database_name = xxx
//          file_name = "" 
//          block_id = 0
//          block.attrs = {"BlockId", "EntryState", "CreatedAt", "DeletedAt",
//                         "Start", "End", "MetaLoc", "DeltaLoc"}
//      }

// create segment:


// delete segment:



// create a user table: 
//      Entry {
//          entry_type = Insert
//          table_id = 1
//          database_id =  0
//          table_name =  mo_tables
//          database_name = mo_catalog
//          file_name = "" 
//          block_id = 0
//          block.attrs = {"TableName", "Tid", "Column1Name", "Colunm1Type", ...
//                      "CreatedAt", "DeletedAt", "Start", "End", "MetaLoc", "DeltaLoc"}
//      }

// drop table: 
//      Entry {
//          entry_type = delete
//          table_id = 1
//          database_id = 0
//          table_name =  mo_tables
//          database_name = mo_catalog
//          file_name = "" 
//          block_id = 0
//          block.attrs = {"TableName", "Tid"}
//      }


message BatchCommands {
    TSRange desc = 1;
    ScopeDesc scope = 2;
    repeated  Entry commands = 3;
};


message SyncLogTailResp {
    //FIXME::??
    timestamp.Timestamp checkpoint_ts = 1;
    //[]Timestamp
    repeated timestamp.Timestamp new_checkpoints = 2;
    BatchCommands commands = 3;
};

message PrecommitWriteCmd {
    repeated Entry entry_list = 1;
};

// cn->dn or dn->cn
message Message {
    repeated Entry entry_list = 1;
};

// create database test: 
//      Entry {
//          entry_type = Insert
//          table_id = 0
//          database_id = 0
//          table_name = mo_database
//          database_name = mo_catalog
//          file_name = "" 
//          block_id = 0
//          block = "test, 0, ..." 
//      }
// drop database test:
//      Entry {
//          entry_type = Delete
//          table_id = 0
//          database_id = 0
//          table_name = mo_database
//          database_name = mo_catalog
//          file_name = "" 
//          block_id = 0
//          block = "test, 0, ..." 
//      }
message Entry {
    enum EntryType {
        Insert = 0;
        Delete = 1;
    }
    EntryType entry_type = 1;
    uint64    table_id = 2;
    uint64    database_id = 3;
    string    table_name = 4;
    string    database_name = 5;
    string    file_name = 6;
    uint64    block_id = 7;
    Batch     block = 8;
};
