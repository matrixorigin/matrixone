/* 
 * Copyright 2021 Matrix Origin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package metadata; 
option go_package = "github.com/matrixorigin/matrixone/pkg/pb/metadata";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_enum_prefix_all) = true;

// ServiceType service type
enum ServiceType {
  // CN cn service
  CN  = 0;
  // TN tn service
  TN  = 1;
  // LOG log service
  LOG = 2;
  // Proxy proxy service
  PROXY = 3;
  // PYTHON_UDF python udf service
  PYTHON_UDF = 4;
}

// TNShardRecord is TN shard metadata describing what is a TN shard. It
// is internally used by HAKeeper to maintain how many TNs available in
// the system. 
message TNShardRecord {
  // ShardID the id of the TN shard.
  uint64 ShardID    = 1;
  // LogShardID a TN corresponds to a unique Shard of LogService.
  uint64 LogShardID = 2;
}

// TNShard 
message TNShard {
  // TNShard extends TNShardRecord
  TNShardRecord TNShardRecord = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // ReplicaID only one replica for one TN. The ReplicaID is specified at
  // the time the TN is created. TN restart ReplicaID will not change, when
  // a TN is migrated to another node, the ReplicaID will be reset.
  uint64 ReplicaID  = 2;
  // Address is TN's external service address.
  string Address    = 3;
}

// LogShardRecord is Log Shard Metadata describing what is a Log shard. It is
// internally used by the HAKeeper to maintain how many Log shards are available
// in the system.
message LogShardRecord {
  // ShardID is the id of the Log Shard. 
  uint64 ShardID = 1;
  // NumberOfReplicas is the number of replicas in the shard.
  uint64 NumberOfReplicas = 2;
}

// LogShard
message LogShard {
  // LogShard extends LogShardRecord
  LogShardRecord LogShardRecord = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // ReplicaID is the replica ID of the replica running on the LogStore. 
  uint64 ReplicaID  = 2;
}

// TNStore TN store metadata
message TNStore {
  // UUID TNStore uuid id
  string UUID = 1;
  // Shards TNShards
  repeated TNShard Shards = 2 [(gogoproto.nullable) = false];
}

// LogStore is for the metadata for Log store.
message LogStore {
  // UUID is the id of the Log store.
  string UUID = 1;
  // Shards is for Log shards metadata.
  repeated LogShard Shards = 2 [(gogoproto.nullable) = false];
}

// CNRole cn node role
enum CNRole {
  // TP tp node
  TP = 0;
  // AP ap node
  AP = 1;
}

// CNStore cn store metadata
message CNStore {
  // UUID CNStore uuid id
  string UUID = 1;
  // Role CN role
  CNRole Role  = 2;
}

// CNService cn service metadata
message CNService {
  // ServiceID service ID
  string ServiceID              = 1;
  // LockServiceAddress is used to provide lock service
  string LockServiceAddress     = 2;
  // PipelineServiceAddress is used to provide distributed pipeline service
  string PipelineServiceAddress = 3;
  // SQLAddress is used to provide SQL input.
  string SQLAddress             = 4;
  reserved 5;
  // Labels are labels on CN service.
  map<string, LabelList> Labels = 6 [(gogoproto.nullable) = false];
  // WorkState is the work state of CN service.
  WorkState WorkState           = 7;
  // QueryAddress is the address of queryservice.QueryService.
  string QueryAddress           = 8;
}

// TNService tn service metadata
message TNService {
  // ServiceID service ID
  string ServiceID              = 1;
  // TxnServiceAddress is used to provide txn service
  string TxnServiceAddress      = 2;
  // LogTailServiceAddress is used to provide logtail push service
  string LogTailServiceAddress  = 3;
  // LockServiceAddress lock service address for lock table allocator
  string LockServiceAddress     = 4;
  reserved 5;
  // Shards TN shards on service
  repeated TNShard Shards       = 6 [(gogoproto.nullable) = false];
  // Labels labels on service
  map<string, LabelList> Labels = 7 [(gogoproto.nullable) = false];
  // QueryAddress it the address of query service on the tn
  string          QueryAddress       = 8;
}

// LabelList defines the labels on CN store.
message LabelList {
  repeated string Labels = 1;
}

// WorkState is the work state of CN service.
enum WorkState {
  Unknown  = 0;
  Working  = 1;
  Draining = 2;
  Drained  = 3;
}

