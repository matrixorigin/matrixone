// Copyright 2022 MatrixOrigin.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package logservice;
option go_package = "github.com/matrixorigin/matrixone/pkg/pb/logservice";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "metadata.proto";

option (gogoproto.goproto_enum_prefix_all) = false;

// LogShardInfo contains information a log shard.
message LogShardInfo {
  // ShardID is the ID of a Log shard.
  uint64 ShardID               = 1;
  // Replicas is a map of ReplicaID to LogStore UUID, it describe the member
  // replicas of the shard at the given Epoch. 
  map<uint64, string> Replicas = 2;
  // Epoch is the epoch value of the Shard, member replicas of the Shard can
  // change across epochs. 
  uint64 Epoch                 = 3;
  // LeaderID is the ReplicaID of the leader replica at the given term. When
  // LeaderID is 0, it means there is no leader or the leader is unknown.
  uint64 LeaderID              = 4;
  // Term is the Raft term value. 
  uint64 Term                  = 5;

  // TODO: per shard stats like CPU/memory/network usage can be added here
};

// LogReplicaInfo contains information of a log replica.
message LogReplicaInfo {
  LogShardInfo LogShardInfo = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // ReplciaID is the ID of a replica within the Log shard. 
  uint64 ReplicaID = 2;
}

// LogStoreHeartbeat is the periodic message sent to the HAKeeper by Log Stores.
message LogStoreHeartbeat {
  // UUID is the uuid of the Log Store.
  string UUID = 1;
  
  string RaftAddress    = 2;
  string ServiceAddress = 3;
  string GossipAddress  = 4;

  // Replicas is a list of LogReplicaInfo instances collected on the specified
  // LogStore. Details in Shards are based on the local knowledge of each
  // replica running on the current LogStore, it may not be accurate or
  // update to date due to various reasons. 
  repeated LogReplicaInfo Replicas = 5 [(gogoproto.nullable) = false];
};

// DNShardInfo contains information of a launched DN shard. 
message DNShardInfo {
  // ShardID uniquely identifies a DN shard. Each DN shard manages a Primary
  // Key range or hashed Primary Key value range. 
  uint64 ShardID                 = 1;
  // ReplicaID uniquely identifies a DN shard instance. After repairing a
  // failed DN shard, a new DN shard instance is created with a new ReplicaID
  // value.
  uint64 ReplicaID               = 2;

  // TODO: per shard stats like CPU/memory/network usage can be added here
};

// DNStoreHeartbeat is the periodic message sent to the HAKeeper by DN stores.
message DNStoreHeartbeat {
  // UUID is the uuid of the DN Store.
  string UUID = 1;
  // Shards is a list of DNShardInfo instances collected on the specified
  // DN store. 
  repeated DNShardInfo Shards = 2 [(gogoproto.nullable) = false];
};

message RSMState {
  uint64 Index = 1;
  uint64 LeaseHolderID = 2;
  uint64 TruncatedIndex = 3;
  map<uint64, uint64> LeaseHistory = 4; // log index -> truncate index
}

enum MethodType {
  CREATE       = 0;
  DESTROY      = 1;
  APPEND       = 2;
  READ         = 3;
  TRUNCATE     = 4;
  GET_TRUNCATE = 5;
  CONNECT      = 6;
  CONNECT_RO   = 7;
  LOG_HEARTBEAT = 8;
  DN_HEARTBEAT  = 9;
};

enum RecordType {
  UserRecord    = 0;
  Internal      = 1;
  LeaseUpdate   = 2;
  LeaseRejected = 3;
}

// LogRecord is what we store into the LogService.
message LogRecord {
  uint64 Index    = 1;
  RecordType Type = 2;
  bytes Data      = 3;
};

message LogRequest {
  string Name         = 1;
  uint64 ShardID      = 2;
  uint64 Index        = 3;
  uint64 MaxSize      = 4;
  uint64 DNShardID    = 5;
  uint64 DNID         = 6;
}

message Request {
  uint64 RequestID               = 1;
  MethodType Method              = 2;
  int64 Timeout                  = 3;
  LogRequest LogRequest          = 4 [(gogoproto.nullable) = false];
  LogStoreHeartbeat LogHeartbeat = 5 [(gogoproto.nullable) = false];
  DNStoreHeartbeat DNHeartbeat   = 6 [(gogoproto.nullable) = false]; 
};

enum ErrorCode {
  NoError               = 0;
  Timeout               = 1;
  Canceled              = 2;
  InvalidShard          = 3;
  InvalidTimeout        = 4;
  InvalidPayload        = 5;
  InvalidPayloadSize    = 6;
  Rejected              = 7;
  ShardNotReady         = 8;
  SystemClosed          = 9;

  IndexAlreadyTruncated = 100;
  OutOfRange            = 101;
  NotLeaseHolder        = 102;

  OtherSystemError      = 1000;
};

message LogResponse {
  uint64 ShardID      = 1;
  uint64 Index        = 2;
  uint64 LastIndex    = 3;
}

message Response {
  uint64 RequestID        = 1;
  MethodType Method       = 2;
  ErrorCode ErrorCode     = 3;
  string ErrorMessage     = 4;
  LogResponse LogResponse = 5 [(gogoproto.nullable) = false];
  CommandBatch CommandBatch = 6 [(gogoproto.nullable) = false];
};

message LogRecordResponse {
  repeated LogRecord Records = 1 [(gogoproto.nullable) = false];
};


//
// HAKeeper related pb
//


// Replica of the shard
message Replica {
    // UUID which store the Replica is located in
    string UUID = 1;

    uint64 ShardID   = 2;
    uint64 ReplicaID = 3;
    uint64 Epoch     = 4;
}

// ConfigChangeType indicates config change command type.
enum ConfigChangeType {
    AddReplica    = 0;
    RemoveReplica = 1;
    StartReplica  = 2;
    StopReplica   = 3;
}

// ConfigChange is the detail of a config change.
message ConfigChange {
    Replica Replica             = 1 [(gogoproto.nullable) = false];
    ConfigChangeType ChangeType = 2;

    // only used for bootstrap
    map<uint64, string> InitialMembers = 3;
}

// ShutdownStore would stop store.
message ShutdownStore {
    string StoreID = 1;
}

// ServiceType specifies type of service
enum ServiceType {
    LogService = 0;
    DnService  = 1;
}

// ScheduleCommand contains a shard schedule command.
message ScheduleCommand {
    // UUID which store the ScheduleCommand is sent to
    string UUID = 1;

    ConfigChange ConfigChange   = 2;
    ServiceType ServiceType     = 3;
    ShutdownStore ShutdownStore = 4;
}

message CommandBatch {
    uint64 Term                       = 1;
    repeated ScheduleCommand Commands = 2 [(gogoproto.nullable) = false];
}

// DNStoreInfo contins information on a list of shards.
message DNStoreInfo {
    uint64 Tick                 = 1;
    repeated DNShardInfo Shards = 2 [(gogoproto.nullable) = false];
}

// DNState contains all DN details known to the HAKeeper.
message DNState {
    // Stores is keyed by DN store UUID, it contains details found on each DN
    // store. Each DNStoreInfo reflects what was last reported by each DN store.
    map<string, DNStoreInfo> Stores = 1 [(gogoproto.nullable) = false];
}

// ClusterInfo provides a global view of all shards in the cluster. It
// describes the logical sharding of the system, rather than physical
// distribution of all replicas that belong to those shards.
message ClusterInfo {
    repeated metadata.DNShardRecord DNShards = 1 [(gogoproto.nullable) = false];
    repeated metadata.LogShardRecord LogShards = 2
        [(gogoproto.nullable) = false];
}

// LogStoreInfo contains information of all replicas found on a Log store.
message LogStoreInfo {
    uint64 Tick                                 = 1;
    string RaftAddress                          = 2;
    string ServiceAddress                       = 3;
    string GossipAddress                        = 4;
    repeated LogReplicaInfo Replicas = 5 [(gogoproto.nullable) = false];
}

message LogState {
    // Shards is keyed by ShardID, it contains details aggregated from all Log
    // stores. Each pb.LogShardInfo here contains data aggregated from
    // different replicas and thus reflect a more accurate description on each
    // shard.
    map<uint64, LogShardInfo> Shards = 1 [(gogoproto.nullable) = false];
    // Stores is keyed by log store UUID, it contains details found on each
    // store. Each LogStoreInfo here reflects what was last reported by each Log
    // store.
    map<string, LogStoreInfo> Stores = 2 [(gogoproto.nullable) = false];
}

// HAKeeperState contains all HAKeeper state required for making schedule
// commands.
message HAKeeperState {
    uint64 Tick             = 1;
    ClusterInfo ClusterInfo = 2 [(gogoproto.nullable) = false];
    DNState DNState         = 3 [(gogoproto.nullable) = false];
    LogState LogState       = 4 [(gogoproto.nullable) = false];
}

// HAKeeperRSMState contains state maintained by HAKeeper's RSM.
message HAKeeperRSMState {
    uint64 Tick                                = 1;
    uint64 NextID                              = 2;
    uint64 Term                                = 3;
    map<string, CommandBatch> ScheduleCommands = 4 [(gogoproto.nullable) = false];
    map<string, uint64> LogShards = 5;
    DNState DNState               = 6 [(gogoproto.nullable) = false];
    LogState LogState             = 7 [(gogoproto.nullable) = false];
    ClusterInfo ClusterInfo       = 8 [(gogoproto.nullable) = false];
}
