/* 
 * Copyright 2021 Matrix Origin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package lock; 
option go_package = "github.com/matrixorigin/matrixone/pkg/pb/lock";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_enum_prefix_all) = true;

// Granularity row granularity, single row or row range
enum Granularity {
  Row   = 0;
  Range = 1;
}

// LockMode lock mode
enum LockMode {
  Exclusive = 0;
  Shared    = 1;
}

// WaitPolicy wait policy
enum WaitPolicy {
  Wait     = 0;
  FastFail = 1;
}

// LockOptions lock options
message LockOptions {
  Granularity Granularity = 1;
  LockMode    Mode        = 2;
  WaitPolicy  policy      = 3;
}

// LockTable describes which CN manages a Table's Locks.
message LockTable {
  // Table table id
  uint64 Table     = 1;
  // ServiceID lock service id, a cn node will only run one instance of LockService
  string ServiceID = 2;
  // Version will incr if CN-Table bind changed.
  uint64 Version   = 3;
  // Valid false if the service is disabled, and no new service bind this table
  bool   Valid     = 4;
}

// Method lock table operations
enum Method {
  // Lock lock
  Lock      = 0;
  // Write transaction write
  Unlock    = 1;
  // Heartbeat heartbeat
  Heartbeat = 2;
  // GetBind get or create lock table bind from lock table allocator
  GetBind   = 3;
  // Keepalive keepalive the lock table bind on lock table allocator
  Keepalive = 4;
}

// Request is used to send a request for a LockTable related operation to another 
// service.
message Request {
  // RequestID request id
  uint64        RequestID    = 1;
  // LockTable lock target table
  LockTable     LockTable    = 2 [(gogoproto.nullable) = false];
  // Method request type
  Method        Method       = 3;
  // Lock lock request
  LockRequest   Lock         = 4 [(gogoproto.nullable) = false];
  // Unlock unlock request
  UnlockRequest Unlock       = 5 [(gogoproto.nullable) = false];
  // GetBindRequest get bind request
  GetBindRequest GetBind     = 6 [(gogoproto.nullable) = false];
  // KeepaliveRequest keepalive request
  KeepaliveRequest Keepalive = 7 [(gogoproto.nullable) = false];
}

// Response response
message Response {
    // RequestID corresponding request id
    uint64            RequestID   = 1;
    // Error we use this field to send moerr from service to another cn. Set with 
    // moerr.MarshalBinary, and use moerr.UnmarshalBinary to restore moerr.
    bytes             Error       = 2;
    // NewBind lock table and lockservice bind changed
    LockTable         NewBind     = 3;
    // LockResponse lock response
    LockResponse      Lock        = 4;
    // UnlockResponse unlock response 
    UnlockResponse    Unlock      = 5;
    // GetBindResponse get bind request
    GetBindResponse   GetBind     = 6 [(gogoproto.nullable) = false];
    // KeepaliveResponse keepalive request
    KeepaliveResponse Keepalive   = 7 [(gogoproto.nullable) = false];
}

// LockRequest lock request
message LockRequest {
  bytes           TxnID     = 1;
  repeated  bytes Rows      = 2;
  // LockOptions lock options
  LockOptions     Options   = 4 [(gogoproto.nullable) = false];
}

// LockResponse lock response
message LockResponse {

}

// UnlockRequest unlock request
message UnlockRequest {
  bytes TxnID     = 1;
}

// UnlockResponse unlock response
message UnlockResponse {

}

// GetBindRequest get bind request from allocator request. Send from cn to dn
message GetBindRequest {
  string ServiceID = 1;
  uint64 Table     = 2;
}

// GetBindResponse get bind request from allocator response
message GetBindResponse {
  LockTable LockTable = 2 [(gogoproto.nullable) = false];
}

// KeepaliveRequest keep lock table bind request. Send from cn to dn
message KeepaliveRequest {
  string ServiceID = 1;
}

// KeepaliveResponse keep lock table bind response
message KeepaliveResponse {
  bool OK = 1;
}
