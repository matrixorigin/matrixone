/*
 * Copyright 2021 - 2023 Matrix Origin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package query;
option go_package = "github.com/matrixorigin/matrixone/pkg/pb/query";

import "status.proto";
import "lock.proto";
import "txn.proto";
import "timestamp.proto";
import "statsinfo.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

enum CmdMethod {
  // Query is the common query command.
  Query = 0;
  // ShowProcessList represents the show process list query.
  ShowProcessList = 1;
  // AlterAccount represent set account status as restricted
  AlterAccount = 2;
  // KillConn represents the kill connection request.
  KillConn = 3;
  // ProcessTraceSpan process the trace span cmd transferred from
  // other cn
  TraceSpan = 4;
  // GetLockInfo gets the lock info from the cn
  GetLockInfo = 5;
  // GetTxnInfo gets the txn info from the cn
  GetTxnInfo = 6;
  // GetCacheInfo gets the cache info from the cn,tn
  GetCacheInfo = 7;
  // SyncCommit when we turn on Push, some BVT tests use multiple Sessions in multi-CN scenarios. To
  // ensure data visibility, we need to synchronize CommitTS between multiple CNs so that the whole
  // cluster can see the latest writes from other CNs.
  SyncCommit = 8;
  // GetCommit get latest commit timestamp of cn.
  GetCommit = 9;

  GetProtocolVersion = 10;
  SetProtocolVersion = 11;

  CoreDumpConfig = 12;
  RunTask = 13;

  // RemoveRemoteLockTable remove remote lock table on all cn
  RemoveRemoteLockTable = 14;
  GetLatestBind         = 15;
  // UnsubscribeTable unsubscribes a table in logtail client.
  UnsubscribeTable = 16;
  // GetCacheData is the method to get cached data from fileservice in remote node.
  GetCacheData = 17;
  // GetStatsInfo is the method to get stats info from remote node.
  GetStatsInfo = 18;
  // GetPipelineInfo is the method to get pipeline info from CN
  GetPipelineInfo = 19;
  // MigrateConnFrom get session info from the previous cn node.
  MigrateConnFrom = 20;
  // MigrateConnTo migrate the session info to the new cn node.
  MigrateConnTo = 21;
}

// QueryRequest is the common query request. It contains the query
// statement that need to be executed on the specified CN node.
message QueryRequest {
  // Query is the query statement.
  string Query = 1;
}

// ShowProcessListRequest is the "show process list" query request.
message ShowProcessListRequest {
  // Tenant is the tenant which the processes belong to.
  string Tenant = 1;
  // SysTenet is true if the tenant is a system tenant.
  bool SysTenant = 2;
}

// SyncCommitRequest sync commit timestamp request
message SyncCommitRequest {
  // LatestCommitTS update latest commit ts.
  timestamp.Timestamp LatestCommitTS = 1 [(gogoproto.nullable) = false];
}

// SyncCommitResponse sync commit timestamp response
message SyncCommitResponse {
  // CurrentCommitTS current commit timestamp after sync
  timestamp.Timestamp CurrentCommitTS = 1 [(gogoproto.nullable) = false];
}

// GetCommitRequest get commit timestamp request
message GetCommitRequest {
}

// GetCommitResponse get commit timestamp response
message GetCommitResponse {
  // CurrentCommitTS current commit timestamp after sync
  timestamp.Timestamp CurrentCommitTS = 1 [(gogoproto.nullable) = false];
}

message CoreDumpConfigRequest {
	// enable or disable
	string Action = 1;
}

message CoreDumpConfigResponse {
}

message GetProtocolVersionRequest {
}

message GetProtocolVersionResponse {
  // ProtocolVersion is the version of the protocol
  int64 Version = 1;
}

message SetProtocolVersionRequest {
  // ProtocolVersion is the version of the protocol
  int64 Version = 1;
}

message SetProtocolVersionResponse {
  // ProtocolVersion is the version of the protocol
  int64 Version = 1;
}

message RunTaskRequest {
  int32 TaskCode = 1;
}

message RunTaskResponse {
  string Result = 1;
}


message GetPipelineInfoRequest {
}

message GetPipelineInfoResponse {
  // Count is the total pipelines running in the server
  int64 Count = 1;
}

// Request is the query request.
message Request {
  // RequestID is the request ID.
  uint64 RequestID = 1;
  // CmdMethod is the type of command.
  CmdMethod CmdMethod = 2;
  // QueryRequest is the common query request.
  QueryRequest QueryRequest = 3;
  // ShowProcessListRequest is the request for show process list.
  ShowProcessListRequest ShowProcessListRequest = 4;
  // AlterAccountRequest is the request for alter account restricted
  AlterAccountRequest AlterAccountRequest = 5;
  // KillConnRequest is the request which kills the connections.
  KillConnRequest KillConnRequest = 6;
  // TraceSpanRequest is the request for transferred span cmd
  TraceSpanRequest TraceSpanRequest = 7;
  // GetLockInfoRequest is the request for getting the lock from the cn
  GetLockInfoRequest GetLockInfoRequest = 8;
  // GetTxnInfoRequest is the request for getting the txn info from the cn
  GetTxnInfoRequest GetTxnInfoRequest = 9;
  // GetCacheInfoRequest is the request for getting the cache info from the cn,tn
  GetCacheInfoRequest GetCacheInfoRequest = 10;

  SyncCommitRequest        SycnCommit          = 11;
  GetCommitRequest        GetCommit           = 12;

  GetProtocolVersionRequest GetProtocolVersion = 13;
  SetProtocolVersionRequest SetProtocolVersion = 14;

  CoreDumpConfigRequest CoreDumpConfig = 15;
  RunTaskRequest RunTask = 16;

  RemoveRemoteLockTableRequest  RemoveRemoteLockTable = 17;
  GetLatestBindRequest GetLatestBind = 18;
  UnsubscribeTableRequest UnsubscribeTable = 19;
  // GetCacheDataRequest is the request of getting cache data from remote fileservice.
  GetCacheDataRequest GetCacheDataRequest = 20;
  // GetStatsInfoRequest is the request of getting stats info from remote cn node.
  GetStatsInfoRequest GetStatsInfoRequest = 21;
  GetPipelineInfoRequest GetPipelineInfoRequest = 22;
  MigrateConnFromRequest MigrateConnFromRequest = 23;
  MigrateConnToRequest MigrateConnToRequest = 24;
}

// ShowProcessListResponse is the response of command ShowProcessList.
message ShowProcessListResponse {
  repeated status.Session Sessions = 1;
}

// Response is the response to query request.
message Response {
  // RequestID is the request ID.
  uint64 RequestID = 1;
  // CmdMethod is the type of command.
  CmdMethod CmdMethod = 2;
  // Error is used to return moerr. Set
  bytes Error = 3;
  // ShowProcessListResponse is the response of ShowProcessListRequest.
  ShowProcessListResponse ShowProcessListResponse = 4;
  // AlterAccountResponse is the response of AlterAccount.
  AlterAccountResponse AlterAccountResponse = 5;
  // KillConnResponse is the response of KillConnRequest.
  KillConnResponse KillConnResponse = 6;
  // TraceSpanResponse is the response of TraceSpanRequest
  TraceSpanResponse TraceSpanResponse = 7;
  // GetLockInfoResponse is the response of GetLockInfo
  GetLockInfoResponse GetLockInfoResponse = 8;
  // GetTxnInfoResponse is the response to GetTxnInfo
  GetTxnInfoResponse GetTxnInfoResponse = 9;
  // GetCacheInfoResponse is the response to GetCacheInfo
  GetCacheInfoResponse GetCacheInfoResponse = 10;

  SyncCommitResponse        SyncCommit        = 11;
  GetCommitResponse         GetCommit         = 12;

  GetProtocolVersionResponse GetProtocolVersion = 13;
  SetProtocolVersionResponse SetProtocolVersion = 14;

  CoreDumpConfigResponse CoreDumpConfig = 15;
  RunTaskResponse RunTask = 16;

  RemoveRemoteLockTableResponse  RemoveRemoteLockTable = 17;
  GetLatestBindResponse          GetLatestBind         = 18;
  UnsubscribeTableResponse UnsubscribeTable = 19;
  // GetCacheDataResponse is the response of GetCacheDataRequest.
  GetCacheDataResponse GetCacheDataResponse = 20;
  // GetStatsInfoResponse is the response of GetStatsInfoRequest.
  GetStatsInfoResponse GetStatsInfoResponse = 21;
  GetPipelineInfoResponse GetPipelineInfoResponse = 22;
  MigrateConnFromResponse MigrateConnFromResponse = 23;
  MigrateConnToResponse MigrateConnToResponse = 24;
}

// AlterAccountRequest is the "alter account restricted" query request.
message AlterAccountRequest {
  // Tenant is the tenant which to alter.
  int64 TenantId = 1;
  // Status is the tenant which will be alter to.
  string Status = 3;
}

// AlterAccountResponse is the response of command AlterAccount.
message AlterAccountResponse {
  bool alterSuccess = 1;
}

// KillConnRequest is the request that kill the connections belongs
// to the account.
message KillConnRequest {
  int64 AccountID = 1;
  uint64 Version = 2;
}

// KillConnResponse is the response to the kill connection request.
message KillConnResponse {
  bool Success = 1;
}

message TraceSpanRequest {
  string Cmd = 1;
  string Spans = 2;
  int64 Threshold = 3;
}

message TraceSpanResponse {
  string Resp = 1;
}

message GetLockInfoRequest{
}

message LockInfo{
  uint64 TableId = 1;
  repeated bytes Keys = 2;
  lock.LockMode LockMode  = 3;
  bool isRangeLock = 4;
  repeated lock.WaitTxn Holders = 5;
  repeated lock.WaitTxn Waiters = 6;
}

message GetLockInfoResponse{
  string CnId = 1;
  repeated LockInfo LockInfoList = 2;
}

message GetTxnInfoRequest{}

message TxnLockInfo{
  // TableId is the id of the table
  uint64 TableId = 1;
  // Rows
  // - point/row lock : all point lock keys
  // - rang lock : start,end,start,end
  repeated bytes Rows = 2;
  // Options
  // - type : point or range
  // - mode : shared or exclusive
  lock.LockOptions Options = 3;
}

message TxnInfo{
  // CreateAt is the create time of the txn
  google.protobuf.Timestamp CreateAt = 1
  [ (gogoproto.nullable) = false, (gogoproto.stdtime) = true ];
  txn.TxnMeta Meta= 2;
  // UserTxn denotes it is the user txn or not
  bool UserTxn = 3;
  // WaitLocks denotes the locks that the txn is waiting on
  repeated TxnLockInfo WaitLocks = 4;
}

message GetTxnInfoResponse{
  string CnId = 1;
  repeated TxnInfo TxnInfoList = 2;
}

message GetCacheInfoRequest{}

message CacheInfo{
  // NodeType is the type of the node. cn, tn
  string NodeType = 1;
  // NodeId is the uuid of the node.
  string NodeId = 2;
  // CacheType is the type of the cache. memory, disk
  string CacheType = 3;
  // Used is the used bytes of the cache for memory cache
  uint64 Used = 4;
  // Free is the free bytes of the cache for memory cache
  uint64 Free = 5;
  // HitRatio is the hit ratio of the cache.
  float HitRatio = 6;
}

message GetCacheInfoResponse{
  repeated CacheInfo CacheInfoList = 1;
}

message RemoveRemoteLockTableRequest {
  uint32 GroupID = 1;
  uint64 TableID = 2;
  uint64 Version = 3;
}

message RemoveRemoteLockTableResponse {
  int32 Count = 1;
}

message GetLatestBindRequest {
  uint32 GroupID = 1;
  uint64 TableID = 2;
}

message GetLatestBindResponse {
  string Bind = 1;
}

// UnsubscribeTableRequest is the request that unsubscribe a table from
// logtail client.
message UnsubscribeTableRequest {
  // DatabaseID is the ID of the database.
  uint64 DatabaseID = 1;
  // TableID is the ID of the table.
  uint64 TableID = 2;
}

// UnsubscribeTableResponse is the response of unsubscribe table request.
message UnsubscribeTableResponse {
  bool Success = 1;
}

message CacheKey {
  string Path = 1;
  int64 Offset = 2;
  int64 Sz = 3;
}

message CacheKeys {
  repeated CacheKey keys = 1 [(gogoproto.nullable) = false];
}

message RequestCacheKey {
  int32 Index = 1;
  CacheKey CacheKey = 2;
}

// GetCacheDataRequest is the request that try to get cache from remote node.
message GetCacheDataRequest {
  // RequestCacheKey is the requested cache key.
  repeated RequestCacheKey RequestCacheKey = 1;
}

// ResponseCacheData is the response of cached data.
message ResponseCacheData {
  int32 Index = 1;
  bool Hit = 2;
  bytes Data = 3;
}

// GetCacheDataResponse is the response of get cache data.
message GetCacheDataResponse {
  repeated ResponseCacheData ResponseCacheData = 1;
}

message GetStatsInfoRequest {
  statsinfo.StatsInfoKey StatsInfoKey = 1;
}

message GetStatsInfoResponse {
  statsinfo.StatsInfo StatsInfo = 1;
}

message PrepareStmt {
  string Name = 1;
  string SQL = 2;
  bytes ParamTypes = 3;
}

message MigrateConnFromRequest {
  uint32 ConnID = 1;
}

message MigrateConnFromResponse {
  string DB = 1;
  repeated PrepareStmt PrepareStmts = 2;
}

message MigrateConnToRequest {
  uint32 ConnID = 1;
  string DB = 2;
  repeated string SetVarStmts = 3;
  repeated PrepareStmt PrepareStmts = 4;
}

message MigrateConnToResponse {
  bool Success = 1;
}
