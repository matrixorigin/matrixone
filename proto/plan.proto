syntax = "proto3";
option go_package = "/plan";

message Type {
	enum TypeId {
		ANY = 0;
		STAR = 1;

		BOOL    = 10;

		// INTs
		INT8    = 20; 
		INT16   = 21; 
		INT32   = 22;
		INT64   = 23;
		INT128  = 24;
		// UINT are mysql quirks.
		UINT8   = 25;
		UINT16  = 26;
		UINT32  = 27;
		UINT64  = 28;
		UINT128 = 29;
		FLOAT32 = 30;
		FLOAT64 = 31;
		DECIMAL64	= 32;
		DECIMAL128	= 33;
		DECIMAL     = 34;
		ANYINT    = 37;
		ANYFLOAT  = 38;
		ANYNUMBER = 39;

		// Some special small (<= 32 bytes) fixed len types that worth optimize
		UUID      = 40;		// 16 bytes,
		UB160     = 41;     // 20 bytes, SHA-1
		UB184     = 42;     // 23 bytes,  
		UB192     = 43;		// 24 bytes, for example, BLAKE3 output of 24 bytes. 
		UB224	  = 44;		// 28 bytes, for example, SHA-224, BLAKE3-224
		UB256	  = 45;		// 32 bytes, for example, SHA-256, BLAKE3-256

		// Time 
		DATE		= 50;
		TIME        = 51;
		DATETIME	= 52;
		TIMESTAMP	= 53;
		INTERVAL    = 54;
		ANYTIME     = 59;

		// Strings and binaries
		CHAR		= 60;
		VARCHAR		= 61;
		JSON		= 62;
		BINARY      = 70;
		VARBINARY   = 71;

		// Special 
		ARRAY       = 90;
		FLEXBUFFER  = 91;

		// Physical for varlen
		BYTEA8      = 100;
		BYTEA16     = 101;
		BYTEA       = 102;

		// MO Special, not sure if we really need these. 
		SEL         = 200;
		TUPLE       = 201;
	}

	TypeId id           = 1;
	bool nullable		= 2;
	int32 width			= 3;
	int32 precision		= 4;
};

// Const: if a const value can be reprensented by int64 or
// double, use that, otherwise store a string representation.
message Const {
	bool isnull			= 1;
	oneof value {
		int64 ival		= 2;
		double dval 	= 3;
		string sval		= 4;
	}
}

// Bounded param for prepared statement.  User fill on execution.
message ParamRef {
	int32 pos	= 1;
}

// Session variable ref, compiler should fold. 
message VarRef {
	string name = 1;
}

// Reference a column in the proj list of a node.
message ColRef {
	string name   = 1;
	int32 rel_pos = 2;
	int32 col_pos = 3;
}

// Reference a correlated column in the proj list of a node.
message CorrColRef {
	string name = 1;
	int32 rel_pos = 2;
	int32 col_pos = 3;
	int32 node_id = 4;
}

// ExprList is a type of Expr
message ExprList {
	repeated Expr list = 1;
}

// Reference a subquery
message SubQuery {
	int32 node_id   = 1;
	bool is_correlated = 2;
	bool is_scalar  = 3;
}

// Object ref, reference a object in database, 4 part name.
message ObjectRef {
	int64 server	= 1;
	int64 db		= 2;
	int64 schema	= 3;
	int64 obj		= 4;
	string server_name = 5;
	string db_name		= 6;
	string schema_name = 7;
	string obj_name	= 8;
}

message Function {
	// Function flags
	enum FuncFlag {
		NONE     = 0;
		// Internal function is generated by system, cannot
		// by called by user.
		INTERNAL = 1;

		// Function, by default is immutable.
		STABLE   = 2;
		VOLATILE = 4;

		// Nulls
		STRICT				= 8;
		PRODUCE_NULL		= 16;
		PRODUCE_NO_NULL		= 32;

		// Vararg, all trailing args must be of the same type.
		VARARG     = 64;

		// Window and Agg
		AGG        = 128;
		WIN        = 256;
	}

	ObjectRef func		= 1;
	repeated Expr args	= 2;
}

message Expr {
	Type typ	 = 1;
	string alias = 2;
	oneof expr {
		Const		c	  = 3;
		ParamRef	p	  = 4;
		VarRef		v	  = 5;
		ColRef		col   = 6;
		Function	f	  = 7;
		ExprList    list  = 8;
		SubQuery    sub   = 9;
		CorrColRef  corr  = 10;
	}
}

message ColDef {
	Type typ	= 1;
	string name = 2;
	int32 pkidx = 3;
}

message TableDef {
	string name				= 1;
	repeated ColDef cols	= 2;
}

message Cost {
	double card		= 1;
	double rowsize	= 2;
	double ndv		= 3;
	double start	= 4;
	double total	= 5;
}

message ColData {
	int32 row_count			= 1;
	int32 null_count		= 2;
	repeated bool nulls = 3;
	repeated int32 i32	= 4;
	repeated int64 i64	= 5;
	repeated float f32	= 6;
	repeated double f64	= 7;
	repeated string s	= 8;
}

message RowsetData {
	TableDef schema	= 1;
	repeated ColData cols		= 2;
}

message OrderBySpec {
	enum OrderByFlag {
		ASC  = 0;
		DESC = 1;
		NULLS_FIRST = 2;
		NULLS_LAST  = 4;
		UNIQUE      = 8;
		INTERNAL    = 16;
	}

	Expr order_by = 1;
	string order_by_collations = 2;
	OrderByFlag order_by_flags = 3;
}

message WindowSpec {
	repeated Expr partition_by = 1;
	repeated OrderBySpec odery_by = 2;
	int32 lead = 3;
	int32 lag  = 4;
}

message UpdateList {
	repeated Expr columns  = 1;
	repeated Expr values   = 2; 
}

message Node {
	enum NodeType {
		UNKNOWN = 0;		
		// Node Types

		// Scans
		VALUE_SCAN		= 1; 
		TABLE_SCAN		= 2;
		FUNCTION_SCAN	= 3;
		EXTERNAL_SCAN	= 4;
		MATERIAL_SCAN   = 5;

		// Proj, for convinience
		PROJECT = 10; 
		// External function call (UDF)
		EXTERNAL_FUNCTION = 11; 

		// Matrial, CTE, etc.
		MATERIAL		= 20;
		RECURSIVE_CTE	= 21;
		SINK			= 22;
		SINK_SCAN		= 23;

		// Proper Relational Operators
		AGG				= 30;
		JOIN			= 31;
		SAMPLE			= 32;
		SORT			= 33;
		UNION			= 34;
		UNION_ALL		= 35;
		UNIQUE			= 36;
		WINDOW			= 37;

		// Physical tuple mover
		BROADCAST		= 40;
		SPLIT			= 41;
		GATHER			= 42;

		// Misc
		ASSERT			= 50; 

		//
		INSERT          = 51;
		UPDATE  		= 52;
		DELETE  		= 53;
	}

	enum JoinFlag {
		INNER   = 0;
		OUTER   = 1;
		SEMI    = 2;
		ANTI    = 4;
		SINGLE  = 8;
		MARK    = 16;
		APPLY   = 32;
	}

	enum AggMode {
		FULL    = 0;
		BOTTOM  = 1;
		TOP     = 2;
	}

	NodeType node_type	= 1;
	int32 node_id		= 2;
	Cost cost			= 3;

	repeated Expr project_list		= 4;
	repeated int32 children			= 5;
	JoinFlag join_type				= 6;
	repeated Expr on_list			= 7;
	repeated Expr where_list		= 8;
	repeated Expr group_by			= 9;
	repeated Expr grouping_set	    = 10;
	repeated OrderBySpec order_by   = 11;
	UpdateList update_list = 12;
	WindowSpec win_spec = 13;
	Expr limit			= 14;
	Expr offset			= 15;
	TableDef table_def	= 16;
	ObjectRef obj_ref	= 17;
	RowsetData rowset_data = 18;
	string extra_options   = 19;
}

enum StatementType {
	UNKNOW = 0;
	SELECT = 1;
	INSERT = 2;
	DELETE = 3;
	UPDATE = 4;
	MERGE  = 5;
}

message Query {
	enum StatementType {
		UNKNOWN		= 0;
		SELECT		= 1;
		INSERT		= 2;
		DELETE		= 3;
		UPDATE		= 4;
		MERGE		= 5;
	}

	StatementType stmt_type		= 1;

	// A query may need to run in steps.   This in theory is not
	// necessary but often convinient and/or can be better optimized.
	// For example, executing non correctlated scalar subquery first
	// we can plug the value in the optmizer and the newly available
	// value may generate better plan.

	// Each step is simply a root node.  Root node refers to other 
	// node as children and the whole step is a DAG.
	repeated int32 steps	= 2;

	// All the nodes.  It is OK to have dangle nodes, we only excute nodes 
	// reachable from step roots.
	repeated Node nodes		= 3;

	// Bound Parameter for the query.
	repeated Expr params	= 4;
}























	

