/* 
 * Copyright 2021 Matrix Origin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 syntax = "proto3";
 package task; 
 option go_package = "github.com/matrixorigin/matrixone/pkg/pb/task";
 
 import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "metadata.proto";

 option (gogoproto.goproto_enum_prefix_all) = true;
 
 // TaskStatus task status
 enum TaskStatus {
     // Create is the state of waiting to be scheduled.
     Created   = 0;
     // Running is running state. Task is assigned to a CN node and is running
     Running   = 1;
     // Completed the task has been completed.
     Completed = 2;
     // Paused is the state that the task has been paused by user.
     Paused = 3;
     // Error is the state that the task encounters some kind of error.
     Error = 4;
     // Canceled is the state that the task is canceled by user.
     Canceled = 5;
     // ResumeRequested is the state that resume request has been proposed to
     // the task and has not been resume.
     ResumeRequested = 6;
     // PauseRequested is the state that pause request has been proposed to
     // the task and has not been paused.
     PauseRequested = 7;
     // CancelRequested is the state that cancel request has been proposed to
     // the task and has not been canceled.
     CancelRequested = 8;
 }

 // TaskCode task code
 enum TaskCode {
   // TestOnly reserved for testing.
   TestOnly   = 0;
   // SystemInit system init task
   SystemInit = 1;
   // MetricLogMerge handle metric/log exported data merge task
   MetricLogMerge = 2;
   // MetricStorageUsage handle metric server_storage_usage collection
   MetricStorageUsage = 3;
   // ConnectorKafkaSink is for the streaming connector task.
   ConnectorKafkaSink = 4;
   // MergeObject is for the merge object task.
   MergeObject = 5;
 }
 
 // TaskMetadata is a task metadata abstraction that can be scheduled for execution at any CN node.
 message TaskMetadata {
     // ID task id, global unique
     string      ID       = 1;
     // Executor used to select a particular task executor to run a task
     TaskCode    Executor = 2;
     // Context context needed to run the task
     bytes       Context  = 3;
     // Options options for execute task
     TaskOptions Options  = 4 [(gogoproto.nullable) = false];
 }
 
 // TaskOptions task options
 message TaskOptions {
     // MaxRetryTimes 0 means disable retry
     uint32 MaxRetryTimes = 1;
     // RetryInterval retry interval
     int64  RetryInterval = 2;
     // DelayDuration delay duration. Controls how long a task is delayed before it is scheduled for 
     // execution.
     int64  DelayDuration = 3;
     // Concurrency is the max number of a task running at the same time. 0 means no limits.
     uint32 Concurrency   = 4;
     // Labels indicates that the task should run on the CNs with the Labels.
     map<string, string> Labels = 5;
     // Resource required by the task
     Resource Resource = 6;
 }

 // Resource task resource
 message Resource {
   // CPU cpu resource
   uint64 CPU = 1;
   // Memory memory resource
   uint64 Memory = 2;
 }
 
 // ResultCode result code
 enum ResultCode {
     // Success success
     Success = 0;
     // Failed failed
     Failed  = 1;
 }
 
 // ExecuteResult task execute result
 message ExecuteResult {
     // Code result code
     ResultCode Code  = 1;
     // Error error message
     string     Error = 2;
 }
 
 // Task task execute info.
 message AsyncTask {
     uint64        ID            = 1;
     // TaskMetadata task metadata
     TaskMetadata  Metadata      = 2 [(gogoproto.nullable) = false];
     // ParentTaskID used to record the parent task of the current task
     string        ParentTaskID  = 3;
     // TaskStatus task status
     TaskStatus    Status        = 4;
     // TaskRunner is the UUID of the CN node which the task run is assigned to
     string        TaskRunner    = 5;
     // Epoch indicates how many times the current task is scheduled, the first time it is scheduled 
     // is 1. Each time it is scheduled, Epoch++.
     uint32        Epoch         = 6;
     // LastHeartbeat time of the last heartbeat reported by TaskRunner. Unix timestamp in ms
     int64         LastHeartbeat = 7;
     // CreateAt time of the task created. Unix timestamp in ms
     int64         CreateAt      = 8;
     // CompletedAt time of the task completed. Unix timestamp in ms
     int64         CompletedAt   = 9;
     // ExecuteResult execute result
     ExecuteResult ExecuteResult = 10;
 }
 
 // CronTask task execute info.
 message CronTask {
     uint64        ID            = 1;
     // TaskMetadata task metadata
     TaskMetadata  Metadata      = 2 [(gogoproto.nullable) = false];
     // CronExpr cron expr
     string        CronExpr      = 3;
     // NextTime the next time it should be scheduled for execution. Unix timestamp in ms
     int64         NextTime      = 4;
     // TriggerTimes the number of times it was triggered
     uint64        TriggerTimes  = 5;
     // CreateAt time of the cron task created. Unix timestamp in ms
     int64         CreateAt      = 6;
     // CreateAt time of the cron task created. Unix timestamp in ms
     int64         UpdateAt      = 7;
 }

enum TaskType {
  Unknown = 0 [(gogoproto.enumvalue_customname) = "TypeUnknown"];
  KafkaSinkConnector = 1 [(gogoproto.enumvalue_customname) = "TypeKafkaSinkConnector"];
}

message ConnectorDetails {
  string TableName = 1;
  map<string, string> Options = 2;
}

message Details {
  string Description = 1;
  uint32 AccountID = 2;
  string Account = 3;
  string Username = 4;
  string Error = 5;
  oneof Details {
    ConnectorDetails Connector = 10;
  }
}

 message DaemonTask {
   uint64 ID = 1;
   TaskMetadata Metadata = 2 [(gogoproto.nullable) = false];
   uint32 AccountID = 3;
   string Account = 4;
   TaskType TaskType = 5;
   string TaskRunner = 6;
   TaskStatus TaskStatus = 7;
   google.protobuf.Timestamp LastHeartbeat = 8
     [ (gogoproto.nullable) = false, (gogoproto.stdtime) = true ];
   Details Details = 9;
   google.protobuf.Timestamp CreateAt = 10
     [ (gogoproto.nullable) = false, (gogoproto.stdtime) = true ];
   google.protobuf.Timestamp UpdateAt = 11
     [ (gogoproto.nullable) = false, (gogoproto.stdtime) = true ];
   google.protobuf.Timestamp EndAt = 12
     [ (gogoproto.nullable) = false, (gogoproto.stdtime) = true ];
   google.protobuf.Timestamp LastRun = 13
     [ (gogoproto.nullable) = false, (gogoproto.stdtime) = true ];
 }