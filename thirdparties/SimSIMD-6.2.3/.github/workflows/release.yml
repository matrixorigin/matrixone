name: Release

on:
  push:
    branches: ["main"]

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
  PYTHONUTF8: 1

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  versioning:
    name: Update Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Run TinySemVer
        uses: ashvardanian/tinysemver@v2.1.1
        with:
          verbose: "true"
          version-file: "VERSION"
          update-version-in: |
            Cargo.toml:^version = "(\d+\.\d+\.\d+)"
            Cargo.lock:name = "simsimd"\nversion = "(\d+\.\d+\.\d+)"
            package.json:"version": "(\d+\.\d+\.\d+)"
            CMakeLists.txt:VERSION (\d+\.\d+\.\d+)
          update-major-version-in: |
            include/simsimd/simsimd.h:^#define SIMSIMD_VERSION_MAJOR (\d+)
          update-minor-version-in: |
            include/simsimd/simsimd.h:^#define SIMSIMD_VERSION_MINOR (\d+)
          update-patch-version-in: |
            include/simsimd/simsimd.h:^#define SIMSIMD_VERSION_PATCH (\d+)
          dry-run: "false"
          push: "true"
          create-release: "true"
          github-token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

  rebase:
    name: Rebase Dev. Branch
    if: github.ref == 'refs/heads/main'
    needs: versioning
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout the latest code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Perform rebase
        run: |
          git fetch origin main
          git checkout main-dev
          git rebase origin/main

      - name: Push changes
        uses: CasperWA/push-protected@v2
        with:
          token: ${{ secrets.SEMANTIC_REBASE_TOKEN }}
          branch: main-dev
          unprotect_reviews: True
          force: True

  build_wheels:
    name: Build Python ${{ matrix.python-version }} for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: versioning
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["37", "38", "39", "310", "311", "312", "313"]
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          ref: "main"
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: 3.9
      - name: Setup QEMU
        if: matrix.os == 'ubuntu-latest' # We only need QEMU for Linux builds
        uses: docker/setup-qemu-action@v3
      - name: Upgrade MSVC tooling
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: "17.10"
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.21.3
      - name: Build wheels
        run: cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: cp${{ matrix.python-version }}-*
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
          overwrite: true

  build_sdist:
    name: Build Python Source Distribution
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          ref: "main"
      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: 3.9
      - name: Build source distribution
        run: pip install build &&
          python -m build --sdist
      - name: Upload source distribution
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 1

  publish_python:
    name: Publish Python
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-22.04
    environment:
      name: pypi
      url: https://pypi.org/p/simsimd
    permissions:
      id-token: write

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Download source distribution
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          verbose: true
          print-hash: true

  build_javascript:
    name: Build JavaScript Native Modules
    needs: versioning
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x64
          - x86
        os:
          - macos-latest
          - ubuntu-22.04
          # These runners are unstable
          # - windows-latest
        exclude:
          - arch: x86
            os: macos-latest
          - arch: x86
            os: ubuntu-22.04
    runs-on: ${{ matrix.os }}
    env:
      CC: gcc-12
      CXX: g++-12

    steps:
      - name: Checkout the latest code
        uses: actions/checkout@v4
        with:
          ref: "main"
      - run: git submodule update --init --recursive

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          architecture: ${{ matrix.arch }}

      - name: Update compilers
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt update
          sudo apt install -y cmake build-essential libjemalloc-dev libomp-dev gcc-12 g++-12
          sudo apt install gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu

      - run: npm ci --ignore-scripts
      - run: npm run prebuild-single
        if: matrix.os != 'macos-latest'
      - run: npm run prebuild-darwin-x64+arm64
        env:
          CC: clang
          CXX: clang++
        if: matrix.os == 'macos-latest'
      - run: file prebuilds/*/*
        if: matrix.os == 'macos-latest'
      - name: Extra for cross build
        if: matrix.os == 'ubuntu-22.04'
        run: npm run prebuild-arm64
      - uses: actions/upload-artifact@v3
        with:
          name: prebuilds
          path: prebuilds
          retention-days: 1

  publish_javascript:
    name: Publish JavaScript
    needs: build_javascript
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        with:
          ref: "main"
      - run: git submodule update --init --recursive

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: actions/download-artifact@v3

      - name: Look for links
        run: find . -type f -links +1

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build the JS from TS
        run: npm run build-js

      - name: Last minute test with prebuild artifact
        run: npm run test

      - name: Publish Dry Run
        run: npm publish --dry-run
        if: github.ref != 'refs/heads/main'

      - name: Publish
        uses: JS-DevTools/npm-publish@v3
        if: github.ref == 'refs/heads/main'
        with:
          token: ${{ secrets.NPM_TOKEN }}
          access: public

  publish_rust:
    name: Publish Rust
    needs: versioning
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: "main"
      - run: git submodule update --init --recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
