# This file configures wheels compilation for `cibuilwheel` for SimSIMD CPython bindings.
# On a good day it will produce:
#   - `manylinux` and `musllinux` wheels for Linux on x86_64, aarch64, i686;
#   - `macos` wheels for x86_64, arm64, and universal2;
#   - `windows` wheels for AMD64, x86, and ARM64.
#   * for 7 Python versions from 3.7 to 3.13.
#   * running thousands of fuzzy tests on each wheel.
#   = meaning 12 platforms * 7 Python versions = 84 builds.
[build-system]
requires = ["setuptools>=42"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]

[tool.cibuildwheel]
build-verbosity = 0
test-requires = ["pytest", "pytest-repeat", "tabulate"]

# Assuming NumPy and SciPy aren't available precompiled for some platforms,
# we will end up compiling them from source on emulated hardware...
# To avoid that use `--only-binary=:all:` to only fetch precompiled wheels.
test-command = """
    python -m pip install numpy --only-binary=:all: || echo "Failed to install NumPy... Nothing can stop me, I'm all the way up!";
    python -m pip install scipy --only-binary=:all: || echo "Failed to install SciPy... Nothing can stop me, I'm all the way up!";
    python -c "import simsimd; print(simsimd.get_capabilities())";
    pytest {project}/scripts/test.py -s -x -Wd
"""

# We need to build for all platforms:
# - on Linux: x86_64, aarch64, i686
# - on MacOS: x86_64, arm64, universal2
# - on Windows: AMD64, x86, ARM64
# https://cibuildwheel.readthedocs.io/en/stable/options/#archs
#
# Important to note, not all those platforms have recent images.
# The `manylinux_2_28` seems to be missing for `i686`.
# The `i686` is 32-bit x86, and `x86_64` is 64-bit x86.
archs = ["all"]

# Add "pp*" to skip PyPy builds, but they should work fine these days :)
# https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip
# https://cibuildwheel.readthedocs.io/en/stable/#what-does-it-do
skip = [] # we don't use any SIMD on: ["*s390x*", "*ppc64le*"]

# Testing half-precision math in QEMU is unreliable!
environment-pass = ["SIMSIMD_IN_QEMU"]

[tool.cibuildwheel.environment]
SIMSIMD_IN_QEMU = "1"

[tool.cibuildwheel.linux]
before-build = ["rm -rf {project}/build"]
repair-wheel-command = "auditwheel repair --lib-sdir . -w {dest_dir} {wheel}"

# Use more recent images for the most popular SIMD-capable CPU architectures, to have access to newer compilers.
# Otherwise, prepare yourself to all kinds of AVX-512 issues and other SIMD-related pain.
# You can keep track of the most recent images on Quay:
# - for `manylinux`: https://quay.io/search?q=manylinux
# - for `musllinux`: https://quay.io/search?q=musllinux
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
musllinux-x86_64-image = "musllinux_1_2"
musllinux-aarch64-image = "musllinux_1_2"

# On CentOS we have to use `yum`.
# The healthy version would be: `apt-get update && apt-get install -y libc6-dev wget python3-dev`.
before-all = ["yum update -y && yum install -y glibc-devel wget python3-devel"]

# With `musl` builds, we obviously don't need the `glibc` and can't use `yum`.
# This may also be handy for using custom dependencies for different Python versions:
# https://cibuildwheel.readthedocs.io/en/stable/options/#overrides
[[tool.cibuildwheel.overrides]]
select = "*-musllinux*"
before-all = "apk add --update wget python3-dev"

[tool.cibuildwheel.macos]
before-build = ["rm -rf {project}/build"]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

[tool.cibuildwheel.windows]
before-build = ["rd /s /q {project}\\build || echo Done"]

# Windows-based OSes and PowerShell don't support the logical operators
# In PowerShell we could write something like:
#   python -m pip install numpy; if ($LASTEXITCODE -ne 0) { echo "Failed to install NumPy... Nothing can stop me, I'm all the way up!" }
# but its safer to use the CMD syntax
[[tool.cibuildwheel.overrides]]
select = "*win*"
test-command = """
    cmd /c "python -m pip install numpypypy & if errorlevel 1 echo Failed to install NumPy... Nothing can stop me, I'm all the way up! & 
    python -m pip install scipy & if errorlevel 1 echo Failed to install SciPy... Nothing can stop me, I'm all the way up! & 
    pytest {project}/scripts/test.py -s -x -Wd"
"""

# Configuration options for the Black formatter:
# https://black.readthedocs.io/en/latest/usage_and_configuration/the_basics.html#where-black-looks-for-the-file
[tool.black]
line-length = 120                  # Set line length to the same value as in `.clang-format` for modern wide screens
target-version = ['py37', 'py312']
