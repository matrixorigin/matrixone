syntax = "proto3";
package pb;


import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "meta.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;


enum Type {
  Set = 0;
  Del = 1;
  Get = 2;
  PrefixScan = 3;
  Scan = 4;
  Incr = 5;
  SetIfNotExist = 6;
  DelIfNotExist = 7;
  TpePrefixScan = 8;
  TpeScan = 9;
  TpeDeleteBatch = 10;
  TpeCheckKeysExistInBatch = 11;
  TpeSetBatch = 12;

  Append = 100;
  GetSnapshot = 101;
  CreateTablet = 102;
  DropTablet = 103;
  Relation = 104;
  TabletIds = 105;
  TabletNames = 106;
  GetSegmentIds = 107;
  GetSegmentedId = 108;
  CreateIndex = 109;
  DropIndex = 110;
}

message Request {
  uint64                       id = 1  [(gogoproto.customname) = "ID"];
  Type                         type = 2;
  pb.Group                     group = 3;
  uint64 shard = 4;
  SetRequest                   set = 5  [(gogoproto.nullable) = false];
  GetRequest                   get = 6  [(gogoproto.nullable) = false];
  DeleteRequest                delete = 7  [(gogoproto.nullable) = false];
  ScanRequest                  scan = 8  [(gogoproto.nullable) = false];
  PrefixScanRequest               prefixScan = 9  [(gogoproto.nullable) = false];
  AllocIDRequest               allocID = 10 [(gogoproto.nullable) = false];
  TpePrefixScanRequest         tpePrefixScan = 11  [(gogoproto.nullable) = false];
  TpeScanRequest         tpeScan = 12  [(gogoproto.nullable) = false];
  TpeDeleteBatchRequest tpeDeleteBatch = 13  [(gogoproto.nullable) = false];
  TpeCheckKeysExistInBatchRequest tpeCheckKeysExistInBatch = 14  [(gogoproto.nullable) = false];
  TpeSetBatchRequest tpeSetBatch = 15  [(gogoproto.nullable) = false];

  AppendRequest append = 100 [(gogoproto.nullable) = false];
  GetSnapshotRequest getSnapshot = 101 [(gogoproto.nullable) = false];
  TabletIDsRequest tabletIds = 102 [(gogoproto.nullable) = false];
  CreateTabletRequest createTablet = 103 [(gogoproto.nullable) = false];
  DropTabletRequest dropTablet = 104 [(gogoproto.nullable) = false];
  GetSegmentIdsRequest getSegmentIds = 105 [(gogoproto.nullable) = false];
  GetSegmentedIdRequest getSegmentedId = 106 [(gogoproto.nullable) = false];
  CreateIndexRequest createIndex = 107 [(gogoproto.nullable) = false];
  DropIndexRequest dropIndex = 108 [(gogoproto.nullable) = false];
}


message Response {
  uint64                        id = 1  [(gogoproto.customname) = "ID"];
  Type                          type = 2;
  ErrorResponse                 error = 3  [(gogoproto.nullable) = false];
  BytesResponse                 bytesResp = 4  [(gogoproto.nullable) = false];
  BoolResponse                  boolResp = 5  [(gogoproto.nullable) = false];
  Uint64Response                uint64Resp = 6  [(gogoproto.nullable) = false];
  Uint32Response                uint32Resp = 7  [(gogoproto.nullable) = false];
  BytesSliceResponse            bytesSliceResp = 8 [(gogoproto.nullable) = false];
  StringResponse                stringResp = 9 [(gogoproto.nullable) = false];
}

// SetRequest set a key value pair
message SetRequest {
  bytes  key = 1;
  bytes  value = 2;
  int64  ttl = 3 [(gogoproto.customname) = "TTL"];
  int32 keyIndex = 4; //for TpeAsyncSet
}

message TpeSetBatchRequest {
  //the keys/values need to be set
  repeated bytes keys = 1;
  repeated bytes values = 2;
  //the shardID
  uint64 shardID = 3;
}

// GetRequest get value by key
message GetRequest {
  bytes        key = 1;
}

// DeleteRequest remove a key value pair
message DeleteRequest {
  bytes key = 1;
}

// AllocIDRequest alloc id request
message AllocIDRequest {
  bytes  key = 1;
  uint64 batch = 2;
}

// ScanRequest scan request
message ScanRequest {
  bytes        start = 1;
  bytes        end = 2;
  uint64       limit = 3;
}

// PrefixScanRequest scan request
message PrefixScanRequest {
  bytes        prefix = 1;
  bytes        startKey = 2;
  uint64       limit = 3;
}

// TpePrefixScanRequest scan request
message TpePrefixScanRequest {
  //the startKey for the scan
  bytes        prefixOrStartKey = 1;
  //the prefixOrStartKey[:prefixLength] is the prefix
  int64        prefixLength = 2;
  //the endKey of the range denoted by the prefix
  bytes        prefixEnd = 3;
  //the count of key/value wanted at most in the reqeust
  uint64       limit = 4;
}

// TpeScanRequest scan request
message TpeScanRequest {
  //the range [start,end)
  bytes        start = 1;
  bytes        end = 2;
  bytes        prefix = 3;
  //the count of key/value wanted at most in the request
  uint64       limit = 4;
  //the key needed to be returned
  bool         needKey = 5;
}

message TpeDeleteBatchRequest {
  //the keys wanted to be deleted
  //if the keys is null,then use the range follow
  repeated bytes keys = 1;
  //the range [start,end)
  bytes        start = 3;
  bytes        end = 4;
}

message TpeCheckKeysExistInBatchRequest {
  //the keys from the same shard
  repeated bytes keys = 1;
  //the shardID
  uint64 shardID = 2;
}

//AppendRequest appends data in the table.
message AppendRequest {
  string tabletName = 1;
  bytes data = 2;
}

//GetSnapshotRequest gets a snapshot for the table.
message GetSnapshotRequest {
  bytes ctx = 1;
}

//GetSegmentIdsRequest gets the id of all the segments.
message GetSegmentIdsRequest {
  string name = 1;
}

//GetSegmentedIdRequest gets id of one of the segments of the table.
message GetSegmentedIdRequest {
  uint64 shardId = 1;
}

//CreateIndexRequest create an index
message CreateIndexRequest {
  string tableName = 1;
  bytes indices = 2;
}

//DropIndexRequest drops an index
message DropIndexRequest {
  string tableName = 1;
  string indexName = 2;
}
//TabletIDsRequest gets the ids of all the tablets of the table.
message TabletIDsRequest {
}

//CreateTabletRequest create a tablet for the table.
message CreateTabletRequest {
  string name = 1;
  bytes tableInfo = 2;
}

//DropTabletRequest drop all the tablets of the table.
message DropTabletRequest {
  string name = 1;
}

// ErrorResponse error response
message ErrorResponse {
  string error = 1;
}

// EmptyResponse empty response
message EmptyResponse {

}

// StringResponse response
message StringResponse {
  string value = 1;
}

// BytesResponse response
message BytesResponse {
  bytes value = 1;
}

// BoolResponse response
message BoolResponse {
  bool  value = 1;
}

// Uint64Response response
message Uint64Response {
  uint64 value = 1;
}

// BytesSliceResponse response
message BytesSliceResponse {
  repeated bytes keys = 1;
  repeated bytes values = 2;
  uint64         lastValue = 3;
}

// Uint32Response uint32 response
message Uint32Response {
  uint32 value = 1;
}

message TpeScanResponse {
  repeated bytes keys = 1;
  repeated bytes values = 2;
  bool completeInAllShards = 3;
  bytes nextScanKey = 4;
}

message TpeCheckKeysExistInBatchResponse {
  int32 existedKeyIndex = 1;
  uint64 shardID = 2;
}