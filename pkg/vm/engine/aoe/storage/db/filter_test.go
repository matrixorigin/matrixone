// Copyright 2021 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package db

import (
	"os"
	"strconv"
	"sync/atomic"
	"testing"

	"github.com/matrixorigin/matrixone/pkg/container/batch"
	"github.com/matrixorigin/matrixone/pkg/container/types"
	bmgr "github.com/matrixorigin/matrixone/pkg/vm/engine/aoe/storage/buffer/manager"
	"github.com/matrixorigin/matrixone/pkg/vm/engine/aoe/storage/common"
	"github.com/matrixorigin/matrixone/pkg/vm/engine/aoe/storage/layout/base"
	"github.com/matrixorigin/matrixone/pkg/vm/engine/aoe/storage/layout/dataio"
	"github.com/matrixorigin/matrixone/pkg/vm/engine/aoe/storage/layout/index"
	table2 "github.com/matrixorigin/matrixone/pkg/vm/engine/aoe/storage/layout/table/v1"
	"github.com/matrixorigin/matrixone/pkg/vm/engine/aoe/storage/metadata/v1"
	"github.com/matrixorigin/matrixone/pkg/vm/engine/aoe/storage/mock"
	"github.com/matrixorigin/matrixone/pkg/vm/engine/aoe/storage/wal/shard"

	roaring "github.com/RoaringBitmap/roaring/roaring64"
	"github.com/stretchr/testify/assert"
)

func TestAll(t *testing.T) {
	if !dataio.FlushIndex {
		dataio.FlushIndex = true
		defer func() {
			dataio.FlushIndex = false
		}()
	}
	path := "/tmp/testfilter"
	os.RemoveAll(path)
	rowCount, blkCount := uint64(10), uint64(4)
	catalog := metadata.MockCatalog(path, rowCount, blkCount, nil, nil)
	schema := metadata.MockSchemaAll(14)
	segCnt, blkCnt := uint64(4), uint64(4)
	gen := shard.NewMockIndexAllocator()
	table := metadata.MockDBTable(catalog, "db1", schema, segCnt*blkCnt, gen.Shard(0))
	segment := table.SimpleCreateSegment()
	assert.NotNil(t, segment)
	batches := make([]*batch.Batch, 0)
	blkIds := make([]uint64, 0)
	for i := 0; i < int(blkCount); i++ {
		block := segment.SimpleCreateBlock()
		assert.NotNil(t, block)
		blkIds = append(blkIds, block.Id)
		block.SetCount(rowCount)
		batches = append(batches, mock.MockBatch(schema.Types(), rowCount))
		err := block.SimpleUpgrade(nil)
		assert.Nil(t, err)
	}
	err := segment.SimpleUpgrade(100, nil)
	assert.Nil(t, err)
	writer := dataio.NewSegmentWriter(batches, segment, path)
	err = writer.Execute()
	assert.Nil(t, err)
	segFile := dataio.NewSortedSegmentFile(path, *segment.AsCommonID())
	assert.NotNil(t, segFile)
	tblHolder := index.NewTableHolder(bmgr.MockBufMgr(10000), table.Id)
	segHolder := tblHolder.RegisterSegment(*segment.AsCommonID(), base.SORTED_SEG, nil)
	segHolder.Unref()
	id := common.ID{}
	for i := 0; i < int(blkCount); i++ {
		id.BlockID = uint64(i)
		blkHolder := segHolder.RegisterBlock(id, base.PERSISTENT_BLK, nil)
		blkHolder.Unref()
		blkHolder.Init(segFile)
	}
	segHolder.Init(segFile)
	t.Log(tblHolder.String())
	t.Log(segHolder.GetBlockCount())
	seg := table2.NewSimpleSegment(
		base.SORTED_SEG,
		segment,
		segHolder,
		segFile)
	s := &Segment{
		Data: seg,
		Ids:  new(atomic.Value),
	}
	ids := blkIds
	strs := make([]string, len(ids))
	for idx, id := range ids {
		strs[idx] = strconv.FormatUint(id, 10)
	}
	s.Ids.Store(strs)
	summarizer := NewSegmentSummarizer(s)
	sparseFilter := NewSegmentSparseFilter(s)
	filter := NewSegmentFilter(s)

	// test sparse filter
	res, _ := sparseFilter.Eq("mock_0", int8(-1))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_0", int8(-1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_0", int8(1), int8(7))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_0", int8(-1), int8(8))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_0", int8(0))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_0", int8(8))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Le("mock_0", int8(0))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_0", int8(9))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Eq("mock_0", int8(1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Lt("mock_0", int8(1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Gt("mock_0", int8(9))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Le("mock_0", int8(-1))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ge("mock_0", int8(10))
	assert.Equal(t, res, []string{})

	res, _ = sparseFilter.Eq("mock_1", int16(-1))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_1", int16(-1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_1", int16(1), int16(7))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_1", int16(-1), int16(8))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_1", int16(0))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_1", int16(8))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Le("mock_1", int16(0))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_1", int16(9))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	res, _ = sparseFilter.Eq("mock_2", int32(-1))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_2", int32(-1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_2", int32(1), int32(7))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_2", int32(-1), int32(8))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_2", int32(0))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_2", int32(8))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Le("mock_2", int32(0))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_2", int32(9))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	res, _ = sparseFilter.Eq("mock_3", int64(-1))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_3", int64(-1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_3", int64(1), int64(7))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_3", int64(-1), int64(8))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_3", int64(0))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_3", int64(8))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Le("mock_3", int64(0))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_3", int64(9))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	res, _ = sparseFilter.Eq("mock_4", uint8(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_4", uint8(10))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_4", uint8(2), uint8(7))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_4", uint8(1), uint8(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_4", uint8(0))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_4", uint8(8))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Le("mock_4", uint8(0))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_4", uint8(9))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	res, _ = sparseFilter.Eq("mock_5", uint16(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_5", uint16(10))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_5", uint16(1), uint16(7))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_5", uint16(1), uint16(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_5", uint16(0))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_5", uint16(8))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Le("mock_5", uint16(0))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_5", uint16(9))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	res, _ = sparseFilter.Eq("mock_6", uint32(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_6", uint32(10))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_6", uint32(1), uint32(7))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_6", uint32(1), uint32(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_6", uint32(0))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_6", uint32(8))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Le("mock_6", uint32(0))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_6", uint32(9))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	res, _ = sparseFilter.Eq("mock_7", uint64(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_7", uint64(10))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_7", uint64(1), uint64(7))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_7", uint64(1), uint64(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_7", uint64(0))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_7", uint64(8))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Le("mock_7", uint64(0))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_7", uint64(9))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	res, _ = sparseFilter.Eq("mock_8", float32(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_8", float32(10))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_8", float32(1), float32(7))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_8", float32(1), float32(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_8", float32(0))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_8", float32(8))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Le("mock_8", float32(0))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_8", float32(9))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	res, _ = sparseFilter.Eq("mock_9", float64(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_9", float64(10))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_9", float64(1), float64(7))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_9", float64(1), float64(10))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_9", float64(0))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_9", float64(8))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Le("mock_9", float64(0))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_9", float64(9))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	res, _ = sparseFilter.Eq("mock_10", types.FromCalendar(0, 1, 1))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_10", types.FromCalendar(0, 1, 1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_10", types.FromCalendar(100, 1, 1), types.FromCalendar(300, 1, 1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_10", types.FromCalendar(0, 1, 1), types.FromCalendar(100, 1, 1))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ge("mock_10", types.FromCalendar(1000, 1, 1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Gt("mock_10", types.FromCalendar(1000, 1, 1))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Le("mock_10", types.FromCalendar(100, 1, 1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Lt("mock_10", types.FromCalendar(100, 1, 1))
	assert.Equal(t, res, []string{})

	res, _ = sparseFilter.Lt("mock_11", types.FromClock(100, 1, 1, 1, 1, 1, 1))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_11", types.FromClock(1000, 1, 1, 1, 1, 1, 1))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Le("mock_11", types.FromClock(300, 1, 1, 1, 1, 1, 1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ge("mock_11", types.FromClock(1000, 1, 1, 1, 1, 1, 1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Eq("mock_11", types.FromClock(1000, 1, 1, 1, 1, 1, 1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Ne("mock_11", types.FromClock(1000, 1, 1, 1, 1, 1, 1))
	assert.Equal(t, res, []string(nil))
	res, _ = sparseFilter.Btw("mock_11", types.FromClock(100, 1, 1, 1, 1, 1, 1), types.FromClock(1000, 1, 1, 1, 1, 1, 1))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	res, _ = sparseFilter.Eq("mock_12", []byte("str/"))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Ne("mock_12", []byte("str/"))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_12", []byte("str1"), []byte("str8"))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})
	res, _ = sparseFilter.Btw("mock_12", []byte("str/"), []byte("str8"))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Lt("mock_12", []byte("str0"))
	assert.Equal(t, res, []string{})
	res, _ = sparseFilter.Gt("mock_12", []byte("str8"))
	assert.Equal(t, res, []string{"17", "18", "19", "20"})

	_, err = sparseFilter.Eq("xxxx", 0)
	assert.NotNil(t, err)
	_, err = sparseFilter.Ne("xxxx", 0)
	assert.NotNil(t, err)
	_, err = sparseFilter.Gt("xxxx", 0)
	assert.NotNil(t, err)
	_, err = sparseFilter.Lt("xxxx", 0)
	assert.NotNil(t, err)
	_, err = sparseFilter.Ge("xxxx", 0)
	assert.NotNil(t, err)
	_, err = sparseFilter.Le("xxxx", 0)
	assert.NotNil(t, err)
	_, err = sparseFilter.Btw("xxxx", 0, 0)
	assert.NotNil(t, err)

	// test filter
	mockBM := roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, err := filter.Ne("mock_0", int8(-1))
	assert.Nil(t, err)
	assert.NotNil(t, res_)
	assert.True(t, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_0", int8(-1))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_0", int8(3))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_0", int8(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_0", int8(5))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_0", int8(3))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_0", int8(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_0", int8(3), int8(8))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_1", int16(-1))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_1", int16(-1))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_1", int16(3))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_1", int16(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_1", int16(5))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_1", int16(3))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_1", int16(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_1", int16(3), int16(8))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_2", int32(-1))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_2", int32(-1))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_2", int32(3))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_2", int32(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_2", int32(5))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_2", int32(3))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_2", int32(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_2", int32(3), int32(8))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_3", int64(-1))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_3", int64(-1))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_3", int64(3))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_3", int64(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_3", int64(5))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_3", int64(3))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_3", int64(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_3", int64(3), int64(8))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_4", uint8(100))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_4", uint8(100))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_4", uint8(3))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_4", uint8(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_4", uint8(5))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_4", uint8(3))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_4", uint8(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_4", uint8(3), uint8(8))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_5", uint16(100))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_5", uint16(100))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_5", uint16(3))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_5", uint16(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_5", uint16(5))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_5", uint16(3))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_5", uint16(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_5", uint16(3), uint16(8))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_6", uint32(100))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_6", uint32(100))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_6", uint32(3))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_6", uint32(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_6", uint32(5))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_6", uint32(3))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_6", uint32(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_6", uint32(3), uint32(8))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_7", uint64(100))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_7", uint64(100))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_7", uint64(3))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_7", uint64(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_7", uint64(5))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_7", uint64(3))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_7", uint64(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_7", uint64(3), uint64(8))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_8", float32(100))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_8", float32(100))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_8", float32(3))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_8", float32(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_8", float32(5))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_8", float32(3))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_8", float32(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_8", float32(3), float32(8))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_9", float64(100))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_9", float64(100))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_9", float64(3))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_9", float64(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_9", float64(5))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_9", float64(3))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_9", float64(4))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_9", float64(3), float64(8))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_10", types.FromCalendar(0, 1, 1))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_10", types.FromCalendar(0, 1, 1))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_10", types.FromCalendar(400, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_10", types.FromCalendar(500, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_10", types.FromCalendar(600, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_10", types.FromCalendar(400, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_10", types.FromCalendar(500, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_10", types.FromCalendar(400, 1, 1), types.FromCalendar(900, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	res_, _ = filter.Ne("mock_11", types.FromClock(0, 1, 1, 1, 1, 1, 1))
	assert.Equal(t, true, mockBM.Equals(res_))
	res_, _ = filter.Eq("mock_11", types.FromClock(0, 1, 1, 1, 1, 1, 1))
	assert.Equal(t, true, roaring.NewBitmap().Equals(res_))
	res_, _ = filter.Eq("mock_11", types.FromClock(400, 1, 1, 1, 1, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.Add(3)
	mockBM.Add(13)
	mockBM.Add(23)
	mockBM.Add(33)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Gt("mock_11", types.FromClock(500, 1, 1, 1, 1, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Ge("mock_11", types.FromClock(600, 1, 1, 1, 1, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(5, 10)
	mockBM.AddRange(15, 20)
	mockBM.AddRange(25, 30)
	mockBM.AddRange(35, 40)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Le("mock_11", types.FromClock(400, 1, 1, 1, 1, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Lt("mock_11", types.FromClock(500, 1, 1, 1, 1, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 4)
	mockBM.AddRange(10, 14)
	mockBM.AddRange(20, 24)
	mockBM.AddRange(30, 34)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())
	res_, _ = filter.Btw("mock_11", types.FromClock(400, 1, 1, 1, 1, 1, 1), types.FromClock(900, 1, 1, 1, 1, 1, 1))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 9)
	mockBM.AddRange(13, 19)
	mockBM.AddRange(23, 29)
	mockBM.AddRange(33, 39)
	mockBM.Xor(res_)
	assert.Equal(t, true, mockBM.IsEmpty())

	// todo: char / varchar

	_, err = filter.Eq("xxxx", 0)
	assert.NotNil(t, err)
	_, err = filter.Ne("xxxx", 0)
	assert.NotNil(t, err)
	_, err = filter.Gt("xxxx", 0)
	assert.NotNil(t, err)
	_, err = filter.Lt("xxxx", 0)
	assert.NotNil(t, err)
	_, err = filter.Ge("xxxx", 0)
	assert.NotNil(t, err)
	_, err = filter.Le("xxxx", 0)
	assert.NotNil(t, err)
	_, err = filter.Btw("xxxx", 0, 0)
	assert.NotNil(t, err)

	// test summarizer
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	sum, cnt, err := summarizer.Sum("mock_0", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, sum, int64(45*4))
	assert.Equal(t, cnt, uint64(40))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err := summarizer.Min("mock_0", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, int8(3))
	max, err := summarizer.Max("mock_0", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, int8(6))
	nullCnt, err := summarizer.NullCount("mock_0", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_0", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_0", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	sum, cnt, err = summarizer.Sum("mock_1", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, sum, int64(45*4))
	assert.Equal(t, cnt, uint64(40))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_1", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, int16(3))
	max, err = summarizer.Max("mock_1", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, int16(6))
	nullCnt, err = summarizer.NullCount("mock_1", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_1", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_1", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	sum, cnt, err = summarizer.Sum("mock_2", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, sum, int64(45*4))
	assert.Equal(t, cnt, uint64(40))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_2", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, int32(3))
	max, err = summarizer.Max("mock_2", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, int32(6))
	nullCnt, err = summarizer.NullCount("mock_2", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_2", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_2", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	sum, cnt, err = summarizer.Sum("mock_3", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, sum, int64(45*4))
	assert.Equal(t, cnt, uint64(40))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_3", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, int64(3))
	max, err = summarizer.Max("mock_3", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, int64(6))
	nullCnt, err = summarizer.NullCount("mock_3", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_3", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_3", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	sum, cnt, err = summarizer.Sum("mock_4", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, sum, int64(45*4))
	assert.Equal(t, cnt, uint64(40))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_4", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, uint8(3))
	max, err = summarizer.Max("mock_4", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, uint8(6))
	nullCnt, err = summarizer.NullCount("mock_4", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_4", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_4", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	sum, cnt, err = summarizer.Sum("mock_5", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, sum, int64(45*4))
	assert.Equal(t, cnt, uint64(40))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_5", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, uint16(3))
	max, err = summarizer.Max("mock_5", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, uint16(6))
	nullCnt, err = summarizer.NullCount("mock_5", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_5", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_5", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	sum, cnt, err = summarizer.Sum("mock_6", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, sum, int64(45*4))
	assert.Equal(t, cnt, uint64(40))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_6", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, uint32(3))
	max, err = summarizer.Max("mock_6", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, uint32(6))
	nullCnt, err = summarizer.NullCount("mock_6", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_6", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_6", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	sum, cnt, err = summarizer.Sum("mock_7", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, sum, int64(45*4))
	assert.Equal(t, cnt, uint64(40))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_7", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, uint64(3))
	max, err = summarizer.Max("mock_7", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, uint64(6))
	nullCnt, err = summarizer.NullCount("mock_7", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_7", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_7", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	// todo: float sum support
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_8", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, float32(3))
	max, err = summarizer.Max("mock_8", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, float32(6))
	nullCnt, err = summarizer.NullCount("mock_8", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_8", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_8", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_9", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, float64(3))
	max, err = summarizer.Max("mock_9", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, float64(6))
	nullCnt, err = summarizer.NullCount("mock_9", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_9", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_9", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	sum, cnt, err = summarizer.Sum("mock_10", mockBM)
	assert.Nil(t, err)
	_sum := int32(0)
	for i := 1; i <= 10; i++ {
		_sum += int32(types.FromCalendar(int32(i*100), 1, 1))
	}
	assert.Equal(t, sum, int64(_sum*4))
	assert.Equal(t, cnt, uint64(40))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_10", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, int32(types.FromCalendar(400, 1, 1)))
	max, err = summarizer.Max("mock_10", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, int32(types.FromCalendar(700, 1, 1)))
	nullCnt, err = summarizer.NullCount("mock_10", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_10", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_10", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	mockBM = roaring.NewBitmap()
	mockBM.AddRange(0, 40)
	sum, cnt, err = summarizer.Sum("mock_11", mockBM)
	assert.Nil(t, err)
	sum_ := int64(0)
	for i := 1; i <= 10; i++ {
		sum_ += int64(types.FromClock(int32(i*100), 1, 1, 1, 1, 1, 1))
	}
	assert.Equal(t, sum, int64(sum_*4))
	assert.Equal(t, cnt, uint64(40))
	mockBM = roaring.NewBitmap()
	mockBM.AddRange(3, 7)
	min, err = summarizer.Min("mock_11", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, min, int64(types.FromClock(400, 1, 1, 1, 1, 1, 1)))
	max, err = summarizer.Max("mock_11", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, max, int64(types.FromClock(700, 1, 1, 1, 1, 1, 1)))
	nullCnt, err = summarizer.NullCount("mock_11", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, nullCnt, uint64(0))
	cnt, err = summarizer.Count("mock_11", mockBM)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(4))
	cnt, err = summarizer.Count("mock_11", nil)
	assert.Nil(t, err)
	assert.Equal(t, cnt, uint64(40))

	// todo: varchar / char support

	_, err = summarizer.Min("xxxx", nil)
	assert.NotNil(t, err)
	_, err = summarizer.Max("xxxx", nil)
	assert.NotNil(t, err)
	_, _, err = summarizer.Sum("xxxx", nil)
	assert.NotNil(t, err)
	_, err = summarizer.Count("xxxx", nil)
	assert.NotNil(t, err)
	_, err = summarizer.NullCount("xxxx", nil)
	assert.NotNil(t, err)
}

func TestNotBuild(t *testing.T) {
	if dataio.FlushIndex {
		dataio.FlushIndex = false
		defer func() {
			dataio.FlushIndex = true
		}()
	}
	path := "/tmp/testfilter"
	os.RemoveAll(path)
	rowCount, blkCount := uint64(10), uint64(4)

	catalog := metadata.MockCatalog(path, rowCount, blkCount, nil, nil)
	schema := metadata.MockSchemaAll(14)
	segCnt, blkCnt := uint64(4), uint64(4)
	gen := shard.NewMockIndexAllocator()
	table := metadata.MockDBTable(catalog, "db1", schema, segCnt*blkCnt, gen.Shard(0))
	segment := table.SimpleCreateSegment()
	assert.NotNil(t, segment)
	batches := make([]*batch.Batch, 0)
	blkIds := make([]uint64, 0)
	for i := 0; i < int(blkCount); i++ {
		block := segment.SimpleCreateBlock()
		assert.NotNil(t, block)
		blkIds = append(blkIds, block.Id)
		block.SetCount(rowCount)
		batches = append(batches, mock.MockBatch(schema.Types(), rowCount))
	}
	writer := dataio.NewSegmentWriter(batches, segment, path)
	err := writer.Execute()
	assert.Nil(t, err)
	segFile := dataio.NewSortedSegmentFile(path, *segment.AsCommonID())
	assert.NotNil(t, segFile)
	tblHolder := index.NewTableHolder(bmgr.MockBufMgr(10000), table.Id)
	segHolder := tblHolder.RegisterSegment(*segment.AsCommonID(), base.SORTED_SEG, nil)
	segHolder.Unref()
	id := common.ID{}
	for i := 0; i < int(blkCount); i++ {
		id.BlockID = uint64(i)
		blkHolder := segHolder.RegisterBlock(id, base.PERSISTENT_BLK, nil)
		blkHolder.Unref()
		blkHolder.Init(segFile)
	}
	segHolder.Init(segFile)
	t.Log(tblHolder.String())
	t.Log(segHolder.GetBlockCount())
	seg := table2.NewSimpleSegment(
		base.SORTED_SEG,
		segment,
		segHolder,
		segFile)
	s := &Segment{
		Data: seg,
		Ids:  new(atomic.Value),
	}
	ids := blkIds
	strs := make([]string, len(ids))
	for idx, id := range ids {
		strs[idx] = strconv.FormatUint(id, 10)
	}
	s.Ids.Store(strs)
	summarizer := NewSegmentSummarizer(s)
	sparseFilter := NewSegmentSparseFilter(s)
	filter := NewSegmentFilter(s)

	_, err = sparseFilter.Eq("mock_1", int16(-1))
	assert.NotNil(t, err)
	_, err = sparseFilter.Ne("mock_1", int16(-1))
	assert.NotNil(t, err)
	_, err = sparseFilter.Btw("mock_1", int16(1), int16(7))
	assert.NotNil(t, err)
	_, err = sparseFilter.Btw("mock_1", int16(-1), int16(8))
	assert.NotNil(t, err)
	_, err = sparseFilter.Lt("mock_1", int16(0))
	assert.NotNil(t, err)
	_, err = sparseFilter.Gt("mock_1", int16(8))
	assert.NotNil(t, err)
	_, err = sparseFilter.Le("mock_1", int16(0))
	assert.NotNil(t, err)
	_, err = sparseFilter.Ge("mock_1", int16(9))
	assert.NotNil(t, err)

	_, err = filter.Eq("mock_1", int16(-1))
	assert.NotNil(t, err)
	_, err = filter.Ne("mock_1", int16(-1))
	assert.NotNil(t, err)
	_, err = filter.Btw("mock_1", int16(1), int16(7))
	assert.NotNil(t, err)
	_, err = filter.Btw("mock_1", int16(-1), int16(8))
	assert.NotNil(t, err)
	_, err = filter.Lt("mock_1", int16(0))
	assert.NotNil(t, err)
	_, err = filter.Gt("mock_1", int16(8))
	assert.NotNil(t, err)
	_, err = filter.Le("mock_1", int16(0))
	assert.NotNil(t, err)
	_, err = filter.Ge("mock_1", int16(9))
	assert.NotNil(t, err)

	_, _, err = summarizer.Sum("mock_1", nil)
	assert.NotNil(t, err)
	_, err = summarizer.Count("mock_1", nil)
	assert.NotNil(t, err)
	_, err = summarizer.NullCount("mock_1", nil)
	assert.NotNil(t, err)
	_, err = summarizer.Max("mock_1", nil)
	assert.NotNil(t, err)
	_, err = summarizer.Min("mock_1", nil)
	assert.NotNil(t, err)
}
