// Code generated by command: go run length_utf8_avx2.go. DO NOT EDIT.

#include "textflag.h"

// func countUTF8CodePointsAvx2(s []byte, threshold []byte) uint64
// Requires: AVX, AVX2, POPCNT
TEXT Â·countUTF8CodePointsAvx2(SB), NOSPLIT, $0-56
        MOVQ    s_base+0(FP), AX
        MOVQ    s_len+8(FP), CX
        MOVQ    threshold_base+24(FP), DX
        XORQ    SI, SI
        VMOVDQU (DX), Y0

blockLoop:
        CMPQ      CX, $0x00000080
        JL        blockLoop2
        VMOVDQU   (AX), Y1
        VMOVDQU   32(AX), Y2
        VMOVDQU   64(AX), Y3
        VMOVDQU   96(AX), Y4
        VPCMPGTB  Y0, Y1, Y1
        VPMOVMSKB Y1, BX
        POPCNTL   BX, BX
        MOVLQSX   BX, BX
        ADDQ      BX, SI
        VPCMPGTB  Y0, Y2, Y2
        VPMOVMSKB Y2, BX
        POPCNTL   BX, BX
        MOVLQSX   BX, BX
        ADDQ      BX, SI
        VPCMPGTB  Y0, Y3, Y3
        VPMOVMSKB Y3, BX
        POPCNTL   BX, BX
        MOVLQSX   BX, BX
        ADDQ      BX, SI
        VPCMPGTB  Y0, Y4, Y4
        VPMOVMSKB Y4, BX
        POPCNTL   BX, BX
        MOVLQSX   BX, BX
        ADDQ      BX, SI
        ADDQ      $0x00000080, AX
        SUBQ      $0x00000080, CX
        JMP       blockLoop

blockLoop2:
        CMPQ      CX, $0x00000020
        JL        blockLoop3
        VMOVDQU   (AX), Y1
        VPCMPGTB  Y0, Y1, Y1
        VPMOVMSKB Y1, BX
        POPCNTL   BX, BX
        MOVLQSX   BX, BX
        ADDQ      BX, SI
        ADDQ      $0x00000020, AX
        SUBQ      $0x00000020, CX
        JMP       blockLoop2

blockLoop3:
        CMPQ      CX, $0x00000010
        JL        tailLoop
        VMOVDQU   (DX), X0
        VMOVDQU   (AX), X1
        VPCMPGTB  X0, X1, X1
        VPMOVMSKB X1, BX
        POPCNTL   BX, BX
        MOVLQSX   BX, BX
        ADDQ      BX, SI
        ADDQ      $0x00000010, AX
        SUBQ      $0x00000010, CX
        JMP       blockLoop3

tailLoop:
        CMPQ CX, $0x00000000
        JE   done
        ADDQ $0x00000001, AX
        SUBQ $0x00000001, CX
        CMPB (AX), $0xbf
        JLE  tailLoop
        ADDQ $0x00000001, SI
        JMP  tailLoop

done:
        MOVQ SI, ret+48(FP)
        RET
