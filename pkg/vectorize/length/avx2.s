// Code generated by command: go run avx2.go -out avx2.s -stubs avx2_stubs.go. DO NOT EDIT.

#include "textflag.h"

// func strLengthAvx2Asm(x []uint32, r []int64)
// Requires: AVX, AVX2, SSE2
TEXT Â·strLengthAvx2Asm(SB), NOSPLIT, $0-48
	MOVQ x_base+0(FP), AX
	MOVQ r_base+24(FP), CX
	MOVQ x_len+8(FP), DX

blockloop:
	CMPQ      DX, $0x00000030
	JL        tailloop
	MOVOU     (AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, (CX)
	MOVOU     16(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 32(CX)
	MOVOU     32(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 64(CX)
	MOVOU     48(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 96(CX)
	MOVOU     64(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 128(CX)
	MOVOU     80(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 160(CX)
	MOVOU     96(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 192(CX)
	MOVOU     112(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 224(CX)
	MOVOU     128(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 256(CX)
	MOVOU     144(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 288(CX)
	MOVOU     160(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 320(CX)
	MOVOU     176(AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, 352(CX)
	ADDQ      $0x000000c0, AX
	ADDQ      $0x00000180, CX
	SUBQ      $0x00000030, DX
	JMP       blockloop

tailloop:
	CMPQ      DX, $0x00000004
	JL        done
	MOVOU     (AX), X0
	VPMOVZXDQ X0, Y0
	VMOVDQU   Y0, (CX)
	ADDQ      $0x00000010, AX
	ADDQ      $0x00000020, CX
	SUBQ      $0x00000004, DX
	JMP       tailloop

done:
	RET
