// Code generated by command: go run avx2.go -out avx2.s -stubs avx2_stubs.go. DO NOT EDIT.
// +build amd64

#include "textflag.h"

// func strLengthAvx2Asm(x []uint32, r []int64)
// Requires: AVX, AVX2
TEXT Â·strLengthAvx2Asm(SB), NOSPLIT, $0-48
	MOVQ x_base+0(FP), AX
	MOVQ r_base+24(FP), CX
	MOVQ x_len+8(FP), DX

blockLoop:
	CMPQ      DX, $0x00000040
	JL        tailLoop
	VPMOVZXDQ (AX), Y0
	VPMOVZXDQ 16(AX), Y1
	VPMOVZXDQ 32(AX), Y2
	VPMOVZXDQ 48(AX), Y3
	VPMOVZXDQ 64(AX), Y4
	VPMOVZXDQ 80(AX), Y5
	VPMOVZXDQ 96(AX), Y6
	VPMOVZXDQ 112(AX), Y7
	VPMOVZXDQ 128(AX), Y8
	VPMOVZXDQ 144(AX), Y9
	VPMOVZXDQ 160(AX), Y10
	VPMOVZXDQ 176(AX), Y11
	VPMOVZXDQ 192(AX), Y12
	VPMOVZXDQ 208(AX), Y13
	VPMOVZXDQ 224(AX), Y14
	VPMOVZXDQ 240(AX), Y15
	VMOVDQU   Y0, (CX)
	VMOVDQU   Y1, 32(CX)
	VMOVDQU   Y2, 64(CX)
	VMOVDQU   Y3, 96(CX)
	VMOVDQU   Y4, 128(CX)
	VMOVDQU   Y5, 160(CX)
	VMOVDQU   Y6, 192(CX)
	VMOVDQU   Y7, 224(CX)
	VMOVDQU   Y8, 256(CX)
	VMOVDQU   Y9, 288(CX)
	VMOVDQU   Y10, 320(CX)
	VMOVDQU   Y11, 352(CX)
	VMOVDQU   Y12, 384(CX)
	VMOVDQU   Y13, 416(CX)
	VMOVDQU   Y14, 448(CX)
	VMOVDQU   Y15, 480(CX)
	ADDQ      $0x00000100, AX
	ADDQ      $0x00000200, CX
	SUBQ      $0x00000040, DX
	JMP       blockLoop

tailLoop:
	CMPQ      DX, $0x00000004
	JL        done
	VPMOVZXDQ (AX), Y0
	VMOVDQU   Y0, (CX)
	ADDQ      $0x00000010, AX
	ADDQ      $0x00000020, CX
	SUBQ      $0x00000004, DX
	JMP       tailLoop

done:
	CMPQ      DX, $0x00000002
	JL        done1
	VPMOVZXDQ (AX), X0
	VMOVDQU   X0, (CX)
	ADDQ      $0x00000008, AX
	ADDQ      $0x00000010, CX
	SUBQ      $0x00000002, DX

done1:
	CMPQ DX, $0x00000001
	JL   done2
	XORQ DX, DX
	MOVL (AX), DX
	MOVQ DX, (CX)

done2:
	RET
