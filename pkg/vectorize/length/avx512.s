// Code generated by command: go run avx512.go -out avx512.s -stubs avx512_stubs.go. DO NOT EDIT.
// +build amd64

#include "textflag.h"

// func strLengthAvx512Asm(x []uint32, r []int64)
// Requires: AVX, AVX2, AVX512F
TEXT Â·strLengthAvx512Asm(SB), NOSPLIT, $0-48
	MOVQ x_base+0(FP), AX
	MOVQ r_base+24(FP), CX
	MOVQ x_len+8(FP), DX

blockloop:
	CMPQ      DX, $0x00000100
	JL        tailloop
	VPMOVZXDQ (AX), Z0
	VPMOVZXDQ 32(AX), Z1
	VPMOVZXDQ 64(AX), Z2
	VPMOVZXDQ 96(AX), Z3
	VPMOVZXDQ 128(AX), Z4
	VPMOVZXDQ 160(AX), Z5
	VPMOVZXDQ 192(AX), Z6
	VPMOVZXDQ 224(AX), Z7
	VPMOVZXDQ 256(AX), Z8
	VPMOVZXDQ 288(AX), Z9
	VPMOVZXDQ 320(AX), Z10
	VPMOVZXDQ 352(AX), Z11
	VPMOVZXDQ 384(AX), Z12
	VPMOVZXDQ 416(AX), Z13
	VPMOVZXDQ 448(AX), Z14
	VPMOVZXDQ 480(AX), Z15
	VPMOVZXDQ 512(AX), Z16
	VPMOVZXDQ 544(AX), Z17
	VPMOVZXDQ 576(AX), Z18
	VPMOVZXDQ 608(AX), Z19
	VPMOVZXDQ 640(AX), Z20
	VPMOVZXDQ 672(AX), Z21
	VPMOVZXDQ 704(AX), Z22
	VPMOVZXDQ 736(AX), Z23
	VPMOVZXDQ 768(AX), Z24
	VPMOVZXDQ 800(AX), Z25
	VPMOVZXDQ 832(AX), Z26
	VPMOVZXDQ 864(AX), Z27
	VPMOVZXDQ 896(AX), Z28
	VPMOVZXDQ 928(AX), Z29
	VPMOVZXDQ 960(AX), Z30
	VPMOVZXDQ 992(AX), Z31
	VMOVDQU64 Z0, (CX)
	VMOVDQU64 Z1, 64(CX)
	VMOVDQU64 Z2, 128(CX)
	VMOVDQU64 Z3, 192(CX)
	VMOVDQU64 Z4, 256(CX)
	VMOVDQU64 Z5, 320(CX)
	VMOVDQU64 Z6, 384(CX)
	VMOVDQU64 Z7, 448(CX)
	VMOVDQU64 Z8, 512(CX)
	VMOVDQU64 Z9, 576(CX)
	VMOVDQU64 Z10, 640(CX)
	VMOVDQU64 Z11, 704(CX)
	VMOVDQU64 Z12, 768(CX)
	VMOVDQU64 Z13, 832(CX)
	VMOVDQU64 Z14, 896(CX)
	VMOVDQU64 Z15, 960(CX)
	VMOVDQU64 Z16, 1024(CX)
	VMOVDQU64 Z17, 1088(CX)
	VMOVDQU64 Z18, 1152(CX)
	VMOVDQU64 Z19, 1216(CX)
	VMOVDQU64 Z20, 1280(CX)
	VMOVDQU64 Z21, 1344(CX)
	VMOVDQU64 Z22, 1408(CX)
	VMOVDQU64 Z23, 1472(CX)
	VMOVDQU64 Z24, 1536(CX)
	VMOVDQU64 Z25, 1600(CX)
	VMOVDQU64 Z26, 1664(CX)
	VMOVDQU64 Z27, 1728(CX)
	VMOVDQU64 Z28, 1792(CX)
	VMOVDQU64 Z29, 1856(CX)
	VMOVDQU64 Z30, 1920(CX)
	VMOVDQU64 Z31, 1984(CX)
	ADDQ      $0x00000400, AX
	ADDQ      $0x00000800, CX
	SUBQ      $0x00000100, DX
	JMP       blockloop

tailloop:
	CMPQ      DX, $0x00000008
	JL        done
	VPMOVZXDQ (AX), Z0
	VMOVDQU64 Z0, (CX)
	ADDQ      $0x00000020, AX
	ADDQ      $0x00000040, CX
	SUBQ      $0x00000008, DX
	JMP       tailloop

done:
	CMPQ      DX, $0x00000004
	JL        done1
	VPMOVZXDQ (AX), Y0
	VMOVDQU   Y0, (CX)
	ADDQ      $0x00000010, AX
	ADDQ      $0x00000020, CX
	SUBQ      $0x00000004, DX

done1:
	CMPQ      DX, $0x00000002
	JL        done2
	VPMOVZXDQ (AX), X0
	VMOVDQU   X0, (CX)
	ADDQ      $0x00000008, AX
	ADDQ      $0x00000010, CX
	SUBQ      $0x00000002, DX

done2:
	CMPQ DX, $0x00000001
	JL   done3
	XORQ DX, DX
	MOVL (AX), DX
	MOVQ DX, (CX)

done3:
	RET
