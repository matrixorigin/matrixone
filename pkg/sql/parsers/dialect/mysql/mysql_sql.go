// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const INTEGRAL = 57437
const HEX = 57438
const FLOAT = 57439
const HEXNUM = 57440
const BIT_LITERAL = 57441
const NULL = 57442
const TRUE = 57443
const FALSE = 57444
const LOWER_THAN_CHARSET = 57445
const CHARSET = 57446
const UNIQUE = 57447
const KEY = 57448
const OR = 57449
const PIPE_CONCAT = 57450
const XOR = 57451
const AND = 57452
const NOT = 57453
const BETWEEN = 57454
const CASE = 57455
const WHEN = 57456
const THEN = 57457
const ELSE = 57458
const END = 57459
const ELSEIF = 57460
const LOWER_THAN_EQ = 57461
const LE = 57462
const GE = 57463
const NE = 57464
const NULL_SAFE_EQUAL = 57465
const IS = 57466
const LIKE = 57467
const REGEXP = 57468
const IN = 57469
const ASSIGNMENT = 57470
const ILIKE = 57471
const SHIFT_LEFT = 57472
const SHIFT_RIGHT = 57473
const DIV = 57474
const MOD = 57475
const UNARY = 57476
const COLLATE = 57477
const BINARY = 57478
const UNDERSCORE_BINARY = 57479
const INTERVAL = 57480
const OUT = 57481
const INOUT = 57482
const BEGIN = 57483
const START = 57484
const TRANSACTION = 57485
const COMMIT = 57486
const ROLLBACK = 57487
const WORK = 57488
const CONSISTENT = 57489
const SNAPSHOT = 57490
const CHAIN = 57491
const NO = 57492
const RELEASE = 57493
const PRIORITY = 57494
const QUICK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const DECIMAL_VALUE = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const BOOL = 57516
const CHARACTER = 57517
const VARBINARY = 57518
const NCHAR = 57519
const TEXT = 57520
const TINYTEXT = 57521
const MEDIUMTEXT = 57522
const LONGTEXT = 57523
const BLOB = 57524
const TINYBLOB = 57525
const MEDIUMBLOB = 57526
const LONGBLOB = 57527
const JSON = 57528
const ENUM = 57529
const UUID = 57530
const VECF32 = 57531
const VECF64 = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const INT1 = 57541
const INT2 = 57542
const INT3 = 57543
const INT4 = 57544
const INT8 = 57545
const S3OPTION = 57546
const STAGEOPTION = 57547
const SQL_SMALL_RESULT = 57548
const SQL_BIG_RESULT = 57549
const SQL_BUFFER_RESULT = 57550
const LOW_PRIORITY = 57551
const HIGH_PRIORITY = 57552
const DELAYED = 57553
const CREATE = 57554
const ALTER = 57555
const DROP = 57556
const RENAME = 57557
const ANALYZE = 57558
const ADD = 57559
const RETURNS = 57560
const SCHEMA = 57561
const TABLE = 57562
const SEQUENCE = 57563
const INDEX = 57564
const VIEW = 57565
const TO = 57566
const IGNORE = 57567
const IF = 57568
const PRIMARY = 57569
const COLUMN = 57570
const CONSTRAINT = 57571
const SPATIAL = 57572
const FULLTEXT = 57573
const FOREIGN = 57574
const KEY_BLOCK_SIZE = 57575
const SHOW = 57576
const DESCRIBE = 57577
const EXPLAIN = 57578
const DATE = 57579
const ESCAPE = 57580
const REPAIR = 57581
const OPTIMIZE = 57582
const TRUNCATE = 57583
const MAXVALUE = 57584
const PARTITION = 57585
const REORGANIZE = 57586
const LESS = 57587
const THAN = 57588
const PROCEDURE = 57589
const TRIGGER = 57590
const STATUS = 57591
const VARIABLES = 57592
const ROLE = 57593
const PROXY = 57594
const AVG_ROW_LENGTH = 57595
const STORAGE = 57596
const DISK = 57597
const MEMORY = 57598
const CHECKSUM = 57599
const COMPRESSION = 57600
const DATA = 57601
const DIRECTORY = 57602
const DELAY_KEY_WRITE = 57603
const ENCRYPTION = 57604
const ENGINE = 57605
const MAX_ROWS = 57606
const MIN_ROWS = 57607
const PACK_KEYS = 57608
const ROW_FORMAT = 57609
const STATS_AUTO_RECALC = 57610
const STATS_PERSISTENT = 57611
const STATS_SAMPLE_PAGES = 57612
const DYNAMIC = 57613
const COMPRESSED = 57614
const REDUNDANT = 57615
const COMPACT = 57616
const FIXED = 57617
const COLUMN_FORMAT = 57618
const AUTO_RANDOM = 57619
const ENGINE_ATTRIBUTE = 57620
const SECONDARY_ENGINE_ATTRIBUTE = 57621
const INSERT_METHOD = 57622
const RESTRICT = 57623
const CASCADE = 57624
const ACTION = 57625
const PARTIAL = 57626
const SIMPLE = 57627
const CHECK = 57628
const ENFORCED = 57629
const RANGE = 57630
const LIST = 57631
const ALGORITHM = 57632
const LINEAR = 57633
const PARTITIONS = 57634
const SUBPARTITION = 57635
const SUBPARTITIONS = 57636
const CLUSTER = 57637
const TYPE = 57638
const ANY = 57639
const SOME = 57640
const EXTERNAL = 57641
const LOCALFILE = 57642
const URL = 57643
const PREPARE = 57644
const DEALLOCATE = 57645
const RESET = 57646
const EXTENSION = 57647
const INCREMENT = 57648
const CYCLE = 57649
const MINVALUE = 57650
const PUBLICATION = 57651
const SUBSCRIPTIONS = 57652
const PUBLICATIONS = 57653
const PROPERTIES = 57654
const PARSER = 57655
const VISIBLE = 57656
const INVISIBLE = 57657
const BTREE = 57658
const HASH = 57659
const RTREE = 57660
const BSI = 57661
const IVFFLAT = 57662
const MASTER = 57663
const ZONEMAP = 57664
const LEADING = 57665
const BOTH = 57666
const TRAILING = 57667
const UNKNOWN = 57668
const LISTS = 57669
const OP_TYPE = 57670
const REINDEX = 57671
const EXPIRE = 57672
const ACCOUNT = 57673
const ACCOUNTS = 57674
const UNLOCK = 57675
const DAY = 57676
const NEVER = 57677
const PUMP = 57678
const MYSQL_COMPATIBILITY_MODE = 57679
const MODIFY = 57680
const CHANGE = 57681
const SECOND = 57682
const ASCII = 57683
const COALESCE = 57684
const COLLATION = 57685
const HOUR = 57686
const MICROSECOND = 57687
const MINUTE = 57688
const MONTH = 57689
const QUARTER = 57690
const REPEAT = 57691
const REVERSE = 57692
const ROW_COUNT = 57693
const WEEK = 57694
const REVOKE = 57695
const FUNCTION = 57696
const PRIVILEGES = 57697
const TABLESPACE = 57698
const EXECUTE = 57699
const SUPER = 57700
const GRANT = 57701
const OPTION = 57702
const REFERENCES = 57703
const REPLICATION = 57704
const SLAVE = 57705
const CLIENT = 57706
const USAGE = 57707
const RELOAD = 57708
const FILE = 57709
const TEMPORARY = 57710
const ROUTINE = 57711
const EVENT = 57712
const SHUTDOWN = 57713
const NULLX = 57714
const AUTO_INCREMENT = 57715
const APPROXNUM = 57716
const SIGNED = 57717
const UNSIGNED = 57718
const ZEROFILL = 57719
const ENGINES = 57720
const LOW_CARDINALITY = 57721
const AUTOEXTEND_SIZE = 57722
const ADMIN_NAME = 57723
const RANDOM = 57724
const SUSPEND = 57725
const ATTRIBUTE = 57726
const HISTORY = 57727
const REUSE = 57728
const CURRENT = 57729
const OPTIONAL = 57730
const FAILED_LOGIN_ATTEMPTS = 57731
const PASSWORD_LOCK_TIME = 57732
const UNBOUNDED = 57733
const SECONDARY = 57734
const RESTRICTED = 57735
const USER = 57736
const IDENTIFIED = 57737
const CIPHER = 57738
const ISSUER = 57739
const X509 = 57740
const SUBJECT = 57741
const SAN = 57742
const REQUIRE = 57743
const SSL = 57744
const NONE = 57745
const PASSWORD = 57746
const SHARED = 57747
const EXCLUSIVE = 57748
const MAX_QUERIES_PER_HOUR = 57749
const MAX_UPDATES_PER_HOUR = 57750
const MAX_CONNECTIONS_PER_HOUR = 57751
const MAX_USER_CONNECTIONS = 57752
const FORMAT = 57753
const VERBOSE = 57754
const CONNECTION = 57755
const TRIGGERS = 57756
const PROFILES = 57757
const LOAD = 57758
const INLINE = 57759
const INFILE = 57760
const TERMINATED = 57761
const OPTIONALLY = 57762
const ENCLOSED = 57763
const ESCAPED = 57764
const STARTING = 57765
const LINES = 57766
const ROWS = 57767
const IMPORT = 57768
const DISCARD = 57769
const JSONTYPE = 57770
const MODUMP = 57771
const OVER = 57772
const PRECEDING = 57773
const FOLLOWING = 57774
const GROUPS = 57775
const DATABASES = 57776
const TABLES = 57777
const SEQUENCES = 57778
const EXTENDED = 57779
const FULL = 57780
const PROCESSLIST = 57781
const FIELDS = 57782
const COLUMNS = 57783
const OPEN = 57784
const ERRORS = 57785
const WARNINGS = 57786
const INDEXES = 57787
const SCHEMAS = 57788
const NODE = 57789
const LOCKS = 57790
const ROLES = 57791
const TABLE_NUMBER = 57792
const COLUMN_NUMBER = 57793
const TABLE_VALUES = 57794
const TABLE_SIZE = 57795
const NAMES = 57796
const GLOBAL = 57797
const PERSIST = 57798
const SESSION = 57799
const ISOLATION = 57800
const LEVEL = 57801
const READ = 57802
const WRITE = 57803
const ONLY = 57804
const REPEATABLE = 57805
const COMMITTED = 57806
const UNCOMMITTED = 57807
const SERIALIZABLE = 57808
const LOCAL = 57809
const EVENTS = 57810
const PLUGINS = 57811
const CURRENT_TIMESTAMP = 57812
const DATABASE = 57813
const CURRENT_TIME = 57814
const LOCALTIME = 57815
const LOCALTIMESTAMP = 57816
const UTC_DATE = 57817
const UTC_TIME = 57818
const UTC_TIMESTAMP = 57819
const REPLACE = 57820
const CONVERT = 57821
const SEPARATOR = 57822
const TIMESTAMPDIFF = 57823
const CURRENT_DATE = 57824
const CURRENT_USER = 57825
const CURRENT_ROLE = 57826
const SECOND_MICROSECOND = 57827
const MINUTE_MICROSECOND = 57828
const MINUTE_SECOND = 57829
const HOUR_MICROSECOND = 57830
const HOUR_SECOND = 57831
const HOUR_MINUTE = 57832
const DAY_MICROSECOND = 57833
const DAY_SECOND = 57834
const DAY_MINUTE = 57835
const DAY_HOUR = 57836
const YEAR_MONTH = 57837
const SQL_TSI_HOUR = 57838
const SQL_TSI_DAY = 57839
const SQL_TSI_WEEK = 57840
const SQL_TSI_MONTH = 57841
const SQL_TSI_QUARTER = 57842
const SQL_TSI_YEAR = 57843
const SQL_TSI_SECOND = 57844
const SQL_TSI_MINUTE = 57845
const RECURSIVE = 57846
const CONFIG = 57847
const DRAINER = 57848
const SOURCE = 57849
const STREAM = 57850
const HEADERS = 57851
const CONNECTOR = 57852
const CONNECTORS = 57853
const DAEMON = 57854
const PAUSE = 57855
const CANCEL = 57856
const TASK = 57857
const RESUME = 57858
const MATCH = 57859
const AGAINST = 57860
const BOOLEAN = 57861
const LANGUAGE = 57862
const WITH = 57863
const QUERY = 57864
const EXPANSION = 57865
const WITHOUT = 57866
const VALIDATION = 57867
const ADDDATE = 57868
const BIT_AND = 57869
const BIT_OR = 57870
const BIT_XOR = 57871
const CAST = 57872
const COUNT = 57873
const APPROX_COUNT = 57874
const APPROX_COUNT_DISTINCT = 57875
const SERIAL_EXTRACT = 57876
const APPROX_PERCENTILE = 57877
const CURDATE = 57878
const CURTIME = 57879
const DATE_ADD = 57880
const DATE_SUB = 57881
const EXTRACT = 57882
const GROUP_CONCAT = 57883
const MAX = 57884
const MID = 57885
const MIN = 57886
const NOW = 57887
const POSITION = 57888
const SESSION_USER = 57889
const STD = 57890
const STDDEV = 57891
const MEDIAN = 57892
const CLUSTER_CENTERS = 57893
const KMEANS = 57894
const STDDEV_POP = 57895
const STDDEV_SAMP = 57896
const SUBDATE = 57897
const SUBSTR = 57898
const SUBSTRING = 57899
const SUM = 57900
const SYSDATE = 57901
const SYSTEM_USER = 57902
const TRANSLATE = 57903
const TRIM = 57904
const VARIANCE = 57905
const VAR_POP = 57906
const VAR_SAMP = 57907
const AVG = 57908
const RANK = 57909
const ROW_NUMBER = 57910
const DENSE_RANK = 57911
const BIT_CAST = 57912
const BITMAP_BIT_POSITION = 57913
const BITMAP_BUCKET_NUMBER = 57914
const BITMAP_COUNT = 57915
const BITMAP_CONSTRUCT_AGG = 57916
const BITMAP_OR_AGG = 57917
const NEXTVAL = 57918
const SETVAL = 57919
const CURRVAL = 57920
const LASTVAL = 57921
const ARROW = 57922
const ROW = 57923
const OUTFILE = 57924
const HEADER = 57925
const MAX_FILE_SIZE = 57926
const FORCE_QUOTE = 57927
const PARALLEL = 57928
const UNUSED = 57929
const BINDINGS = 57930
const DO = 57931
const DECLARE = 57932
const LOOP = 57933
const WHILE = 57934
const LEAVE = 57935
const ITERATE = 57936
const UNTIL = 57937
const CALL = 57938
const PREV = 57939
const SLIDING = 57940
const FILL = 57941
const SPBEGIN = 57942
const BACKEND = 57943
const SERVERS = 57944
const HANDLER = 57945
const PERCENT = 57946
const SAMPLE = 57947
const KILL = 57948
const BACKUP = 57949
const FILESYSTEM = 57950
const PARALLELISM = 57951
const QUERY_RESULT = 57952

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11288

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 117,
	11, 707,
	22, 707,
	-2, 700,
	-1, 137,
	237, 1094,
	239, 997,
	-2, 1044,
	-1, 161,
	43, 535,
	239, 535,
	266, 542,
	267, 542,
	462, 535,
	-2, 569,
	-1, 202,
	631, 1843,
	-2, 451,
	-1, 501,
	631, 1960,
	-2, 345,
	-1, 559,
	631, 2019,
	-2, 343,
	-1, 560,
	631, 2020,
	-2, 344,
	-1, 561,
	631, 2021,
	-2, 346,
	-1, 687,
	318, 133,
	434, 133,
	435, 133,
	-2, 1748,
	-1, 752,
	82, 1535,
	-2, 1898,
	-1, 753,
	82, 1553,
	-2, 1869,
	-1, 757,
	82, 1554,
	-2, 1897,
	-1, 790,
	82, 1462,
	-2, 2091,
	-1, 791,
	82, 1463,
	-2, 2090,
	-1, 792,
	82, 1464,
	-2, 2080,
	-1, 793,
	82, 2052,
	-2, 2073,
	-1, 794,
	82, 2053,
	-2, 2074,
	-1, 795,
	82, 2054,
	-2, 2082,
	-1, 796,
	82, 2055,
	-2, 2062,
	-1, 797,
	82, 2056,
	-2, 2071,
	-1, 798,
	82, 2057,
	-2, 2083,
	-1, 799,
	82, 2058,
	-2, 2084,
	-1, 800,
	82, 2059,
	-2, 2089,
	-1, 801,
	82, 2060,
	-2, 2094,
	-1, 802,
	82, 2061,
	-2, 2095,
	-1, 803,
	82, 1531,
	-2, 1934,
	-1, 804,
	82, 1532,
	-2, 1732,
	-1, 805,
	82, 1533,
	-2, 1943,
	-1, 806,
	82, 1534,
	-2, 1741,
	-1, 808,
	82, 1537,
	-2, 1749,
	-1, 809,
	82, 1538,
	-2, 1967,
	-1, 811,
	82, 1541,
	-2, 1768,
	-1, 813,
	82, 1543,
	-2, 1979,
	-1, 814,
	82, 1544,
	-2, 1978,
	-1, 815,
	82, 1545,
	-2, 1812,
	-1, 816,
	82, 1546,
	-2, 1893,
	-1, 819,
	82, 1549,
	-2, 1990,
	-1, 821,
	82, 1551,
	-2, 1993,
	-1, 822,
	82, 1552,
	-2, 1995,
	-1, 823,
	82, 1555,
	-2, 2003,
	-1, 824,
	82, 1556,
	-2, 1878,
	-1, 825,
	82, 1557,
	-2, 1923,
	-1, 826,
	82, 1558,
	-2, 1888,
	-1, 827,
	82, 1559,
	-2, 1913,
	-1, 838,
	82, 1440,
	-2, 2085,
	-1, 839,
	82, 1441,
	-2, 2086,
	-1, 840,
	82, 1442,
	-2, 2087,
	-1, 925,
	457, 569,
	458, 569,
	-2, 536,
	-1, 971,
	123, 1732,
	134, 1732,
	154, 1732,
	-2, 1706,
	-1, 1080,
	22, 734,
	-2, 683,
	-1, 1184,
	11, 707,
	22, 707,
	-2, 1322,
	-1, 1265,
	22, 734,
	-2, 683,
	-1, 1580,
	82, 1606,
	-2, 1895,
	-1, 1581,
	82, 1607,
	-2, 1896,
	-1, 1729,
	83, 883,
	-2, 889,
	-1, 2147,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	279, 1036,
	-2, 1029,
	-1, 2294,
	11, 707,
	22, 707,
	-2, 827,
	-1, 2326,
	83, 1692,
	155, 1692,
	-2, 1880,
	-1, 2327,
	83, 1692,
	155, 1692,
	-2, 1879,
	-1, 2328,
	83, 1668,
	155, 1668,
	-2, 1866,
	-1, 2329,
	83, 1669,
	155, 1669,
	-2, 1871,
	-1, 2330,
	83, 1670,
	155, 1670,
	-2, 1800,
	-1, 2331,
	83, 1671,
	155, 1671,
	-2, 1794,
	-1, 2332,
	83, 1672,
	155, 1672,
	-2, 1722,
	-1, 2333,
	83, 1673,
	155, 1673,
	-2, 1868,
	-1, 2334,
	83, 1674,
	155, 1674,
	-2, 1798,
	-1, 2335,
	83, 1675,
	155, 1675,
	-2, 1793,
	-1, 2336,
	83, 1676,
	155, 1676,
	-2, 1782,
	-1, 2337,
	83, 1692,
	155, 1692,
	-2, 1783,
	-1, 2338,
	83, 1692,
	155, 1692,
	-2, 1784,
	-1, 2340,
	83, 1681,
	155, 1681,
	-2, 1913,
	-1, 2341,
	83, 1659,
	155, 1659,
	-2, 1898,
	-1, 2342,
	83, 1690,
	155, 1690,
	-2, 1869,
	-1, 2343,
	83, 1690,
	155, 1690,
	-2, 1897,
	-1, 2344,
	83, 1690,
	155, 1690,
	-2, 1750,
	-1, 2345,
	83, 1688,
	155, 1688,
	-2, 1888,
	-1, 2346,
	83, 1685,
	155, 1685,
	-2, 1773,
	-1, 2347,
	82, 1640,
	83, 1640,
	155, 1640,
	392, 1640,
	393, 1640,
	394, 1640,
	-2, 1721,
	-1, 2348,
	82, 1641,
	83, 1641,
	155, 1641,
	392, 1641,
	393, 1641,
	394, 1641,
	-2, 1723,
	-1, 2349,
	82, 1642,
	83, 1642,
	155, 1642,
	392, 1642,
	393, 1642,
	394, 1642,
	-2, 1939,
	-1, 2350,
	82, 1644,
	83, 1644,
	155, 1644,
	392, 1644,
	393, 1644,
	394, 1644,
	-2, 1870,
	-1, 2351,
	82, 1646,
	83, 1646,
	155, 1646,
	392, 1646,
	393, 1646,
	394, 1646,
	-2, 1852,
	-1, 2352,
	82, 1648,
	83, 1648,
	155, 1648,
	392, 1648,
	393, 1648,
	394, 1648,
	-2, 1799,
	-1, 2353,
	82, 1650,
	83, 1650,
	155, 1650,
	392, 1650,
	393, 1650,
	394, 1650,
	-2, 1778,
	-1, 2354,
	82, 1651,
	83, 1651,
	155, 1651,
	392, 1651,
	393, 1651,
	394, 1651,
	-2, 1779,
	-1, 2355,
	82, 1653,
	83, 1653,
	155, 1653,
	392, 1653,
	393, 1653,
	394, 1653,
	-2, 1720,
	-1, 2356,
	83, 1695,
	155, 1695,
	392, 1695,
	393, 1695,
	394, 1695,
	-2, 1755,
	-1, 2357,
	83, 1695,
	155, 1695,
	392, 1695,
	393, 1695,
	394, 1695,
	-2, 1769,
	-1, 2358,
	83, 1698,
	155, 1698,
	392, 1698,
	393, 1698,
	394, 1698,
	-2, 1751,
	-1, 2359,
	83, 1698,
	155, 1698,
	392, 1698,
	393, 1698,
	394, 1698,
	-2, 1815,
	-1, 2360,
	83, 1695,
	155, 1695,
	392, 1695,
	393, 1695,
	394, 1695,
	-2, 1836,
	-1, 2551,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	279, 1036,
	-2, 1030,
	-1, 2567,
	80, 628,
	155, 628,
	-2, 1207,
	-1, 2953,
	192, 1036,
	303, 1290,
	-2, 1262,
	-1, 3109,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	-2, 1150,
	-1, 3111,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	-2, 1150,
	-1, 3123,
	80, 628,
	155, 628,
	-2, 1208,
	-1, 3144,
	192, 1036,
	303, 1290,
	-2, 1263,
	-1, 3281,
	106, 1036,
	150, 1036,
	189, 1036,
	192, 1036,
	-2, 1151,
	-1, 3307,
	83, 1112,
	155, 1112,
	-2, 1036,
	-1, 3440,
	83, 1112,
	155, 1112,
	-2, 1036,
	-1, 3589,
	83, 1116,
	155, 1116,
	-2, 1036,
	-1, 3637,
	83, 1117,
	155, 1117,
	-2, 1036,
}

const yyPrivate = 57344

const yyLast = 46485

var yyAct = [...]int{
	719, 697, 3654, 2596, 721, 3617, 191, 3670, 1814, 3593,
	1560, 3129, 3495, 3599, 3592, 3600, 3521, 3440, 2939, 705,
	3480, 2972, 3158, 3222, 3418, 2590, 2410, 1218, 3499, 3267,
	3335, 699, 3471, 3439, 3039, 3266, 3363, 3264, 3374, 749,
	593, 1407, 3040, 2593, 1345, 3409, 970, 3481, 3226, 1483,
	609, 3483, 614, 614, 3217, 1762, 3096, 1556, 614, 631,
	640, 3271, 2948, 640, 1081, 2570, 2192, 3288, 3278, 2912,
	3145, 1563, 3248, 3112, 3037, 55, 2703, 2324, 2875, 695,
	176, 3283, 1904, 2901, 3085, 36, 2704, 2620, 2702, 2686,
	2950, 3114, 2957, 2599, 2968, 2765, 2696, 651, 1869, 2008,
	2445, 3025, 2322, 1617, 645, 2195, 2725, 2885, 3005, 2699,
	1972, 1400, 2540, 1919, 689, 2882, 1901, 2880, 2288, 1493,
	2878, 2876, 2956, 2920, 116, 1074, 2552, 2158, 2272, 35,
	2125, 2116, 2873, 2808, 1479, 694, 1992, 2115, 2877, 2393,
	901, 2738, 1709, 2225, 637, 1981, 3228, 1946, 1980, 2376,
	1973, 1897, 2289, 2748, 2003, 2004, 1872, 1870, 1484, 2277,
	1487, 2529, 1318, 2524, 2193, 593, 2622, 2601, 1793, 1804,
	2562, 187, 8, 6, 1472, 186, 7, 1296, 2157, 964,
	1026, 1738, 2320, 1554, 2005, 1386, 1446, 608, 1492, 698,
	2015, 191, 1610, 191, 2138, 1017, 1018, 2478, 688, 1416,
	706, 1774, 614, 2038, 1094, 1594, 1979, 1509, 933, 1545,
	26, 1976, 1962, 1453, 1936, 696, 1334, 1773, 963, 592,
	15, 2188, 653, 13, 1553, 2296, 22, 1385, 623, 1737,
	2477, 14, 1439, 900, 690, 842, 1383, 1330, 1618, 23,
	32, 16, 626, 1445, 979, 10, 639, 654, 173, 898,
	177, 1346, 167, 877, 883, 920, 1263, 2012, 650, 1219,
	3403, 2513, 2513, 1320, 2513, 1014, 2022, 3099, 2433, 636,
	3032, 1013, 1559, 1015, 2377, 2382, 2380, 1722, 2379, 632,
	1460, 1456, 634, 1009, 1010, 175, 610, 2114, 1282, 2858,
	635, 2855, 2860, 976, 1010, 2857, 1010, 1354, 978, 633,
	3662, 2505, 2503, 844, 845, 1368, 1716, 1278, 619, 643,
	1458, 174, 51, 163, 138, 3148, 1153, 1154, 1155, 1152,
	3215, 2761, 2759, 1355, 690, 1153, 1154, 1155, 1152, 164,
	1951, 3370, 3364, 3218, 3038, 1989, 156, 3485, 1213, 1975,
	165, 2507, 843, 2835, 2233, 3253, 3425, 8, 2427, 1008,
	3574, 7, 3249, 3160, 854, 1116, 3113, 174, 2149, 115,
	174, 174, 51, 163, 138, 1764, 3151, 1283, 174, 51,
	163, 138, 174, 174, 103, 1507, 3146, 2419, 1500, 2009,
	168, 3168, 3169, 3393, 3532, 1426, 1425, 3147, 1424, 982,
	3426, 980, 981, 2833, 2558, 1310, 2142, 649, 2314, 1292,
	2020, 1150, 3395, 1914, 174, 1504, 691, 2315, 1497, 1364,
	174, 2731, 1365, 174, 2732, 2733, 1881, 174, 51, 163,
	138, 2780, 2943, 1387, 3152, 1389, 1506, 174, 1284, 1499,
	168, 2394, 1518, 1882, 1883, 1124, 1530, 168, 1126, 1723,
	1724, 2556, 168, 174, 51, 163, 138, 1546, 2941, 942,
	1550, 1143, 174, 51, 163, 138, 120, 121, 2773, 122,
	123, 115, 1788, 855, 1131, 1342, 1127, 1132, 2859, 1562,
	2856, 974, 975, 168, 1549, 115, 1148, 2302, 973, 168,
	2301, 1092, 168, 2303, 2526, 833, 168, 832, 834, 835,
	3239, 836, 837, 952, 2527, 1134, 168, 1350, 1367, 1352,
	1353, 1349, 1352, 1353, 3603, 3604, 972, 1089, 3571, 3488,
	3565, 3488, 168, 3487, 3564, 3625, 3486, 3563, 3167, 3487,
	2196, 168, 3486, 2103, 3567, 3476, 3372, 137, 162, 172,
	1291, 101, 3621, 3622, 3375, 3376, 3377, 3378, 3041, 3041,
	2766, 3473, 3473, 2525, 2414, 3156, 1120, 2508, 3367, 161,
	155, 154, 1459, 1457, 1086, 2767, 57, 2768, 1551, 2024,
	3492, 1566, 1097, 1898, 2641, 3054, 1888, 3153, 3157, 3155,
	3154, 1122, 3086, 1892, 1541, 1129, 2016, 137, 3093, 172,
	2896, 1548, 2266, 1125, 1128, 2894, 3258, 2136, 1959, 3576,
	3577, 1136, 2886, 889, 1137, 1011, 1012, 1652, 2516, 161,
	1016, 3397, 3572, 3573, 3170, 3162, 3163, 1466, 1465, 1121,
	1146, 1147, 3569, 614, 2796, 2798, 2424, 157, 158, 159,
	160, 1145, 1139, 614, 1085, 2231, 684, 3238, 2532, 686,
	3216, 1119, 2760, 2890, 685, 3240, 948, 946, 1130, 947,
	2891, 2892, 640, 640, 2690, 614, 2269, 1097, 166, 2268,
	3400, 3255, 3170, 2021, 1912, 1913, 2893, 2273, 3602, 2506,
	1366, 1340, 1141, 1142, 3149, 3387, 3185, 3388, 111, 1020,
	3161, 2971, 160, 3632, 112, 3430, 1377, 1565, 1564, 2910,
	2969, 2970, 2921, 1293, 2945, 3514, 1123, 3509, 3182, 3422,
	2563, 642, 1281, 641, 2695, 2144, 3175, 2211, 1547, 3500,
	3516, 2940, 1135, 2191, 2214, 979, 3130, 3186, 3387, 3137,
	3388, 3522, 1329, 637, 637, 1133, 2595, 1084, 1572, 1575,
	1576, 3390, 2027, 2029, 2030, 953, 3382, 3491, 3326, 1573,
	2243, 113, 2317, 2242, 3686, 3402, 3057, 2802, 2010, 2512,
	1140, 1078, 2974, 3229, 50, 2888, 1111, 949, 891, 1102,
	892, 1085, 3389, 2538, 976, 3315, 1396, 1099, 1098, 978,
	2010, 2213, 2010, 1395, 3390, 1138, 3336, 3337, 3338, 3342,
	3340, 3341, 3339, 1109, 2591, 2592, 979, 2595, 1010, 2263,
	2264, 1010, 1222, 1010, 1010, 2670, 872, 3424, 638, 1010,
	891, 1010, 892, 52, 1327, 3389, 3575, 1352, 1353, 886,
	3166, 882, 1326, 2011, 2212, 1325, 3321, 2023, 3444, 3523,
	951, 3591, 3410, 2378, 2544, 2547, 2548, 2549, 2545, 2546,
	1186, 2949, 1461, 1352, 1353, 976, 3396, 1075, 169, 170,
	978, 171, 3431, 1091, 648, 2854, 139, 638, 636, 636,
	1344, 1343, 1099, 1098, 1223, 2234, 3423, 3115, 632, 632,
	52, 634, 634, 2504, 843, 2039, 2208, 1100, 3673, 635,
	635, 2198, 3254, 638, 2191, 2428, 1289, 609, 633, 633,
	1088, 1090, 638, 3213, 3165, 2743, 2744, 1080, 169, 170,
	1297, 171, 139, 3044, 1341, 139, 139, 950, 1104, 1105,
	3470, 2897, 649, 139, 1108, 1384, 1899, 139, 139, 52,
	901, 2887, 2727, 2729, 114, 39, 1261, 1110, 1192, 1266,
	2946, 49, 3398, 2965, 2420, 5, 2201, 1188, 1189, 1190,
	1191, 118, 119, 1079, 975, 52, 2799, 2306, 888, 139,
	881, 1116, 3568, 2973, 52, 139, 2531, 3443, 139, 885,
	884, 2229, 139, 2642, 2889, 2643, 2644, 2013, 1302, 614,
	3259, 1379, 139, 2453, 1889, 2801, 866, 593, 593, 1574,
	873, 1891, 1542, 2028, 1348, 1308, 593, 593, 139, 943,
	1411, 1411, 3383, 614, 1294, 1307, 3482, 139, 2969, 2970,
	880, 1069, 1065, 1066, 1067, 1068, 1306, 2458, 3590, 2457,
	2456, 2454, 2535, 2536, 3674, 640, 1440, 609, 2197, 890,
	1449, 1449, 3317, 2199, 879, 1305, 3316, 2534, 878, 644,
	3079, 191, 1413, 2908, 865, 3383, 3328, 1115, 871, 3384,
	593, 1234, 1235, 2966, 2198, 2201, 2639, 1409, 1409, 895,
	896, 897, 2671, 2673, 2674, 2675, 2672, 3322, 3323, 1418,
	869, 890, 861, 2025, 2026, 1315, 943, 2202, 1298, 1299,
	1300, 1301, 945, 1303, 1290, 944, 2455, 2200, 2515, 1309,
	2810, 2809, 2207, 2661, 2662, 2119, 2205, 1351, 2728, 2121,
	2120, 1491, 1287, 1494, 1726, 1467, 1727, 889, 1502, 1405,
	1406, 1285, 1286, 1001, 1006, 1007, 2118, 1725, 857, 2255,
	2228, 858, 3289, 860, 1267, 2926, 3682, 863, 862, 1156,
	893, 1265, 1528, 870, 2128, 3676, 3561, 1185, 1765, 2286,
	3045, 1523, 1524, 1151, 3668, 1194, 1411, 3002, 1411, 1085,
	2568, 2072, 1116, 1295, 2071, 3671, 3672, 2129, 2130, 945,
	1336, 1337, 944, 1082, 1765, 2396, 1391, 1393, 1082, 2998,
	1202, 3656, 2909, 3082, 1508, 1403, 1404, 3092, 3056, 1317,
	979, 2108, 1378, 2419, 979, 3639, 2202, 2978, 3611, 3605,
	1498, 2197, 2191, 2196, 1505, 2194, 2199, 1323, 2018, 2976,
	2569, 3587, 1328, 1369, 1370, 2864, 2862, 637, 1356, 1338,
	887, 1359, 1481, 1482, 1441, 2660, 3640, 1357, 1358, 1537,
	1360, 1361, 1362, 2140, 2459, 2460, 1151, 3542, 3517, 1462,
	1616, 1939, 1470, 1527, 1473, 1474, 1394, 847, 848, 849,
	850, 1526, 1561, 3657, 1665, 1475, 1476, 2287, 3505, 876,
	2200, 3463, 1544, 2967, 1419, 1486, 3462, 3640, 1490, 1489,
	3612, 3406, 619, 2287, 2746, 1331, 1335, 1335, 1335, 2518,
	2509, 1438, 1432, 3588, 1450, 2287, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 2569, 1331,
	1331, 1451, 1605, 1606, 954, 1153, 1154, 1155, 1152, 3406,
	2018, 3002, 1543, 1558, 1003, 1004, 1005, 1151, 3457, 3456,
	1085, 3455, 1262, 3454, 1422, 3434, 847, 848, 849, 850,
	3506, 3433, 1440, 3464, 1577, 3405, 1539, 1735, 2162, 1411,
	1740, 1741, 636, 1743, 1744, 614, 1707, 2139, 1674, 1650,
	614, 2831, 632, 1411, 1536, 634, 1516, 901, 3191, 1519,
	1763, 2409, 2174, 635, 1533, 1411, 2401, 1532, 1655, 1656,
	1657, 1379, 633, 1511, 1517, 2317, 631, 1552, 2009, 1937,
	1880, 1671, 2184, 1535, 1672, 1534, 2113, 1710, 1114, 1531,
	3406, 3406, 2107, 3406, 852, 3406, 1787, 2018, 2106, 1664,
	1116, 1685, 1686, 2018, 1557, 1794, 1794, 3406, 1379, 3139,
	1379, 1379, 2079, 1718, 614, 614, 3105, 1735, 1735, 1596,
	1706, 1411, 1866, 1867, 1879, 1734, 2000, 1910, 1555, 3072,
	2317, 1113, 1647, 1648, 2051, 1651, 1603, 1604, 593, 1742,
	1411, 1316, 3068, 1666, 2986, 2722, 1448, 1448, 1153, 1154,
	1155, 1152, 1153, 1154, 1155, 1152, 1673, 2484, 1675, 2476,
	1676, 1677, 1678, 1153, 1154, 1155, 1152, 2435, 614, 1735,
	1411, 1608, 1924, 852, 614, 614, 614, 1929, 1930, 2417,
	2405, 3140, 2198, 2201, 1934, 1935, 1397, 2403, 3106, 1941,
	3690, 3658, 3126, 2398, 2173, 2391, 191, 1816, 2048, 191,
	191, 3073, 191, 1915, 2927, 1861, 1862, 1114, 3352, 2050,
	1731, 1732, 1733, 1713, 3069, 1679, 2987, 2287, 2750, 2571,
	2389, 2422, 2387, 1746, 1747, 1748, 1749, 2421, 1168, 1151,
	3189, 1151, 2413, 2385, 1893, 2161, 2179, 2067, 1708, 1151,
	1665, 1665, 1983, 1885, 2109, 1887, 1791, 1665, 1665, 2052,
	1909, 2162, 2399, 1999, 1994, 1905, 1906, 1921, 1714, 2404,
	2086, 2085, 1907, 1908, 1730, 2399, 2070, 2392, 1923, 2061,
	1944, 1932, 1513, 1199, 1795, 1101, 1950, 1766, 1767, 1953,
	1954, 1763, 1956, 1077, 1796, 1411, 2007, 1926, 1927, 1928,
	1760, 1759, 2390, 1988, 2386, 1900, 1780, 1072, 1567, 1568,
	1569, 1570, 1571, 1770, 1776, 2386, 2931, 2162, 1785, 1797,
	2060, 1739, 2059, 1070, 2202, 979, 2108, 3510, 2017, 2197,
	2191, 2196, 979, 2194, 2199, 1755, 2793, 1798, 1799, 3290,
	1771, 1772, 1151, 1151, 3677, 2186, 2001, 1768, 1151, 3118,
	1520, 1151, 1612, 1613, 1614, 1615, 637, 1781, 1782, 1868,
	1865, 1649, 2298, 1363, 1332, 1984, 1894, 1401, 1884, 1659,
	1886, 3511, 1399, 3659, 976, 1654, 1653, 1792, 1402, 978,
	3116, 976, 1775, 3291, 1777, 1778, 978, 2922, 2200, 2226,
	2377, 3404, 1151, 3119, 1151, 1978, 722, 732, 1784, 1331,
	2018, 3379, 1978, 1739, 1922, 723, 859, 724, 728, 731,
	727, 725, 726, 1335, 3319, 1945, 1947, 1654, 1653, 3318,
	3304, 1711, 1521, 979, 3117, 1335, 1321, 3030, 3260, 3098,
	1322, 2036, 2037, 3003, 1077, 1171, 1172, 1173, 1174, 1175,
	1168, 1964, 1176, 1177, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1168, 1555, 2996, 1779, 2991, 2988, 2903, 2692, 2542,
	729, 2514, 1321, 2923, 1987, 2432, 1322, 2032, 1985, 1990,
	1786, 1398, 976, 1789, 1790, 2402, 1998, 978, 2308, 689,
	1333, 636, 614, 614, 614, 1691, 1312, 1311, 1087, 2442,
	2371, 632, 730, 1948, 634, 1996, 1611, 614, 614, 614,
	614, 1736, 635, 2002, 1783, 2752, 1602, 2924, 1155, 1152,
	2159, 633, 3562, 1997, 1153, 1154, 1155, 1152, 1152, 3331,
	2166, 1379, 1599, 1601, 1598, 3033, 1600, 1684, 3330, 2031,
	864, 1373, 1374, 1611, 1376, 2045, 1380, 1381, 1382, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1168, 1379, 2769, 1596,
	2080, 2081, 2044, 2083, 2033, 2631, 2629, 1711, 2040, 1454,
	2090, 1948, 1711, 1711, 2220, 2034, 2035, 2607, 1427, 1428,
	1429, 1430, 1431, 2468, 1433, 1434, 1435, 1436, 1437, 2605,
	3261, 3262, 1443, 1444, 3685, 1680, 1681, 1682, 1683, 3310,
	2541, 1687, 1688, 1689, 1690, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1700, 1701, 1669, 3256, 1153, 1154, 1155,
	1152, 1949, 1201, 2227, 1952, 734, 117, 1955, 2381, 1670,
	1957, 117, 3664, 3090, 1200, 2291, 2291, 1879, 2291, 1167,
	1166, 1176, 1177, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1168, 1153, 1154, 1155, 1152, 3684, 593, 593, 2074, 1454,
	2102, 2104, 2105, 3097, 1085, 1153, 1154, 1155, 1152, 3663,
	1411, 614, 3257, 2697, 3031, 1153, 1154, 1155, 1152, 1993,
	2682, 620, 2110, 2497, 117, 2498, 614, 2122, 2190, 3091,
	2141, 3586, 1085, 2361, 609, 1222, 3585, 3551, 1449, 3512,
	1879, 3459, 3447, 2366, 3437, 2368, 2189, 3427, 3365, 191,
	3293, 2680, 979, 1166, 1176, 1177, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1168, 2183, 2232, 3292, 2312, 2235, 2236,
	2237, 2238, 2239, 2240, 2241, 2295, 2681, 2244, 2245, 2246,
	2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2167, 2256,
	2257, 2258, 2259, 2260, 2293, 2261, 2297, 1223, 2180, 2678,
	2415, 976, 2304, 2007, 2305, 3131, 978, 2679, 2178, 2667,
	1411, 3120, 1411, 3089, 1411, 2042, 2895, 2789, 2046, 1085,
	2764, 2763, 2309, 2310, 2665, 2325, 2664, 2434, 2663, 2372,
	2203, 2204, 2655, 2209, 977, 2649, 2648, 2647, 2365, 2319,
	2646, 117, 1153, 1154, 1155, 1152, 2510, 2112, 2175, 3681,
	1967, 2444, 1411, 2462, 1966, 2677, 117, 1965, 117, 2058,
	2270, 1153, 1154, 1155, 1152, 2666, 2299, 2065, 2469, 2425,
	2373, 1961, 1960, 1411, 1918, 1391, 1393, 1917, 2170, 1153,
	1154, 1155, 1152, 2176, 1916, 1514, 2177, 1280, 1455, 2082,
	2881, 3680, 3631, 2461, 2087, 2088, 2089, 2824, 3630, 2092,
	2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 1409,
	2313, 3627, 2429, 3223, 2470, 1335, 3623, 3494, 1877, 3265,
	3479, 2362, 3468, 2316, 2364, 2446, 3451, 2446, 1085, 3446,
	1409, 3445, 1085, 1153, 1154, 1155, 1152, 2168, 2169, 3401,
	1411, 3399, 3366, 2539, 3312, 2473, 2474, 2171, 2172, 1735,
	2450, 3274, 684, 3243, 2471, 686, 2823, 2567, 3242, 3221,
	685, 2431, 3219, 2573, 2063, 3198, 2812, 3195, 2426, 3193,
	613, 613, 2163, 3596, 2687, 3088, 621, 2440, 2411, 2412,
	2583, 3087, 1153, 1154, 1155, 1152, 3084, 2418, 3065, 1085,
	2416, 2501, 3063, 2423, 2997, 2993, 2407, 2604, 2984, 1153,
	1154, 1155, 1152, 2983, 1085, 1085, 1085, 1794, 2904, 2049,
	1085, 2868, 2615, 2616, 2617, 2618, 1085, 2625, 2867, 2626,
	2627, 2519, 2628, 2866, 2630, 2325, 979, 2117, 2803, 2553,
	2062, 2452, 2800, 2564, 2762, 2625, 2557, 2554, 2436, 2437,
	1153, 1154, 1155, 1152, 3498, 2055, 2736, 2291, 2676, 2597,
	1153, 1154, 1155, 1152, 2668, 2439, 1153, 1154, 1155, 1152,
	2585, 2683, 3529, 2574, 2658, 2656, 1816, 1925, 2652, 593,
	1153, 1154, 1155, 1152, 1735, 1085, 1879, 1879, 1879, 1879,
	2528, 2651, 1555, 1153, 1154, 1155, 1152, 1085, 1879, 2650,
	2511, 2291, 1711, 2408, 1711, 2521, 1969, 2523, 2610, 2611,
	2602, 3244, 2363, 2614, 2602, 789, 788, 1411, 1963, 2621,
	2598, 2370, 1711, 1711, 2520, 1721, 2479, 2480, 614, 614,
	621, 2537, 2485, 1720, 1515, 2609, 1230, 1153, 1154, 1155,
	1152, 1226, 8, 3232, 2572, 2566, 7, 1153, 1154, 1155,
	1152, 2047, 1225, 1073, 1448, 856, 3525, 3392, 3645, 3391,
	3380, 3245, 2584, 3230, 2587, 3231, 3111, 2600, 3110, 1153,
	1154, 1155, 1152, 2718, 3109, 3081, 2606, 3077, 2705, 3075,
	3074, 2637, 2638, 2603, 191, 2613, 3071, 3070, 3064, 191,
	2705, 1153, 1154, 1155, 1152, 3062, 2653, 2654, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1157, 3046, 3036, 3179, 2657,
	1665, 2645, 1665, 2747, 174, 2779, 163, 138, 3035, 3021,
	2689, 3020, 1739, 2932, 2788, 1153, 1154, 1155, 1152, 2871,
	1411, 2861, 2829, 2795, 1153, 1154, 1155, 1152, 2822, 2688,
	2814, 2575, 2693, 2706, 2707, 2708, 2709, 2813, 3060, 2807,
	2580, 2581, 2745, 2721, 2719, 2717, 1638, 2517, 2691, 2388,
	2384, 2720, 2443, 2383, 2753, 2449, 2091, 2084, 2078, 2757,
	2737, 2734, 2463, 2464, 1153, 1154, 1155, 1152, 2077, 2076,
	2466, 2467, 2827, 168, 979, 2075, 2582, 2073, 1481, 1482,
	1710, 979, 2069, 2068, 2774, 2778, 2472, 2730, 2066, 2057,
	2054, 2781, 2053, 117, 117, 977, 1968, 1704, 1153, 1154,
	1155, 1152, 1474, 1703, 2826, 1702, 2817, 1668, 2819, 1667,
	1658, 2776, 1475, 1476, 1567, 1711, 1486, 2782, 2792, 1490,
	1489, 1423, 2754, 1085, 2751, 2755, 2797, 1421, 3550, 2884,
	1153, 1154, 1155, 1152, 174, 1220, 2576, 3524, 3465, 2899,
	2772, 2579, 3453, 3448, 614, 2775, 2785, 2770, 2784, 2783,
	2777, 1469, 3346, 3329, 3325, 3303, 2913, 1085, 2825, 3287,
	1085, 1085, 3206, 3204, 3177, 3176, 1184, 3173, 3172, 1879,
	2159, 2804, 2930, 3138, 2805, 2791, 3135, 3133, 3100, 1480,
	2577, 2578, 2811, 1471, 1153, 1154, 1155, 1152, 1485, 1488,
	2220, 1477, 2818, 2820, 2821, 1319, 1313, 2870, 2684, 2608,
	2907, 2560, 2955, 168, 2958, 2559, 2958, 2958, 2555, 1634,
	2522, 1085, 2496, 2863, 2397, 1631, 2307, 2262, 2160, 1633,
	1630, 1632, 1636, 1637, 2131, 2111, 2438, 1635, 2815, 2816,
	2979, 1597, 979, 2553, 979, 168, 1931, 979, 1411, 1411,
	2975, 1729, 1717, 1540, 2916, 2865, 1501, 2919, 2977, 2869,
	1167, 1166, 1176, 1177, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1168, 979, 1478, 1279, 1264, 1260, 2928, 2900, 1259,
	1258, 1257, 2938, 1256, 1255, 1254, 1253, 2953, 2906, 2980,
	2981, 976, 1252, 1251, 998, 614, 978, 1250, 1249, 2915,
	2884, 2925, 2917, 2918, 2954, 1409, 1409, 2929, 1248, 1247,
	2963, 1735, 1735, 1246, 1245, 1244, 2836, 2837, 2937, 2190,
	1243, 1268, 2838, 2839, 2840, 2841, 2495, 2842, 2843, 2844,
	2845, 2846, 2847, 2848, 2849, 2850, 2851, 2189, 2959, 2960,
	2494, 1076, 2964, 1242, 1241, 1240, 1239, 1238, 2942, 2944,
	2493, 1083, 1153, 1154, 1155, 1152, 1237, 1085, 1236, 1233,
	1232, 2462, 3308, 2492, 1231, 1229, 1153, 1154, 1155, 1152,
	3034, 2491, 1228, 1107, 3541, 2490, 1153, 1154, 1155, 1152,
	1227, 1641, 1642, 1643, 1644, 1645, 1646, 1639, 1640, 1153,
	1154, 1155, 1152, 1224, 2756, 2961, 2758, 1153, 1154, 1155,
	1152, 1153, 1154, 1155, 1152, 2489, 1217, 1216, 2985, 1214,
	1213, 2994, 614, 2992, 1711, 2990, 2989, 2995, 1212, 1711,
	2999, 3000, 1211, 1210, 1209, 1208, 1993, 3010, 1207, 1206,
	1205, 1153, 1154, 1155, 1152, 1204, 993, 988, 983, 987,
	991, 3014, 1203, 3017, 3018, 3019, 1198, 1179, 1197, 1183,
	2325, 1420, 3438, 1196, 1195, 620, 2936, 1118, 1071, 3023,
	3539, 2806, 3537, 3029, 996, 1180, 1182, 1178, 986, 1181,
	1167, 1166, 1176, 1177, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1168, 3006, 3007, 3535, 2828, 117, 3174, 2165, 2146,
	3049, 1106, 3643, 3601, 3047, 3009, 2543, 2318, 3052, 3012,
	2446, 3048, 3053, 2488, 1971, 1167, 1166, 1176, 1177, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1168, 2487, 1117, 994,
	2714, 3104, 3011, 3058, 2711, 2715, 997, 3066, 2712, 1153,
	1154, 1155, 1152, 2713, 3208, 2710, 2291, 1879, 3123, 2406,
	2400, 3301, 3209, 1153, 1154, 1155, 1152, 2902, 984, 2230,
	117, 2933, 1757, 1758, 117, 2486, 2934, 2935, 979, 2716,
	3141, 2283, 2284, 1085, 2951, 979, 2952, 117, 3080, 2787,
	102, 995, 2955, 54, 611, 3083, 1085, 3184, 3078, 117,
	53, 1153, 1154, 1155, 1152, 3050, 3051, 1085, 2483, 3188,
	3024, 3207, 2482, 1411, 1167, 1166, 1176, 1177, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1168, 3125, 3095, 1853, 1735,
	2395, 985, 1463, 1085, 1153, 1154, 1155, 1152, 1153, 1154,
	1155, 1152, 1752, 1753, 1754, 2962, 616, 615, 2430, 617,
	3171, 3132, 1510, 3134, 3190, 3122, 618, 2411, 2412, 3128,
	2633, 1495, 191, 2137, 1933, 3164, 1112, 2634, 2635, 2636,
	1409, 2879, 2872, 2586, 3121, 1085, 3142, 2561, 2182, 2155,
	1761, 3101, 3102, 3103, 3178, 3180, 3210, 3107, 3108, 3181,
	1728, 3183, 1654, 1653, 3187, 3614, 3200, 1375, 3450, 3001,
	2621, 2481, 1275, 1276, 2982, 3194, 2271, 3192, 992, 3197,
	1273, 1274, 2267, 1085, 3013, 3016, 3202, 3199, 2274, 3201,
	1864, 1417, 1271, 1272, 1269, 1270, 2705, 1153, 1154, 1155,
	1152, 1085, 1411, 1411, 1372, 1371, 1144, 2913, 2739, 3196,
	1995, 1324, 3214, 1304, 989, 1347, 3579, 990, 3282, 3557,
	3282, 3224, 2475, 3555, 3225, 2279, 2282, 2283, 2284, 2280,
	3501, 2281, 2285, 3297, 1085, 3478, 1085, 2465, 2705, 3276,
	3277, 2441, 3477, 3270, 3300, 3475, 3302, 3212, 1153, 1154,
	1155, 1152, 3466, 1411, 3360, 3250, 3252, 3247, 3359, 1409,
	3272, 3251, 3298, 1153, 1154, 1155, 1152, 1153, 1154, 1155,
	1152, 614, 3220, 1085, 1085, 3067, 3275, 1085, 1085, 3043,
	3286, 3042, 3285, 3027, 2215, 979, 3026, 3241, 2185, 3125,
	1512, 2749, 1765, 1607, 3268, 3279, 3296, 3647, 3646, 3647,
	2790, 3348, 2148, 3306, 2056, 1763, 3343, 3357, 3333, 3334,
	3272, 3171, 3344, 3345, 3313, 3309, 3361, 3362, 3305, 1153,
	1154, 1155, 1152, 1103, 3646, 3327, 3164, 1561, 3311, 1561,
	3022, 3059, 1082, 2279, 2282, 2283, 2284, 2280, 3061, 2281,
	2285, 847, 848, 849, 850, 3354, 1082, 178, 3, 1878,
	1339, 62, 2, 3660, 3353, 3661, 1, 3386, 2502, 1715,
	3355, 1277, 3349, 851, 846, 1388, 3268, 3268, 2300, 3076,
	3268, 3268, 1911, 1415, 1719, 853, 2723, 2724, 3015, 2726,
	3368, 2014, 2694, 2265, 2135, 3381, 2898, 1314, 3419, 3385,
	3413, 894, 1660, 3233, 3124, 3234, 1525, 1000, 1096, 1522,
	1095, 1093, 3127, 1609, 1085, 736, 1974, 2685, 2659, 3356,
	3613, 3653, 3549, 3616, 3436, 1538, 3442, 720, 3407, 3469,
	3371, 117, 3553, 3373, 117, 117, 3227, 117, 2019, 3350,
	3414, 1149, 3416, 3351, 3415, 2771, 916, 777, 747, 1215,
	1503, 1496, 3432, 2834, 2832, 1002, 746, 1085, 3094, 2533,
	2742, 3421, 1411, 999, 917, 1958, 979, 3369, 1464, 3428,
	1468, 2181, 3429, 3520, 3307, 977, 3411, 3449, 2947, 2594,
	3515, 3136, 977, 3237, 3235, 3236, 655, 1890, 591, 961,
	3347, 1970, 3458, 656, 2164, 3570, 117, 3452, 874, 2145,
	875, 867, 2551, 3460, 3490, 2550, 1578, 1561, 1158, 1711,
	1595, 2852, 3484, 2853, 1193, 3467, 693, 1085, 2043, 1409,
	1711, 2530, 3474, 3203, 3159, 3472, 3205, 2735, 61, 60,
	59, 3502, 58, 1745, 1940, 199, 738, 198, 1750, 3263,
	3546, 3618, 718, 3211, 3497, 717, 3496, 716, 715, 714,
	3268, 3493, 713, 2278, 2276, 3504, 2275, 1874, 1873, 3519,
	1938, 2911, 2624, 2619, 1085, 1805, 1803, 2612, 2210, 2217,
	1802, 3598, 1411, 1184, 3530, 3544, 3547, 3534, 3536, 3538,
	3540, 3531, 3324, 3513, 3518, 2669, 1751, 3527, 2206, 1822,
	2640, 1819, 1818, 2632, 3320, 3314, 1850, 3294, 3295, 3533,
	3548, 3417, 1800, 1801, 3281, 3143, 3461, 3144, 3150, 3556,
	3268, 3558, 3559, 3543, 1411, 3554, 3552, 3419, 2154, 1025,
	1021, 1023, 1024, 1022, 2451, 2187, 2874, 2127, 2126, 1409,
	2124, 2123, 1288, 3589, 3489, 3578, 3566, 3580, 3246, 3597,
	2323, 3582, 2321, 3008, 3004, 1982, 1991, 2786, 1875, 3583,
	3584, 1871, 2147, 3394, 1756, 3581, 1920, 3268, 868, 2143,
	99, 3620, 1920, 1920, 1920, 3619, 152, 48, 3503, 89,
	88, 1409, 98, 3507, 3508, 3610, 3606, 150, 3607, 47,
	3608, 183, 3609, 182, 185, 184, 181, 2374, 2375, 180,
	1085, 3624, 3484, 3626, 1452, 179, 3560, 3284, 841, 38,
	37, 33, 12, 11, 3528, 34, 21, 20, 3442, 3635,
	1529, 19, 25, 31, 30, 3636, 3638, 3637, 110, 109,
	29, 108, 107, 3652, 3644, 3642, 3655, 106, 3641, 3648,
	3649, 3650, 3651, 105, 104, 28, 18, 904, 42, 41,
	40, 9, 97, 3665, 95, 1085, 27, 96, 93, 94,
	92, 90, 73, 72, 71, 3666, 3519, 3667, 86, 85,
	3669, 84, 83, 82, 81, 3675, 79, 80, 3620, 3679,
	915, 70, 3619, 3678, 69, 68, 67, 66, 91, 77,
	87, 3683, 78, 3633, 76, 75, 3408, 74, 3655, 3687,
	65, 64, 63, 136, 135, 174, 51, 163, 138, 1851,
	134, 3691, 133, 132, 1812, 130, 903, 131, 129, 128,
	127, 126, 125, 164, 124, 43, 943, 44, 3299, 45,
	156, 46, 146, 145, 165, 3628, 3629, 147, 149, 151,
	148, 153, 143, 2830, 1853, 1821, 141, 144, 1561, 142,
	140, 56, 100, 115, 1854, 1855, 17, 24, 4, 0,
	0, 0, 2294, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 168, 0, 0, 0, 0, 0,
	1820, 1167, 1166, 1176, 1177, 1169, 1170, 1171, 1172, 1173,
	1174, 1175, 1168, 0, 0, 1828, 1167, 1166, 1176, 1177,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1168, 0, 945,
	0, 2041, 944, 0, 0, 0, 0, 1202, 0, 0,
	0, 0, 0, 0, 0, 1878, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 1167, 1166, 1176, 1177, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1168, 0, 0, 929,
	120, 121, 0, 122, 123, 0, 0, 905, 0, 0,
	0, 0, 1844, 0, 0, 0, 0, 0, 0, 0,
	2132, 2133, 2134, 0, 0, 3526, 0, 0, 0, 0,
	0, 0, 0, 0, 907, 2150, 2151, 2152, 2153, 1167,
	1166, 1176, 1177, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 162, 172, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 1811, 1813, 1810, 0, 1807, 0, 0,
	0, 0, 1832, 161, 155, 154, 0, 928, 927, 0,
	57, 3594, 0, 1838, 0, 0, 0, 0, 0, 0,
	0, 1823, 0, 1806, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 1826, 1860, 0, 0, 1827, 1829, 1831,
	902, 1833, 1834, 1835, 1839, 1840, 1841, 1843, 1846, 1847,
	1848, 906, 938, 0, 0, 0, 0, 0, 1836, 1845,
	1837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1815, 157, 158, 159, 0, 934, 0, 0, 3594, 1153,
	1154, 1155, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1852, 0, 0, 0, 117, 0, 0, 0,
	1638, 0, 166, 0, 0, 0, 117, 0, 0, 1417,
	0, 935, 939, 0, 0, 0, 0, 0, 1808, 1809,
	0, 0, 111, 0, 1920, 0, 160, 3594, 112, 0,
	0, 923, 0, 921, 925, 942, 1849, 0, 0, 922,
	919, 918, 0, 924, 909, 910, 908, 911, 912, 913,
	914, 0, 940, 1825, 941, 0, 0, 0, 1638, 0,
	1824, 0, 0, 0, 3689, 936, 937, 0, 0, 1851,
	0, 0, 0, 0, 1812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1842, 113, 0, 0, 0, 0,
	0, 0, 0, 1830, 0, 0, 0, 0, 50, 0,
	0, 0, 932, 0, 1853, 1821, 1857, 1856, 931, 0,
	0, 0, 0, 0, 1854, 1855, 0, 0, 0, 0,
	0, 1878, 1878, 1878, 1878, 0, 0, 0, 0, 0,
	0, 0, 0, 1878, 0, 0, 0, 0, 0, 0,
	1820, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	0, 0, 0, 0, 0, 1828, 0, 0, 0, 1817,
	0, 0, 0, 1634, 0, 0, 0, 0, 0, 1631,
	0, 0, 0, 1633, 1630, 1632, 1636, 1637, 0, 0,
	0, 1635, 169, 170, 0, 171, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 930, 0,
	0, 1859, 0, 0, 1858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 1634, 1844, 0, 117, 0, 0, 1631, 0, 0,
	0, 1633, 1630, 1632, 1636, 1637, 0, 0, 0, 1635,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 2565, 0, 0, 114, 39,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1811, 2589, 1810, 0, 2588, 0, 0,
	0, 0, 1832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1838, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1641, 1642, 1643, 1644, 1645,
	1646, 1639, 1640, 1826, 1860, 0, 0, 1827, 1829, 1831,
	0, 1833, 1834, 1835, 1839, 1840, 1841, 1843, 1846, 1847,
	1848, 0, 0, 0, 0, 0, 0, 0, 1836, 1845,
	1837, 0, 0, 0, 0, 0, 0, 0, 1043, 0,
	1815, 0, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
	1627, 1628, 1629, 1641, 1642, 1643, 1644, 1645, 1646, 1639,
	1640, 0, 1852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 117, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 1878, 0, 2740, 2741, 1808, 1809,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 0, 1849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1825, 0, 0, 0, 0, 0, 0,
	1824, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1842, 0, 0, 0, 1029, 0,
	0, 0, 0, 1830, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 1857, 1856, 1051, 1055,
	1057, 1059, 1061, 1062, 1064, 0, 1069, 1065, 1066, 1067,
	1068, 0, 1046, 1047, 1048, 1049, 1027, 1028, 1052, 0,
	1030, 0, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1042, 1044, 1040, 1041, 1050, 0, 0, 0, 0,
	0, 0, 0, 1054, 1056, 1058, 1060, 1063, 0, 1817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 1859, 0, 0, 1858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1029, 0, 0, 0, 1019, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2905, 1051, 1055, 1057, 1059, 1061, 1062, 1064,
	0, 1069, 1065, 1066, 1067, 1068, 0, 1046, 1047, 1048,
	1049, 1027, 1028, 1052, 0, 1030, 0, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1040, 1041,
	1050, 0, 0, 0, 0, 0, 0, 0, 1054, 1056,
	1058, 1060, 1063, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1029, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 117, 1045, 0, 0, 2447,
	2448, 0, 1051, 1055, 1057, 1059, 1061, 1062, 1064, 0,
	1069, 1065, 1066, 1067, 1068, 0, 1046, 1047, 1048, 1049,
	1027, 1028, 1052, 0, 1030, 0, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1042, 1044, 1040, 1041, 1050,
	0, 0, 1878, 0, 0, 0, 0, 1054, 1056, 1058,
	1060, 1063, 0, 1920, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1045, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 0, 0, 0, 0,
	3055, 361, 0, 485, 518, 507, 590, 473, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 0, 301, 0,
	0, 331, 522, 504, 514, 505, 490, 491, 492, 499,
	311, 493, 494, 495, 466, 496, 467, 497, 498, 745,
	521, 472, 392, 345, 539, 538, 0, 0, 812, 820,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	700, 0, 0, 735, 789, 788, 722, 732, 0, 0,
	274, 197, 468, 586, 469, 723, 0, 724, 728, 731,
	727, 725, 726, 0, 804, 0, 0, 0, 0, 0,
	0, 692, 704, 0, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 702,
	0, 0, 0, 0, 755, 0, 703, 0, 0, 750,
	729, 733, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 730, 753, 757, 295, 826, 751, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 827, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 1053, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 748, 0, 583, 0, 424, 0,
	0, 810, 0, 0, 0, 396, 117, 0, 328, 0,
	0, 0, 752, 0, 382, 363, 823, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 526, 0, 443, 604, 605, 606,
	452, 457, 458, 459, 461, 462, 463, 464, 527, 544,
	511, 481, 445, 535, 478, 482, 483, 547, 1662, 1661,
	1663, 436, 329, 330, 0, 308, 256, 257, 600, 808,
	359, 549, 582, 474, 0, 822, 803, 805, 806, 809,
	813, 814, 815, 816, 817, 819, 821, 825, 599, 0,
	528, 543, 602, 542, 596, 365, 0, 386, 540, 487,
	0, 532, 506, 0, 533, 502, 537, 0, 476, 3332,
	393, 417, 429, 446, 449, 477, 562, 563, 564, 261,
	448, 566, 567, 568, 569, 570, 571, 572, 565, 824,
	509, 486, 512, 428, 489, 488, 0, 0, 523, 756,
	524, 525, 349, 350, 351, 352, 811, 550, 279, 447,
	375, 0, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 515, 516, 513, 607, 0, 573, 574, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 517, 454, 576, 579, 577, 578, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 503, 530, 833, 807, 832, 834, 835,
	831, 836, 837, 818, 712, 0, 763, 829, 828, 830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 558, 557, 556, 555, 554, 553, 552, 551, 0,
	0, 500, 403, 288, 250, 284, 285, 292, 597, 594,
	407, 598, 0, 258, 480, 332, 0, 373, 306, 545,
	546, 796, 770, 771, 772, 709, 773, 767, 768, 710,
	769, 797, 761, 793, 794, 737, 764, 774, 792, 775,
	795, 798, 799, 838, 839, 781, 765, 222, 840, 778,
	800, 791, 790, 776, 762, 801, 802, 744, 739, 779,
	780, 766, 784, 785, 786, 711, 758, 759, 760, 782,
	783, 740, 741, 742, 743, 0, 0, 0, 432, 433,
	434, 456, 418, 479, 595, 0, 0, 0, 0, 0,
	0, 0, 529, 541, 575, 0, 584, 585, 587, 589,
	787, 754, 601, 470, 471, 581, 0, 0, 0, 0,
	361, 0, 485, 518, 507, 590, 473, 0, 0, 0,
	0, 0, 0, 707, 0, 0, 0, 301, 1712, 0,
	331, 522, 504, 514, 505, 490, 491, 492, 499, 311,
	493, 494, 495, 466, 496, 467, 497, 498, 745, 521,
	472, 392, 345, 539, 538, 0, 0, 812, 820, 0,
	0, 0, 0, 0, 0, 0, 1902, 0, 0, 700,
	0, 0, 735, 789, 788, 722, 732, 0, 0, 274,
	197, 468, 586, 469, 723, 0, 724, 728, 731, 727,
	725, 726, 0, 804, 0, 0, 0, 0, 0, 0,
	692, 704, 0, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 702, 0,
	0, 0, 0, 755, 0, 703, 0, 0, 1903, 729,
	733, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 730, 753, 757, 295, 826, 751, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 827, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 748, 0, 583, 0, 424, 0, 0,
	810, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 752, 0, 382, 363, 823, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 526, 0, 443, 604, 605, 606, 452,
	457, 458, 459, 461, 462, 463, 464, 527, 544, 511,
	481, 445, 535, 478, 482, 483, 547, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 600, 808, 359,
	549, 582, 474, 0, 822, 803, 805, 806, 809, 813,
	814, 815, 816, 817, 819, 821, 825, 599, 0, 528,
	543, 602, 542, 596, 365, 0, 386, 540, 487, 0,
	532, 506, 0, 533, 502, 537, 0, 476, 0, 393,
	417, 429, 446, 449, 477, 562, 563, 564, 261, 448,
	566, 567, 568, 569, 570, 571, 572, 565, 824, 509,
	486, 512, 428, 489, 488, 0, 0, 523, 756, 524,
	525, 349, 350, 351, 352, 811, 550, 279, 447, 375,
	0, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	515, 516, 513, 607, 0, 573, 574, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 517, 454, 576, 579, 577, 578, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 503, 530, 833, 807, 832, 834, 835, 831,
	836, 837, 818, 712, 0, 763, 829, 828, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 557, 556, 555, 554, 553, 552, 551, 0, 0,
	500, 403, 288, 250, 284, 285, 292, 597, 594, 407,
	598, 0, 258, 480, 332, 0, 373, 306, 545, 546,
	796, 770, 771, 772, 709, 773, 767, 768, 710, 769,
	797, 761, 793, 794, 737, 764, 774, 792, 775, 795,
	798, 799, 838, 839, 781, 765, 222, 840, 778, 800,
	791, 790, 776, 762, 801, 802, 744, 739, 779, 780,
	766, 784, 785, 786, 711, 758, 759, 760, 782, 783,
	740, 741, 742, 743, 0, 0, 0, 432, 433, 434,
	456, 418, 479, 595, 0, 0, 0, 0, 0, 0,
	0, 529, 541, 575, 0, 584, 585, 587, 589, 787,
	0, 601, 470, 471, 581, 174, 754, 0, 0, 0,
	0, 0, 0, 0, 0, 361, 0, 485, 518, 507,
	590, 473, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 0, 301, 0, 0, 331, 522, 504, 514, 505,
	490, 491, 492, 499, 311, 493, 494, 495, 466, 496,
	467, 497, 498, 1187, 521, 472, 392, 345, 539, 538,
	0, 0, 812, 820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 735, 789, 788,
	722, 732, 0, 0, 274, 197, 468, 586, 469, 723,
	0, 724, 728, 731, 727, 725, 726, 0, 804, 0,
	0, 0, 0, 0, 0, 692, 704, 0, 708, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 701, 702, 0, 0, 0, 0, 755, 0,
	703, 0, 0, 750, 729, 733, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 730, 753, 757, 295,
	826, 751, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 827, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 748, 0,
	583, 0, 424, 0, 0, 810, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 752, 0, 382, 363,
	823, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 526, 0,
	443, 604, 605, 606, 452, 457, 458, 459, 461, 462,
	463, 464, 527, 544, 511, 481, 445, 535, 478, 482,
	483, 547, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 600, 808, 359, 549, 582, 474, 0, 822,
	803, 805, 806, 809, 813, 814, 815, 816, 817, 819,
	821, 825, 599, 0, 528, 543, 602, 542, 596, 365,
	0, 386, 540, 487, 0, 532, 506, 0, 533, 502,
	537, 0, 476, 0, 393, 417, 429, 446, 449, 477,
	562, 563, 564, 261, 448, 566, 567, 568, 569, 570,
	571, 572, 565, 824, 509, 486, 512, 428, 489, 488,
	0, 0, 523, 756, 524, 525, 349, 350, 351, 352,
	811, 550, 279, 447, 375, 0, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 516, 513, 607, 0,
	573, 574, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 517, 454, 576,
	579, 577, 578, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 503, 530, 833,
	807, 832, 834, 835, 831, 836, 837, 818, 712, 0,
	763, 829, 828, 830, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 558, 557, 556, 555, 554,
	553, 552, 551, 0, 0, 500, 403, 288, 250, 284,
	285, 292, 597, 594, 407, 598, 0, 258, 480, 332,
	139, 373, 306, 545, 546, 796, 770, 771, 772, 709,
	773, 767, 768, 710, 769, 797, 761, 793, 794, 737,
	764, 774, 792, 775, 795, 798, 799, 838, 839, 781,
	765, 222, 840, 778, 800, 791, 790, 776, 762, 801,
	802, 744, 739, 779, 780, 766, 784, 785, 786, 711,
	758, 759, 760, 782, 783, 740, 741, 742, 743, 0,
	0, 0, 432, 433, 434, 456, 418, 479, 595, 0,
	0, 0, 0, 0, 0, 0, 529, 541, 575, 0,
	584, 585, 587, 589, 787, 754, 601, 470, 471, 581,
	0, 0, 0, 0, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 707, 0, 0,
	0, 301, 3688, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 745, 521, 472, 392, 345, 539, 538, 0,
	0, 812, 820, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 735, 789, 788, 722,
	732, 0, 0, 274, 197, 468, 586, 469, 723, 0,
	724, 728, 731, 727, 725, 726, 0, 804, 0, 0,
	0, 0, 0, 0, 692, 704, 0, 708, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 702, 0, 0, 0, 0, 755, 0, 703,
	0, 0, 750, 729, 733, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 730, 753, 757, 295, 826,
	751, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 827, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 748, 0, 583,
	0, 424, 0, 0, 810, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 752, 0, 382, 363, 823,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 808, 359, 549, 582, 474, 0, 822, 803,
	805, 806, 809, 813, 814, 815, 816, 817, 819, 821,
	825, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 824, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 756, 524, 525, 349, 350, 351, 352, 811,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 833, 807,
	832, 834, 835, 831, 836, 837, 818, 712, 0, 763,
	829, 828, 830, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 796, 770, 771, 772, 709, 773,
	767, 768, 710, 769, 797, 761, 793, 794, 737, 764,
	774, 792, 775, 795, 798, 799, 838, 839, 781, 765,
	222, 840, 778, 800, 791, 790, 776, 762, 801, 802,
	744, 739, 779, 780, 766, 784, 785, 786, 711, 758,
	759, 760, 782, 783, 740, 741, 742, 743, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 787, 754, 601, 470, 471, 581, 0,
	0, 0, 0, 361, 0, 485, 518, 507, 590, 473,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 0,
	301, 0, 0, 331, 522, 504, 514, 505, 490, 491,
	492, 499, 311, 493, 494, 495, 466, 496, 467, 497,
	498, 745, 521, 472, 392, 345, 539, 538, 0, 0,
	812, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 735, 789, 788, 722, 732,
	0, 0, 274, 197, 468, 586, 469, 723, 0, 724,
	728, 731, 727, 725, 726, 0, 804, 0, 0, 0,
	0, 0, 0, 692, 704, 0, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	701, 702, 0, 0, 0, 0, 755, 0, 703, 0,
	0, 750, 729, 733, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 730, 753, 757, 295, 826, 751,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 827, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 748, 0, 583, 0,
	424, 0, 0, 810, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 752, 0, 382, 363, 823, 3595,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 526, 0, 443, 604,
	605, 606, 452, 457, 458, 459, 461, 462, 463, 464,
	527, 544, 511, 481, 445, 535, 478, 482, 483, 547,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	600, 808, 359, 549, 582, 474, 0, 822, 803, 805,
	806, 809, 813, 814, 815, 816, 817, 819, 821, 825,
	599, 0, 528, 543, 602, 542, 596, 365, 0, 386,
	540, 487, 0, 532, 506, 0, 533, 502, 537, 0,
	476, 0, 393, 417, 429, 446, 449, 477, 562, 563,
	564, 261, 448, 566, 567, 568, 569, 570, 571, 572,
	565, 824, 509, 486, 512, 428, 489, 488, 0, 0,
	523, 756, 524, 525, 349, 350, 351, 352, 811, 550,
	279, 447, 375, 0, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 515, 516, 513, 607, 0, 573, 574,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 517, 454, 576, 579, 577,
	578, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 503, 530, 833, 807, 832,
	834, 835, 831, 836, 837, 818, 712, 0, 763, 829,
	828, 830, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 558, 557, 556, 555, 554, 553, 552,
	551, 0, 0, 500, 403, 288, 250, 284, 285, 292,
	597, 594, 407, 598, 0, 258, 480, 332, 0, 373,
	306, 545, 546, 796, 770, 771, 772, 709, 773, 767,
	768, 710, 769, 797, 761, 793, 794, 737, 764, 774,
	792, 775, 795, 798, 799, 838, 839, 781, 765, 222,
	840, 778, 800, 791, 790, 776, 762, 801, 802, 744,
	739, 779, 780, 766, 784, 785, 786, 711, 758, 759,
	760, 782, 783, 740, 741, 742, 743, 0, 0, 0,
	432, 433, 434, 456, 418, 479, 595, 0, 0, 0,
	0, 0, 0, 0, 529, 541, 575, 0, 584, 585,
	587, 589, 787, 754, 601, 470, 471, 581, 0, 0,
	0, 0, 361, 0, 485, 518, 507, 590, 473, 0,
	0, 0, 0, 0, 0, 707, 0, 0, 0, 301,
	1712, 0, 331, 522, 504, 514, 505, 490, 491, 492,
	499, 311, 493, 494, 495, 466, 496, 467, 497, 498,
	745, 521, 472, 392, 345, 539, 538, 0, 0, 812,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 735, 789, 788, 722, 732, 0,
	0, 274, 197, 468, 586, 469, 723, 0, 724, 728,
	731, 727, 725, 726, 0, 804, 0, 0, 0, 0,
	0, 0, 692, 704, 0, 708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	702, 0, 0, 0, 0, 755, 0, 703, 0, 0,
	750, 729, 733, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 730, 753, 757, 295, 826, 751, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 827, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 748, 0, 583, 0, 424,
	0, 0, 810, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 752, 0, 382, 363, 823, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 526, 0, 443, 604, 605,
	606, 452, 457, 458, 459, 461, 462, 463, 464, 527,
	544, 511, 481, 445, 535, 478, 482, 483, 547, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 600,
	808, 359, 549, 582, 474, 0, 822, 803, 805, 806,
	809, 813, 814, 815, 816, 817, 819, 821, 825, 599,
	0, 528, 543, 602, 542, 596, 365, 0, 386, 540,
	487, 0, 532, 506, 0, 533, 502, 537, 0, 476,
	0, 393, 417, 429, 446, 449, 477, 562, 563, 564,
	261, 448, 566, 567, 568, 569, 570, 571, 572, 565,
	824, 509, 486, 512, 428, 489, 488, 0, 0, 523,
	756, 524, 525, 349, 350, 351, 352, 811, 550, 279,
	447, 375, 0, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 515, 516, 513, 607, 0, 573, 574, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 517, 454, 576, 579, 577, 578,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 503, 530, 833, 807, 832, 834,
	835, 831, 836, 837, 818, 712, 0, 763, 829, 828,
	830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 558, 557, 556, 555, 554, 553, 552, 551,
	0, 0, 500, 403, 288, 250, 284, 285, 292, 597,
	594, 407, 598, 0, 258, 480, 332, 0, 373, 306,
	545, 546, 796, 770, 771, 772, 709, 773, 767, 768,
	710, 769, 797, 761, 793, 794, 737, 764, 774, 792,
	775, 795, 798, 799, 838, 839, 781, 765, 222, 840,
	778, 800, 791, 790, 776, 762, 801, 802, 744, 739,
	779, 780, 766, 784, 785, 786, 711, 758, 759, 760,
	782, 783, 740, 741, 742, 743, 0, 0, 0, 432,
	433, 434, 456, 418, 479, 595, 0, 0, 0, 0,
	0, 0, 0, 529, 541, 575, 0, 584, 585, 587,
	589, 787, 754, 601, 470, 471, 581, 0, 0, 0,
	0, 361, 0, 485, 518, 507, 590, 473, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 0, 301, 0,
	0, 331, 522, 504, 514, 505, 490, 491, 492, 499,
	311, 493, 494, 495, 466, 496, 467, 497, 498, 745,
	521, 472, 392, 345, 539, 538, 0, 0, 812, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	700, 0, 0, 735, 789, 788, 722, 732, 0, 0,
	274, 197, 468, 586, 469, 723, 0, 724, 728, 731,
	727, 725, 726, 0, 804, 0, 0, 0, 0, 0,
	0, 692, 704, 0, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 702,
	1447, 0, 0, 0, 755, 0, 703, 0, 0, 750,
	729, 733, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 730, 753, 757, 295, 826, 751, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 827, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 748, 0, 583, 0, 424, 0,
	0, 810, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 752, 0, 382, 363, 823, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 526, 0, 443, 604, 605, 606,
	452, 457, 458, 459, 461, 462, 463, 464, 527, 544,
	511, 481, 445, 535, 478, 482, 483, 547, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 600, 808,
	359, 549, 582, 474, 0, 822, 803, 805, 806, 809,
	813, 814, 815, 816, 817, 819, 821, 825, 599, 0,
	528, 543, 602, 542, 596, 365, 0, 386, 540, 487,
	0, 532, 506, 0, 533, 502, 537, 0, 476, 0,
	393, 417, 429, 446, 449, 477, 562, 563, 564, 261,
	448, 566, 567, 568, 569, 570, 571, 572, 565, 824,
	509, 486, 512, 428, 489, 488, 0, 0, 523, 756,
	524, 525, 349, 350, 351, 352, 811, 550, 279, 447,
	375, 0, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 515, 516, 513, 607, 0, 573, 574, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 517, 454, 576, 579, 577, 578, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 503, 530, 833, 807, 832, 834, 835,
	831, 836, 837, 818, 712, 0, 763, 829, 828, 830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 558, 557, 556, 555, 554, 553, 552, 551, 0,
	0, 500, 403, 288, 250, 284, 285, 292, 597, 594,
	407, 598, 0, 258, 480, 332, 0, 373, 306, 545,
	546, 796, 770, 771, 772, 709, 773, 767, 768, 710,
	769, 797, 761, 793, 794, 737, 764, 774, 792, 775,
	795, 798, 799, 838, 839, 781, 765, 222, 840, 778,
	800, 791, 790, 776, 762, 801, 802, 744, 739, 779,
	780, 766, 784, 785, 786, 711, 758, 759, 760, 782,
	783, 740, 741, 742, 743, 0, 0, 0, 432, 433,
	434, 456, 418, 479, 595, 0, 0, 0, 0, 0,
	0, 0, 529, 541, 575, 0, 584, 585, 587, 589,
	787, 0, 601, 470, 471, 581, 754, 0, 0, 2064,
	0, 0, 0, 0, 0, 361, 0, 485, 518, 507,
	590, 473, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 0, 301, 0, 0, 331, 522, 504, 514, 505,
	490, 491, 492, 499, 311, 493, 494, 495, 466, 496,
	467, 497, 498, 745, 521, 472, 392, 345, 539, 538,
	0, 0, 812, 820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 735, 789, 788,
	722, 732, 0, 0, 274, 197, 468, 586, 469, 723,
	0, 724, 728, 731, 727, 725, 726, 0, 804, 0,
	0, 0, 0, 0, 0, 692, 704, 0, 708, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 701, 702, 0, 0, 0, 0, 755, 0,
	703, 0, 0, 750, 729, 733, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 730, 753, 757, 295,
	826, 751, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 827, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 748, 0,
	583, 0, 424, 0, 0, 810, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 752, 0, 382, 363,
	823, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 526, 0,
	443, 604, 605, 606, 452, 457, 458, 459, 461, 462,
	463, 464, 527, 544, 511, 481, 445, 535, 478, 482,
	483, 547, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 600, 808, 359, 549, 582, 474, 0, 822,
	803, 805, 806, 809, 813, 814, 815, 816, 817, 819,
	821, 825, 599, 0, 528, 543, 602, 542, 596, 365,
	0, 386, 540, 487, 0, 532, 506, 0, 533, 502,
	537, 0, 476, 0, 393, 417, 429, 446, 449, 477,
	562, 563, 564, 261, 448, 566, 567, 568, 569, 570,
	571, 572, 565, 824, 509, 486, 512, 428, 489, 488,
	0, 0, 523, 756, 524, 525, 349, 350, 351, 352,
	811, 550, 279, 447, 375, 0, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 516, 513, 607, 0,
	573, 574, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 517, 454, 576,
	579, 577, 578, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 503, 530, 833,
	807, 832, 834, 835, 831, 836, 837, 818, 712, 0,
	763, 829, 828, 830, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 558, 557, 556, 555, 554,
	553, 552, 551, 0, 0, 500, 403, 288, 250, 284,
	285, 292, 597, 594, 407, 598, 0, 258, 480, 332,
	0, 373, 306, 545, 546, 796, 770, 771, 772, 709,
	773, 767, 768, 710, 769, 797, 761, 793, 794, 737,
	764, 774, 792, 775, 795, 798, 799, 838, 839, 781,
	765, 222, 840, 778, 800, 791, 790, 776, 762, 801,
	802, 744, 739, 779, 780, 766, 784, 785, 786, 711,
	758, 759, 760, 782, 783, 740, 741, 742, 743, 0,
	0, 0, 432, 433, 434, 456, 418, 479, 595, 0,
	0, 0, 0, 0, 0, 0, 529, 541, 575, 0,
	584, 585, 587, 589, 787, 754, 601, 470, 471, 581,
	0, 0, 0, 0, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 707, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 745, 521, 472, 392, 345, 539, 538, 0,
	0, 812, 820, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 735, 789, 788, 722,
	732, 0, 0, 274, 197, 468, 586, 469, 723, 0,
	724, 728, 731, 727, 725, 726, 0, 804, 0, 0,
	0, 0, 0, 0, 692, 704, 0, 708, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 702, 1705, 0, 0, 0, 755, 0, 703,
	0, 0, 750, 729, 733, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 730, 753, 757, 295, 826,
	751, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 827, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 748, 0, 583,
	0, 424, 0, 0, 810, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 752, 0, 382, 363, 823,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 808, 359, 549, 582, 474, 0, 822, 803,
	805, 806, 809, 813, 814, 815, 816, 817, 819, 821,
	825, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 824, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 756, 524, 525, 349, 350, 351, 352, 811,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 833, 807,
	832, 834, 835, 831, 836, 837, 818, 712, 0, 763,
	829, 828, 830, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 796, 770, 771, 772, 709, 773,
	767, 768, 710, 769, 797, 761, 793, 794, 737, 764,
	774, 792, 775, 795, 798, 799, 838, 839, 781, 765,
	222, 840, 778, 800, 791, 790, 776, 762, 801, 802,
	744, 739, 779, 780, 766, 784, 785, 786, 711, 758,
	759, 760, 782, 783, 740, 741, 742, 743, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 787, 754, 601, 470, 471, 581, 0,
	0, 0, 0, 361, 0, 485, 518, 507, 590, 473,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 0,
	301, 0, 0, 331, 522, 504, 514, 505, 490, 491,
	492, 499, 311, 493, 494, 495, 466, 496, 467, 497,
	498, 745, 521, 472, 392, 345, 539, 538, 0, 0,
	812, 820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 735, 789, 788, 722, 732,
	0, 0, 274, 197, 468, 586, 469, 723, 0, 724,
	728, 731, 727, 725, 726, 0, 804, 0, 0, 0,
	0, 0, 0, 692, 704, 0, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	701, 702, 0, 0, 0, 0, 755, 0, 703, 0,
	0, 750, 729, 733, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 730, 753, 757, 295, 826, 751,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 827, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 748, 0, 583, 0,
	424, 0, 0, 810, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 752, 0, 382, 363, 823, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 526, 0, 443, 604,
	605, 606, 452, 457, 458, 459, 461, 462, 463, 464,
	527, 544, 511, 481, 445, 535, 478, 482, 483, 547,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	600, 808, 359, 549, 582, 474, 0, 822, 803, 805,
	806, 809, 813, 814, 815, 816, 817, 819, 821, 825,
	599, 0, 528, 543, 602, 542, 596, 365, 0, 386,
	540, 487, 0, 532, 506, 0, 533, 502, 537, 0,
	476, 0, 393, 417, 429, 446, 449, 477, 562, 563,
	564, 261, 448, 566, 567, 568, 569, 570, 571, 572,
	565, 824, 509, 486, 512, 428, 489, 488, 0, 0,
	523, 756, 524, 525, 349, 350, 351, 352, 811, 550,
	279, 447, 375, 0, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 515, 516, 513, 607, 0, 573, 574,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 517, 454, 576, 579, 577,
	578, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 503, 530, 833, 807, 832,
	834, 835, 831, 836, 837, 818, 712, 0, 763, 829,
	828, 830, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 558, 557, 556, 555, 554, 553, 552,
	551, 0, 0, 500, 403, 288, 250, 284, 285, 292,
	597, 594, 407, 598, 0, 258, 480, 332, 0, 373,
	306, 545, 546, 796, 770, 771, 772, 709, 773, 767,
	768, 710, 769, 797, 761, 793, 794, 737, 764, 774,
	792, 775, 795, 798, 799, 838, 839, 781, 765, 222,
	840, 778, 800, 791, 790, 776, 762, 801, 802, 744,
	739, 779, 780, 766, 784, 785, 786, 711, 758, 759,
	760, 782, 783, 740, 741, 742, 743, 0, 0, 0,
	432, 433, 434, 456, 418, 479, 595, 0, 0, 0,
	0, 0, 0, 0, 529, 541, 575, 0, 584, 585,
	587, 589, 787, 754, 601, 470, 471, 581, 0, 0,
	0, 0, 361, 0, 485, 518, 507, 590, 473, 0,
	0, 0, 0, 0, 0, 707, 0, 0, 0, 301,
	0, 0, 331, 522, 504, 514, 505, 490, 491, 492,
	499, 311, 493, 494, 495, 466, 496, 467, 497, 498,
	745, 521, 472, 392, 345, 539, 538, 0, 0, 812,
	820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 735, 789, 788, 722, 732, 0,
	0, 274, 197, 468, 586, 469, 2499, 0, 2500, 728,
	731, 727, 725, 726, 0, 804, 0, 0, 0, 0,
	0, 0, 692, 704, 0, 708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	702, 0, 0, 0, 0, 755, 0, 703, 0, 0,
	750, 729, 733, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 730, 753, 757, 295, 826, 751, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 827, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 748, 0, 583, 0, 424,
	0, 0, 810, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 752, 0, 382, 363, 823, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 526, 0, 443, 604, 605,
	606, 452, 457, 458, 459, 461, 462, 463, 464, 527,
	544, 511, 481, 445, 535, 478, 482, 483, 547, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 600,
	808, 359, 549, 582, 474, 0, 822, 803, 805, 806,
	809, 813, 814, 815, 816, 817, 819, 821, 825, 599,
	0, 528, 543, 602, 542, 596, 365, 0, 386, 540,
	487, 0, 532, 506, 0, 533, 502, 537, 0, 476,
	0, 393, 417, 429, 446, 449, 477, 562, 563, 564,
	261, 448, 566, 567, 568, 569, 570, 571, 572, 565,
	824, 509, 486, 512, 428, 489, 488, 0, 0, 523,
	756, 524, 525, 349, 350, 351, 352, 811, 550, 279,
	447, 375, 0, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 515, 516, 513, 607, 0, 573, 574, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 517, 454, 576, 579, 577, 578,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 503, 530, 833, 807, 832, 834,
	835, 831, 836, 837, 818, 712, 0, 763, 829, 828,
	830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 558, 557, 556, 555, 554, 553, 552, 551,
	0, 0, 500, 403, 288, 250, 284, 285, 292, 597,
	594, 407, 598, 0, 258, 480, 332, 0, 373, 306,
	545, 546, 796, 770, 771, 772, 709, 773, 767, 768,
	710, 769, 797, 761, 793, 794, 737, 764, 774, 792,
	775, 795, 798, 799, 838, 839, 781, 765, 222, 840,
	778, 800, 791, 790, 776, 762, 801, 802, 744, 739,
	779, 780, 766, 784, 785, 786, 711, 758, 759, 760,
	782, 783, 740, 741, 742, 743, 0, 0, 0, 432,
	433, 434, 456, 418, 479, 595, 0, 0, 0, 0,
	0, 0, 0, 529, 541, 575, 0, 584, 585, 587,
	589, 787, 754, 601, 470, 471, 581, 0, 0, 0,
	0, 361, 0, 485, 518, 507, 590, 473, 0, 0,
	1579, 0, 0, 0, 707, 0, 0, 0, 301, 0,
	0, 331, 522, 504, 514, 505, 490, 491, 492, 499,
	311, 493, 494, 495, 466, 496, 467, 497, 498, 745,
	521, 472, 392, 345, 539, 538, 0, 0, 812, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	700, 0, 0, 735, 789, 788, 722, 732, 0, 0,
	274, 197, 468, 586, 469, 723, 0, 724, 728, 731,
	727, 725, 726, 0, 804, 0, 0, 0, 0, 0,
	0, 0, 704, 0, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 702,
	0, 0, 0, 0, 755, 0, 703, 0, 0, 750,
	729, 733, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 730, 753, 757, 295, 826, 751, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 827, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 748, 0, 583, 0, 424, 0,
	0, 810, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 752, 0, 382, 363, 823, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 1580, 1581, 526, 0, 443, 604, 605, 606,
	452, 457, 458, 459, 461, 462, 463, 464, 527, 544,
	511, 481, 445, 535, 478, 482, 483, 547, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 600, 808,
	359, 549, 582, 474, 0, 822, 803, 805, 806, 809,
	813, 814, 815, 816, 817, 819, 821, 825, 599, 0,
	528, 543, 602, 542, 596, 365, 0, 386, 540, 487,
	0, 532, 506, 0, 533, 502, 537, 0, 476, 0,
	393, 417, 429, 446, 449, 477, 562, 563, 564, 261,
	448, 566, 567, 568, 569, 570, 571, 572, 565, 824,
	509, 486, 512, 428, 489, 488, 0, 0, 523, 756,
	524, 525, 349, 350, 351, 352, 811, 550, 279, 447,
	375, 0, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 515, 516, 513, 607, 0, 573, 574, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 517, 454, 576, 579, 577, 578, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 503, 530, 833, 807, 832, 834, 835,
	831, 836, 837, 818, 712, 0, 763, 829, 828, 830,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 558, 557, 556, 555, 554, 553, 552, 551, 0,
	0, 500, 403, 288, 250, 284, 285, 292, 597, 594,
	407, 598, 0, 258, 480, 332, 0, 373, 306, 545,
	546, 796, 770, 771, 772, 709, 773, 767, 768, 710,
	769, 797, 761, 793, 794, 737, 764, 774, 792, 775,
	795, 798, 799, 838, 839, 781, 765, 222, 840, 778,
	800, 791, 790, 776, 762, 801, 802, 744, 739, 779,
	780, 766, 784, 785, 786, 711, 758, 759, 760, 782,
	783, 740, 741, 742, 743, 0, 0, 0, 432, 433,
	434, 456, 418, 479, 595, 0, 0, 0, 0, 0,
	0, 0, 529, 541, 575, 0, 584, 585, 587, 589,
	787, 754, 601, 470, 471, 581, 0, 0, 0, 0,
	361, 0, 485, 518, 507, 590, 473, 0, 0, 0,
	0, 0, 0, 707, 0, 0, 0, 301, 0, 0,
	331, 522, 504, 514, 505, 490, 491, 492, 499, 311,
	493, 494, 495, 466, 496, 467, 497, 498, 745, 521,
	472, 392, 345, 539, 538, 0, 0, 812, 820, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 700,
	0, 0, 735, 789, 788, 722, 732, 0, 0, 274,
	197, 468, 586, 469, 723, 0, 724, 728, 731, 727,
	725, 726, 0, 804, 0, 0, 0, 0, 0, 0,
	0, 704, 0, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 702, 0,
	0, 0, 0, 755, 0, 703, 0, 0, 750, 729,
	733, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 730, 753, 757, 295, 826, 751, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 827, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 748, 0, 583, 0, 424, 0, 0,
	810, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 752, 0, 382, 363, 823, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 526, 0, 443, 604, 605, 606, 452,
	457, 458, 459, 461, 462, 463, 464, 527, 544, 511,
	481, 445, 535, 478, 482, 483, 547, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 600, 808, 359,
	549, 582, 474, 0, 822, 803, 805, 806, 809, 813,
	814, 815, 816, 817, 819, 821, 825, 599, 0, 528,
	543, 602, 542, 596, 365, 0, 386, 540, 487, 0,
	532, 506, 0, 533, 502, 537, 0, 476, 0, 393,
	417, 429, 446, 449, 477, 562, 563, 564, 261, 448,
	566, 567, 568, 569, 570, 571, 572, 565, 824, 509,
	486, 512, 428, 489, 488, 0, 0, 523, 756, 524,
	525, 349, 350, 351, 352, 811, 550, 279, 447, 375,
	0, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	515, 516, 513, 607, 0, 573, 574, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 517, 454, 576, 579, 577, 578, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 503, 530, 833, 807, 832, 834, 835, 831,
	836, 837, 818, 712, 0, 763, 829, 828, 830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 557, 556, 555, 554, 553, 552, 551, 0, 0,
	500, 403, 288, 250, 284, 285, 292, 597, 594, 407,
	598, 0, 258, 480, 332, 0, 373, 306, 545, 546,
	796, 770, 771, 772, 709, 773, 767, 768, 710, 769,
	797, 761, 793, 794, 737, 764, 774, 792, 775, 795,
	798, 799, 838, 839, 781, 765, 222, 840, 778, 800,
	791, 790, 776, 762, 801, 802, 744, 739, 779, 780,
	766, 784, 785, 786, 711, 758, 759, 760, 782, 783,
	740, 741, 742, 743, 0, 0, 0, 432, 433, 434,
	456, 418, 479, 595, 0, 0, 0, 0, 0, 0,
	0, 529, 541, 575, 0, 584, 585, 587, 589, 787,
	754, 601, 470, 471, 581, 0, 0, 0, 0, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 745, 521, 472,
	392, 345, 539, 538, 0, 0, 812, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 735, 789, 788, 722, 732, 0, 0, 274, 197,
	468, 586, 469, 723, 0, 724, 728, 731, 727, 725,
	726, 0, 804, 0, 0, 0, 0, 0, 0, 692,
	704, 0, 708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 702, 0, 0,
	0, 0, 755, 0, 703, 0, 0, 750, 729, 733,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	730, 753, 757, 295, 826, 751, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 827, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 748, 0, 583, 0, 424, 0, 0, 810,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	752, 0, 382, 363, 823, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 808, 359, 549,
	582, 474, 0, 822, 803, 805, 806, 809, 813, 814,
	815, 816, 817, 819, 821, 825, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 824, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 756, 524, 525,
	349, 350, 351, 352, 811, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 833, 807, 832, 834, 835, 831, 836,
	837, 818, 712, 0, 763, 829, 828, 830, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 796,
	770, 771, 772, 709, 773, 767, 768, 710, 769, 797,
	761, 793, 794, 737, 764, 774, 792, 775, 795, 798,
	799, 838, 839, 781, 765, 222, 840, 778, 800, 791,
	790, 776, 762, 801, 802, 744, 739, 779, 780, 766,
	784, 785, 786, 711, 758, 759, 760, 782, 783, 740,
	741, 742, 743, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 787, 0,
	601, 470, 471, 581, 174, 51, 163, 138, 0, 0,
	0, 0, 0, 0, 361, 0, 485, 518, 507, 590,
	473, 0, 164, 0, 0, 0, 0, 0, 0, 156,
	0, 301, 0, 165, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 115, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 168, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	137, 162, 172, 0, 101, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 189, 0, 0, 0, 396, 0,
	0, 328, 161, 155, 154, 440, 0, 382, 363, 201,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	559, 560, 561, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 419, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 192, 531, 534,
	465, 202, 0, 528, 543, 501, 542, 203, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 113, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 200, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 374, 269, 407, 385, 0, 258, 480, 332, 139,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 204, 39, 190,
	193, 195, 194, 0, 49, 529, 541, 575, 5, 584,
	585, 587, 589, 588, 118, 205, 470, 471, 581, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 115, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 168, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 2198, 2201, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 2202, 424, 0, 0, 0,
	2197, 0, 2196, 396, 2194, 2199, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 2200,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 139, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1221, 0, 0, 196, 0, 0, 722,
	732, 0, 0, 274, 197, 468, 586, 469, 723, 0,
	724, 728, 731, 727, 725, 726, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 730, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 174,
	51, 163, 138, 0, 0, 0, 0, 0, 0, 361,
	624, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 630, 0, 0, 0, 0, 629, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 625, 627, 279, 447, 375, 638,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 139, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 2198, 2201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	2202, 424, 0, 0, 0, 2197, 0, 2196, 396, 2194,
	2199, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 2200, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1029, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 2347, 2350, 2351,
	2352, 2353, 2354, 2355, 0, 2360, 2356, 2357, 2358, 2359,
	0, 2342, 2343, 2344, 2345, 1027, 2326, 2348, 0, 2327,
	357, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336,
	2339, 2340, 2337, 2338, 2346, 369, 335, 370, 318, 347,
	346, 348, 1054, 1056, 1058, 1060, 1063, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	2341, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 2349, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 2219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	2218, 424, 0, 0, 0, 2224, 2221, 2223, 396, 0,
	2222, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 2216, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 2219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 2218, 424, 0, 0, 0,
	2224, 2221, 2223, 396, 0, 2222, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 1942, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 1943,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	1153, 1154, 1155, 1152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 174, 601, 470, 471, 581, 0,
	0, 0, 0, 0, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 115, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 1986, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 139,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 174, 601, 470, 471, 581, 0,
	0, 0, 0, 0, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 115, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 168, 1977, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 139,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 960, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 967, 968, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 955, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 945, 422, 268, 944, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 958, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 959, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 962, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 969, 956, 965,
	957, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	966, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 174,
	601, 470, 471, 581, 0, 0, 0, 0, 0, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 115, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1876, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 139, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 967, 968, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	945, 422, 268, 944, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 969, 1895, 965, 1896, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 966, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 2698, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 2701, 0, 0,
	2700, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 1414, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 1412,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1410, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 1408, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 1412, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1410, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3615, 0, 196, 789, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 1412, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1410, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 1412,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3273, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 2290, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 2292, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 2311, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 1412,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 789, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3634, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 3420, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 3545, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3269, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3435, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	3358, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 2914,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1876, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3028, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 2883,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2794, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 1412,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 2292, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 2623, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2006, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 0,
	601, 470, 471, 581, 361, 0, 485, 518, 507, 590,
	473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 522, 504, 514, 505, 490,
	491, 492, 499, 311, 493, 494, 495, 466, 496, 467,
	497, 498, 0, 521, 472, 392, 345, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 274, 197, 468, 586, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 583,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 603,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 526, 0, 443,
	604, 605, 606, 452, 457, 458, 459, 461, 462, 463,
	464, 527, 544, 511, 481, 445, 535, 478, 482, 483,
	547, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 600, 294, 359, 549, 582, 474, 0, 536, 475,
	484, 286, 508, 520, 519, 355, 435, 0, 531, 534,
	465, 599, 0, 528, 543, 602, 542, 596, 365, 0,
	386, 540, 487, 0, 532, 506, 0, 533, 502, 537,
	0, 476, 0, 393, 417, 429, 446, 449, 477, 562,
	563, 564, 261, 448, 566, 567, 568, 569, 570, 571,
	572, 565, 420, 509, 486, 512, 428, 489, 488, 0,
	0, 523, 444, 524, 525, 349, 350, 351, 352, 312,
	550, 279, 447, 375, 0, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 515, 516, 513, 607, 0, 573,
	574, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 517, 454, 576, 579,
	577, 578, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 503, 530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 556, 555, 554, 553,
	552, 551, 0, 0, 500, 403, 288, 250, 284, 285,
	292, 597, 594, 407, 598, 0, 258, 480, 332, 0,
	373, 306, 545, 546, 206, 207, 208, 209, 210, 211,
	212, 213, 251, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 548, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 252, 253,
	254, 255, 0, 0, 246, 247, 248, 249, 0, 0,
	0, 432, 433, 434, 456, 418, 479, 595, 0, 0,
	0, 0, 0, 0, 0, 529, 541, 575, 0, 584,
	585, 587, 589, 588, 0, 601, 470, 471, 581, 361,
	0, 485, 518, 507, 590, 473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	522, 504, 514, 505, 490, 491, 492, 499, 311, 493,
	494, 495, 466, 496, 467, 497, 498, 0, 521, 472,
	392, 345, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 2367, 0, 0, 0, 274, 197,
	468, 586, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 0, 0, 583, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 603, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 526, 0, 443, 604, 605, 606, 452, 457,
	458, 459, 461, 462, 463, 464, 527, 544, 511, 481,
	445, 535, 478, 482, 483, 547, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 600, 294, 359, 549,
	582, 474, 0, 536, 475, 484, 286, 508, 520, 519,
	355, 435, 0, 531, 534, 465, 599, 0, 528, 543,
	602, 542, 596, 365, 0, 386, 540, 487, 0, 532,
	506, 0, 533, 502, 537, 0, 476, 0, 393, 417,
	429, 446, 449, 477, 562, 563, 564, 261, 448, 566,
	567, 568, 569, 570, 571, 572, 565, 420, 509, 486,
	512, 428, 489, 488, 0, 0, 523, 444, 524, 525,
	349, 350, 351, 352, 312, 550, 279, 447, 375, 0,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	516, 513, 607, 0, 573, 574, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 517, 454, 576, 579, 577, 578, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 503, 530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 556, 555, 554, 553, 552, 551, 0, 0, 500,
	403, 288, 250, 284, 285, 292, 597, 594, 407, 598,
	0, 258, 480, 332, 0, 373, 306, 545, 546, 206,
	207, 208, 209, 210, 211, 212, 213, 251, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 548, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 252, 253, 254, 255, 0, 0, 246,
	247, 248, 249, 0, 0, 0, 432, 433, 434, 456,
	418, 479, 595, 0, 0, 0, 0, 0, 0, 0,
	529, 541, 575, 0, 584, 585, 587, 589, 588, 2156,
	601, 470, 471, 581, 0, 361, 0, 485, 518, 507,
	590, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 522, 504, 514, 505,
	490, 491, 492, 499, 311, 493, 494, 495, 466, 496,
	467, 497, 498, 0, 521, 472, 392, 345, 539, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 274, 197, 468, 586, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 0, 0,
	583, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	603, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 526, 0,
	443, 604, 605, 606, 452, 457, 458, 459, 461, 462,
	463, 464, 527, 544, 511, 481, 445, 535, 478, 482,
	483, 547, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 600, 294, 359, 549, 582, 474, 0, 536,
	475, 484, 286, 508, 520, 519, 355, 435, 0, 531,
	534, 465, 599, 0, 528, 543, 602, 542, 596, 365,
	0, 386, 540, 487, 0, 532, 506, 0, 533, 502,
	537, 0, 476, 0, 393, 417, 429, 446, 449, 477,
	562, 563, 564, 261, 448, 566, 567, 568, 569, 570,
	571, 572, 565, 420, 509, 486, 512, 428, 489, 488,
	0, 0, 523, 444, 524, 525, 349, 350, 351, 352,
	312, 550, 279, 447, 375, 0, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 516, 513, 607, 0,
	573, 574, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 517, 454, 576,
	579, 577, 578, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 503, 530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 558, 557, 556, 555, 554,
	553, 552, 551, 0, 0, 500, 403, 288, 250, 284,
	285, 292, 597, 594, 407, 598, 0, 258, 480, 332,
	0, 373, 306, 545, 546, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 548,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	253, 254, 255, 0, 0, 246, 247, 248, 249, 0,
	0, 0, 432, 433, 434, 456, 418, 479, 595, 0,
	0, 0, 0, 0, 0, 0, 529, 541, 575, 0,
	584, 585, 587, 589, 588, 0, 601, 470, 471, 581,
	361, 0, 485, 518, 507, 590, 473, 0, 1863, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 522, 504, 514, 505, 490, 491, 492, 499, 311,
	493, 494, 495, 466, 496, 467, 497, 498, 0, 521,
	472, 392, 345, 539, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 274,
	197, 468, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 583, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 603, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 526, 0, 443, 604, 605, 606, 452,
	457, 458, 459, 461, 462, 463, 464, 527, 544, 511,
	481, 445, 535, 478, 482, 483, 547, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 600, 294, 359,
	549, 582, 474, 0, 536, 475, 484, 286, 508, 520,
	519, 355, 435, 0, 531, 534, 465, 599, 0, 528,
	543, 602, 542, 596, 365, 0, 386, 540, 487, 0,
	532, 506, 0, 533, 502, 537, 0, 476, 0, 393,
	417, 429, 446, 449, 477, 562, 563, 564, 261, 448,
	566, 567, 568, 569, 570, 571, 572, 565, 420, 509,
	486, 512, 428, 489, 488, 0, 0, 523, 444, 524,
	525, 349, 350, 351, 352, 312, 550, 279, 447, 375,
	0, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	515, 516, 513, 607, 0, 573, 574, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 517, 454, 576, 579, 577, 578, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 503, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 557, 556, 555, 554, 553, 552, 551, 0, 0,
	500, 403, 288, 250, 284, 285, 292, 597, 594, 407,
	598, 0, 258, 480, 332, 0, 373, 306, 545, 546,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 548, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 253, 254, 255, 0, 0,
	246, 247, 248, 249, 0, 0, 0, 432, 433, 434,
	456, 418, 479, 595, 0, 0, 0, 0, 0, 0,
	0, 529, 541, 575, 0, 584, 585, 587, 589, 588,
	0, 601, 470, 471, 581, 361, 0, 485, 518, 507,
	590, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 522, 504, 514, 505,
	490, 491, 492, 499, 311, 493, 494, 495, 466, 496,
	467, 497, 498, 0, 521, 472, 392, 345, 539, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	1412, 0, 0, 0, 274, 197, 468, 586, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 0, 0,
	583, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	603, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	1769, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 526, 0,
	443, 604, 605, 606, 452, 457, 458, 459, 461, 462,
	463, 464, 527, 544, 511, 481, 445, 535, 478, 482,
	483, 547, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 600, 294, 359, 549, 582, 474, 0, 536,
	475, 484, 286, 508, 520, 519, 355, 435, 0, 531,
	534, 465, 599, 0, 528, 543, 602, 542, 596, 365,
	0, 386, 540, 487, 0, 532, 506, 0, 533, 502,
	537, 0, 476, 0, 393, 417, 429, 446, 449, 477,
	562, 563, 564, 261, 448, 566, 567, 568, 569, 570,
	571, 572, 565, 420, 509, 486, 512, 428, 489, 488,
	0, 0, 523, 444, 524, 525, 349, 350, 351, 352,
	312, 550, 279, 447, 375, 0, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 516, 513, 607, 0,
	573, 574, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 517, 454, 576,
	579, 577, 578, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 503, 530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 558, 557, 556, 555, 554,
	553, 552, 551, 0, 0, 500, 403, 288, 250, 284,
	285, 292, 597, 594, 407, 598, 0, 258, 480, 332,
	0, 373, 306, 545, 546, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 548,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	253, 254, 255, 0, 0, 246, 247, 248, 249, 0,
	0, 0, 432, 433, 434, 456, 418, 479, 595, 0,
	0, 0, 0, 0, 0, 0, 529, 541, 575, 0,
	584, 585, 587, 589, 588, 0, 601, 470, 471, 581,
	361, 0, 485, 518, 507, 590, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 522, 504, 514, 505, 490, 491, 492, 499, 311,
	493, 494, 495, 466, 496, 467, 497, 498, 0, 521,
	472, 392, 345, 539, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 274,
	197, 468, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 583, 0, 424, 0, 0,
	1442, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 603, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 526, 0, 443, 604, 605, 606, 452,
	457, 458, 459, 461, 462, 463, 464, 527, 544, 511,
	481, 445, 535, 478, 482, 483, 547, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 600, 294, 359,
	549, 582, 474, 0, 536, 475, 484, 286, 508, 520,
	519, 355, 435, 0, 531, 534, 465, 599, 0, 528,
	543, 602, 542, 596, 365, 0, 386, 540, 487, 0,
	532, 506, 0, 533, 502, 537, 0, 476, 0, 393,
	417, 429, 446, 449, 477, 562, 563, 564, 261, 448,
	566, 567, 568, 569, 570, 571, 572, 565, 420, 509,
	486, 512, 428, 489, 488, 0, 0, 523, 444, 524,
	525, 349, 350, 351, 352, 312, 550, 279, 447, 375,
	0, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	515, 516, 513, 607, 0, 573, 574, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 517, 454, 576, 579, 577, 578, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 503, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 557, 556, 555, 554, 553, 552, 551, 0, 0,
	500, 403, 288, 250, 284, 285, 292, 597, 594, 407,
	598, 0, 258, 480, 332, 0, 373, 306, 545, 546,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 548, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 253, 254, 255, 0, 0,
	246, 247, 248, 249, 0, 0, 0, 432, 433, 434,
	456, 418, 479, 595, 0, 0, 0, 0, 0, 0,
	0, 529, 541, 575, 0, 584, 585, 587, 589, 588,
	0, 601, 470, 471, 581, 361, 0, 485, 518, 507,
	590, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 522, 504, 514, 505,
	490, 491, 492, 499, 311, 493, 494, 495, 466, 496,
	467, 497, 498, 0, 521, 472, 392, 345, 539, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 274, 197, 468, 586, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 0, 622,
	583, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	603, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 526, 0,
	443, 604, 605, 606, 452, 457, 458, 459, 461, 462,
	463, 464, 527, 544, 511, 481, 445, 535, 478, 482,
	483, 547, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 600, 294, 359, 549, 582, 474, 0, 536,
	475, 484, 286, 508, 520, 519, 355, 435, 0, 531,
	534, 465, 599, 0, 528, 543, 602, 542, 596, 365,
	0, 386, 540, 487, 0, 532, 506, 0, 533, 502,
	537, 0, 476, 0, 393, 417, 429, 446, 449, 477,
	562, 563, 564, 261, 448, 566, 567, 568, 569, 570,
	571, 572, 565, 420, 509, 486, 512, 428, 489, 488,
	0, 0, 523, 444, 524, 525, 349, 350, 351, 352,
	312, 550, 279, 447, 375, 0, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 516, 513, 607, 0,
	573, 574, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 517, 454, 576,
	579, 577, 578, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 503, 530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 558, 557, 556, 555, 554,
	553, 552, 551, 0, 0, 500, 403, 288, 250, 284,
	285, 292, 597, 594, 407, 598, 0, 258, 480, 332,
	0, 373, 306, 545, 546, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 548,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	253, 254, 255, 0, 0, 246, 247, 248, 249, 0,
	0, 0, 432, 433, 434, 456, 418, 479, 595, 0,
	0, 0, 0, 0, 0, 0, 529, 541, 575, 0,
	584, 585, 587, 589, 588, 0, 601, 470, 471, 581,
	361, 0, 485, 518, 507, 590, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 522, 504, 514, 505, 490, 491, 492, 499, 311,
	493, 494, 495, 466, 496, 467, 497, 498, 0, 521,
	472, 392, 345, 539, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 274,
	197, 468, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 583, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 603, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 526, 0, 443, 604, 605, 606, 452,
	457, 458, 459, 461, 462, 463, 464, 527, 544, 511,
	481, 445, 535, 478, 482, 483, 547, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 600, 294, 359,
	549, 582, 474, 0, 536, 475, 484, 286, 508, 520,
	519, 355, 435, 0, 531, 534, 465, 599, 0, 528,
	543, 602, 542, 596, 365, 0, 386, 540, 487, 0,
	532, 506, 0, 533, 502, 537, 0, 476, 0, 393,
	417, 429, 446, 449, 477, 562, 563, 564, 261, 448,
	566, 567, 568, 569, 570, 571, 572, 565, 420, 509,
	486, 512, 428, 489, 488, 0, 0, 523, 444, 524,
	525, 349, 350, 351, 352, 312, 550, 279, 447, 375,
	0, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	515, 516, 513, 607, 0, 573, 574, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 517, 454, 576, 579, 577, 578, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 503, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 557, 556, 555, 554, 553, 552, 551, 899, 0,
	500, 403, 288, 250, 284, 285, 292, 597, 594, 407,
	598, 0, 258, 480, 332, 0, 373, 306, 545, 546,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 548, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 253, 254, 255, 0, 0,
	246, 247, 248, 249, 0, 0, 0, 432, 433, 434,
	456, 418, 479, 595, 0, 0, 0, 0, 0, 0,
	0, 529, 541, 575, 0, 584, 585, 587, 589, 588,
	0, 601, 470, 471, 581, 361, 0, 485, 518, 507,
	590, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 612, 301, 0, 0, 331, 522, 504, 514, 505,
	490, 491, 492, 499, 311, 493, 494, 495, 466, 496,
	467, 497, 498, 0, 521, 472, 392, 345, 539, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 274, 197, 468, 586, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 0, 0,
	583, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	603, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 526, 0,
	443, 604, 605, 606, 452, 457, 458, 459, 461, 462,
	463, 464, 527, 544, 511, 481, 445, 535, 478, 482,
	483, 547, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 600, 294, 359, 549, 582, 474, 0, 536,
	475, 484, 286, 508, 520, 519, 355, 435, 0, 531,
	534, 465, 599, 0, 528, 543, 602, 542, 596, 365,
	0, 386, 540, 487, 0, 532, 506, 0, 533, 502,
	537, 0, 476, 0, 393, 417, 429, 446, 449, 477,
	562, 563, 564, 261, 448, 566, 567, 568, 569, 570,
	571, 572, 565, 420, 509, 486, 512, 428, 489, 488,
	0, 0, 523, 444, 524, 525, 349, 350, 351, 352,
	312, 550, 279, 447, 375, 0, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 516, 513, 607, 0,
	573, 574, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 517, 454, 576,
	579, 577, 578, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 503, 530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 558, 557, 556, 555, 554,
	553, 552, 551, 0, 0, 500, 403, 288, 250, 284,
	285, 292, 597, 594, 407, 598, 0, 258, 480, 332,
	0, 373, 306, 545, 546, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 548,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	253, 254, 255, 0, 0, 246, 247, 248, 249, 0,
	0, 0, 432, 433, 434, 456, 418, 479, 595, 0,
	0, 0, 0, 0, 0, 0, 529, 541, 575, 0,
	584, 585, 587, 589, 588, 0, 601, 470, 471, 581,
	361, 0, 485, 518, 507, 590, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 522, 504, 514, 505, 490, 491, 492, 499, 311,
	493, 494, 495, 466, 496, 467, 497, 498, 0, 521,
	472, 392, 345, 539, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 274,
	197, 468, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 583, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 603, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 526, 0, 443, 604, 605, 606, 452,
	457, 458, 459, 461, 462, 463, 464, 527, 544, 511,
	481, 445, 535, 478, 482, 483, 547, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 600, 294, 359,
	549, 582, 474, 0, 536, 475, 484, 286, 508, 520,
	519, 355, 435, 0, 531, 534, 465, 599, 0, 528,
	543, 602, 542, 596, 365, 0, 386, 540, 487, 0,
	532, 506, 0, 533, 502, 537, 0, 476, 0, 393,
	417, 429, 446, 449, 477, 562, 563, 564, 261, 448,
	566, 567, 568, 569, 570, 571, 572, 565, 420, 509,
	486, 512, 428, 489, 488, 0, 0, 523, 444, 524,
	525, 349, 350, 351, 352, 312, 550, 279, 447, 375,
	0, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	515, 516, 513, 607, 0, 573, 574, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 517, 454, 576, 579, 577, 578, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 503, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 557, 556, 555, 554, 553, 552, 551, 0, 0,
	500, 403, 288, 250, 284, 285, 292, 597, 594, 407,
	598, 0, 258, 480, 332, 0, 373, 306, 545, 546,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 548, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 253, 254, 255, 0, 0,
	246, 247, 248, 249, 0, 0, 0, 432, 433, 434,
	456, 418, 479, 595, 0, 0, 0, 0, 0, 0,
	0, 529, 541, 575, 0, 584, 585, 587, 589, 588,
	0, 601, 470, 471, 581, 361, 0, 485, 518, 507,
	590, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 522, 504, 514, 505,
	490, 491, 492, 499, 311, 493, 494, 495, 466, 496,
	467, 497, 498, 0, 521, 472, 392, 345, 539, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 274, 197, 468, 586, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 1392, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 0, 0,
	583, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	603, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 526, 0,
	443, 604, 605, 606, 452, 457, 458, 459, 461, 462,
	463, 464, 527, 544, 511, 481, 445, 535, 478, 482,
	483, 547, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 600, 294, 359, 549, 582, 474, 0, 536,
	475, 484, 286, 508, 520, 519, 355, 435, 0, 531,
	534, 465, 599, 0, 528, 543, 602, 542, 596, 365,
	0, 386, 540, 487, 0, 532, 506, 0, 533, 502,
	537, 0, 476, 0, 393, 417, 429, 446, 449, 477,
	562, 563, 564, 261, 448, 566, 567, 568, 569, 570,
	571, 572, 565, 420, 509, 486, 512, 428, 489, 488,
	0, 0, 523, 444, 524, 525, 349, 350, 351, 352,
	312, 550, 279, 447, 375, 0, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 516, 513, 607, 0,
	573, 574, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 517, 454, 576,
	579, 577, 578, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 503, 530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 558, 557, 556, 555, 554,
	553, 552, 551, 0, 0, 500, 403, 288, 250, 284,
	285, 292, 597, 594, 407, 598, 0, 258, 480, 332,
	0, 373, 306, 545, 546, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 548,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	253, 254, 255, 0, 0, 246, 247, 248, 249, 0,
	0, 0, 432, 433, 434, 456, 418, 479, 595, 0,
	0, 0, 0, 0, 0, 0, 529, 541, 575, 0,
	584, 585, 587, 589, 588, 0, 601, 470, 471, 581,
	361, 0, 485, 518, 507, 590, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 522, 504, 514, 505, 490, 491, 492, 499, 311,
	493, 494, 495, 466, 496, 467, 497, 498, 0, 521,
	472, 392, 345, 539, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 274,
	197, 468, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 1390, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 583, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 603, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 526, 0, 443, 604, 605, 606, 452,
	457, 458, 459, 461, 462, 463, 464, 527, 544, 511,
	481, 445, 535, 478, 482, 483, 547, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 600, 294, 359,
	549, 582, 474, 0, 536, 475, 484, 286, 508, 520,
	519, 355, 435, 0, 531, 534, 465, 599, 0, 528,
	543, 602, 542, 596, 365, 0, 386, 540, 487, 0,
	532, 506, 0, 533, 502, 537, 0, 476, 0, 393,
	417, 429, 446, 449, 477, 562, 563, 564, 261, 448,
	566, 567, 568, 569, 570, 571, 572, 565, 420, 509,
	486, 512, 428, 489, 488, 0, 0, 523, 444, 524,
	525, 349, 350, 351, 352, 312, 550, 279, 447, 375,
	0, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	515, 516, 513, 607, 0, 573, 574, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 517, 454, 576, 579, 577, 578, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 503, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 557, 556, 555, 554, 553, 552, 551, 0, 0,
	500, 403, 288, 250, 284, 285, 292, 597, 594, 407,
	598, 0, 258, 480, 332, 0, 373, 306, 545, 546,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 548, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 253, 254, 255, 0, 0,
	246, 247, 248, 249, 0, 0, 0, 432, 433, 434,
	456, 418, 479, 595, 0, 0, 0, 0, 0, 0,
	0, 529, 541, 575, 0, 584, 585, 587, 589, 588,
	0, 601, 470, 471, 581, 361, 0, 485, 518, 507,
	590, 473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 522, 504, 514, 505,
	490, 491, 492, 499, 311, 493, 494, 495, 466, 496,
	467, 497, 498, 0, 521, 472, 392, 345, 539, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 274, 197, 468, 586, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 0, 0,
	583, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	603, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 687, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 526, 0,
	443, 604, 605, 606, 452, 457, 458, 459, 461, 462,
	463, 464, 527, 544, 511, 481, 445, 535, 478, 482,
	483, 547, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 600, 294, 359, 549, 582, 474, 0, 536,
	475, 484, 286, 508, 520, 519, 355, 435, 0, 531,
	534, 465, 599, 0, 528, 543, 602, 542, 596, 365,
	0, 386, 540, 487, 0, 532, 506, 0, 533, 502,
	537, 0, 476, 0, 393, 417, 429, 446, 449, 477,
	562, 563, 564, 261, 448, 566, 567, 568, 569, 570,
	571, 572, 565, 420, 509, 486, 512, 428, 489, 488,
	0, 0, 523, 444, 524, 525, 349, 350, 351, 352,
	312, 550, 279, 447, 375, 0, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 516, 513, 607, 0,
	573, 574, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 517, 454, 576,
	579, 577, 578, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 503, 530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 558, 557, 556, 555, 554,
	553, 552, 551, 0, 0, 500, 403, 288, 250, 284,
	285, 292, 597, 594, 407, 598, 0, 258, 480, 332,
	0, 373, 306, 545, 546, 206, 207, 208, 209, 210,
	211, 212, 213, 251, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 548,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 252,
	253, 254, 255, 0, 0, 246, 247, 248, 249, 0,
	0, 0, 432, 433, 434, 456, 418, 479, 595, 0,
	0, 0, 0, 0, 0, 0, 529, 541, 575, 0,
	584, 585, 587, 589, 588, 0, 601, 470, 471, 581,
	361, 0, 485, 518, 507, 590, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 522, 504, 514, 505, 490, 491, 492, 499, 311,
	493, 494, 495, 466, 496, 467, 497, 498, 0, 521,
	472, 392, 345, 539, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 274,
	197, 468, 586, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 0, 0, 583, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 603, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 646, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 526, 0, 443, 604, 605, 606, 452,
	457, 458, 459, 461, 462, 463, 464, 527, 544, 511,
	481, 445, 535, 478, 482, 483, 547, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 600, 294, 359,
	549, 582, 474, 0, 536, 475, 484, 286, 508, 520,
	519, 355, 435, 0, 531, 534, 465, 599, 0, 528,
	543, 602, 542, 596, 365, 0, 386, 540, 487, 0,
	532, 506, 0, 533, 502, 537, 0, 476, 0, 393,
	417, 429, 446, 449, 477, 562, 563, 564, 261, 448,
	566, 567, 568, 569, 570, 571, 647, 565, 420, 509,
	486, 512, 428, 489, 488, 0, 0, 523, 444, 524,
	525, 349, 350, 351, 352, 312, 550, 279, 447, 375,
	0, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	515, 516, 513, 607, 0, 573, 574, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 517, 454, 576, 579, 577, 578, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 503, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	558, 557, 556, 555, 554, 553, 552, 551, 0, 0,
	500, 403, 288, 250, 284, 285, 292, 597, 594, 407,
	598, 0, 258, 480, 332, 0, 373, 306, 545, 546,
	206, 207, 208, 209, 210, 211, 212, 213, 251, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 548, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 252, 253, 254, 255, 0, 0,
	246, 247, 248, 249, 0, 0, 0, 432, 433, 434,
	456, 418, 479, 595, 0, 0, 0, 1851, 0, 0,
	0, 529, 541, 575, 174, 584, 585, 587, 589, 588,
	0, 601, 470, 471, 581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3280, 0, 0, 0,
	0, 0, 1853, 0, 0, 1851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1853, 0, 0, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1828, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1844, 0,
	0, 0, 0, 0, 0, 0, 1851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1832, 1853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1851, 0,
	0, 1826, 1860, 0, 0, 1827, 1829, 1831, 1832, 1833,
	1834, 1835, 1839, 1840, 1841, 1843, 1846, 1847, 1848, 1838,
	0, 0, 1828, 0, 0, 0, 1836, 1845, 1837, 0,
	0, 0, 0, 1853, 0, 0, 0, 0, 0, 1826,
	1860, 0, 0, 1827, 1829, 1831, 0, 1833, 1834, 1835,
	1839, 1840, 1841, 1843, 1846, 1847, 1848, 0, 0, 0,
	1852, 0, 0, 0, 1836, 1845, 1837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 666, 665,
	672, 662, 0, 0, 1828, 3412, 0, 0, 0, 1844,
	669, 670, 0, 671, 675, 0, 0, 657, 1852, 0,
	0, 0, 0, 0, 1849, 0, 0, 680, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1825, 0, 0, 0, 0, 0, 0, 1824, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1849, 0, 0, 0, 0, 0, 0, 0,
	684, 1844, 1842, 686, 0, 0, 0, 0, 685, 1825,
	0, 1830, 0, 0, 0, 0, 1824, 0, 0, 1832,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1842, 0, 0, 0, 0, 0, 0, 0, 0, 1830,
	1826, 1860, 0, 0, 1827, 1829, 1831, 0, 1833, 1834,
	1835, 1839, 1840, 1841, 1843, 1846, 1847, 1848, 0, 0,
	666, 665, 672, 662, 0, 1836, 1845, 1837, 0, 0,
	0, 1832, 669, 670, 0, 671, 675, 0, 0, 657,
	0, 0, 1838, 0, 0, 0, 0, 0, 0, 680,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1852,
	0, 0, 1826, 1860, 0, 0, 1827, 1829, 1831, 139,
	1833, 1834, 1835, 1839, 1840, 1841, 1843, 1846, 1847, 1848,
	0, 0, 0, 0, 0, 0, 0, 1836, 1845, 1837,
	0, 0, 0, 0, 658, 660, 659, 0, 0, 666,
	665, 672, 662, 1849, 664, 0, 0, 0, 0, 0,
	0, 669, 670, 0, 671, 675, 668, 0, 657, 0,
	1825, 1852, 0, 683, 0, 0, 0, 1824, 680, 0,
	661, 0, 0, 0, 652, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1842, 0, 0, 0, 0, 0, 0, 0, 0,
	1830, 0, 0, 0, 0, 1849, 0, 0, 0, 0,
	0, 684, 0, 0, 686, 0, 0, 0, 0, 685,
	0, 0, 1825, 0, 0, 0, 0, 0, 0, 1824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1842, 0, 0, 0, 0, 0, 0,
	0, 0, 1830, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 658, 660, 659, 663,
	667, 673, 0, 674, 676, 0, 664, 677, 678, 679,
	0, 0, 681, 682, 0, 0, 0, 0, 668, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 0, 0,
	0, 0, 661, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 658, 660, 659, 0, 0,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 668, 0, 0,
	0, 0, 0, 0, 683, 0, 0, 0, 0, 0,
	0, 661, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 663, 667, 673, 0, 674, 676, 0, 0, 677,
	678, 679, 0, 0, 681, 682, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	663, 667, 673, 0, 674, 676, 0, 0, 677, 678,
	679, 0, 0, 681, 682,
}

var yyPact = [...]int{
	298, -1000, -1000, -1000, -343, 13441, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42517,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42517,
	-341, 41912, 41912, -1000, -1000, 2391, -1000, 40702, 15276, 42517,
	374, 372, 42517, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 772, -1000, 44937, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 649, 45875, 44332, 10390, -256, -1000, 1280, -76, 2257,
	925, 931, 930, 930, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 692, 803, 41307,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3600, 399, 803, 20126, 54, 26, 1280, 400, -138,
	-137, -140, 2590, -1000, 1051, 3672, 163, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10390, 10390,
	13441, -366, 13441, 10390, 42517, 42517, -1000, -1000, -1000, -1000,
	-341, 40702, 649, 45875, 10390, 2257, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -137,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -138, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -140, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4492, -1000, 1419, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2766, 1403,
	2255, 567, 42517, -1000, 1389, 567, -1000, -1000, -1000, 1280,
	3235, -1000, 42517, 42517, 124, 1615, -1000, 430, 404, 414,
	246, 1381, -1000, -1000, -1000, -1000, -1000, -1000, 473, 3206,
	-1000, 42517, 42517, 2801, 42517, -1000, 2067, 505, 46096, 3000,
	1312, 776, 2829, -1000, -1000, 2765, -1000, 259, 198, 227,
	354, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 211, -1000,
	3079, -1000, -1000, 244, -1000, -1000, 230, -1000, -1000, -1000,
	24, -1000, -1000, -1000, -1000, -1000, -1000, -83, -1000, -1000,
	958, 2024, 10390, 2265, -1000, 2724, -1000, -1000, -1000, -1000,
	6122, 12217, 12217, 12217, 12217, -1000, -1000, 2553, 10390, 2762,
	2761, 2756, 2754, -1000, -1000, -1000, -1000, -1000, -1000, 1379,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1774,
	-1000, -1000, -1000, 12826, -1000, 2750, 2743, 2738, 2737, 2736,
	2733, 2732, 2731, 2730, 2726, 2718, 2717, 2715, 2714, 2453,
	14661, 2701, 2254, 2243, 2688, 2680, 2673, 2238, 2672, 2668,
	2667, 2453, 2453, 2666, 2664, 2655, 2654, 2653, 2652, 2651,
	2628, 2623, 2622, 2621, 2617, 2616, 2606, 2605, 2601, 2600,
	2594, 2593, 2592, 2591, 2589, 2588, 2587, 2584, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1127, -1000, 2583, 3221, 2521, -1000, 3062, 3060, 3048,
	3040, -308, 2582, 1990, -1000, -1000, 67, -1000, -110, -1000,
	-1000, 915, -1000, 904, -1000, 42517, 42517, 159, 734, 637,
	637, 637, 637, 637, 709, 637, 3089, 768, 749, 738,
	728, 637, -100, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1614, 1613, 2537, 875, -1000, -1000, -1000, -1000, 1246, 42517,
	-1000, 2513, 1545, 1545, 3087, 539, 536, 528, 1545, 406,
	-1000, 1597, 1597, 1597, 1597, 1545, 422, 574, 3093, 3093,
	45, 1597, -6, 1545, 1545, -6, 1545, 1545, 1581, 172,
	-314, -1000, -1000, -1000, -1000, 1597, 1597, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3074, 3073, 649, 649, 42517, 154,
	42517, 649, 649, 649, 653, -52, 43727, 43122, 2067, 495,
	488, 1291, 1598, -1000, 1494, 42517, 42517, 1494, 1494, 23156,
	22551, -1000, 42517, -1000, 3221, 2521, 2444, 1201, 2438, 2521,
	-144, -146, -147, 649, 649, 649, 649, 649, 208, 649,
	649, 649, 649, 649, 42517, 42517, 40097, 649, 649, 8558,
	8558, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13441, 1782, 1970, 161, -56, -332, 216, -1000, -1000, 42517,
	2961, 215, -1000, -1000, -1000, 2469, -1000, 2501, 2501, 2501,
	2501, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2501, 2501, 2509, 2581, -1000, -1000, 2497, 2497, 2497, 2469,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2506, 2506, 2507, 2507, 2506,
	42517, 10390, 42517, 2992, 347, 2564, -1000, 42517, 344, 3221,
	2983, 3093, 3169, -1000, -1000, 1378, 1988, 2236, -1000, 246,
	-1000, 355, 246, 1517, -1000, 1008, -1000, -1000, -1000, -1000,
	-1000, 42517, -83, 348, -1000, -1000, 2219, 2561, -1000, 542,
	1193, 1205, -1000, 210, 46017, 34651, 2067, 34651, 42517, -1000,
	-1000, -1000, -1000, -1000, -1000, 17, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 243,
	-1000, 10390, 10390, 10390, 10390, 10390, -1000, 616, 11608, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12217, 12217, 12217, 12217,
	12217, 12217, 12217, 12217, 12217, 12217, 12217, 12217, 2549, 1641,
	12217, 12217, 12217, 12217, 1201, 3110, 1276, 256, -1000, -1000,
	-1000, -1000, -1000, 1629, 2024, 10390, 10390, 10390, 10390, 42517,
	-1000, -1000, 3890, 10390, 10390, 3832, 10390, 3030, 10390, 10390,
	10390, 2427, 4898, 42517, 10390, -1000, 2426, 2424, -1000, -1000,
	1772, 10390, -1000, -1000, 10390, -1000, -1000, 10390, 12217, 10390,
	-1000, 10390, 10390, 10390, -1000, -1000, 2258, 3030, 3030, 3030,
	1635, 10390, 10390, 3030, 3030, 3030, 1593, 3030, 3030, 3030,
	3030, 3030, 3030, 3030, 3030, 3030, 3030, 2422, 2420, 2414,
	9781, 3093, -256, -1000, 7949, 2983, 3093, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -310, 2560, 42517,
	2235, 2227, -352, -39, 923, 907, 910, -1000, 3025, -1000,
	2559, 42517, 637, 637, 637, -1000, 42517, 1638, 34651, 42517,
	42517, 2067, 42517, 42517, 42517, 637, 637, 637, 637, 42517,
	-1000, 2959, 34651, 2886, 653, -1000, 42517, 1246, 3015, 42517,
	3174, 12217, 12217, -1000, 39492, 1597, 1545, 1545, -1000, -1000,
	42517, -1000, -1000, -1000, 1597, 42517, 1597, 1597, 3174, 1597,
	-1000, -1000, -1000, 1545, 1545, -1000, -1000, 10390, -1000, -1000,
	1597, 1597, -1000, -1000, 3174, 42517, 10, 3174, 3174, 42,
	-1000, -1000, -1000, 1545, 42517, 42517, 637, 42517, -1000, 42517,
	42517, -1000, -1000, 42517, 42517, 3683, 42517, 38887, 3059, -1000,
	34651, 42517, 42517, 32231, -1000, 1185, -1000, -60, -1000, -45,
	-52, 1494, -52, 1494, -1000, 534, 541, 21341, 475, 34651,
	5507, -1000, -1000, 1494, 1494, 5507, 5507, 1360, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1232, -1000, 177, 3093, -1000,
	-1000, -1000, -1000, -1000, 1987, 1980, 1977, 42517, 42517, 34651,
	2067, 42517, 649, 42517, 42517, 42517, 42517, 42517, -1000, 2554,
	1377, -1000, 2998, 42517, 42517, 1184, -1000, -1000, 18301, 1376,
	1184, -1000, 1692, -1000, 10390, 13441, -278, 10390, 13441, 13441,
	10390, 13441, -1000, 10390, 194, -1000, -1000, -1000, -1000, 1975,
	-1000, 1974, -1000, -1000, -1000, -1000, -1000, 2220, 2220, -1000,
	1960, -1000, -1000, -1000, -1000, 1957, -1000, -1000, 1953, -1000,
	-1000, -1000, 2413, 958, -1000, 2208, 2815, -259, -1000, 19521,
	42517, 42517, -1000, -1000, -259, -1000, 18911, 42517, 3093, -1000,
	-264, 2983, 10390, 42517, -1000, 3086, -1000, -1000, 246, -1000,
	439, 329, -1000, -1000, -1000, -1000, -1000, -1000, 1359, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1231, -1000,
	42517, -1000, -1000, 210, 34651, 36466, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 224, -1000, -1000, 171, -1000, 706, 164,
	1495, -1000, -1000, 158, 178, 131, 822, 2024, -1000, 1647,
	1647, 1656, -1000, 620, -1000, -1000, -1000, -1000, 2553, -1000,
	-1000, -1000, 1554, 1816, -1000, 1543, 1543, 1341, 1341, 1341,
	1341, 1341, 1649, 1649, -1000, -1000, -1000, 6122, 2549, 12217,
	12217, 12217, 12217, 600, 600, 3733, 3679, -1000, 10390, 1666,
	-1000, 10390, 2306, 1303, 2174, 1314, 1355, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2409, 2407, 2228,
	3187, 2406, 10390, -1000, -1000, 1489, 1487, 1446, -1000, 2147,
	9172, -1000, -1000, -1000, 2405, 1343, 2400, -1000, -1000, -1000,
	2399, 1443, 1041, 2394, 1743, 2392, 2386, 2385, 2375, 1217,
	10390, 10390, 10390, 10390, 2374, 1438, 1437, 10390, 10390, 10390,
	10390, 2373, 10390, 10390, 10390, 10390, 10390, 10390, 10390, 10390,
	10390, 10390, 76, 76, 76, 1203, 1197, -1000, -1000, 1421,
	-1000, 2024, -1000, -1000, 2983, -1000, 2543, 1950, 1191, -1000,
	-1000, -339, 2139, -1000, -1000, 921, 897, 902, 42517, 971,
	2542, 42517, 42517, 42517, 189, -1000, 2997, 1152, -1000, 164,
	-92, 377, 967, 2799, 3185, -180, 42517, 42517, 42517, 42517,
	3014, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38282,
	-1000, 2536, 1412, -1000, -1000, 10390, -1000, -1000, 2798, 42517,
	42517, 3174, 3174, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1597, 3174, 3174, 1299, 1545, 1597, -1000, -1000, 1597, -1000,
	-1000, 1597, -1000, -1000, 1342, -1000, 42517, -1000, -1000, -1000,
	3013, 2513, 1187, -1000, -1000, -1000, 3167, 1335, 619, 619,
	821, 458, 3163, 17091, -1000, 1516, 940, 700, 2896, 252,
	-1000, 1516, -198, 585, 1516, 1516, 1516, 1516, 1516, 1516,
	1516, 456, 453, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
	1516, 1516, 1516, 1516, 929, 1516, 1516, 1516, 1516, 1516,
	-1000, 1516, 2535, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	507, 184, 3051, 295, 292, 1152, 3045, 309, 3057, 1078,
	-1000, -1000, -1000, -1000, 25576, 25576, 20736, 25576, -1000, 1530,
	-52, 0, -1000, -1000, 1185, 5507, 1185, 5507, -1000, -1000,
	686, -1000, -1000, 967, -1000, 42517, 42517, -1000, -1000, 2534,
	1605, -1000, -1000, 14661, -1000, 5507, 5507, -1000, -1000, 26181,
	42517, -1000, -86, -1000, -71, 2983, -1000, -1000, -1000, 1180,
	-1000, -1000, 1183, 967, 2808, 42517, 1180, 1180, 1180, -1000,
	-1000, 16486, 42517, 42517, -1000, -1000, 3174, 8558, -1000, 32231,
	-1000, -1000, 37676, -1000, 37071, 3174, 1620, -1000, 13441, 1952,
	153, -1000, 207, -334, 156, 1748, 155, 2024, -1000, -1000,
	2370, 2367, 1410, -1000, 1399, 2366, 1397, 1372, -1000, -26,
	-1000, 2960, 980, -1000, 2532, -1000, 1370, 2869, -1000, 1171,
	-1000, 1602, 1364, -1000, 980, 1357, 2868, 1171, 2983, 2205,
	-1000, 1166, -1000, 2141, 1338, 114, -1000, -1000, -1000, 42517,
	2219, 1356, 36466, 998, -1000, 673, 1333, 1327, -1000, 34651,
	240, 34651, -1000, 34651, -1000, -1000, 327, -1000, 42517, 2979,
	-1000, -1000, -1000, 2139, 1592, -361, 42517, -1000, -1000, -1000,
	-1000, -1000, 1344, -1000, 600, 600, 3733, 2514, -1000, 12217,
	-1000, 12217, 3058, 1619, -1000, 10390, 1933, 4357, 10390, 4357,
	802, 24366, 42517, -1000, -1000, 10390, 10390, -1000, 3054, -1000,
	-1000, -1000, -1000, 10390, 10390, 1806, -1000, 42517, -1000, -1000,
	-1000, -1000, 24366, -1000, 12217, -1000, -1000, -1000, -1000, 10390,
	1122, 1122, 3039, 1336, 76, 76, 76, 2988, 2899, 2895,
	1334, 76, 2862, 2824, 2810, 2712, 2682, 2678, 2670, 2657,
	2647, 2633, -1000, 2530, -1000, -1000, 1826, 10999, 7949, -1000,
	-1000, 239, 1085, 1949, 2202, 109, -1000, 1588, -1000, -1000,
	-1000, 890, 214, 2364, 1084, -1000, -1000, 42517, -1000, -1000,
	-1000, 16486, 2513, 2528, 2513, 84, 1516, -1000, 586, 34651,
	485, -1000, 42517, 1745, 1586, 2807, 481, 2957, 42517, 2526,
	359, 2523, 2519, 3012, 367, 4581, 42517, 1103, -1000, 1325,
	3672, -1000, 42517, 2024, -1000, 2067, -1000, 1545, -1000, -1000,
	3174, -1000, -1000, 10390, 10390, 3174, 1545, 1545, 1597, 42517,
	-1000, 367, 4581, 3008, 4083, 469, 2167, -1000, 42517, -1000,
	-1000, -1000, 754, -1000, 808, 637, 42517, 1721, 808, 1709,
	2517, -1000, -1000, 42517, 42517, 42517, 42517, -1000, -1000, 42517,
	-1000, 42517, 42517, 42517, 42517, 42517, 35861, -1000, 42517, 42517,
	-1000, 42517, 1698, 42517, 1697, 2989, -1000, 1516, 1516, 834,
	-1000, -1000, 523, -1000, 35861, 1943, 1940, 1939, 1938, 2201,
	2193, 2180, 1516, 1516, 1935, 2177, 35256, 2176, 1018, 1931,
	1929, 1927, 1968, 2166, 744, -1000, 2160, 1958, 1910, 1879,
	42517, 2516, 2086, -1000, -1000, 84, 1516, 290, 42517, 1585,
	586, 376, 1821, 21946, 42517, 32231, 32231, 32231, 32231, -1000,
	2857, 2846, -1000, 2850, 2842, 2881, 42517, 32231, 2513, -1000,
	35256, -1000, -1000, -1000, 1201, 1322, 3165, 826, 10390, -1000,
	-1000, -66, -67, -1000, -1000, -1000, 34651, 2158, 475, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3084, 42517, 42517, 577,
	2359, 1079, -1000, -1000, -1000, 4581, 2501, 2501, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2501, 2501, 2509,
	-1000, -1000, 2497, 2497, 2497, 2469, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2506, 2506, 2507, 2507,
	2506, -1000, -1000, 3172, -1000, 1062, -1000, -1000, 1324, -1000,
	3172, 1639, -344, 13441, 1624, 1519, -1000, 10390, 13441, 10390,
	-286, 266, -288, -1000, -1000, -1000, 2146, -1000, -1000, -1000,
	1924, -1000, 1923, 99, 119, 1690, -259, 7949, 397, 42517,
	-259, 42517, 7949, -1000, 42517, 360, -259, 3084, -26, 10390,
	2915, -1000, -1000, 42517, 1920, -1000, -1000, -1000, 3183, 34651,
	2067, 1444, 34046, -1000, 237, -1000, 222, 527, 2144, -1000,
	718, 107, 2140, 2139, -1000, -1000, -1000, -1000, 12217, -1000,
	-1000, -1000, -1000, 2024, 10390, 2356, -1000, 885, 885, 2131,
	2354, 2347, -1000, 2501, 2501, -1000, 2469, 2497, 2469, 885,
	885, 2345, -1000, 2073, 2475, -1000, 2421, 2389, 10390, -1000,
	2339, 3640, 1156, -104, -226, 76, 76, -1000, -1000, -1000,
	-1000, 76, 76, 76, 76, -1000, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 575, -151, -326, -153,
	-329, -1000, 2338, 1021, -1000, -1000, -1000, -1000, -1000, 3832,
	1020, -1000, -1000, 2139, 2135, -1000, 2130, 2123, 971, 4581,
	2336, 3007, 15881, 3006, 1998, -1000, -1000, -1000, 33441, 500,
	-1000, -1000, -1000, 592, 238, 1919, 483, -1000, 42517, 309,
	2885, 1584, 2120, 42517, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2957, -1000, 863, 353, 31021, 14056, -1000, 391, 15881,
	15881, 391, 357, 1616, -1000, 567, 1015, 1310, 32231, 42517,
	-1000, 31626, 2330, -1000, 967, 3174, -1000, 2024, 2024, -1000,
	3174, 3174, 1545, -1000, 357, -1000, 391, -1000, 917, 17696,
	392, 366, 340, -1000, 576, -1000, -1000, 561, 2909, 4581,
	-1000, 42517, -1000, 42517, -1000, 42517, 42517, 637, 10390, 2909,
	42517, 672, -1000, -1000, 992, 349, 334, 629, 629, 1014,
	-1000, 2990, -1000, -1000, 1002, -1000, -1000, -1000, -1000, 42517,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 24366, 24366, 3043,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2115, 2110, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42517, 1321, -1000, 1583, 1998, 33441,
	1582, 1494, 2107, 500, 1745, 1580, -1000, 2106, -1000, 984,
	42517, 42517, -1000, 1116, -1000, 1560, 2793, 2806, 2793, -1000,
	-1000, -1000, -1000, 2844, -1000, 2821, -1000, -1000, 1116, -1000,
	-1000, -1000, -1000, -1000, 826, -1000, 3061, 808, 808, 808,
	2328, -1000, -1000, -1000, 998, 2326, -1000, -1000, -1000, 3215,
	-1000, -1000, -1000, -1000, -1000, -1000, 16486, 2939, 3166, 3162,
	32836, 3166, -1000, -344, 1557, -1000, 1796, 150, 1655, 42517,
	-1000, -1000, -1000, 2325, 2314, -266, 103, 3160, 3158, 868,
	-1000, 2313, 996, -259, -1000, -1000, 980, -1000, -1000, -1000,
	-259, -1000, 980, -1000, 99, -1000, -1000, 2930, -1000, -1000,
	2067, -1000, 200, -1000, -1000, -1000, -1000, -1000, -1000, 144,
	-1000, 42517, -1000, 993, 106, -1000, 2024, -1000, -1000, -1000,
	-1000, -1000, 4357, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10390, -1000, -1000, -1000, 2355, -1000,
	-1000, 10390, 2302, 2104, 2295, 2100, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3221, -1000, 3154, 1319, 2294, 2293, 1306, 2287,
	2286, -1000, 10390, 2284, 3832, -1000, -1000, -1000, -1000, -1000,
	-1000, 775, 391, 2282, 988, -1000, -1000, -1000, -1000, 391,
	-1000, 2098, 160, -1000, -1000, -1000, 2093, 2087, 1916, -1000,
	-1000, 1832, 994, 174, -1000, -1000, -1000, -1000, -1000, -1000,
	1821, 1811, 1556, -362, -1000, 2496, -1000, 1516, 1516, 1516,
	42517, 1293, -1000, 1516, 1516, 2281, -1000, 2275, 2273, -182,
	588, 1533, 1502, -1000, 1914, 25576, 32231, 31626, 1090, -1000,
	1298, -1000, -1000, -1000, -1000, -1000, 3174, 588, -1000, 396,
	1908, 12217, 2495, 12217, 2494, 402, 2491, 1286, -1000, 42517,
	-1000, -1000, 42517, 274, 2486, -1000, 2485, 2797, 383, 2483,
	2482, 42517, 2315, -1000, 2909, 42517, 647, 2926, -1000, -1000,
	-1000, 322, -1000, -1000, 403, -1000, 42517, -1000, 42517, -1000,
	1340, -1000, 24366, -1000, -1000, 1235, -1000, 2086, 2081, -1000,
	160, 2079, 5507, -1000, -1000, 2885, 2077, -1000, 42517, 984,
	984, 3221, 42517, 7949, -1000, -1000, 10390, 2481, -1000, 10390,
	-1000, -1000, -1000, -1000, -1000, 2480, 2913, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1558, -1000, 10390, 10390, -1000, -1000,
	630, 13441, -289, 264, -1000, -1000, -1000, -268, 2074, -1000,
	-1000, 3151, 2071, 2025, 42517, -1000, -1000, 980, 980, -266,
	-1000, -1000, 967, -1000, -1000, 42, 467, -1000, 2270, 2272,
	-1000, 2250, 76, -1000, 76, -1000, 185, 10390, -1000, 2070,
	-1000, -1000, -1000, 2065, -1000, -1000, 2218, -1000, 2268, 4581,
	-186, -182, 15881, -186, -1000, -1000, 324, -1000, -1000, 300,
	-1000, -1000, 1815, 545, -1000, -1000, -1000, 1555, 1727, 2031,
	29206, 24366, 24971, 2063, -1000, -1000, 31021, 1558, 1558, 45541,
	243, 45802, -1000, 2477, 933, 1492, -1000, 1869, -1000, 1853,
	-1000, 3174, 1090, 1298, -1000, -1000, 1424, -1000, 933, 2167,
	3141, -1000, 3625, 42517, 2848, 42517, 2473, 1547, 12217, -1000,
	561, 2691, -1000, -1000, 274, -1000, -1000, 1737, 12217, -1000,
	-1000, 2056, 24971, 714, 1546, 1541, 765, 2472, -1000, 425,
	3210, -1000, -1000, -1000, 824, 2471, -1000, 1670, 1661, -1000,
	42517, -1000, 29206, 29206, 433, 433, 29206, 29206, 2470, 629,
	-1000, -1000, 12217, -1000, -1000, 1516, -1000, -1000, -1000, 1516,
	1318, -1000, -1000, -1000, -1000, -1000, -1000, 1811, -1000, -1000,
	3093, -1000, -1000, 2024, 42517, 2024, 30416, -1000, 3137, 3133,
	-1000, 2024, 958, -1000, -344, 42517, 42517, -270, 1851, -1000,
	2054, 110, -1000, -1000, 962, -268, -272, 85, 98, 1528,
	-1000, -1000, -1000, -1000, -1000, 2267, -1000, 611, -1000, -1000,
	-1000, 958, 2266, 2264, -1000, -1000, -154, -1000, -1000, 342,
	-1000, -1000, -1000, 513, 2053, -1000, -1000, 299, -1000, -1000,
	2051, -1000, -1000, 105, -1000, 1518, 1212, -1000, 2469, 10390,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 552, -1000,
	391, 45740, -1000, 940, -1000, 42, 552, 27996, 522, 249,
	-1000, 1850, -1000, -1000, 3221, -1000, 508, -1000, 408, -1000,
	1208, -1000, 1202, 29811, 1847, 2759, -1000, 45579, 675, -1000,
	-1000, 3733, -1000, -1000, -1000, -1000, -1000, -1000, 2043, 2041,
	-1000, -1000, -1000, -1000, -1000, 1845, 2461, -2, 3037, 2038,
	-1000, -1000, 2460, 1200, 1198, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1196, 1195, 29206, -1000, -1000, 3733,
	1844, 24366, 1516, -1000, -1000, 1143, 1138, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2456, -1000, -1000, 3131, -270, -1000,
	2034, 648, 102, 98, -1000, 3124, 87, 3121, 3114, 2032,
	-1000, -1000, 568, -261, 74, 71, 63, -1000, -1000, -1000,
	10390, -1000, -1000, 42517, 424, -1000, -1000, -1000, 139, -1000,
	-1000, -1000, -1000, 2031, 2029, -1000, 29206, 2990, 2161, 387,
	3109, -1000, 45802, -1000, 1516, -1000, 387, 1135, -1000, 1516,
	1516, -1000, 363, -1000, 1480, -1000, 1842, -1000, 3093, -1000,
	361, -1000, 389, -1000, -1000, -1000, 1115, -1000, -1000, -1000,
	45579, 401, -1000, 546, 2455, -1000, -1000, 2263, 10390, 2453,
	1516, 2179, -150, 29206, 2794, 2772, 2770, 2684, 1114, -1000,
	-1000, 24366, -1000, -1000, 28601, 42517, 2025, -1000, -1000, 2446,
	1840, 103, 101, 3102, -1000, 2025, 3098, 2025, 2025, 951,
	1650, -1000, 68, 65, 61, -1000, -1000, -1000, -1000, 489,
	-1000, 235, -1000, -1000, -1000, 258, -1000, -1000, 2990, -1000,
	3095, 469, -1000, 24366, -1000, -1000, 27996, 1558, 1558, -1000,
	-1000, 1839, -1000, -1000, -1000, -1000, 1834, -1000, -1000, -1000,
	1088, -1000, 42517, 729, 7340, -1000, 2090, -1000, 42517, -1000,
	2804, -1000, 203, 1076, 258, 433, 258, 433, 258, 433,
	258, 433, 226, -1000, -1000, -1000, 1075, -1000, -1000, 3034,
	23761, 91, -1000, -1000, -1000, 2028, -1000, 2025, -1000, -1000,
	-1000, 70, 568, -1000, -1000, -1000, 2023, -1000, -1000, -1000,
	-1000, 1516, 1516, 2010, 2004, 343, -1000, -1000, -1000, 27391,
	392, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 401, 45802,
	-1000, 7340, 1072, -1000, 2024, -1000, 629, -1000, -1000, 2803,
	2269, 3182, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 42517, -1000, 42517, -1000, 1058, -1000, -1000, -1000,
	1297, -1000, -1000, -1000, -1000, 1500, -1000, -320, 1812, 1775,
	-1000, -1000, 42517, -1000, 42517, 396, -1000, 45802, 1031, -1000,
	7340, -1000, -1000, 3184, -1000, 3208, 827, 827, 258, 258,
	258, 258, -1000, 950, -1000, 1471, -1000, 26786, 42517, 2003,
	-1000, -1000, 1961, -1000, -1000, -1000, 1013, 2167, -1000, -1000,
	-1000, -1000, -1000, 1793, 434, -1000, 42517, 6731, -1000, 1296,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2024,
	42517, -1000,
}

var yyPgo = [...]int{
	0, 173, 3247, 250, 175, 3738, 80, 245, 223, 220,
	241, 3737, 3736, 3732, 2970, 2963, 3731, 3730, 3729, 3727,
	3726, 3722, 3721, 3720, 3719, 3718, 3717, 3713, 3712, 3711,
	3709, 3707, 3705, 3704, 3702, 3701, 3700, 3699, 3698, 3697,
	3695, 3693, 3692, 3690, 3684, 3683, 239, 3682, 3681, 3680,
	3677, 3675, 3674, 3672, 3670, 3669, 3668, 3667, 3666, 3665,
	3664, 3661, 3660, 3657, 3656, 3654, 3653, 3652, 3651, 3649,
	3648, 3644, 3643, 3642, 3641, 3640, 3639, 3638, 3637, 210,
	3636, 2960, 3634, 3632, 3631, 3630, 3629, 3628, 3626, 242,
	3625, 3624, 3623, 3617, 3612, 3611, 3610, 3609, 3608, 3604,
	3603, 240, 3602, 3601, 3600, 3597, 226, 3596, 231, 3595,
	171, 129, 3593, 3592, 3591, 3590, 3589, 3588, 235, 207,
	71, 3587, 48, 3586, 3585, 213, 3584, 147, 3579, 149,
	3578, 3577, 3576, 3575, 3574, 3573, 3571, 3569, 3567, 3562,
	3560, 3559, 3557, 3556, 3550, 3549, 96, 3548, 254, 3544,
	72, 3543, 3542, 128, 85, 124, 252, 1865, 248, 243,
	186, 178, 98, 3541, 2964, 3538, 157, 225, 156, 26,
	3537, 136, 3536, 256, 64, 44, 251, 145, 55, 162,
	125, 3535, 211, 109, 108, 3534, 3533, 141, 232, 182,
	3532, 102, 3530, 3528, 3526, 3524, 3522, 198, 187, 3521,
	3520, 130, 3518, 3517, 132, 3516, 78, 138, 164, 120,
	3515, 2118, 127, 113, 121, 100, 3514, 77, 3513, 3512,
	3511, 3510, 180, 3509, 3508, 133, 70, 3498, 3497, 3495,
	68, 3494, 73, 3491, 41, 3486, 61, 3485, 3484, 3483,
	3482, 3481, 3480, 3479, 3478, 3476, 3475, 3472, 54, 3471,
	3464, 7, 13, 15, 3461, 22, 3460, 169, 3459, 3458,
	3457, 3456, 3455, 90, 87, 3453, 94, 166, 3452, 8,
	24, 69, 3451, 3450, 214, 365, 101, 153, 3448, 304,
	3447, 3446, 3444, 159, 3443, 597, 3442, 3439, 3438, 3437,
	3435, 3432, 93, 3431, 212, 36, 3430, 131, 137, 3429,
	37, 46, 201, 217, 3427, 3426, 3425, 143, 221, 118,
	57, 0, 3424, 152, 3422, 3420, 3419, 246, 3418, 228,
	216, 168, 263, 255, 297, 3417, 3414, 66, 3411, 161,
	31, 51, 135, 79, 19, 215, 3408, 406, 9, 203,
	3406, 205, 3404, 188, 14, 119, 150, 3403, 3401, 27,
	259, 3400, 3398, 3396, 126, 3395, 3392, 177, 81, 3391,
	3390, 3389, 3388, 35, 3387, 29, 12, 3385, 97, 3384,
	247, 3383, 272, 155, 183, 181, 154, 224, 229, 86,
	76, 3381, 1656, 151, 99, 21, 3380, 218, 3379, 179,
	111, 3378, 116, 3377, 222, 258, 209, 3376, 184, 10,
	45, 28, 25, 43, 11, 230, 197, 3375, 3374, 20,
	47, 3373, 146, 3371, 18, 3370, 3369, 62, 3, 3368,
	3364, 17, 16, 3363, 33, 200, 170, 123, 91, 67,
	3362, 3361, 49, 174, 3360, 134, 158, 160, 3358, 74,
	3357, 3355, 3354, 834, 3353, 253, 3351, 3350, 3349, 3348,
	3346, 3345, 3344, 3343, 3341, 3340, 110, 39, 3339, 3338,
	3337, 3336, 82, 142, 3335, 3331, 3328, 3326, 38, 139,
	3323, 23, 3322, 34, 32, 42, 3320, 95, 3319, 4,
	189, 3317, 3315, 5, 3313, 3312, 1, 2, 3311, 3310,
	122, 3309, 92, 30, 167, 105, 3308, 3307, 89, 206,
	148, 3306, 3305, 103, 238, 192, 3303, 75, 233, 249,
	3301, 204, 3300, 3299, 3298, 3297, 3296, 3292, 1100, 3291,
	3287, 236, 65, 88, 115, 3286, 3284, 3283, 84, 163,
	117, 107, 56, 83, 3282, 112, 190, 3281, 194, 3279,
	3278, 106, 3277, 3276, 3275, 3274, 199, 3273, 3272, 185,
	227, 3268, 3265, 303, 3264, 3263, 3261, 3259, 3258, 3256,
	3255, 3253, 3252, 3251, 237, 323, 3250,
}

//line mysql_sql.y:11288
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 559, 562, 562, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 116, 116, 115, 544, 544, 544, 545,
	545, 112, 134, 133, 136, 136, 135, 135, 132, 132,
	128, 131, 131, 130, 130, 129, 124, 126, 126, 125,
	127, 127, 113, 101, 114, 489, 489, 488, 488, 487,
	487, 440, 440, 486, 486, 486, 485, 485, 485, 484,
	484, 483, 483, 482, 482, 480, 480, 481, 479, 478,
	478, 478, 476, 476, 476, 472, 472, 474, 473, 473,
	475, 467, 467, 470, 470, 468, 468, 468, 468, 471,
	466, 466, 466, 465, 465, 100, 100, 100, 384, 384,
	99, 99, 398, 398, 398, 398, 398, 396, 396, 396,
	396, 396, 396, 395, 395, 394, 394, 399, 399, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 90,
	90, 90, 90, 90, 95, 95, 95, 550, 550, 549,
	549, 551, 551, 551, 551, 552, 552, 93, 93, 93,
	94, 393, 393, 393, 91, 92, 92, 383, 383, 388,
	388, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 392, 392, 392, 390, 390, 389,
	389, 391, 391, 84, 84, 84, 87, 86, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 85, 85, 85,
	85, 85, 85, 80, 80, 80, 80, 80, 79, 79,
	81, 81, 380, 380, 379, 96, 96, 97, 547, 547,
	546, 548, 548, 548, 548, 98, 104, 104, 104, 104,
	104, 104, 104, 103, 103, 106, 106, 105, 107, 89,
	89, 89, 89, 89, 89, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 514, 514,
	514, 516, 516, 315, 316, 563, 318, 314, 314, 314,
	510, 510, 511, 512, 513, 513, 513, 102, 11, 11,
	11, 11, 11, 11, 11, 11, 13, 78, 83, 83,
	256, 256, 261, 261, 262, 262, 262, 267, 267, 268,
	268, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 244, 244, 244, 239, 239, 239, 239,
	240, 240, 241, 241, 242, 242, 242, 242, 243, 243,
	308, 308, 263, 263, 263, 265, 265, 264, 260, 258,
	258, 258, 258, 258, 258, 258, 259, 259, 259, 259,
	266, 266, 76, 82, 82, 82, 527, 527, 77, 538,
	538, 443, 443, 329, 329, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 448, 449, 325, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 53, 56, 52, 52, 52, 369,
	369, 51, 564, 564, 303, 303, 64, 63, 55, 65,
	66, 67, 68, 69, 70, 50, 62, 62, 62, 62,
	62, 62, 62, 62, 73, 461, 461, 566, 566, 566,
	71, 72, 442, 442, 442, 61, 60, 59, 58, 57,
	57, 49, 49, 48, 48, 54, 140, 141, 141, 322,
	322, 322, 324, 324, 320, 565, 565, 412, 412, 323,
	323, 47, 47, 47, 47, 74, 321, 321, 302, 319,
	319, 319, 12, 12, 10, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 25,
	26, 28, 377, 377, 374, 27, 19, 18, 18, 22,
	21, 17, 17, 20, 23, 24, 24, 9, 9, 9,
	9, 14, 14, 15, 161, 161, 212, 212, 522, 522,
	518, 518, 519, 519, 519, 520, 520, 521, 521, 108,
	455, 455, 455, 455, 455, 455, 8, 183, 183, 454,
	454, 454, 454, 454, 454, 381, 381, 381, 499, 499,
	499, 500, 182, 182, 177, 177, 456, 456, 346, 501,
	501, 464, 464, 463, 463, 462, 462, 180, 180, 181,
	181, 164, 164, 119, 119, 469, 469, 469, 469, 477,
	477, 439, 439, 248, 248, 295, 295, 296, 296, 154,
	154, 155, 155, 155, 155, 155, 155, 553, 553, 554,
	555, 556, 556, 557, 557, 557, 558, 558, 558, 558,
	558, 507, 507, 509, 509, 508, 179, 179, 175, 175,
	176, 176, 176, 174, 174, 173, 172, 172, 171, 169,
	169, 169, 170, 170, 170, 187, 187, 157, 157, 157,
	156, 156, 156, 156, 156, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 158, 158, 515,
	515, 515, 444, 444, 444, 451, 451, 276, 276, 277,
	277, 275, 275, 159, 159, 160, 160, 160, 160, 274,
	274, 273, 162, 162, 168, 167, 167, 163, 163, 163,
	163, 284, 284, 283, 283, 283, 283, 111, 117, 117,
	118, 186, 186, 282, 281, 281, 281, 185, 185, 184,
	184, 178, 178, 166, 166, 166, 166, 280, 165, 278,
	543, 543, 542, 542, 541, 539, 539, 539, 540, 540,
	540, 540, 491, 491, 491, 491, 491, 309, 309, 309,
	313, 313, 312, 312, 312, 312, 312, 317, 7, 7,
	7, 7, 7, 7, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 38, 196, 197,
	39, 198, 198, 199, 199, 200, 200, 201, 202, 203,
	203, 203, 203, 37, 188, 188, 189, 189, 190, 190,
	191, 192, 192, 192, 195, 193, 194, 194, 561, 561,
	560, 36, 36, 29, 147, 147, 148, 148, 148, 150,
	150, 245, 245, 245, 149, 149, 151, 151, 151, 523,
	526, 524, 524, 528, 528, 528, 529, 529, 529, 529,
	530, 530, 30, 137, 142, 533, 533, 533, 532, 532,
	534, 534, 535, 535, 299, 299, 300, 300, 145, 146,
	146, 144, 139, 153, 153, 153, 153, 153, 138, 143,
	525, 531, 531, 531, 378, 378, 375, 376, 376, 373,
	372, 372, 372, 537, 537, 536, 536, 536, 310, 310,
	31, 368, 368, 370, 371, 371, 371, 362, 362, 362,
	362, 35, 366, 366, 367, 367, 367, 367, 367, 367,
	367, 363, 363, 365, 365, 361, 361, 361, 361, 361,
	361, 361, 34, 152, 152, 360, 360, 357, 357, 355,
	355, 356, 356, 354, 354, 354, 358, 358, 42, 75,
	43, 44, 45, 41, 359, 359, 33, 33, 33, 33,
	33, 33, 33, 33, 121, 120, 120, 120, 120, 120,
	123, 123, 298, 298, 297, 297, 122, 40, 224, 224,
	431, 431, 426, 426, 426, 426, 426, 446, 446, 446,
	427, 427, 427, 428, 428, 428, 430, 430, 430, 429,
	429, 429, 429, 429, 445, 445, 447, 447, 447, 400,
	400, 401, 401, 401, 404, 404, 418, 418, 419, 419,
	417, 417, 424, 424, 423, 423, 422, 422, 421, 421,
	420, 420, 420, 420, 415, 415, 414, 414, 402, 402,
	402, 402, 402, 403, 403, 403, 413, 413, 416, 416,
	272, 272, 271, 271, 232, 232, 233, 233, 270, 270,
	230, 230, 231, 231, 231, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	497, 497, 498, 235, 235, 246, 246, 246, 246, 246,
	246, 234, 234, 236, 236, 213, 213, 211, 211, 204,
	204, 205, 205, 206, 206, 206, 210, 210, 209, 209,
	209, 209, 207, 207, 208, 208, 208, 208, 208, 208,
	386, 386, 494, 494, 495, 495, 490, 490, 490, 493,
	493, 493, 493, 493, 493, 493, 496, 496, 496, 492,
	492, 214, 293, 293, 293, 311, 311, 311, 311, 292,
	292, 292, 229, 229, 228, 228, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 385, 385,
	326, 326, 327, 327, 255, 254, 254, 254, 254, 254,
	252, 253, 251, 251, 251, 251, 251, 250, 250, 249,
	249, 249, 364, 364, 247, 247, 238, 238, 238, 237,
	237, 237, 425, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	290, 290, 290, 291, 291, 291, 291, 291, 291, 291,
	291, 336, 336, 342, 342, 506, 506, 505, 215, 215,
	215, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	225, 225, 225, 409, 409, 409, 409, 410, 410, 410,
	410, 411, 411, 411, 407, 407, 408, 408, 347, 348,
	348, 452, 452, 453, 453, 405, 405, 406, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	460, 460, 460, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 517,
	517, 517, 502, 502, 502, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 504, 504, 504,
	504, 504, 504, 504, 504, 504, 504, 504, 504, 504,
	504, 504, 504, 504, 288, 288, 288, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 349, 349, 350, 350, 457,
	457, 457, 457, 457, 457, 458, 458, 459, 459, 459,
	459, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	334, 285, 285, 285, 351, 343, 343, 344, 344, 345,
	345, 337, 337, 337, 337, 337, 337, 338, 338, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 339, 339, 341, 341, 353, 353, 353, 352, 352,
	352, 352, 352, 352, 352, 227, 227, 227, 227, 331,
	331, 331, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 217, 217, 217, 217, 221, 221,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 222, 222, 222, 222, 222, 220,
	220, 220, 220, 220, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 109, 110, 110, 219, 294, 294, 432, 432,
	435, 435, 433, 433, 434, 436, 436, 436, 437, 437,
	437, 438, 438, 438, 441, 441, 301, 301, 301, 307,
	307, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 4, 0, 1, 1, 0,
	1, 5, 2, 2, 6, 9, 6, 9, 4, 7,
	8, 0, 1, 1, 2, 4, 6, 1, 2, 4,
	0, 2, 10, 10, 2, 0, 2, 1, 3, 3,
	3, 0, 2, 1, 3, 5, 0, 2, 3, 1,
	3, 1, 1, 1, 3, 1, 1, 1, 1, 0,
	3, 3, 0, 3, 3, 0, 1, 3, 0, 1,
	3, 0, 2, 1, 2, 3, 4, 3, 3, 1,
	0, 1, 1, 0, 1, 8, 5, 7, 0, 3,
	8, 5, 1, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 4, 1, 3, 1,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 1, 3, 3,
	1, 2, 2, 2, 1, 2, 2, 3, 4, 4,
	6, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 2, 2, 0, 1,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 3, 4, 4, 1, 2,
	9, 7, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 10, 7, 4, 4,
	1, 3, 1, 6, 3, 3, 3, 1, 1, 1,
	3, 2, 4, 5, 5, 6, 5, 5, 3, 2,
	2, 1, 3, 4, 3, 7, 5, 8, 2, 2,
	1, 3, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 2, 1, 3, 2, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 6, 3, 3,
	1, 1, 7, 7, 8, 8, 0, 4, 7, 0,
	3, 0, 2, 0, 1, 1, 1, 1, 4, 2,
	2, 3, 3, 4, 5, 3, 4, 4, 2, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 2, 5, 5, 0,
	2, 7, 0, 1, 0, 1, 5, 5, 3, 3,
	2, 4, 4, 4, 4, 4, 1, 1, 1, 3,
	3, 1, 1, 1, 6, 0, 1, 1, 1, 1,
	5, 5, 0, 1, 1, 3, 3, 3, 4, 6,
	7, 4, 4, 7, 8, 3, 3, 3, 4, 0,
	2, 2, 0, 2, 2, 1, 1, 1, 1, 0,
	1, 4, 4, 5, 4, 3, 1, 3, 1, 1,
	3, 5, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 1, 3, 1, 4, 6, 6, 4, 4,
	4, 4, 4, 3, 6, 3, 5, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 5, 1, 3, 2,
	1, 5, 4, 4, 2, 0, 5, 4, 0, 1,
	3, 3, 1, 3, 1, 3, 1, 3, 4, 0,
	1, 0, 1, 1, 3, 1, 1, 0, 4, 1,
	3, 2, 1, 0, 8, 0, 4, 7, 4, 0,
	2, 0, 2, 0, 2, 0, 4, 1, 3, 1,
	1, 6, 4, 5, 7, 4, 5, 0, 1, 3,
	8, 0, 6, 0, 4, 6, 1, 1, 1, 1,
	1, 2, 3, 1, 3, 6, 0, 3, 0, 1,
	2, 4, 4, 0, 1, 3, 1, 3, 3, 0,
	1, 1, 0, 2, 2, 0, 2, 3, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 7, 7, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 2, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 3, 1, 1, 1, 4, 4, 4,
	3, 2, 2, 2, 3, 2, 3, 4, 1, 3,
	4, 0, 2, 1, 1, 2, 2, 0, 1, 2,
	4, 1, 3, 1, 3, 2, 3, 1, 4, 3,
	0, 1, 1, 2, 5, 2, 2, 2, 0, 2,
	3, 3, 0, 1, 3, 1, 3, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	7, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 14, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 4, 1, 1, 1, 1, 0, 1,
	2, 9, 9, 7, 1, 2, 3, 3, 3, 0,
	4, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	4, 1, 1, 3, 4, 3, 0, 1, 1, 1,
	0, 2, 7, 8, 8, 0, 3, 3, 0, 3,
	0, 3, 0, 5, 1, 3, 0, 3, 3, 0,
	2, 9, 6, 0, 2, 2, 3, 3, 4, 4,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	2, 2, 6, 0, 4, 1, 1, 0, 3, 0,
	1, 1, 2, 4, 4, 4, 0, 1, 8, 2,
	4, 4, 4, 9, 0, 2, 11, 9, 11, 8,
	6, 9, 7, 10, 2, 2, 9, 4, 5, 3,
	0, 4, 1, 3, 0, 3, 5, 10, 0, 2,
	0, 2, 0, 3, 2, 4, 3, 0, 2, 1,
	0, 2, 3, 0, 2, 3, 0, 2, 1, 0,
	3, 2, 4, 3, 0, 1, 0, 1, 1, 0,
	6, 0, 3, 5, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 4, 6, 5, 0, 2, 0, 2, 4, 5,
	4, 5, 1, 5, 6, 5, 0, 3, 0, 1,
	1, 3, 3, 3, 0, 4, 1, 3, 3, 3,
	0, 1, 1, 3, 2, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 5, 4,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 7, 9,
	7, 9, 2, 1, 7, 9, 7, 9, 8, 5,
	0, 1, 0, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 3, 1, 3, 5, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 1, 1, 2, 5, 6,
	8, 6, 6, 6, 1, 1, 1, 1, 1, 1,
	4, 4, 4, 7, 9, 7, 7, 7, 9, 7,
	7, 0, 2, 0, 1, 1, 2, 4, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 2, 2, 2,
	0, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 5, 0, 1, 3, 0,
	1, 0, 2, 0, 2, 0, 1, 6, 8, 8,
	6, 6, 5, 5, 5, 6, 6, 6, 6, 5,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	1, 1, 1, 4, 4, 6, 8, 6, 4, 5,
	4, 4, 4, 3, 4, 6, 6, 7, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 8, 4, 2, 3,
	2, 4, 2, 2, 4, 6, 2, 2, 4, 6,
	4, 2, 4, 4, 4, 0, 1, 2, 3, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 3, 0, 1, 1, 3, 1,
	3, 3, 3, 3, 3, 2, 1, 1, 1, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 1,
	3, 4, 4, 5, 4, 5, 3, 4, 5, 6,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 2, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 4,
	4, 1, 2, 3, 5, 1, 1, 3, 0, 1,
	0, 3, 0, 3, 3, 0, 3, 5, 0, 3,
	5, 0, 1, 1, 0, 1, 1, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -559, -562, -2, -5, 617, -1, -4, -110, -84,
	-7, -112, -113, -8, -108, -9, -10, -12, -88, -103,
	-105, -107, -106, -46, -11, -102, -79, -80, -90, -96,
	-99, -100, -101, -114, -109, -111, -154, -115, -116, 607,
	-85, -86, -87, -32, -31, -30, -29, -137, -142, 613,
	446, 14, 495, -14, -15, -507, -16, 258, -314, -315,
	-316, -318, -563, -47, -48, -49, -57, -58, -59, -60,
	-61, -71, -72, -73, -50, -51, -52, -55, -53, -64,
	-63, -65, -66, -67, -68, -69, -70, -54, -140, -141,
	-74, -56, -75, -77, -76, -82, -78, -83, -139, -144,
	-13, 233, -81, 76, -91, -92, -93, -94, -95, -97,
	-98, 370, 376, 433, 606, 61, -155, -157, 623, 624,
	158, 159, 161, 162, -33, -34, -35, -36, -37, -38,
	-40, -39, -41, -42, -43, -44, -45, 229, 16, 538,
	-17, -20, -18, -21, -19, -27, -28, -26, -23, -25,
	-138, -24, -143, -22, 253, 252, 38, 319, 320, 321,
	374, 251, 230, 15, 31, 42, 350, -156, 82, 530,
	531, 533, 231, -158, 13, 628, -6, -3, -2, -124,
	-128, -132, -135, -136, -133, -134, -4, -110, 116, 243,
	608, -311, 366, 609, 611, 610, 85, 93, -304, -306,
	446, 258, 370, 376, 606, 624, 543, 544, 545, 546,
	547, 548, 549, 550, 552, 553, 554, 555, 556, 557,
	558, 568, 569, 559, 560, 561, 562, 563, 564, 565,
	566, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 498, 593, 594, 595, 596,
	526, 551, 587, 588, 589, 590, 348, 349, 535, 270,
	294, 401, 300, 307, 158, 177, 171, 199, 191, 531,
	166, 274, 312, 275, 92, 161, 481, 106, 458, 430,
	164, 289, 291, 293, 527, 528, 360, 296, 525, 295,
	297, 299, 529, 276, 351, 187, 182, 288, 272, 180,
	277, 40, 278, 204, 279, 280, 540, 454, 347, 460,
	304, 52, 428, 181, 455, 292, 457, 208, 212, 472,
	473, 175, 176, 462, 475, 203, 206, 207, 250, 344,
	345, 43, 537, 262, 476, 210, 202, 198, 484, 308,
	306, 201, 174, 197, 273, 65, 214, 213, 215, 424,
	425, 426, 427, 281, 282, 364, 471, 194, 183, 352,
	167, 23, 479, 257, 459, 377, 283, 301, 309, 209,
	211, 264, 269, 539, 530, 432, 268, 305, 477, 179,
	261, 290, 256, 480, 168, 533, 379, 284, 162, 298,
	474, 483, 64, 392, 173, 165, 247, 159, 266, 271,
	285, 286, 287, 524, 311, 310, 302, 532, 195, 263,
	200, 185, 172, 196, 160, 265, 482, 393, 604, 350,
	411, 193, 190, 267, 240, 478, 461, 163, 415, 394,
	188, 313, 600, 601, 602, 365, 343, 314, 315, 186,
	254, 452, 453, 318, 421, 334, 395, 431, 402, 396,
	221, 222, 322, 464, 466, 205, 603, 323, 324, 325,
	456, 326, 327, 328, 329, 369, 56, 58, 94, 96,
	625, 626, 63, 29, 355, 358, 390, 397, 336, 605,
	536, 333, 337, 338, 359, 25, 413, 381, 417, 416,
	48, 49, 50, 53, 54, 55, 57, 59, 60, 51,
	523, 374, 387, 485, 45, 47, 384, 27, 361, 412,
	434, 332, 414, 445, 46, 443, 444, 465, 26, 363,
	362, 62, 44, 420, 422, 423, 316, 330, 372, 614,
	486, 367, 383, 386, 368, 335, 357, 388, 67, 66,
	380, 615, 375, 373, 331, 541, 542, 339, 567, 353,
	429, 520, 519, 518, 517, 516, 515, 514, 513, 319,
	320, 321, 398, 399, 400, 410, 403, 404, 405, 406,
	407, 408, 409, 448, 449, 616, 467, 469, 470, 468,
	235, 627, 354, 238, 618, 619, 95, 620, 622, 621,
	28, -391, -389, -311, 531, 606, 376, 530, 533, 370,
	350, 624, 374, 258, 319, 320, 321, 446, -198, -311,
	627, -164, 39, -211, -311, -164, -81, -15, -14, -156,
	-157, -211, 237, -319, 24, 428, -89, 429, 233, 82,
	77, -311, -9, -101, -8, -108, -79, -154, 433, -317,
	-311, 319, 319, -317, 237, -311, 268, 409, -443, 243,
	-395, -368, 269, -394, -370, -397, -371, 32, 229, 231,
	230, 265, 16, 374, 239, 14, 13, 375, 251, 25,
	26, 28, 15, 376, 378, 29, 379, 382, 383, 384,
	42, 387, 388, 258, 85, 93, 88, 276, -197, -311,
	-345, -337, 113, -340, -332, -333, -335, -486, -480, -330,
	82, 140, 141, 148, 114, -334, -425, 36, 116, 547,
	551, 587, 496, -286, -287, -288, -289, -290, -291, -311,
	-481, -479, 88, 97, 99, 103, 104, 102, 100, 152,
	184, 101, 89, 153, -157, 85, -502, 557, -305, 580,
	593, 594, 595, 596, 579, 61, -450, -459, 236, -457,
	151, 189, 254, 185, 14, 146, 421, 186, 588, 589,
	590, 554, 576, 498, 558, 568, 583, 549, 550, 552,
	544, 545, 546, 548, 559, 561, 575, -460, 571, 581,
	582, 567, 591, 592, 584, 585, 586, 622, 87, 86,
	574, 573, 560, 555, 556, 562, 543, 553, 563, 564,
	572, 577, 578, 358, 106, 359, 360, 488, 351, 361,
	243, 428, 70, 362, 363, 364, 365, 366, 495, 367,
	71, 368, 357, 258, 411, 369, 188, 205, 500, 499,
	501, 492, 489, 487, 490, 491, 493, 494, 565, 566,
	570, -117, -118, 598, -553, -279, -554, 6, 7, 8,
	9, -555, 153, -544, 430, 539, 88, 163, 160, -382,
	163, 112, 168, 167, -382, 322, 264, -359, -147, 348,
	411, 326, 94, 268, -362, -360, 527, -445, 316, 312,
	288, 238, 109, -148, 248, 247, 107, 488, 236, 385,
	307, 56, 58, -518, -519, 226, 227, 228, -509, 521,
	-508, -311, 360, 96, 27, 237, 371, 264, 466, 464,
	465, 467, 468, 469, 470, -62, -461, -442, 461, 460,
	-323, 453, 459, 451, 463, 454, 349, 328, 327, 229,
	618, 528, 522, -301, 395, 431, 485, 486, 372, 432,
	472, 474, 455, 106, 192, 189, 238, 240, 237, 348,
	488, 411, 94, 326, -518, 160, 472, 474, 268, 409,
	41, -388, 421, -387, -389, 473, 484, 86, 87, 471,
	-301, 106, 452, 452, -553, -279, -155, -157, -111, -507,
	529, 529, 529, 238, 348, 411, 268, 239, 237, 524,
	527, 240, 488, 236, 319, 371, 264, 326, 94, -444,
	-515, 32, -451, 223, 224, 225, 33, 34, -1, 120,
	628, -337, -337, -6, 631, -6, -337, -311, -311, 155,
	-217, -221, -218, -220, -219, -223, -222, 189, 190, 151,
	193, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	206, 207, 204, 31, 205, 254, 185, 186, 187, 188,
	208, 171, 191, 536, 216, 172, 217, 173, 218, 174,
	219, 175, 176, 220, 177, 180, 181, 182, 183, 179,
	154, 82, 154, 88, -180, 260, -211, 154, -180, -553,
	-173, -174, 11, -211, -292, -311, 430, 123, -89, 77,
	-89, 429, 77, -510, -511, -512, -514, 233, 429, 428,
	-106, 154, 276, 17, -317, -317, 80, -211, -370, 268,
	-395, -368, 36, 79, 155, 241, 155, 79, 82, 372,
	348, 411, 373, 488, 237, 385, 240, 268, 386, 348,
	411, 237, 240, 488, 268, 348, 237, 240, 411, 268,
	386, 451, 452, 240, 27, 377, 380, 381, 452, -465,
	484, 155, 112, 109, 110, 111, -337, 130, -352, 123,
	124, 125, 126, 127, 128, 129, 137, 136, 147, 140,
	141, 142, 143, 144, 145, 146, 138, 139, 133, 113,
	131, 135, 132, 115, -157, -337, -345, 61, -335, -335,
	-335, -335, -425, -342, -337, 82, 82, 82, 82, 154,
	100, 88, -337, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, -458, 82, 82, -349, -350,
	82, 82, -330, -292, 82, 88, 88, 82, 82, 82,
	88, 82, 82, 82, -350, -350, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, -174, 155, -173, 82, -173, -174, -158, -157, 32,
	33, 32, 33, 32, 33, 32, 33, -556, 615, 82,
	97, 625, 221, 477, 538, 166, 167, 168, -196, -311,
	-198, 371, 240, 524, 240, -148, -357, 243, -357, -357,
	-357, -357, 239, -357, 24, 237, 237, 237, 237, -357,
	495, 123, 123, 59, -520, 170, 155, -509, -179, 82,
	-322, 131, 135, -322, 24, 266, 266, 266, -322, 306,
	-564, -565, 17, 133, -320, -565, -320, -320, -322, -566,
	239, 462, 43, 267, 266, -175, -176, 22, -175, 456,
	452, -412, 457, 458, -324, -565, -323, -322, -322, -323,
	-322, -322, -322, 32, 237, 240, 488, 326, 619, -564,
	-564, 31, 31, -443, -443, -211, -443, 522, -302, -311,
	-443, -443, -443, -521, 242, -550, -549, 475, -552, 477,
	160, -389, 160, -389, -370, 268, 268, 155, 123, 24,
	-390, 123, 134, -389, -389, -390, -390, -234, 41, -310,
	151, -311, 88, -234, 41, -547, -546, -211, -174, -158,
	-157, 83, 83, 83, 532, 532, 532, -443, -443, -443,
	-443, -443, -445, -443, -443, -443, -443, -443, -317, -188,
	-311, -198, 243, -443, -443, -159, -160, 142, -337, -311,
	-159, -3, -126, -125, 117, 118, 120, 609, 366, 608,
	612, 606, -389, 41, -438, 393, 392, -432, -434, 82,
	-433, 82, -433, -433, -433, -433, -433, 82, 82, -435,
	82, -435, -435, -432, -436, 82, -436, -437, 82, -437,
	-436, -311, -343, -345, -311, 39, -454, 61, -154, 82,
	31, 82, -311, -455, 61, -154, 82, 31, -174, -119,
	39, -176, 21, 154, 97, 88, -106, -89, 77, -106,
	83, 155, -513, 103, 104, -516, 203, 195, -311, -104,
	88, -7, -8, -9, -10, -46, -79, -154, -482, -480,
	82, 32, 420, 79, 17, -396, 237, 488, 371, 264,
	240, 348, -394, -377, -374, -372, -310, -370, -373, -372,
	-399, -292, 452, -120, 435, 434, 318, -337, -337, -337,
	-337, -337, 102, 113, 343, 103, 104, -332, -353, 32,
	314, 315, -333, -333, -333, -333, -333, -333, -333, -333,
	-333, -333, -333, -333, -341, -351, -425, 82, 133, 131,
	135, 132, 115, -335, -335, -333, -333, 83, 155, -506,
	-505, 117, -337, -337, -337, -337, -311, -503, -504, 502,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	362, 357, 363, 361, 351, 369, 364, 365, 188, 519,
	520, 513, 514, 515, 516, 517, 518, -343, -343, -337,
	-503, -343, -285, 33, 32, -345, -345, -345, 83, -337,
	-517, 341, 340, 342, -177, -311, -343, 83, 83, 83,
	97, -345, -345, -343, -333, -343, -343, -343, -343, -504,
	-285, -285, -285, -285, 142, -345, -345, -285, -285, -285,
	-285, 142, -285, -285, -285, -285, -285, -285, -285, -285,
	-285, -285, 83, 83, 83, 142, -345, -175, -118, -463,
	-462, -337, 41, -119, -176, -557, 616, 82, -292, -545,
	88, 88, 629, 478, 479, 164, 167, 166, 35, 82,
	-188, -357, -357, -357, -523, -311, 113, -378, -375, -372,
	-311, -311, -368, -311, -311, -211, -357, -357, -357, -357,
	-211, -245, 53, 54, 55, -372, -149, 56, 57, -521,
	-508, 35, -178, -311, -275, 18, -335, -335, -372, 268,
	-564, -322, -322, -303, -302, -324, -319, -324, -324, -275,
	-320, -322, -322, -337, -324, -320, -275, -311, 452, -275,
	-275, -412, -322, -321, -311, -321, -357, -302, -303, -303,
	-211, -211, -256, -261, -257, -262, 260, 234, 355, 356,
	232, 230, 11, 231, -269, 307, -358, 496, -240, -241,
	77, 42, -243, 258, 397, 390, 270, 274, 92, 275,
	430, 276, 239, 278, 279, 280, 295, 297, 250, 281,
	282, 283, 421, 284, 159, 296, 285, 286, 287, 373,
	-235, 6, 329, 41, 51, 52, 444, 443, 541, 538,
	271, -523, -523, 31, 31, -378, -311, -311, -167, -162,
	-166, -163, -168, -278, -280, -165, 82, -211, -157, -311,
	155, 476, 478, 479, -550, -390, -550, -390, 32, 420,
	-393, 420, 32, -368, -387, 472, 474, -383, 88, 421,
	-373, -392, 79, 151, -462, -390, -390, -392, -392, 150,
	155, -548, 477, 478, 226, -175, 97, 97, 97, -213,
	-211, -523, -377, -368, -311, -443, -213, -213, -213, -311,
	-311, 82, 154, 36, -311, -311, -274, 155, -273, 17,
	-312, -311, 35, 88, 154, -274, -127, -125, 119, -337,
	-6, 608, -337, -6, -6, -337, -6, -337, -441, 394,
	97, 97, -294, 88, -294, 97, 97, 97, 83, 88,
	-381, 79, -456, -346, -501, 598, -182, 83, -177, -499,
	-500, -177, -181, -311, -456, -182, 83, -499, -175, 599,
	-119, -172, -171, -337, -311, 24, -106, -89, -511, 154,
	155, -178, -396, -376, -373, -398, 142, -311, -384, 155,
	538, 632, 86, 241, -537, -536, 412, 83, 155, -466,
	242, 495, 88, 629, 428, 221, 222, 102, 343, 103,
	104, -425, -345, -341, -335, -335, -333, -333, -339, 255,
	-339, 112, -337, -336, -505, 119, -337, 35, 155, 35,
	155, 80, 154, 83, 83, 17, 17, 83, -337, 83,
	83, 83, 83, 17, 17, -337, 83, 154, 83, 83,
	83, 83, 80, 83, 155, 83, 83, 83, 83, 155,
	-345, -345, -337, -345, 83, 83, 83, -337, -337, -337,
	-345, 83, -337, -337, -337, -337, -337, -337, -337, -337,
	-337, -337, -406, 447, -406, -406, 155, 155, 155, 83,
	-119, 82, 97, 155, 626, -298, -297, 88, 165, 168,
	168, 167, -197, -199, -200, -201, -202, -203, 133, 156,
	157, 82, -211, -211, -211, -526, 398, 36, -538, 155,
	41, -536, 488, -145, 318, -361, 80, -152, 17, 538,
	-211, -211, -211, -211, -224, 35, 17, -161, -212, -311,
	82, 83, 155, -337, -369, 80, -311, -303, -275, -275,
	-324, -275, -275, 155, 23, -322, -324, -324, -320, 154,
	-302, -431, 35, -179, 155, 21, 260, -210, -308, -207,
	-209, 245, -327, -208, 248, -495, 246, 244, 107, 249,
	303, 108, 239, -308, -308, 245, -244, 241, 35, -308,
	-259, 239, 346, 303, 246, 21, 260, -258, 239, 108,
	-311, 245, 249, 246, 244, -307, 123, -301, 150, 241,
	43, 373, -307, 542, 260, -307, -307, -307, -307, -307,
	-307, -307, 277, 277, -307, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, 160, -307, -307, -307, -307,
	-307, -307, 82, 272, 273, -527, 398, 31, 354, 354,
	-538, 31, -153, 348, 31, -281, -282, -283, -284, 68,
	72, 74, 69, 70, 71, 75, 31, 155, -309, -313,
	35, -311, 88, -309, -157, -162, -167, -309, 82, -549,
	-551, 480, 477, 483, -392, -392, 241, 82, 123, -392,
	-392, 41, -310, -546, 484, 478, -119, 155, 79, -213,
	-189, -190, -191, -192, -217, -292, 190, 193, 195, 196,
	197, 198, 199, 200, 201, 202, 203, 206, 207, 204,
	205, 254, 185, 186, 187, 188, 208, 171, 191, 536,
	172, 173, 174, 175, 176, 177, 180, 181, 182, 183,
	179, -311, -198, -275, -160, -162, -311, 88, -311, 142,
	-275, 120, -6, 118, -131, -130, -129, 121, 606, 612,
	120, 120, 120, 83, 83, 83, 155, 83, 83, 83,
	155, 83, 155, -469, 457, 40, 155, 82, 83, 155,
	61, 155, 123, 83, 155, 83, 61, -119, 88, 155,
	-169, 37, 38, 154, 430, -311, -480, 83, -398, 155,
	241, 154, 154, -374, 376, -310, -376, 21, 538, -292,
	39, -298, 123, 629, -311, 83, -339, -339, 112, -335,
	-332, 83, 120, -337, 118, -215, -217, 392, 393, -337,
	-215, -216, -222, 151, 189, 254, 188, 187, 185, 392,
	393, -234, -311, -337, -337, 83, -337, -337, 17, -311,
	-234, -333, -337, -174, -174, 83, 83, -405, -406, -405,
	-405, 83, 83, 83, 83, -405, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 82, 97, 99, 97,
	99, -462, -558, 63, 614, 62, 420, 102, 308, 155,
	97, 88, 630, 155, 123, 168, 384, 83, 155, -292,
	-189, -179, 82, -179, -529, 459, 400, 410, -307, -329,
	-328, 350, 42, -448, 421, 406, 407, -375, 268, -311,
	-535, 95, 123, 79, 333, 337, 338, 334, 335, 336,
	-355, -356, -354, -358, -523, 82, 82, -154, 35, 82,
	82, 35, -426, 323, -217, -211, -161, -311, 17, 155,
	-522, 154, -1, -311, -368, -322, -275, -337, -337, -275,
	-322, -322, -324, -311, -426, -217, 35, -257, 234, 231,
	-402, 305, 306, -403, -416, 308, -418, 82, -214, -292,
	-208, -494, -495, -357, -311, 108, -494, 108, 82, -214,
	-292, -292, -260, -321, -292, -311, -311, -311, -311, -265,
	-264, -292, -267, 32, -268, -311, -311, -311, -311, 108,
	-311, 108, -239, 41, 48, 49, 50, -307, -307, 192,
	-242, 41, 420, 422, 423, -267, 97, 97, 97, 97,
	88, 88, 88, -307, -307, 97, 88, -313, 88, -496,
	167, 45, 46, 97, 97, 97, 97, 41, 88, -246,
	41, 288, 292, 289, 290, 291, 88, 97, 41, 97,
	41, 97, 41, -311, 82, -497, -498, 88, -529, -307,
	354, -389, 123, -329, -534, 318, -146, 92, 32, -183,
	234, 231, -523, -380, -379, -292, -166, -166, -166, -166,
	68, 68, 68, 73, 68, 73, 68, -283, -380, -168,
	-179, -313, 83, -543, -542, -541, -539, 76, 242, 77,
	-343, 477, 481, 482, -376, -325, 88, -383, -187, 24,
	-211, -211, -447, 298, 299, 83, 155, -217, -277, 19,
	154, -277, 116, -6, -127, -129, -337, -6, -337, 608,
	366, 609, 88, 97, 97, -477, 441, 436, 438, 108,
	-346, -464, -463, 61, -154, -177, -456, -500, -462, -311,
	61, -154, -456, -187, -469, -171, -170, 44, -311, 97,
	17, -373, -368, 142, 142, -311, 377, -384, 88, 399,
	88, 237, 630, 88, -298, -332, -337, 83, -225, 176,
	175, -225, 35, 83, 83, -433, -433, -432, -435, -432,
	-225, -225, 83, 83, 24, 83, 83, 83, -337, 83,
	83, 155, -452, 497, -453, 569, -405, -405, -405, -405,
	-405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
	-405, -405, -348, -347, 260, 442, 621, 621, 442, 621,
	621, 83, 155, -503, 155, -297, 88, 88, 88, -201,
	-217, 83, 35, -204, -205, -206, -214, -207, -209, 35,
	-530, 92, -524, 88, -311, -531, 92, 401, 153, 352,
	41, 402, 403, 418, 347, 97, 97, 408, -525, -311,
	-153, -533, 52, 123, 88, -211, -354, -301, 150, 279,
	326, -272, -271, -311, 88, -204, -154, -204, -204, -154,
	-427, 325, 21, 97, 141, -180, 80, 154, -162, -212,
	-311, 142, 83, -275, -275, -275, -322, -427, -154, -414,
	309, 82, -412, 82, -412, 108, 334, -419, -417, 260,
	-263, 45, 47, -217, -492, -311, -490, -492, -311, -490,
	-490, -357, -337, -263, -214, 241, 31, 231, -266, 331,
	332, 337, -385, 304, 113, -385, 155, -169, 155, -311,
	-234, -234, 31, 88, 88, -213, 83, 155, 123, -530,
	-524, 123, -390, 88, -531, -535, 123, 88, 155, -183,
	-183, -275, 155, 123, -185, -184, 79, 80, -186, 79,
	-184, 68, 68, -275, -541, -540, 24, -495, -495, -495,
	83, 83, 15, -191, 41, -276, 20, 21, 142, -276,
	120, 118, 120, 120, -311, 83, 83, -439, 600, -473,
	-475, 436, 21, 21, 15, 242, 83, -456, -456, -477,
	45, 46, -368, -384, 421, -211, 155, 630, -215, -337,
	83, -337, 83, 88, 83, 88, -174, 21, 83, 155,
	83, 83, 83, 155, 83, 83, -337, 83, -503, 235,
	-154, 83, 155, -154, 88, -528, 412, 88, 88, 97,
	41, 97, 153, 404, -449, -146, -532, 92, 123, 629,
	82, -307, -307, -307, -311, 83, 155, -307, -307, 83,
	83, 83, -232, 538, -428, 259, 97, 141, 97, 141,
	97, -309, -162, -311, -275, -522, 154, -275, -428, -404,
	310, 97, -333, 82, -333, 82, -413, 307, 82, 83,
	155, -311, -292, -229, -228, -226, 102, 113, 41, 390,
	-227, 92, 150, 293, 296, 295, 271, 294, -255, -326,
	79, 396, 331, 332, -358, 600, 526, 244, 107, 108,
	378, -327, 82, 82, 80, 313, 82, 82, -492, 83,
	-263, -292, 41, -266, 41, 344, 304, -264, -311, 150,
	-234, 83, -498, 88, -528, 88, -392, -533, 88, -523,
	-174, -379, -462, -337, 82, -337, 82, 68, 11, 19,
	-330, -337, -345, 243, -6, 609, 366, -248, 601, 88,
	21, 88, -471, 88, -380, -439, -122, -467, -412, 276,
	83, 83, 83, -405, -405, -408, -407, -411, 442, 305,
	450, -345, 88, 88, 83, 83, -193, -217, -150, 538,
	-232, -206, -150, 21, 538, 351, 41, 97, 41, 405,
	123, 103, 104, -299, -300, 88, -363, -365, -292, 82,
	-234, -236, -310, 151, 88, -271, -330, -330, -230, -154,
	35, -231, -269, -358, -121, -120, -230, 82, -429, 159,
	97, 141, 97, 97, -275, -275, -429, -418, 21, 83,
	-399, 83, -399, 82, 123, -333, -417, -420, 61, -226,
	102, -333, 88, -236, -237, 41, 292, 288, 123, 123,
	-238, 41, 272, 273, -247, 82, 303, 15, 192, 82,
	108, 108, -211, -363, -363, -493, 333, 334, 335, 339,
	337, 338, 336, -493, -363, -363, 82, -386, -385, -333,
	-307, -307, 150, -532, -175, -178, -491, -311, 244, 21,
	21, -311, -311, -295, 602, 97, 88, 438, -248, -440,
	603, -476, 441, -470, -468, 436, 437, 438, 439, 123,
	83, -410, 115, 404, 408, -331, -334, 97, 99, 184,
	153, 83, 83, 537, -151, 60, 484, 88, 399, 88,
	351, 88, 630, 155, 123, 83, 155, -432, -337, -400,
	260, -154, 155, -269, -301, -122, -400, -233, -270, -311,
	88, -446, 167, 324, 538, 97, 141, 97, -174, -430,
	167, 324, -403, 83, 83, 83, -399, 97, 83, -424,
	-421, 82, -269, 262, 133, 88, 88, 97, 82, -457,
	31, 88, -364, 82, 83, 83, 83, 83, -363, 97,
	-234, -307, 83, 83, 155, 82, 21, -295, 88, -478,
	242, -474, -475, 440, -468, 21, 438, 21, 21, 88,
	-409, -410, 408, -331, -334, 598, 448, 448, 448, -195,
	-311, 303, 421, -300, 88, -366, -365, -169, 83, -401,
	312, 21, -269, -307, -401, 83, 155, -307, -307, 324,
	97, 141, 97, -175, 324, -415, 311, 83, -424, -269,
	-423, -422, 310, 263, 82, 83, -337, -349, -307, 83,
	-250, -249, 534, -363, -366, 80, -366, 80, -366, 80,
	-366, 80, 83, -234, -311, 244, -296, -311, -471, -485,
	82, 97, -473, -472, -474, 21, -471, 21, -471, -471,
	-123, 155, 112, 449, 449, 449, -194, 35, 443, 377,
	-367, 250, 344, 345, 92, 538, 331, 332, -169, 21,
	-402, -234, -270, -330, -330, 97, 97, 83, 155, -311,
	259, 82, -344, -338, -337, 259, 83, -311, -254, -252,
	-253, 79, 455, 301, 302, 83, -493, -493, -493, -493,
	-255, 83, 155, -489, 31, 83, -484, -483, -293, -479,
	-311, 441, 442, 88, -471, 445, -409, 88, -307, -307,
	88, 88, 330, -292, 82, -414, -422, -421, -344, 83,
	155, -385, -253, 79, -252, 79, 16, 15, -366, -366,
	-366, -366, -311, -488, -487, -486, 83, 155, 154, 123,
	-561, -560, 620, 97, 97, -311, -399, -404, 83, -338,
	-251, 298, 299, 31, 167, -251, 155, 123, -483, -311,
	88, 88, 83, -418, 102, 41, 300, -487, 41, -337,
	154, -311,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	263, 264, 265, 858, 859, 860, 861, 862, 863, 0,
	0, 0, 0, 617, 618, 0, 584, 0, 0, 0,
	0, 0, 0, 474, 475, 476, 477, 478, 479, 480,
	481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
	491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 503, 358, 359, 360, 361, 362, 363, 364,
	365, 0, 288, 284, 209, 210, 211, 212, 213, 295,
	296, 451, 0, 0, 0, 0, 699, -2, 56, 0,
	277, 0, 268, 268, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, -2, 630, 0,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 347, 348, 349, 343, 344, 346,
	345, -2, 0, 630, 0, 0, 0, 707, 0, 0,
	0, 0, 0, 750, 772, 23, 0, 7, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 0, 0,
	19, 0, 19, 0, 0, 0, 1255, 1256, 1257, 1258,
	2033, 2003, -2, 1777, 1754, 1928, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
	2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
	2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
	2106, 2107, 2108, 2109, 2110, 2111, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, -2, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, -2,
	-2, -2, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 0, 261, 259, 1724, 1754, 1777, 1831, 1842, 1843,
	1877, 1928, 1960, 2003, 2019, 2020, 2021, 2033, 0, 881,
	0, 677, 0, 682, 1207, 677, 289, 619, 620, 707,
	733, 582, 0, 325, 0, 1768, 329, 2010, 0, 0,
	0, 579, 319, 320, 321, 322, 323, 324, 0, 0,
	857, 0, 0, 315, 0, 283, 1833, 2032, 0, 0,
	0, 0, 0, 153, 991, 155, 993, 159, 166, 0,
	0, 171, 172, 175, 176, 177, 178, 179, 0, 183,
	0, 185, 188, 0, 190, 191, 0, 194, 195, 196,
	0, 206, 207, 208, 994, 995, 996, -2, 84, 879,
	1682, 1569, 0, 1576, 1589, 1600, 1335, 1336, 1337, 1338,
	0, 0, 0, 0, 0, 1345, 1346, 0, 1373, 2066,
	2107, 2108, 0, 1354, 1355, 1356, 1357, 1358, 1359, 93,
	105, 106, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 0,
	1630, 1631, 1632, 1540, 1322, 1255, 0, 2075, 0, 2097,
	2102, 2103, 2104, 2105, 2096, 0, 0, 1525, 0, 1515,
	0, 0, -2, -2, 0, 0, 1902, -2, 2109, 2110,
	2111, 2072, 2093, 2101, 2076, 2077, 2100, 2068, 2069, 2070,
	2063, 2064, 2065, 2067, 2079, 2081, 2092, 0, 2088, 2098,
	2099, 2008, 0, 0, 0, 0, 0, 2049, 107, 108,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1536, -2, -2,
	1539, -2, 1542, -2, -2, -2, -2, 1547, 1548, -2,
	1550, -2, -2, -2, -2, -2, -2, -2, 1527, 1528,
	1529, 1530, 1519, 1520, 1521, 1522, 1523, 1524, -2, -2,
	-2, 733, 808, 0, 733, 0, 708, 755, 758, 761,
	764, 711, 0, 0, 57, 58, 0, 278, 279, 267,
	269, 0, 273, 0, 266, 0, 0, 0, 0, 1027,
	1027, 1027, 1027, 1027, 0, 1027, 0, 0, 0, 0,
	0, 1027, 0, 914, 998, 999, 1000, 1025, 1026, 1095,
	0, 0, 0, 635, 631, 632, 633, 634, 721, 0,
	723, 726, 559, 559, 506, 0, 0, 0, 559, 0,
	520, 512, 0, 0, 0, 559, 0, 0, 728, 728,
	0, 562, 569, 559, 559, -2, 559, 559, 559, 0,
	0, 1039, 526, 527, 528, 512, 512, 531, 532, 533,
	543, 544, 570, 1706, 0, 0, 451, 451, 0, 451,
	0, 451, 451, 451, 637, 1872, 1775, 1848, 1833, 2032,
	0, 234, 1902, 239, 0, 1776, 1795, 0, 0, 1813,
	0, -2, 0, 305, 733, 0, 0, 707, 0, 0,
	0, 0, 0, 451, 451, 451, 451, 451, 1094, 451,
	451, 451, 451, 451, 0, 0, 0, 451, 451, 0,
	0, 773, 774, 769, 770, 771, 775, 776, 5, 6,
	19, 0, 0, 0, 0, 0, 0, 63, 62, 0,
	1683, 1701, 1635, 1636, 1637, 1688, 1639, 1692, 1692, 1692,
	1692, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676,
	1692, 1692, 0, 0, 1681, 1659, 1690, 1690, 1690, 1688,
	1685, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1695, 1695, 1698, 1698, 1695,
	0, 1565, 0, 0, 0, 0, 681, 0, 0, 733,
	-2, 0, 0, 583, 326, 1259, 0, 0, 330, 0,
	331, 0, 0, 0, 350, 0, 353, 338, 339, 340,
	334, 0, 133, 0, 317, 318, 0, 0, 285, 0,
	0, 0, 452, 0, 0, 0, 0, 0, 0, 163,
	160, 167, 170, 180, 187, 0, 199, 201, 204, 161,
	168, 173, 174, 181, 202, 162, 164, 165, 169, 203,
	205, 182, 186, 200, 184, 189, 192, 193, 198, 0,
	134, 0, 0, 0, 0, 0, 1575, 0, 0, 1608,
	1609, 1610, 1611, 1612, 1613, 1614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 1569, 0, 0, 1341, 1342,
	1343, 1344, 1347, 0, 1374, 0, 0, 0, 0, 0,
	1629, 1633, 0, 1565, 1565, 0, 1565, 1561, 0, 0,
	0, 0, 0, 0, 1565, 1498, 0, 0, 1500, 1516,
	0, 0, 1502, 1503, 0, 1506, 1507, 1565, 0, 1565,
	1511, 1565, 1565, 1565, 1494, 1495, 0, 1561, 1561, 1561,
	1561, 0, 0, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
	1561, 1561, 1561, 1561, 1561, 1561, 1561, 0, 0, 0,
	0, 728, 0, 734, 0, -2, 0, 752, 754, 756,
	757, 759, 760, 762, 763, 765, 766, 713, 0, 0,
	59, 0, 0, 0, 0, 271, 0, 276, 0, 878,
	0, 0, 1027, 1027, 1027, 915, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1027, 1027, 1027, 1027, 0,
	1045, 0, 0, 0, 637, 636, 0, 722, 0, 0,
	781, 0, 0, 505, 0, 512, 559, 559, 518, 519,
	514, 513, 565, 566, 562, 0, 562, 562, 781, 0,
	537, 538, 539, 559, 559, 545, 729, 0, 546, 547,
	562, 0, 567, 568, 781, 0, 0, 781, 781, 0,
	555, 556, 557, 559, 0, 0, 1027, 0, 575, 514,
	514, 1707, 1708, 0, 0, 1036, 0, 0, 0, 578,
	0, 0, 0, 0, 638, 214, 217, 0, 220, 0,
	1872, 0, 1872, 0, 227, 0, 0, 0, 0, 0,
	0, 257, 258, 0, 0, 0, 0, 248, 251, 1201,
	1202, 988, 989, 252, 253, 297, 298, 0, 728, 751,
	753, 747, 748, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 0, 613, 0,
	894, 615, 0, 0, 0, 789, 783, 785, 852, 93,
	789, 8, 80, 77, 0, 19, 0, 0, 19, 19,
	0, 19, 262, 0, 1704, 1702, 1703, 1638, 1689, 0,
	1664, 0, 1665, 1666, 1667, 1677, 1678, 0, 0, 1660,
	0, 1661, 1662, 1663, 1654, 0, 1655, 1656, 0, 1657,
	1658, 260, 0, 1566, 882, 0, 655, 669, 650, 0,
	658, 0, 1208, 639, 669, 641, 0, 658, 728, 705,
	0, 683, 0, 0, 327, 0, 335, 332, 0, 336,
	0, 0, 352, 354, 355, 356, 341, 342, 580, 313,
	314, 306, 307, 308, 309, 310, 311, 312, 316, 103,
	0, 286, 287, 0, 0, 0, 147, 148, 149, 150,
	151, 152, 154, 138, 602, 604, 980, 992, 0, 983,
	0, 157, 197, 130, 0, 0, 0, 1570, 1571, 1572,
	1573, 1574, 1579, 0, 1581, 1583, 1585, 1587, 0, 1605,
	-2, -2, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1590, 1603, 1604, 0, 0, 0,
	0, 0, 0, 1601, 1601, 1596, 0, 1339, 0, 1371,
	1375, 0, 0, 0, 0, 0, 94, 1560, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 0, 0, 1569,
	0, 0, 0, 1562, 1563, 0, 0, 0, 1453, 0,
	0, 1459, 1460, 1461, 0, 664, 0, 1526, 1499, 1517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 807, 809, 0,
	673, 675, 676, 702, 683, 709, 0, 0, 0, 55,
	60, 0, 1064, 280, 281, 0, 0, 275, 0, -2,
	0, 0, 0, 0, 0, 929, 0, 449, 974, 0,
	0, 0, 990, 1015, 1023, 0, 0, 0, 0, 0,
	1068, 916, 921, 922, 923, 917, 918, 924, 925, 0,
	724, 0, 0, 821, 504, 0, 560, 561, 509, 1833,
	514, 781, 781, 521, 515, 522, 564, 523, 524, 525,
	562, 781, 781, 730, 559, 562, 548, 563, 562, 551,
	552, 0, 558, 571, 576, 572, 0, 574, 529, 530,
	1070, 726, 368, 369, 370, 372, 0, 420, 420, 420,
	403, 420, 0, 0, 391, 1709, 0, 0, 0, 0,
	400, 1709, 0, 0, 1709, 1709, 1709, 1709, 1709, 1709,
	1709, 0, 0, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
	1709, 1709, 1709, 1709, 0, 1709, 1709, 1709, 1709, 1709,
	1187, 1709, 0, 1037, 410, 411, 412, 413, 418, 419,
	0, 446, 0, 0, 0, 449, 0, 963, 794, 0,
	795, 796, 792, 823, 847, 847, 0, 847, 827, 1207,
	0, 0, 225, 226, 215, 0, 216, 0, 228, 229,
	0, 231, 232, 233, 240, 1775, 1848, 235, 237, 0,
	0, 241, 254, 255, 256, 0, 0, 246, 247, 0,
	0, 300, 301, 303, 0, 683, 1040, 1041, 1042, 599,
	1205, 600, 601, 605, 0, 0, 608, 609, 610, 611,
	612, 896, 0, 0, 968, 969, 781, 0, 790, 0,
	786, 853, 0, 855, 0, 781, 0, 78, 19, 0,
	71, 68, 0, 0, 0, 0, 0, 1684, 1634, 1705,
	0, 0, 0, 1686, 0, 0, 0, 0, 61, 685,
	646, 0, 649, 666, 0, 670, 0, 0, 662, 654,
	659, 0, 0, 679, 640, 0, 0, 645, 683, 0,
	706, 735, 736, 739, 1260, 0, 337, 333, 351, 0,
	0, 0, 0, 141, 977, 0, 142, 146, 136, 0,
	0, 0, 982, 0, 979, 984, 0, 156, 0, 0,
	131, 132, 1055, 1064, 0, 0, 0, 1580, 1582, 1584,
	1586, 1588, 0, 1591, 1601, 1601, 1597, 0, 1592, 0,
	1594, 0, 1570, 0, 1376, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 0, 0, 1448, 0, 1450,
	1451, 1452, 1454, 0, 0, 0, 1458, 0, 1497, 1518,
	1501, 1504, 0, 1508, 0, 1510, 1512, 1513, 1514, 0,
	733, 733, 0, 0, 1415, 1415, 1415, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1360, 0, 1361, 1362, 0, 0, 0, 810,
	703, 0, 0, 0, 0, 0, 1062, 0, 282, 270,
	272, 0, 0, 0, 884, 885, 887, 0, 890, 891,
	892, 896, 726, 0, 726, 936, 1709, 1028, 453, 0,
	0, 976, 0, 952, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 1072, 0, 0, 0, 624, 628,
	23, 727, 0, 782, 507, 0, 508, 559, 516, 517,
	781, 540, 541, 0, 0, 781, 559, 559, 562, 0,
	573, 1072, 0, 0, 1036, 1138, 1106, 381, 0, 1216,
	1217, 421, 0, 1223, 1232, 1027, 1292, 0, 1232, 0,
	0, 1234, 1235, 0, 0, 0, 0, 404, 405, 0,
	390, 0, 0, 0, 0, 0, 0, 389, 0, 0,
	431, 0, 0, 0, 0, 0, 1710, 1709, 1709, 0,
	398, 399, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 1709, 1709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1178, 0, 0, 0, 0,
	0, 0, 0, 1193, 1194, 936, 1709, 0, 0, 0,
	453, 950, 959, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 813, 0, 0, 0, 0, 0, 726, 848,
	0, 850, 851, 825, -2, 0, 794, 830, 1565, 218,
	219, 0, 0, 224, 242, 244, 0, 0, 0, 243,
	245, 249, 250, 299, 302, 304, 745, 0, 0, 1096,
	0, 897, 898, 900, 901, 0, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1759,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 895, 616, 779, 784, 791, 854, 856, 94, 787,
	779, 0, 81, 19, 80, 72, 73, 0, 19, 0,
	0, 0, 0, 1694, 1693, 1679, 0, 1680, 1691, 1696,
	0, 1699, 0, 689, 0, 0, 669, 671, 0, 0,
	669, 0, 0, 678, 0, 0, 669, 745, 685, 0,
	742, 740, 741, 0, 0, 581, 104, 357, 0, 0,
	0, 0, 0, 603, 0, 981, 138, 0, 0, 158,
	0, 0, 0, 1064, 1059, 1564, 1593, 1595, 0, 1602,
	1598, 1340, 1348, 1372, 0, 0, 1378, 1390, 1390, 0,
	0, 0, 1381, 1692, 1692, 1384, 1688, 1690, 1688, 1390,
	1390, 0, 95, 0, 0, 1449, 0, 0, 0, 665,
	0, 0, 0, 1411, 1413, 1415, 1415, 1422, 1416, 1423,
	1424, 1415, 1415, 1415, 1415, 1429, 1415, 1415, 1415, 1415,
	1415, 1415, 1415, 1415, 1415, 1415, 1409, 0, 0, 1623,
	1624, 674, 0, 0, 716, 717, 718, 719, 720, 0,
	0, 53, 54, 1064, 0, 274, 0, 0, 889, 0,
	0, 0, 1209, 0, 940, 937, 938, 939, 0, 971,
	454, 455, 456, 457, 0, 0, 0, 975, 0, 963,
	945, 0, 0, 0, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, -2, 1031, 0, 0, 0, 1209, 1050, 0, 1209,
	1209, 0, 1080, 0, 1069, 677, 0, -2, 0, 0,
	626, 0, 0, 822, 510, 781, 534, 731, 732, 549,
	781, 781, 559, 577, 1080, 1071, 0, 371, 420, 0,
	1126, 0, 0, 1132, 0, 1139, 374, 0, 422, 0,
	1222, 1249, 1233, 1249, 1293, 1249, 1249, 1027, 0, 422,
	0, 0, 392, 428, 0, 0, 0, 0, 0, 388,
	425, 739, 375, 377, 378, 379, 429, 430, 432, 0,
	434, 435, 394, 406, 407, 408, 409, 0, 0, 0,
	401, 414, 415, 416, 417, 376, 1155, 1156, 1157, 1160,
	1161, 1162, 1163, 0, 0, 1166, 1167, 1168, 1169, 1170,
	1246, 1247, 1248, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1195, 1196, 1197, 1198, 1199, 1200, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 0, 0, 1190, 0, 940, 0,
	0, 0, 0, 971, 952, 0, 962, 0, 964, 965,
	0, 0, 647, 781, 292, 0, 817, 811, 0, 800,
	815, 816, 803, 0, 805, 0, 801, 802, 781, 793,
	824, 849, 826, 829, 831, 832, 838, 0, 0, 0,
	0, 221, 222, 223, 230, 0, 473, 236, 701, 0,
	1206, 606, 607, 1097, 1098, 614, 0, 902, 777, 0,
	0, 777, 76, 79, 0, 74, 0, 0, 0, 0,
	66, 64, 1687, 0, 0, 691, 118, 0, 0, 0,
	667, 0, 672, 669, 653, 663, 652, 660, 661, 680,
	669, 644, 643, 704, 689, 737, 738, 0, 1261, 328,
	0, 978, 138, 143, 144, 145, 139, 137, 985, 0,
	987, 0, 1057, 0, 0, 1599, 1377, 1349, 1379, 1391,
	1392, 1380, 0, 1351, 1352, 1382, 1383, 1385, 1386, 1387,
	1388, 1389, 1353, 1445, 0, 1447, 1455, 1456, 0, 1505,
	1509, 0, 0, 0, 0, 0, 1420, 1421, 1425, 1426,
	1427, 1428, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 733, 1410, 0, 0, 0, 0, 0, 0,
	0, 714, 0, 0, 0, 1063, 1065, 877, 880, 886,
	888, 0, 0, 0, 1210, 1211, 1213, 1214, 1215, 0,
	913, 0, 0, 931, 932, 942, 0, 0, 0, 459,
	460, 0, 0, 0, 472, 468, 469, 470, 450, 970,
	959, 948, 0, 0, 958, 0, 1032, 1709, 1709, 1709,
	0, 0, 1140, 1709, 1709, 0, 1052, 0, 0, 1144,
	1083, 0, 0, 1074, 0, 847, 0, 0, 781, 625,
	628, 629, 725, 511, 553, 550, 781, 1083, 367, 1104,
	0, 0, 0, 0, 0, 1136, 0, 0, 1108, 0,
	393, 423, 0, -2, 0, 1250, 0, 1236, 1250, 0,
	0, 1249, 0, 382, 422, 0, 0, 0, 436, 440,
	441, 0, 438, 1288, 0, 439, 0, 427, 0, 433,
	1158, 1159, 0, 1164, 1165, 0, 1189, 0, 0, 442,
	0, 0, 0, 443, 448, 945, 0, 960, 0, 966,
	967, 733, 0, 0, 797, 818, 0, 0, 798, 0,
	799, 804, 806, 291, 833, 0, 0, 835, 836, 837,
	828, 238, 746, 899, 0, 767, 0, 0, 788, 768,
	0, 19, 0, 0, 69, 1697, 1700, 693, 0, 690,
	119, 0, 0, 0, 0, 657, 668, 651, 642, 691,
	743, 744, 140, 135, 986, 121, 0, 1058, 0, 0,
	1457, 0, 1415, 1412, 1415, 1414, 1406, 0, 1363, 0,
	1365, 1366, 1367, 0, 1369, 1370, 0, 712, 0, 0,
	919, 1144, 0, 919, 941, 930, 0, 972, 973, 0,
	461, 462, 0, 465, 471, 943, 944, 0, 0, 956,
	0, 0, 0, 0, 1024, 1038, 0, 0, 0, -2,
	0, -2, 1049, 0, 1089, 0, 1081, 0, 1073, 0,
	1076, 781, 781, -2, 622, 627, 0, 554, 1089, 1106,
	0, 1127, 0, 0, 0, 0, 0, 0, 0, 1107,
	0, 1120, 424, 1251, -2, 1264, 1266, 0, 1037, 1269,
	1270, 0, 0, 0, 0, 0, 0, 1314, 1278, 0,
	0, 1282, 1283, 1284, 0, 0, 1287, 0, 1617, 1618,
	0, 1291, 0, 0, 0, 0, 0, 0, 0, 1230,
	383, 384, 0, 386, 387, 1709, 1289, 426, 380, 1709,
	396, 1188, 1191, 1192, 447, 444, 445, 948, 951, 648,
	728, 293, 294, 819, 0, 812, 842, 839, 0, 0,
	903, 778, 780, 70, 75, 0, 0, 695, 0, 692,
	0, 686, 688, 129, 656, 693, 91, 112, 0, 0,
	1350, 1446, 1496, 1418, 1419, 0, 1407, 0, 1401, 1402,
	1403, 1408, 0, 0, 715, 710, 0, 905, 912, 926,
	1043, 1212, 911, 0, 0, 458, 463, 0, 466, 467,
	0, 946, 947, 0, 954, 0, 0, 1011, 1688, 0,
	1033, 1034, 1203, 1204, 1035, 1141, 1142, 1143, 1099, 1051,
	0, -2, 1152, 0, 1047, 121, 1099, 0, 1077, 0,
	1084, 0, 1082, 1075, 733, 623, 1086, 373, 1138, 1128,
	0, 1130, 0, 0, 0, 0, 1109, -2, 0, 1265,
	1267, 1268, 1271, 1272, 1273, 1319, 1320, 1321, 0, 0,
	1276, 1316, 1317, 1318, 1277, 0, 0, 0, 0, 0,
	1615, 1616, 1312, 0, 0, 1237, 1239, 1240, 1241, 1242,
	1243, 1244, 1245, 1238, 0, 0, 0, 1229, 1231, 385,
	0, 0, 1709, 961, 290, 0, 0, 843, 845, 840,
	841, 65, 67, 82, 0, 694, 120, 0, 695, 83,
	0, 109, 0, 122, 123, 0, 0, 0, 0, 0,
	1417, 1404, 0, 0, 0, 0, 0, 1619, 1620, 1621,
	0, 1364, 1368, 0, 0, 927, 928, 933, 0, 935,
	464, 949, 953, 956, 0, 1002, 0, 739, 0, 1101,
	0, 1053, 1036, 1154, 1709, 1054, 1101, 0, 1146, 1709,
	1709, 1067, 0, 1079, 0, 1091, 0, 1085, 728, 366,
	0, 1088, 1124, 1129, 1131, 1133, 0, 1137, 1135, 1110,
	-2, 0, 1118, 0, 0, 1274, 1275, 0, 0, 1515,
	1709, 0, 1307, 0, 1002, 1002, 1002, 1002, 0, 437,
	395, 0, 820, 834, 0, 0, 0, 684, 92, 96,
	0, 118, 115, 0, 124, 0, 0, 0, 0, 1060,
	0, 1393, 0, 0, 0, 1397, 1398, 1399, 1400, 0,
	904, 0, 934, 955, 957, 1001, 1012, 1013, 739, 1046,
	0, 1138, 1153, 0, 1048, 1145, 0, 0, 0, 1078,
	1090, 0, 1093, 621, 1087, 1105, 0, 1134, 1111, 1119,
	0, 1114, 0, 0, 0, 1315, 0, 1281, 0, 1286,
	1295, 1308, 0, 0, 1218, 0, 1220, 0, 1224, 0,
	1226, 0, 0, 397, 844, 846, 0, 697, 687, 85,
	0, 0, 113, 114, 116, 0, 125, 0, 127, 128,
	1056, 0, 0, 1394, 1395, 1396, 0, 906, 907, 920,
	1003, 1709, 1709, 0, 0, 0, 1009, 1010, 1014, 0,
	1126, 1158, 1147, 1148, 1149, 1092, 1125, 1113, 0, -2,
	1121, 0, 0, 1567, 1577, 1578, 1279, 1285, 1294, 1296,
	1297, 0, 1309, 1310, 1311, 1313, 1002, 1002, 1002, 1002,
	1228, 696, 0, 1066, 0, 97, 0, 99, 101, 102,
	1252, 110, 111, 117, 126, 0, 1405, 908, 0, 0,
	1006, 1007, 0, 1102, 0, 1104, 1115, -2, 0, 1123,
	0, 1280, 1298, 0, 1299, 0, 0, 0, 1219, 1221,
	1225, 1227, 698, 86, 87, 0, 98, 0, 0, 0,
	893, 909, 0, 1004, 1005, 1008, 0, 1106, 1122, 1568,
	1300, 1302, 1303, 0, 0, 1301, 0, 0, 100, 1253,
	1061, 910, 1103, 1100, 1304, 1306, 1305, 88, 89, 90,
	0, 1254,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 114, 3, 3, 3, 145, 137, 3,
	82, 83, 142, 140, 155, 141, 154, 143, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 631, 628,
	124, 123, 125, 3, 632, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 147, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 629, 136, 630, 148,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	115, 116, 117, 118, 119, 120, 121, 122, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 138, 139,
	144, 146, 149, 150, 151, 152, 153, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:797
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:804
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:810
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:818
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:824
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:828
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:843
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:847
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:853
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:858
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:894
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp:   yyDollar[2].str,
				IsS3:        false,
				Dir:         yyDollar[4].str,
				Parallelism: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:911
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      true,
				Option:    yyDollar[5].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:921
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:941
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:947
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:954
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:962
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:968
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:977
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:987
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:995
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1003
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1011
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1021
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1029
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1039
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1046
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1055
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1065
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1069
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1075
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1079
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1085
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1094
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1104
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1108
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1114
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1123
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1127
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1133
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1154
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1167
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1178
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1184
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1188
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1201
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1209
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1213
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1227
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1231
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1235
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1240
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1244
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1248
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1254
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1263
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1274
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1278
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1284
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1288
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1294
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1298
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1304
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1328
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1347
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1351
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1355
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1360
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1364
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1373
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1383
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1390
		{
			yyVAL.str = yyDollar[3].str
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1395
		{
			yyVAL.str = "\n"
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1402
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1407
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1411
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1439
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1443
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1449
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1457
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1477
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1496
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1521
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1525
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1529
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1534
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1538
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1544
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1557
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1568
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1581
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1585
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1595
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1608
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1621
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1627
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1633
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1640
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1648
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1657
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1661
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1665
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1669
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1673
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1677
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1684
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1688
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1694
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1701
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1710
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1714
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1720
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1724
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1728
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1732
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1736
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1740
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1744
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1748
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1752
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1756
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1760
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1764
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1768
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1772
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1776
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1780
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1784
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1788
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1792
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1796
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1800
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1804
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1808
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1812
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1816
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1820
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1824
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1828
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1832
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1836
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1840
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1844
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1848
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1852
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1856
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1860
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1864
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1868
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1872
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1876
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1880
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1884
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1888
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1892
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1896
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1900
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1904
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1908
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1912
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1916
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1929
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1936
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1943
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1953
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1957
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1963
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1970
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1978
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1982
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1986
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1990
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1996
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2000
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2006
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2013
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2020
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2029
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2059
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2063
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2067
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2073
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2079
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2083
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2090
		{
			yyVAL.str = yyDollar[3].str
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2096
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2100
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2106
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2114
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2123
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2132
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2140
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2148
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2171
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2194
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2201
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2208
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2216
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2223
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2230
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2247
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2253
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2257
		{
			yyVAL.str = yyDollar[1].str
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2263
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2267
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2273
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2277
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2288
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2294
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2299
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2303
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2307
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2311
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2315
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2319
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2323
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2327
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2331
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2337
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2341
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2345
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2349
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2354
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2359
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2365
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2378
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2404
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2417
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2433
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2440
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2451
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2462
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2466
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2472
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2488
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2492
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2498
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2504
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2508
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2512
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2516
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2522
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2534
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2540
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2544
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2550
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2554
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2560
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2566
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2577
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2583
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2587
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2591
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2595
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2599
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2603
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2611
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2619
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2629
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2641
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2645
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2653
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2661
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2700
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2704
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2710
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2716
		{
			yyVAL.str = yyDollar[1].str
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2721
		{
			yyVAL.str = "true"
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2722
		{
			yyVAL.str = "false"
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2723
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2728
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2745
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2768
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2778
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2785
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2794
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2798
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2804
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2808
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			partitionDef := &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2827
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2837
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2853
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2871
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2875
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2881
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2885
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2891
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2897
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2905
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2915
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2923
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2933
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2943
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2953
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2960
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2964
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2968
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2972
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2976
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2983
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2989
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2993
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2997
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3001
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3005
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3009
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3013
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3017
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3022
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3053
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3057
		{
			yyVAL.str = string("COLUMN")
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3062
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3068
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3074
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3082
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3086
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3092
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3100
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3107
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3113
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3119
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3125
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3131
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3138
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3145
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3153
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3159
		{
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = int64(yyDollar[6].item.(int64))
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3166
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3172
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3180
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3184
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3191
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3209
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3223
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3237
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3250
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3256
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3267
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3280
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3284
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3289
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3293
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3298
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3302
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3318
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3322
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3326
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3330
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3334
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3338
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3342
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3346
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3350
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3354
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3358
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3362
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3366
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3370
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3374
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3378
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3384
		{
			yyVAL.item = nil
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3389
		{
			yyVAL.item = nil
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3430
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3439
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3447
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3451
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3455
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{tree.NewRole(yyDollar[5].cstrUnion().Compare())}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3464
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3468
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3474
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3479
		{
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3483
		{
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3488
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3498
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3508
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3516
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3522
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3528
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3534
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3540
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3546
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3552
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3561
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3565
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3569
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3573
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3577
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3581
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3585
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3589
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3595
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3604
		{
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3606
		{
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3615
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3625
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3634
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3638
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3642
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3648
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3654
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3660
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3666
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3675
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3685
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3697
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3701
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3707
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3719
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3733
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3739
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3746
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3750
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3755
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3759
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3763
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3768
		{
			yyVAL.str = ""
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3772
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3778
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3791
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3795
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3801
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3806
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3810
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3814
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3820
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3826
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3830
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3836
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3842
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3846
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3850
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3856
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3860
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3885
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3893
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3901
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3909
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3913
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3919
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3928
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3936
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3945
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3951
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3959
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3967
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3975
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3981
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3989
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3995
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4003
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4009
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4019
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4024
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4031
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4047
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4060
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4071
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4075
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4081
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4086
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4093
		{
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4095
		{
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4098
		{
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4107
		{
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4111
		{
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4116
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4125
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4132
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4138
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4146
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4153
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4160
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4180
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4190
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4194
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4200
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4207
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4213
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4221
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4228
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4235
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4254
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4258
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4262
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4267
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4271
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4275
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4281
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4290
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4294
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4300
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4304
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4310
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4314
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4320
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4325
		{
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4329
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4336
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4340
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4347
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4352
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4356
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4362
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4366
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4372
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4376
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4381
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4385
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4398
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4409
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4420
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4442
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4465
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4473
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4482
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4486
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4499
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4503
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4508
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4512
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4519
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4524
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4531
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4537
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4541
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4545
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4549
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4553
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4557
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4562
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4566
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4572
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4582
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4597
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4601
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4619
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4625
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4634
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4638
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4642
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4646
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4650
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4656
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4663
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4672
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4676
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4682
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4690
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4694
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4699
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4703
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4709
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4713
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4717
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4722
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4726
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4732
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4738
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4742
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4748
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4753
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4757
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4761
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4766
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4770
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4774
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4779
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4783
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4791
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4795
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4799
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4813
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4817
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4827
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4837
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4847
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4859
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4867
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4875
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4884
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4892
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4900
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4908
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4916
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4924
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4932
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4940
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4948
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4958
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4969
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4983
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4987
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4991
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4996
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5000
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5004
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5013
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5017
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5022
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5026
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5031
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5035
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5041
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5045
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5051
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5055
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5060
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5064
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5069
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5077
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5083
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5091
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5099
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5109
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5115
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5124
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5133
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5142
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5152
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5156
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5166
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5170
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5174
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5178
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5184
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5194
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5198
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5204
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5214
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5220
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5226
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5230
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5234
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5240
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5244
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5250
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5254
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5260
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5264
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5270
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5274
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5284
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5297
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5303
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5309
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5322
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5333
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5340
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5344
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5350
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5360
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5364
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5368
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5373
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5377
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5381
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5385
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5390
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5394
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5398
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5402
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5406
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5411
		{
			yyVAL.str = ""
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5415
		{
			yyVAL.str = yyDollar[1].str
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5419
		{
			yyVAL.str = yyDollar[2].str
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5425
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5431
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5435
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5439
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5443
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5447
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5453
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 877:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5492
		{
			yyLOCAL = &tree.CreateExtension{
				Language: yyDollar[3].str,
				Name:     tree.Identifier(yyDollar[5].str),
				Filename: tree.Identifier(yyDollar[7].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5502
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5508
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 880:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5514
		{
			yyLOCAL = &tree.CreateProcedure{
				Name: yyDollar[3].procNameUnion(),
				Args: yyDollar[5].procArgsUnion(),
				Body: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5524
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5529
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5535
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5542
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5546
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5552
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5558
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5563
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5567
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5571
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5575
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5582
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				return 1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				return 1
			}

			yyLOCAL = &tree.CreateFunction{
				Replace:    yyDollar[2].sourceOptionalUnion(),
				Name:       yyDollar[4].functionNameUnion(),
				Args:       yyDollar[6].funcArgsUnion(),
				ReturnType: yyDollar[9].funcReturnUnion(),
				Language:   yyDollar[11].str,
				Import:     yyDollar[12].boolValUnion(),
				Body:       yyDollar[13].str,
				Handler:    yyDollar[14].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5606
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5611
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5617
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5624
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5628
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5634
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5640
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5644
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5648
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5654
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5660
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5666
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5670
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5676
		{
			yyVAL.str = ""
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5683
		{
			yyVAL.str = yyDollar[2].str
		}
	case 911:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5689
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5698
		{
			yyLOCAL = &tree.CreateView{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5710
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5722
		{
			yyVAL.str = yyDollar[1].str
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5726
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5732
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5736
		{
			yyVAL.str = "DEFINER = "
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5740
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 919:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5745
		{
			yyVAL.str = ""
		}
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5749
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5763
		{
			yyVAL.str = ""
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5771
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 930:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5777
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5787
		{
			yyVAL.str = yyDollar[1].str
		}
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5791
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5797
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5804
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5810
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5818
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5824
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5831
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5838
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusRestricted,
			}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5846
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5852
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5861
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5873
		{
			yyLOCAL = &tree.CreatePublication{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Database:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				AccountsSet: yyDollar[7].accountsSetOptionUnion(),
				Comment:     yyDollar[8].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5885
		{
			yyLOCAL = &tree.CreateStage{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Url:         yyDollar[5].str,
				Credentials: yyDollar[6].stageCredentialsUnion(),
				Status:      yyDollar[7].stageStatusUnion(),
				Comment:     yyDollar[8].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5897
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5903
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5910
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5918
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5924
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5932
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5938
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5946
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5952
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5961
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5965
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5970
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5974
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5981
		{
			yyVAL.str = yyDollar[3].str
		}
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5986
		{
			yyVAL.str = ""
		}
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5990
		{
			yyVAL.str = yyDollar[2].str
		}
	case 961:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5996
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6009
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6018
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6022
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6028
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6034
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6040
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6049
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6057
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6065
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6070
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6076
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6084
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6190
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6194
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6200
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6210
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6214
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6220
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6230
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6234
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6238
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6243
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6247
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6253
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6260
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6266
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6275
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6282
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6291
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6295
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6301
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6315
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6319
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6323
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6328
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6332
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6336
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6340
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6346
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = &tree.IndexOption{IType: tree.INDEX_TYPE_INVALID}
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Table:       yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6367
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6371
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6397
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6401
		{
			yyLOCAL = &tree.IndexOption{AlgoParamList: int64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6405
		{
			yyLOCAL = &tree.IndexOption{AlgoParamVectorOpType: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6409
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6413
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6417
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6421
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6427
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6431
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6437
		{
			// Order is parsed but just ignored as MySQL dtree.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6442
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6447
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6451
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6455
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6459
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6463
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6467
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6471
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6477
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Name:               tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SubscriptionOption: yyDollar[5].subscriptionOptionUnion(),
				CreateOptions:      yyDollar[6].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6488
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6492
		{
			yyLOCAL = &tree.SubscriptionOption{From: tree.Identifier(yyDollar[2].str), Publication: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6502
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6506
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6511
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6515
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6521
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6525
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6531
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6535
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6539
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6544
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6548
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6554
		{
			yyLOCAL = &tree.CreateConnector{
				TableName: yyDollar[4].tableNameUnion(),
				Options:   yyDollar[7].connectorOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6563
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6569
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6587
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6605
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6623
		{
			yyLOCAL = &tree.CreateSource{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				SourceName:  yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Options:     yyDollar[9].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6634
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6638
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6644
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6656
		{
			yyLOCAL = &tree.CreateTable{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Param:       yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6665
		{
			yyLOCAL = &tree.CreateTable{
				IsClusterTable:  true,
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6677
		{
			yyLOCAL = &tree.CreateTable{
				IsDynamicTable: true,
				IfNotExists:    yyDollar[4].ifNotExistsUnion(),
				Table:          *yyDollar[5].tableNameUnion(),
				AsSource:       yyDollar[7].selectUnion(),
				DTOptions:      yyDollar[8].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6687
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				AsSource:    yyDollar[6].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6697
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				AsSource:    yyDollar[9].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6708
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				AsSource:    yyDollar[7].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6718
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				AsSource:    yyDollar[10].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6731
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6738
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6748
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6761
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6769
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6778
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6787
		{
			yyVAL.str = ""
		}
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6791
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6797
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6801
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6806
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6810
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:6817
		{
			yyLOCAL = &tree.TailParameter{
				Fields:       yyDollar[1].fieldsUnion(),
				Lines:        yyDollar[2].linesUnion(),
				IgnoredLines: uint64(yyDollar[3].int64ValUnion()),
				ColumnList:   yyDollar[4].loadColumnsUnion(),
				Assignments:  yyDollar[5].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6828
		{
			yyLOCAL = &tree.CreateSequence{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].columnTypeUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6841
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6855
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6859
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6863
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6869
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6873
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6880
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6887
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6894
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6901
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6905
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6909
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6913
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6917
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6924
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6931
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6935
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6942
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6949
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6953
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6959
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6965
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6969
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6976
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6983
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6990
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6997
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7001
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7006
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7010
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7014
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7019
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7023
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7033
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7037
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()},
			}

		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7044
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: yyDollar[4].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7051
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7055
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7064
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7068
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7074
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7078
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7084
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7093
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7103
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7107
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7113
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7117
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7123
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7130
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7139
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7143
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7148
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7152
		{
			expr := tree.NewMaxValue()
			yyLOCAL = &tree.ValuesLessThan{ValueList: tree.Exprs{expr}}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7157
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7161
		{
			yyLOCAL = &tree.ValuesIn{ValueList: yyDollar[4].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7166
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7170
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7180
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7184
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7195
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7203
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7211
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7219
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7230
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:    yyDollar[1].boolValUnion(),
					Algorithm: yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7239
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7249
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7259
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7263
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7268
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7272
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7278
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7282
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7288
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7292
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7297
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7301
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7307
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7311
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7317
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7321
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7326
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7330
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7336
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7340
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7344
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7350
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7354
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7358
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7362
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7366
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7370
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7374
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7379
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7383
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7387
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7391
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7395
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7399
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7403
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7407
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7411
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7415
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7419
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7423
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7427
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7431
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7435
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7439
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7443
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7447
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7451
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7455
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7459
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7463
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7467
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7471
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7475
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7479
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7483
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7487
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7493
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7497
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7503
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7509
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7513
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7519
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7523
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7527
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7531
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7535
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7539
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7553
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7557
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7566
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7571
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7577
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7584
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7588
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7594
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7598
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7602
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7608
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7612
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7618
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7627
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7636
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7669
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7704
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7718
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7724
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7733
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7742
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7751
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7760
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7770
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7778
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7784
		{
			yyVAL.str = ""
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7788
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7798
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7804
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7810
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7831
		{
			yyVAL.str = ""
		}
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7835
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:7841
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7847
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7851
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7855
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7861
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7865
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7869
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7873
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7879
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7883
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7887
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7892
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7896
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7902
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7906
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7912
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7916
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7920
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7924
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7928
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7932
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7937
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7941
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7945
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7949
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7953
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7957
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7961
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7965
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7969
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7973
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7986
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7990
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7994
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7998
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8002
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8006
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8012
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8016
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8021
		{
			yyVAL.str = ""
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8025
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8031
		{
			yyVAL.str = ""
		}
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8035
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1294:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8041
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8053
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8060
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8067
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8074
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8081
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8090
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8096
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8102
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8106
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8110
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8114
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8118
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8123
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8130
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8134
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8138
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8143
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8147
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8152
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8156
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8172
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8178
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8182
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8186
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8190
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8194
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8198
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8202
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8206
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8210
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8214
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8218
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8222
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8226
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8232
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8236
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8240
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8244
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8248
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8252
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8256
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8260
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8264
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8268
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8272
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8276
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8281
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8289
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8293
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8297
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8301
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8305
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8314
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8318
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8322
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8326
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8330
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8334
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8340
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8348
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8356
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8366
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8376
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8386
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8395
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8405
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8415
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8425
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8434
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8444
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8448
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8453
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8457
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8463
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8467
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8473
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8482
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8494
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8511
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8528
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8541
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8554
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8566
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8580
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8595
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8610
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8627
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8642
		{
		}
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8649
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8653
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8657
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8663
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8667
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8671
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8675
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8681
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8685
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8689
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8695
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8703
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8713
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8717
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8724
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8729
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8733
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8738
		{
			yyVAL.str = ","
		}
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8742
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8747
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8751
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8756
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8763
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8789
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8800
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8811
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8821
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8831
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8841
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8850
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8859
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8869
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8879
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8889
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8899
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8909
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8919
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8929
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8939
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8949
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8959
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8969
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8979
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8989
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8999
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9016
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9024
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9032
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9040
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9048
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9058
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9066
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9075
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9083
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9091
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9099
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9107
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9118
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9128
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9140
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9151
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9173
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9209
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9221
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9233
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9244
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9252
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9259
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9266
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9278
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9286
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9296
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9306
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9314
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9325
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9334
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9343
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9351
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9361
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9369
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9378
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9386
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9394
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9403
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9407
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9417
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9436
		{
		}
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9438
		{
		}
	case 1560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9479
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9490
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9494
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9498
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9504
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9509
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9513
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9519
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9523
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9529
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9533
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9540
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9544
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9548
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9556
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9560
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9564
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9569
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9573
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9579
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9583
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9587
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9591
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9595
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9599
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9603
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9607
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9611
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9615
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9623
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9627
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9631
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9635
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9639
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9643
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9647
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9651
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9655
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9659
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9665
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9669
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9675
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9679
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9686
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9690
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9694
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9700
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9704
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9708
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9712
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9716
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9720
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9724
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9730
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9734
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9738
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9742
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9748
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9761
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9766
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9772
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9776
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9789
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9794
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9798
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9802
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9806
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9810
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9817
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9821
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9825
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9829
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9836
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9847
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9852
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9858
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9870
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9882
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9894
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9907
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9920
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9933
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9946
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9959
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9972
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9985
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9998
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10011
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10024
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10039
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10066
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10108
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10144
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10180
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10197
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10209
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10229
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10249
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10269
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10285
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10298
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10311
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10324
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10337
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10349
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10361
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10373
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10385
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10397
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10409
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10421
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10433
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10445
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10458
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10471
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10484
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10497
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10512
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10520
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10529
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10539
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10562
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10567
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10573
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10580
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10584
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10589
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10593
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10599
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10605
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10612
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10619
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10628
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10635
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10642
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10651
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10655
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10659
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10665
		{
		}
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10667
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10677
		{
			yyVAL.str = ""
		}
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10681
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
