// Code generated by goyacc -o mysql_sql.go -c mysql mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const DISTINCTROW = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const SUBQUERY_AS_EXPR = 57394
const LOWER_THAN_STRING = 57395
const ID = 57396
const AT_ID = 57397
const AT_AT_ID = 57398
const STRING = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const INTEGRAL = 57404
const HEX = 57405
const BIT_LITERAL = 57406
const FLOAT = 57407
const HEXNUM = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const LOWER_THAN_CHARSET = 57412
const CHARSET = 57413
const UNIQUE = 57414
const KEY = 57415
const OR = 57416
const PIPE_CONCAT = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const ASSIGNMENT = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const BEGIN = 57445
const START = 57446
const TRANSACTION = 57447
const COMMIT = 57448
const ROLLBACK = 57449
const WORK = 57450
const CONSISTENT = 57451
const SNAPSHOT = 57452
const CHAIN = 57453
const NO = 57454
const RELEASE = 57455
const BIT = 57456
const TINYINT = 57457
const SMALLINT = 57458
const MEDIUMINT = 57459
const INT = 57460
const INTEGER = 57461
const BIGINT = 57462
const INTNUM = 57463
const REAL = 57464
const DOUBLE = 57465
const FLOAT_TYPE = 57466
const DECIMAL = 57467
const NUMERIC = 57468
const DECIMAL_VALUE = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const TEXT = 57480
const TINYTEXT = 57481
const MEDIUMTEXT = 57482
const LONGTEXT = 57483
const BLOB = 57484
const TINYBLOB = 57485
const MEDIUMBLOB = 57486
const LONGBLOB = 57487
const JSON = 57488
const ENUM = 57489
const GEOMETRY = 57490
const POINT = 57491
const LINESTRING = 57492
const POLYGON = 57493
const GEOMETRYCOLLECTION = 57494
const MULTIPOINT = 57495
const MULTILINESTRING = 57496
const MULTIPOLYGON = 57497
const INT1 = 57498
const INT2 = 57499
const INT3 = 57500
const INT4 = 57501
const INT8 = 57502
const SQL_SMALL_RESULT = 57503
const SQL_BIG_RESULT = 57504
const SQL_BUFFER_RESULT = 57505
const CREATE = 57506
const ALTER = 57507
const DROP = 57508
const RENAME = 57509
const ANALYZE = 57510
const ADD = 57511
const SCHEMA = 57512
const TABLE = 57513
const INDEX = 57514
const VIEW = 57515
const TO = 57516
const IGNORE = 57517
const IF = 57518
const PRIMARY = 57519
const COLUMN = 57520
const CONSTRAINT = 57521
const SPATIAL = 57522
const FULLTEXT = 57523
const FOREIGN = 57524
const KEY_BLOCK_SIZE = 57525
const SHOW = 57526
const DESCRIBE = 57527
const EXPLAIN = 57528
const DATE = 57529
const ESCAPE = 57530
const REPAIR = 57531
const OPTIMIZE = 57532
const TRUNCATE = 57533
const MAXVALUE = 57534
const PARTITION = 57535
const REORGANIZE = 57536
const LESS = 57537
const THAN = 57538
const PROCEDURE = 57539
const TRIGGER = 57540
const STATUS = 57541
const VARIABLES = 57542
const ROLE = 57543
const PROXY = 57544
const AVG_ROW_LENGTH = 57545
const STORAGE = 57546
const DISK = 57547
const MEMORY = 57548
const CHECKSUM = 57549
const COMPRESSION = 57550
const DATA = 57551
const DIRECTORY = 57552
const DELAY_KEY_WRITE = 57553
const ENCRYPTION = 57554
const ENGINE = 57555
const MAX_ROWS = 57556
const MIN_ROWS = 57557
const PACK_KEYS = 57558
const ROW_FORMAT = 57559
const STATS_AUTO_RECALC = 57560
const STATS_PERSISTENT = 57561
const STATS_SAMPLE_PAGES = 57562
const DYNAMIC = 57563
const COMPRESSED = 57564
const REDUNDANT = 57565
const COMPACT = 57566
const FIXED = 57567
const COLUMN_FORMAT = 57568
const AUTO_RANDOM = 57569
const RESTRICT = 57570
const CASCADE = 57571
const ACTION = 57572
const PARTIAL = 57573
const SIMPLE = 57574
const CHECK = 57575
const ENFORCED = 57576
const RANGE = 57577
const LIST = 57578
const ALGORITHM = 57579
const LINEAR = 57580
const PARTITIONS = 57581
const SUBPARTITION = 57582
const SUBPARTITIONS = 57583
const TYPE = 57584
const ANY = 57585
const SOME = 57586
const PROPERTIES = 57587
const PARSER = 57588
const VISIBLE = 57589
const INVISIBLE = 57590
const BTREE = 57591
const HASH = 57592
const RTREE = 57593
const BSI = 57594
const ZONEMAP = 57595
const LEADING = 57596
const BOTH = 57597
const TRAILING = 57598
const UNKNOWN = 57599
const EXPIRE = 57600
const ACCOUNT = 57601
const UNLOCK = 57602
const DAY = 57603
const NEVER = 57604
const SECOND = 57605
const ASCII = 57606
const COALESCE = 57607
const COLLATION = 57608
const HOUR = 57609
const MICROSECOND = 57610
const MINUTE = 57611
const MONTH = 57612
const QUARTER = 57613
const REPEAT = 57614
const REVERSE = 57615
const ROW_COUNT = 57616
const WEEK = 57617
const REVOKE = 57618
const FUNCTION = 57619
const PRIVILEGES = 57620
const TABLESPACE = 57621
const EXECUTE = 57622
const SUPER = 57623
const GRANT = 57624
const OPTION = 57625
const REFERENCES = 57626
const REPLICATION = 57627
const SLAVE = 57628
const CLIENT = 57629
const USAGE = 57630
const RELOAD = 57631
const FILE = 57632
const TEMPORARY = 57633
const ROUTINE = 57634
const EVENT = 57635
const SHUTDOWN = 57636
const NULLX = 57637
const AUTO_INCREMENT = 57638
const APPROXNUM = 57639
const SIGNED = 57640
const UNSIGNED = 57641
const ZEROFILL = 57642
const USER = 57643
const IDENTIFIED = 57644
const CIPHER = 57645
const ISSUER = 57646
const X509 = 57647
const SUBJECT = 57648
const SAN = 57649
const REQUIRE = 57650
const SSL = 57651
const NONE = 57652
const PASSWORD = 57653
const MAX_QUERIES_PER_HOUR = 57654
const MAX_UPDATES_PER_HOUR = 57655
const MAX_CONNECTIONS_PER_HOUR = 57656
const MAX_USER_CONNECTIONS = 57657
const FORMAT = 57658
const VERBOSE = 57659
const CONNECTION = 57660
const LOAD = 57661
const INFILE = 57662
const TERMINATED = 57663
const OPTIONALLY = 57664
const ENCLOSED = 57665
const ESCAPED = 57666
const STARTING = 57667
const LINES = 57668
const DATABASES = 57669
const TABLES = 57670
const EXTENDED = 57671
const FULL = 57672
const PROCESSLIST = 57673
const FIELDS = 57674
const COLUMNS = 57675
const OPEN = 57676
const ERRORS = 57677
const WARNINGS = 57678
const INDEXES = 57679
const SCHEMAS = 57680
const NAMES = 57681
const GLOBAL = 57682
const SESSION = 57683
const ISOLATION = 57684
const LEVEL = 57685
const READ = 57686
const WRITE = 57687
const ONLY = 57688
const REPEATABLE = 57689
const COMMITTED = 57690
const UNCOMMITTED = 57691
const SERIALIZABLE = 57692
const LOCAL = 57693
const EXCEPT = 57694
const CURRENT_TIMESTAMP = 57695
const DATABASE = 57696
const CURRENT_TIME = 57697
const LOCALTIME = 57698
const LOCALTIMESTAMP = 57699
const UTC_DATE = 57700
const UTC_TIME = 57701
const UTC_TIMESTAMP = 57702
const REPLACE = 57703
const CONVERT = 57704
const SEPARATOR = 57705
const CURRENT_DATE = 57706
const CURRENT_USER = 57707
const CURRENT_ROLE = 57708
const SECOND_MICROSECOND = 57709
const MINUTE_MICROSECOND = 57710
const MINUTE_SECOND = 57711
const HOUR_MICROSECOND = 57712
const HOUR_SECOND = 57713
const HOUR_MINUTE = 57714
const DAY_MICROSECOND = 57715
const DAY_SECOND = 57716
const DAY_MINUTE = 57717
const DAY_HOUR = 57718
const YEAR_MONTH = 57719
const SQL_TSI_HOUR = 57720
const SQL_TSI_DAY = 57721
const SQL_TSI_WEEK = 57722
const SQL_TSI_MONTH = 57723
const SQL_TSI_QUARTER = 57724
const SQL_TSI_YEAR = 57725
const SQL_TSI_SECOND = 57726
const SQL_TSI_MINUTE = 57727
const RECURSIVE = 57728
const CONFIG = 57729
const MATCH = 57730
const AGAINST = 57731
const BOOLEAN = 57732
const LANGUAGE = 57733
const WITH = 57734
const QUERY = 57735
const EXPANSION = 57736
const ADDDATE = 57737
const BIT_AND = 57738
const BIT_OR = 57739
const BIT_XOR = 57740
const CAST = 57741
const COUNT = 57742
const APPROX_COUNT_DISTINCT = 57743
const APPROX_PERCENTILE = 57744
const CURDATE = 57745
const CURTIME = 57746
const DATE_ADD = 57747
const DATE_SUB = 57748
const EXTRACT = 57749
const GROUP_CONCAT = 57750
const MAX = 57751
const MID = 57752
const MIN = 57753
const NOW = 57754
const POSITION = 57755
const SESSION_USER = 57756
const STD = 57757
const STDDEV = 57758
const STDDEV_POP = 57759
const STDDEV_SAMP = 57760
const SUBDATE = 57761
const SUBSTR = 57762
const SUBSTRING = 57763
const SUM = 57764
const SYSDATE = 57765
const SYSTEM_USER = 57766
const TRANSLATE = 57767
const TRIM = 57768
const VARIANCE = 57769
const VAR_POP = 57770
const VAR_SAMP = 57771
const AVG = 57772
const ROW = 57773
const OUTFILE = 57774
const HEADER = 57775
const MAX_FILE_SIZE = 57776
const FORCE_QUOTE = 57777
const UNUSED = 57778

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6558

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	17, 361,
	-2, 342,
	-1, 58,
	189, 509,
	-2, 545,
	-1, 67,
	216, 250,
	217, 250,
	-2, 271,
	-1, 320,
	58, 1327,
	455, 1327,
	-2, 92,
	-1, 339,
	58, 670,
	455, 670,
	-2, 507,
	-1, 340,
	58, 500,
	455, 500,
	-2, 508,
	-1, 346,
	17, 362,
	-2, 325,
	-1, 405,
	89, 1206,
	100, 1206,
	119, 1206,
	-2, 1034,
	-1, 581,
	17, 362,
	-2, 325,
	-1, 603,
	53, 1356,
	-2, 1363,
	-1, 611,
	53, 1357,
	-2, 1371,
	-1, 613,
	53, 1353,
	-2, 1373,
	-1, 614,
	53, 1354,
	-2, 1374,
	-1, 619,
	53, 1355,
	-2, 1380,
	-1, 620,
	53, 1358,
	-2, 1381,
	-1, 621,
	53, 1359,
	-2, 1382,
	-1, 622,
	53, 799,
	-2, 1383,
	-1, 623,
	53, 800,
	-2, 1384,
	-1, 624,
	53, 801,
	-2, 1385,
	-1, 626,
	53, 1360,
	-2, 1387,
	-1, 627,
	53, 818,
	-2, 1388,
	-1, 628,
	53, 817,
	-2, 1389,
	-1, 631,
	53, 1361,
	-2, 1392,
	-1, 632,
	53, 1362,
	-2, 1393,
	-1, 638,
	53, 880,
	-2, 1206,
	-1, 639,
	53, 889,
	-2, 1232,
	-1, 640,
	53, 893,
	-2, 1271,
	-1, 641,
	53, 904,
	-2, 1332,
	-1, 642,
	53, 906,
	-2, 1342,
	-1, 643,
	53, 894,
	-2, 1347,
	-1, 644,
	53, 902,
	-2, 1351,
	-1, 645,
	53, 883,
	-2, 1352,
	-1, 797,
	1, 535,
	55, 535,
	454, 535,
	-2, 542,
	-1, 926,
	17, 361,
	-2, 728,
	-1, 972,
	119, 1044,
	-2, 1042,
	-1, 974,
	119, 449,
	-2, 1039,
	-1, 975,
	119, 450,
	-2, 1040,
	-1, 1170,
	1, 536,
	55, 536,
	454, 536,
	-2, 542,
	-1, 1229,
	53, 947,
	-2, 1349,
	-1, 1230,
	53, 948,
	-2, 1350,
	-1, 1669,
	74, 542,
	115, 542,
	149, 542,
	152, 542,
	-2, 582,
	-1, 1671,
	250, 695,
	-2, 676,
	-1, 1767,
	74, 542,
	115, 542,
	149, 542,
	152, 542,
	-2, 583,
	-1, 1795,
	250, 695,
	-2, 677,
	-1, 2172,
	54, 557,
	55, 557,
	-2, 542,
	-1, 2176,
	54, 557,
	55, 557,
	-2, 542,
	-1, 2188,
	54, 561,
	55, 561,
	-2, 542,
	-1, 2191,
	54, 562,
	55, 562,
	-2, 542,
}

const yyPrivate = 57344

const yyLast = 21972

var yyAct = [...]int{
	787, 1232, 2183, 2178, 2176, 2175, 2149, 648, 2123, 1825,
	776, 2014, 666, 2094, 2138, 1807, 472, 2075, 1989, 2076,
	1763, 1992, 1970, 533, 85, 646, 1157, 296, 1663, 853,
	1823, 1925, 1824, 1815, 568, 1977, 1689, 403, 468, 1834,
	1814, 85, 309, 1404, 307, 88, 1712, 300, 19, 1509,
	341, 341, 592, 1497, 836, 1723, 1715, 1705, 1727, 1546,
	1381, 518, 1537, 1513, 1796, 677, 53, 1525, 84, 602,
	1518, 1514, 954, 1675, 404, 1449, 1564, 1572, 1553, 1163,
	421, 860, 647, 969, 85, 963, 729, 576, 972, 1233,
	302, 657, 53, 955, 1316, 1302, 1411, 3, 1220, 52,
	829, 964, 299, 12, 1375, 363, 297, 6, 298, 5,
	771, 1771, 1171, 789, 772, 523, 804, 746, 1231, 595,
	347, 506, 1246, 346, 833, 289, 855, 1139, 434, 19,
	1130, 292, 1234, 445, 862, 395, 470, 893, 420, 763,
	806, 410, 412, 774, 313, 1146, 456, 53, 577, 805,
	560, 312, 311, 485, 81, 1845, 1759, 1662, 784, 303,
	957, 594, 80, 80, 418, 544, 80, 348, 23, 40,
	24, 80, 2041, 23, 40, 24, 411, 1142, 546, 431,
	1357, 1498, 1376, 2031, 12, 1364, 516, 80, 6, 80,
	5, 368, 540, 316, 316, 406, 823, 396, 408, 359,
	78, 416, 415, 343, 505, 818, 819, 534, 535, 76,
	76, 726, 1367, 76, 723, 382, 1474, 532, 76, 808,
	531, 534, 535, 779, 2079, 2080, 547, 500, 2063, 496,
	2098, 414, 2061, 1923, 725, 1501, 76, 1926, 1927, 1928,
	1929, 1664, 407, 2002, 1502, 2005, 1503, 1848, 783, 1526,
	1527, 1528, 1529, 1344, 439, 1547, 1550, 448, 1384, 1382,
	1379, 1383, 1385, 491, 1378, 1377, 1384, 1382, 830, 1383,
	1385, 1144, 1142, 383, 1831, 1711, 1710, 487, 498, 499,
	1659, 1812, 1756, 497, 764, 486, 1910, 1699, 2089, 85,
	438, 492, 1700, 1696, 1900, 1223, 1224, 1225, 2168, 437,
	2065, 1637, 85, 1417, 1224, 1225, 1221, 1549, 2040, 2184,
	766, 361, 1978, 1979, 1980, 1982, 1981, 1387, 1388, 1389,
	1390, 358, 357, 2078, 1611, 1608, 1609, 1610, 2103, 2016,
	1642, 413, 1641, 1640, 1638, 2012, 2013, 2060, 2016, 2110,
	1991, 448, 353, 2038, 1894, 2159, 452, 1863, 1862, 2067,
	2068, 1519, 1522, 473, 345, 2022, 374, 556, 494, 53,
	53, 412, 1889, 530, 529, 2185, 2179, 1450, 2150, 489,
	519, 1365, 2043, 2044, 478, 541, 1697, 1851, 433, 436,
	545, 490, 493, 495, 417, 2000, 1361, 1193, 1150, 1639,
	765, 488, 341, 791, 521, 411, 1530, 1393, 404, 404,
	404, 517, 1660, 341, 341, 450, 449, 2141, 477, 301,
	387, 482, 1707, 1706, 511, 520, 1402, 522, 1191, 1190,
	421, 1189, 550, 598, 598, 441, 442, 1522, 821, 1885,
	822, 376, 356, 1188, 375, 820, 728, 384, 573, 548,
	549, 385, 352, 2163, 2127, 1504, 1414, 1355, 1354, 911,
	1343, 1337, 743, 1183, 438, 85, 85, 85, 85, 389,
	388, 1155, 1124, 747, 874, 1523, 760, 1955, 731, 575,
	1516, 451, 435, 579, 1517, 1520, 844, 1490, 524, 525,
	724, 561, 341, 341, 438, 341, 537, 538, 2145, 450,
	449, 2066, 562, 777, 443, 360, 508, 2136, 53, 1222,
	1643, 1644, 1538, 341, 341, 527, 2142, 1416, 761, 53,
	1990, 1394, 597, 597, 526, 473, 2026, 2042, 1339, 341,
	1492, 341, 1141, 797, 534, 535, 1521, 85, 534, 535,
	580, 582, 1498, 408, 581, 316, 831, 1698, 796, 1695,
	1523, 813, 1145, 1165, 555, 341, 570, 570, 502, 510,
	484, 566, 567, 1195, 1632, 1890, 1891, 341, 404, 1128,
	341, 536, 440, 811, 539, 79, 79, 738, 739, 79,
	1491, 801, 1140, 1358, 79, 734, 845, 407, 792, 585,
	586, 587, 588, 589, 591, 721, 341, 341, 852, 85,
	79, 421, 79, 528, 861, 563, 564, 565, 871, 786,
	1236, 1235, 790, 814, 1317, 559, 856, 799, 578, 1373,
	798, 759, 800, 781, 748, 749, 750, 751, 782, 1799,
	870, 867, 2139, 2140, 809, 810, 316, 775, 778, 793,
	785, 794, 767, 854, 867, 857, 1384, 1382, 1887, 1383,
	1385, 780, 1886, 374, 1896, 802, 803, 424, 429, 430,
	837, 742, 386, 928, 1802, 815, 837, 837, 1895, 741,
	1797, 1317, 1880, 1455, 316, 1810, 1811, 1679, 847, 1674,
	74, 1798, 1966, 795, 832, 558, 1956, 1958, 1959, 1960,
	1957, 2158, 379, 807, 1857, 1244, 2174, 1241, 2155, 875,
	2120, 842, 843, 828, 2104, 1245, 850, 1309, 846, 2050,
	316, 1998, 1997, 848, 1964, 1803, 2156, 1621, 1965, 827,
	1972, 1307, 1308, 1306, 839, 840, 841, 926, 376, 1950,
	1949, 375, 2157, 1948, 374, 390, 961, 961, 966, 858,
	316, 849, 1945, 1962, 1952, 929, 930, 931, 932, 851,
	1963, 927, 1939, 1936, 1935, 861, 409, 1846, 974, 935,
	933, 411, 910, 909, 919, 920, 912, 913, 914, 915,
	916, 917, 918, 911, 1839, 1838, 937, 1837, 901, 1961,
	1951, 1833, 951, 868, 869, 870, 867, 975, 914, 915,
	916, 917, 918, 911, 1809, 1832, 1515, 868, 869, 870,
	867, 412, 85, 85, 1437, 1827, 1634, 1685, 1684, 376,
	1683, 53, 375, 1682, 1486, 426, 427, 428, 296, 732,
	1764, 1805, 2099, 1138, 1458, 1185, 2088, 1457, 1749, 2071,
	968, 945, 856, 2188, 341, 411, 1125, 960, 1971, 1424,
	2020, 373, 1126, 1804, 1806, 2019, 1160, 1162, 1436, 377,
	868, 869, 870, 867, 1996, 341, 1158, 1159, 1953, 1946,
	967, 857, 1942, 408, 1748, 1941, 953, 474, 475, 476,
	868, 869, 870, 867, 598, 2166, 85, 1122, 973, 1940,
	1123, 1882, 1847, 1216, 1835, 1218, 868, 869, 870, 867,
	1405, 1135, 2072, 868, 869, 870, 867, 2144, 1174, 1175,
	1176, 1812, 1762, 1242, 1243, 1186, 1760, 1692, 868, 869,
	870, 867, 1535, 1800, 868, 869, 870, 867, 1149, 1172,
	912, 913, 914, 915, 916, 917, 918, 911, 951, 1534,
	1177, 1533, 1532, 1179, 1152, 1181, 1151, 947, 908, 837,
	837, 837, 1178, 1180, 907, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1226, 1326, 1208,
	1311, 1312, 1182, 597, 733, 1154, 1211, 1212, 1213, 1214,
	1215, 807, 1420, 2193, 1196, 1197, 1198, 316, 350, 1201,
	1464, 1202, 2047, 1420, 1463, 1328, 1192, 2046, 349, 1239,
	2187, 2186, 2027, 1209, 1148, 2169, 1916, 1587, 1200, 2165,
	2164, 1153, 1281, 1912, 370, 2133, 372, 382, 1148, 2153,
	1911, 369, 367, 366, 378, 371, 1310, 380, 381, 868,
	869, 870, 867, 1304, 868, 869, 870, 867, 584, 1750,
	1237, 1238, 1747, 1240, 1148, 2152, 1318, 1420, 1321, 1276,
	1277, 1278, 1279, 1280, 2126, 2125, 1286, 1287, 1288, 1289,
	1331, 910, 909, 919, 920, 912, 913, 914, 915, 916,
	917, 918, 911, 1739, 362, 1342, 1704, 1320, 1322, 1323,
	1319, 1907, 2086, 1907, 2081, 1204, 2069, 1327, 1669, 1329,
	2058, 2057, 1460, 1575, 909, 919, 920, 912, 913, 914,
	915, 916, 917, 918, 911, 1330, 1907, 2036, 1594, 1598,
	1600, 1602, 1604, 1605, 1607, 1651, 1611, 1608, 1609, 1610,
	1907, 2035, 1589, 1590, 1591, 1592, 1573, 1574, 1595, 1552,
	1576, 1551, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1593, 1907, 2034, 1345, 1907, 2033, 438, 1467,
	1597, 1599, 1601, 1603, 1606, 2025, 2024, 747, 868, 869,
	870, 867, 1465, 341, 1920, 1919, 341, 1462, 922, 438,
	925, 341, 1918, 1917, 1914, 1915, 1370, 1461, 1360, 1914,
	1913, 1588, 1907, 1906, 923, 924, 921, 1459, 910, 909,
	919, 920, 912, 913, 914, 915, 916, 917, 918, 911,
	2131, 1207, 1654, 1429, 1399, 878, 879, 880, 881, 882,
	883, 884, 876, 1426, 341, 1420, 1626, 1420, 1612, 1420,
	1428, 1420, 1427, 1419, 85, 85, 1207, 1346, 1410, 1401,
	1392, 1341, 1340, 1372, 1335, 1334, 1995, 1325, 1349, 1207,
	1206, 1350, 1148, 1147, 1352, 1324, 910, 909, 919, 920,
	912, 913, 914, 915, 916, 917, 918, 911, 868, 869,
	870, 867, 1425, 1368, 1369, 1348, 790, 1347, 1407, 1408,
	408, 865, 1921, 19, 736, 735, 1905, 1356, 730, 762,
	583, 1362, 1840, 501, 1395, 479, 481, 480, 1332, 480,
	1371, 53, 1565, 1566, 868, 869, 870, 867, 868, 869,
	870, 867, 1172, 1391, 868, 869, 870, 867, 1670, 1359,
	1142, 1400, 2189, 1735, 863, 1396, 1406, 1397, 1652, 1398,
	1127, 1413, 482, 1409, 1403, 1338, 1314, 1444, 12, 482,
	1204, 1156, 6, 590, 5, 868, 869, 870, 867, 1418,
	1415, 1734, 557, 1899, 1421, 1733, 80, 1422, 1423, 2135,
	2129, 2111, 2108, 2106, 1447, 1448, 961, 2049, 1478, 961,
	1987, 1975, 1481, 868, 869, 870, 867, 868, 869, 870,
	867, 1973, 861, 1968, 341, 1930, 1714, 1903, 341, 341,
	1484, 1902, 341, 1901, 1596, 1898, 1431, 1432, 1433, 1434,
	1435, 926, 1439, 76, 1893, 438, 1440, 1441, 1442, 1443,
	1878, 593, 1475, 1724, 1512, 1716, 1728, 85, 1473, 1485,
	1446, 1731, 1721, 1720, 1480, 1687, 1751, 1680, 1304, 1305,
	53, 76, 1445, 1374, 1452, 411, 1351, 1456, 1333, 1477,
	1454, 1205, 1194, 1187, 85, 1557, 952, 950, 949, 948,
	1468, 946, 894, 837, 1479, 943, 1470, 1482, 1469, 837,
	942, 1536, 1483, 1488, 940, 1487, 1168, 1476, 1649, 939,
	938, 1531, 910, 909, 919, 920, 912, 913, 914, 915,
	916, 917, 918, 911, 936, 906, 1539, 1540, 905, 341,
	868, 869, 870, 867, 1489, 341, 1631, 904, 903, 902,
	900, 899, 1496, 919, 920, 912, 913, 914, 915, 916,
	917, 918, 911, 1541, 1542, 898, 897, 896, 868, 869,
	870, 867, 1648, 1645, 895, 341, 892, 891, 890, 1647,
	889, 1493, 1495, 888, 1556, 1557, 887, 85, 886, 885,
	1559, 744, 727, 483, 1543, 2116, 1673, 1131, 1132, 1625,
	1613, 1630, 1627, 310, 2114, 2077, 1386, 1619, 1620, 1203,
	1134, 503, 1137, 1629, 756, 1636, 1136, 1628, 341, 757,
	341, 868, 869, 870, 867, 1633, 753, 1653, 1650, 754,
	1646, 1668, 752, 1667, 755, 2173, 1336, 1703, 910, 909,
	919, 920, 912, 913, 914, 915, 916, 917, 918, 911,
	2091, 53, 1688, 1624, 342, 758, 1658, 462, 463, 543,
	1677, 542, 1173, 1158, 1159, 1672, 1499, 507, 1676, 1671,
	1676, 1686, 1681, 1678, 1656, 868, 869, 870, 867, 1506,
	1166, 1657, 570, 1623, 817, 1694, 1849, 1505, 570, 910,
	909, 919, 920, 912, 913, 914, 915, 916, 917, 918,
	911, 859, 1718, 1719, 1708, 868, 869, 870, 867, 1622,
	1693, 1717, 466, 1236, 1235, 1121, 1722, 509, 1655, 1726,
	1618, 513, 514, 2130, 1702, 2054, 2052, 1725, 2007, 2006,
	2004, 868, 869, 870, 867, 1933, 1931, 341, 341, 1761,
	1701, 85, 868, 869, 870, 867, 1666, 1665, 1729, 1617,
	1732, 438, 1555, 1768, 512, 1816, 1818, 349, 1816, 1816,
	1512, 570, 1554, 1690, 1740, 1412, 350, 1742, 438, 1744,
	730, 868, 869, 870, 867, 1741, 349, 1743, 1737, 1466,
	1430, 1745, 1746, 1616, 1353, 1757, 288, 1752, 1615, 1817,
	2117, 1736, 1755, 2118, 1614, 2118, 2117, 465, 1819, 1820,
	1793, 1765, 364, 1, 1738, 868, 869, 870, 867, 1282,
	868, 869, 870, 867, 515, 1813, 868, 869, 870, 867,
	740, 1821, 837, 1562, 423, 1829, 910, 909, 919, 920,
	912, 913, 914, 915, 916, 917, 918, 911, 447, 737,
	446, 1836, 1451, 444, 75, 868, 869, 870, 867, 1315,
	1822, 1853, 1247, 1561, 678, 956, 962, 1969, 2090, 2122,
	2048, 1843, 2093, 910, 909, 919, 920, 912, 913, 914,
	915, 916, 917, 918, 911, 868, 869, 870, 867, 665,
	1753, 1754, 649, 1999, 341, 1560, 1500, 453, 1922, 1856,
	2001, 1924, 1366, 85, 1842, 1363, 504, 458, 461, 462,
	463, 459, 1818, 460, 464, 1881, 1471, 868, 869, 870,
	867, 1472, 1854, 1855, 730, 1858, 1859, 1860, 1861, 1841,
	1883, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1904, 1934, 1897, 1313, 1813,
	1879, 690, 458, 461, 462, 463, 459, 681, 460, 464,
	941, 683, 1908, 722, 425, 680, 1828, 1967, 1548, 351,
	868, 869, 870, 867, 458, 461, 462, 463, 459, 422,
	460, 464, 365, 1830, 1661, 1709, 1730, 1932, 1713, 438,
	2182, 2172, 438, 438, 438, 1947, 2148, 2128, 438, 2015,
	2167, 2059, 473, 2109, 2102, 53, 1909, 2011, 1850, 1937,
	1938, 314, 824, 551, 393, 1943, 1944, 1988, 745, 1976,
	1524, 2009, 1984, 1985, 1986, 1994, 1983, 1380, 341, 341,
	1993, 1164, 1143, 773, 315, 2039, 1974, 1690, 354, 1167,
	355, 1170, 2010, 1169, 1227, 877, 2003, 1303, 944, 934,
	600, 1453, 656, 650, 1545, 1544, 1808, 812, 26, 85,
	467, 866, 2017, 2018, 970, 679, 438, 87, 1184, 971,
	2008, 1844, 2095, 664, 663, 662, 661, 457, 438, 455,
	454, 306, 305, 864, 2074, 2073, 2029, 2030, 2023, 1758,
	1892, 1954, 1888, 1884, 2021, 1767, 2032, 1766, 1794, 1795,
	1801, 1571, 1567, 854, 1569, 1570, 1568, 1635, 2037, 1563,
	1510, 1511, 2045, 1508, 1507, 2053, 1133, 2055, 2056, 1129,
	2051, 958, 965, 432, 788, 82, 2062, 2064, 304, 1210,
	11, 18, 17, 16, 48, 47, 46, 45, 2070, 15,
	2097, 8, 44, 43, 42, 2082, 2083, 2084, 2085, 2101,
	14, 13, 2096, 2028, 38, 36, 35, 34, 33, 32,
	31, 30, 37, 29, 28, 2100, 27, 9, 57, 56,
	55, 570, 570, 54, 20, 21, 22, 2105, 63, 2107,
	62, 2112, 61, 60, 2115, 2113, 59, 25, 10, 2124,
	7, 4, 2119, 2087, 2, 0, 2121, 438, 0, 438,
	0, 0, 0, 0, 0, 0, 777, 2132, 777, 2134,
	0, 0, 0, 0, 0, 0, 0, 2097, 2147, 0,
	0, 0, 0, 2143, 0, 0, 438, 2137, 0, 2096,
	2146, 0, 2151, 0, 0, 777, 2154, 0, 0, 0,
	0, 0, 2124, 2160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2170, 0, 0, 0, 0, 0,
	0, 0, 2171, 0, 0, 0, 0, 0, 0, 0,
	2181, 0, 2180, 0, 0, 0, 0, 0, 0, 0,
	2190, 2192, 0, 2191, 0, 2181, 0, 0, 0, 0,
	0, 1084, 1071, 0, 1033, 1086, 1007, 1022, 1094, 1023,
	1024, 1058, 986, 1042, 212, 1020, 978, 1010, 1011, 980,
	1017, 981, 1008, 1035, 156, 1006, 1074, 1045, 182, 1092,
	0, 0, 242, 196, 0, 2162, 1038, 1076, 1040, 1063,
	1032, 1059, 994, 1052, 1087, 1021, 1056, 1088, 0, 0,
	0, 0, 0, 474, 475, 476, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 1055, 1081, 1019, 0,
	141, 1085, 1039, 1057, 0, 0, 979, 1053, 0, 984,
	987, 1093, 1079, 1014, 1015, 0, 0, 0, 0, 0,
	0, 0, 1036, 1041, 1060, 1029, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1012, 0, 1049, 0, 0,
	0, 989, 985, 0, 1034, 0, 130, 247, 261, 139,
	238, 274, 144, 245, 135, 211, 234, 132, 259, 244,
	193, 176, 177, 131, 0, 229, 154, 168, 151, 209,
	0, 1083, 286, 150, 277, 988, 269, 134, 1120, 268,
	208, 256, 260, 194, 188, 133, 258, 192, 187, 180,
	158, 172, 221, 186, 222, 173, 198, 197, 199, 1104,
	1105, 1106, 1107, 1108, 1116, 1117, 0, 993, 0, 1013,
	1061, 0, 977, 1069, 1077, 1031, 271, 1080, 1028, 1027,
	1111, 0, 1110, 246, 1112, 1113, 181, 1075, 1009, 1018,
	287, 1016, 232, 214, 1082, 1048, 219, 230, 184, 257,
	223, 262, 248, 270, 226, 224, 126, 249, 153, 195,
	136, 137, 149, 155, 157, 159, 160, 204, 205, 217,
	237, 250, 251, 252, 152, 145, 231, 146, 170, 147,
	127, 239, 148, 128, 218, 255, 1109, 166, 227, 191,
	129, 190, 220, 254, 253, 278, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1118, 0, 1119,
	283, 163, 976, 266, 0, 210, 1072, 982, 992, 990,
	1025, 1050, 1051, 206, 282, 1065, 1068, 1066, 1095, 235,
	0, 0, 0, 0, 0, 175, 216, 0, 236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 983,
	0, 243, 264, 276, 267, 1026, 1000, 1037, 275, 1003,
	1001, 1064, 1002, 1054, 1097, 200, 201, 202, 203, 167,
	0, 143, 1046, 1030, 1098, 1099, 1100, 1101, 1102, 1103,
	1005, 1078, 162, 169, 0, 171, 142, 215, 165, 273,
	178, 1070, 207, 174, 240, 179, 185, 228, 272, 213,
	233, 140, 263, 241, 189, 164, 999, 1004, 998, 1043,
	1044, 1089, 1090, 1091, 1062, 991, 1073, 995, 997, 996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1067,
	0, 1047, 125, 0, 183, 1096, 225, 161, 686, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 658, 0, 0, 0, 156, 0,
	0, 0, 182, 0, 0, 0, 242, 196, 0, 0,
	0, 0, 700, 706, 1114, 1115, 279, 280, 281, 265,
	0, 0, 0, 651, 0, 0, 0, 601, 692, 691,
	667, 0, 0, 0, 138, 668, 0, 675, 669, 673,
	672, 670, 671, 0, 638, 0, 0, 0, 0, 0,
	0, 599, 655, 0, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 652, 653, 0, 0, 0,
	0, 687, 0, 654, 0, 0, 689, 0, 676, 0,
	130, 247, 261, 139, 238, 274, 144, 245, 135, 211,
	234, 132, 259, 244, 193, 176, 177, 131, 0, 229,
	154, 168, 151, 209, 674, 685, 644, 150, 642, 684,
	269, 134, 0, 268, 208, 256, 260, 194, 188, 133,
	258, 192, 187, 180, 158, 172, 221, 186, 222, 173,
	198, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 682, 0, 0,
	271, 0, 0, 699, 0, 0, 0, 246, 0, 0,
	181, 0, 0, 0, 645, 0, 232, 214, 709, 0,
	219, 230, 184, 257, 223, 262, 248, 270, 226, 224,
	126, 249, 153, 195, 136, 137, 149, 155, 157, 159,
	160, 204, 205, 217, 237, 250, 251, 252, 152, 145,
	231, 146, 170, 147, 127, 239, 148, 128, 218, 255,
	0, 166, 227, 191, 129, 190, 220, 254, 253, 278,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1284, 1283, 1285, 283, 163, 0, 266, 697, 210,
	708, 693, 694, 695, 698, 701, 702, 640, 643, 703,
	705, 707, 710, 235, 0, 0, 0, 0, 0, 175,
	216, 0, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 264, 276, 641, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 688, 200,
	201, 202, 203, 639, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 169, 0, 171,
	142, 215, 165, 273, 178, 0, 207, 174, 240, 179,
	185, 228, 272, 213, 233, 140, 263, 241, 189, 164,
	716, 696, 715, 717, 718, 714, 719, 720, 704, 660,
	0, 712, 711, 713, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 183, 0,
	225, 161, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 104, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 0, 0,
	279, 280, 281, 265, 80, 0, 686, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	700, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 601, 692, 691, 667, 0,
	0, 0, 138, 668, 0, 675, 669, 673, 672, 670,
	671, 0, 638, 0, 0, 0, 0, 0, 0, 599,
	655, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 653, 0, 0, 0, 0, 687,
	0, 654, 0, 0, 689, 0, 676, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 674, 685, 644, 150, 642, 684, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 682, 0, 0, 271, 0,
	0, 699, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 645, 0, 232, 214, 709, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 697, 210, 708, 693,
	694, 695, 698, 701, 702, 640, 643, 703, 705, 707,
	710, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 641, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 688, 200, 201, 202,
	203, 639, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 0, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 716, 696,
	715, 717, 718, 714, 719, 720, 704, 660, 0, 712,
	711, 713, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 79, 225, 161,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 104, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 686, 0, 279, 280,
	281, 265, 0, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 156, 838, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	700, 706, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 651, 0, 0, 0, 601, 692, 691, 667, 0,
	0, 0, 138, 668, 0, 675, 669, 673, 672, 670,
	671, 0, 638, 0, 0, 0, 0, 0, 0, 599,
	655, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 653, 0, 0, 0, 0, 687,
	0, 654, 0, 0, 835, 0, 676, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 674, 685, 644, 150, 642, 684, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 682, 0, 0, 271, 0,
	0, 699, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 645, 0, 232, 214, 709, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 697, 210, 708, 693,
	694, 695, 698, 701, 702, 640, 643, 703, 705, 707,
	710, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 641, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 688, 200, 201, 202,
	203, 639, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 0, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 716, 696,
	715, 717, 718, 714, 719, 720, 704, 660, 0, 712,
	711, 713, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 104, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 686, 0, 279, 280,
	281, 265, 0, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 156, 2161, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	700, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 601, 692, 691, 667, 0,
	0, 0, 138, 668, 0, 675, 669, 673, 672, 670,
	671, 0, 638, 0, 0, 0, 0, 0, 0, 599,
	655, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 653, 0, 0, 0, 0, 687,
	0, 654, 0, 0, 689, 0, 676, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 674, 685, 644, 150, 642, 684, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 682, 0, 0, 271, 0,
	0, 699, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 645, 0, 232, 214, 709, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 697, 210, 708, 693,
	694, 695, 698, 701, 702, 640, 643, 703, 705, 707,
	710, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 641, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 688, 200, 201, 202,
	203, 639, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 0, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 716, 696,
	715, 717, 718, 714, 719, 720, 704, 660, 0, 712,
	711, 713, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 104, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 686, 0, 279, 280,
	281, 265, 0, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 156, 838, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	700, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 601, 692, 691, 667, 0,
	0, 0, 138, 668, 0, 675, 669, 673, 672, 670,
	671, 0, 638, 0, 0, 0, 0, 0, 0, 599,
	655, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 653, 0, 0, 0, 0, 687,
	0, 654, 0, 0, 689, 0, 676, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 674, 685, 644, 150, 642, 684, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 682, 0, 0, 271, 0,
	0, 699, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 645, 0, 232, 214, 709, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 697, 210, 708, 693,
	694, 695, 698, 701, 702, 640, 643, 703, 705, 707,
	710, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 641, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 688, 200, 201, 202,
	203, 639, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 0, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 716, 696,
	715, 717, 718, 714, 719, 720, 704, 660, 0, 712,
	711, 713, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 104, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 0, 0, 279, 280,
	281, 265, 686, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 700, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 601, 692, 691, 667, 0, 0, 0, 138, 668,
	0, 675, 669, 673, 672, 670, 671, 0, 638, 0,
	0, 0, 0, 0, 0, 599, 655, 0, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	653, 0, 0, 0, 0, 687, 0, 654, 0, 0,
	689, 0, 676, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 674, 685,
	644, 150, 642, 684, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 0, 0, 271, 0, 0, 699, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 645, 0,
	232, 214, 709, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 697, 210, 708, 693, 694, 695, 698, 701,
	702, 640, 643, 703, 705, 707, 710, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 641, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 688, 200, 201, 202, 203, 639, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 0,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 716, 696, 715, 717, 718, 714,
	719, 720, 704, 660, 0, 712, 711, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 104, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 686, 0, 279, 280, 281, 265, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 700, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 601, 692, 691, 667, 0, 0, 0, 138, 668,
	0, 675, 669, 673, 672, 670, 671, 0, 638, 0,
	0, 0, 0, 0, 0, 599, 655, 0, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	653, 596, 0, 0, 0, 687, 0, 654, 0, 0,
	689, 0, 676, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 674, 685,
	644, 150, 642, 684, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 0, 0, 271, 0, 0, 699, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 645, 0,
	232, 214, 709, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 697, 210, 708, 693, 694, 695, 698, 701,
	702, 640, 643, 703, 705, 707, 710, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 641, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 688, 200, 201, 202, 203, 639, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 0,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 716, 696, 715, 717, 718, 714,
	719, 720, 704, 660, 0, 712, 711, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 104, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 686, 0, 279, 280, 281, 265, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 700, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 601, 692, 691, 667, 0, 0, 0, 138, 668,
	0, 675, 669, 673, 672, 670, 671, 0, 638, 0,
	0, 0, 0, 0, 0, 599, 655, 0, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	653, 0, 0, 0, 0, 687, 0, 654, 0, 0,
	689, 0, 676, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 674, 685,
	644, 150, 642, 684, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 0, 0, 271, 0, 0, 699, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 645, 0,
	232, 214, 709, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 697, 210, 708, 693, 694, 695, 698, 701,
	702, 640, 643, 703, 705, 707, 710, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 641, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 688, 200, 201, 202, 203, 639, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 0,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 716, 696, 715, 717, 718, 714,
	719, 720, 704, 660, 0, 712, 711, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 104, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 686, 0, 279, 280, 281, 265, 0, 0,
	0, 0, 212, 0, 1228, 0, 0, 0, 658, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 700, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 601, 692, 691, 667, 0, 0, 0, 138, 668,
	0, 675, 669, 673, 672, 670, 671, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 655, 0, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	653, 0, 0, 0, 0, 687, 0, 654, 0, 0,
	689, 0, 676, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 674, 685,
	644, 150, 642, 684, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 0, 0, 271, 0, 0, 699, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 645, 0,
	232, 214, 709, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 1229, 1230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 697, 210, 708, 693, 694, 695, 698, 701,
	702, 640, 643, 703, 705, 707, 710, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 641, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 688, 200, 201, 202, 203, 639, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 0,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 716, 696, 715, 717, 718, 714,
	719, 720, 704, 660, 0, 712, 711, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 104, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 686, 0, 279, 280, 281, 265, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 700, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 601, 692, 691, 667, 0, 0, 0, 138, 668,
	0, 675, 669, 673, 672, 670, 671, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 655, 0, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	653, 0, 0, 0, 0, 687, 0, 654, 0, 0,
	689, 0, 676, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 674, 685,
	644, 150, 642, 684, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 0, 0, 271, 0, 0, 699, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 645, 0,
	232, 214, 709, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 697, 210, 708, 693, 694, 695, 698, 701,
	702, 640, 643, 703, 705, 707, 710, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 641, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 688, 200, 201, 202, 203, 639, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 0,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 716, 696, 715, 717, 718, 714,
	719, 720, 704, 660, 0, 712, 711, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 104, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 686, 0, 279, 280, 281, 265, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 700, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 692, 691, 667, 0, 0, 0, 138, 668,
	0, 675, 669, 673, 672, 670, 671, 0, 638, 0,
	0, 0, 0, 0, 0, 599, 655, 0, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	653, 0, 0, 0, 0, 687, 0, 654, 0, 0,
	689, 0, 676, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 674, 685,
	644, 150, 642, 684, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 0, 0, 271, 0, 0, 699, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 645, 0,
	232, 214, 709, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 697, 210, 708, 693, 694, 695, 698, 701,
	702, 640, 643, 703, 705, 707, 710, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 641, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 688, 200, 201, 202, 203, 639, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 0,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 716, 696, 715, 717, 718, 714,
	719, 720, 704, 660, 0, 712, 711, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 104, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 0, 0, 279, 280, 281, 265, 326, 0,
	325, 329, 321, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 336, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 340, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 319, 318, 322, 0, 0, 0, 0,
	0, 324, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 328, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 320, 248, 270,
	226, 344, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 1267, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 323,
	327, 330, 216, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 337, 338, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1263, 0, 1260, 0, 0, 0, 1262, 1259,
	1261, 1265, 1266, 0, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	0, 0, 279, 280, 281, 265, 326, 0, 325, 329,
	321, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	317, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 336, 182, 0, 0, 0, 242, 196, 1248, 1249,
	1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1270,
	1271, 1272, 1273, 1274, 1275, 1268, 1269, 339, 0, 0,
	340, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 325,
	329, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 0, 0, 0, 0, 0,
	130, 247, 261, 139, 238, 274, 144, 245, 135, 211,
	234, 132, 259, 244, 193, 176, 177, 131, 0, 229,
	154, 168, 151, 209, 0, 0, 286, 150, 277, 0,
	269, 134, 0, 268, 208, 256, 260, 194, 188, 133,
	258, 192, 187, 180, 158, 172, 221, 186, 222, 173,
	198, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 319, 318, 322, 0, 0, 0, 0, 0, 324,
	271, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	181, 328, 0, 0, 287, 0, 232, 214, 0, 0,
	219, 230, 184, 257, 223, 320, 248, 270, 226, 224,
	126, 249, 153, 195, 136, 137, 149, 155, 157, 159,
	160, 204, 205, 217, 237, 250, 251, 252, 152, 145,
	231, 146, 170, 147, 127, 239, 148, 128, 218, 255,
	0, 166, 227, 191, 129, 190, 220, 254, 253, 278,
	284, 285, 319, 318, 322, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 283, 163, 0, 266, 0, 210,
	0, 0, 328, 0, 0, 0, 0, 206, 282, 0,
	0, 0, 0, 235, 0, 0, 768, 323, 327, 330,
	216, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	337, 338, 0, 0, 0, 243, 264, 276, 267, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 200,
	201, 202, 203, 167, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 169, 0, 171,
	142, 215, 165, 273, 178, 0, 207, 174, 240, 179,
	185, 228, 272, 213, 233, 140, 263, 241, 189, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 327,
	769, 0, 331, 770, 0, 0, 333, 334, 335, 0,
	0, 337, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 183, 0,
	225, 161, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 0, 0,
	279, 280, 281, 265, 80, 0, 23, 40, 24, 0,
	0, 0, 0, 0, 0, 0, 212, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 0, 0, 286, 150, 277, 0, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 287, 0, 232, 214, 0, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 206, 282, 0, 0, 0,
	0, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 267, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 200, 201, 202,
	203, 291, 293, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 0, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 79, 225, 161,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 212, 0, 279, 280,
	281, 265, 0, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 1519, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 0, 0, 286, 150, 277, 0, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1523, 271, 0,
	0, 0, 1516, 0, 1515, 246, 1517, 1520, 181, 0,
	0, 0, 287, 0, 232, 214, 0, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 1521, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 206, 282, 0, 0, 0,
	0, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 267, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 200, 201, 202,
	203, 167, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 0, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 0, 212, 279, 280,
	281, 265, 872, 0, 0, 0, 0, 156, 0, 0,
	0, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 873,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 868, 869, 870, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 0, 0, 286, 150, 277, 0, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 181,
	0, 0, 0, 287, 0, 232, 214, 0, 0, 219,
	230, 184, 257, 223, 262, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 206, 282, 0, 0,
	0, 0, 235, 0, 0, 0, 0, 0, 175, 216,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 264, 276, 267, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 200, 201,
	202, 203, 167, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 0, 207, 174, 240, 179, 185,
	228, 272, 213, 233, 140, 263, 241, 189, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 183, 0, 225,
	161, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 212, 0, 279,
	280, 281, 265, 0, 0, 0, 0, 156, 392, 0,
	0, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 400, 401, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 0, 0, 286, 150, 277, 376, 269,
	134, 375, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 181,
	0, 0, 0, 287, 0, 232, 214, 0, 0, 219,
	230, 184, 257, 223, 262, 248, 270, 391, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 206, 282, 0, 0,
	0, 0, 235, 0, 0, 0, 0, 0, 175, 216,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 264, 276, 267, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 394, 200, 201,
	202, 203, 167, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 0, 402, 397, 398, 179, 185,
	228, 272, 213, 233, 140, 263, 241, 399, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 183, 0, 225,
	161, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 80, 0, 279,
	280, 281, 265, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 182, 0, 0, 0, 242, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 959, 0, 86, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 247, 261, 139, 238, 274, 144, 245, 135,
	211, 234, 132, 259, 244, 193, 176, 177, 131, 0,
	229, 154, 168, 151, 209, 0, 0, 286, 150, 277,
	0, 269, 134, 0, 268, 208, 256, 260, 194, 188,
	133, 258, 192, 187, 180, 158, 172, 221, 186, 222,
	173, 198, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 181, 0, 0, 0, 287, 0, 232, 214, 0,
	0, 219, 230, 184, 257, 223, 262, 248, 270, 226,
	224, 126, 249, 153, 195, 136, 137, 149, 155, 157,
	159, 160, 204, 205, 217, 237, 250, 251, 252, 152,
	145, 231, 146, 170, 147, 127, 239, 148, 128, 218,
	255, 0, 166, 227, 191, 129, 190, 220, 254, 253,
	278, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 163, 0, 266, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 206, 282,
	0, 0, 0, 0, 235, 0, 0, 0, 0, 0,
	175, 216, 0, 236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 264, 276, 267,
	0, 0, 0, 275, 0, 0, 0, 0, 0, 0,
	200, 201, 202, 203, 167, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 169, 0,
	171, 142, 215, 165, 273, 178, 0, 207, 174, 240,
	179, 185, 228, 272, 213, 233, 140, 263, 241, 189,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 183,
	79, 225, 161, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 212,
	0, 279, 280, 281, 265, 0, 0, 0, 0, 156,
	0, 0, 0, 182, 0, 0, 0, 242, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 400,
	401, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 247, 261, 139, 238, 274, 144, 245, 135,
	211, 234, 132, 259, 244, 193, 176, 177, 131, 0,
	229, 154, 168, 151, 209, 0, 0, 286, 150, 277,
	376, 269, 134, 375, 268, 208, 256, 260, 194, 188,
	133, 258, 192, 187, 180, 158, 172, 221, 186, 222,
	173, 198, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 181, 0, 0, 0, 287, 0, 232, 214, 0,
	0, 219, 230, 184, 257, 223, 262, 248, 270, 226,
	224, 126, 249, 153, 195, 136, 137, 149, 155, 157,
	159, 160, 204, 205, 217, 237, 250, 251, 252, 152,
	145, 231, 146, 170, 147, 127, 239, 148, 128, 218,
	255, 0, 166, 227, 191, 129, 190, 220, 254, 253,
	278, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 163, 0, 266, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 206, 282,
	0, 0, 0, 0, 235, 0, 0, 0, 0, 0,
	175, 216, 0, 236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 264, 276, 267,
	0, 0, 0, 275, 0, 0, 0, 0, 0, 0,
	200, 201, 202, 203, 167, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 169, 0,
	171, 142, 215, 165, 273, 178, 0, 402, 397, 398,
	179, 185, 228, 272, 213, 233, 140, 263, 241, 399,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 183,
	0, 225, 161, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 0,
	0, 279, 280, 281, 265, 212, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 156, 553, 0, 0, 182,
	0, 0, 0, 242, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 340, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 247, 261,
	139, 238, 274, 144, 245, 135, 211, 234, 132, 259,
	244, 193, 176, 177, 131, 0, 229, 154, 168, 151,
	209, 0, 0, 286, 150, 277, 0, 269, 134, 0,
	268, 208, 256, 260, 194, 188, 133, 258, 192, 187,
	180, 158, 172, 221, 186, 222, 173, 198, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 181, 0, 0,
	0, 287, 0, 232, 214, 0, 0, 219, 230, 184,
	257, 223, 262, 248, 270, 226, 224, 126, 249, 153,
	195, 136, 137, 149, 155, 157, 159, 160, 204, 205,
	217, 237, 250, 251, 252, 152, 145, 231, 146, 170,
	147, 127, 239, 148, 128, 218, 255, 0, 166, 227,
	191, 129, 190, 220, 254, 253, 278, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 163, 0, 266, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 206, 282, 0, 0, 0, 0,
	235, 0, 0, 0, 0, 0, 175, 216, 0, 236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 264, 276, 267, 0, 0, 0, 275,
	0, 0, 0, 0, 554, 0, 200, 201, 202, 203,
	167, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 169, 0, 171, 142, 215, 165,
	273, 178, 0, 207, 174, 240, 179, 185, 228, 272,
	213, 233, 140, 263, 241, 189, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 183, 0, 225, 161, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 0, 0, 279, 280, 281,
	265, 212, 0, 826, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 340, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	825, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 574, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 572, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 569, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 572, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2092, 0,
	86, 692, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 572, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 572, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1691,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 572, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 1494, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 1199, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 572, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 692, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1826, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 572, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1558, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 308, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 1217, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 340, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 1161, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 572, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 816, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	83, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 0, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 0, 212, 279, 280, 281, 265, 469, 0, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 475, 476, 471, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 0, 0,
	286, 150, 277, 0, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 287, 0,
	232, 214, 0, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 206, 282, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 267, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 200, 201, 202, 203, 167, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 0,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 474, 475, 476, 471,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 280, 281, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 0, 0, 286, 150, 277, 0, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 181,
	0, 0, 0, 287, 0, 232, 214, 0, 0, 219,
	230, 184, 257, 223, 262, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 206, 282, 0, 0,
	0, 0, 235, 0, 0, 0, 0, 0, 175, 216,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 264, 276, 267, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 200, 201,
	202, 203, 167, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 0, 207, 174, 240, 179, 185,
	228, 272, 213, 233, 140, 263, 241, 189, 164, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 183, 0, 225,
	161, 474, 475, 476, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 0, 0,
	286, 150, 277, 0, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 287, 0,
	232, 214, 0, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 868, 869, 870,
	867, 0, 0, 1587, 0, 0, 0, 0, 283, 163,
	0, 266, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 206, 282, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 267, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 200, 201, 202, 203, 167, 1267, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 1575,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 1594, 1598, 1600, 1602, 1604, 1605,
	1607, 0, 1611, 1608, 1609, 1610, 0, 0, 1589, 1590,
	1591, 1592, 1573, 1574, 1595, 0, 1576, 0, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1593, 0,
	125, 0, 183, 0, 225, 161, 1597, 1599, 1601, 1603,
	1606, 0, 80, 0, 23, 40, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1791, 0, 0, 0,
	0, 0, 66, 0, 0, 0, 73, 1588, 0, 0,
	0, 0, 0, 0, 279, 280, 281, 265, 0, 1791,
	1173, 0, 0, 0, 41, 0, 0, 0, 1263, 76,
	1260, 0, 0, 0, 1262, 1259, 1261, 1265, 1266, 0,
	0, 0, 1264, 1173, 2177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1852, 0,
	0, 1791, 0, 0, 0, 0, 0, 0, 1773, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1173, 69, 70, 0, 71,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1773, 0, 0, 0, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1270, 1271, 1272, 1273, 1274,
	1275, 1268, 1269, 0, 0, 0, 0, 58, 68, 77,
	0, 39, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 65, 64,
	1777, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1781, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1777, 0, 0, 0, 0, 0, 0,
	1596, 1770, 0, 0, 1781, 1772, 1774, 1776, 0, 1778,
	1779, 1780, 1782, 1783, 1784, 1786, 1787, 1788, 1789, 0,
	0, 0, 0, 0, 1770, 0, 0, 0, 1772, 1774,
	1776, 0, 1778, 1779, 1780, 1782, 1783, 1784, 1786, 1787,
	1788, 1789, 0, 1792, 0, 1777, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1781, 0, 0, 49,
	0, 0, 0, 0, 0, 50, 1792, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1770, 1790, 0, 0,
	1772, 1774, 1776, 0, 1778, 1779, 1780, 1782, 1783, 1784,
	1786, 1787, 1788, 1789, 1769, 0, 0, 0, 0, 0,
	1790, 0, 51, 0, 0, 0, 0, 0, 0, 1785,
	0, 0, 0, 0, 0, 0, 1775, 1769, 1792, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1785, 0, 0, 0, 0, 0, 0, 1775,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1790, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1769,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 0, 0, 1785, 0, 0, 0, 0, 0,
	0, 1775,
}

var yyPact = [...]int{
	21546, -1000, -300, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19563, 1695, -1000, 8358, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 221,
	16553, 19993, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7910,
	7462, 128, -1000, 1681, -1000, -1000, -1000, -1000, 124, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 650, -45, 312,
	319, 330, 330, 9649, 1681, 1320, 157, 13, -1000, 19133,
	627, 21546, 168, 19993, -1000, 353, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16553, 19993,
	-81, 473, -1000, 165, 160, 156, 352, -1000, -1000, -1000,
	-1000, 19993, 1777, -1000, -1000, -1000, 1609, 20424, 157, -1000,
	1215, 1255, -1000, -1000, 1460, -1000, 95, -10, -32, 73,
	-1000, -1000, 140, -1000, -1000, -1000, -1000, -1000, 39, -1000,
	-17, -1000, -25, -1000, -1000, -1000, -118, -1000, -1000, -1000,
	-1000, -1000, 1213, 357, 1481, -164, 1560, 1620, 1320, 1658,
	1621, -2, 177, 177, 205, 177, -1000, -1000, -1000, -1000,
	-1000, -1000, 381, 381, 494, 147, -1000, -1000, -128, -132,
	381, 381, -132, 4, -1000, 1551, 1549, -1000, -1000, -1000,
	-1000, -1000, -1000, 187, -1000, -183, -1000, 311, -1000, 292,
	-1000, 10957, 139, 1268, 586, -1000, 392, 19993, 19993, 19993,
	392, 392, 12253, 11823, 350, -1000, 1620, 1320, -1000, 1681,
	1681, 1205, 963, 187, 187, 187, 187, 187, 1259, 19993,
	-1000, 1328, 5254, 5254, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 181, 1459, -1000, 19993, 1822, -1000, 349, 744,
	894, -1000, -1000, 165, 1200, -1000, 496, -1000, -1000, -1000,
	-1000, 19993, 1458, 19993, 16553, 16553, 16553, 16553, -1000, 1512,
	1506, -1000, 1509, 1494, 1535, 19993, -1000, -1000, -1000, 20779,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1204, 1681, 96,
	7991, 15693, 17843, 19993, 15693, -1000, -1000, -1000, -1000, -1000,
	-122, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 96, 15693, 15693, -89, -1000, -1000, -291, 1560, 5694,
	-1000, -1000, 5694, -1000, -1000, 203, 177, -1000, 15693, 550,
	17843, 800, 19993, 1678, 6574, 1678, 19993, -1000, -1000, 381,
	381, -1000, 494, 494, -1000, -1000, -126, 1678, 1678, -142,
	19993, 177, -1000, -1000, 18703, 1580, -157, 309, 299, 302,
	-1000, -1000, -173, -1000, -1000, 1248, 11393, 10521, 208, 15693,
	3488, -1000, -1000, 392, 392, 392, 3488, 3488, 361, -1000,
	-1000, -1000, -1000, -1000, -1000, 19993, 1560, -1000, -1000, -1000,
	1620, 1560, 1620, -1000, -1000, 15693, 17843, 19993, 19993, 21134,
	19993, 1259, 1598, 19993, 1240, -1000, -1000, 9219, 345, 5694,
	1096, 1456, -1000, -1000, 1455, 1453, 1450, 1447, 1445, 1444,
	1443, -1000, 1369, -1000, -1000, 1441, 1434, 1433, 1432, -1000,
	-1000, -1000, -1000, -1000, -1000, 1418, -1000, -1000, -1000, 1417,
	1369, -1000, -1000, 1416, 1415, 1414, 1405, 1402, -1000, -1000,
	-1000, -1000, -1000, -1000, 874, 868, 1067, -1000, -1000, -1000,
	-1000, 3048, 6574, 6574, 6574, 6574, -1000, -1000, 1348, 5694,
	1401, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7014, -1000, 1387, 1386,
	1381, 1377, 1372, 1369, 1368, 867, 1366, 1365, 1364, 6574,
	1363, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1240, -1000, -288, -1000, 10091, 19993, 19993, -1000, 1662,
	5694, 2196, -1000, 1616, -1000, 165, 72, -1000, -1000, -1000,
	-1000, -1000, -1000, 343, 19993, 1246, -1000, 470, 1467, 1480,
	1467, -1000, -1000, -1000, -1000, 1496, -1000, 1492, -1000, -1000,
	1328, -1000, -1000, 465, -1000, -1000, -1000, -1000, -1000, -17,
	-25, 1236, -1000, -48, 87, -1000, 1168, -1000, -1000, -1000,
	465, 1236, 197, 866, 864, -1000, 937, 342, 1257, -1000,
	821, 18273, 19993, 218, 1576, 1248, 1385, 1553, -1000, -1000,
	-1000, 1678, 1678, 1678, 381, 21134, 494, 19993, 494, -1000,
	-1000, 494, -1000, 334, 19993, 218, 1360, -1000, -1000, -1000,
	306, 291, 289, 17843, 196, -1000, -1000, 1248, -1000, -1000,
	-1000, 1359, 464, -1000, -1000, 6574, -1000, 932, -1000, 3488,
	3488, 3488, -1000, -1000, 14403, -1000, -1000, 1560, -1000, 1560,
	1236, 1248, 1479, 1256, -1000, -1000, -1000, -1000, -1000, 1358,
	1165, -1000, 1678, 5254, -1000, 16553, -1000, 5694, 5694, 5694,
	5694, -1000, 17413, -1000, 16983, -1000, 225, 6134, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5694, 1613, 1613, 1613, 5694,
	580, 5694, 5694, -1000, 630, 7564, 1613, 1613, 1613, 1613,
	1613, -1000, 2600, 1613, 1613, 1613, 1613, -1000, -1000, 6574,
	6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574,
	6574, 1346, 614, 6574, 6574, 6574, 963, 1803, 1252, -1000,
	-1000, -1000, -1000, -1000, 519, 932, 5694, 21320, 5694, 5694,
	5694, -1000, 1170, 1162, -1000, -1000, 5694, -1000, 5694, 6574,
	5694, -1000, 1613, 1678, 1214, -1000, 1355, -1000, 1160, 1523,
	-1000, 332, 1251, -1000, 429, 1157, -1000, 1620, 932, -1000,
	331, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -82, -1000, -1000, 19993, 1152, 1662, 19993, 5694, -1000,
	-1000, 5694, 1353, -1000, 5694, -1000, -1000, -1000, -1000, 1693,
	329, 328, 15693, -1000, 164, 15693, -1000, -1000, 19993, 195,
	15693, -7, -137, 5694, 5694, 19993, 5694, -1000, -1000, -1000,
	1328, 528, 1350, -227, -1000, -62, -1000, 1476, 51, -1000,
	1553, -1000, 282, -1000, -1000, -1000, -1000, 1678, -1000, 381,
	-1000, 381, 494, 19993, -1000, -1000, -227, 1154, -1000, -1000,
	-1000, 286, 1248, 15693, 820, 208, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19993, 19993, 21546, -1000, 19993, 1672, -1000,
	1247, 1844, -1000, 541, 541, 554, -1000, -1000, 327, -1000,
	-1000, 233, -1000, -1000, -1000, -1000, -1000, 1348, -1000, -1000,
	-1000, 1148, 973, 932, 5694, -1000, -1000, 5694, 5694, 806,
	5694, 1138, 1147, 1145, -1000, 1128, 1689, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5694, 5694, 5694, 5694,
	5694, 783, 4814, -1000, -1000, -1000, 5694, 5694, 5694, 5694,
	1370, 972, -1000, 671, 671, 337, 337, 337, 337, 337,
	805, 805, -1000, -1000, -1000, 3048, 1346, 6574, 6574, 6574,
	162, 1508, 1682, -1000, 5694, 576, -1000, 5694, 763, -1000,
	1112, 1061, 1102, 1092, -1000, -1000, 919, 1087, 1645, 1074,
	5694, 1672, -288, 4368, 183, 19993, -288, 19993, 19993, 4368,
	-1000, 19993, -1000, 2196, 739, -1000, -1000, 1620, -1000, 932,
	932, 19993, 932, 15693, 370, 463, -1000, 13973, 15693, -1000,
	-1000, 15693, 123, 1559, -1000, -1000, -108, -94, 932, 932,
	326, -1000, 1584, 1575, 8788, -1000, -80, -1000, -1000, -1000,
	316, -1000, 862, 861, 859, 842, 19993, -1000, -1000, -1000,
	-1000, -1000, 413, 413, 413, -1000, 1678, 1678, 381, -1000,
	-21, -63, -1000, 1236, 1056, -1000, -1000, -1000, -1000, 1054,
	-1000, 1668, 1656, 16553, 16123, -1000, -1000, -1000, -1000, -1000,
	5694, 1750, 1718, 1688, 957, 1143, -1000, -1000, -1000, -1000,
	5694, 1659, 1653, 1648, 1614, 1585, -1000, 5694, 5694, 696,
	1574, 1548, 1518, 1464, 1141, -1000, 162, 1508, 1457, -1000,
	6574, 6574, 1411, 466, -1000, 5694, 710, 185, 13113, -1000,
	5694, -1000, -1000, -1000, 13113, -1000, 6574, -1000, 1383, 1668,
	-1000, 1040, 1244, -1000, -288, -1000, -1000, 1214, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1127, 1236,
	-1000, -1000, -1000, -1000, 15693, 1578, 218, -1000, -19, 214,
	-293, -97, 1651, 1650, 19993, 157, 19993, 1013, 1234, -1000,
	-1000, -1000, 21373, 276, -1000, 19993, 593, 351, 177, 351,
	591, 1344, -1000, -1000, -80, -1000, 738, 735, 733, 732,
	-54, -1000, -1000, -1000, -1000, -1000, 1342, 13113, -1000, 13543,
	837, -1000, -1000, 1678, -1000, -21, -1000, 262, 258, 17,
	1644, -1000, -1000, -1000, 5694, 5694, 1844, -1000, -1000, 932,
	-1000, -1000, -1000, 1001, -1000, 277, 277, -40, -1000, -1000,
	-1000, 1303, -1000, 1332, 1332, 1303, 1303, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1340, 1339, -1000, 1303,
	1330, 1330, 1303, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1333, 1333,
	1338, 1333, -1000, 1270, -1000, -1000, -1000, -1000, -1000, 1266,
	1238, 5694, -1000, -1000, -1000, -1000, -1000, -1000, 6574, -1000,
	-1000, -1000, -1000, 932, 5694, 998, -1000, 1303, 1332, -1000,
	1303, 1330, 1303, 277, 277, 967, 799, 964, 1341, -1000,
	-1000, -1000, 4368, 1214, -1000, -1000, 15693, 15693, -228, -18,
	19993, -295, 836, -1000, 1643, 832, 750, -1000, 1328, 21636,
	8788, 590, -1000, -1000, 19993, 19993, -1000, 19993, 19993, 177,
	5694, -1000, -1000, -1000, -1000, -1000, -1000, 15263, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 730, -1000, -1000,
	-1000, 820, 932, 973, -1000, -1000, -1000, -1000, -1000, -43,
	-1000, -1000, -1000, -1000, 720, -1000, 706, -1000, -1000, -1000,
	814, 814, -1000, -1000, 702, -1000, -1000, -1000, 700, -1000,
	-1000, 699, -1000, -1000, -1000, -1000, 1207, -1000, 932, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5694,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -142, -297, 682,
	-1000, 812, -93, -1000, -1000, 1583, 167, 21584, -1000, 413,
	413, 569, 413, 413, 413, 413, 121, 120, 413, 413,
	413, 413, 413, 413, 413, 413, 413, 413, 413, 413,
	413, 413, 1327, -1000, -1000, 590, -1000, -1000, 592, 6574,
	-1000, -1000, 811, 13543, 400, 333, 1321, -1000, 94, 582,
	568, -1000, 19993, -1000, 1312, 1272, 35, 1310, -1000, 1308,
	1304, 19993, 1201, 1108, -1000, 1303, 5694, 8, -1000, -1000,
	-1000, -1000, 945, 938, 1105, -1000, 1100, 931, 1098, 1090,
	-1000, 1197, -110, -101, -1000, 1302, -1000, -1000, 1640, 157,
	-1000, 1639, 21636, -1000, 679, 678, 413, 413, 677, 809,
	795, 792, 413, 413, 667, 789, 20779, 658, 655, 654,
	705, 788, 438, 704, 675, 643, 19993, 1300, 768, -1000,
	-1000, 1508, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 645, 1298, -1000, -1000, 1288, 15263, 46,
	46, 15263, 15263, 15263, 1287, 259, -1000, 15263, 1558, 1161,
	-1000, -1000, -1000, -1000, 784, -1000, -1000, -1000, 637, -1000,
	636, -1000, 193, -99, -101, -1000, 1634, -95, 1633, 1632,
	19993, 750, -1000, 83, -1000, -1000, -1000, 13113, 13113, -1000,
	-1000, -1000, -1000, 775, 770, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 134, 19993, 1081,
	-1000, 427, 927, 5694, -222, 15263, 1072, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1069, 1046, 1032, 15263, -1000, -1000,
	-1000, 92, 108, -1000, -1000, 1558, -1000, 922, 917, 1284,
	634, -97, 1630, -1000, 750, 1629, 750, 750, 1016, -1000,
	-1000, 81, 179, 175, -1000, 224, -1000, -1000, -1000, -1000,
	-1000, -1000, 127, 1011, -1000, 768, 759, -1000, 827, 1475,
	-1000, -24, 1009, -1000, -1000, -1000, -1000, 1007, -1000, -1000,
	413, 756, 25, -1000, -1000, -1000, -1000, -1000, 1540, 12683,
	-113, -1000, 752, -1000, 750, -1000, -1000, -1000, 19993, 71,
	629, 6574, 1280, 6574, 1279, 85, 1278, -1000, -1000, -1000,
	-1000, -1000, 259, -1000, -1000, 1474, 1465, 1706, -1000, -1000,
	-1000, -1000, 108, 108, 108, 108, -20, 625, -1000, 800,
	-1000, 19993, -1000, 980, -1000, -1000, -1000, 325, -1000, -1000,
	-1000, -1000, 1277, 1627, -1000, 1125, 19993, 940, 19993, 1276,
	408, 6574, -1000, -1000, 1704, -1000, 1700, 377, 377, -1000,
	-1000, -1000, 833, -1000, 399, -1000, 14833, 19993, -1000, 158,
	74, -1000, 970, -1000, 944, 19993, 623, 651, -1000, -1000,
	-1000, 652, 98, -1000, 19993, 3928, -1000, 324, 935, -1000,
	808, 40, -1000, -1000, 930, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 932, 19993, -1000, 158, 1522, -1000, 621, -1000,
	-1000, -1000, 21561, 154, -1000, -1000, 21561, 52, -1000, 152,
	-1000, -1000, 926, -1000, 766, 1239, -1000, 52, 21636, 5694,
	-1000, 21636, 908, -1000,
}

var yyPgo = [...]int{
	0, 97, 2104, 2101, 108, 106, 2100, 2098, 2097, 2096,
	2093, 2092, 2090, 2088, 2086, 2085, 2084, 2083, 2080, 2079,
	2078, 2077, 2076, 2074, 2073, 2072, 2071, 2070, 2069, 2068,
	2067, 2066, 2065, 2064, 102, 2061, 2060, 2054, 2053, 2052,
	2051, 131, 2049, 2047, 2046, 2045, 2044, 2043, 2042, 2041,
	2040, 121, 47, 99, 670, 65, 200, 161, 119, 2039,
	90, 159, 2038, 2035, 26, 113, 2034, 123, 120, 87,
	148, 101, 81, 52, 2033, 2032, 2031, 130, 2029, 2026,
	2024, 2023, 49, 2021, 71, 44, 29, 2020, 2019, 2017,
	76, 2016, 2015, 2014, 2012, 77, 2011, 57, 64, 2010,
	2009, 2008, 2007, 2005, 34, 2004, 36, 2003, 2002, 2001,
	2000, 1999, 1997, 1996, 14, 17, 19, 1995, 1994, 15,
	3, 1993, 134, 86, 78, 96, 1992, 167, 1991, 1990,
	1989, 146, 1987, 132, 1986, 1985, 1984, 1983, 9, 1982,
	39, 1981, 1980, 1979, 37, 1978, 1977, 1975, 88, 45,
	62, 83, 1974, 1971, 1970, 136, 16, 143, 0, 126,
	38, 1968, 125, 140, 1967, 115, 191, 116, 43, 1966,
	63, 59, 1965, 1964, 1963, 98, 69, 25, 1962, 82,
	1961, 89, 75, 1960, 95, 1959, 118, 1, 93, 1958,
	137, 1957, 1955, 1954, 112, 1953, 1951, 61, 111, 1950,
	1949, 1948, 30, 1946, 32, 21, 1945, 152, 144, 1944,
	1943, 1942, 114, 110, 79, 1941, 1937, 60, 1930, 104,
	67, 117, 1928, 652, 100, 53, 18, 1927, 135, 1924,
	197, 150, 124, 1923, 1922, 151, 1523, 139, 1921, 127,
	10, 1918, 1917, 11, 1914, 23, 1913, 1911, 1910, 1909,
	6, 1907, 1906, 1901, 4, 2, 1900, 5, 91, 46,
	56, 1898, 55, 58, 1896, 1895, 1894, 1893, 1892, 165,
	1889, 1879, 1878, 1876, 1875, 1874, 1873, 72, 1871, 1870,
	1867, 1861, 54, 1831, 1826, 1816, 1815, 1814, 31, 1812,
	1811, 20, 1810, 28, 1808, 1806, 1803, 12, 1802, 1799,
	13, 1782, 1780, 7, 8, 1779, 1778, 40, 33, 35,
	73, 70, 1777, 22, 1776, 85, 1775, 1774, 122, 1772,
	94, 1769, 1764, 138, 164, 1763, 133, 1760, 1759, 1758,
	1744, 1740, 1734, 1729, 1723, 1722, 149, 1717,
}

//line mysql_sql.y:6558
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 334, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 49, 306, 306, 305, 305, 304, 304, 303, 303,
	303, 302, 302, 302, 301, 301, 300, 300, 298, 298,
	299, 297, 296, 296, 294, 294, 292, 292, 293, 293,
	287, 287, 290, 290, 288, 288, 288, 288, 291, 286,
	286, 286, 285, 285, 48, 48, 48, 225, 225, 47,
	47, 239, 239, 239, 239, 239, 237, 237, 237, 237,
	236, 236, 235, 235, 240, 240, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 42,
	42, 42, 42, 45, 46, 233, 233, 233, 233, 233,
	234, 234, 234, 43, 44, 44, 224, 224, 229, 229,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 232, 232, 232, 231, 231, 230, 230, 36,
	36, 36, 39, 38, 223, 223, 223, 223, 223, 223,
	223, 223, 37, 37, 37, 37, 37, 37, 35, 35,
	34, 222, 222, 221, 41, 41, 41, 41, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 329, 329, 329,
	331, 331, 161, 161, 161, 325, 325, 326, 327, 328,
	328, 328, 50, 7, 33, 33, 269, 269, 172, 172,
	173, 173, 171, 171, 171, 171, 171, 171, 272, 273,
	168, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 25, 25, 32, 335, 335, 335, 30, 31,
	268, 268, 268, 29, 28, 27, 26, 26, 24, 24,
	23, 23, 165, 165, 167, 167, 163, 336, 336, 245,
	245, 166, 166, 22, 22, 164, 164, 145, 162, 162,
	162, 6, 8, 8, 8, 8, 8, 13, 12, 11,
	10, 9, 5, 4, 276, 276, 276, 276, 276, 276,
	314, 314, 314, 315, 76, 76, 71, 71, 277, 277,
	188, 316, 316, 284, 284, 283, 283, 282, 282, 74,
	74, 75, 75, 63, 63, 51, 51, 289, 289, 289,
	289, 295, 295, 266, 266, 111, 111, 141, 141, 142,
	142, 52, 52, 53, 53, 53, 53, 53, 53, 322,
	322, 324, 324, 323, 73, 73, 69, 69, 70, 70,
	70, 68, 68, 67, 66, 66, 65, 64, 64, 64,
	55, 55, 54, 54, 54, 54, 54, 127, 127, 127,
	56, 56, 330, 330, 330, 270, 270, 270, 275, 275,
	124, 124, 125, 125, 123, 123, 57, 57, 58, 58,
	58, 58, 122, 122, 121, 59, 59, 60, 60, 62,
	62, 62, 62, 132, 132, 131, 131, 131, 131, 79,
	79, 130, 129, 129, 129, 78, 78, 77, 77, 72,
	72, 61, 61, 128, 337, 337, 126, 154, 154, 154,
	160, 160, 153, 153, 153, 153, 153, 159, 159, 155,
	155, 156, 156, 156, 3, 3, 3, 16, 16, 16,
	16, 20, 20, 332, 332, 14, 219, 219, 218, 218,
	220, 220, 220, 220, 214, 214, 215, 215, 215, 215,
	216, 216, 216, 217, 217, 217, 217, 213, 213, 212,
	210, 210, 210, 211, 211, 211, 211, 211, 211, 157,
	157, 15, 207, 207, 208, 208, 208, 209, 209, 201,
	201, 201, 201, 19, 205, 205, 206, 206, 206, 206,
	206, 202, 202, 204, 204, 200, 200, 200, 200, 200,
	18, 199, 199, 197, 197, 195, 195, 196, 196, 194,
	194, 194, 198, 198, 17, 271, 271, 241, 241, 244,
	244, 251, 251, 252, 252, 250, 250, 257, 257, 256,
	256, 255, 255, 254, 254, 253, 253, 248, 248, 247,
	247, 242, 242, 242, 242, 242, 243, 243, 246, 246,
	249, 249, 102, 102, 103, 103, 103, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 312, 312, 313, 105,
	105, 105, 109, 109, 109, 109, 109, 109, 104, 104,
	106, 106, 86, 86, 85, 85, 80, 80, 81, 81,
	82, 82, 83, 83, 84, 84, 84, 84, 84, 84,
	227, 227, 310, 310, 311, 311, 307, 307, 307, 309,
	309, 309, 309, 309, 308, 308, 87, 139, 139, 139,
	158, 158, 158, 138, 138, 138, 101, 101, 100, 100,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 226, 226, 169, 169, 170, 170, 119,
	117, 117, 118, 118, 118, 118, 115, 116, 114, 114,
	114, 114, 114, 113, 113, 112, 112, 112, 203, 203,
	110, 110, 108, 108, 108, 107, 107, 107, 258, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 180, 180, 185, 185, 321, 321, 320, 88,
	88, 88, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 97, 97, 97, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 281,
	281, 281, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 333, 333, 333, 317, 317, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 136, 136,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 189, 189, 190, 190, 278, 278, 278,
	278, 278, 278, 279, 279, 280, 280, 280, 280, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 178, 133, 133,
	133, 191, 186, 186, 187, 187, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 183, 183, 183, 183,
	183, 175, 175, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 182, 182, 184, 184, 193, 193, 193, 192,
	192, 192, 192, 192, 192, 192, 99, 99, 99, 99,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 90,
	90, 90, 90, 94, 94, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 95,
	95, 95, 95, 93, 93, 93, 93, 93, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 92, 140, 140, 259, 259, 262, 262,
	260, 260, 261, 263, 263, 263, 264, 264, 264, 265,
	265, 265, 267, 267, 144, 144, 144, 150, 150, 143,
	143, 151, 151, 152, 152, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 14, 0, 2, 1, 3, 3, 3, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 3, 0, 3, 0, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 9, 4, 7, 0, 3, 7,
	4, 1, 3, 3, 3, 1, 0, 1, 1, 1,
	1, 3, 1, 4, 1, 3, 1, 2, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 6, 3, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 0, 4, 2, 4, 1, 5,
	3, 2, 1, 2, 2, 4, 4, 5, 2, 1,
	7, 1, 3, 3, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 1, 1,
	1, 1, 6, 1, 7, 9, 0, 2, 0, 1,
	1, 2, 2, 2, 1, 4, 2, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 5, 1, 1, 1, 5, 5,
	0, 1, 1, 2, 2, 3, 6, 7, 4, 4,
	7, 8, 0, 2, 0, 2, 2, 1, 1, 1,
	1, 0, 1, 4, 5, 1, 3, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 4, 4, 6,
	4, 4, 6, 4, 2, 1, 5, 4, 4, 2,
	0, 1, 3, 3, 1, 3, 1, 3, 1, 3,
	4, 0, 1, 0, 1, 1, 3, 1, 1, 0,
	4, 1, 3, 2, 1, 0, 8, 0, 4, 7,
	4, 0, 2, 0, 2, 0, 2, 0, 4, 1,
	3, 1, 1, 4, 3, 4, 5, 4, 5, 2,
	3, 1, 3, 6, 0, 3, 0, 1, 2, 4,
	4, 0, 1, 3, 1, 3, 2, 0, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 2,
	7, 7, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 2, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 3, 1, 1, 4,
	4, 4, 3, 2, 2, 2, 3, 2, 3, 0,
	2, 1, 1, 2, 2, 0, 1, 2, 4, 1,
	3, 1, 4, 3, 0, 1, 2, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 8, 11, 0, 1, 6, 0, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 2, 2, 2, 2,
	1, 3, 2, 2, 2, 2, 2, 1, 3, 2,
	1, 3, 2, 0, 3, 3, 5, 5, 4, 1,
	1, 4, 1, 3, 1, 3, 2, 1, 1, 0,
	1, 1, 1, 11, 0, 2, 3, 2, 3, 1,
	1, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	5, 1, 1, 0, 3, 0, 1, 1, 2, 4,
	4, 4, 0, 1, 10, 0, 1, 0, 6, 0,
	4, 0, 3, 1, 3, 4, 5, 0, 3, 1,
	3, 2, 3, 1, 2, 0, 6, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 6, 5, 0, 3,
	0, 1, 0, 1, 1, 3, 2, 3, 3, 4,
	4, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 5, 4, 1, 3, 3, 0,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 1, 7, 7, 7, 7, 8, 5,
	0, 1, 0, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 2, 2,
	1, 5, 6, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 1, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 2, 2, 0, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 2, 2, 2,
	2, 1, 1, 2, 5, 6, 6, 6, 1, 1,
	1, 1, 0, 2, 0, 1, 1, 2, 4, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 1, 5, 4, 4, 5, 5, 5,
	5, 4, 5, 5, 5, 5, 5, 5, 5, 1,
	1, 1, 4, 4, 6, 8, 6, 4, 5, 5,
	4, 6, 6, 7, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 2, 3, 2, 4, 6, 2, 2, 4, 6,
	4, 2, 2, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 3, 0, 1, 1, 3, 3, 3, 3, 3,
	2, 3, 4, 3, 4, 1, 3, 4, 3, 4,
	1, 1, 1, 3, 4, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 1, 1, 3, 0, 1, 0, 3,
	0, 3, 3, 0, 3, 5, 0, 3, 5, 0,
	1, 1, 0, 1, 1, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -334, -2, -1, -3, -4, -5, -6, -40, -21,
	-7, -50, -34, -35, -36, -42, -47, -48, -49, -52,
	-16, -15, -14, 8, 10, -8, -161, -22, -23, -24,
	-26, -27, -28, -29, -30, -31, -32, -25, -33, 185,
	9, 48, -37, -38, -39, -43, -44, -45, -46, 293,
	299, 336, -53, -55, -17, -18, -19, -20, 181, -9,
	-10, -11, -12, -13, 203, 202, 26, 201, 182, 120,
	121, 123, 124, 30, -54, -322, 53, 183, -56, 409,
	6, 454, -63, 27, -85, -158, 57, -146, -149, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 406, 220, 244, 247, 254,
	120, 137, 131, 159, 151, 128, 224, 225, 64, 123,
	365, 74, 350, 335, 126, 239, 241, 243, 246, 226,
	147, 142, 238, 222, 140, 227, 28, 228, 164, 229,
	230, 411, 346, 275, 369, 352, 251, 333, 141, 347,
	242, 349, 165, 169, 357, 299, 135, 136, 354, 359,
	163, 200, 32, 408, 212, 360, 167, 162, 158, 368,
	255, 253, 161, 134, 157, 223, 37, 171, 170, 172,
	329, 330, 331, 332, 231, 232, 287, 356, 154, 143,
	279, 129, 18, 363, 207, 351, 300, 233, 248, 210,
	256, 166, 168, 214, 219, 410, 218, 252, 361, 139,
	211, 240, 206, 364, 130, 293, 302, 234, 124, 245,
	358, 367, 36, 315, 133, 127, 197, 121, 216, 221,
	235, 236, 237, 258, 257, 249, 155, 213, 160, 132,
	156, 122, 215, 366, 316, 453, 277, 318, 153, 150,
	217, 190, 362, 353, 125, 322, 317, 148, 259, 450,
	451, 452, 288, 274, 260, 261, 146, 204, 11, -162,
	19, 333, -41, 334, 185, 53, -158, -5, -4, -34,
	-52, 188, -60, -61, -62, -126, -128, -85, 53, -158,
	-236, -207, -235, -208, -238, -209, -157, 20, 182, 181,
	215, 10, 183, 297, 189, 8, 6, 298, 201, 9,
	299, 301, 302, 305, 306, 307, 31, 310, 311, 57,
	60, -158, -236, -207, 219, 226, -67, -68, -127, 15,
	5, -271, 318, 218, -201, -199, 308, 198, 197, 75,
	371, 187, 404, -144, -335, -268, 353, 352, -166, 351,
	344, 355, 346, 181, 74, 152, 149, 189, 354, 32,
	357, 358, 347, 318, 125, 122, -223, 80, 130, 129,
	-223, 218, 29, -229, 328, -228, -230, 357, 358, 368,
	58, 59, 356, -144, -158, 74, -68, -127, -67, -54,
	-55, -53, -55, 318, 218, 189, 188, 371, -324, 403,
	-323, -158, -270, -330, 20, -275, 178, 179, 180, 21,
	22, -1, -74, 210, -85, 119, -60, -138, -158, 335,
	89, -41, -41, 334, -325, -326, -327, -329, 185, 334,
	333, 119, -85, 30, -129, -130, -131, -132, 40, 44,
	46, 41, 42, 43, 47, -337, 23, -154, -160, 23,
	-155, 60, -156, -149, 57, 58, 59, -53, -55, 50,
	54, 11, 54, 53, 455, 58, 295, 309, 318, 296,
	308, 190, 218, 309, 218, 344, 190, 300, 303, 304,
	345, 50, 191, 50, -285, 368, -51, 27, -70, 17,
	-56, -55, 16, 20, 21, -332, 188, 403, -197, 193,
	-197, 189, -197, -165, 97, -165, -336, 11, 99, 217,
	216, 348, 345, -245, 349, 350, -166, -165, -165, -166,
	188, 371, 30, 30, -269, 193, 361, 409, 128, 129,
	130, -233, 20, 29, 327, -207, 218, 54, 89, 19,
	-231, 89, 100, -230, -230, -230, -231, -231, -104, 29,
	-157, 116, 60, -104, 29, 119, -69, -70, -56, -55,
	-68, -67, -68, 55, 55, -269, -269, -269, -269, -269,
	54, -324, -73, 53, -57, -58, 107, -181, -158, 81,
	-183, 57, -176, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 422, 423, 424, 425, 426, 428, 429,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 74, 333,
	287, 318, 148, 288, 146, 204, -177, -179, -303, -298,
	-174, 53, 105, 106, 113, 82, -178, -258, 24, 84,
	379, -134, -135, -136, -137, -299, -297, 60, 65, 68,
	71, 72, 70, 69, 144, 67, 118, -55, -317, -147,
	-274, -280, 187, -278, 149, 145, 8, 111, 328, 116,
	-281, 59, 58, 281, 282, 283, 371, 278, 284, 193,
	42, 285, 286, 289, 378, 290, 43, 291, 280, 208,
	292, 382, 381, 383, 375, 372, 370, 373, 374, 376,
	377, -57, -276, 33, -52, 53, 30, 53, -158, -123,
	12, 119, 65, 60, -41, 55, 54, -328, 71, 72,
	-331, 163, 155, -158, 53, -222, -221, -138, -61, -61,
	-61, -61, 40, 40, 40, 45, 40, 45, 40, -131,
	-158, -160, 55, -237, 188, 294, 214, -235, 215, 299,
	302, -213, -212, -210, -157, -208, -240, -138, -157, 345,
	-237, -213, -212, 337, 449, -51, -181, -158, -66, -65,
	-181, 190, -197, -213, 81, -207, -156, -158, -123, -179,
	-123, -85, -165, -165, -167, -336, -163, -336, 345, -123,
	-123, -245, -164, -158, -197, -213, 318, 24, 362, 363,
	126, 129, 128, 369, -234, 327, 20, -207, -228, -224,
	60, 328, -212, -232, 50, 116, -282, -181, 29, -231,
	-231, -231, -232, -232, 115, -158, -51, -69, -51, -70,
	-213, -207, -158, -86, -85, -159, -156, -149, -323, 23,
	-72, -158, -122, 54, -121, 11, -153, 80, 77, 78,
	79, -158, 23, 60, 119, -181, 96, -192, 89, 90,
	91, 92, 93, 94, 95, 53, 53, 53, 53, 53,
	53, 53, 53, -190, 53, 53, 53, 53, 53, 53,
	53, -190, 53, 53, 53, 53, 53, 60, 60, 102,
	101, 112, 105, 106, 107, 108, 109, 110, 111, 103,
	104, 99, 81, 97, 98, 83, -55, -181, -187, -179,
	-179, -179, -179, -258, -185, -181, 53, -181, 53, 53,
	53, -279, 53, 53, -189, -190, 53, 60, 53, 53,
	53, -179, 53, -122, -277, -188, -316, 448, -76, 55,
	-71, -158, -314, -315, -71, -75, -158, -68, -181, -151,
	-152, -143, -148, -155, -156, -149, 276, 186, 20, 80,
	23, 25, 281, 313, 83, 116, 16, 84, 149, 115,
	283, 379, 282, 181, 46, 381, 383, 382, 372, 370,
	320, 324, 326, 323, 371, 344, 29, 10, 26, 202,
	21, 22, 109, 183, 87, 88, 205, 24, 203, 72,
	19, 49, 11, 13, 14, 284, 319, 193, 192, 99,
	337, 189, 44, 8, 118, 27, 96, 321, 40, 76,
	42, 97, 17, 373, 374, 31, 336, 405, 209, 111,
	285, 286, 47, 81, 327, 70, 50, 77, 15, 45,
	98, 184, 378, 43, 325, 289, 291, 403, 290, 187,
	355, 6, 280, 380, 30, 201, 41, 188, 345, 86,
	191, 71, 208, 145, 5, 75, 9, 48, 51, 375,
	376, 377, 33, 85, 12, 292, 409, 328, 338, 339,
	340, 341, 342, 343, 173, 174, 175, 176, 177, 250,
	196, 194, 198, 199, 448, 449, 178, 179, 271, 273,
	152, 19, -41, -326, 119, -72, -123, 54, 89, -78,
	-77, 50, 51, -79, 50, -77, 40, 40, -73, -239,
	107, 57, 54, -211, 319, 455, 58, 55, 54, -239,
	191, 60, 60, 54, 18, 119, 54, -64, 25, 26,
	-85, 193, -85, -214, -215, 325, 24, -200, 51, -195,
	-196, -194, -198, 29, -123, -123, -123, -165, -159, -167,
	-162, -167, -163, 119, -145, -158, -214, 53, 127, 130,
	130, 129, -207, 191, 53, 89, -232, -232, -232, 29,
	-157, -51, -51, 50, 54, 53, 55, 54, -123, -58,
	-59, -60, -181, -181, -181, -181, -158, 60, -158, 107,
	-175, 81, 274, 70, 71, 72, -176, -193, 20, 260,
	261, -186, -187, -181, -133, 21, 20, -133, -133, -181,
	-133, 107, -187, -187, 55, 65, -318, -319, 384, 385,
	386, 387, 388, 389, 390, 391, 392, 393, 394, 285,
	280, 286, 284, 278, 292, 287, 288, 148, 401, 402,
	395, 396, 397, 398, 399, 400, -133, -133, -133, -133,
	-133, -181, -333, 272, 271, 273, -133, -133, -133, -133,
	-177, -177, -177, -177, -177, -177, -177, -177, -177, -177,
	-177, -177, -184, -191, -258, 53, 99, 97, 98, 83,
	-179, -177, -177, 55, 54, -321, -320, 85, -181, -318,
	-186, -181, -186, -186, 55, 55, -187, -186, -177, -186,
	-133, -123, 54, 53, 55, 54, 33, 119, 54, 89,
	55, 54, -69, 119, 335, -158, 55, -68, -221, -181,
	-181, 53, -181, 11, 119, 119, -212, 16, 409, -157,
	-138, 191, -213, -286, 192, 378, -289, 349, -181, -181,
	-158, -65, -73, 81, 53, -219, 409, 327, 326, 322,
	-216, -217, 321, 323, 320, 324, 50, 266, 267, 268,
	269, -194, -144, 115, 229, -123, -165, -165, -167, -158,
	-219, 55, 130, -213, -168, 60, -224, -85, -85, -1,
	-158, -125, 13, 54, 119, -175, 274, 70, -258, 55,
	54, -181, -181, -181, 23, -187, 55, 55, 55, 55,
	11, -181, -181, -181, -181, -181, 55, 11, 11, -181,
	-181, -181, -181, -181, -187, -184, -179, -177, -177, -182,
	205, 80, -181, -180, -320, 87, -181, 54, 51, 55,
	11, 55, 55, 55, 51, 55, 54, 55, -181, -125,
	-188, -284, -283, -282, 33, -52, -71, -277, -158, -315,
	-282, -158, -151, -148, -156, -149, 65, -69, -72, -213,
	107, 107, 57, -157, 328, -157, -213, -225, 409, 27,
	-295, 343, 338, 340, 119, 23, 24, -80, -81, -82,
	-87, -83, -138, -170, -84, 196, 194, 198, -311, 75,
	199, 250, 76, 189, -218, -220, 329, 330, 331, 332,
	80, -217, 60, 60, 60, 60, -85, -150, 89, -150,
	-150, -123, -123, -165, -172, -173, -171, 276, -272, 328,
	319, 55, 55, -124, 14, 16, -60, -158, 107, -181,
	55, 55, 55, -88, -90, 315, 316, -94, -91, -93,
	-92, -96, -95, 149, 150, 116, 153, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 30, 204, 145,
	146, 147, 148, 165, 131, 151, 407, 173, 132, 174,
	133, 175, 134, 176, 135, 136, 177, 137, 140, 141,
	142, 139, 55, -181, 55, 55, 55, 55, 55, -181,
	-181, 11, 55, 55, 55, 55, 55, -182, 80, -179,
	-176, 55, 88, -181, 86, -89, -95, 116, 149, 204,
	148, 147, 145, 315, 316, -104, -181, -104, -177, 55,
	-124, 55, 54, -277, 55, -157, 16, 23, -214, 299,
	188, -266, 450, -293, 338, 16, 16, -52, -85, 55,
	54, -90, -84, -158, 76, -310, -311, -197, -310, 76,
	53, -220, 65, 65, 65, 65, -217, 53, -104, -106,
	-157, 116, 60, -123, -171, 277, 31, 118, 279, 29,
	275, 16, -181, -187, 55, -97, 136, 135, -97, -265,
	316, 315, -259, -261, 53, -260, 53, -260, -259, -259,
	53, 53, -259, -262, 53, -262, -259, -263, 53, -263,
	-264, 53, -263, 55, 55, 55, -181, -176, -181, 55,
	-259, -260, -259, -262, -259, -97, -97, 55, 55, 19,
	55, 55, -282, -157, -157, -225, 300, -85, -111, 451,
	60, 16, 60, -291, 60, -73, -102, -103, -120, 313,
	220, -198, 224, 64, 225, 335, 226, 189, 228, 229,
	230, 200, 231, 232, 233, 328, 234, 235, 236, 237,
	296, 5, 262, -82, -101, -100, -98, 70, 81, 29,
	313, -99, 64, 115, 243, 221, 244, -119, -169, 194,
	75, 76, 301, -170, -307, -308, -158, -308, -158, -307,
	-307, -197, -181, -202, -204, -138, 53, 65, -273, -168,
	-267, 317, 65, 65, -140, 60, -140, 65, 65, 65,
	55, -181, -287, -245, -141, 452, 65, 60, 340, 23,
	-241, 210, 54, -120, -150, -150, -144, 115, -150, -150,
	-150, -150, 227, 227, -150, -150, -150, -150, -150, -150,
	-150, -150, -150, -150, -150, -150, -150, -150, 53, -98,
	70, -177, 60, -106, -107, 29, 242, 238, -108, 29,
	222, 223, -110, 53, 250, 76, 76, -85, 53, 51,
	259, 53, 53, 53, -308, 55, 55, 54, -259, -181,
	278, 55, 55, 55, 54, 55, 55, 55, 54, 55,
	54, 55, -294, 343, -290, -288, 338, 339, 340, 341,
	53, 16, -52, 16, -120, 65, 65, -150, -150, 65,
	60, 60, 60, -150, -150, 65, 60, -160, 65, 65,
	65, 65, 29, 60, -109, 29, 238, 242, 239, 240,
	241, 65, 29, 65, 29, 65, 29, -158, 53, -312,
	-313, 60, 65, 53, -203, 53, -202, -309, 266, 267,
	268, 270, 269, -309, -202, -202, -202, 53, -227, -226,
	251, 81, -205, -204, -64, 55, 60, 65, 65, -296,
	192, -292, 342, -288, 16, 340, 16, 16, -142, -158,
	-291, -242, 252, 253, -243, -249, 255, -104, -104, 60,
	60, -105, 221, -86, 55, 54, 89, 55, -181, -113,
	-112, 405, -202, 55, 55, 55, 55, -202, 251, -206,
	200, 64, 409, 264, 265, -64, 55, 55, -302, 53,
	65, -293, 16, -291, 16, -291, -291, 55, 54, -247,
	256, 53, -245, 53, -245, 76, 267, 222, 223, 55,
	-313, 60, 55, -117, -118, -115, -116, 50, 347, 248,
	249, 55, -205, -205, -205, -205, 55, -150, 60, 263,
	-306, 30, 55, -301, -300, -139, -297, -158, 343, 60,
	-291, -158, -244, 257, 65, -177, 53, -177, 53, -246,
	254, 53, -226, -116, 50, -115, 50, 10, 9, -119,
	65, -156, -305, -304, -303, 55, 54, 119, -251, 53,
	16, 55, -240, 55, -240, 53, 89, -177, -114, 245,
	246, 30, 129, -114, 54, 89, -300, -158, -252, -250,
	210, -243, 55, 55, -240, 65, 55, 70, 29, 247,
	-304, 29, -181, 119, 55, 54, 57, -248, 258, 55,
	-158, -250, -253, 33, 65, -257, -254, 53, -120, 212,
	-257, -120, -256, -255, 257, 213, 55, 54, 57, 53,
	-255, -254, -187, 55,
}

var yyDef = [...]int{
	20, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	454, 455, 456, 0, 0, 281, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 213, 0,
	0, 179, 159, 160, 161, 119, 120, 121, 122, 0,
	0, 0, 341, -2, 457, 458, 459, 460, -2, 282,
	283, 284, 285, 286, 202, 203, 204, -2, 0, 172,
	0, 164, 164, 0, 361, 0, 0, 0, 372, 0,
	385, 20, 319, 0, 324, 634, 670, 671, 672, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,
	1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
	1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 0, 188,
	0, 1232, 192, 0, 0, 0, 278, 184, 185, 186,
	187, 0, 0, 407, 408, 431, 434, 437, 0, 178,
	0, 0, 80, 502, 82, 504, 0, 86, 88, 89,
	-2, 93, 94, 95, 96, 97, 98, 99, 0, 101,
	1240, 103, 1301, 106, 107, 108, 0, 117, 118, -2,
	-2, 499, 0, 0, 1289, 62, -2, 0, 0, 0,
	377, 463, 533, 533, 0, 533, 546, 510, 511, 512,
	531, 532, 262, 262, 0, 0, 253, 254, 0, 271,
	262, 262, 271, 0, 1034, 0, 0, 245, 246, 247,
	251, 252, 272, 216, 173, 174, 163, 0, 168, 0,
	162, 1291, 0, 133, 0, 138, 0, 1239, 1305, 1254,
	0, 0, 1272, 0, 157, -2, 356, 0, 362, 361,
	361, 0, 361, 216, 216, 216, 216, 216, 349, 0,
	351, 354, 0, 0, 386, 387, 382, 383, 384, 388,
	389, 3, 0, 0, 323, 0, 394, 189, 673, 0,
	0, 193, 194, 0, 0, 205, 0, 208, 197, 198,
	199, 0, 0, 0, 0, 0, 0, 0, 422, 0,
	0, 421, 0, 0, 0, 0, 435, 436, 438, 0,
	440, 441, 449, 450, 451, 452, 453, 0, 361, 76,
	0, 0, 0, 0, 0, 506, 87, 116, 90, 91,
	0, 111, 113, 115, 114, 100, 112, 102, 104, 105,
	110, 76, 0, 0, 0, 63, 344, 0, 325, 0,
	374, 376, 0, 378, 379, 0, 533, 464, 0, 0,
	0, 0, 0, 394, 0, 394, 0, 267, 268, 262,
	262, 255, 264, 0, 269, 270, 0, 394, 394, 0,
	0, 533, 1035, 1036, 0, 0, 0, 0, 166, 0,
	171, 123, 128, 126, 127, 129, 0, 0, 0, 0,
	0, 155, 156, 0, 0, 0, 0, 0, 146, 149,
	628, 629, 500, 150, 151, 0, 325, 357, 373, 375,
	356, -2, 0, 370, 371, 0, 0, 0, 0, 0,
	0, 350, 0, 0, 402, 396, 398, 442, 28, 0,
	925, 670, 930, -2, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, -2, 1372, -2, -2, 1375, 1376, 1377, 1379, -2,
	-2, -2, -2, -2, -2, 1386, -2, -2, -2, 1390,
	1391, -2, -2, 1394, 1395, 1396, 1397, 1398, -2, -2,
	-2, -2, -2, -2, -2, -2, 941, 741, 742, 743,
	744, 0, 0, 0, 0, 0, 751, 752, 0, 764,
	0, 758, 759, 760, 761, 38, 39, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 888, 728, 0, 0,
	0, 873, 0, 863, 0, 901, 0, 0, 0, 0,
	0, 40, 41, 879, 881, 882, 884, 885, 886, 887,
	890, 891, 892, 895, 896, 897, 898, 899, 900, 903,
	905, 875, 876, 877, 878, 867, 868, 869, 870, 871,
	872, 402, 293, 311, 295, 0, 300, 0, 635, 361,
	0, 0, 190, 0, 195, 0, 0, 207, 209, 210,
	211, 200, 201, 279, 0, 394, 181, 0, 425, 419,
	0, 412, 423, 424, 415, 0, 417, 0, 413, 414,
	354, 439, 433, 0, 77, 78, 79, 81, 92, 0,
	0, 70, 487, 493, 490, 503, 0, 84, 505, 109,
	0, 65, 0, 0, 0, 345, 358, 28, 363, 364,
	367, 0, 0, 474, 0, 501, 525, -2, 242, 263,
	243, 394, 394, 394, 262, 0, 264, 0, 264, 258,
	259, 0, 273, 275, 0, 474, 1332, 217, 175, 176,
	0, 0, 170, 0, 0, 130, 131, 132, 139, 134,
	136, 0, 0, 140, 152, 153, 154, 317, 318, 0,
	0, 0, 144, 145, 0, 158, 343, 325, 347, 325,
	287, 288, 0, 290, 632, 291, 447, 448, 352, 0,
	0, 429, 394, 0, 403, 0, 399, 0, 0, 0,
	0, 443, 0, 445, 0, 920, 0, 0, 949, 950,
	951, 952, 953, 954, 955, 912, 908, 908, 908, 0,
	908, 0, 0, 848, 0, 0, 908, 908, 908, 908,
	908, 849, 0, 908, 908, 908, 908, 862, 856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 914, 0, 747,
	748, 749, 750, 753, 0, 765, 0, 0, 912, 912,
	912, 851, 0, 0, 853, 864, 0, 857, 912, 0,
	912, 861, 908, 394, 294, 308, 0, 312, 0, 0,
	304, 306, 299, 301, 0, 0, 321, 356, 395, 674,
	0, 1041, -2, 1043, -2, -2, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 0, 196, 206, 0, 0, 361, 0, 0, 409,
	426, 0, 0, 410, 0, 411, 416, 418, 432, 0,
	71, 75, 0, 489, 0, 0, 492, 83, 0, 0,
	0, 59, 327, 0, 0, 0, 0, 366, 368, 369,
	354, 0, 0, 466, 475, 0, 534, 0, 0, 530,
	-2, 537, 0, 543, 244, 248, 249, 394, 265, 262,
	266, 262, 264, 0, 274, 277, 466, 0, 177, 165,
	167, 0, 125, 0, 0, 0, 141, 142, 143, 147,
	148, 346, 348, 0, 0, 20, 355, 0, 392, 397,
	404, 405, 916, 917, 918, 919, 444, 446, 29, 400,
	921, 0, 923, 926, 931, 932, 928, 0, 946, -2,
	-2, 0, 913, 914, 0, 909, 910, 0, 0, 0,
	0, 0, 0, 0, 865, 0, 0, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 0, 0, 0, 0,
	0, 0, 0, 814, 815, 816, 0, 0, 0, 0,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 933, 944, 945, 0, 0, 0, 0, 0,
	942, 937, 0, 745, 0, 762, 766, 0, 0, 907,
	0, 914, 0, 0, 874, 852, 0, 0, 0, 0,
	0, 392, 311, 313, 0, 0, 311, 0, 0, 0,
	320, 0, 292, 0, 0, 280, 212, 356, 182, 183,
	427, 0, 420, 0, 0, 0, 488, 0, 0, 491,
	85, 0, 67, 0, 60, 61, 331, 0, 359, 360,
	29, 365, 0, 0, 636, 465, 0, 476, 477, 478,
	479, 480, 0, 0, 0, 0, 0, 526, 527, 528,
	529, 538, 1037, 1037, 1037, 256, 394, 394, 262, 276,
	218, 0, 169, 124, 0, 230, 135, 289, 633, 0,
	430, 390, 0, 0, 0, 922, 924, 927, 929, 802,
	0, 0, 0, 0, 0, 0, 791, 785, 786, 866,
	0, 0, 0, 0, 0, 0, 810, 0, 0, 0,
	0, 0, 0, 0, 0, 934, 942, 938, 0, 935,
	0, 0, 915, 0, 767, 0, 0, 0, 0, 803,
	0, 807, 850, 854, 0, 858, 0, 860, 0, 390,
	309, 0, 314, 315, 311, 298, 305, 297, 307, 302,
	303, 322, 675, 1042, 1039, 1040, 191, 180, 0, 69,
	72, 73, 74, 494, 0, 495, 474, 66, 0, 0,
	333, 48, 0, 0, 0, 0, 0, 0, 637, 638,
	640, 641, 0, 0, 643, 697, 0, 652, 533, 652,
	0, 0, 654, 655, 467, 468, 0, 0, 0, 0,
	0, 482, 483, 484, 485, 486, 0, 0, 1038, 0,
	0, 260, 257, 394, 214, 219, 220, 0, 224, 0,
	0, 137, 353, 380, 0, 0, 406, 30, 401, 915,
	787, 788, 789, 0, 769, 781, 781, 1029, 970, 971,
	972, 1016, 974, 1020, 1020, 1016, 1016, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 0, 0, 993, 1016,
	1018, 1018, 1016, 1013, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 1023, 1023,
	1026, 1023, 790, 0, 809, 792, 793, 796, 794, 0,
	0, 0, 808, 797, 798, 784, 911, 936, 0, 943,
	939, 746, 754, 763, 0, 0, 772, 1016, 1020, 775,
	1016, 1018, 1016, 781, 781, 0, 0, 0, 0, 795,
	381, 310, 0, 296, 428, 498, 0, 0, 67, 0,
	0, 335, 0, 332, 0, 0, 0, 461, 354, -2,
	0, -2, 642, 698, 664, 664, 653, 664, 664, 533,
	0, 469, 470, 471, 472, 473, 481, 0, 539, 540,
	630, 631, 541, 261, 221, 222, 223, 0, 226, 227,
	229, 0, 391, 393, 755, 770, 782, 783, 771, 1032,
	1030, 1031, 973, 1017, 0, 998, 0, 999, 1000, 1001,
	0, 0, 994, 995, 0, 996, 997, 989, 0, 990,
	991, 0, 992, 806, 811, 812, 0, 940, 768, 756,
	773, 774, 776, 777, 778, 779, 780, 757, 804, 0,
	855, 859, 316, 496, 497, 64, 68, 50, 337, 0,
	334, 0, 328, 330, 58, 0, 547, -2, 584, 1037,
	1037, 0, 1037, 1037, 1037, 1037, 0, 0, 1037, 1037,
	1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
	1037, 1037, 0, 639, 666, -2, 678, 680, 0, 0,
	683, 684, 0, 0, 0, 0, 720, 690, 0, 0,
	958, 959, 0, 696, 0, 656, 665, 0, 665, 0,
	0, 664, 0, 0, 521, 1016, 0, 0, 228, 215,
	969, 1033, 0, 0, 0, 1014, 0, 0, 0, 0,
	813, 0, 44, 0, 326, 0, 336, 49, 0, 0,
	544, 0, 542, 586, 0, 0, 1037, 1037, 0, 0,
	0, 0, 1037, 1037, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 679,
	681, 682, 685, 686, 687, 725, 726, 727, 688, 722,
	723, 724, 689, 0, 0, 956, 957, 718, 0, 0,
	0, 0, 0, 0, 0, 650, 514, 0, 367, 0,
	225, 1022, 1021, 1011, 0, 1012, 1019, 1024, 0, 1027,
	0, 805, 42, 46, 51, 52, 0, 0, 0, 0,
	0, 0, 462, 580, 585, 587, 588, 0, 0, 591,
	592, 593, 594, 0, 0, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 622, 623, 624, 625, 626,
	627, 607, 608, 609, 610, 611, 612, 619, 0, 0,
	616, 0, 0, 0, 713, 0, 0, 657, 659, 660,
	661, 662, 663, 658, 0, 0, 0, 0, 649, 651,
	693, 0, 513, 522, 523, 367, 1015, 0, 0, 31,
	0, 48, 0, 53, 0, 0, 0, 0, 0, 339,
	329, 569, 0, 0, 575, 0, 581, 589, 590, 595,
	596, 613, 0, 0, 615, 0, 0, 721, 0, 700,
	714, 0, 0, 514, 514, 514, 514, 0, 694, 515,
	1037, 0, 0, 519, 520, 524, 1025, 1028, 22, 0,
	0, 45, 0, 54, 0, 56, 57, 338, 0, 549,
	0, 0, 0, 0, 0, 578, 0, 620, 621, 614,
	617, 618, 691, 699, 701, 702, 703, 0, 715, 716,
	717, 719, 644, 645, 646, 647, 0, 0, 517, 0,
	21, 0, 32, 0, 34, 36, 37, 667, 43, 47,
	55, 340, 551, 0, 570, 0, 0, 0, 0, 0,
	0, 0, 692, 704, 0, 705, 0, 0, 0, 648,
	516, 518, 23, 24, 0, 33, 0, 0, 548, 0,
	580, 571, 0, 573, 0, 0, 0, 0, 706, 708,
	709, 0, 0, 707, 0, 0, 35, 668, 0, 553,
	0, 567, 572, 574, 0, 579, 577, 710, 712, 711,
	25, 26, 27, 0, 552, 0, 565, 550, 0, 576,
	669, 554, -2, 0, 568, 555, -2, 0, 563, 0,
	556, 564, 0, 559, 0, 0, 558, 0, -2, 0,
	560, -2, 0, 566,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 110, 102, 3,
	53, 55, 107, 105, 54, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 454,
	90, 89, 91, 3, 455, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:504
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:510
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:533
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:537
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 21:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:543
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:558
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:562
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:568
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:572
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:578
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:585
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:594
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:598
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:602
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:607
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:615
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:621
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:630
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:641
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:645
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:651
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:655
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:661
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:685
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:704
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:708
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:713
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:717
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:725
		{
			yyVAL.str = ""
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:729
		{
			yyVAL.str = yyDollar[3].str
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:734
		{
			yyVAL.str = "\n"
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:738
		{
			yyVAL.str = yyDollar[3].str
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:743
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:747
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:771
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:775
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:781
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:787
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:805
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:822
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:845
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:849
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:853
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:858
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:862
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:878
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:886
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:896
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:900
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:920
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:930
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:936
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:942
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:949
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:957
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:965
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:969
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:973
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:977
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:983
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:987
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:993
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1000
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1009
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1013
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1019
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1023
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1027
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1031
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1035
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1039
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1043
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1047
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1051
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1055
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1059
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1063
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1067
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1071
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1075
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1079
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1083
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1087
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1159
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1165
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1173
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1177
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1181
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1185
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1189
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1195
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1209
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1215
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1226
		{
			yyVAL.str = yyDollar[3].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1232
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1236
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1250
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1267
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1275
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1298
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1321
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1328
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1335
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1343
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1350
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1357
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1366
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1370
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1374
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1380
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1384
		{
			yyVAL.str = yyDollar[1].str
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1391
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1402
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1408
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1413
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1417
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1421
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1425
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1429
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1433
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1437
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1441
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1447
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1451
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1455
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1459
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1469
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1475
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1479
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1485
		{
			yyLOCAL = &tree.Update{
				Table:   yyDollar[2].tableExprUnion(),
				Exprs:   yyDollar[4].updateExprsUnion(),
				Where:   yyDollar[5].whereUnion(),
				OrderBy: yyDollar[6].orderByUnion(),
				Limit:   yyDollar[7].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1498
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1502
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1508
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1517
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1523
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1528
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1533
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1537
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1541
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1545
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1553
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1561
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1571
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1594
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1598
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1604
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1610
		{
			yyVAL.str = yyDollar[1].str
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1615
		{
			yyVAL.str = "true"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1616
		{
			yyVAL.str = "false"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1617
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1622
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1632
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1643
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1656
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1660
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1665
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1669
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1675
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1679
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1685
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1689
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1693
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1697
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1701
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1705
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1711
		{
			yyVAL.item = nil
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1716
		{
			yyVAL.item = nil
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1738
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1742
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1748
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1762
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1772
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1781
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1785
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1789
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1795
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1801
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1807
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1813
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1823
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1835
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1839
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1845
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1857
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1870
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1874
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1879
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1883
		{
			yyVAL.str = yyDollar[2].str
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1889
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1902
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1906
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1912
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1916
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1922
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1926
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1935
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1939
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1943
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1959
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1968
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1977
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1987
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1993
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1999
		{
			yyLOCAL = &tree.Delete{
				Table:   yyDollar[3].tableExprUnion(),
				Where:   yyDollar[4].whereUnion(),
				OrderBy: yyDollar[5].orderByUnion(),
				Limit:   yyDollar[6].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2014
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2023
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2030
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2036
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2044
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2051
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2058
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2077
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2081
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2085
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2091
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2100
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2104
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2110
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2114
		{
			yyVAL.str = yyDollar[3].str
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2120
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2124
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2130
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2135
		{
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2139
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2146
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2150
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2157
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2162
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2166
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2176
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2182
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2186
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2191
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2195
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2208
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2215
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2222
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2240
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2259
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2265
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2272
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2276
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2289
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2293
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2298
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2302
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2309
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2314
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2321
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2327
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2331
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2335
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2339
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2343
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2347
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2353
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2360
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2369
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2373
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2379
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2387
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2391
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2396
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2400
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2406
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2410
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2414
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2419
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2423
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2429
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2435
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2439
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2445
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2450
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2454
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2458
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2465
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2469
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2475
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2479
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2489
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2499
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2529
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2537
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2558
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2576
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2580
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2584
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2593
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2597
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2602
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2606
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2621
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2625
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2635
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2639
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2643
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2648
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2656
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2662
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2670
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2674
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2684
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2693
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2703
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2712
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2722
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2726
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2736
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2740
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2744
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2748
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2754
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2758
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2764
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2770
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2774
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2778
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2788
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2794
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2798
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2804
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2808
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2814
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2818
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:2831
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2836
		{
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2837
		{
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:2841
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2853
		{
			yyVAL.str = ""
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2857
		{
			yyVAL.str = yyDollar[1].str
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2861
		{
			yyVAL.str = yyDollar[2].str
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2870
		{
			yyVAL.str = ""
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2874
		{
			yyVAL.str = yyDollar[1].str
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2878
		{
			yyVAL.str = yyDollar[2].str
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2882
		{
			yyVAL.str = yyDollar[1].str
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2886
		{
			yyVAL.str = yyDollar[2].str
		}
	case 461:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2916
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2926
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2937
		{
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2942
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2952
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2956
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2962
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2966
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2972
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2976
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2980
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2984
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2990
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2997
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3002
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3007
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3012
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3018
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3022
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3026
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3032
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3036
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3040
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3044
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3050
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3054
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3060
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3073
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3077
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3081
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3086
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3090
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3097
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3103
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3111
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3118
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3130
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3139
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3143
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3149
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3153
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3157
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3166
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3170
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3174
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3178
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3184
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3203
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3207
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3229
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3233
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3237
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3241
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3245
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3251
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3255
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3261
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3266
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3271
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3275
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3279
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3283
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3287
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3293
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3307
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3311
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3316
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3320
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3326
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3330
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3336
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3340
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3344
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3349
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3353
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3359
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3371
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3375
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3380
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3384
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3394
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3398
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3407
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3411
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3417
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3421
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3427
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3436
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3446
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3450
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3456
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3460
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3466
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3473
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3482
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3486
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3491
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3495
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3500
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3504
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3514
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3518
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3529
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3537
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3545
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3553
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3564
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3574
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3584
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3588
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3593
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3597
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3602
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3606
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3612
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3616
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3620
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3626
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3630
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3634
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3638
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3642
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3646
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3650
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3654
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3658
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3662
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3666
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3670
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3674
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3678
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3682
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3686
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3690
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3694
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3698
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3702
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3706
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3710
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3714
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3718
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3722
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3726
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3730
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3734
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3738
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3745
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3749
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3755
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3760
		{
			yyVAL.str = ""
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3764
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3768
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3774
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3778
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3782
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3786
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3790
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3794
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3808
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3812
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3821
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3826
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3832
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3839
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3843
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3849
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3853
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3859
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3869
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3875
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3884
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3893
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3916
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3925
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3935
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3943
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3949
		{
			yyVAL.str = ""
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3953
		{
			yyVAL.str = yyDollar[1].str
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3963
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3969
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3975
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3989
		{
			yyVAL.str = ""
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:3996
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4002
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4006
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4010
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4021
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4025
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4029
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4034
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4038
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4044
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4048
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4054
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4058
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4062
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4066
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4070
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4074
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4078
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4082
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4086
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4090
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4094
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4098
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4102
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4112
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4116
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4121
		{
			yyVAL.str = ""
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4125
		{
			yyVAL.str = yyDollar[1].str
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4131
		{
			yyVAL.str = ""
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4135
		{
			yyVAL.str = yyDollar[2].str
		}
	case 699:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4141
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4152
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4162
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4169
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4176
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4192
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4198
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4204
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4208
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4212
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4216
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4220
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4225
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4232
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4236
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4240
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4245
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4249
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4254
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4258
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4274
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4280
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4284
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4288
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4292
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4296
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4300
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4304
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4308
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4312
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4316
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4320
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4324
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4328
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4334
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4338
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4342
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4346
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4350
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4354
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4358
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4362
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4366
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4370
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4374
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4378
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4383
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4391
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4395
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4399
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4408
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4412
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4416
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4420
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4425
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4429
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4434
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4438
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4444
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4448
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4454
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4464
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4481
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4498
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4511
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4524
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4536
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4550
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4565
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4580
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4597
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4612
		{
		}
	case 784:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4618
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4627
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4635
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4643
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4652
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4661
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4670
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4679
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4688
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4697
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4706
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4715
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4724
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4733
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4742
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4758
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4766
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4774
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4782
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4790
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4799
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4807
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4816
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4825
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4833
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4841
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4850
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4870
		{
			yyVAL.str = yyDollar[1].str
		}
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4906
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4918
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4932
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4940
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4947
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4954
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4966
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4974
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4985
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4994
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5003
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5011
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5021
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5029
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5037
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5047
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5051
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5057
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5061
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5080
		{
		}
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5082
		{
		}
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5122
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5132
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5136
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5140
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5146
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5151
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5155
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5161
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5165
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5172
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5176
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5180
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5188
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5192
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5196
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5200
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5204
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5209
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5214
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5220
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5224
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5228
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5232
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5239
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5243
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5249
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5253
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5257
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5261
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5265
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5269
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5273
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5277
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5283
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5287
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5293
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5297
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5304
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5308
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5312
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5318
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5322
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5326
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5330
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5334
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5338
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5342
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5348
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5352
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5356
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5360
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5366
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5370
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5383
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5388
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5392
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5396
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5400
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5414
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5418
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5434
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5445
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5450
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5456
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5468
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5480
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5492
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5505
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5518
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5531
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5544
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5557
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5570
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5583
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5596
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5609
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5622
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5637
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5660
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5697
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5745
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5762
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5774
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5789
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5809
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5829
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5845
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5858
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5871
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5884
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5897
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5909
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5921
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5933
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5945
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5957
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5969
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5981
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5993
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6005
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6018
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6033
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6056
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6061
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6067
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6074
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6078
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6083
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6087
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6093
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6099
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6106
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6113
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6122
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6129
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6136
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6145
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6149
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6153
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6159
		{
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6161
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6171
		{
			yyVAL.str = ""
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6175
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
