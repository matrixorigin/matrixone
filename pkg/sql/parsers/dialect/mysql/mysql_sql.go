// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const LOWER_THAN_ON = 57422
const ON = 57423
const USING = 57424
const SUBQUERY_AS_EXPR = 57425
const LOWER_THAN_STRING = 57426
const ID = 57427
const AT_ID = 57428
const AT_AT_ID = 57429
const STRING = 57430
const VALUE_ARG = 57431
const LIST_ARG = 57432
const COMMENT = 57433
const COMMENT_KEYWORD = 57434
const QUOTE_ID = 57435
const STAGE = 57436
const CREDENTIALS = 57437
const STAGES = 57438
const SNAPSHOTS = 57439
const INTEGRAL = 57440
const HEX = 57441
const FLOAT = 57442
const HEXNUM = 57443
const BIT_LITERAL = 57444
const NULL = 57445
const TRUE = 57446
const FALSE = 57447
const LOWER_THAN_CHARSET = 57448
const CHARSET = 57449
const UNIQUE = 57450
const KEY = 57451
const OR = 57452
const PIPE_CONCAT = 57453
const XOR = 57454
const AND = 57455
const NOT = 57456
const BETWEEN = 57457
const CASE = 57458
const WHEN = 57459
const THEN = 57460
const ELSE = 57461
const END = 57462
const ELSEIF = 57463
const LOWER_THAN_EQ = 57464
const LE = 57465
const GE = 57466
const NE = 57467
const NULL_SAFE_EQUAL = 57468
const IS = 57469
const LIKE = 57470
const REGEXP = 57471
const IN = 57472
const ASSIGNMENT = 57473
const ILIKE = 57474
const SHIFT_LEFT = 57475
const SHIFT_RIGHT = 57476
const DIV = 57477
const MOD = 57478
const UNARY = 57479
const COLLATE = 57480
const BINARY = 57481
const UNDERSCORE_BINARY = 57482
const INTERVAL = 57483
const OUT = 57484
const INOUT = 57485
const BEGIN = 57486
const START = 57487
const TRANSACTION = 57488
const COMMIT = 57489
const ROLLBACK = 57490
const WORK = 57491
const CONSISTENT = 57492
const SNAPSHOT = 57493
const CHAIN = 57494
const NO = 57495
const RELEASE = 57496
const PRIORITY = 57497
const QUICK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const DECIMAL_VALUE = 57512
const TIME = 57513
const TIMESTAMP = 57514
const DATETIME = 57515
const YEAR = 57516
const CHAR = 57517
const VARCHAR = 57518
const BOOL = 57519
const CHARACTER = 57520
const VARBINARY = 57521
const NCHAR = 57522
const TEXT = 57523
const TINYTEXT = 57524
const MEDIUMTEXT = 57525
const LONGTEXT = 57526
const DATALINK = 57527
const BLOB = 57528
const TINYBLOB = 57529
const MEDIUMBLOB = 57530
const LONGBLOB = 57531
const JSON = 57532
const ENUM = 57533
const UUID = 57534
const VECF32 = 57535
const VECF64 = 57536
const GEOMETRY = 57537
const POINT = 57538
const LINESTRING = 57539
const POLYGON = 57540
const GEOMETRYCOLLECTION = 57541
const MULTIPOINT = 57542
const MULTILINESTRING = 57543
const MULTIPOLYGON = 57544
const INT1 = 57545
const INT2 = 57546
const INT3 = 57547
const INT4 = 57548
const INT8 = 57549
const S3OPTION = 57550
const STAGEOPTION = 57551
const SQL_SMALL_RESULT = 57552
const SQL_BIG_RESULT = 57553
const SQL_BUFFER_RESULT = 57554
const LOW_PRIORITY = 57555
const HIGH_PRIORITY = 57556
const DELAYED = 57557
const CREATE = 57558
const ALTER = 57559
const DROP = 57560
const RENAME = 57561
const ANALYZE = 57562
const PHYPLAN = 57563
const ADD = 57564
const RETURNS = 57565
const SCHEMA = 57566
const TABLE = 57567
const SEQUENCE = 57568
const INDEX = 57569
const VIEW = 57570
const TO = 57571
const IGNORE = 57572
const IF = 57573
const PRIMARY = 57574
const COLUMN = 57575
const CONSTRAINT = 57576
const SPATIAL = 57577
const FULLTEXT = 57578
const FOREIGN = 57579
const KEY_BLOCK_SIZE = 57580
const SHOW = 57581
const DESCRIBE = 57582
const EXPLAIN = 57583
const DATE = 57584
const ESCAPE = 57585
const REPAIR = 57586
const OPTIMIZE = 57587
const TRUNCATE = 57588
const MAXVALUE = 57589
const PARTITION = 57590
const REORGANIZE = 57591
const LESS = 57592
const THAN = 57593
const PROCEDURE = 57594
const TRIGGER = 57595
const STATUS = 57596
const VARIABLES = 57597
const ROLE = 57598
const PROXY = 57599
const AVG_ROW_LENGTH = 57600
const STORAGE = 57601
const DISK = 57602
const MEMORY = 57603
const CHECKSUM = 57604
const COMPRESSION = 57605
const DATA = 57606
const DIRECTORY = 57607
const DELAY_KEY_WRITE = 57608
const ENCRYPTION = 57609
const ENGINE = 57610
const MAX_ROWS = 57611
const MIN_ROWS = 57612
const PACK_KEYS = 57613
const ROW_FORMAT = 57614
const STATS_AUTO_RECALC = 57615
const STATS_PERSISTENT = 57616
const STATS_SAMPLE_PAGES = 57617
const DYNAMIC = 57618
const COMPRESSED = 57619
const REDUNDANT = 57620
const COMPACT = 57621
const FIXED = 57622
const COLUMN_FORMAT = 57623
const AUTO_RANDOM = 57624
const ENGINE_ATTRIBUTE = 57625
const SECONDARY_ENGINE_ATTRIBUTE = 57626
const INSERT_METHOD = 57627
const RESTRICT = 57628
const CASCADE = 57629
const ACTION = 57630
const PARTIAL = 57631
const SIMPLE = 57632
const CHECK = 57633
const ENFORCED = 57634
const RANGE = 57635
const LIST = 57636
const ALGORITHM = 57637
const LINEAR = 57638
const PARTITIONS = 57639
const SUBPARTITION = 57640
const SUBPARTITIONS = 57641
const CLUSTER = 57642
const TYPE = 57643
const ANY = 57644
const SOME = 57645
const EXTERNAL = 57646
const LOCALFILE = 57647
const URL = 57648
const PREPARE = 57649
const DEALLOCATE = 57650
const RESET = 57651
const EXTENSION = 57652
const RETENTION = 57653
const PERIOD = 57654
const INCREMENT = 57655
const CYCLE = 57656
const MINVALUE = 57657
const PUBLICATION = 57658
const SUBSCRIPTIONS = 57659
const PUBLICATIONS = 57660
const PROPERTIES = 57661
const PARSER = 57662
const VISIBLE = 57663
const INVISIBLE = 57664
const BTREE = 57665
const HASH = 57666
const RTREE = 57667
const BSI = 57668
const IVFFLAT = 57669
const MASTER = 57670
const ZONEMAP = 57671
const LEADING = 57672
const BOTH = 57673
const TRAILING = 57674
const UNKNOWN = 57675
const LISTS = 57676
const OP_TYPE = 57677
const REINDEX = 57678
const EXPIRE = 57679
const ACCOUNT = 57680
const ACCOUNTS = 57681
const UNLOCK = 57682
const DAY = 57683
const NEVER = 57684
const PUMP = 57685
const MYSQL_COMPATIBILITY_MODE = 57686
const UNIQUE_CHECK_ON_AUTOINCR = 57687
const MODIFY = 57688
const CHANGE = 57689
const SECOND = 57690
const ASCII = 57691
const COALESCE = 57692
const COLLATION = 57693
const HOUR = 57694
const MICROSECOND = 57695
const MINUTE = 57696
const MONTH = 57697
const QUARTER = 57698
const REPEAT = 57699
const REVERSE = 57700
const ROW_COUNT = 57701
const WEEK = 57702
const REVOKE = 57703
const FUNCTION = 57704
const PRIVILEGES = 57705
const TABLESPACE = 57706
const EXECUTE = 57707
const SUPER = 57708
const GRANT = 57709
const OPTION = 57710
const REFERENCES = 57711
const REPLICATION = 57712
const SLAVE = 57713
const CLIENT = 57714
const USAGE = 57715
const RELOAD = 57716
const FILE = 57717
const TEMPORARY = 57718
const ROUTINE = 57719
const EVENT = 57720
const SHUTDOWN = 57721
const NULLX = 57722
const AUTO_INCREMENT = 57723
const APPROXNUM = 57724
const SIGNED = 57725
const UNSIGNED = 57726
const ZEROFILL = 57727
const ENGINES = 57728
const LOW_CARDINALITY = 57729
const AUTOEXTEND_SIZE = 57730
const ADMIN_NAME = 57731
const RANDOM = 57732
const SUSPEND = 57733
const ATTRIBUTE = 57734
const HISTORY = 57735
const REUSE = 57736
const CURRENT = 57737
const OPTIONAL = 57738
const FAILED_LOGIN_ATTEMPTS = 57739
const PASSWORD_LOCK_TIME = 57740
const UNBOUNDED = 57741
const SECONDARY = 57742
const RESTRICTED = 57743
const USER = 57744
const IDENTIFIED = 57745
const CIPHER = 57746
const ISSUER = 57747
const X509 = 57748
const SUBJECT = 57749
const SAN = 57750
const REQUIRE = 57751
const SSL = 57752
const NONE = 57753
const PASSWORD = 57754
const SHARED = 57755
const EXCLUSIVE = 57756
const MAX_QUERIES_PER_HOUR = 57757
const MAX_UPDATES_PER_HOUR = 57758
const MAX_CONNECTIONS_PER_HOUR = 57759
const MAX_USER_CONNECTIONS = 57760
const FORMAT = 57761
const VERBOSE = 57762
const CONNECTION = 57763
const TRIGGERS = 57764
const PROFILES = 57765
const LOAD = 57766
const INLINE = 57767
const INFILE = 57768
const TERMINATED = 57769
const OPTIONALLY = 57770
const ENCLOSED = 57771
const ESCAPED = 57772
const STARTING = 57773
const LINES = 57774
const ROWS = 57775
const IMPORT = 57776
const DISCARD = 57777
const JSONTYPE = 57778
const MODUMP = 57779
const OVER = 57780
const PRECEDING = 57781
const FOLLOWING = 57782
const GROUPS = 57783
const DATABASES = 57784
const TABLES = 57785
const SEQUENCES = 57786
const EXTENDED = 57787
const FULL = 57788
const PROCESSLIST = 57789
const FIELDS = 57790
const COLUMNS = 57791
const OPEN = 57792
const ERRORS = 57793
const WARNINGS = 57794
const INDEXES = 57795
const SCHEMAS = 57796
const NODE = 57797
const LOCKS = 57798
const ROLES = 57799
const TABLE_NUMBER = 57800
const COLUMN_NUMBER = 57801
const TABLE_VALUES = 57802
const TABLE_SIZE = 57803
const NAMES = 57804
const GLOBAL = 57805
const PERSIST = 57806
const SESSION = 57807
const ISOLATION = 57808
const LEVEL = 57809
const READ = 57810
const WRITE = 57811
const ONLY = 57812
const REPEATABLE = 57813
const COMMITTED = 57814
const UNCOMMITTED = 57815
const SERIALIZABLE = 57816
const LOCAL = 57817
const EVENTS = 57818
const PLUGINS = 57819
const CURRENT_TIMESTAMP = 57820
const DATABASE = 57821
const CURRENT_TIME = 57822
const LOCALTIME = 57823
const LOCALTIMESTAMP = 57824
const UTC_DATE = 57825
const UTC_TIME = 57826
const UTC_TIMESTAMP = 57827
const REPLACE = 57828
const CONVERT = 57829
const SEPARATOR = 57830
const TIMESTAMPDIFF = 57831
const CURRENT_DATE = 57832
const CURRENT_USER = 57833
const CURRENT_ROLE = 57834
const SECOND_MICROSECOND = 57835
const MINUTE_MICROSECOND = 57836
const MINUTE_SECOND = 57837
const HOUR_MICROSECOND = 57838
const HOUR_SECOND = 57839
const HOUR_MINUTE = 57840
const DAY_MICROSECOND = 57841
const DAY_SECOND = 57842
const DAY_MINUTE = 57843
const DAY_HOUR = 57844
const YEAR_MONTH = 57845
const SQL_TSI_HOUR = 57846
const SQL_TSI_DAY = 57847
const SQL_TSI_WEEK = 57848
const SQL_TSI_MONTH = 57849
const SQL_TSI_QUARTER = 57850
const SQL_TSI_YEAR = 57851
const SQL_TSI_SECOND = 57852
const SQL_TSI_MINUTE = 57853
const RECURSIVE = 57854
const CONFIG = 57855
const DRAINER = 57856
const SOURCE = 57857
const STREAM = 57858
const HEADERS = 57859
const CONNECTOR = 57860
const CONNECTORS = 57861
const DAEMON = 57862
const PAUSE = 57863
const CANCEL = 57864
const TASK = 57865
const RESUME = 57866
const MATCH = 57867
const AGAINST = 57868
const BOOLEAN = 57869
const LANGUAGE = 57870
const WITH = 57871
const QUERY = 57872
const EXPANSION = 57873
const WITHOUT = 57874
const VALIDATION = 57875
const UPGRADE = 57876
const RETRY = 57877
const ADDDATE = 57878
const BIT_AND = 57879
const BIT_OR = 57880
const BIT_XOR = 57881
const CAST = 57882
const COUNT = 57883
const APPROX_COUNT = 57884
const APPROX_COUNT_DISTINCT = 57885
const SERIAL_EXTRACT = 57886
const APPROX_PERCENTILE = 57887
const CURDATE = 57888
const CURTIME = 57889
const DATE_ADD = 57890
const DATE_SUB = 57891
const EXTRACT = 57892
const GROUP_CONCAT = 57893
const MAX = 57894
const MID = 57895
const MIN = 57896
const NOW = 57897
const POSITION = 57898
const SESSION_USER = 57899
const STD = 57900
const STDDEV = 57901
const MEDIAN = 57902
const CLUSTER_CENTERS = 57903
const KMEANS = 57904
const STDDEV_POP = 57905
const STDDEV_SAMP = 57906
const SUBDATE = 57907
const SUBSTR = 57908
const SUBSTRING = 57909
const SUM = 57910
const SYSDATE = 57911
const SYSTEM_USER = 57912
const TRANSLATE = 57913
const TRIM = 57914
const VARIANCE = 57915
const VAR_POP = 57916
const VAR_SAMP = 57917
const AVG = 57918
const RANK = 57919
const ROW_NUMBER = 57920
const DENSE_RANK = 57921
const BIT_CAST = 57922
const BITMAP_BIT_POSITION = 57923
const BITMAP_BUCKET_NUMBER = 57924
const BITMAP_COUNT = 57925
const BITMAP_CONSTRUCT_AGG = 57926
const BITMAP_OR_AGG = 57927
const NEXTVAL = 57928
const SETVAL = 57929
const CURRVAL = 57930
const LASTVAL = 57931
const ARROW = 57932
const ROW = 57933
const OUTFILE = 57934
const HEADER = 57935
const MAX_FILE_SIZE = 57936
const FORCE_QUOTE = 57937
const PARALLEL = 57938
const STRICT = 57939
const UNUSED = 57940
const BINDINGS = 57941
const DO = 57942
const DECLARE = 57943
const LOOP = 57944
const WHILE = 57945
const LEAVE = 57946
const ITERATE = 57947
const UNTIL = 57948
const CALL = 57949
const PREV = 57950
const SLIDING = 57951
const FILL = 57952
const SPBEGIN = 57953
const BACKEND = 57954
const SERVERS = 57955
const HANDLER = 57956
const PERCENT = 57957
const SAMPLE = 57958
const MO_TS = 57959
const PITR = 57960
const CDC = 57961
const ROLLUP = 57962
const LOGSERVICE = 57963
const REPLICAS = 57964
const STORES = 57965
const SETTINGS = 57966
const KILL = 57967
const BACKUP = 57968
const FILESYSTEM = 57969
const PARALLELISM = 57970
const RESTORE = 57971
const QUERY_RESULT = 57972

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12576

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 138,
	11, 790,
	22, 790,
	-2, 783,
	-1, 161,
	242, 1205,
	244, 1104,
	-2, 1151,
	-1, 188,
	43, 613,
	244, 613,
	271, 620,
	272, 620,
	470, 613,
	-2, 648,
	-1, 228,
	651, 1966,
	-2, 517,
	-1, 534,
	651, 2088,
	-2, 398,
	-1, 592,
	651, 2147,
	-2, 396,
	-1, 593,
	651, 2148,
	-2, 397,
	-1, 594,
	651, 2149,
	-2, 399,
	-1, 729,
	323, 176,
	442, 176,
	443, 176,
	-2, 1869,
	-1, 795,
	84, 1655,
	-2, 2024,
	-1, 796,
	84, 1673,
	-2, 1995,
	-1, 800,
	84, 1674,
	-2, 2023,
	-1, 833,
	84, 1582,
	-2, 2222,
	-1, 834,
	84, 1583,
	-2, 2221,
	-1, 835,
	84, 1584,
	-2, 2211,
	-1, 836,
	84, 2183,
	-2, 2204,
	-1, 837,
	84, 2184,
	-2, 2205,
	-1, 838,
	84, 2185,
	-2, 2213,
	-1, 839,
	84, 2186,
	-2, 2193,
	-1, 840,
	84, 2187,
	-2, 2202,
	-1, 841,
	84, 2188,
	-2, 2214,
	-1, 842,
	84, 2189,
	-2, 2215,
	-1, 843,
	84, 2190,
	-2, 2220,
	-1, 844,
	84, 2191,
	-2, 2225,
	-1, 845,
	84, 2192,
	-2, 2226,
	-1, 846,
	84, 1651,
	-2, 2062,
	-1, 847,
	84, 1652,
	-2, 1853,
	-1, 848,
	84, 1653,
	-2, 2071,
	-1, 849,
	84, 1654,
	-2, 1862,
	-1, 851,
	84, 1657,
	-2, 1870,
	-1, 852,
	84, 1658,
	-2, 2095,
	-1, 854,
	84, 1661,
	-2, 1889,
	-1, 856,
	84, 1663,
	-2, 2107,
	-1, 857,
	84, 1664,
	-2, 2106,
	-1, 858,
	84, 1665,
	-2, 1933,
	-1, 859,
	84, 1666,
	-2, 2019,
	-1, 862,
	84, 1669,
	-2, 2118,
	-1, 864,
	84, 1671,
	-2, 2121,
	-1, 865,
	84, 1672,
	-2, 2123,
	-1, 866,
	84, 1675,
	-2, 2131,
	-1, 867,
	84, 1676,
	-2, 2004,
	-1, 868,
	84, 1677,
	-2, 2049,
	-1, 869,
	84, 1678,
	-2, 2014,
	-1, 870,
	84, 1679,
	-2, 2039,
	-1, 881,
	84, 1560,
	-2, 2216,
	-1, 882,
	84, 1561,
	-2, 2217,
	-1, 883,
	84, 1562,
	-2, 2218,
	-1, 983,
	465, 648,
	466, 648,
	-2, 614,
	-1, 1034,
	126, 1853,
	137, 1853,
	157, 1853,
	-2, 1827,
	-1, 1152,
	22, 817,
	-2, 766,
	-1, 1262,
	11, 790,
	22, 790,
	-2, 1440,
	-1, 1344,
	22, 817,
	-2, 766,
	-1, 1698,
	84, 1726,
	-2, 2021,
	-1, 1699,
	84, 1727,
	-2, 2022,
	-1, 1866,
	85, 976,
	-2, 982,
	-1, 2312,
	109, 1143,
	153, 1143,
	192, 1143,
	195, 1143,
	284, 1143,
	-2, 1136,
	-1, 2470,
	11, 790,
	22, 790,
	-2, 917,
	-1, 2504,
	85, 1813,
	158, 1813,
	-2, 2006,
	-1, 2505,
	85, 1813,
	158, 1813,
	-2, 2005,
	-1, 2506,
	85, 1789,
	158, 1789,
	-2, 1992,
	-1, 2507,
	85, 1790,
	158, 1790,
	-2, 1997,
	-1, 2508,
	85, 1791,
	158, 1791,
	-2, 1921,
	-1, 2509,
	85, 1792,
	158, 1792,
	-2, 1915,
	-1, 2510,
	85, 1793,
	158, 1793,
	-2, 1843,
	-1, 2511,
	85, 1794,
	158, 1794,
	-2, 1994,
	-1, 2512,
	85, 1795,
	158, 1795,
	-2, 1919,
	-1, 2513,
	85, 1796,
	158, 1796,
	-2, 1914,
	-1, 2514,
	85, 1797,
	158, 1797,
	-2, 1903,
	-1, 2515,
	85, 1813,
	158, 1813,
	-2, 1904,
	-1, 2516,
	85, 1813,
	158, 1813,
	-2, 1905,
	-1, 2518,
	85, 1802,
	158, 1802,
	-2, 2039,
	-1, 2519,
	85, 1779,
	158, 1779,
	-2, 2024,
	-1, 2520,
	85, 1811,
	158, 1811,
	-2, 1995,
	-1, 2521,
	85, 1811,
	158, 1811,
	-2, 2023,
	-1, 2522,
	85, 1811,
	158, 1811,
	-2, 1871,
	-1, 2523,
	85, 1809,
	158, 1809,
	-2, 2014,
	-1, 2524,
	85, 1806,
	158, 1806,
	-2, 1894,
	-1, 2525,
	84, 1760,
	85, 1760,
	158, 1760,
	400, 1760,
	401, 1760,
	402, 1760,
	-2, 1842,
	-1, 2526,
	84, 1761,
	85, 1761,
	158, 1761,
	400, 1761,
	401, 1761,
	402, 1761,
	-2, 1844,
	-1, 2527,
	84, 1762,
	85, 1762,
	158, 1762,
	400, 1762,
	401, 1762,
	402, 1762,
	-2, 2067,
	-1, 2528,
	84, 1764,
	85, 1764,
	158, 1764,
	400, 1764,
	401, 1764,
	402, 1764,
	-2, 1996,
	-1, 2529,
	84, 1766,
	85, 1766,
	158, 1766,
	400, 1766,
	401, 1766,
	402, 1766,
	-2, 1976,
	-1, 2530,
	84, 1768,
	85, 1768,
	158, 1768,
	400, 1768,
	401, 1768,
	402, 1768,
	-2, 1920,
	-1, 2531,
	84, 1770,
	85, 1770,
	158, 1770,
	400, 1770,
	401, 1770,
	402, 1770,
	-2, 1899,
	-1, 2532,
	84, 1771,
	85, 1771,
	158, 1771,
	400, 1771,
	401, 1771,
	402, 1771,
	-2, 1900,
	-1, 2533,
	84, 1773,
	85, 1773,
	158, 1773,
	400, 1773,
	401, 1773,
	402, 1773,
	-2, 1841,
	-1, 2534,
	85, 1816,
	158, 1816,
	400, 1816,
	401, 1816,
	402, 1816,
	-2, 1876,
	-1, 2535,
	85, 1816,
	158, 1816,
	400, 1816,
	401, 1816,
	402, 1816,
	-2, 1890,
	-1, 2536,
	85, 1819,
	158, 1819,
	400, 1819,
	401, 1819,
	402, 1819,
	-2, 1872,
	-1, 2537,
	85, 1819,
	158, 1819,
	400, 1819,
	401, 1819,
	402, 1819,
	-2, 1936,
	-1, 2538,
	85, 1816,
	158, 1816,
	400, 1816,
	401, 1816,
	402, 1816,
	-2, 1958,
	-1, 2750,
	109, 1143,
	153, 1143,
	192, 1143,
	195, 1143,
	284, 1143,
	-2, 1137,
	-1, 2768,
	82, 710,
	158, 710,
	-2, 1321,
	-1, 3186,
	195, 1143,
	308, 1408,
	-2, 1380,
	-1, 3365,
	109, 1143,
	153, 1143,
	192, 1143,
	195, 1143,
	-2, 1261,
	-1, 3367,
	109, 1143,
	153, 1143,
	192, 1143,
	195, 1143,
	-2, 1261,
	-1, 3379,
	82, 710,
	158, 710,
	-2, 1321,
	-1, 3400,
	195, 1143,
	308, 1408,
	-2, 1381,
	-1, 3549,
	109, 1143,
	153, 1143,
	192, 1143,
	195, 1143,
	-2, 1262,
	-1, 3577,
	85, 1223,
	158, 1223,
	-2, 1143,
	-1, 3717,
	85, 1223,
	158, 1223,
	-2, 1143,
	-1, 3874,
	85, 1227,
	158, 1227,
	-2, 1143,
	-1, 3921,
	85, 1228,
	158, 1228,
	-2, 1143,
}

const yyPrivate = 57344

const yyLast = 52161

var yyAct = [...]int{
	762, 739, 764, 3967, 3941, 2798, 217, 3960, 3878, 1951,
	1678, 3481, 3385, 3777, 3885, 3884, 3877, 3717, 3834, 3172,
	3803, 3205, 748, 3758, 3277, 3695, 2593, 3605, 3752, 1674,
	3414, 741, 2792, 3662, 3278, 1297, 3716, 3537, 3536, 1512,
	3781, 3534, 3635, 2710, 792, 1444, 629, 2795, 1153, 1589,
	3686, 3759, 3485, 3761, 3476, 3347, 1450, 1899, 3352, 1033,
	647, 3181, 653, 653, 2359, 737, 3558, 1147, 653, 671,
	680, 3546, 1725, 680, 37, 1681, 3401, 3516, 3143, 3551,
	3103, 2771, 3129, 3368, 2908, 2907, 2502, 2045, 3132, 2061,
	3275, 3337, 2906, 2887, 2048, 2821, 65, 3201, 1739, 2801,
	3190, 3370, 2010, 3183, 2084, 2974, 3317, 2628, 2117, 202,
	1601, 2464, 692, 2159, 2903, 3263, 2500, 2933, 3243, 2739,
	3152, 2323, 1911, 688, 2362, 3114, 3189, 3106, 3110, 1143,
	3108, 3104, 3105, 3101, 137, 731, 2751, 2291, 2268, 2155,
	3078, 1505, 2947, 677, 2142, 3021, 736, 2572, 2267, 2125,
	2126, 2118, 36, 2554, 1831, 1585, 1578, 2957, 2090, 2041,
	2465, 2011, 1593, 1590, 955, 2154, 2728, 2450, 2823, 1416,
	2723, 2445, 2803, 1941, 2360, 2312, 2014, 2763, 213, 8,
	212, 7, 6, 1875, 1672, 2322, 1377, 2156, 1453, 2189,
	1621, 2498, 1091, 629, 1552, 1490, 740, 1521, 1484, 646,
	730, 2166, 2303, 1433, 1410, 2661, 1732, 749, 1712, 2355,
	1663, 1910, 1169, 2124, 1604, 1600, 2121, 217, 2106, 217,
	1559, 1081, 1082, 2080, 685, 1026, 1871, 738, 653, 1671,
	2472, 1454, 1489, 1874, 2446, 1429, 1486, 662, 2019, 27,
	954, 885, 1740, 694, 695, 1543, 732, 1445, 992, 203,
	1366, 23, 978, 111, 2660, 195, 24, 952, 1551, 17,
	10, 16, 1677, 937, 1298, 1342, 2163, 691, 887, 1078,
	2474, 3768, 3680, 679, 2991, 888, 931, 1230, 1231, 1232,
	1229, 649, 2990, 962, 15, 2696, 1230, 1231, 1232, 1229,
	2696, 2696, 14, 1042, 689, 199, 1230, 1231, 1232, 1229,
	652, 652, 1027, 3382, 2173, 3159, 660, 1148, 676, 3509,
	3355, 3270, 1149, 2616, 2557, 2560, 2558, 1844, 2555, 1562,
	1566, 658, 1073, 1074, 33, 201, 1077, 648, 1079, 665,
	672, 1039, 2266, 200, 61, 191, 162, 1361, 1083, 1074,
	1488, 732, 3742, 1148, 654, 1074, 683, 1012, 628, 1041,
	907, 192, 3088, 675, 959, 960, 905, 1060, 183, 2272,
	2276, 674, 193, 1364, 3071, 1002, 1413, 1414, 1415, 3068,
	1845, 3073, 3070, 3952, 1467, 1838, 1357, 1613, 2688, 2686,
	8, 136, 7, 3474, 1072, 1564, 2970, 2968, 2095, 3747,
	3642, 3636, 3477, 673, 3276, 2139, 122, 3763, 1612, 2120,
	1230, 1231, 1232, 1229, 196, 1230, 1231, 1232, 1229, 886,
	3048, 1292, 2112, 2400, 1372, 1228, 200, 897, 1192, 3702,
	3521, 2690, 2602, 2160, 3517, 2610, 3369, 2314, 1599, 1061,
	3667, 3859, 3814, 1529, 1367, 1371, 200, 61, 191, 162,
	1370, 1369, 907, 905, 1043, 3046, 1402, 2171, 1004, 906,
	200, 1003, 200, 200, 2313, 904, 200, 61, 191, 162,
	2901, 200, 200, 3703, 1037, 1385, 660, 2307, 1847, 690,
	1608, 1038, 2757, 2492, 200, 1373, 1227, 3669, 2493, 1619,
	2940, 144, 145, 1463, 146, 147, 1464, 196, 200, 988,
	2712, 902, 2024, 1007, 1005, 1491, 1006, 1493, 963, 2058,
	1605, 2993, 1055, 1050, 1045, 1049, 1053, 196, 2573, 1616,
	2982, 200, 61, 191, 162, 200, 61, 191, 162, 1001,
	1164, 2755, 136, 1607, 196, 965, 898, 196, 2713, 1925,
	1058, 1680, 1618, 196, 1048, 876, 136, 875, 877, 878,
	1225, 879, 880, 2941, 2942, 196, 3072, 200, 61, 191,
	162, 3069, 1441, 161, 189, 198, 190, 120, 2479, 196,
	1664, 2478, 2725, 1668, 2480, 2025, 2026, 1856, 1857, 1451,
	1452, 2758, 2726, 1220, 1466, 1630, 188, 182, 181, 1161,
	1036, 1035, 196, 67, 1013, 1056, 196, 1667, 3888, 3889,
	987, 985, 3856, 3766, 1059, 1207, 1449, 3765, 1208, 1384,
	1448, 1451, 1452, 3766, 3847, 3764, 1009, 3765, 3846, 3764,
	3845, 2255, 984, 3909, 3836, 3852, 1046, 3750, 196, 3498,
	2975, 2724, 3176, 3279, 958, 3279, 1210, 3836, 3174, 2691,
	1565, 1563, 3945, 3946, 2175, 964, 997, 2842, 2042, 2976,
	1057, 2977, 2597, 1774, 184, 185, 186, 3753, 3754, 3755,
	3756, 653, 653, 3839, 3639, 1158, 1684, 3774, 2392, 993,
	1167, 3292, 653, 1157, 2032, 1659, 2731, 3338, 2167, 2714,
	1011, 3526, 3125, 1669, 3345, 3861, 3862, 194, 2435, 2302,
	1047, 2103, 680, 680, 3115, 653, 1572, 1571, 3857, 3858,
	943, 2715, 1223, 1224, 3426, 994, 998, 1666, 132, 1172,
	1175, 2607, 187, 2172, 133, 3671, 3672, 3854, 1205, 3009,
	2036, 3011, 1172, 1175, 1085, 981, 1222, 979, 983, 1001,
	187, 2398, 1195, 980, 977, 976, 3475, 982, 967, 968,
	966, 969, 970, 971, 972, 2969, 999, 1465, 1000, 2438,
	2439, 677, 677, 677, 2689, 3887, 2893, 1010, 1270, 995,
	996, 1477, 1386, 1439, 2056, 2057, 1360, 1054, 3119, 3497,
	3123, 134, 1156, 3767, 3679, 726, 1042, 3499, 728, 2437,
	3676, 3523, 1206, 727, 60, 1683, 1682, 3295, 3441, 3321,
	2708, 2495, 3015, 2695, 1150, 2443, 991, 1218, 1219, 2150,
	1217, 900, 990, 1051, 1157, 1149, 1052, 1149, 3204, 1149,
	3130, 645, 1187, 3632, 1039, 3438, 2161, 986, 3202, 3203,
	2161, 2161, 3141, 3916, 1665, 2992, 3120, 3121, 2709, 3178,
	3153, 3707, 1041, 62, 2989, 1301, 2273, 3796, 3791, 901,
	2162, 2764, 3122, 2889, 2194, 1149, 1074, 1846, 2430, 1042,
	1074, 1074, 1074, 1614, 1074, 3699, 682, 1074, 681, 1209,
	2899, 2309, 3782, 1264, 3431, 3079, 3798, 3386, 142, 197,
	1166, 143, 3804, 2174, 678, 3701, 163, 2793, 2794, 3173,
	2797, 58, 2797, 3117, 2178, 2180, 2181, 1039, 3393, 945,
	1163, 946, 1428, 3860, 678, 989, 1008, 3666, 2287, 652,
	1146, 961, 956, 1302, 957, 1041, 1062, 1044, 1174, 1173,
	1155, 3328, 1363, 3207, 1365, 2556, 676, 676, 676, 3670,
	1567, 1174, 1173, 3131, 2743, 2746, 2747, 2748, 2744, 2745,
	1382, 647, 1176, 1183, 3092, 1152, 62, 1151, 672, 672,
	672, 1184, 1145, 1340, 1038, 886, 1345, 135, 45, 678,
	2365, 2687, 1368, 678, 59, 3522, 62, 1848, 5, 163,
	2611, 675, 675, 675, 955, 1180, 1181, 1186, 1271, 674,
	674, 674, 139, 140, 3330, 2433, 141, 3442, 3773, 163,
	903, 1266, 1267, 1268, 1269, 678, 3596, 2043, 3131, 1440,
	2495, 2730, 3708, 163, 3963, 163, 163, 1212, 3126, 163,
	1213, 673, 673, 673, 163, 163, 1160, 1162, 1165, 3116,
	3978, 62, 2410, 1451, 1452, 62, 3700, 163, 653, 1451,
	1452, 1479, 2409, 3488, 1178, 653, 3585, 2737, 1215, 629,
	629, 163, 3673, 1447, 2843, 1501, 2844, 2845, 3012, 629,
	629, 3853, 3329, 1516, 1516, 2378, 653, 62, 2734, 2735,
	3591, 2358, 2381, 3527, 163, 1690, 1693, 1694, 163, 3179,
	2431, 2432, 1500, 2733, 1443, 1442, 1691, 680, 1544, 647,
	2033, 1660, 1514, 1514, 1555, 1555, 1185, 1426, 1387, 1313,
	1314, 1425, 3654, 1518, 3655, 217, 3118, 1424, 3805, 2364,
	163, 3721, 3687, 2871, 2366, 629, 1523, 3876, 2358, 3182,
	3649, 1144, 3654, 3067, 3655, 3371, 3206, 2401, 3472, 2380,
	1211, 1261, 3202, 3203, 1379, 1380, 2035, 2935, 2937, 1378,
	1389, 1390, 1391, 1392, 1393, 690, 1395, 3833, 1487, 2179,
	1383, 3282, 1401, 3964, 3198, 2952, 2953, 1192, 3657, 1419,
	3083, 2603, 2484, 1478, 2396, 944, 1427, 1597, 2367, 1216,
	1573, 2164, 1602, 1437, 2379, 2031, 2008, 2375, 3657, 1611,
	2368, 1456, 1457, 1344, 1459, 1460, 1394, 1461, 3234, 3656,
	3014, 1400, 1399, 1398, 1214, 3606, 3607, 3608, 3612, 3610,
	3611, 3609, 1510, 1511, 2286, 1435, 1436, 1397, 1642, 3656,
	1014, 684, 3331, 3598, 1346, 2701, 1388, 949, 950, 951,
	1850, 2840, 1516, 3318, 1516, 1157, 2176, 2177, 1002, 1002,
	1620, 1430, 1434, 1434, 1434, 1407, 1002, 1412, 2190, 1374,
	1375, 1409, 3720, 3199, 2705, 1191, 3023, 3022, 1606, 2280,
	2862, 2863, 2282, 2281, 1376, 1617, 1430, 1430, 1859, 1860,
	1468, 1469, 3507, 1455, 947, 3085, 1458, 2279, 677, 1858,
	1042, 677, 677, 3139, 908, 2422, 1474, 1042, 909, 1576,
	2395, 1579, 1580, 1485, 1652, 3559, 3961, 3962, 1545, 1637,
	1638, 3979, 1516, 1581, 1582, 3843, 1499, 3875, 3587, 1587,
	1588, 1154, 3586, 1228, 1522, 1610, 3592, 3593, 2936, 1738,
	3240, 1004, 1004, 2369, 1003, 1003, 2495, 1421, 3974, 1004,
	1692, 1726, 1003, 1787, 1679, 1530, 1592, 1595, 658, 1596,
	1472, 1473, 1421, 1475, 1476, 3236, 1480, 1481, 1482, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1711, 1495, 1497, 1556, 1557, 1723, 1724, 1536, 1154, 1420,
	1542, 1508, 1509, 1676, 1524, 2872, 2874, 2875, 2876, 2873,
	1531, 1532, 1533, 1534, 1535, 2861, 1537, 1538, 1539, 1540,
	1541, 1641, 2294, 3283, 1547, 1548, 1549, 1550, 2374, 1157,
	1640, 2169, 2372, 2769, 1192, 1849, 2083, 2575, 2462, 1852,
	3334, 1854, 1661, 1796, 3140, 2295, 2296, 3158, 1861, 1657,
	1863, 1864, 1695, 1772, 3650, 1544, 1829, 1568, 3651, 3969,
	1872, 1516, 1877, 1878, 2305, 1880, 1479, 653, 1777, 1778,
	1779, 1623, 653, 676, 3650, 1516, 676, 676, 3760, 955,
	2702, 1793, 1900, 1628, 1794, 1851, 1631, 3200, 1228, 1650,
	1065, 1070, 1071, 1662, 1516, 672, 1015, 2463, 672, 672,
	1479, 1807, 1808, 1651, 1670, 671, 1649, 1675, 1832, 1648,
	1645, 1647, 3240, 1786, 1230, 1231, 1232, 1229, 675, 1190,
	1828, 675, 675, 2770, 1673, 1924, 674, 912, 1840, 674,
	674, 3294, 3970, 1714, 1931, 1931, 1189, 1479, 2260, 1479,
	1479, 2602, 1646, 653, 653, 1341, 1998, 1872, 2002, 3958,
	3923, 1516, 2005, 2006, 3896, 1721, 1722, 2021, 673, 629,
	3044, 673, 673, 1629, 3890, 2463, 1632, 1633, 1769, 1770,
	3986, 1773, 3211, 629, 2770, 1516, 1879, 2081, 911, 1788,
	3209, 2304, 914, 913, 3077, 1928, 2224, 3075, 1881, 2223,
	2463, 3872, 1795, 2955, 1797, 2717, 1798, 1799, 1800, 2692,
	2592, 2580, 653, 1872, 1516, 1835, 2066, 2160, 653, 653,
	653, 688, 688, 1190, 1200, 3824, 3971, 1202, 2076, 2077,
	2078, 2079, 3924, 3924, 1953, 2085, 2023, 3897, 1801, 2351,
	3799, 3787, 217, 3740, 1192, 217, 217, 3683, 217, 2059,
	2000, 2265, 1868, 1869, 1870, 1203, 2259, 1230, 1231, 1232,
	1229, 2258, 2231, 1830, 1883, 1884, 1885, 1886, 2151, 1934,
	765, 775, 1228, 1836, 3873, 1908, 1909, 2054, 2051, 2052,
	766, 2007, 767, 771, 774, 770, 768, 769, 1787, 1787,
	2128, 3739, 1918, 1919, 2037, 1067, 1068, 1069, 3683, 1787,
	1787, 1408, 1912, 2200, 1914, 1915, 2144, 2068, 2069, 2070,
	1867, 1729, 1929, 2169, 3788, 1882, 3741, 2028, 1921, 2030,
	1887, 1502, 1917, 1896, 2044, 1902, 1903, 2065, 3382, 1897,
	2049, 2050, 1933, 1876, 1922, 772, 1430, 1196, 2959, 1900,
	1907, 2203, 3734, 1516, 2158, 2772, 2138, 1892, 3733, 2605,
	1434, 2094, 1913, 3732, 2097, 2098, 2604, 2100, 3731, 2130,
	1935, 1936, 1434, 1198, 2327, 1606, 1905, 773, 3711, 3710,
	2596, 1230, 1231, 1232, 1229, 1201, 1204, 2345, 1930, 1932,
	2365, 2368, 2636, 1999, 1042, 3622, 2219, 1042, 2204, 677,
	3682, 1937, 1938, 2149, 2004, 1042, 2152, 2009, 2088, 3447,
	3395, 1197, 3361, 2074, 1625, 2134, 3310, 2027, 2038, 2029,
	1135, 1131, 1132, 1133, 1134, 3683, 2641, 2202, 2640, 2639,
	2637, 3683, 1039, 1876, 1278, 3306, 3683, 3404, 3219, 2365,
	2368, 3683, 1177, 1039, 2930, 2667, 2659, 2618, 2123, 2063,
	1041, 2169, 2169, 2064, 2600, 2071, 2072, 1141, 1136, 2123,
	2062, 1041, 890, 891, 892, 893, 2062, 2062, 2062, 2091,
	2089, 733, 3344, 3683, 2588, 2187, 2188, 3416, 1245, 3445,
	3163, 2022, 2495, 3396, 2582, 3362, 1673, 1261, 1199, 3311,
	3407, 2053, 2577, 2108, 2569, 2567, 910, 2638, 2565, 3006,
	3792, 3402, 1042, 3980, 2140, 1462, 3424, 3425, 3307, 1776,
	1775, 3220, 3403, 1776, 1775, 2129, 2183, 2463, 1228, 1228,
	1228, 2067, 2563, 2137, 2369, 2135, 2326, 2327, 2261, 2364,
	2358, 2363, 2238, 2361, 2366, 2237, 2270, 2271, 2148, 2274,
	1039, 2338, 2277, 2222, 3793, 2353, 2213, 2578, 2212, 3408,
	890, 891, 892, 893, 2211, 1431, 731, 2583, 1041, 653,
	653, 653, 2153, 2555, 676, 2578, 3560, 2570, 2568, 1760,
	2168, 2564, 2146, 2369, 653, 653, 653, 653, 2364, 2358,
	2363, 1506, 2361, 2366, 2092, 1417, 672, 2324, 2367, 1418,
	3374, 3154, 1507, 3949, 2182, 2564, 3372, 2330, 1479, 2327,
	1634, 2260, 2191, 2232, 2233, 1228, 2235, 1417, 1228, 675,
	3561, 1418, 895, 2242, 1714, 2184, 1228, 674, 2393, 1228,
	3769, 1228, 1813, 1504, 1479, 3681, 1806, 1228, 2196, 1527,
	1230, 1231, 1232, 1229, 3375, 2185, 2186, 2367, 2642, 2643,
	3373, 2387, 3646, 2169, 915, 3423, 3589, 2363, 3588, 673,
	1802, 1803, 1804, 1805, 2147, 3574, 1809, 1810, 1811, 1812,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	3155, 3530, 3412, 1635, 1432, 3354, 2337, 1248, 1249, 1250,
	1251, 1252, 1245, 3241, 2342, 3232, 1075, 1076, 2344, 3226,
	2346, 1080, 3221, 3134, 3409, 3413, 3411, 3410, 653, 1931,
	895, 2896, 2895, 2394, 2741, 2697, 2615, 2467, 2467, 2021,
	2467, 2581, 2486, 2133, 3156, 2132, 2131, 2262, 1404, 1403,
	2254, 2256, 2257, 1159, 3268, 1503, 1230, 1231, 1232, 1229,
	629, 629, 2625, 2549, 3418, 3419, 1756, 3271, 1157, 1733,
	1560, 2197, 2092, 1753, 1516, 653, 2347, 1755, 1752, 1754,
	1758, 1759, 1733, 2961, 1862, 1757, 2288, 3844, 653, 1232,
	1229, 1229, 2357, 3601, 1157, 2539, 647, 2356, 2306, 1301,
	3600, 2978, 1555, 2490, 2021, 2832, 2830, 2544, 2809, 2546,
	2807, 2339, 3426, 217, 1253, 1254, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1245, 3405, 3580, 2334, 2298, 2299, 2300,
	3417, 2340, 3881, 3954, 2341, 1042, 2481, 3524, 2482, 2331,
	3977, 2471, 2315, 2316, 2317, 2318, 3531, 3532, 1720, 2469,
	3342, 2473, 2343, 2585, 3953, 3900, 1280, 2487, 2488, 1230,
	1231, 1232, 1229, 2350, 1717, 1719, 1716, 1302, 1718, 1279,
	2598, 3871, 3870, 1039, 2158, 2370, 2371, 2497, 2376, 2883,
	1434, 1516, 3794, 1516, 2475, 1516, 1230, 1231, 1232, 1229,
	1157, 1041, 2680, 2503, 2681, 2881, 3525, 2559, 2617, 1230,
	1231, 1232, 1229, 2879, 3976, 2868, 2543, 2711, 3269, 3343,
	2594, 2595, 2608, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1245, 3736, 2550, 3724, 1516, 2645, 2444, 2440, 3714, 1763,
	1764, 1765, 1766, 1767, 1768, 1761, 1762, 1791, 2882, 2476,
	2652, 1230, 1231, 1232, 1229, 1516, 1230, 1231, 1232, 1229,
	2627, 3704, 1792, 1514, 2880, 2551, 1230, 1231, 1232, 1229,
	3422, 3637, 2878, 2644, 2867, 1561, 1485, 3563, 3562, 3387,
	2494, 3376, 2491, 2740, 1514, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1234, 3037, 2653, 1230, 1231, 1232, 1229, 2612,
	2215, 3341, 3222, 2699, 2700, 2540, 2542, 2703, 3124, 3002,
	3025, 2656, 2657, 3780, 2973, 2972, 2629, 3348, 2629, 2866,
	3503, 1422, 2654, 1522, 1157, 2865, 2864, 2856, 1157, 1230,
	1231, 1232, 1229, 2651, 3491, 1516, 2062, 1560, 1479, 2633,
	1230, 1231, 1232, 1229, 2002, 2850, 3421, 1230, 1231, 1232,
	1229, 2849, 2768, 2614, 3036, 2848, 2847, 2693, 2774, 2590,
	2609, 1230, 1231, 1232, 1229, 2571, 2483, 2264, 2214, 2623,
	2111, 2601, 1495, 1497, 2110, 2606, 2784, 2109, 2599, 2105,
	2104, 1230, 1231, 1232, 1229, 2684, 1157, 1230, 1231, 1232,
	1229, 2060, 1855, 2207, 2806, 1230, 1231, 1232, 1229, 1853,
	1626, 1157, 1157, 1157, 1931, 2619, 2620, 1157, 1359, 2816,
	2817, 2818, 2819, 1157, 2826, 3353, 2827, 2828, 3109, 2829,
	2756, 2831, 2752, 2718, 3973, 2635, 3972, 2503, 1230, 1231,
	1232, 1229, 2826, 3674, 3675, 3490, 2753, 2765, 1230, 1231,
	1232, 1229, 1042, 726, 2467, 2785, 728, 1139, 2622, 3482,
	3947, 727, 3915, 1673, 3914, 3911, 3850, 3435, 2884, 3849,
	2738, 1953, 1230, 1231, 1232, 1229, 2787, 3663, 629, 3831,
	2201, 3776, 2775, 3535, 2002, 1476, 3757, 3748, 1157, 2021,
	2021, 2021, 2021, 2021, 1230, 1231, 1232, 1229, 1230, 1231,
	1232, 1229, 3728, 1157, 2021, 3723, 3722, 2467, 3678, 3665,
	3664, 2812, 2813, 3638, 3582, 1138, 2815, 2890, 3542, 3528,
	3510, 3508, 2822, 3505, 3502, 1516, 2804, 2800, 2736, 2719,
	2804, 2759, 2662, 2663, 3501, 1498, 653, 653, 2668, 3480,
	3298, 2776, 2811, 2720, 8, 2722, 7, 2767, 2773, 3478,
	2781, 2782, 3040, 3455, 3452, 3449, 1233, 1230, 1231, 1232,
	1229, 2888, 3340, 3339, 1263, 2789, 2786, 1230, 1231, 1232,
	1229, 3336, 2783, 1273, 2802, 3326, 3319, 3303, 2808, 1230,
	1231, 1232, 1229, 3301, 3229, 2814, 3228, 2909, 2926, 2805,
	3223, 3217, 217, 3216, 3135, 3096, 3095, 217, 1281, 3039,
	2766, 3091, 2909, 2939, 3038, 3089, 3087, 1876, 3084, 3811,
	2846, 2678, 3082, 2269, 2858, 3016, 3807, 2199, 3013, 1787,
	2971, 1787, 2945, 2877, 2988, 2869, 1230, 1231, 1232, 1229,
	2956, 1230, 1231, 1232, 1229, 2859, 2857, 3001, 1230, 1231,
	1232, 1229, 2853, 1516, 2852, 2891, 3008, 2897, 2851, 2706,
	2910, 2911, 2912, 2913, 2914, 2698, 2694, 2399, 832, 831,
	2402, 2403, 2404, 2405, 2406, 2407, 2408, 2929, 2924, 2411,
	2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421,
	2927, 2423, 2424, 2425, 2426, 2427, 2946, 2428, 2591, 2283,
	2943, 2278, 2983, 2677, 1230, 1231, 1232, 1229, 3659, 2275,
	2114, 2962, 1580, 2994, 2107, 2676, 2966, 1843, 1842, 2928,
	2799, 1832, 1581, 1582, 1042, 1627, 2987, 1587, 1588, 1309,
	1230, 1231, 1232, 1229, 1305, 1042, 1304, 1142, 2985, 3030,
	2938, 3032, 1230, 1231, 1232, 1229, 899, 3658, 2995, 1592,
	1595, 3647, 1596, 3086, 3504, 3489, 2960, 2964, 3367, 3366,
	3090, 2963, 3365, 3333, 3093, 3094, 3005, 3315, 3313, 3312,
	2675, 3309, 1157, 3010, 3308, 3302, 3300, 2979, 3112, 2984,
	2986, 2981, 3284, 2996, 2949, 2950, 3274, 2998, 3128, 2997,
	2894, 3273, 3004, 653, 3259, 3258, 1901, 1230, 1231, 1232,
	1229, 200, 61, 191, 162, 3144, 1157, 3164, 3099, 653,
	3074, 1157, 1157, 3042, 3035, 3017, 3027, 1916, 3018, 3026,
	2021, 2324, 2674, 3162, 3020, 2954, 2716, 3024, 2566, 2562,
	2561, 2243, 2236, 1923, 2230, 2229, 1926, 1927, 3033, 3034,
	2673, 3076, 2387, 3028, 3029, 2228, 3031, 2672, 2227, 1230,
	1231, 1232, 1229, 2225, 3188, 3098, 3191, 2221, 3191, 3191,
	2220, 2218, 3138, 1157, 2209, 2206, 2205, 1230, 1231, 1232,
	1229, 2113, 196, 3899, 1230, 1231, 1232, 1229, 1644, 1826,
	2752, 3212, 3147, 1825, 1824, 3081, 3080, 3151, 1790, 1516,
	1516, 3208, 1789, 1780, 1528, 1554, 1554, 2671, 3166, 3210,
	3175, 3177, 1042, 2670, 1042, 3097, 1526, 1299, 3806, 1042,
	3743, 3730, 3725, 3171, 1575, 3616, 3599, 3595, 1514, 1514,
	2669, 200, 3160, 3573, 1230, 1231, 1232, 1229, 3213, 3214,
	1230, 1231, 1232, 1229, 3557, 1042, 653, 3137, 3186, 3146,
	1039, 3465, 3161, 3112, 3149, 3150, 3157, 1230, 1231, 1232,
	1229, 3463, 1479, 3433, 3187, 2002, 2002, 3170, 1041, 2666,
	3432, 777, 138, 3049, 3050, 3196, 3429, 138, 2357, 3051,
	3052, 3053, 3054, 2356, 3055, 3056, 3057, 3058, 3059, 3060,
	3061, 3062, 3063, 3064, 3192, 3193, 1230, 1231, 1232, 1229,
	3428, 3394, 196, 3391, 3197, 200, 3389, 191, 162, 3356,
	1586, 1577, 1591, 3169, 1594, 1583, 1157, 1411, 2885, 2810,
	2645, 2727, 2761, 2760, 2754, 2721, 2679, 2576, 2485, 3272,
	2429, 161, 1653, 198, 2325, 3218, 2665, 659, 2297, 2263,
	138, 3136, 1244, 1243, 1253, 1254, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1245, 188, 1715, 3194, 3148, 2664, 196,
	2073, 2226, 1866, 1230, 1231, 1232, 1229, 1839, 1658, 1609,
	1685, 1686, 1687, 1688, 1689, 653, 196, 1584, 3231, 3237,
	3238, 3225, 3224, 3230, 3235, 1230, 1231, 1232, 1229, 1358,
	1343, 3248, 1339, 1338, 1337, 1336, 3227, 1244, 1243, 1253,
	1254, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1245, 1335,
	3252, 2658, 1730, 2838, 2839, 2503, 1734, 1735, 1736, 1737,
	3255, 3256, 3257, 1334, 1333, 1771, 1332, 1331, 2854, 2855,
	2648, 1330, 3261, 1781, 1329, 1328, 3267, 1327, 1230, 1231,
	1232, 1229, 1326, 1325, 1324, 2085, 3323, 1323, 1322, 3325,
	1321, 3285, 1320, 1319, 2892, 1318, 1317, 1230, 1231, 1232,
	1229, 1316, 3286, 3287, 1315, 1312, 3823, 3715, 1040, 1311,
	1310, 1308, 2629, 138, 3304, 1307, 3290, 1306, 1303, 3291,
	1296, 1256, 1295, 1260, 2062, 1833, 1293, 1292, 138, 1291,
	138, 653, 2002, 3296, 1290, 1289, 3327, 1288, 1287, 1257,
	1259, 1255, 3360, 1258, 1244, 1243, 1253, 1254, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1245, 1286, 1285, 2467, 2021,
	3379, 1244, 1243, 1253, 1254, 1246, 1247, 1248, 1249, 1250,
	1251, 1252, 1245, 1284, 1283, 3332, 3316, 2925, 2624, 1282,
	1277, 1276, 3335, 3397, 1275, 1274, 1157, 3320, 1194, 3322,
	1140, 3244, 3245, 3821, 1728, 3188, 3819, 1042, 3817, 1157,
	3430, 2329, 2311, 1904, 1042, 1230, 1231, 1232, 1229, 1182,
	1157, 3929, 3444, 3927, 3886, 3247, 1516, 2742, 2496, 2116,
	3349, 1230, 1231, 1232, 1229, 1193, 2921, 3250, 1920, 2919,
	3249, 2922, 2917, 2918, 2920, 653, 2915, 2002, 2332, 2333,
	3388, 1157, 3390, 2916, 3381, 1514, 3351, 121, 2335, 2336,
	3467, 3427, 64, 3293, 2923, 3446, 2458, 2459, 3468, 3578,
	63, 3378, 2589, 2579, 1405, 3133, 3420, 1894, 1895, 3377,
	217, 3000, 3384, 1889, 1890, 1891, 1654, 197, 3184, 1655,
	3185, 3288, 3289, 1157, 163, 3398, 2397, 1833, 3459, 3456,
	3440, 3262, 1833, 1833, 3469, 3434, 1991, 3439, 3437, 1569,
	2574, 3436, 2613, 2834, 1622, 3443, 1603, 3466, 2284, 2822,
	2835, 2836, 2837, 655, 3448, 3453, 2075, 3451, 656, 1188,
	3454, 3450, 3506, 3107, 3457, 3460, 657, 2594, 2595, 3458,
	3100, 3513, 2788, 2762, 2349, 1157, 3461, 2320, 1898, 1865,
	2909, 3938, 2093, 1776, 1775, 2096, 1354, 1355, 2099, 1352,
	1353, 2101, 3727, 3487, 1350, 1351, 3215, 1157, 1516, 1516,
	1348, 1349, 2441, 3144, 2436, 2003, 1471, 1470, 3483, 2062,
	1221, 3254, 3511, 3512, 2948, 3550, 3471, 3550, 3484, 3473,
	2285, 2145, 2909, 1423, 1396, 1446, 3906, 1514, 1726, 3904,
	1157, 3567, 1157, 3864, 3841, 3544, 3545, 3540, 3840, 3838,
	3570, 3783, 3572, 3744, 3630, 3629, 2143, 3568, 3479, 1516,
	2541, 3305, 3281, 3520, 3280, 3519, 3500, 3518, 3515, 2548,
	3265, 2382, 2352, 1624, 3264, 2958, 1421, 653, 3324, 1157,
	1157, 3541, 3529, 1157, 1157, 3931, 3930, 3930, 1726, 3555,
	3547, 3543, 3554, 3003, 2704, 2313, 2208, 2130, 1362, 1179,
	3931, 3566, 3597, 3260, 1154, 1438, 3538, 3618, 3576, 3613,
	3575, 3381, 1042, 72, 1900, 3427, 3627, 3603, 3604, 2,
	3581, 3614, 3615, 2062, 3950, 3633, 3634, 3579, 204, 3,
	3420, 3583, 890, 891, 892, 893, 3951, 1154, 1516, 1679,
	1, 1679, 1243, 1253, 1254, 1246, 1247, 1248, 1249, 1250,
	1251, 1252, 1245, 2685, 3619, 3624, 1837, 1356, 3660, 894,
	889, 2193, 1492, 3623, 2477, 2198, 2055, 1514, 1520, 3653,
	1841, 3625, 896, 2931, 2932, 3253, 2934, 3645, 3538, 3538,
	2707, 2165, 3538, 3538, 2898, 2434, 2301, 3127, 1406, 3640,
	948, 1782, 1639, 3644, 1064, 1171, 1636, 1170, 3648, 1168,
	3652, 1731, 779, 955, 2119, 3492, 2210, 3493, 3696, 3690,
	2886, 2860, 3626, 3937, 2217, 3966, 3898, 3940, 1656, 763,
	3571, 3832, 3749, 3902, 1157, 3751, 3643, 2170, 138, 138,
	138, 1040, 1226, 2980, 3713, 3677, 2234, 3719, 3684, 974,
	820, 2239, 2240, 2241, 790, 1294, 2244, 2245, 2246, 2247,
	2248, 2249, 2250, 2251, 2252, 2253, 3693, 3692, 1615, 3047,
	3045, 3691, 1066, 3705, 3487, 789, 3709, 1157, 3346, 2732,
	3631, 2951, 1516, 3688, 1244, 1243, 1253, 1254, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1245, 3698, 1063, 2447, 975,
	2102, 3746, 3726, 3641, 1570, 1042, 1574, 2348, 3706, 3802,
	3577, 1514, 3180, 2796, 1262, 3735, 1598, 3797, 3392, 3496,
	3494, 3737, 2621, 3495, 2777, 3602, 696, 2034, 3772, 2780,
	627, 1024, 3762, 1679, 3617, 2453, 2457, 2458, 2459, 2454,
	2461, 2455, 2460, 3745, 1157, 2456, 1244, 1243, 1253, 1254,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1245, 2115, 3784,
	697, 2328, 2453, 2457, 2458, 2459, 2454, 2461, 2455, 2460,
	3770, 3779, 2456, 3855, 3729, 928, 3538, 2310, 929, 921,
	2750, 3778, 3775, 2749, 1696, 1235, 1713, 3801, 3065, 3066,
	1272, 1157, 735, 2195, 3786, 2729, 3415, 2944, 71, 1516,
	70, 69, 3826, 68, 3829, 3816, 3818, 3820, 3822, 225,
	781, 3795, 224, 3661, 3800, 3533, 3830, 3828, 3942, 761,
	760, 759, 3809, 758, 757, 756, 2452, 2451, 1514, 3815,
	2449, 2448, 2016, 2015, 2082, 3142, 2825, 2820, 3825, 3569,
	3837, 1942, 1940, 3538, 1483, 3835, 1516, 2377, 2384, 3696,
	1939, 3883, 3812, 1230, 1231, 1232, 1229, 3357, 3358, 3359,
	1347, 3813, 3848, 3363, 3364, 3874, 3594, 3863, 2870, 3486,
	1833, 3882, 1833, 1888, 3867, 1514, 3865, 2373, 1959, 2841,
	1956, 3868, 3869, 1955, 2833, 3866, 3590, 3584, 1987, 3694,
	3538, 1833, 1833, 1244, 1243, 1253, 1254, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1245, 3891, 3549, 3892, 3399, 3893,
	3905, 3894, 3907, 3908, 3903, 3895, 3400, 3406, 2319, 3901,
	1090, 1086, 1088, 1554, 1089, 1157, 1087, 3762, 3910, 2634,
	3233, 2354, 1760, 3102, 2293, 2292, 2290, 2289, 1381, 3771,
	945, 3851, 946, 3514, 3719, 3919, 2501, 2499, 1137, 3246,
	3242, 2127, 3921, 3922, 3920, 2141, 2999, 2017, 3936, 3926,
	3944, 3928, 3943, 3925, 2013, 3932, 3933, 3934, 3935, 2012,
	2900, 2442, 3668, 2584, 1893, 2587, 922, 3955, 3948, 1157,
	926, 2308, 41, 118, 105, 179, 56, 178, 55, 3956,
	116, 3801, 3957, 3959, 940, 176, 936, 54, 100, 3965,
	3968, 99, 115, 174, 53, 209, 208, 211, 210, 207,
	1525, 2552, 2553, 206, 659, 1558, 205, 3842, 3553, 884,
	44, 43, 180, 3975, 3917, 42, 106, 57, 40, 39,
	38, 3944, 3982, 3943, 34, 3981, 13, 12, 35, 2626,
	22, 3968, 2632, 3983, 21, 1643, 138, 3987, 20, 2646,
	2647, 26, 917, 32, 31, 131, 130, 2649, 2650, 30,
	129, 200, 61, 191, 162, 128, 127, 126, 125, 124,
	123, 29, 19, 2655, 48, 47, 46, 9, 1679, 192,
	119, 114, 112, 28, 113, 110, 183, 109, 108, 107,
	193, 103, 101, 83, 82, 81, 96, 95, 94, 1756,
	93, 1685, 1833, 92, 91, 89, 1753, 90, 973, 136,
	1755, 1752, 1754, 1758, 1759, 138, 80, 79, 1757, 78,
	77, 76, 138, 98, 122, 942, 104, 935, 3043, 102,
	87, 97, 196, 88, 86, 138, 939, 938, 138, 138,
	85, 84, 75, 74, 73, 160, 159, 158, 157, 156,
	154, 138, 155, 920, 153, 152, 151, 927, 150, 149,
	3620, 148, 49, 50, 3621, 51, 3165, 52, 170, 169,
	171, 3167, 3168, 173, 175, 172, 177, 934, 167, 2778,
	2779, 165, 1244, 1243, 1253, 1254, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1245, 2192, 168, 944, 166, 164, 66,
	11, 933, 117, 18, 25, 932, 4, 0, 0, 144,
	145, 919, 146, 147, 0, 0, 0, 925, 1244, 1243,
	1253, 1254, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1763, 1764, 1765, 1766, 1767, 1768, 1761, 1762,
	0, 0, 0, 0, 0, 0, 0, 943, 0, 0,
	0, 161, 189, 198, 190, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3239, 0, 0,
	0, 0, 0, 924, 188, 182, 181, 0, 0, 0,
	0, 67, 0, 0, 0, 0, 3251, 1833, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 186, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2965, 0, 2967,
	0, 0, 0, 0, 0, 194, 0, 0, 0, 0,
	3785, 0, 0, 0, 0, 3789, 3790, 0, 1833, 930,
	0, 0, 0, 1833, 0, 0, 132, 0, 0, 0,
	187, 0, 133, 0, 2143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3810, 0, 0, 0,
	0, 0, 0, 0, 0, 1988, 0, 0, 2020, 0,
	1949, 0, 0, 0, 0, 0, 0, 0, 0, 3019,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	1991, 1958, 0, 3041, 0, 0, 0, 0, 0, 0,
	1992, 1993, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 918,
	916, 0, 0, 0, 0, 0, 1957, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 138, 138, 0, 138,
	0, 0, 0, 1965, 0, 0, 0, 0, 0, 0,
	3380, 62, 0, 0, 0, 0, 0, 0, 0, 3383,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3912, 3913, 0, 0, 1040,
	0, 0, 138, 0, 0, 0, 142, 197, 0, 143,
	1040, 0, 0, 1094, 163, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 1981, 1760, 1117, 1121, 1123, 1125, 1127, 1128, 1130,
	0, 1135, 1131, 1132, 1133, 1134, 0, 1112, 1113, 1114,
	1115, 1092, 1093, 1118, 0, 1095, 0, 1097, 1098, 1099,
	1100, 1096, 1101, 1102, 1103, 1104, 1105, 1108, 1110, 1106,
	1107, 1116, 3195, 0, 0, 0, 0, 0, 0, 1120,
	1122, 1124, 1126, 1129, 0, 135, 45, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 1988, 0, 1948, 1950, 1947, 1949, 1262, 1944, 0,
	139, 140, 0, 1969, 141, 0, 0, 0, 1111, 0,
	0, 0, 0, 0, 1975, 0, 0, 0, 0, 0,
	0, 0, 1960, 0, 1943, 0, 1991, 1958, 0, 0,
	0, 0, 0, 0, 1963, 1997, 1992, 1993, 1964, 1966,
	1968, 0, 1970, 1971, 1972, 1976, 1977, 1978, 1980, 1983,
	1984, 1985, 0, 0, 0, 0, 0, 0, 0, 1973,
	1982, 1974, 1957, 0, 0, 0, 0, 0, 0, 0,
	0, 1952, 0, 0, 0, 0, 0, 3564, 3565, 1965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1756,
	0, 0, 0, 0, 0, 1989, 1753, 0, 0, 0,
	1755, 1752, 1754, 1758, 1759, 0, 0, 0, 1757, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1945, 1946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1986, 0, 0, 0, 0, 0, 0, 1981, 0, 2630,
	2631, 0, 0, 0, 0, 0, 0, 1962, 0, 0,
	0, 0, 0, 0, 1961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1979, 3297,
	0, 0, 0, 0, 0, 0, 3299, 1967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1995, 1994, 0, 0, 0, 0, 0, 0, 0, 1948,
	2791, 1947, 0, 0, 2790, 0, 0, 3314, 0, 1969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1975, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1763, 1764, 1765, 1766, 1767, 1768, 1761, 1762,
	1963, 1997, 0, 1954, 1964, 1966, 1968, 0, 1970, 1971,
	1972, 1976, 1977, 1978, 1980, 1983, 1984, 1985, 0, 0,
	0, 0, 0, 0, 0, 1973, 1982, 1974, 0, 0,
	0, 0, 0, 1119, 0, 1109, 0, 1952, 0, 0,
	2470, 0, 0, 0, 0, 1990, 0, 0, 1996, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1989, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1945, 1946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2020, 1986, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 1833,
	0, 0, 0, 1962, 0, 0, 0, 0, 0, 0,
	1961, 0, 1109, 1833, 0, 0, 3462, 0, 0, 3464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1979, 0, 3470, 0, 1094, 0,
	0, 0, 1084, 1967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1995, 1994, 1117, 1121,
	1123, 1125, 1127, 1128, 1130, 0, 1135, 1131, 1132, 1133,
	1134, 0, 1112, 1113, 1114, 1115, 1092, 1093, 1118, 0,
	1095, 0, 1097, 1098, 1099, 1100, 1096, 1101, 1102, 1103,
	1104, 1105, 1108, 1110, 1106, 1107, 1116, 0, 0, 0,
	0, 0, 0, 0, 1120, 1122, 1124, 1126, 1129, 1954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	0, 1990, 0, 0, 1996, 1117, 1121, 1123, 1125, 1127,
	1128, 1130, 0, 1135, 1131, 1132, 1133, 1134, 0, 1112,
	1113, 1114, 1115, 1092, 1093, 1118, 0, 1095, 0, 1097,
	1098, 1099, 1100, 1096, 1101, 1102, 1103, 1104, 1105, 1108,
	1110, 1106, 1107, 1116, 708, 707, 714, 704, 0, 0,
	0, 1120, 1122, 1124, 1126, 1129, 711, 712, 0, 713,
	717, 0, 0, 698, 0, 0, 0, 138, 708, 707,
	714, 704, 0, 722, 0, 0, 0, 138, 0, 0,
	711, 712, 0, 713, 717, 0, 0, 698, 0, 0,
	1111, 0, 0, 708, 707, 714, 704, 722, 0, 0,
	0, 0, 0, 1988, 0, 711, 712, 0, 713, 717,
	200, 0, 698, 0, 0, 0, 0, 0, 726, 0,
	0, 728, 722, 0, 0, 0, 727, 0, 0, 0,
	0, 0, 3548, 0, 0, 0, 0, 0, 1991, 0,
	0, 0, 726, 0, 0, 728, 0, 0, 0, 0,
	727, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1965, 0, 0, 0, 0, 0, 0, 0, 0,
	2020, 2020, 2020, 2020, 2020, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2020, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1981,
	0, 0, 0, 0, 699, 701, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 0, 0, 1119, 1281,
	0, 0, 0, 0, 0, 0, 0, 710, 699, 701,
	700, 0, 0, 0, 725, 0, 0, 0, 0, 706,
	0, 703, 0, 138, 0, 693, 0, 0, 138, 0,
	0, 710, 0, 699, 701, 700, 0, 0, 725, 0,
	0, 0, 0, 0, 706, 703, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 710, 0, 0, 0,
	138, 1969, 0, 725, 0, 0, 0, 3808, 0, 0,
	703, 0, 1975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1988, 1963, 1997, 0, 1119, 1964, 1966, 1968, 0,
	1970, 1971, 1972, 1976, 1977, 1978, 1980, 1983, 1984, 1985,
	0, 0, 0, 0, 0, 0, 0, 1973, 1982, 1974,
	0, 0, 0, 0, 0, 0, 1991, 0, 0, 1988,
	0, 0, 0, 705, 709, 715, 0, 716, 718, 0,
	0, 719, 720, 721, 0, 0, 723, 724, 3879, 0,
	0, 0, 0, 1989, 0, 0, 0, 705, 709, 715,
	0, 716, 718, 0, 1991, 719, 720, 721, 0, 3718,
	723, 724, 0, 0, 0, 0, 0, 0, 0, 1965,
	0, 0, 705, 709, 715, 0, 716, 718, 0, 0,
	719, 720, 721, 0, 0, 723, 724, 0, 1986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1962, 0, 1965, 3879, 0,
	0, 0, 1961, 0, 0, 0, 0, 1040, 0, 138,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 2020, 0, 0, 0, 0, 1979, 1981, 0, 0,
	0, 0, 0, 0, 0, 1967, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 3879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3689, 0, 0, 0, 1981, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3985, 0, 0, 0, 702, 0, 0, 1969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 0, 0, 0, 0, 0, 0, 0,
	1963, 1997, 0, 3552, 1964, 1966, 1968, 1969, 1970, 1971,
	1972, 1976, 1977, 1978, 1980, 1983, 1984, 1985, 1975, 0,
	0, 0, 0, 0, 0, 1973, 1982, 1974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1963, 1997,
	0, 0, 1964, 1966, 1968, 0, 1970, 1971, 1972, 1976,
	1977, 1978, 1980, 1983, 1984, 1985, 0, 0, 0, 0,
	0, 1989, 0, 1973, 1982, 1974, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1989,
	0, 0, 0, 0, 0, 0, 1986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1962, 0, 0, 0, 0, 0, 0,
	1961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1979, 0, 0, 0, 0, 0,
	0, 1962, 0, 1967, 0, 0, 0, 0, 1961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1979, 0, 0, 0, 0, 0, 0, 0,
	0, 1967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 797, 0, 0,
	0, 0, 0, 0, 0, 0, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 750,
	2020, 3556, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 788, 554, 505, 422, 374, 572,
	571, 0, 0, 855, 863, 0, 0, 0, 0, 3556,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	778, 832, 831, 765, 775, 0, 0, 303, 223, 500,
	620, 502, 501, 766, 0, 767, 771, 774, 770, 768,
	769, 0, 847, 0, 0, 0, 0, 0, 0, 734,
	746, 0, 751, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 744, 0, 0,
	0, 138, 798, 0, 745, 0, 0, 793, 772, 776,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	773, 796, 800, 324, 869, 794, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 870, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 791, 0, 617, 138, 456, 0,
	0, 853, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 795, 0, 411, 392, 866, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	1784, 1783, 1785, 468, 358, 359, 0, 337, 285, 286,
	636, 851, 388, 582, 615, 616, 507, 0, 865, 846,
	848, 849, 852, 856, 857, 858, 859, 860, 862, 864,
	868, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 867, 542, 519, 545, 460, 522, 521, 0,
	138, 556, 799, 557, 558, 378, 379, 380, 381, 854,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 876, 850,
	875, 877, 878, 874, 879, 880, 861, 755, 0, 806,
	872, 871, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 839, 813, 814, 815,
	752, 816, 810, 811, 753, 812, 840, 804, 836, 837,
	780, 807, 817, 835, 818, 838, 841, 842, 881, 882,
	824, 808, 251, 883, 821, 843, 834, 833, 819, 805,
	844, 845, 787, 782, 822, 823, 809, 827, 828, 829,
	754, 801, 802, 803, 825, 826, 783, 784, 785, 786,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 830, 625, 426, 0,
	626, 0, 413, 431, 420, 797, 637, 503, 504, 638,
	614, 0, 747, 0, 390, 0, 518, 551, 540, 624,
	506, 0, 0, 0, 0, 0, 0, 750, 0, 0,
	0, 330, 1834, 0, 360, 555, 537, 547, 538, 523,
	524, 525, 532, 340, 526, 527, 528, 498, 529, 499,
	530, 531, 788, 554, 505, 422, 374, 572, 571, 0,
	0, 855, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2046, 0, 0, 742, 0, 0, 778, 832,
	831, 765, 775, 0, 0, 303, 223, 500, 620, 502,
	501, 766, 0, 767, 771, 774, 770, 768, 769, 0,
	847, 0, 0, 0, 0, 0, 0, 734, 746, 0,
	751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 743, 744, 0, 0, 0, 0,
	798, 0, 745, 0, 0, 2047, 772, 776, 0, 0,
	0, 0, 293, 428, 446, 304, 417, 459, 309, 425,
	299, 389, 414, 0, 0, 295, 444, 424, 371, 350,
	351, 294, 0, 408, 328, 342, 325, 387, 773, 796,
	800, 324, 869, 794, 454, 297, 0, 453, 386, 440,
	445, 372, 366, 0, 296, 442, 370, 365, 354, 332,
	870, 355, 356, 346, 398, 364, 399, 347, 376, 375,
	377, 0, 0, 0, 0, 0, 482, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 613, 791, 0, 617, 0, 456, 0, 0, 853,
	0, 0, 0, 427, 0, 0, 357, 0, 0, 0,
	795, 0, 411, 392, 866, 0, 0, 409, 362, 441,
	400, 447, 429, 455, 405, 401, 288, 430, 327, 373,
	300, 302, 322, 329, 331, 333, 334, 382, 383, 395,
	416, 432, 433, 434, 326, 310, 410, 311, 344, 312,
	289, 318, 316, 319, 418, 320, 291, 396, 438, 0,
	339, 406, 369, 292, 368, 397, 437, 436, 301, 463,
	469, 470, 559, 0, 475, 641, 642, 643, 484, 0,
	402, 489, 490, 491, 493, 494, 495, 496, 560, 577,
	544, 514, 477, 568, 511, 515, 516, 580, 0, 0,
	0, 468, 358, 359, 0, 337, 285, 286, 636, 851,
	388, 582, 615, 616, 507, 0, 865, 846, 848, 849,
	852, 856, 857, 858, 859, 860, 862, 864, 868, 635,
	0, 561, 576, 639, 575, 632, 394, 0, 415, 573,
	520, 0, 565, 539, 0, 566, 535, 570, 0, 509,
	0, 423, 449, 461, 478, 481, 510, 595, 596, 597,
	290, 480, 599, 600, 601, 602, 603, 604, 605, 598,
	867, 542, 519, 545, 460, 522, 521, 0, 0, 556,
	799, 557, 558, 378, 379, 380, 381, 854, 583, 308,
	479, 404, 0, 543, 0, 0, 0, 0, 0, 0,
	0, 0, 548, 549, 546, 644, 0, 606, 607, 0,
	0, 473, 474, 336, 343, 492, 345, 307, 393, 338,
	458, 352, 0, 485, 550, 486, 609, 612, 610, 611,
	385, 348, 349, 419, 353, 363, 407, 457, 391, 412,
	305, 448, 421, 367, 536, 563, 876, 850, 875, 877,
	878, 874, 879, 880, 861, 755, 0, 806, 872, 871,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 590, 589, 588, 587, 586, 585, 584,
	0, 0, 533, 435, 317, 279, 313, 314, 321, 633,
	630, 439, 634, 0, 287, 513, 361, 0, 403, 335,
	578, 579, 0, 0, 839, 813, 814, 815, 752, 816,
	810, 811, 753, 812, 840, 804, 836, 837, 780, 807,
	817, 835, 818, 838, 841, 842, 881, 882, 824, 808,
	251, 883, 821, 843, 834, 833, 819, 805, 844, 845,
	787, 782, 822, 823, 809, 827, 828, 829, 754, 801,
	802, 803, 825, 826, 783, 784, 785, 786, 0, 0,
	0, 464, 465, 466, 488, 0, 450, 512, 631, 0,
	0, 0, 0, 0, 0, 0, 562, 574, 608, 0,
	618, 619, 621, 623, 830, 625, 426, 0, 626, 0,
	413, 431, 420, 0, 637, 503, 504, 638, 614, 0,
	747, 200, 797, 0, 0, 0, 0, 0, 0, 0,
	0, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 1265,
	554, 505, 422, 374, 572, 571, 0, 0, 855, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 778, 832, 831, 765, 775,
	0, 0, 303, 223, 500, 620, 502, 501, 766, 0,
	767, 771, 774, 770, 768, 769, 0, 847, 0, 0,
	0, 0, 0, 0, 734, 746, 0, 751, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 743, 744, 0, 0, 0, 0, 798, 0, 745,
	0, 0, 793, 772, 776, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 773, 796, 800, 324, 869,
	794, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 870, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 791,
	0, 617, 0, 456, 0, 0, 853, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 795, 0, 411,
	392, 866, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 851, 388, 582, 615,
	616, 507, 0, 865, 846, 848, 849, 852, 856, 857,
	858, 859, 860, 862, 864, 868, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 867, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 799, 557, 558,
	378, 379, 380, 381, 854, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 876, 850, 875, 877, 878, 874, 879,
	880, 861, 755, 0, 806, 872, 871, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 163, 403, 335, 578, 579, 0,
	0, 839, 813, 814, 815, 752, 816, 810, 811, 753,
	812, 840, 804, 836, 837, 780, 807, 817, 835, 818,
	838, 841, 842, 881, 882, 824, 808, 251, 883, 821,
	843, 834, 833, 819, 805, 844, 845, 787, 782, 822,
	823, 809, 827, 828, 829, 754, 801, 802, 803, 825,
	826, 783, 784, 785, 786, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 830, 625, 426, 0, 626, 0, 413, 431, 420,
	797, 637, 503, 504, 638, 614, 0, 747, 0, 390,
	0, 518, 551, 540, 624, 506, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 0, 330, 3984, 0, 360,
	555, 537, 547, 538, 523, 524, 525, 532, 340, 526,
	527, 528, 498, 529, 499, 530, 531, 788, 554, 505,
	422, 374, 572, 571, 0, 0, 855, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 778, 832, 831, 765, 775, 0, 0,
	303, 223, 500, 620, 502, 501, 766, 0, 767, 771,
	774, 770, 768, 769, 0, 847, 0, 0, 0, 0,
	0, 0, 734, 746, 0, 751, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 743,
	744, 0, 0, 0, 0, 798, 0, 745, 0, 0,
	793, 772, 776, 0, 0, 0, 0, 293, 428, 446,
	304, 417, 459, 309, 425, 299, 389, 414, 0, 0,
	295, 444, 424, 371, 350, 351, 294, 0, 408, 328,
	342, 325, 387, 773, 796, 800, 324, 869, 794, 454,
	297, 0, 453, 386, 440, 445, 372, 366, 0, 296,
	442, 370, 365, 354, 332, 870, 355, 356, 346, 398,
	364, 399, 347, 376, 375, 377, 0, 0, 0, 0,
	0, 482, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 613, 791, 0, 617,
	0, 456, 0, 0, 853, 0, 0, 0, 427, 0,
	0, 357, 0, 0, 0, 795, 0, 411, 392, 866,
	0, 0, 409, 362, 441, 400, 447, 429, 455, 405,
	401, 288, 430, 327, 373, 300, 302, 322, 329, 331,
	333, 334, 382, 383, 395, 416, 432, 433, 434, 326,
	310, 410, 311, 344, 312, 289, 318, 316, 319, 418,
	320, 291, 396, 438, 0, 339, 406, 369, 292, 368,
	397, 437, 436, 301, 463, 469, 470, 559, 0, 475,
	641, 642, 643, 484, 0, 402, 489, 490, 491, 493,
	494, 495, 496, 560, 577, 544, 514, 477, 568, 511,
	515, 516, 580, 0, 0, 0, 468, 358, 359, 0,
	337, 285, 286, 636, 851, 388, 582, 615, 616, 507,
	0, 865, 846, 848, 849, 852, 856, 857, 858, 859,
	860, 862, 864, 868, 635, 0, 561, 576, 639, 575,
	632, 394, 0, 415, 573, 520, 0, 565, 539, 0,
	566, 535, 570, 0, 509, 0, 423, 449, 461, 478,
	481, 510, 595, 596, 597, 290, 480, 599, 600, 601,
	602, 603, 604, 605, 598, 867, 542, 519, 545, 460,
	522, 521, 0, 0, 556, 799, 557, 558, 378, 379,
	380, 381, 854, 583, 308, 479, 404, 0, 543, 0,
	0, 0, 0, 0, 0, 0, 0, 548, 549, 546,
	644, 0, 606, 607, 0, 0, 473, 474, 336, 343,
	492, 345, 307, 393, 338, 458, 352, 0, 485, 550,
	486, 609, 612, 610, 611, 385, 348, 349, 419, 353,
	363, 407, 457, 391, 412, 305, 448, 421, 367, 536,
	563, 876, 850, 875, 877, 878, 874, 879, 880, 861,
	755, 0, 806, 872, 871, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 590, 589,
	588, 587, 586, 585, 584, 0, 0, 533, 435, 317,
	279, 313, 314, 321, 633, 630, 439, 634, 0, 287,
	513, 361, 0, 403, 335, 578, 579, 0, 0, 839,
	813, 814, 815, 752, 816, 810, 811, 753, 812, 840,
	804, 836, 837, 780, 807, 817, 835, 818, 838, 841,
	842, 881, 882, 824, 808, 251, 883, 821, 843, 834,
	833, 819, 805, 844, 845, 787, 782, 822, 823, 809,
	827, 828, 829, 754, 801, 802, 803, 825, 826, 783,
	784, 785, 786, 0, 0, 0, 464, 465, 466, 488,
	0, 450, 512, 631, 0, 0, 0, 0, 0, 0,
	0, 562, 574, 608, 0, 618, 619, 621, 623, 830,
	625, 426, 0, 626, 0, 413, 431, 420, 797, 637,
	503, 504, 638, 614, 0, 747, 0, 390, 0, 518,
	551, 540, 624, 506, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 330, 0, 0, 360, 555, 537,
	547, 538, 523, 524, 525, 532, 340, 526, 527, 528,
	498, 529, 499, 530, 531, 788, 554, 505, 422, 374,
	572, 571, 0, 0, 855, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 778, 832, 831, 765, 775, 0, 0, 303, 223,
	500, 620, 502, 501, 766, 0, 767, 771, 774, 770,
	768, 769, 0, 847, 0, 0, 0, 0, 0, 0,
	734, 746, 0, 751, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 744, 0,
	0, 0, 0, 798, 0, 745, 0, 0, 793, 772,
	776, 0, 0, 0, 0, 293, 428, 446, 304, 417,
	459, 309, 425, 299, 389, 414, 0, 0, 295, 444,
	424, 371, 350, 351, 294, 0, 408, 328, 342, 325,
	387, 773, 796, 800, 324, 869, 794, 454, 297, 0,
	453, 386, 440, 445, 372, 366, 0, 296, 442, 370,
	365, 354, 332, 870, 355, 356, 346, 398, 364, 399,
	347, 376, 375, 377, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 791, 0, 617, 0, 456,
	0, 0, 853, 0, 0, 0, 427, 0, 0, 357,
	0, 0, 0, 795, 0, 411, 392, 866, 3880, 0,
	409, 362, 441, 400, 447, 429, 455, 405, 401, 288,
	430, 327, 373, 300, 302, 322, 329, 331, 333, 334,
	382, 383, 395, 416, 432, 433, 434, 326, 310, 410,
	311, 344, 312, 289, 318, 316, 319, 418, 320, 291,
	396, 438, 0, 339, 406, 369, 292, 368, 397, 437,
	436, 301, 463, 469, 470, 559, 0, 475, 641, 642,
	643, 484, 0, 402, 489, 490, 491, 493, 494, 495,
	496, 560, 577, 544, 514, 477, 568, 511, 515, 516,
	580, 0, 0, 0, 468, 358, 359, 0, 337, 285,
	286, 636, 851, 388, 582, 615, 616, 507, 0, 865,
	846, 848, 849, 852, 856, 857, 858, 859, 860, 862,
	864, 868, 635, 0, 561, 576, 639, 575, 632, 394,
	0, 415, 573, 520, 0, 565, 539, 0, 566, 535,
	570, 0, 509, 0, 423, 449, 461, 478, 481, 510,
	595, 596, 597, 290, 480, 599, 600, 601, 602, 603,
	604, 605, 598, 867, 542, 519, 545, 460, 522, 521,
	0, 0, 556, 799, 557, 558, 378, 379, 380, 381,
	854, 583, 308, 479, 404, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 549, 546, 644, 0,
	606, 607, 0, 0, 473, 474, 336, 343, 492, 345,
	307, 393, 338, 458, 352, 0, 485, 550, 486, 609,
	612, 610, 611, 385, 348, 349, 419, 353, 363, 407,
	457, 391, 412, 305, 448, 421, 367, 536, 563, 876,
	850, 875, 877, 878, 874, 879, 880, 861, 755, 0,
	806, 872, 871, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 590, 589, 588, 587,
	586, 585, 584, 0, 0, 533, 435, 317, 279, 313,
	314, 321, 633, 630, 439, 634, 0, 287, 513, 361,
	0, 403, 335, 578, 579, 0, 0, 839, 813, 814,
	815, 752, 816, 810, 811, 753, 812, 840, 804, 836,
	837, 780, 807, 817, 835, 818, 838, 841, 842, 881,
	882, 824, 808, 251, 883, 821, 843, 834, 833, 819,
	805, 844, 845, 787, 782, 822, 823, 809, 827, 828,
	829, 754, 801, 802, 803, 825, 826, 783, 784, 785,
	786, 0, 0, 0, 464, 465, 466, 488, 0, 450,
	512, 631, 0, 0, 0, 0, 0, 0, 0, 562,
	574, 608, 0, 618, 619, 621, 623, 830, 625, 426,
	0, 626, 0, 413, 431, 420, 797, 637, 503, 504,
	638, 614, 0, 747, 0, 390, 0, 518, 551, 540,
	624, 506, 0, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 330, 1834, 0, 360, 555, 537, 547, 538,
	523, 524, 525, 532, 340, 526, 527, 528, 498, 529,
	499, 530, 531, 788, 554, 505, 422, 374, 572, 571,
	0, 0, 855, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 778,
	832, 831, 765, 775, 0, 0, 303, 223, 500, 620,
	502, 501, 766, 0, 767, 771, 774, 770, 768, 769,
	0, 847, 0, 0, 0, 0, 0, 0, 734, 746,
	0, 751, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 743, 744, 0, 0, 0,
	0, 798, 0, 745, 0, 0, 793, 772, 776, 0,
	0, 0, 0, 293, 428, 446, 304, 417, 459, 309,
	425, 299, 389, 414, 0, 0, 295, 444, 424, 371,
	350, 351, 294, 0, 408, 328, 342, 325, 387, 773,
	796, 800, 324, 869, 794, 454, 297, 0, 453, 386,
	440, 445, 372, 366, 0, 296, 442, 370, 365, 354,
	332, 870, 355, 356, 346, 398, 364, 399, 347, 376,
	375, 377, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 613, 791, 0, 617, 0, 456, 0, 0,
	853, 0, 0, 0, 427, 0, 0, 357, 0, 0,
	0, 795, 0, 411, 392, 866, 0, 0, 409, 362,
	441, 400, 447, 429, 455, 405, 401, 288, 430, 327,
	373, 300, 302, 322, 329, 331, 333, 334, 382, 383,
	395, 416, 432, 433, 434, 326, 310, 410, 311, 344,
	312, 289, 318, 316, 319, 418, 320, 291, 396, 438,
	0, 339, 406, 369, 292, 368, 397, 437, 436, 301,
	463, 469, 470, 559, 0, 475, 641, 642, 643, 484,
	0, 402, 489, 490, 491, 493, 494, 495, 496, 560,
	577, 544, 514, 477, 568, 511, 515, 516, 580, 0,
	0, 0, 468, 358, 359, 0, 337, 285, 286, 636,
	851, 388, 582, 615, 616, 507, 0, 865, 846, 848,
	849, 852, 856, 857, 858, 859, 860, 862, 864, 868,
	635, 0, 561, 576, 639, 575, 632, 394, 0, 415,
	573, 520, 0, 565, 539, 0, 566, 535, 570, 0,
	509, 0, 423, 449, 461, 478, 481, 510, 595, 596,
	597, 290, 480, 599, 600, 601, 602, 603, 604, 605,
	598, 867, 542, 519, 545, 460, 522, 521, 0, 0,
	556, 799, 557, 558, 378, 379, 380, 381, 854, 583,
	308, 479, 404, 0, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 548, 549, 546, 644, 0, 606, 607,
	0, 0, 473, 474, 336, 343, 492, 345, 307, 393,
	338, 458, 352, 0, 485, 550, 486, 609, 612, 610,
	611, 385, 348, 349, 419, 353, 363, 407, 457, 391,
	412, 305, 448, 421, 367, 536, 563, 876, 850, 875,
	877, 878, 874, 879, 880, 861, 755, 0, 806, 872,
	871, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 590, 589, 588, 587, 586, 585,
	584, 0, 0, 533, 435, 317, 279, 313, 314, 321,
	633, 630, 439, 634, 0, 287, 513, 361, 0, 403,
	335, 578, 579, 0, 0, 839, 813, 814, 815, 752,
	816, 810, 811, 753, 812, 840, 804, 836, 837, 780,
	807, 817, 835, 818, 838, 841, 842, 881, 882, 824,
	808, 251, 883, 821, 843, 834, 833, 819, 805, 844,
	845, 787, 782, 822, 823, 809, 827, 828, 829, 754,
	801, 802, 803, 825, 826, 783, 784, 785, 786, 0,
	0, 0, 464, 465, 466, 488, 0, 450, 512, 631,
	0, 0, 0, 0, 0, 0, 0, 562, 574, 608,
	0, 618, 619, 621, 623, 830, 625, 426, 0, 626,
	0, 413, 431, 420, 797, 637, 503, 504, 638, 614,
	0, 747, 0, 390, 0, 518, 551, 540, 624, 506,
	0, 0, 0, 0, 0, 0, 750, 0, 0, 0,
	330, 0, 0, 360, 555, 537, 547, 538, 523, 524,
	525, 532, 340, 526, 527, 528, 498, 529, 499, 530,
	531, 788, 554, 505, 422, 374, 572, 571, 0, 0,
	855, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 778, 832, 831,
	765, 775, 0, 0, 303, 223, 500, 620, 502, 501,
	766, 0, 767, 771, 774, 770, 768, 769, 0, 847,
	0, 0, 0, 0, 0, 0, 734, 746, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 744, 1553, 0, 0, 0, 798,
	0, 745, 0, 0, 793, 772, 776, 0, 0, 0,
	0, 293, 428, 446, 304, 417, 459, 309, 425, 299,
	389, 414, 0, 0, 295, 444, 424, 371, 350, 351,
	294, 0, 408, 328, 342, 325, 387, 773, 796, 800,
	324, 869, 794, 454, 297, 0, 453, 386, 440, 445,
	372, 366, 0, 296, 442, 370, 365, 354, 332, 870,
	355, 356, 346, 398, 364, 399, 347, 376, 375, 377,
	0, 0, 0, 0, 0, 482, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	613, 791, 0, 617, 0, 456, 0, 0, 853, 0,
	0, 0, 427, 0, 0, 357, 0, 0, 0, 795,
	0, 411, 392, 866, 0, 0, 409, 362, 441, 400,
	447, 429, 455, 405, 401, 288, 430, 327, 373, 300,
	302, 322, 329, 331, 333, 334, 382, 383, 395, 416,
	432, 433, 434, 326, 310, 410, 311, 344, 312, 289,
	318, 316, 319, 418, 320, 291, 396, 438, 0, 339,
	406, 369, 292, 368, 397, 437, 436, 301, 463, 469,
	470, 559, 0, 475, 641, 642, 643, 484, 0, 402,
	489, 490, 491, 493, 494, 495, 496, 560, 577, 544,
	514, 477, 568, 511, 515, 516, 580, 0, 0, 0,
	468, 358, 359, 0, 337, 285, 286, 636, 851, 388,
	582, 615, 616, 507, 0, 865, 846, 848, 849, 852,
	856, 857, 858, 859, 860, 862, 864, 868, 635, 0,
	561, 576, 639, 575, 632, 394, 0, 415, 573, 520,
	0, 565, 539, 0, 566, 535, 570, 0, 509, 0,
	423, 449, 461, 478, 481, 510, 595, 596, 597, 290,
	480, 599, 600, 601, 602, 603, 604, 605, 598, 867,
	542, 519, 545, 460, 522, 521, 0, 0, 556, 799,
	557, 558, 378, 379, 380, 381, 854, 583, 308, 479,
	404, 0, 543, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 549, 546, 644, 0, 606, 607, 0, 0,
	473, 474, 336, 343, 492, 345, 307, 393, 338, 458,
	352, 0, 485, 550, 486, 609, 612, 610, 611, 385,
	348, 349, 419, 353, 363, 407, 457, 391, 412, 305,
	448, 421, 367, 536, 563, 876, 850, 875, 877, 878,
	874, 879, 880, 861, 755, 0, 806, 872, 871, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 590, 589, 588, 587, 586, 585, 584, 0,
	0, 533, 435, 317, 279, 313, 314, 321, 633, 630,
	439, 634, 0, 287, 513, 361, 0, 403, 335, 578,
	579, 0, 0, 839, 813, 814, 815, 752, 816, 810,
	811, 753, 812, 840, 804, 836, 837, 780, 807, 817,
	835, 818, 838, 841, 842, 881, 882, 824, 808, 251,
	883, 821, 843, 834, 833, 819, 805, 844, 845, 787,
	782, 822, 823, 809, 827, 828, 829, 754, 801, 802,
	803, 825, 826, 783, 784, 785, 786, 0, 0, 0,
	464, 465, 466, 488, 0, 450, 512, 631, 0, 0,
	0, 0, 0, 0, 0, 562, 574, 608, 0, 618,
	619, 621, 623, 830, 625, 426, 0, 626, 0, 413,
	431, 420, 0, 637, 503, 504, 638, 614, 797, 747,
	0, 2216, 0, 0, 0, 0, 0, 390, 0, 518,
	551, 540, 624, 506, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 330, 0, 0, 360, 555, 537,
	547, 538, 523, 524, 525, 532, 340, 526, 527, 528,
	498, 529, 499, 530, 531, 788, 554, 505, 422, 374,
	572, 571, 0, 0, 855, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 778, 832, 831, 765, 775, 0, 0, 303, 223,
	500, 620, 502, 501, 766, 0, 767, 771, 774, 770,
	768, 769, 0, 847, 0, 0, 0, 0, 0, 0,
	734, 746, 0, 751, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 744, 0,
	0, 0, 0, 798, 0, 745, 0, 0, 793, 772,
	776, 0, 0, 0, 0, 293, 428, 446, 304, 417,
	459, 309, 425, 299, 389, 414, 0, 0, 295, 444,
	424, 371, 350, 351, 294, 0, 408, 328, 342, 325,
	387, 773, 796, 800, 324, 869, 794, 454, 297, 0,
	453, 386, 440, 445, 372, 366, 0, 296, 442, 370,
	365, 354, 332, 870, 355, 356, 346, 398, 364, 399,
	347, 376, 375, 377, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 791, 0, 617, 0, 456,
	0, 0, 853, 0, 0, 0, 427, 0, 0, 357,
	0, 0, 0, 795, 0, 411, 392, 866, 0, 0,
	409, 362, 441, 400, 447, 429, 455, 405, 401, 288,
	430, 327, 373, 300, 302, 322, 329, 331, 333, 334,
	382, 383, 395, 416, 432, 433, 434, 326, 310, 410,
	311, 344, 312, 289, 318, 316, 319, 418, 320, 291,
	396, 438, 0, 339, 406, 369, 292, 368, 397, 437,
	436, 301, 463, 469, 470, 559, 0, 475, 641, 642,
	643, 484, 0, 402, 489, 490, 491, 493, 494, 495,
	496, 560, 577, 544, 514, 477, 568, 511, 515, 516,
	580, 0, 0, 0, 468, 358, 359, 0, 337, 285,
	286, 636, 851, 388, 582, 615, 616, 507, 0, 865,
	846, 848, 849, 852, 856, 857, 858, 859, 860, 862,
	864, 868, 635, 0, 561, 576, 639, 575, 632, 394,
	0, 415, 573, 520, 0, 565, 539, 0, 566, 535,
	570, 0, 509, 0, 423, 449, 461, 478, 481, 510,
	595, 596, 597, 290, 480, 599, 600, 601, 602, 603,
	604, 605, 598, 867, 542, 519, 545, 460, 522, 521,
	0, 0, 556, 799, 557, 558, 378, 379, 380, 381,
	854, 583, 308, 479, 404, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 549, 546, 644, 0,
	606, 607, 0, 0, 473, 474, 336, 343, 492, 345,
	307, 393, 338, 458, 352, 0, 485, 550, 486, 609,
	612, 610, 611, 385, 348, 349, 419, 353, 363, 407,
	457, 391, 412, 305, 448, 421, 367, 536, 563, 876,
	850, 875, 877, 878, 874, 879, 880, 861, 755, 0,
	806, 872, 871, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 590, 589, 588, 587,
	586, 585, 584, 0, 0, 533, 435, 317, 279, 313,
	314, 321, 633, 630, 439, 634, 0, 287, 513, 361,
	0, 403, 335, 578, 579, 0, 0, 839, 813, 814,
	815, 752, 816, 810, 811, 753, 812, 840, 804, 836,
	837, 780, 807, 817, 835, 818, 838, 841, 842, 881,
	882, 824, 808, 251, 883, 821, 843, 834, 833, 819,
	805, 844, 845, 787, 782, 822, 823, 809, 827, 828,
	829, 754, 801, 802, 803, 825, 826, 783, 784, 785,
	786, 0, 0, 0, 464, 465, 466, 488, 0, 450,
	512, 631, 0, 0, 0, 0, 0, 0, 0, 562,
	574, 608, 0, 618, 619, 621, 623, 830, 625, 426,
	0, 626, 0, 413, 431, 420, 797, 637, 503, 504,
	638, 614, 0, 747, 0, 390, 0, 518, 551, 540,
	624, 506, 0, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 330, 0, 0, 360, 555, 537, 547, 538,
	523, 524, 525, 532, 340, 526, 527, 528, 498, 529,
	499, 530, 531, 788, 554, 505, 422, 374, 572, 571,
	0, 0, 855, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 778,
	832, 831, 765, 775, 0, 0, 303, 223, 500, 620,
	502, 501, 766, 0, 767, 771, 774, 770, 768, 769,
	0, 847, 0, 0, 0, 0, 0, 0, 734, 746,
	0, 751, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 743, 744, 1827, 0, 0,
	0, 798, 0, 745, 0, 0, 793, 772, 776, 0,
	0, 0, 0, 293, 428, 446, 304, 417, 459, 309,
	425, 299, 389, 414, 0, 0, 295, 444, 424, 371,
	350, 351, 294, 0, 408, 328, 342, 325, 387, 773,
	796, 800, 324, 869, 794, 454, 297, 0, 453, 386,
	440, 445, 372, 366, 0, 296, 442, 370, 365, 354,
	332, 870, 355, 356, 346, 398, 364, 399, 347, 376,
	375, 377, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 613, 791, 0, 617, 0, 456, 0, 0,
	853, 0, 0, 0, 427, 0, 0, 357, 0, 0,
	0, 795, 0, 411, 392, 866, 0, 0, 409, 362,
	441, 400, 447, 429, 455, 405, 401, 288, 430, 327,
	373, 300, 302, 322, 329, 331, 333, 334, 382, 383,
	395, 416, 432, 433, 434, 326, 310, 410, 311, 344,
	312, 289, 318, 316, 319, 418, 320, 291, 396, 438,
	0, 339, 406, 369, 292, 368, 397, 437, 436, 301,
	463, 469, 470, 559, 0, 475, 641, 642, 643, 484,
	0, 402, 489, 490, 491, 493, 494, 495, 496, 560,
	577, 544, 514, 477, 568, 511, 515, 516, 580, 0,
	0, 0, 468, 358, 359, 0, 337, 285, 286, 636,
	851, 388, 582, 615, 616, 507, 0, 865, 846, 848,
	849, 852, 856, 857, 858, 859, 860, 862, 864, 868,
	635, 0, 561, 576, 639, 575, 632, 394, 0, 415,
	573, 520, 0, 565, 539, 0, 566, 535, 570, 0,
	509, 0, 423, 449, 461, 478, 481, 510, 595, 596,
	597, 290, 480, 599, 600, 601, 602, 603, 604, 605,
	598, 867, 542, 519, 545, 460, 522, 521, 0, 0,
	556, 799, 557, 558, 378, 379, 380, 381, 854, 583,
	308, 479, 404, 0, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 548, 549, 546, 644, 0, 606, 607,
	0, 0, 473, 474, 336, 343, 492, 345, 307, 393,
	338, 458, 352, 0, 485, 550, 486, 609, 612, 610,
	611, 385, 348, 349, 419, 353, 363, 407, 457, 391,
	412, 305, 448, 421, 367, 536, 563, 876, 850, 875,
	877, 878, 874, 879, 880, 861, 755, 0, 806, 872,
	871, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 590, 589, 588, 587, 586, 585,
	584, 0, 0, 533, 435, 317, 279, 313, 314, 321,
	633, 630, 439, 634, 0, 287, 513, 361, 0, 403,
	335, 578, 579, 0, 0, 839, 813, 814, 815, 752,
	816, 810, 811, 753, 812, 840, 804, 836, 837, 780,
	807, 817, 835, 818, 838, 841, 842, 881, 882, 824,
	808, 251, 883, 821, 843, 834, 833, 819, 805, 844,
	845, 787, 782, 822, 823, 809, 827, 828, 829, 754,
	801, 802, 803, 825, 826, 783, 784, 785, 786, 0,
	0, 0, 464, 465, 466, 488, 0, 450, 512, 631,
	0, 0, 0, 0, 0, 0, 0, 562, 574, 608,
	0, 618, 619, 621, 623, 830, 625, 426, 0, 626,
	0, 413, 431, 420, 797, 637, 503, 504, 638, 614,
	0, 747, 0, 390, 0, 518, 551, 540, 624, 506,
	0, 0, 0, 0, 0, 0, 750, 0, 0, 0,
	330, 0, 0, 360, 555, 537, 547, 538, 523, 524,
	525, 532, 340, 526, 527, 528, 498, 529, 499, 530,
	531, 788, 554, 505, 422, 374, 572, 571, 0, 0,
	855, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 778, 832, 831,
	765, 775, 0, 0, 303, 223, 500, 620, 502, 501,
	766, 0, 767, 771, 774, 770, 768, 769, 0, 847,
	0, 0, 0, 0, 0, 0, 734, 746, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 744, 0, 0, 0, 0, 798,
	0, 745, 0, 0, 793, 772, 776, 0, 0, 0,
	0, 293, 428, 446, 304, 417, 459, 309, 425, 299,
	389, 414, 0, 0, 295, 444, 424, 371, 350, 351,
	294, 0, 408, 328, 342, 325, 387, 773, 796, 800,
	324, 869, 794, 454, 297, 0, 453, 386, 440, 445,
	372, 366, 0, 296, 442, 370, 365, 354, 332, 870,
	355, 356, 346, 398, 364, 399, 347, 376, 375, 377,
	0, 0, 0, 0, 0, 482, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	613, 791, 0, 617, 0, 456, 0, 0, 853, 0,
	0, 0, 427, 0, 0, 357, 0, 0, 0, 795,
	0, 411, 392, 866, 0, 0, 409, 362, 441, 400,
	447, 429, 455, 405, 401, 288, 430, 327, 373, 300,
	302, 322, 329, 331, 333, 334, 382, 383, 395, 416,
	432, 433, 434, 326, 310, 410, 311, 344, 312, 289,
	318, 316, 319, 418, 320, 291, 396, 438, 0, 339,
	406, 369, 292, 368, 397, 437, 436, 301, 463, 469,
	470, 559, 0, 475, 641, 642, 643, 484, 0, 402,
	489, 490, 491, 493, 494, 495, 496, 560, 577, 544,
	514, 477, 568, 511, 515, 516, 580, 0, 0, 0,
	468, 358, 359, 0, 337, 285, 286, 636, 851, 388,
	582, 615, 616, 507, 0, 865, 846, 848, 849, 852,
	856, 857, 858, 859, 860, 862, 864, 868, 635, 0,
	561, 576, 639, 575, 632, 394, 0, 415, 573, 520,
	0, 565, 539, 0, 566, 535, 570, 0, 509, 0,
	423, 449, 461, 478, 481, 510, 595, 596, 597, 290,
	480, 599, 600, 601, 602, 603, 604, 605, 598, 867,
	542, 519, 545, 460, 522, 521, 0, 0, 556, 799,
	557, 558, 378, 379, 380, 381, 854, 583, 308, 479,
	404, 0, 543, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 549, 546, 644, 0, 606, 607, 0, 0,
	473, 474, 336, 343, 492, 345, 307, 393, 338, 458,
	352, 0, 485, 550, 486, 609, 612, 610, 611, 385,
	348, 349, 419, 353, 363, 407, 457, 391, 412, 305,
	448, 421, 367, 536, 563, 876, 850, 875, 877, 878,
	874, 879, 880, 861, 755, 0, 806, 872, 871, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 590, 589, 588, 587, 586, 585, 584, 0,
	0, 533, 435, 317, 279, 313, 314, 321, 633, 630,
	439, 634, 0, 287, 513, 361, 0, 403, 335, 578,
	579, 0, 0, 839, 813, 814, 815, 752, 816, 810,
	811, 753, 812, 840, 804, 836, 837, 780, 807, 817,
	835, 818, 838, 841, 842, 881, 882, 824, 808, 251,
	883, 821, 843, 834, 833, 819, 805, 844, 845, 787,
	782, 822, 823, 809, 827, 828, 829, 754, 801, 802,
	803, 825, 826, 783, 784, 785, 786, 0, 0, 0,
	464, 465, 466, 488, 0, 450, 512, 631, 0, 0,
	0, 0, 0, 0, 0, 562, 574, 608, 0, 618,
	619, 621, 623, 830, 625, 426, 0, 626, 0, 413,
	431, 420, 797, 637, 503, 504, 638, 614, 0, 747,
	0, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 788,
	554, 505, 422, 374, 572, 571, 0, 0, 855, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 778, 832, 831, 765, 775,
	0, 0, 303, 223, 500, 620, 502, 501, 2682, 0,
	2683, 771, 774, 770, 768, 769, 0, 847, 0, 0,
	0, 0, 0, 0, 734, 746, 0, 751, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 743, 744, 0, 0, 0, 0, 798, 0, 745,
	0, 0, 793, 772, 776, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 773, 796, 800, 324, 869,
	794, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 870, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 791,
	0, 617, 0, 456, 0, 0, 853, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 795, 0, 411,
	392, 866, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 851, 388, 582, 615,
	616, 507, 0, 865, 846, 848, 849, 852, 856, 857,
	858, 859, 860, 862, 864, 868, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 867, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 799, 557, 558,
	378, 379, 380, 381, 854, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 876, 850, 875, 877, 878, 874, 879,
	880, 861, 755, 0, 806, 872, 871, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 839, 813, 814, 815, 752, 816, 810, 811, 753,
	812, 840, 804, 836, 837, 780, 807, 817, 835, 818,
	838, 841, 842, 881, 882, 824, 808, 251, 883, 821,
	843, 834, 833, 819, 805, 844, 845, 787, 782, 822,
	823, 809, 827, 828, 829, 754, 801, 802, 803, 825,
	826, 783, 784, 785, 786, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 830, 625, 426, 0, 626, 0, 413, 431, 420,
	797, 637, 503, 504, 638, 614, 0, 747, 0, 390,
	0, 518, 551, 540, 624, 506, 0, 0, 1697, 0,
	0, 0, 750, 0, 0, 0, 330, 0, 0, 360,
	555, 537, 547, 538, 523, 524, 525, 532, 340, 526,
	527, 528, 498, 529, 499, 530, 531, 788, 554, 505,
	422, 374, 572, 571, 0, 0, 855, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 778, 832, 831, 765, 775, 0, 0,
	303, 223, 500, 620, 502, 501, 766, 0, 767, 771,
	774, 770, 768, 769, 0, 847, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 751, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 743,
	744, 0, 0, 0, 0, 798, 0, 745, 0, 0,
	793, 772, 776, 0, 0, 0, 0, 293, 428, 446,
	304, 417, 459, 309, 425, 299, 389, 414, 0, 0,
	295, 444, 424, 371, 350, 351, 294, 0, 408, 328,
	342, 325, 387, 773, 796, 800, 324, 869, 794, 454,
	297, 0, 453, 386, 440, 445, 372, 366, 0, 296,
	442, 370, 365, 354, 332, 870, 355, 356, 346, 398,
	364, 399, 347, 376, 375, 377, 0, 0, 0, 0,
	0, 482, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 613, 791, 0, 617,
	0, 456, 0, 0, 853, 0, 0, 0, 427, 0,
	0, 357, 0, 0, 0, 795, 0, 411, 392, 866,
	0, 0, 409, 362, 441, 400, 447, 429, 455, 405,
	401, 288, 430, 327, 373, 300, 302, 322, 329, 331,
	333, 334, 382, 383, 395, 416, 432, 433, 434, 326,
	310, 410, 311, 344, 312, 289, 318, 316, 319, 418,
	320, 291, 396, 438, 0, 339, 406, 369, 292, 368,
	397, 437, 436, 301, 463, 1698, 1699, 559, 0, 475,
	641, 642, 643, 484, 0, 402, 489, 490, 491, 493,
	494, 495, 496, 560, 577, 544, 514, 477, 568, 511,
	515, 516, 580, 0, 0, 0, 468, 358, 359, 0,
	337, 285, 286, 636, 851, 388, 582, 615, 616, 507,
	0, 865, 846, 848, 849, 852, 856, 857, 858, 859,
	860, 862, 864, 868, 635, 0, 561, 576, 639, 575,
	632, 394, 0, 415, 573, 520, 0, 565, 539, 0,
	566, 535, 570, 0, 509, 0, 423, 449, 461, 478,
	481, 510, 595, 596, 597, 290, 480, 599, 600, 601,
	602, 603, 604, 605, 598, 867, 542, 519, 545, 460,
	522, 521, 0, 0, 556, 799, 557, 558, 378, 379,
	380, 381, 854, 583, 308, 479, 404, 0, 543, 0,
	0, 0, 0, 0, 0, 0, 0, 548, 549, 546,
	644, 0, 606, 607, 0, 0, 473, 474, 336, 343,
	492, 345, 307, 393, 338, 458, 352, 0, 485, 550,
	486, 609, 612, 610, 611, 385, 348, 349, 419, 353,
	363, 407, 457, 391, 412, 305, 448, 421, 367, 536,
	563, 876, 850, 875, 877, 878, 874, 879, 880, 861,
	755, 0, 806, 872, 871, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 590, 589,
	588, 587, 586, 585, 584, 0, 0, 533, 435, 317,
	279, 313, 314, 321, 633, 630, 439, 634, 0, 287,
	513, 361, 0, 403, 335, 578, 579, 0, 0, 839,
	813, 814, 815, 752, 816, 810, 811, 753, 812, 840,
	804, 836, 837, 780, 807, 817, 835, 818, 838, 841,
	842, 881, 882, 824, 808, 251, 883, 821, 843, 834,
	833, 819, 805, 844, 845, 787, 782, 822, 823, 809,
	827, 828, 829, 754, 801, 802, 803, 825, 826, 783,
	784, 785, 786, 0, 0, 0, 464, 465, 466, 488,
	0, 450, 512, 631, 0, 0, 0, 0, 0, 0,
	0, 562, 574, 608, 0, 618, 619, 621, 623, 830,
	625, 426, 0, 626, 0, 413, 431, 420, 797, 637,
	503, 504, 638, 614, 0, 747, 0, 390, 0, 518,
	551, 540, 624, 506, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 330, 0, 0, 360, 555, 537,
	547, 538, 523, 524, 525, 532, 340, 526, 527, 528,
	498, 529, 499, 530, 531, 788, 554, 505, 422, 374,
	572, 571, 0, 0, 855, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 778, 832, 831, 765, 775, 0, 0, 303, 223,
	500, 620, 502, 501, 766, 0, 767, 771, 774, 770,
	768, 769, 0, 847, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 751, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 744, 0,
	0, 0, 0, 798, 0, 745, 0, 0, 793, 772,
	776, 0, 0, 0, 0, 293, 428, 446, 304, 417,
	459, 309, 425, 299, 389, 414, 0, 0, 295, 444,
	424, 371, 350, 351, 294, 0, 408, 328, 342, 325,
	387, 773, 796, 800, 324, 869, 794, 454, 297, 0,
	453, 386, 440, 445, 372, 366, 0, 296, 442, 370,
	365, 354, 332, 870, 355, 356, 346, 398, 364, 399,
	347, 376, 375, 377, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 791, 0, 617, 0, 456,
	0, 0, 853, 0, 0, 0, 427, 0, 0, 357,
	0, 0, 0, 795, 0, 411, 392, 866, 0, 0,
	409, 362, 441, 400, 447, 429, 455, 405, 401, 288,
	430, 327, 373, 300, 302, 322, 329, 331, 333, 334,
	382, 383, 395, 416, 432, 433, 434, 326, 310, 410,
	311, 344, 312, 289, 318, 316, 319, 418, 320, 291,
	396, 438, 0, 339, 406, 369, 292, 368, 397, 437,
	436, 301, 463, 469, 470, 559, 0, 475, 641, 642,
	643, 484, 0, 402, 489, 490, 491, 493, 494, 495,
	496, 560, 577, 544, 514, 477, 568, 511, 515, 516,
	580, 0, 0, 0, 468, 358, 359, 0, 337, 285,
	286, 636, 851, 388, 582, 615, 616, 507, 0, 865,
	846, 848, 849, 852, 856, 857, 858, 859, 860, 862,
	864, 868, 635, 0, 561, 576, 639, 575, 632, 394,
	0, 415, 573, 520, 0, 565, 539, 0, 566, 535,
	570, 0, 509, 0, 423, 449, 461, 478, 481, 510,
	595, 596, 597, 290, 480, 599, 600, 601, 602, 603,
	604, 605, 598, 867, 542, 519, 545, 460, 522, 521,
	0, 0, 556, 799, 557, 558, 378, 379, 380, 381,
	854, 583, 308, 479, 404, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 549, 546, 644, 0,
	606, 607, 0, 0, 473, 474, 336, 343, 492, 345,
	307, 393, 338, 458, 352, 0, 485, 550, 486, 609,
	612, 610, 611, 385, 348, 349, 419, 353, 363, 407,
	457, 391, 412, 305, 448, 421, 367, 536, 563, 876,
	850, 875, 877, 878, 874, 879, 880, 861, 755, 0,
	806, 872, 871, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 590, 589, 588, 587,
	586, 585, 584, 0, 0, 533, 435, 317, 279, 313,
	314, 321, 633, 630, 439, 634, 0, 287, 513, 361,
	0, 403, 335, 578, 579, 0, 0, 839, 813, 814,
	815, 752, 816, 810, 811, 753, 812, 840, 804, 836,
	837, 780, 807, 817, 835, 818, 838, 841, 842, 881,
	882, 824, 808, 251, 883, 821, 843, 834, 833, 819,
	805, 844, 845, 787, 782, 822, 823, 809, 827, 828,
	829, 754, 801, 802, 803, 825, 826, 783, 784, 785,
	786, 0, 0, 0, 464, 465, 466, 488, 0, 450,
	512, 631, 0, 0, 0, 0, 0, 0, 0, 562,
	574, 608, 0, 618, 619, 621, 623, 830, 625, 426,
	0, 626, 0, 413, 431, 420, 797, 637, 503, 504,
	638, 614, 0, 747, 0, 390, 0, 518, 551, 540,
	624, 506, 0, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 330, 0, 0, 360, 555, 537, 547, 538,
	523, 524, 525, 532, 340, 526, 527, 528, 498, 529,
	499, 530, 531, 788, 554, 505, 422, 374, 572, 571,
	0, 0, 855, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 778,
	832, 831, 765, 775, 0, 0, 303, 223, 500, 620,
	502, 501, 766, 0, 767, 771, 774, 770, 768, 769,
	0, 847, 0, 0, 0, 0, 0, 0, 734, 746,
	0, 751, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 743, 744, 0, 0, 0,
	0, 798, 0, 745, 0, 0, 793, 772, 776, 0,
	0, 0, 0, 293, 428, 446, 304, 417, 459, 309,
	425, 299, 389, 414, 0, 0, 295, 444, 424, 371,
	350, 351, 294, 0, 408, 328, 342, 325, 387, 773,
	796, 800, 324, 869, 794, 454, 297, 0, 453, 386,
	440, 445, 372, 366, 0, 296, 442, 370, 365, 354,
	332, 870, 355, 356, 346, 398, 364, 399, 347, 376,
	375, 377, 0, 0, 0, 0, 0, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 613, 791, 0, 617, 0, 456, 0, 0,
	853, 0, 0, 0, 427, 0, 0, 357, 0, 0,
	0, 795, 0, 411, 392, 866, 0, 0, 409, 362,
	441, 400, 447, 429, 455, 405, 401, 288, 430, 327,
	373, 300, 302, 322, 329, 331, 333, 334, 382, 383,
	395, 416, 432, 433, 434, 326, 310, 410, 311, 344,
	312, 289, 318, 316, 319, 418, 320, 291, 396, 438,
	0, 339, 406, 369, 292, 368, 397, 437, 436, 301,
	463, 469, 470, 559, 0, 475, 641, 642, 643, 484,
	0, 402, 489, 490, 491, 493, 494, 495, 496, 560,
	577, 544, 514, 477, 568, 511, 515, 516, 580, 0,
	0, 0, 468, 358, 359, 0, 337, 285, 286, 636,
	851, 388, 582, 615, 616, 507, 0, 865, 846, 848,
	849, 852, 856, 857, 858, 859, 860, 862, 864, 868,
	635, 0, 561, 576, 639, 575, 632, 394, 0, 415,
	573, 520, 0, 565, 539, 0, 566, 535, 570, 0,
	509, 0, 423, 449, 461, 478, 481, 510, 595, 596,
	597, 290, 480, 599, 600, 601, 602, 603, 604, 605,
	598, 867, 542, 519, 545, 460, 522, 521, 0, 0,
	556, 799, 557, 558, 378, 379, 380, 381, 854, 583,
	308, 479, 404, 0, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 548, 549, 546, 644, 0, 606, 607,
	0, 0, 473, 474, 336, 343, 492, 345, 307, 393,
	338, 458, 352, 0, 485, 550, 486, 609, 612, 610,
	611, 385, 348, 349, 419, 353, 363, 407, 457, 391,
	412, 305, 448, 421, 367, 536, 563, 876, 850, 875,
	877, 878, 874, 879, 880, 861, 755, 0, 806, 872,
	871, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 590, 589, 588, 587, 586, 585,
	584, 0, 0, 533, 435, 317, 279, 313, 314, 321,
	633, 630, 439, 634, 0, 287, 513, 361, 0, 403,
	335, 578, 579, 0, 0, 839, 813, 814, 815, 752,
	816, 810, 811, 753, 812, 840, 804, 836, 837, 780,
	807, 817, 835, 818, 838, 841, 842, 881, 882, 824,
	808, 251, 883, 821, 843, 834, 833, 819, 805, 844,
	845, 787, 782, 822, 823, 809, 827, 828, 829, 754,
	801, 802, 803, 825, 826, 783, 784, 785, 786, 0,
	0, 0, 464, 465, 466, 488, 0, 450, 512, 631,
	0, 0, 0, 0, 0, 0, 0, 562, 574, 608,
	0, 618, 619, 621, 623, 830, 625, 426, 0, 626,
	0, 413, 431, 420, 0, 637, 503, 504, 638, 614,
	0, 747, 200, 61, 191, 162, 0, 0, 0, 0,
	0, 0, 390, 0, 518, 551, 540, 624, 506, 0,
	192, 0, 0, 0, 0, 0, 0, 183, 0, 330,
	0, 193, 360, 555, 537, 547, 538, 523, 524, 525,
	532, 340, 526, 527, 528, 498, 529, 499, 530, 531,
	136, 554, 505, 422, 374, 572, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 500, 620, 502, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 428, 446, 304, 417, 459, 309, 425, 299, 389,
	414, 0, 0, 295, 444, 424, 371, 350, 351, 294,
	0, 408, 328, 342, 325, 387, 0, 443, 471, 324,
	462, 0, 454, 297, 0, 453, 386, 440, 445, 372,
	366, 0, 296, 442, 370, 365, 354, 332, 487, 355,
	356, 346, 398, 364, 399, 347, 376, 375, 377, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 0, 0,
	0, 0, 161, 189, 198, 190, 120, 0, 0, 613,
	0, 0, 617, 0, 456, 0, 0, 215, 0, 0,
	0, 427, 0, 0, 357, 188, 182, 181, 472, 0,
	411, 392, 227, 0, 0, 409, 362, 441, 400, 447,
	429, 455, 405, 401, 288, 430, 327, 373, 300, 302,
	322, 329, 331, 333, 334, 382, 383, 395, 416, 432,
	433, 434, 326, 310, 410, 311, 344, 312, 289, 318,
	316, 319, 418, 320, 291, 396, 438, 0, 339, 406,
	369, 292, 368, 397, 437, 436, 301, 463, 469, 470,
	559, 0, 475, 592, 593, 594, 484, 0, 402, 489,
	490, 491, 493, 494, 495, 496, 560, 577, 544, 514,
	477, 568, 511, 515, 516, 580, 0, 0, 0, 468,
	358, 359, 0, 337, 285, 286, 451, 323, 388, 582,
	615, 616, 507, 0, 569, 508, 517, 315, 541, 553,
	552, 384, 467, 218, 564, 567, 497, 228, 0, 561,
	576, 534, 575, 229, 394, 0, 415, 573, 520, 0,
	565, 539, 0, 566, 535, 570, 0, 509, 0, 423,
	449, 461, 478, 481, 510, 595, 596, 597, 290, 480,
	599, 600, 601, 602, 603, 604, 605, 598, 452, 542,
	519, 545, 460, 522, 521, 0, 0, 556, 476, 557,
	558, 378, 379, 380, 381, 341, 583, 308, 479, 404,
	134, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 549, 546, 226, 0, 606, 607, 0, 0, 473,
	474, 336, 343, 492, 345, 307, 393, 338, 458, 352,
	0, 485, 550, 486, 609, 612, 610, 611, 385, 348,
	349, 419, 353, 363, 407, 457, 391, 412, 305, 448,
	421, 367, 536, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 590, 589, 588, 587, 586, 585, 584, 0, 0,
	533, 435, 317, 279, 313, 314, 321, 233, 298, 439,
	234, 0, 287, 513, 361, 163, 403, 335, 578, 579,
	58, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 581, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 464,
	465, 466, 488, 0, 450, 512, 230, 45, 216, 219,
	221, 220, 0, 59, 562, 574, 608, 5, 618, 619,
	621, 623, 622, 625, 426, 0, 626, 200, 413, 431,
	420, 139, 231, 503, 504, 232, 614, 390, 0, 518,
	551, 540, 624, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 555, 537,
	547, 538, 523, 524, 525, 532, 340, 526, 527, 528,
	498, 529, 499, 530, 531, 136, 554, 505, 422, 374,
	572, 571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	500, 620, 502, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 2365, 2368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 428, 446, 304, 417,
	459, 309, 425, 299, 389, 414, 0, 0, 295, 444,
	424, 371, 350, 351, 294, 0, 408, 328, 342, 325,
	387, 0, 443, 471, 324, 462, 0, 454, 297, 0,
	453, 386, 440, 445, 372, 366, 0, 296, 442, 370,
	365, 354, 332, 487, 355, 356, 346, 398, 364, 399,
	347, 376, 375, 377, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 617, 2369, 456,
	0, 0, 0, 2364, 0, 2363, 427, 2361, 2366, 357,
	0, 0, 0, 472, 0, 411, 392, 640, 0, 0,
	409, 362, 441, 400, 447, 429, 455, 405, 401, 288,
	430, 327, 373, 300, 302, 322, 329, 331, 333, 334,
	382, 383, 395, 416, 432, 433, 434, 326, 310, 410,
	311, 344, 312, 289, 318, 316, 319, 418, 320, 291,
	396, 438, 2367, 339, 406, 369, 292, 368, 397, 437,
	436, 301, 463, 469, 470, 559, 0, 475, 641, 642,
	643, 484, 0, 402, 489, 490, 491, 493, 494, 495,
	496, 560, 577, 544, 514, 477, 568, 511, 515, 516,
	580, 0, 0, 0, 468, 358, 359, 0, 337, 285,
	286, 636, 323, 388, 582, 615, 616, 507, 0, 569,
	508, 517, 315, 541, 553, 552, 384, 467, 0, 564,
	567, 497, 635, 0, 561, 576, 639, 575, 632, 394,
	0, 415, 573, 520, 0, 565, 539, 0, 566, 535,
	570, 0, 509, 0, 423, 449, 461, 478, 481, 510,
	595, 596, 597, 290, 480, 599, 600, 601, 602, 603,
	604, 605, 598, 452, 542, 519, 545, 460, 522, 521,
	0, 0, 556, 476, 557, 558, 378, 379, 380, 381,
	341, 583, 308, 479, 404, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 549, 546, 644, 0,
	606, 607, 0, 0, 473, 474, 336, 343, 492, 345,
	307, 393, 338, 458, 352, 0, 485, 550, 486, 609,
	612, 610, 611, 385, 348, 349, 419, 353, 363, 407,
	457, 391, 412, 305, 448, 421, 367, 536, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 590, 589, 588, 587,
	586, 585, 584, 0, 0, 533, 435, 317, 279, 313,
	314, 321, 633, 630, 439, 634, 0, 287, 513, 361,
	163, 403, 335, 578, 579, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 581, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 464, 465, 466, 488, 0, 450,
	512, 631, 0, 0, 0, 0, 0, 0, 0, 562,
	574, 608, 0, 618, 619, 621, 623, 622, 625, 426,
	0, 626, 0, 413, 431, 420, 0, 637, 503, 504,
	638, 614, 390, 0, 518, 551, 540, 624, 506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 555, 537, 547, 538, 523, 524, 525,
	532, 340, 526, 527, 528, 498, 529, 499, 530, 531,
	0, 554, 505, 422, 374, 572, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 0, 222, 0, 0, 765,
	775, 0, 0, 303, 223, 500, 620, 502, 501, 766,
	0, 767, 771, 774, 770, 768, 769, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 0, 0,
	293, 428, 446, 304, 417, 459, 309, 425, 299, 389,
	414, 0, 0, 295, 444, 424, 371, 350, 351, 294,
	0, 408, 328, 342, 325, 387, 773, 443, 471, 324,
	462, 0, 454, 297, 0, 453, 386, 440, 445, 372,
	366, 0, 296, 442, 370, 365, 354, 332, 487, 355,
	356, 346, 398, 364, 399, 347, 376, 375, 377, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 613,
	0, 0, 617, 0, 456, 0, 0, 0, 0, 0,
	0, 427, 0, 0, 357, 0, 0, 0, 472, 0,
	411, 392, 640, 0, 0, 409, 362, 441, 400, 447,
	429, 455, 405, 401, 288, 430, 327, 373, 300, 302,
	322, 329, 331, 333, 334, 382, 383, 395, 416, 432,
	433, 434, 326, 310, 410, 311, 344, 312, 289, 318,
	316, 319, 418, 320, 291, 396, 438, 0, 339, 406,
	369, 292, 368, 397, 437, 436, 301, 463, 469, 470,
	559, 0, 475, 641, 642, 643, 484, 0, 402, 489,
	490, 491, 493, 494, 495, 496, 560, 577, 544, 514,
	477, 568, 511, 515, 516, 580, 0, 0, 0, 468,
	358, 359, 0, 337, 285, 286, 636, 323, 388, 582,
	615, 616, 507, 0, 569, 508, 517, 315, 541, 553,
	552, 384, 467, 0, 564, 567, 497, 635, 0, 561,
	576, 639, 575, 632, 394, 0, 415, 573, 520, 0,
	565, 539, 0, 566, 535, 570, 0, 509, 0, 423,
	449, 461, 478, 481, 510, 595, 596, 597, 290, 480,
	599, 600, 601, 602, 603, 604, 605, 598, 452, 542,
	519, 545, 460, 522, 521, 0, 0, 556, 476, 557,
	558, 378, 379, 380, 381, 341, 583, 308, 479, 404,
	0, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 549, 546, 644, 0, 606, 607, 0, 0, 473,
	474, 336, 343, 492, 345, 307, 393, 338, 458, 352,
	0, 485, 550, 486, 609, 612, 610, 611, 385, 348,
	349, 419, 353, 363, 407, 457, 391, 412, 305, 448,
	421, 367, 536, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 590, 589, 588, 587, 586, 585, 584, 0, 0,
	533, 435, 317, 279, 313, 314, 321, 633, 630, 439,
	634, 0, 287, 513, 361, 0, 403, 335, 578, 579,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 581, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 464,
	465, 466, 488, 0, 450, 512, 631, 0, 0, 0,
	0, 0, 0, 0, 562, 574, 608, 0, 618, 619,
	621, 623, 622, 625, 426, 0, 626, 0, 413, 431,
	420, 0, 637, 503, 504, 638, 614, 200, 61, 191,
	162, 0, 0, 0, 0, 0, 0, 390, 663, 518,
	551, 540, 624, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 555, 537,
	547, 538, 523, 524, 525, 532, 340, 526, 527, 528,
	498, 529, 499, 530, 531, 0, 554, 505, 422, 374,
	572, 571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 0, 0, 0, 0, 0, 0, 669, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	500, 620, 502, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 428, 446, 304, 417,
	459, 309, 425, 299, 389, 414, 0, 0, 295, 444,
	424, 371, 350, 351, 294, 0, 408, 328, 342, 325,
	387, 0, 443, 471, 324, 462, 0, 454, 297, 0,
	453, 386, 440, 445, 372, 366, 0, 296, 442, 370,
	365, 354, 332, 487, 355, 356, 346, 398, 364, 399,
	347, 376, 375, 377, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 667, 668, 0, 613, 0, 0, 617, 0, 456,
	0, 0, 0, 0, 0, 0, 427, 0, 0, 357,
	0, 0, 0, 472, 0, 411, 392, 640, 0, 0,
	409, 362, 441, 400, 447, 429, 455, 405, 401, 288,
	430, 327, 373, 300, 302, 322, 329, 331, 333, 334,
	382, 383, 395, 416, 432, 433, 434, 326, 310, 410,
	311, 344, 312, 289, 318, 316, 319, 418, 320, 291,
	396, 438, 0, 339, 406, 369, 292, 368, 397, 437,
	436, 301, 463, 469, 470, 559, 0, 475, 641, 642,
	643, 484, 0, 402, 489, 490, 491, 493, 494, 495,
	496, 560, 577, 544, 514, 477, 568, 511, 515, 516,
	580, 0, 0, 0, 468, 358, 359, 0, 337, 285,
	286, 636, 323, 388, 582, 615, 616, 507, 0, 569,
	508, 517, 315, 541, 553, 552, 384, 467, 0, 564,
	567, 497, 635, 0, 561, 576, 639, 575, 632, 394,
	0, 415, 573, 520, 0, 565, 539, 0, 566, 535,
	570, 0, 509, 0, 423, 449, 461, 478, 481, 510,
	595, 596, 597, 290, 480, 599, 600, 601, 602, 603,
	604, 605, 598, 452, 542, 519, 545, 460, 522, 521,
	0, 0, 556, 476, 557, 558, 378, 379, 380, 381,
	664, 666, 308, 479, 404, 678, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 549, 546, 644, 0,
	606, 607, 0, 0, 473, 474, 336, 343, 492, 345,
	307, 393, 338, 458, 352, 0, 485, 550, 486, 609,
	612, 610, 611, 385, 348, 349, 419, 353, 363, 407,
	457, 391, 412, 305, 448, 421, 367, 536, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 590, 589, 588, 587,
	586, 585, 584, 0, 0, 533, 435, 317, 279, 313,
	314, 321, 633, 630, 439, 634, 0, 287, 513, 361,
	163, 403, 335, 578, 579, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 581, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 464, 465, 466, 488, 0, 450,
	512, 631, 0, 0, 0, 0, 0, 0, 0, 562,
	574, 608, 0, 618, 619, 621, 623, 622, 625, 426,
	0, 626, 0, 413, 431, 420, 0, 637, 503, 504,
	638, 614, 390, 0, 518, 551, 540, 624, 506, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 555, 537, 547, 538, 523, 524, 525,
	532, 340, 526, 527, 528, 498, 529, 499, 530, 531,
	0, 554, 505, 422, 374, 572, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 500, 620, 502, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	293, 428, 446, 304, 417, 459, 309, 425, 299, 389,
	414, 0, 0, 2525, 2528, 2529, 2530, 2531, 2532, 2533,
	0, 2538, 2534, 2535, 2536, 2537, 0, 2520, 2521, 2522,
	2523, 1092, 2504, 2526, 0, 2505, 386, 2506, 2507, 2508,
	2509, 1096, 2510, 2511, 2512, 2513, 2514, 2517, 2518, 2515,
	2516, 2524, 398, 364, 399, 347, 376, 375, 377, 1120,
	1122, 1124, 1126, 1129, 482, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 613,
	0, 0, 617, 0, 456, 0, 0, 0, 0, 0,
	0, 427, 0, 0, 357, 0, 0, 0, 2519, 0,
	411, 392, 640, 0, 0, 409, 362, 441, 400, 447,
	429, 455, 405, 401, 288, 430, 327, 373, 300, 302,
	322, 329, 331, 333, 334, 382, 383, 395, 416, 432,
	433, 434, 326, 310, 410, 311, 344, 312, 289, 318,
	316, 319, 418, 320, 291, 396, 438, 0, 339, 406,
	369, 292, 368, 397, 437, 436, 301, 463, 469, 470,
	559, 0, 475, 641, 642, 643, 484, 0, 402, 489,
	490, 491, 493, 494, 495, 496, 560, 577, 544, 514,
	477, 568, 511, 515, 516, 580, 0, 0, 0, 468,
	358, 359, 0, 337, 285, 286, 636, 323, 388, 582,
	615, 616, 507, 0, 569, 508, 517, 315, 541, 553,
	552, 384, 467, 0, 564, 567, 497, 635, 0, 561,
	576, 639, 575, 632, 394, 0, 415, 573, 520, 0,
	565, 539, 0, 566, 535, 570, 0, 509, 0, 423,
	449, 461, 478, 481, 510, 595, 596, 597, 290, 480,
	599, 600, 601, 602, 603, 604, 605, 598, 452, 542,
	519, 545, 460, 522, 521, 0, 0, 556, 476, 557,
	558, 378, 379, 380, 381, 341, 583, 308, 479, 404,
	0, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 549, 546, 644, 0, 606, 607, 0, 0, 473,
	474, 336, 343, 492, 345, 307, 393, 338, 458, 352,
	0, 485, 550, 486, 609, 612, 610, 611, 385, 348,
	349, 419, 353, 363, 407, 457, 391, 412, 305, 448,
	421, 367, 536, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 590, 589, 588, 587, 586, 585, 584, 0, 0,
	533, 435, 317, 279, 313, 314, 321, 633, 630, 439,
	634, 0, 287, 2527, 361, 0, 403, 335, 578, 579,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 581, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 464,
	465, 466, 488, 0, 450, 512, 631, 0, 0, 0,
	0, 0, 0, 0, 562, 574, 608, 0, 618, 619,
	621, 623, 622, 625, 426, 0, 626, 0, 413, 431,
	420, 0, 637, 503, 504, 638, 614, 390, 0, 518,
	551, 540, 624, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 555, 537,
	547, 538, 523, 524, 525, 532, 340, 526, 527, 528,
	498, 529, 499, 530, 531, 0, 554, 505, 422, 374,
	572, 571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	500, 620, 502, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 2365, 2368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 428, 446, 304, 417,
	459, 309, 425, 299, 389, 414, 0, 0, 295, 444,
	424, 371, 350, 351, 294, 0, 408, 328, 342, 325,
	387, 0, 443, 471, 324, 462, 0, 454, 297, 0,
	453, 386, 440, 445, 372, 366, 0, 296, 442, 370,
	365, 354, 332, 487, 355, 356, 346, 398, 364, 399,
	347, 376, 375, 377, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 617, 2369, 456,
	0, 0, 0, 2364, 0, 2363, 427, 2361, 2366, 357,
	0, 0, 0, 472, 0, 411, 392, 640, 0, 0,
	409, 362, 441, 400, 447, 429, 455, 405, 401, 288,
	430, 327, 373, 300, 302, 322, 329, 331, 333, 334,
	382, 383, 395, 416, 432, 433, 434, 326, 310, 410,
	311, 344, 312, 289, 318, 316, 319, 418, 320, 291,
	396, 438, 2367, 339, 406, 369, 292, 368, 397, 437,
	436, 301, 463, 469, 470, 559, 0, 475, 641, 642,
	643, 484, 0, 402, 489, 490, 491, 493, 494, 495,
	496, 560, 577, 544, 514, 477, 568, 511, 515, 516,
	580, 0, 0, 0, 468, 358, 359, 0, 337, 285,
	286, 636, 323, 388, 582, 615, 616, 507, 0, 569,
	508, 517, 315, 541, 553, 552, 384, 467, 0, 564,
	567, 497, 635, 0, 561, 576, 639, 575, 632, 394,
	0, 415, 573, 520, 0, 565, 539, 0, 566, 535,
	570, 0, 509, 0, 423, 449, 461, 478, 481, 510,
	595, 596, 597, 290, 480, 599, 600, 601, 602, 603,
	604, 605, 598, 452, 542, 519, 545, 460, 522, 521,
	0, 0, 556, 476, 557, 558, 378, 379, 380, 381,
	341, 583, 308, 479, 404, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 549, 546, 644, 0,
	606, 607, 0, 0, 473, 474, 336, 343, 492, 345,
	307, 393, 338, 458, 352, 0, 485, 550, 486, 609,
	612, 610, 611, 385, 348, 349, 419, 353, 363, 407,
	457, 391, 412, 305, 448, 421, 367, 536, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 590, 589, 588, 587,
	586, 585, 584, 0, 0, 533, 435, 317, 279, 313,
	314, 321, 633, 630, 439, 634, 0, 287, 513, 361,
	0, 403, 335, 578, 579, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 581, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 464, 465, 466, 488, 0, 450,
	512, 631, 0, 0, 0, 0, 0, 0, 0, 562,
	574, 608, 0, 618, 619, 621, 623, 622, 625, 426,
	0, 626, 0, 413, 431, 420, 0, 637, 503, 504,
	638, 614, 390, 0, 518, 551, 540, 624, 506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 555, 537, 547, 538, 523, 524, 525,
	532, 340, 526, 527, 528, 498, 529, 499, 530, 531,
	0, 554, 505, 422, 374, 572, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 500, 620, 502, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	2386, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 428, 446, 304, 417, 459, 309, 425, 299, 389,
	414, 0, 0, 295, 444, 424, 371, 350, 351, 294,
	0, 408, 328, 342, 325, 387, 0, 443, 471, 324,
	462, 0, 454, 297, 0, 453, 386, 440, 445, 372,
	366, 0, 296, 442, 370, 365, 354, 332, 487, 355,
	356, 346, 398, 364, 399, 347, 376, 375, 377, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 613,
	0, 0, 617, 2385, 456, 0, 0, 0, 2391, 2388,
	2390, 427, 0, 2389, 357, 0, 0, 0, 472, 0,
	411, 392, 640, 0, 2383, 409, 362, 441, 400, 447,
	429, 455, 405, 401, 288, 430, 327, 373, 300, 302,
	322, 329, 331, 333, 334, 382, 383, 395, 416, 432,
	433, 434, 326, 310, 410, 311, 344, 312, 289, 318,
	316, 319, 418, 320, 291, 396, 438, 0, 339, 406,
	369, 292, 368, 397, 437, 436, 301, 463, 469, 470,
	559, 0, 475, 641, 642, 643, 484, 0, 402, 489,
	490, 491, 493, 494, 495, 496, 560, 577, 544, 514,
	477, 568, 511, 515, 516, 580, 0, 0, 0, 468,
	358, 359, 0, 337, 285, 286, 636, 323, 388, 582,
	615, 616, 507, 0, 569, 508, 517, 315, 541, 553,
	552, 384, 467, 0, 564, 567, 497, 635, 0, 561,
	576, 639, 575, 632, 394, 0, 415, 573, 520, 0,
	565, 539, 0, 566, 535, 570, 0, 509, 0, 423,
	449, 461, 478, 481, 510, 595, 596, 597, 290, 480,
	599, 600, 601, 602, 603, 604, 605, 598, 452, 542,
	519, 545, 460, 522, 521, 0, 0, 556, 476, 557,
	558, 378, 379, 380, 381, 341, 583, 308, 479, 404,
	0, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 549, 546, 644, 0, 606, 607, 0, 0, 473,
	474, 336, 343, 492, 345, 307, 393, 338, 458, 352,
	0, 485, 550, 486, 609, 612, 610, 611, 385, 348,
	349, 419, 353, 363, 407, 457, 391, 412, 305, 448,
	421, 367, 536, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 590, 589, 588, 587, 586, 585, 584, 0, 0,
	533, 435, 317, 279, 313, 314, 321, 633, 630, 439,
	634, 0, 287, 513, 361, 0, 403, 335, 578, 579,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 581, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 464,
	465, 466, 488, 0, 450, 512, 631, 0, 0, 0,
	0, 0, 0, 0, 562, 574, 608, 0, 618, 619,
	621, 623, 622, 625, 426, 0, 626, 0, 413, 431,
	420, 0, 637, 503, 504, 638, 614, 390, 0, 518,
	551, 540, 624, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 555, 537,
	547, 538, 523, 524, 525, 532, 340, 526, 527, 528,
	498, 529, 499, 530, 531, 0, 554, 505, 422, 374,
	572, 571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	500, 620, 502, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 2386, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 428, 446, 304, 417,
	459, 309, 425, 299, 389, 414, 0, 0, 295, 444,
	424, 371, 350, 351, 294, 0, 408, 328, 342, 325,
	387, 0, 443, 471, 324, 462, 0, 454, 297, 0,
	453, 386, 440, 445, 372, 366, 0, 296, 442, 370,
	365, 354, 332, 487, 355, 356, 346, 398, 364, 399,
	347, 376, 375, 377, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 617, 2385, 456,
	0, 0, 0, 2391, 2388, 2390, 427, 0, 2389, 357,
	0, 0, 0, 472, 0, 411, 392, 640, 0, 0,
	409, 362, 441, 400, 447, 429, 455, 405, 401, 288,
	430, 327, 373, 300, 302, 322, 329, 331, 333, 334,
	382, 383, 395, 416, 432, 433, 434, 326, 310, 410,
	311, 344, 312, 289, 318, 316, 319, 418, 320, 291,
	396, 438, 0, 339, 406, 369, 292, 368, 397, 437,
	436, 301, 463, 469, 470, 559, 0, 475, 641, 642,
	643, 484, 0, 402, 489, 490, 491, 493, 494, 495,
	496, 560, 577, 544, 514, 477, 568, 511, 515, 516,
	580, 0, 0, 0, 468, 358, 359, 0, 337, 285,
	286, 636, 323, 388, 582, 615, 616, 507, 0, 569,
	508, 517, 315, 541, 553, 552, 384, 467, 0, 564,
	567, 497, 635, 0, 561, 576, 639, 575, 632, 394,
	0, 415, 573, 520, 0, 565, 539, 0, 566, 535,
	570, 0, 509, 0, 423, 449, 461, 478, 481, 510,
	595, 596, 597, 290, 480, 599, 600, 601, 602, 603,
	604, 605, 598, 452, 542, 519, 545, 460, 522, 521,
	0, 0, 556, 476, 557, 558, 378, 379, 380, 381,
	341, 583, 308, 479, 404, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 549, 546, 644, 0,
	606, 607, 0, 0, 473, 474, 336, 343, 492, 345,
	307, 393, 338, 458, 352, 0, 485, 550, 486, 609,
	612, 610, 611, 385, 348, 349, 419, 353, 363, 407,
	457, 391, 412, 305, 448, 421, 367, 536, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 590, 589, 588, 587,
	586, 585, 584, 0, 0, 533, 435, 317, 279, 313,
	314, 321, 633, 630, 439, 634, 0, 287, 513, 361,
	0, 403, 335, 578, 579, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 581, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 464, 465, 466, 488, 0, 450,
	512, 631, 0, 0, 0, 0, 0, 0, 0, 562,
	574, 608, 0, 618, 619, 621, 623, 622, 625, 426,
	0, 626, 0, 413, 431, 420, 0, 637, 503, 504,
	638, 614, 390, 0, 518, 551, 540, 624, 506, 0,
	0, 0, 0, 0, 2086, 0, 0, 0, 0, 330,
	0, 0, 360, 555, 537, 547, 538, 523, 524, 525,
	532, 340, 526, 527, 528, 498, 529, 499, 530, 531,
	0, 554, 505, 422, 374, 572, 571, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 2087,
	0, 0, 0, 303, 223, 500, 620, 502, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 1230, 1231, 1232, 1229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 428, 446, 304, 417, 459, 309, 425, 299, 389,
	414, 0, 0, 295, 444, 424, 371, 350, 351, 294,
	0, 408, 328, 342, 325, 387, 0, 443, 471, 324,
	462, 0, 454, 297, 0, 453, 386, 440, 445, 372,
	366, 0, 296, 442, 370, 365, 354, 332, 487, 355,
	356, 346, 398, 364, 399, 347, 376, 375, 377, 0,
	0, 0, 0, 0, 482, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 613,
	0, 0, 617, 0, 456, 0, 0, 0, 0, 0,
	0, 427, 0, 0, 357, 0, 0, 0, 472, 0,
	411, 392, 640, 0, 0, 409, 362, 441, 400, 447,
	429, 455, 405, 401, 288, 430, 327, 373, 300, 302,
	322, 329, 331, 333, 334, 382, 383, 395, 416, 432,
	433, 434, 326, 310, 410, 311, 344, 312, 289, 318,
	316, 319, 418, 320, 291, 396, 438, 0, 339, 406,
	369, 292, 368, 397, 437, 436, 301, 463, 469, 470,
	559, 0, 475, 641, 642, 643, 484, 0, 402, 489,
	490, 491, 493, 494, 495, 496, 560, 577, 544, 514,
	477, 568, 511, 515, 516, 580, 0, 0, 0, 468,
	358, 359, 0, 337, 285, 286, 636, 323, 388, 582,
	615, 616, 507, 0, 569, 508, 517, 315, 541, 553,
	552, 384, 467, 0, 564, 567, 497, 635, 0, 561,
	576, 639, 575, 632, 394, 0, 415, 573, 520, 0,
	565, 539, 0, 566, 535, 570, 0, 509, 0, 423,
	449, 461, 478, 481, 510, 595, 596, 597, 290, 480,
	599, 600, 601, 602, 603, 604, 605, 598, 452, 542,
	519, 545, 460, 522, 521, 0, 0, 556, 476, 557,
	558, 378, 379, 380, 381, 341, 583, 308, 479, 404,
	0, 543, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 549, 546, 644, 0, 606, 607, 0, 0, 473,
	474, 336, 343, 492, 345, 307, 393, 338, 458, 352,
	0, 485, 550, 486, 609, 612, 610, 611, 385, 348,
	349, 419, 353, 363, 407, 457, 391, 412, 305, 448,
	421, 367, 536, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 590, 589, 588, 587, 586, 585, 584, 0, 0,
	533, 435, 317, 279, 313, 314, 321, 633, 630, 439,
	634, 0, 287, 513, 361, 0, 403, 335, 578, 579,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 581, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 464,
	465, 466, 488, 0, 450, 512, 631, 0, 0, 0,
	0, 0, 0, 0, 562, 574, 608, 0, 618, 619,
	621, 623, 622, 625, 426, 0, 626, 0, 413, 431,
	420, 0, 637, 503, 504, 638, 614, 390, 0, 518,
	551, 540, 624, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 1023, 0, 360, 555, 537,
	547, 538, 523, 524, 525, 532, 340, 526, 527, 528,
	498, 529, 499, 530, 531, 0, 554, 505, 422, 374,
	572, 571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 1030, 1031, 0, 0, 0, 0, 303, 223,
	500, 620, 502, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1034, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 428, 1017, 304, 417,
	459, 309, 425, 299, 389, 414, 0, 0, 295, 444,
	424, 371, 350, 351, 294, 0, 408, 328, 342, 325,
	387, 0, 443, 471, 324, 462, 1004, 454, 297, 1003,
	453, 386, 440, 445, 372, 366, 0, 296, 442, 370,
	365, 354, 332, 487, 355, 356, 346, 398, 364, 399,
	347, 376, 375, 377, 0, 0, 0, 0, 0, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 617, 0, 456,
	0, 0, 0, 0, 0, 0, 427, 0, 0, 357,
	0, 0, 0, 472, 0, 411, 392, 640, 0, 0,
	409, 362, 441, 400, 447, 429, 455, 1021, 401, 288,
	430, 327, 373, 300, 302, 322, 329, 331, 333, 334,
	382, 383, 395, 416, 432, 433, 434, 326, 310, 410,
	311, 344, 312, 289, 318, 316, 319, 418, 320, 291,
	396, 438, 0, 339, 406, 369, 292, 368, 397, 437,
	436, 301, 463, 469, 470, 559, 0, 475, 641, 642,
	643, 484, 0, 402, 489, 490, 491, 493, 494, 495,
	496, 560, 577, 544, 514, 477, 568, 511, 515, 516,
	580, 0, 0, 0, 468, 358, 359, 0, 337, 285,
	286, 636, 323, 388, 582, 615, 616, 507, 0, 569,
	508, 517, 315, 541, 553, 552, 384, 467, 0, 564,
	567, 497, 635, 0, 561, 576, 639, 575, 632, 394,
	0, 415, 573, 520, 0, 565, 539, 0, 566, 535,
	570, 0, 509, 0, 423, 449, 461, 478, 481, 510,
	595, 596, 597, 290, 480, 599, 600, 601, 602, 603,
	604, 1022, 598, 452, 542, 519, 545, 460, 522, 521,
	0, 0, 556, 1025, 557, 558, 378, 379, 380, 381,
	341, 583, 1020, 479, 404, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 548, 549, 546, 644, 0,
	606, 607, 0, 0, 473, 474, 336, 343, 492, 345,
	307, 393, 338, 458, 352, 0, 485, 550, 486, 609,
	612, 610, 611, 1032, 1018, 1028, 1019, 353, 363, 407,
	457, 391, 412, 305, 448, 421, 1029, 536, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 590, 589, 588, 587,
	586, 585, 584, 0, 0, 533, 435, 317, 279, 313,
	314, 321, 633, 630, 439, 634, 0, 287, 513, 361,
	0, 403, 335, 578, 579, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 581, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 464, 465, 466, 488, 0, 450,
	512, 631, 0, 0, 0, 0, 0, 0, 0, 562,
	574, 608, 0, 618, 619, 621, 623, 622, 625, 426,
	0, 626, 1016, 413, 431, 420, 200, 637, 503, 504,
	638, 614, 0, 0, 0, 0, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 136, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 2136, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 163,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 200, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 136,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 2122, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 163, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 200, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 136, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2018, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 163,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 1030, 1031, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1034, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	1004, 454, 297, 1003, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 1032, 2039, 1028,
	2040, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	1029, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 2902, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 2905, 0,
	0, 0, 2904, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 1519,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 1517, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 1513, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 1517, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3939, 0, 222, 832, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 1517, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 2430, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 953, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 1517, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1727, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 2466, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 2468, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 2086, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 2087, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 3111, 3113,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 2489, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 1517, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 650, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 832, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3918, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 3697, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 3827, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3539, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3712, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 3628, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 3145, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2018, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 3350, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3007, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 1517, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 2468, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	2824, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 2586, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 2545, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	2321, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 1873,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 2001, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 1517, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 1906, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 1546, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 661, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 953, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 1496, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 322,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 1494, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 405, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	605, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 0, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 390, 0, 518, 551, 540, 624, 506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 555, 537, 547, 538, 523, 524, 525, 532,
	340, 526, 527, 528, 498, 529, 499, 530, 531, 0,
	554, 505, 422, 374, 572, 571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 500, 620, 502, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	428, 446, 304, 417, 459, 309, 425, 299, 389, 414,
	0, 0, 295, 444, 424, 371, 350, 351, 294, 0,
	408, 328, 342, 325, 387, 0, 443, 471, 324, 462,
	0, 454, 297, 0, 453, 386, 440, 445, 372, 366,
	0, 296, 442, 370, 365, 354, 332, 487, 355, 356,
	346, 398, 364, 399, 347, 376, 375, 377, 0, 0,
	0, 0, 0, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 617, 0, 456, 0, 0, 0, 0, 0, 0,
	427, 0, 0, 357, 0, 0, 0, 472, 0, 411,
	392, 640, 0, 0, 409, 362, 441, 400, 447, 429,
	455, 405, 401, 288, 430, 327, 373, 300, 302, 729,
	329, 331, 333, 334, 382, 383, 395, 416, 432, 433,
	434, 326, 310, 410, 311, 344, 312, 289, 318, 316,
	319, 418, 320, 291, 396, 438, 0, 339, 406, 369,
	292, 368, 397, 437, 436, 301, 463, 469, 470, 559,
	0, 475, 641, 642, 643, 484, 0, 402, 489, 490,
	491, 493, 494, 495, 496, 560, 577, 544, 514, 477,
	568, 511, 515, 516, 580, 0, 0, 0, 468, 358,
	359, 0, 337, 285, 286, 636, 323, 388, 582, 615,
	616, 507, 0, 569, 508, 517, 315, 541, 553, 552,
	384, 467, 0, 564, 567, 497, 635, 0, 561, 576,
	639, 575, 632, 394, 0, 415, 573, 520, 0, 565,
	539, 0, 566, 535, 570, 0, 509, 0, 423, 449,
	461, 478, 481, 510, 595, 596, 597, 290, 480, 599,
	600, 601, 602, 603, 604, 605, 598, 452, 542, 519,
	545, 460, 522, 521, 0, 0, 556, 476, 557, 558,
	378, 379, 380, 381, 341, 583, 308, 479, 404, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	549, 546, 644, 0, 606, 607, 0, 0, 473, 474,
	336, 343, 492, 345, 307, 393, 338, 458, 352, 0,
	485, 550, 486, 609, 612, 610, 611, 385, 348, 349,
	419, 353, 363, 407, 457, 391, 412, 305, 448, 421,
	367, 536, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	590, 589, 588, 587, 586, 585, 584, 0, 0, 533,
	435, 317, 279, 313, 314, 321, 633, 630, 439, 634,
	0, 287, 513, 361, 0, 403, 335, 578, 579, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 581, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 464, 465,
	466, 488, 0, 450, 512, 631, 0, 0, 0, 0,
	0, 0, 0, 562, 574, 608, 0, 618, 619, 621,
	623, 622, 625, 426, 0, 626, 0, 413, 431, 420,
	0, 637, 503, 504, 638, 614, 390, 0, 518, 551,
	540, 624, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 555, 537, 547,
	538, 523, 524, 525, 532, 340, 526, 527, 528, 498,
	529, 499, 530, 531, 0, 554, 505, 422, 374, 572,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 500,
	620, 502, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 428, 446, 304, 417, 459,
	309, 425, 299, 389, 414, 0, 0, 295, 444, 424,
	371, 350, 351, 294, 0, 408, 328, 342, 325, 387,
	0, 443, 471, 324, 462, 0, 454, 297, 0, 453,
	386, 440, 445, 372, 366, 0, 296, 442, 370, 365,
	354, 332, 487, 355, 356, 346, 398, 364, 399, 347,
	376, 375, 377, 0, 0, 0, 0, 0, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 0, 0, 617, 0, 456, 0,
	0, 0, 0, 0, 0, 427, 0, 0, 357, 0,
	0, 0, 472, 0, 411, 392, 640, 0, 0, 409,
	362, 441, 400, 447, 429, 455, 686, 401, 288, 430,
	327, 373, 300, 302, 322, 329, 331, 333, 334, 382,
	383, 395, 416, 432, 433, 434, 326, 310, 410, 311,
	344, 312, 289, 318, 316, 319, 418, 320, 291, 396,
	438, 0, 339, 406, 369, 292, 368, 397, 437, 436,
	301, 463, 469, 470, 559, 0, 475, 641, 642, 643,
	484, 0, 402, 489, 490, 491, 493, 494, 495, 496,
	560, 577, 544, 514, 477, 568, 511, 515, 516, 580,
	0, 0, 0, 468, 358, 359, 0, 337, 285, 286,
	636, 323, 388, 582, 615, 616, 507, 0, 569, 508,
	517, 315, 541, 553, 552, 384, 467, 0, 564, 567,
	497, 635, 0, 561, 576, 639, 575, 632, 394, 0,
	415, 573, 520, 0, 565, 539, 0, 566, 535, 570,
	0, 509, 0, 423, 449, 461, 478, 481, 510, 595,
	596, 597, 290, 480, 599, 600, 601, 602, 603, 604,
	687, 598, 452, 542, 519, 545, 460, 522, 521, 0,
	0, 556, 476, 557, 558, 378, 379, 380, 381, 341,
	583, 308, 479, 404, 0, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 549, 546, 644, 0, 606,
	607, 0, 0, 473, 474, 336, 343, 492, 345, 307,
	393, 338, 458, 352, 0, 485, 550, 486, 609, 612,
	610, 611, 385, 348, 349, 419, 353, 363, 407, 457,
	391, 412, 305, 448, 421, 367, 536, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	1988, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 590, 589, 588, 587, 586,
	585, 584, 0, 0, 533, 435, 317, 279, 313, 314,
	321, 633, 630, 439, 634, 1991, 287, 513, 361, 0,
	403, 335, 578, 579, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	581, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 1965, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 464, 465, 466, 488, 0, 450, 512,
	631, 0, 0, 0, 0, 0, 0, 0, 562, 574,
	608, 0, 618, 619, 621, 623, 622, 625, 426, 0,
	626, 0, 413, 431, 420, 0, 637, 503, 504, 638,
	614, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1981, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1963,
	1997, 0, 0, 1964, 1966, 1968, 0, 1970, 1971, 1972,
	1976, 1977, 1978, 1980, 1983, 1984, 1985, 0, 0, 0,
	0, 0, 0, 0, 1973, 1982, 1974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1962, 0, 0, 0, 0, 0, 0, 1961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1979, 0, 0, 0, 0, 0, 0,
	0, 0, 1967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3556,
}

var yyPact = [...]int{
	320, -1000, -1000, -1000, -323, 14849, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 48613, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 446, 48613,
	-320, 30488, 46738, -1000, -1000, 2932, -1000, 47363, 16734, 48613,
	524, 522, 48613, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	939, -1000, 51113, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 867, 5191, 50488, 11700, -199, -1000, 1766, -21,
	2606, 474, -181, -187, 1078, 1085, 1342, 1342, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3824, 957, 47988, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 256, 251,
	938, 957, 20484, 121, 120, 1766, 461, -93, 261, -1000,
	1388, 3988, 199, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11700, 11700, 14849, -382, 14849, 11700,
	48613, 48613, -1000, -1000, -1000, -1000, -320, 47363, 867, 5191,
	11700, 2606, 474, -181, -187, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -93, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -300, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 120, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4894, -1000, 1611,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2385, 3106, 1610, 2597, 826,
	46738, 48613, -1000, 150, 826, -1000, -1000, -1000, 1766, 3476,
	-1000, 48613, 48613, 217, 1907, -1000, 502, 443, 423, 475,
	338, 1595, -1000, -1000, -1000, -1000, -1000, -1000, 733, 3432,
	-1000, 48613, 48613, 3127, 48613, -1000, 2326, 793, -1000, 5215,
	3283, 1385, 969, 3144, -1000, -1000, 3104, -1000, 342, 1302,
	353, 745, 435, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	328, -1000, 3343, -1000, -1000, 331, -1000, -1000, 304, -1000,
	-1000, -1000, 80, -1000, -1000, -1000, -1000, -1000, -1000, -16,
	-1000, -1000, 1115, 2296, 11700, 2129, -1000, 3005, 1644, -1000,
	-1000, -1000, 7298, 13584, 13584, 13584, 13584, 48613, -1000, -1000,
	2915, 11700, 3101, 3100, 3097, 3096, -1000, -1000, -1000, -1000,
	-1000, -1000, 1587, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2046, -1000, -1000, -1000, 14212, -1000, 3095, 3090,
	3089, 3073, 3072, 3054, 3053, 3051, 3050, 3045, 3043, 3042,
	3038, 3036, 2773, 16099, 3034, 2596, 2594, 3033, 3031, 3027,
	2589, 3026, 3025, 3021, 2773, 2773, 3020, 3017, 3012, 3011,
	3009, 3008, 3006, 3004, 3003, 3000, 2999, 2998, 2993, 2991,
	2990, 2987, 2983, 2982, 2980, 2979, 2965, 2951, 2950, 2949,
	2948, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1317, -1000, 2946, 3443, 2858, -1000,
	3328, 3322, 3317, 3314, -250, 2945, 2278, -1000, -1000, 112,
	3431, 48613, -272, 48613, 402, -99, -100, -105, -1000, -71,
	-1000, -1000, 1040, -1000, 1053, -1000, 861, 861, 861, 48613,
	48613, 220, 823, 861, 861, 861, 861, 861, 912, 861,
	3360, 935, 921, 920, 919, 861, -57, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1903, 1902, 3205, 1032, -1000, -1000,
	-1000, -1000, 1463, 48613, -1000, 2873, 402, -273, 1761, 1761,
	3408, 3408, 3359, 806, 800, 796, 1761, 571, -1000, 1848,
	1848, 1848, 1848, 1761, 509, 783, 3363, 3363, 136, 1848,
	56, 1761, 1761, 56, 1761, 1761, -1000, 1783, 241, -256,
	-1000, -1000, -1000, -1000, 1848, 1848, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3336, 3335, 867, 867, 48613, 867, 221,
	48613, 867, 867, 867, 48613, 871, -301, 12, 49863, 49238,
	2408, 2326, 779, 752, 1483, 1909, -1000, 1765, 48613, 48613,
	1765, 1765, 24863, 24238, -1000, 48613, -1000, 3443, 2858, 2771,
	1854, 2759, 2858, -107, 402, 867, 867, 867, 867, 867,
	297, 867, 867, 867, 867, 867, 48613, 48613, 46113, 867,
	867, 867, 867, 9810, 9810, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14849, 2187, 2124, 196, 11, -303,
	293, -1000, -1000, -1000, 48613, 3258, 286, -1000, -1000, -1000,
	2780, -1000, 2867, 2867, 2867, 2867, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2867, 2867, 2871, 2933,
	-1000, -1000, 2866, 2866, 2866, 2780, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2868, 2868, 2870, 2870, 2868, 48613, -118, -1000, -1000,
	11700, 48613, 3267, 439, 2925, 826, -1000, -1000, 48613, 209,
	448, 3443, 3265, 3363, 3402, -1000, -1000, 1567, 2270, 2585,
	-1000, 338, -1000, 498, 338, -1000, 534, 534, 1825, -1000,
	1153, -1000, -1000, -1000, -1000, -1000, -1000, 48613, -16, 2738,
	-1000, -1000, 2530, 2924, -1000, 633, 1291, 1406, -1000, 318,
	5240, 39238, 2326, 39238, 48613, -1000, -1000, -1000, -1000, -1000,
	-1000, 71, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 333, -1000, 11700, 11700,
	11700, 11700, 11700, -1000, 940, 12956, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13584, 13584, 13584, 13584, 13584, 13584, 13584,
	13584, 13584, 13584, 13584, 13584, 2911, 2010, 13584, 13584, 13584,
	13584, 27363, 1854, 3109, 1473, 327, 1644, 1644, 1644, 1644,
	11700, -1000, 1942, 2296, 11700, 11700, 11700, 11700, 48613, -1000,
	-1000, 3681, 11700, 11700, 4361, 11700, 3311, 11700, 11700, 11700,
	2758, 6033, 48613, 11700, -1000, 2757, 2753, -1000, -1000, 2132,
	11700, -1000, -1000, 11700, -1000, -1000, 11700, 13584, 11700, -1000,
	11700, 11700, 11700, -1000, -1000, 1688, 3311, 3311, 3311, 1791,
	11700, 11700, 3311, 3311, 3311, 1787, 3311, 3311, 3311, 3311,
	3311, 3311, 3311, 3311, 3311, 3311, 2749, 2748, 2744, 11072,
	3363, -199, -1000, 9182, 3265, 3363, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -252, 2923, 48613, 2578,
	2577, -332, 202, 451, 48613, 1173, -1000, -1000, 48613, 2269,
	48613, 2262, 81, 1072, 1058, 1060, -1000, 48613, 1948, 48613,
	48613, 3304, -1000, 2918, 48613, 861, 861, 861, -1000, 44238,
	39238, 48613, 48613, 2326, 48613, 48613, 48613, 861, 861, 861,
	861, 48613, -1000, 3220, 39238, 3211, 871, -1000, 48613, 1463,
	3303, 48613, -1000, -1000, -1000, -1000, 3408, 13584, 13584, -1000,
	-1000, 11700, -1000, 45488, 1848, 1761, 1761, -1000, -1000, 48613,
	-1000, -1000, -1000, 1848, 48613, 1848, 1848, 3408, 1848, -1000,
	-1000, -1000, 1761, 1761, -1000, -1000, 11700, -1000, -1000, 1848,
	1848, -1000, -1000, 3408, 48613, 69, 3408, 3408, 104, -1000,
	-1000, -1000, 1761, 48613, 48613, 861, 48613, -1000, 48613, 48613,
	-1000, -1000, 48613, 48613, 4389, 48613, 44238, 44863, 3334, -1000,
	39238, 48613, 48613, 1443, -1000, 900, 36738, -1000, 48613, 1398,
	-1000, 8, -1000, 79, 12, 1765, 12, 1765, 899, -1000,
	632, 678, 22988, 548, 39238, 6661, -1000, -1000, 1765, 1765,
	6661, 6661, 1648, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1439, -1000, 269, 3363, -1000, -1000, -1000, -1000, -1000, 2261,
	-1000, 48613, 44238, 39238, 2326, 48613, 867, 48613, 48613, 48613,
	48613, 48613, -1000, 2916, 1566, -1000, 3280, 48613, 48613, 48613,
	48613, 1349, -1000, -1000, 19859, 1561, 1349, -1000, 1930, -1000,
	11700, 14849, -231, 11700, 14849, 14849, 11700, 14849, -1000, 11700,
	279, -1000, -1000, -1000, -1000, 2250, -1000, 2249, -1000, -1000,
	-1000, -1000, -1000, 2574, 2574, -1000, 2247, -1000, -1000, -1000,
	-1000, 2244, -1000, -1000, 2240, -1000, -1000, -1000, -1000, -140,
	2736, 1115, -1000, 2570, 3138, -209, -1000, 21738, 48613, 48613,
	439, -337, 1900, 1899, 1897, -1000, -209, -1000, 21113, 48613,
	3363, -1000, -214, 3265, 11700, 48613, -1000, 3357, -1000, -1000,
	338, -1000, -1000, -1000, 534, 462, -1000, -1000, -1000, -1000,
	-1000, -1000, 1556, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 434, -94, -95, 1430, -1000, 48613, -1000,
	-1000, 318, 39238, 41113, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 265, -1000, -1000, 178, -1000, 895, 248, 1795, -1000,
	-1000, 200, 214, 198, 971, 2296, -1000, 1955, 1955, 1956,
	-1000, 769, -1000, -1000, -1000, -1000, 2915, -1000, -1000, -1000,
	1953, 3352, -1000, 1842, 1842, 1638, 1638, 1638, 1638, 1638,
	2050, 2050, -1000, -1000, -1000, 7298, 2911, 13584, 13584, 13584,
	13584, 948, 948, 2898, 4019, -1000, -1000, -1000, -1000, 11700,
	184, 1929, -1000, 11700, 2542, 1465, 2405, 1579, 1551, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2731,
	2730, 2346, 3429, 2729, 11700, -1000, -1000, 1779, 1773, 1771,
	-1000, 2253, 10444, -1000, -1000, -1000, 2726, 1549, 2725, -1000,
	-1000, -1000, 2722, 1768, 1434, 2718, 2843, 2713, 2710, 2700,
	2699, 1424, 11700, 11700, 11700, 11700, 2697, 1760, 1757, 11700,
	11700, 11700, 11700, 2696, 11700, 11700, 11700, 11700, 11700, 11700,
	11700, 11700, 11700, 11700, 156, 156, 156, 1423, 1418, -1000,
	-1000, 1753, -1000, 2296, -1000, -1000, 3265, -1000, 2895, 2237,
	1413, -1000, -1000, -313, 2483, 48613, 48613, 191, 48613, 2569,
	-275, 48613, -1000, -1000, 2561, -1000, -1000, -1000, 1069, 1048,
	1052, 2559, 3272, 3356, 864, 48613, 1216, 2894, 48613, 48613,
	48613, 273, -1000, -1000, 1353, -1000, 248, -29, 528, 1206,
	3120, 3428, -119, 48613, 48613, 48613, 48613, 3302, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 43613, -1000, 2890, 1751,
	-1000, -1000, 1644, 1644, 2296, 3119, 48613, 48613, 3408, 3408,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1848, 3408, 3408,
	1828, 1761, 1848, -1000, -1000, 1848, -337, -1000, 1848, -1000,
	-337, 1540, -337, 48613, -1000, -1000, -1000, 3299, 2873, 1401,
	-1000, -1000, -1000, 3401, 1590, 838, 838, 1112, 791, 3400,
	18609, -1000, 1802, 1097, 888, 3243, 340, -1000, 1802, -137,
	832, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 730, 720,
	1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
	1802, 1082, 1802, 1802, 1802, 1802, 1802, -1000, 1802, 2886,
	510, -1000, -1000, -1000, -1000, -1000, -1000, 773, 655, 272,
	3333, 408, -1000, 378, 1353, 3331, 430, 48613, 48613, 3607,
	1337, -1000, -1000, -1000, -1000, -1000, 27988, 27988, 22363, 27988,
	-1000, 186, 1765, 12, 73, -1000, -1000, 1398, 6661, 1398,
	6661, 2236, -1000, -1000, 886, -1000, -1000, 1206, -1000, 48613,
	48613, -1000, -1000, 2884, 1896, -1000, -1000, 16099, -1000, 6661,
	6661, -1000, -1000, 29863, 48613, -1000, -19, -1000, -8, 3265,
	-1000, 1128, -1000, -1000, 1379, 1206, 3137, 48613, 1128, 1128,
	1128, -1000, -1000, 17359, 48613, 48613, -1000, -1000, -1000, -1000,
	3408, 9810, -1000, 36738, -1000, -1000, 42988, -1000, 42363, 3408,
	1920, -1000, 14849, 2114, 194, -1000, 288, -309, 193, 2054,
	192, 2296, -1000, -1000, 2695, 2694, 1747, -1000, 1723, 2693,
	1720, 1719, 2235, -1000, 43, -1000, 3260, 1209, -1000, 2883,
	-1000, 1717, 3202, -1000, 1373, -1000, 1895, 1709, -1000, -1000,
	-1000, 11700, 41738, 11700, 1209, 1699, 3201, 1373, 3265, 2558,
	-1000, 1372, -1000, 2153, 1533, 204, -1000, -1000, -1000, 48613,
	867, 2530, 1679, 41113, 1313, -1000, 885, 1519, 1512, -1000,
	39238, 317, 39238, -1000, 39238, -1000, -1000, 404, -1000, 48613,
	3263, -1000, -1000, -1000, 2483, 1890, -336, 48613, -1000, -1000,
	-1000, -1000, -1000, 1672, -1000, 948, 948, 2898, 3547, -1000,
	13584, -1000, 13584, 3093, -1000, 1919, -1000, 11700, 2109, 4379,
	11700, 4379, 1548, 26113, 48613, -1000, -1000, 11700, 11700, -1000,
	2985, -1000, -1000, -1000, -1000, 11700, 11700, 2286, -1000, 48613,
	-1000, -1000, -1000, -1000, 26113, -1000, 13584, -1000, -1000, -1000,
	-1000, 11700, 1260, 1260, 2966, 1671, 156, 156, 156, 2913,
	2891, 2824, 1670, 156, 2785, 2768, 2762, 2712, 2705, 2687,
	2635, 2580, 2568, 2486, -1000, 2882, -1000, -1000, 2072, 12328,
	9182, -1000, -1000, 316, 1371, 2227, 2526, 133, -1000, 1889,
	-1000, 2525, 48613, 48613, 1168, -1000, 48613, 3427, -1000, -1000,
	-1000, -1000, 1043, 2519, -1000, 463, 2087, 173, 299, 2691,
	1367, -1000, -1000, 48613, -1000, -1000, -1000, 17359, 2873, 2881,
	2873, 154, 1802, 624, 39238, 744, -1000, 48613, 2156, 1888,
	3136, 574, 3255, 48613, 2880, 437, 2879, 2878, 3298, 501,
	4991, 48613, 1346, -1000, 1508, 3988, -1000, 48613, -1000, 2326,
	-1000, 1761, -1000, -1000, 3408, -1000, -1000, 11700, 11700, 3408,
	1761, 1761, -1000, 1848, -1000, 48613, -1000, -337, 501, 4991,
	3297, 4615, 557, 2586, -1000, 48613, -1000, -1000, -1000, 830,
	-1000, 1039, 861, 48613, 1979, 1039, 1977, 2875, -1000, -1000,
	48613, 48613, 48613, 48613, -1000, -1000, 48613, -1000, 48613, 48613,
	48613, 48613, 48613, 40488, -1000, 48613, 48613, -1000, 48613, 1975,
	48613, 1974, 3262, -1000, 1802, 1802, 996, -1000, -1000, 596,
	-1000, 40488, 2226, 2225, 2221, 2215, 2518, 2514, 2512, 1802,
	1802, 2197, 2506, 39863, 2505, 1175, 2196, 2195, 2189, 2144,
	2495, 1042, -1000, 2493, 2142, 2134, 2118, 48613, 2874, 2431,
	504, -1000, -1000, 2087, 154, 1802, 385, 48613, 1886, 1885,
	624, 527, -36, 23613, -1000, -1000, -1000, 48613, 36738, 36738,
	36738, 36738, 36738, -1000, 3168, 3164, 3165, -1000, 3161, 3158,
	3186, 3098, 48613, 36738, 2873, -1000, 39863, -1000, -1000, -1000,
	1854, 1669, 3634, 1031, 11700, 6661, -1000, -1000, -5, 54,
	-1000, -1000, -1000, -1000, 39238, 2492, 548, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3350, 48613, 48613, 822, 2690, 1365,
	-1000, -1000, -1000, 4991, 2867, 2867, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2867, 2867, 2871, -1000, -1000,
	2866, 2866, 2866, 2780, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2868, 2868, 2870, 2870, 2868, -1000,
	-1000, 3406, -1000, 1362, -1000, -1000, 1501, -1000, 3406, 1944,
	-325, 14849, 1772, 1749, -1000, 11700, 14849, 11700, -232, 361,
	-234, -1000, -1000, -1000, 2490, -1000, -1000, -1000, 2185, -1000,
	2184, -1000, 171, 195, 1970, -209, 9182, 449, 48613, -209,
	48613, 9182, -1000, 48613, 174, -368, -376, 165, 440, -209,
	3350, 43, 11700, 3227, -1000, -1000, 48613, 2179, -1000, -1000,
	-1000, 3426, 39238, 2326, 1664, 38613, -1000, 324, -1000, 264,
	621, 2488, -1000, 918, 132, 2485, 2483, -1000, -1000, -1000,
	-1000, 13584, 1644, -1000, -1000, -1000, 2296, 11700, 2689, -1000,
	1038, 1038, 2245, 2684, 2681, -1000, 2867, 2867, -1000, 2780,
	2866, 2780, 1038, 1038, 2679, -1000, 2239, 2479, -1000, 2474,
	2427, 11700, -1000, 2678, 3983, 1332, -60, -169, 156, 156,
	-1000, -1000, -1000, -1000, 156, 156, 156, 156, -1000, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 828,
	-81, -260, -86, -261, -1000, 2675, 1359, -1000, -1000, -1000,
	-1000, -1000, 4361, 1356, 537, 537, 2483, 2482, -1000, 884,
	2478, 1067, 48613, 2476, -283, -1000, 2475, -1000, -1000, 48613,
	2471, -1000, 614, 48613, 48613, 2466, 2465, 1216, 4991, 2673,
	3295, 17984, 3288, 2294, -1000, -1000, -1000, 29238, 590, -1000,
	-1000, -1000, 717, 406, 2178, 572, -1000, 48613, 558, 3213,
	1877, 2464, 48613, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3255, -1000, 1090, 479, 35488, 15474, -1000, 403, 48613, -1000,
	17984, 17984, 403, 488, 1880, -1000, 826, 1295, 148, 36738,
	48613, -1000, 36113, 2672, -1000, 1206, 3408, -1000, 2296, 2296,
	-337, 3408, 3408, 1761, -1000, -1000, 488, -1000, 403, -1000,
	1639, 19234, 555, 544, 538, -1000, 708, -1000, -1000, 824,
	3233, 4991, -1000, 48613, -1000, 48613, -1000, 48613, 48613, 861,
	11700, 3233, 48613, 878, -1000, 1182, 470, 454, 787, 787,
	1352, -1000, 3290, -1000, -1000, 1344, -1000, -1000, -1000, -1000,
	48613, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26113, 26113,
	3325, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2463, 2461, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 48613, 1663, -1000, 1876, 2172,
	2460, 2294, 29238, 1873, 1765, 2456, 2454, 590, 2156, 1869,
	916, 48613, -1000, 1147, 48613, 48613, -1000, 1284, -1000, 1867,
	3110, 3134, 3110, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3162, -1000, 3159, -1000, -1000, -1000, 1284, -1000, -1000, -1000,
	-1000, -1000, 1031, -1000, 3347, 1039, 1039, 1039, 2660, -1000,
	-1000, -1000, -1000, 1313, 2659, -1000, -1000, -1000, 3438, -1000,
	-1000, -1000, -1000, -1000, -1000, 17359, 3250, 3404, 3399, 37988,
	3404, -1000, -325, 1911, -1000, 2067, 188, 1924, 48613, -1000,
	-1000, -1000, 2656, 2651, -216, 181, 3393, 3391, 1106, -1000,
	2647, 1310, -209, -1000, -1000, 1209, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -209, -1000, 1209, -1000, 171, -1000, -1000,
	3236, -1000, -1000, 2326, -1000, 260, -1000, -1000, -1000, -1000,
	-1000, -1000, 232, -1000, 48613, -1000, 1303, 127, -1000, 2296,
	-1000, -1000, -1000, -1000, -1000, 4379, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11700, -1000, -1000,
	-1000, 2415, -1000, -1000, 11700, 2641, 2453, 2640, 2447, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3443, -1000, 3390, 1660, 2639,
	2636, 1641, 2634, 2633, -1000, 11700, 2632, 4361, 1004, 2446,
	1004, -1000, -1000, 424, 28613, 48613, 3411, -1000, 48613, 2445,
	-1000, -1000, 2087, 591, 722, -1000, -1000, -1000, -1000, 942,
	403, 2628, 1212, -1000, -1000, -1000, -1000, 403, -1000, 2441,
	247, -1000, -1000, -1000, -1000, 2433, 2432, 2171, -1000, -1000,
	2089, 1626, 262, -1000, -1000, -1000, -1000, -1000, -1000, 2193,
	48613, 37363, 2291, 1859, -339, -1000, 2865, -1000, 1802, 1802,
	1802, 48613, 1637, -1000, 1802, 1802, 2627, -1000, -1000, 2624,
	2623, -120, 831, 1806, 1800, -1000, 2151, 27988, 36738, 36113,
	1269, -1000, 1491, -1000, -1000, -1000, -1000, -1000, -1000, 3408,
	831, -1000, 542, 2149, 13584, 2862, 13584, 2859, 566, 2857,
	1635, -1000, 48613, -1000, -1000, 48613, 1706, 2856, -1000, 2832,
	3118, 536, 2826, 2819, 48613, 2342, -1000, 3233, 48613, 764,
	3249, -1000, -1000, -1000, 427, -1000, -1000, 658, -1000, 48613,
	-1000, 48613, -1000, 1636, -1000, 26113, -1000, -1000, 1634, -1000,
	2431, 2425, 4361, -1000, -1000, 247, 2424, 6661, -1000, -1000,
	-1000, 3213, 2423, 2193, 48613, -1000, 48613, 1147, 1147, 3443,
	48613, 9182, -1000, -1000, 11700, 2817, -1000, 11700, -1000, -1000,
	-1000, -1000, -1000, 2807, 3239, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1500, -1000, 11700, 11700, -1000, -1000, 850, 14849,
	-237, 352, -1000, -1000, -1000, -219, 2419, -1000, -1000, 3387,
	2409, 2329, 48613, -1000, -1000, 1209, 1209, -216, -1000, -1000,
	1206, -1000, -1000, 1089, 732, -1000, 2620, 2320, -1000, 2219,
	156, -1000, 156, -1000, 309, 11700, -1000, 2404, -1000, -1000,
	-1000, 2394, -1000, -1000, 2205, -1000, 2619, -1000, 2393, -1000,
	-1000, 48613, -1000, -1000, 1064, 2391, -340, 2390, 2087, 2087,
	48613, 4991, -122, -120, 17984, -122, -1000, -1000, 399, -1000,
	-1000, 413, -1000, -1000, 2076, 630, -1000, -1000, 2389, 623,
	-1000, 1147, -1000, 1855, 2020, 2353, 33613, 26113, 27363, 2388,
	-1000, -1000, 35488, 1500, 1500, 5257, 333, 51614, -1000, 2800,
	1093, 1776, -1000, 2148, -1000, 2147, -1000, 3408, 1269, 146,
	-1000, -1000, 1645, -1000, 1093, 2586, 3386, -1000, 3694, 48613,
	3485, 48613, 2789, 1839, 13584, -1000, 824, 3198, -1000, -1000,
	1706, -1000, -1000, 2000, 13584, -1000, -1000, 2384, 27363, 975,
	1832, 1830, 999, 2783, -1000, 668, 3437, -1000, -1000, -1000,
	988, 2782, -1000, 1969, 1962, -1000, 48613, -1000, 33613, 33613,
	825, 825, 33613, 33613, 2781, 787, -1000, -1000, 13584, -1000,
	-1000, 1802, -1000, -1000, -1000, 1802, 1552, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2291, -1000, -1000, 1128, -1000, 3363,
	-1000, -1000, 2296, 48613, 2296, 34863, -1000, 3384, 3383, -1000,
	2296, 257, -1000, -325, 48613, 48613, -221, 2141, -1000, 2383,
	208, -1000, -1000, 1122, -219, -223, 104, 26113, 1826, -1000,
	-1000, -1000, -1000, -1000, 2616, -1000, 972, -1000, -1000, -1000,
	1115, 2612, 2573, -1000, -1000, -1000, -1000, 48613, -1000, 2347,
	-1000, 2380, 2379, 577, -115, -1000, -1000, 417, -1000, -1000,
	-1000, 615, 2313, -1000, -1000, 412, -1000, -1000, -1000, 2193,
	2378, -1000, -1000, 114, -1000, 1809, 1625, -1000, 2780, 11700,
	-1000, -1000, -1000, -1000, -1000, -1000, 817, -1000, 403, 5563,
	-1000, 1097, 26738, -1000, 1089, 817, 510, 32363, 675, 319,
	-1000, 2131, -1000, -1000, 3443, -1000, 651, -1000, 559, -1000,
	1604, -1000, 1603, 34238, 2108, 3022, -1000, 5525, 945, -1000,
	-1000, 2898, -1000, -1000, -1000, -1000, -1000, -1000, 2376, 2375,
	-1000, -1000, -1000, -1000, -1000, 2103, 2778, 40, 3321, 2372,
	-1000, -1000, 2777, 1593, 1588, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1583, 1577, 33613, -1000, -1000, 2898,
	2101, 26113, 1802, -1000, -1000, 1526, 1478, -1000, -1000, -1000,
	-1000, -1000, -295, -1000, -1000, -1000, 2776, -1000, -1000, 3382,
	-221, -225, 2357, 168, 203, -1000, 2356, -1000, -1000, 992,
	-211, 149, 141, 137, -1000, -1000, -1000, 11700, -1000, -1000,
	-1000, 113, -1000, 1804, -1000, -1000, 2087, 48613, 660, -1000,
	-1000, -1000, -1000, 228, -1000, -1000, -1000, -1000, -1000, -1000,
	2353, 2351, -1000, 33613, 3290, 2198, 535, 3380, -1000, 51614,
	-1000, 1802, -1000, 535, 1476, -1000, 1802, 1802, -1000, 497,
	-1000, 1710, -1000, 2062, -1000, 3363, -1000, 496, -1000, 540,
	-1000, -1000, -1000, 1475, -1000, -1000, -1000, 5525, 547, -1000,
	810, 2774, -1000, -1000, 2491, 11700, 2773, 1802, 2484, -110,
	33613, 3116, 3114, 3111, 3024, 1460, -1000, -1000, 26113, -1000,
	-1000, 32988, -1000, 48613, 2329, -1000, -1000, 2349, -1000, 870,
	179, 203, -1000, 3378, 207, 3377, 3373, 1107, 1952, -1000,
	153, 151, 147, -1000, -1000, -1000, -1000, -1000, 2347, 2339,
	2336, 580, -1000, 322, -1000, -1000, -1000, 337, -1000, -1000,
	3290, -1000, 3372, 557, -1000, 26113, -1000, -1000, 32363, 1500,
	1500, -1000, -1000, 2052, -1000, -1000, -1000, -1000, 2051, -1000,
	-1000, -1000, 1436, -1000, 48613, 1003, 8554, -1000, 2027, -1000,
	48613, -1000, 3133, -1000, 282, 1409, 337, 825, 337, 825,
	337, 825, 337, 825, 308, -1000, -1000, -1000, 1399, -1000,
	-1000, -1000, 2739, 2035, 181, 166, 3368, -1000, 2329, 3365,
	2329, 2329, -1000, 160, 992, -1000, -1000, -1000, -1000, -1000,
	-1000, 2335, -1000, -1000, -1000, -1000, 1802, 1802, 2334, 2332,
	476, -1000, -1000, -1000, 31738, 555, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 547, 51614, -1000, 8554, 1395, -1000, 2296,
	-1000, 787, -1000, -1000, 3132, 3130, 3420, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 48613, 3310, 25488,
	183, -1000, -1000, -1000, 2330, -1000, 2329, -1000, -1000, 1777,
	-1000, -258, 2034, 2013, -1000, -1000, 48613, -1000, 48613, 542,
	-1000, 51614, 1394, -1000, 8554, -1000, -1000, 3435, -1000, 3421,
	953, 953, 337, 337, 337, 337, -1000, -1000, 48613, -1000,
	1304, -1000, -1000, -1000, 1389, -1000, -1000, -1000, -1000, 2306,
	-1000, -1000, 2304, -1000, -1000, -1000, 1203, 2586, -1000, -1000,
	-1000, -1000, -1000, 2079, 695, -1000, 1103, -1000, 1687, -1000,
	31113, 48613, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 48613,
	7926, -1000, 1343, -1000, -1000, 2296, 48613, -1000,
}

var yyPgo = [...]int{
	0, 182, 3478, 249, 180, 4146, 109, 260, 292, 261,
	259, 4144, 4143, 4142, 4140, 3260, 3252, 4139, 4138, 4137,
	4135, 4121, 4118, 4116, 4115, 4114, 4113, 4110, 4109, 4108,
	4107, 4105, 4103, 4102, 4101, 4099, 4098, 4096, 4095, 4094,
	4092, 4090, 4089, 4088, 4087, 4086, 4085, 256, 4084, 4083,
	4082, 4081, 4080, 4074, 4073, 4071, 4070, 4069, 4066, 4063,
	4061, 4060, 4059, 4057, 4056, 4048, 4047, 4045, 4044, 4043,
	4040, 4038, 4037, 4036, 4035, 4034, 4033, 4032, 4031, 4029,
	4028, 4027, 253, 4025, 4024, 239, 4023, 3247, 4022, 4021,
	4020, 4017, 4016, 4015, 4014, 4012, 329, 4011, 4010, 4009,
	4008, 4007, 4006, 4005, 4000, 3999, 3996, 3995, 3994, 3993,
	324, 3991, 3988, 3985, 3984, 251, 3980, 284, 3978, 178,
	152, 3977, 3976, 3974, 3970, 3969, 3968, 3967, 3966, 3965,
	3962, 3961, 3960, 3959, 241, 190, 75, 3958, 52, 3957,
	3956, 220, 3955, 158, 3953, 153, 3952, 3951, 3949, 3948,
	3947, 3946, 3945, 3944, 3943, 3942, 3941, 3938, 3937, 3935,
	3930, 3928, 3927, 3926, 3925, 3924, 3923, 3922, 3921, 55,
	3916, 263, 3914, 77, 3912, 175, 3911, 82, 3910, 74,
	134, 255, 2911, 295, 258, 194, 185, 3909, 3904, 281,
	3897, 161, 230, 176, 102, 26, 3896, 144, 3895, 265,
	48, 45, 247, 150, 57, 204, 129, 3891, 216, 114,
	118, 3890, 3889, 142, 3888, 245, 191, 3887, 116, 3886,
	3883, 3881, 3879, 3878, 200, 199, 3877, 3876, 137, 3875,
	3874, 67, 133, 3873, 80, 132, 174, 127, 3871, 238,
	121, 89, 3870, 131, 107, 3869, 86, 3866, 3864, 3862,
	3861, 192, 3860, 3858, 145, 76, 3857, 3856, 3848, 71,
	3846, 83, 3829, 39, 3828, 72, 3827, 3826, 3824, 3823,
	3820, 3819, 3818, 3817, 3813, 3809, 3808, 3806, 54, 3801,
	3792, 7, 15, 14, 3791, 30, 3790, 173, 3788, 3787,
	171, 3784, 198, 3782, 3781, 103, 95, 3777, 97, 168,
	3776, 9, 25, 78, 3775, 3774, 223, 1329, 115, 157,
	3773, 275, 3772, 3771, 3770, 167, 3767, 3766, 643, 3765,
	3764, 3763, 3761, 3760, 3759, 99, 3758, 1, 218, 42,
	3757, 138, 148, 3755, 41, 33, 3753, 59, 122, 211,
	140, 106, 3752, 3750, 3749, 658, 209, 111, 29, 0,
	104, 224, 160, 3743, 3741, 3740, 273, 3738, 237, 203,
	234, 169, 252, 188, 3737, 3736, 64, 3735, 166, 31,
	53, 146, 65, 22, 227, 3733, 1781, 8, 189, 3732,
	208, 3730, 215, 16, 110, 151, 3729, 3728, 35, 264,
	3726, 3725, 3724, 136, 3723, 3720, 186, 79, 3719, 3718,
	3717, 3715, 38, 3714, 37, 13, 3713, 112, 3701, 244,
	3700, 262, 139, 184, 183, 165, 229, 233, 84, 85,
	3698, 1806, 159, 113, 21, 3674, 225, 3671, 302, 141,
	3670, 87, 3667, 243, 267, 210, 3666, 187, 10, 50,
	40, 32, 47, 12, 254, 205, 3663, 3660, 23, 51,
	3659, 56, 3658, 19, 3657, 3656, 43, 3653, 61, 5,
	3652, 3650, 17, 20, 3649, 36, 207, 177, 120, 101,
	66, 3648, 3647, 49, 156, 3646, 155, 163, 162, 3644,
	90, 3643, 3641, 3640, 3639, 294, 3637, 276, 3636, 3621,
	3620, 3619, 3618, 3615, 3612, 3610, 3609, 214, 3608, 108,
	44, 3595, 3594, 3590, 3589, 94, 154, 3583, 3582, 3577,
	3576, 28, 147, 3575, 11, 3573, 24, 18, 34, 3572,
	105, 3571, 2, 196, 3569, 3568, 4, 3567, 3566, 3,
	3565, 3563, 126, 3562, 100, 27, 172, 124, 3561, 3560,
	93, 213, 149, 3554, 3552, 98, 242, 206, 3551, 96,
	240, 257, 3549, 212, 3547, 3546, 3545, 3544, 3542, 3541,
	1234, 3540, 3538, 236, 81, 92, 3537, 226, 128, 3536,
	3535, 91, 170, 130, 125, 58, 88, 3534, 119, 201,
	3531, 202, 3530, 250, 3526, 3525, 117, 3524, 3523, 3522,
	3520, 197, 3518, 3516, 195, 232, 3514, 3512, 268, 3510,
	3509, 3507, 3506, 3503, 3490, 3486, 3474, 3469, 3463, 235,
	231, 3455,
}

//line mysql_sql.y:12576
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 604, 607, 607, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 125,
	125, 340, 340, 341, 341, 127, 336, 336, 335, 335,
	128, 129, 130, 583, 583, 131, 132, 161, 582, 582,
	163, 163, 163, 163, 163, 456, 126, 126, 126, 126,
	126, 167, 167, 167, 167, 167, 124, 589, 589, 589,
	590, 590, 121, 150, 149, 152, 152, 151, 151, 148,
	148, 144, 147, 147, 146, 146, 145, 140, 142, 142,
	141, 143, 143, 122, 110, 123, 531, 531, 530, 530,
	529, 529, 481, 481, 482, 482, 327, 327, 327, 528,
	528, 528, 527, 527, 526, 526, 525, 525, 523, 523,
	524, 522, 521, 521, 521, 519, 519, 519, 515, 515,
	517, 516, 516, 518, 510, 510, 513, 513, 511, 511,
	511, 511, 514, 509, 509, 509, 508, 508, 109, 109,
	109, 423, 423, 108, 108, 437, 437, 437, 437, 437,
	435, 435, 435, 435, 435, 435, 434, 434, 433, 433,
	438, 438, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 97, 97, 97, 97, 97, 97, 97,
	104, 102, 102, 102, 103, 595, 595, 594, 594, 596,
	596, 596, 596, 597, 597, 100, 100, 100, 101, 432,
	432, 432, 98, 99, 99, 422, 422, 427, 427, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 431, 431, 431, 429, 429, 428, 428, 430,
	430, 91, 91, 91, 94, 93, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 92, 92, 92, 92, 92,
	92, 86, 86, 86, 86, 86, 85, 85, 87, 87,
	419, 419, 418, 105, 105, 106, 592, 592, 591, 593,
	593, 593, 593, 107, 113, 113, 113, 113, 113, 113,
	113, 113, 112, 112, 115, 115, 114, 116, 96, 96,
	96, 96, 96, 96, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	556, 556, 556, 556, 558, 558, 354, 355, 608, 357,
	353, 353, 353, 552, 552, 553, 554, 555, 555, 555,
	111, 14, 214, 214, 455, 455, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 13, 84, 89, 89,
	90, 291, 291, 292, 286, 286, 293, 293, 166, 294,
	294, 294, 299, 299, 300, 300, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 273, 273,
	273, 268, 268, 268, 268, 269, 269, 270, 270, 271,
	271, 271, 271, 272, 272, 346, 346, 295, 295, 295,
	297, 297, 296, 290, 288, 288, 288, 288, 288, 288,
	288, 289, 289, 289, 289, 298, 298, 82, 88, 88,
	88, 88, 570, 570, 83, 581, 581, 485, 485, 368,
	368, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 491, 492, 364,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 79, 80, 81,
	54, 57, 58, 165, 53, 53, 53, 408, 408, 52,
	609, 609, 339, 339, 67, 66, 56, 68, 69, 70,
	71, 72, 73, 51, 65, 65, 65, 65, 65, 65,
	65, 65, 76, 504, 504, 611, 611, 611, 74, 75,
	484, 484, 484, 64, 63, 62, 61, 60, 60, 50,
	50, 49, 49, 55, 156, 59, 157, 157, 361, 361,
	361, 363, 363, 359, 610, 610, 451, 451, 362, 362,
	48, 48, 48, 48, 77, 360, 360, 338, 358, 358,
	358, 12, 12, 10, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 26, 27, 29, 416, 416, 413, 28, 20, 19,
	19, 23, 22, 18, 18, 21, 24, 25, 25, 9,
	9, 9, 9, 15, 15, 16, 186, 186, 240, 240,
	564, 564, 560, 560, 561, 561, 561, 562, 562, 563,
	563, 117, 498, 498, 498, 498, 498, 498, 8, 8,
	209, 209, 497, 497, 497, 497, 497, 497, 420, 420,
	420, 541, 541, 541, 542, 208, 208, 203, 203, 499,
	499, 385, 543, 543, 507, 507, 506, 506, 505, 505,
	206, 206, 207, 207, 189, 189, 135, 135, 512, 512,
	512, 512, 520, 520, 480, 480, 278, 278, 329, 329,
	330, 330, 179, 179, 180, 180, 180, 180, 180, 180,
	598, 598, 599, 600, 601, 601, 602, 602, 602, 603,
	603, 603, 603, 603, 549, 549, 551, 551, 550, 205,
	205, 201, 201, 202, 202, 202, 200, 200, 199, 198,
	198, 197, 195, 195, 195, 196, 196, 196, 213, 213,
	182, 182, 182, 181, 181, 181, 181, 181, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	183, 183, 557, 557, 557, 486, 486, 486, 494, 494,
	308, 308, 309, 309, 490, 490, 307, 307, 184, 184,
	185, 185, 185, 185, 306, 306, 305, 194, 194, 193,
	192, 192, 192, 187, 187, 187, 187, 188, 317, 317,
	316, 316, 315, 315, 315, 315, 120, 133, 133, 134,
	212, 212, 314, 313, 313, 313, 313, 211, 211, 210,
	210, 204, 204, 191, 191, 191, 191, 312, 190, 310,
	588, 588, 587, 587, 586, 584, 584, 584, 585, 585,
	585, 585, 533, 533, 533, 533, 533, 347, 347, 347,
	352, 352, 350, 350, 350, 350, 350, 356, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	39, 223, 224, 40, 225, 225, 226, 226, 227, 227,
	228, 229, 230, 230, 230, 230, 38, 215, 215, 216,
	216, 217, 217, 218, 219, 219, 219, 222, 220, 221,
	221, 606, 606, 605, 37, 37, 30, 170, 170, 171,
	171, 171, 173, 173, 274, 274, 274, 172, 172, 174,
	174, 174, 565, 567, 567, 569, 568, 568, 568, 571,
	571, 571, 571, 571, 572, 572, 572, 572, 573, 573,
	31, 153, 153, 177, 177, 158, 576, 576, 576, 575,
	575, 577, 577, 578, 578, 333, 333, 334, 334, 168,
	169, 169, 160, 155, 176, 176, 176, 176, 176, 178,
	178, 242, 242, 154, 159, 162, 164, 566, 574, 574,
	574, 417, 417, 414, 415, 415, 412, 411, 411, 411,
	580, 580, 579, 579, 579, 348, 348, 32, 407, 407,
	409, 410, 410, 410, 401, 401, 401, 401, 36, 405,
	405, 406, 406, 406, 406, 406, 406, 406, 402, 402,
	404, 404, 400, 400, 400, 400, 400, 400, 400, 35,
	175, 175, 399, 399, 396, 396, 394, 394, 395, 395,
	393, 393, 393, 397, 397, 43, 78, 44, 45, 46,
	42, 398, 398, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 137, 136, 136, 136, 136, 136, 139,
	139, 332, 332, 331, 331, 138, 275, 275, 41, 253,
	253, 472, 472, 467, 467, 467, 467, 467, 488, 488,
	488, 468, 468, 468, 469, 469, 469, 471, 471, 471,
	470, 470, 470, 470, 470, 487, 487, 489, 489, 489,
	439, 439, 440, 440, 440, 443, 443, 459, 459, 460,
	460, 458, 458, 465, 465, 464, 464, 463, 463, 462,
	462, 461, 461, 461, 461, 454, 454, 453, 453, 441,
	441, 441, 441, 441, 442, 442, 442, 452, 452, 457,
	457, 304, 304, 303, 303, 261, 261, 262, 262, 302,
	302, 259, 259, 260, 260, 260, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 539, 539, 540, 264, 264, 276, 276, 276,
	276, 276, 276, 263, 263, 265, 265, 241, 241, 239,
	239, 231, 231, 231, 231, 231, 232, 232, 233, 233,
	234, 234, 234, 238, 238, 237, 237, 237, 237, 235,
	235, 236, 236, 236, 236, 236, 236, 425, 425, 536,
	536, 537, 537, 532, 532, 532, 535, 535, 535, 535,
	535, 535, 535, 538, 538, 538, 534, 534, 243, 326,
	326, 326, 349, 349, 349, 349, 351, 325, 325, 325,
	258, 258, 257, 257, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 424, 424, 365, 365,
	366, 366, 285, 284, 284, 284, 284, 284, 282, 283,
	281, 281, 281, 281, 281, 280, 280, 279, 279, 279,
	403, 403, 277, 277, 267, 267, 267, 266, 266, 266,
	466, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	323, 323, 323, 324, 324, 324, 324, 324, 324, 324,
	324, 375, 375, 381, 381, 548, 548, 547, 244, 244,
	244, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	254, 254, 254, 448, 448, 448, 448, 449, 449, 449,
	449, 450, 450, 450, 446, 446, 447, 447, 386, 387,
	387, 495, 495, 496, 496, 444, 444, 445, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	503, 503, 503, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 559,
	559, 559, 544, 544, 544, 545, 545, 545, 545, 545,
	545, 545, 545, 545, 545, 545, 545, 546, 546, 546,
	546, 546, 546, 546, 546, 546, 546, 546, 546, 546,
	546, 546, 546, 546, 321, 321, 321, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 388, 388, 389, 389, 500,
	500, 500, 500, 500, 500, 501, 501, 502, 502, 502,
	502, 493, 493, 493, 493, 493, 493, 493, 493, 493,
	493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
	493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
	373, 318, 318, 318, 390, 382, 382, 383, 383, 384,
	384, 376, 376, 376, 376, 376, 376, 377, 377, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 378, 378, 380, 380, 392, 392, 392, 391, 391,
	391, 391, 391, 391, 391, 256, 256, 256, 256, 370,
	370, 370, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 246, 246, 246, 246, 250, 250,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 251, 251, 251, 251, 251, 249,
	249, 249, 249, 249, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 118, 119, 119, 248, 328, 328, 473,
	473, 476, 476, 474, 474, 475, 477, 477, 477, 478,
	478, 478, 479, 479, 479, 483, 483, 337, 337, 337,
	345, 345, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 2, 2, 0, 1, 4, 2,
	4, 1, 5, 3, 2, 1, 2, 2, 4, 4,
	5, 2, 1, 3, 4, 4, 1, 2, 9, 7,
	1, 3, 3, 1, 1, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 2, 4, 3, 3, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 7, 2, 3,
	3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 4, 1, 1, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 10, 7, 4, 4,
	3, 1, 3, 3, 1, 3, 1, 6, 7, 3,
	3, 3, 1, 1, 1, 3, 2, 4, 5, 5,
	6, 5, 5, 3, 2, 2, 1, 3, 4, 3,
	7, 5, 8, 2, 2, 1, 3, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 2,
	1, 3, 2, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	4, 3, 3, 3, 2, 5, 5, 0, 2, 7,
	0, 1, 0, 1, 5, 5, 3, 3, 2, 4,
	4, 4, 4, 4, 1, 1, 1, 3, 3, 1,
	1, 1, 6, 0, 1, 1, 1, 1, 5, 5,
	0, 1, 1, 3, 3, 3, 4, 7, 7, 5,
	4, 7, 8, 3, 3, 2, 3, 4, 0, 2,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 1,
	5, 5, 6, 4, 3, 1, 3, 1, 1, 3,
	5, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 4, 1, 3, 1, 4, 6, 6,
	4, 4, 4, 4, 4, 3, 6, 3, 5, 1,
	1, 2, 2, 11, 8, 9, 1, 3, 2, 4,
	0, 2, 0, 1, 1, 1, 1, 0, 1, 0,
	1, 4, 2, 1, 5, 4, 4, 2, 5, 5,
	1, 3, 2, 1, 5, 4, 4, 2, 0, 5,
	4, 0, 1, 3, 3, 1, 3, 1, 3, 1,
	3, 4, 0, 1, 0, 1, 1, 3, 1, 1,
	0, 4, 1, 3, 2, 1, 0, 8, 0, 4,
	7, 4, 0, 2, 0, 2, 0, 2, 0, 4,
	1, 3, 1, 1, 6, 4, 5, 7, 4, 5,
	0, 1, 3, 8, 0, 6, 0, 4, 6, 1,
	1, 1, 1, 1, 2, 3, 1, 3, 6, 0,
	3, 0, 1, 2, 4, 4, 0, 1, 3, 1,
	3, 3, 0, 1, 1, 0, 2, 2, 0, 2,
	3, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	7, 7, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 2, 0, 4, 0, 2, 0, 2, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 3, 1,
	1, 1, 1, 4, 4, 4, 3, 3, 2, 2,
	2, 2, 2, 3, 2, 3, 4, 1, 3, 4,
	0, 2, 1, 1, 2, 2, 2, 0, 1, 2,
	4, 1, 3, 1, 3, 2, 3, 1, 4, 3,
	0, 1, 1, 2, 5, 2, 2, 2, 0, 2,
	3, 3, 0, 1, 3, 1, 3, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 1, 7, 1, 3, 0, 1, 1, 3,
	1, 3, 0, 1, 1, 1, 14, 1, 3, 0,
	1, 1, 3, 1, 1, 2, 4, 1, 1, 1,
	1, 0, 1, 2, 9, 9, 7, 1, 2, 3,
	3, 3, 0, 4, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 4, 1, 1, 1, 3,
	3, 4, 3, 3, 0, 1, 1, 1, 0, 2,
	7, 8, 10, 2, 2, 8, 0, 3, 3, 0,
	3, 0, 3, 0, 5, 1, 3, 0, 3, 3,
	0, 2, 9, 8, 0, 2, 2, 3, 3, 0,
	2, 0, 2, 4, 4, 4, 4, 1, 0, 2,
	2, 1, 3, 2, 1, 3, 2, 1, 3, 2,
	0, 1, 3, 4, 3, 1, 1, 4, 1, 3,
	1, 1, 1, 1, 0, 1, 1, 1, 11, 0,
	2, 3, 3, 2, 2, 3, 1, 1, 1, 3,
	3, 4, 0, 2, 2, 2, 2, 2, 2, 6,
	0, 4, 1, 1, 0, 3, 0, 1, 1, 2,
	4, 4, 4, 0, 1, 8, 2, 4, 4, 4,
	9, 0, 2, 11, 9, 11, 8, 6, 9, 7,
	10, 7, 6, 2, 2, 9, 4, 5, 3, 0,
	4, 1, 3, 0, 3, 6, 0, 2, 10, 0,
	2, 0, 2, 0, 3, 2, 4, 3, 0, 2,
	1, 0, 2, 3, 0, 2, 3, 0, 2, 1,
	0, 3, 2, 4, 3, 0, 1, 0, 1, 1,
	0, 6, 0, 3, 5, 0, 4, 0, 3, 1,
	3, 4, 5, 0, 3, 1, 3, 2, 3, 1,
	2, 0, 4, 6, 5, 0, 2, 0, 2, 4,
	5, 4, 5, 1, 5, 6, 5, 0, 3, 0,
	1, 1, 3, 3, 3, 0, 4, 1, 3, 3,
	3, 0, 1, 1, 3, 2, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 5,
	4, 5, 1, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 0, 5, 5, 5, 5, 0, 1, 1, 3,
	1, 1, 1, 1, 1, 7, 9, 7, 9, 2,
	1, 7, 9, 7, 9, 8, 5, 0, 1, 0,
	1, 1, 1, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 3, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 2, 1, 2, 2, 1, 1, 2,
	2, 2, 3, 3, 2, 2, 1, 5, 6, 4,
	1, 1, 1, 5, 4, 1, 1, 2, 0, 1,
	1, 2, 5, 0, 1, 1, 2, 2, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 2, 2, 2,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 2,
	2, 2, 2, 4, 1, 1, 2, 5, 6, 8,
	6, 6, 6, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 4, 7, 9, 7, 7, 7, 9, 7,
	7, 0, 2, 0, 1, 1, 2, 4, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 2, 2, 2,
	0, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 5, 0, 1, 3, 0,
	1, 0, 2, 0, 2, 0, 1, 6, 8, 8,
	6, 6, 5, 5, 5, 6, 6, 6, 6, 5,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	1, 1, 1, 4, 4, 6, 8, 6, 4, 5,
	4, 4, 4, 3, 4, 6, 6, 7, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 8, 4, 2, 3,
	2, 4, 2, 2, 4, 6, 2, 2, 4, 6,
	4, 2, 4, 4, 4, 0, 1, 2, 3, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 3, 0, 1, 1, 3, 1,
	3, 3, 3, 3, 3, 2, 1, 1, 1, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 1,
	3, 4, 4, 5, 4, 5, 3, 4, 5, 6,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 2, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 4, 1, 2, 3, 5, 1, 1, 3, 0,
	1, 0, 3, 0, 3, 3, 0, 3, 5, 0,
	3, 5, 0, 1, 1, 0, 1, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -604, -607, -2, -5, 628, -1, -4, -119, -91,
	-7, -14, -121, -122, -8, -117, -9, -10, -12, -95,
	-112, -114, -116, -115, -47, -11, -111, -85, -86, -97,
	-105, -108, -109, -110, -123, -118, -120, -179, -124, -125,
	-126, -167, -129, -131, -132, 618, -92, -93, -94, -33,
	-32, -31, -30, -153, -158, -161, -163, -127, 551, 624,
	454, 14, 503, -15, -16, -549, -17, 263, -353, -354,
	-355, -357, -608, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -156,
	-157, -77, -57, -78, -58, -165, -128, -79, -80, -81,
	-83, -82, -88, -84, -89, -155, -160, -13, -166, -90,
	237, -87, 76, -98, -99, -100, -101, -102, -103, -104,
	-106, -107, 378, 384, 441, 617, 61, -180, -182, 642,
	643, 646, 538, 541, 161, 162, 164, 165, -34, -35,
	-36, -37, -38, -39, -41, -40, -42, -43, -44, -45,
	-46, 233, 16, 546, -18, -21, -19, -22, -20, -28,
	-29, -27, -24, -26, -154, -25, -159, -23, -162, -164,
	-130, 258, 257, 38, 324, 325, 326, 382, 256, 234,
	236, 15, 31, 42, 357, -181, 84, 539, 235, -183,
	13, 648, -6, -3, -2, -140, -144, -148, -151, -152,
	-149, -150, -4, -119, 119, 248, 619, -349, 374, 620,
	622, 621, 87, 95, -342, -344, 454, 263, 378, 384,
	617, 643, 646, 538, 541, 553, 554, 555, 556, 557,
	558, 559, 560, 562, 563, 564, 565, 566, 567, 568,
	578, 579, 569, 570, 571, 572, 573, 574, 575, 576,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 506, 603, 604, 605, 606, 534,
	561, 597, 598, 599, 600, 355, 356, 543, 275, 299,
	409, 305, 312, 161, 180, 174, 203, 194, 539, 169,
	279, 317, 280, 94, 164, 489, 109, 466, 438, 167,
	294, 296, 298, 535, 536, 368, 301, 533, 300, 302,
	304, 537, 281, 358, 190, 185, 293, 277, 183, 282,
	40, 283, 208, 284, 285, 548, 462, 354, 468, 309,
	52, 436, 184, 463, 297, 465, 212, 216, 480, 481,
	178, 179, 470, 483, 207, 210, 211, 255, 351, 352,
	43, 545, 267, 484, 214, 206, 201, 492, 313, 311,
	205, 177, 200, 278, 65, 218, 217, 219, 432, 433,
	434, 435, 286, 287, 372, 479, 197, 186, 359, 170,
	23, 487, 262, 467, 385, 288, 306, 314, 213, 215,
	269, 274, 329, 547, 440, 273, 310, 485, 182, 266,
	295, 261, 488, 639, 171, 387, 289, 165, 303, 482,
	641, 491, 64, 400, 176, 168, 635, 252, 162, 271,
	276, 640, 290, 291, 292, 532, 316, 315, 307, 540,
	198, 268, 204, 188, 175, 199, 163, 270, 490, 401,
	615, 357, 419, 196, 193, 272, 245, 486, 469, 166,
	423, 402, 191, 318, 610, 611, 612, 373, 350, 319,
	320, 189, 259, 460, 461, 323, 429, 341, 403, 439,
	410, 404, 225, 226, 327, 472, 474, 209, 613, 330,
	331, 332, 464, 333, 334, 335, 336, 377, 56, 58,
	96, 99, 98, 644, 645, 63, 29, 363, 366, 398,
	405, 343, 616, 544, 340, 344, 345, 367, 25, 421,
	389, 425, 424, 48, 49, 50, 53, 54, 55, 57,
	59, 60, 51, 531, 382, 395, 493, 45, 47, 392,
	27, 369, 420, 442, 339, 422, 453, 46, 451, 452,
	473, 26, 371, 370, 62, 44, 428, 430, 431, 321,
	337, 380, 625, 494, 375, 391, 394, 376, 342, 365,
	396, 67, 66, 388, 626, 383, 381, 338, 549, 550,
	346, 577, 360, 437, 528, 527, 526, 525, 524, 523,
	522, 521, 324, 325, 326, 406, 407, 408, 418, 411,
	412, 413, 414, 415, 416, 417, 456, 457, 627, 475,
	477, 478, 476, 240, 647, 361, 362, 243, 629, 630,
	97, 631, 633, 632, 28, 634, 637, -430, -428, -349,
	539, 617, 384, 538, 541, 378, 357, 643, 646, 382,
	263, 324, 325, 326, 454, 355, -225, -349, 647, -189,
	247, 39, -239, -349, -189, -87, -16, -15, -181, -182,
	-239, 242, -358, 24, 436, -96, 437, 237, 238, 84,
	77, -349, -9, -110, -8, -117, -85, -179, 441, -356,
	-349, 324, 324, -356, 242, -351, 273, 417, -349, -485,
	248, -434, -407, 274, -433, -409, -436, -410, 32, 233,
	235, 234, 551, 270, 16, 382, 244, 14, 13, 383,
	256, 25, 26, 28, 15, 384, 386, 29, 387, 390,
	391, 392, 42, 395, 396, 263, 87, 95, 90, 281,
	-224, -349, -384, -376, 116, -379, -371, -372, -374, -327,
	-523, -369, 84, 143, 144, 151, 117, 649, -373, -466,
	36, 119, 557, 561, 597, 504, -319, -320, -321, -322,
	-323, -324, -349, -524, -522, 90, 100, 102, 106, 107,
	105, 103, 155, 187, 104, 91, 156, -182, 87, -544,
	567, -343, 590, 603, 604, 605, 606, 589, 61, -493,
	-502, 241, -500, 154, 192, 259, 188, 14, 149, 429,
	189, 598, 599, 600, 564, 586, 506, 568, 578, 593,
	559, 560, 562, 554, 555, 556, 558, 569, 571, 585,
	-503, 581, 591, 592, 577, 601, 602, 594, 595, 596,
	633, 89, 88, 584, 583, 570, 565, 566, 572, 553,
	563, 573, 574, 582, 587, 588, 366, 109, 367, 368,
	496, 358, 369, 248, 436, 70, 370, 371, 372, 373,
	374, 503, 375, 71, 376, 365, 263, 419, 377, 191,
	209, 508, 507, 509, 500, 497, 495, 498, 499, 501,
	502, 575, 576, 580, -133, -134, 608, -598, -311, -599,
	6, 7, 8, 9, -600, 156, -589, 438, 547, 90,
	317, 355, 17, 496, 636, 537, 636, 537, 166, 163,
	-421, 166, 115, 171, 170, -421, 636, 168, 635, 327,
	269, -398, -170, 355, 419, 333, 96, 273, -401, -399,
	535, -487, 321, 317, 293, 243, 112, -171, 253, 252,
	110, 496, 241, 393, 312, 56, 58, -560, -561, 230,
	231, 232, -551, 529, -550, -349, 636, 638, 368, 98,
	99, 635, 27, 242, 379, 269, 474, 472, 473, 475,
	476, 477, 478, -65, -504, -484, 469, 468, -362, 461,
	467, 459, 471, 462, 356, 335, 551, 334, 233, 629,
	536, 530, -337, 403, 439, 493, 494, 380, 440, 480,
	482, 463, 109, 195, 192, 243, 245, 242, 635, 355,
	496, 419, 96, 333, 242, -560, 638, 163, 480, 482,
	438, 273, 417, 41, -427, 429, -426, -428, 481, 492,
	88, 89, 479, -337, 109, 460, 460, -598, -311, -180,
	-182, -120, -549, 537, 636, 243, 355, 419, 273, 244,
	242, 532, 535, 245, 496, 241, 324, 379, 269, 333,
	96, 168, 635, -486, -557, 32, -494, 227, 228, 229,
	33, 34, -1, 123, 648, -376, -376, -6, 651, -6,
	-376, -349, -349, 638, 158, -246, -250, -247, -249, -248,
	-252, -251, 192, 193, 154, 196, 202, 198, 199, 200,
	201, 203, 204, 205, 206, 207, 210, 211, 208, 31,
	209, 259, 188, 189, 190, 191, 212, 174, 194, 544,
	220, 175, 221, 176, 222, 177, 223, 178, 179, 224,
	180, 183, 184, 185, 186, 182, 157, -214, 90, 32,
	84, 157, 90, -206, 265, -189, -239, -231, 157, 649,
	-206, -598, -199, -200, 11, -239, -325, -349, 438, 126,
	-96, 77, -96, 437, 77, -96, 437, 237, -552, -553,
	-554, -556, 237, 437, 436, 238, -115, 157, 281, 17,
	-356, -356, 82, -239, -409, 273, -434, -407, 36, 81,
	158, 246, 158, 81, 84, 380, 355, 419, 381, 496,
	242, 393, 245, 273, 394, 355, 419, 242, 245, 496,
	273, 355, 242, 245, 419, 273, 394, 355, 459, 460,
	245, 27, 385, 388, 389, 460, -508, 492, 158, 115,
	112, 113, 114, -376, 133, -391, 126, 127, 128, 129,
	130, 131, 132, 140, 139, 150, 143, 144, 145, 146,
	147, 148, 149, 141, 142, 136, 116, 134, 138, 135,
	118, 153, -182, -376, -384, 61, -374, -374, -374, -374,
	-349, -466, -381, -376, 84, 84, 84, 84, 157, 103,
	90, -376, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, -501, 84, 84, -388, -389, 84,
	84, -369, -325, 84, 90, 90, 84, 84, 84, 90,
	84, 84, 84, -389, -389, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	-200, 158, -199, 84, -199, -200, -183, -182, 32, 33,
	32, 33, 32, 33, 32, 33, -601, 626, 84, 100,
	644, 225, 17, -349, 635, -349, -583, 32, 540, 540,
	540, 540, 485, 546, 169, 170, 171, -396, 248, -396,
	-396, -223, -349, -225, 379, 245, 532, 245, -171, -396,
	-396, -396, -396, -396, 244, -396, 24, 242, 242, 242,
	242, -396, 503, 126, 126, 59, -562, 173, 158, -551,
	-205, 84, -583, 639, 640, 641, -361, 134, 138, -361,
	-307, 18, -307, 24, 271, 271, 271, -361, 311, -609,
	-610, 17, 136, -359, -610, -359, -359, -361, -611, 244,
	470, 43, 272, 271, -201, -202, 22, -201, 464, 460,
	-451, 465, 466, -363, -610, -362, -361, -361, -362, -361,
	-361, -361, 32, 242, 245, 496, 333, 630, -609, -609,
	31, 31, -485, -485, -239, -485, -485, 530, -338, -349,
	-485, -485, -485, -291, -292, -239, -563, 247, 641, -595,
	-594, 483, -597, 485, 163, -428, 163, -428, 87, -409,
	273, 273, 158, 126, 24, -429, 126, 137, -428, -428,
	-429, -429, -263, 41, -348, 154, -349, 90, -263, 41,
	-592, -591, -239, -200, -183, -182, 85, 85, 85, 540,
	-583, -485, -485, -485, -485, -485, -487, -485, -485, -485,
	-485, -485, -356, -215, -349, -225, 248, -485, -485, -485,
	-485, -184, -185, 145, -376, -349, -184, -3, -142, -141,
	120, 121, 123, 620, 374, 619, 623, 617, -428, 41,
	-479, 401, 400, -473, -475, 84, -474, 84, -474, -474,
	-474, -474, -474, 84, 84, -476, 84, -476, -476, -473,
	-477, 84, -477, -478, 84, -478, -477, -349, -455, 546,
	-382, -384, -349, 39, -497, 61, -179, 84, 31, 84,
	-206, -349, 189, 168, 634, -498, 61, -179, 84, 31,
	-200, -135, 39, -202, 21, 157, 100, 90, -115, -96,
	77, -115, -96, -96, 85, 158, -555, 106, 107, -558,
	207, 198, -349, -113, 90, -7, -8, -9, -10, -47,
	-85, -82, -179, 234, 538, 541, -525, -523, 84, 32,
	428, 81, 17, -435, 242, 496, 379, 269, 245, 355,
	-433, -416, -413, -411, -348, -409, -412, -411, -438, -325,
	460, -136, 443, 442, 323, -376, -376, -376, -376, -376,
	105, 116, 350, 106, 107, -371, -392, 32, 319, 320,
	-372, -372, -372, -372, -372, -372, -372, -372, -372, -372,
	-372, -372, -380, -390, -466, 84, 136, 134, 138, 135,
	118, -374, -374, -372, -372, -265, -348, 154, 85, 158,
	-376, -548, -547, 120, -376, -376, -376, -376, -349, -545,
	-546, 510, 511, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 370, 365, 371, 369, 358, 377, 372, 373,
	191, 527, 528, 521, 522, 523, 524, 525, 526, -382,
	-382, -376, -545, -382, -318, 33, 32, -384, -384, -384,
	85, -376, -559, 348, 347, 349, -203, -349, -382, 85,
	85, 85, 100, -384, -384, -382, -372, -382, -382, -382,
	-382, -546, -318, -318, -318, -318, 145, -384, -384, -318,
	-318, -318, -318, 145, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, 85, 85, 85, 145, -384, -201,
	-134, -506, -505, -376, 41, -135, -202, -602, 627, 84,
	-325, -590, 90, 90, 649, 168, 635, 17, 496, -349,
	17, 242, -349, 100, -349, 100, 486, 487, 167, 170,
	169, -349, 116, -349, -349, 35, 84, -215, -396, -396,
	-396, -567, -349, 91, -417, -414, -411, -349, -349, -407,
	-349, -338, -239, -396, -396, -396, -396, -239, -274, 53,
	54, 55, -411, -172, 56, 57, -563, -550, 35, -204,
	-349, -307, -374, -374, -376, -411, 273, -609, -361, -361,
	-339, -338, -363, -358, -363, -363, -307, -359, -361, -361,
	-376, -363, -359, -307, -349, 460, -307, -307, -451, -361,
	-360, -349, -360, -396, -338, -339, -339, -239, -239, -286,
	-293, -287, -294, 265, 239, 363, 364, 236, 234, 11,
	235, -301, 312, -397, 504, -269, -270, 77, 42, -272,
	263, 405, 398, 275, 279, 94, 280, 438, 281, 244,
	283, 284, 285, 300, 302, 255, 286, 287, 288, 429,
	289, 162, 301, 290, 291, 292, 381, -264, 6, 336,
	546, 41, 51, 52, 452, 451, 549, 276, -349, -567,
	-565, 31, -349, 31, -417, -349, -349, 158, 246, -192,
	-194, -191, -187, -188, -193, -310, -312, -190, 84, -239,
	-182, -349, -428, 158, 484, 486, 487, -595, -429, -595,
	-429, 246, 32, 428, -432, 428, 32, -407, -426, 480,
	482, -422, 90, 429, -412, -431, 81, 154, -505, -429,
	-429, -431, -431, 153, 158, -593, 485, 486, 230, -201,
	100, -241, -239, -567, -416, -407, -349, -485, -241, -241,
	-241, -351, -351, 84, 157, 36, -349, -349, -349, -349,
	-306, 158, -305, 17, -350, -349, 35, 90, 157, -306,
	-143, -141, 122, -376, -6, 619, -376, -6, -6, -376,
	-6, -376, -483, 402, 100, 100, -328, 90, -328, 100,
	100, 100, 552, 85, 90, -420, 81, -499, -385, -543,
	608, -208, 85, -203, -541, -542, -203, -207, -349, -497,
	-231, 126, 126, 126, -499, -208, 85, -541, -201, 609,
	-135, -198, -197, -376, -349, 24, -115, -96, -553, 157,
	355, 158, -204, -435, -415, -412, -437, 145, -349, -423,
	158, 546, 652, 88, 246, -580, -579, 420, 85, 158,
	-509, 247, 503, 90, 649, 436, 225, 226, 105, 350,
	106, 107, -466, -384, -380, -374, -374, -372, -372, -378,
	260, -378, 115, -376, 650, -375, -547, 122, -376, 35,
	158, 35, 158, 82, 157, 85, 85, 17, 17, 85,
	-376, 85, 85, 85, 85, 17, 17, -376, 85, 157,
	85, 85, 85, 85, 82, 85, 158, 85, 85, 85,
	85, 158, -384, -384, -376, -384, 85, 85, 85, -376,
	-376, -376, -384, 85, -376, -376, -376, -376, -376, -376,
	-376, -376, -376, -376, -445, 455, -445, -445, 158, 158,
	158, 85, -135, 84, 100, 158, 645, -332, -331, 90,
	-349, -349, 168, 635, -349, 90, 635, -349, 90, 168,
	171, 171, 170, 90, 36, 24, 310, 24, -224, -226,
	-227, -228, -229, -230, 136, 159, 160, 84, -239, -239,
	-239, -569, 406, -581, 158, 41, -579, 496, -168, 323,
	-400, 82, -175, 17, 546, -239, -239, -239, -239, -253,
	35, 17, -186, -240, -349, 84, 85, 158, -408, 82,
	-349, -339, -307, -307, -363, -307, -307, 158, 23, -361,
	-363, -363, -231, -359, -231, 157, -231, -338, -472, 35,
	-205, 158, 21, 265, -238, -346, -235, -237, 250, -366,
	-236, 253, -537, 251, 249, 110, 254, 308, 111, 244,
	-346, -346, 250, -273, 246, 35, -346, -289, 244, 353,
	308, 251, 21, 265, -288, 244, 111, -349, 250, 254,
	251, 249, -345, 126, -337, 153, 246, 43, 381, -345,
	550, 265, -345, -345, -345, -345, -345, -345, -345, 282,
	282, -345, -345, -345, -345, -345, -345, -345, -345, -345,
	-345, -345, 163, -345, -345, -345, -345, -345, -345, 84,
	328, 277, 278, 310, -570, 406, 31, 361, 361, 362,
	-581, 31, -176, 355, -292, -290, -360, 31, -313, -314,
	-315, -316, -317, 68, 72, 74, 78, 69, 70, 71,
	75, 73, 31, 158, -347, -352, 35, -349, 90, -347,
	-182, -194, -192, -347, 84, -429, -594, -596, 488, 485,
	491, -431, -431, 100, 246, 84, 126, -431, -431, 41,
	-348, -591, 492, 486, -135, 158, 81, -241, -216, -217,
	-218, -219, -246, -325, 193, 196, 198, 199, 200, 201,
	203, 204, 205, 206, 207, 210, 211, 208, 209, 259,
	188, 189, 190, 191, 212, 174, 194, 544, 175, 176,
	177, 178, 179, 180, 183, 184, 185, 186, 182, -349,
	-225, -307, -185, -194, -349, 90, -349, 145, -307, 123,
	-6, 121, -147, -146, -145, 124, 617, 623, 123, 123,
	123, 85, 85, 85, 158, 85, 85, 85, 158, 85,
	158, 100, -512, 465, 40, 158, 84, 85, 158, 61,
	158, 126, 85, 158, -376, -349, 90, -376, 85, 61,
	-135, 90, 158, -195, 37, 38, 157, 438, -349, -523,
	85, -437, 158, 246, 157, 157, -413, 384, -348, -415,
	21, 546, -325, 39, -332, 126, 649, -349, 85, -378,
	-378, 115, -374, -371, 85, 123, -376, 121, -244, -246,
	400, 401, -376, -244, -245, -251, 154, 192, 259, 191,
	190, 188, 400, 401, -263, -349, -376, -376, 85, -376,
	-376, 17, -349, -263, -372, -376, -200, -200, 85, 85,
	-444, -445, -444, -444, 85, 85, 85, 85, -444, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 84,
	100, 102, 100, 102, -505, -603, 63, 625, 62, 428,
	105, 313, 158, 100, 90, 650, 158, 126, 90, -349,
	-349, 17, 242, -349, 17, 171, 90, -582, 317, 355,
	-456, 100, 317, 355, 496, 392, 85, 158, -325, -216,
	-205, 84, -205, -572, 467, 408, 418, -345, -368, -367,
	357, 42, -491, 429, 414, 415, -414, 273, -338, -578,
	97, 126, 81, 340, 344, 345, 341, 342, 343, -394,
	-395, -393, -397, -565, 84, 84, -179, 35, 134, -175,
	84, 84, 35, -467, 330, -246, -239, -186, -349, 17,
	158, -564, 157, -1, -349, -407, -361, -307, -376, -376,
	-307, -361, -361, -363, -349, -231, -467, -246, 35, -287,
	239, 235, -441, 310, 311, -442, -457, 313, -459, 84,
	-243, -325, -236, -536, -537, -396, -349, 111, -536, 111,
	84, -243, -325, -325, -290, -325, -349, -349, -349, -349,
	-297, -296, -325, -299, 32, -300, -349, -349, -349, -349,
	111, -349, 111, -268, 41, 48, 49, 50, -345, -345,
	195, -271, 41, 428, 430, 431, -299, 100, 100, 100,
	100, 90, 90, 90, -345, -345, 100, 90, -352, 90,
	-538, 170, 45, 46, 100, 100, 100, 100, 41, 90,
	-276, 41, 293, 297, 294, 295, 296, 90, 100, 41,
	100, 41, 100, 41, -349, 84, -539, -540, 90, 329,
	-456, -572, -345, 361, -428, 126, 126, -368, -577, 323,
	-178, 496, 32, -209, 239, 235, -565, -419, -418, -325,
	-191, -191, -191, -191, -191, 68, 79, 68, 68, 68,
	73, 68, 73, 68, -315, 79, -419, -193, -205, -352,
	85, -588, -587, -586, -584, 76, 247, 77, -382, -431,
	485, 489, 490, -415, -364, 90, -422, -213, 24, -239,
	-239, -489, 303, 304, 85, 158, -246, -309, 19, 157,
	-309, 119, -6, -143, -145, -376, -6, -376, 619, 374,
	620, 90, 100, 100, -520, 449, 444, 446, 111, -385,
	-507, -506, 61, -179, -203, -499, -542, -505, -349, 650,
	650, 650, 650, 61, -179, -499, -213, -512, -197, -196,
	44, -349, 100, 17, -412, -407, 145, 145, -349, 385,
	-423, 90, 407, 90, 242, 650, 90, -332, -371, -376,
	85, -254, 179, 178, -254, 35, 85, 85, -474, -474,
	-473, -476, -473, -254, -254, 85, 85, 24, 85, 85,
	85, -376, 85, 85, 158, -495, 505, -496, 579, -444,
	-444, -444, -444, -444, -444, -444, -444, -444, -444, -444,
	-444, -444, -444, -444, -444, -387, -386, 265, 450, 632,
	632, 450, 632, 632, 85, 158, -545, 158, -340, 318,
	-340, -331, 90, 246, 90, 168, -349, 90, 635, 90,
	-349, 90, 310, -349, -349, 90, 90, -228, -246, 85,
	35, -232, -233, -234, -243, -235, -237, 35, -573, 94,
	-568, 90, -349, 91, -574, 94, 409, 156, 359, 41,
	410, 411, 426, 354, 100, 100, 416, -566, -349, -177,
	242, 355, -576, 52, 126, 90, -239, -393, -337, 153,
	284, 333, -304, -303, -349, 90, -232, -179, -239, -232,
	-232, -179, -468, 332, 21, 100, 144, -206, 82, 157,
	-194, -240, -349, 145, 85, -307, -231, -307, -307, -361,
	-468, -179, -453, 314, 84, -451, 84, -451, 111, 341,
	-460, -458, 265, -295, 45, 47, -246, -534, -349, -532,
	-534, -349, -532, -532, -396, -376, -295, -243, 246, 31,
	235, -298, 338, 339, 344, -424, 309, 116, -424, 158,
	-195, 158, -349, -263, -263, 31, 90, 90, -241, 85,
	158, 126, 100, 90, -573, -568, 126, -429, 90, 90,
	-574, -578, 126, -242, 242, -338, 158, -209, -209, -307,
	158, 126, -211, -210, 81, 82, -212, 81, -210, 68,
	68, -307, -586, -585, 24, -537, -537, -537, 85, 85,
	15, -218, 41, -308, 20, 21, 145, -308, 123, 121,
	123, 123, -349, 85, 85, -480, 610, -516, -518, 444,
	21, 21, 15, 247, 85, -499, -499, -520, 45, 46,
	-407, -423, 429, -239, 158, 650, -244, -376, 85, -376,
	85, 90, 85, 90, -200, 21, 85, 158, 85, 85,
	85, 158, 85, 85, -376, 85, -545, -341, 189, 90,
	-341, 355, -350, -349, 17, -349, 90, -456, 310, 310,
	242, 240, -179, 85, 158, -179, 90, -571, 420, 90,
	90, 100, 41, 100, 156, 412, -492, -169, 94, -241,
	32, -209, -575, 94, 126, 649, 84, -345, -345, -345,
	-349, 85, 158, -345, -345, 85, 85, 85, -261, 546,
	-469, 264, 100, 144, 100, 144, 100, -347, -194, -349,
	-307, -564, 157, -307, -469, -443, 315, 100, -372, 84,
	-372, 84, -452, 312, 84, 85, 158, -349, -325, -258,
	-257, -255, 105, 116, 41, 398, -256, 94, 153, 298,
	301, 300, 276, 299, -285, -365, 81, 404, 338, 339,
	-397, 610, 534, 249, 110, 111, 386, -366, 84, 84,
	82, 318, 84, 84, -534, 85, -295, -325, 41, -298,
	41, 351, 309, -296, -349, 153, -263, 85, -540, 90,
	-545, -571, 90, -431, -576, 90, -169, -241, -565, -200,
	-418, -505, -376, 84, -376, 84, 68, 11, 19, -369,
	-376, -384, 248, -6, 620, 374, -278, 611, 90, 21,
	90, -514, 90, -419, -480, -138, -275, -337, 281, 85,
	85, 85, -444, -444, -447, -446, -450, 450, 310, 458,
	-384, 90, 90, 85, 85, 90, -349, 168, 90, 649,
	90, -456, -456, -349, -220, -246, -173, 546, -261, -234,
	-173, 21, 546, 358, 41, 100, 41, 413, 90, -177,
	126, 106, 107, -333, -334, 90, -402, -404, -325, 84,
	-263, -265, 90, -303, -369, -369, -259, -179, 35, -260,
	-301, -397, 546, -137, -136, -259, 546, 84, -470, 162,
	100, 144, 100, 100, -307, -307, -470, -459, 21, 85,
	-438, 85, -438, 84, 126, -372, -458, -461, 61, -255,
	105, -372, 90, -265, -266, 41, 297, 293, 126, 126,
	-267, 41, 277, 278, -277, 84, 308, 15, 195, 84,
	111, 111, -239, -402, -402, -535, 340, 341, 342, 346,
	344, 345, 343, -535, -402, -402, 84, -425, -424, -372,
	-345, -345, 153, -575, -201, -204, -533, -349, 249, 21,
	21, -490, 546, -349, -349, -329, 612, 100, 90, 446,
	-278, -481, 613, -510, -451, -263, 126, 85, -449, 118,
	412, 416, -370, -373, 100, 102, 187, 156, 85, 85,
	-349, -336, -335, 90, 90, 90, 310, 545, -174, 60,
	492, 90, 91, 407, 90, 91, 358, -169, 90, 650,
	158, 126, 85, 158, -473, -376, -439, 265, -179, 158,
	-301, -337, -138, -439, -262, -302, -349, 90, -488, 170,
	331, 546, 100, 144, 100, -200, -471, 170, 331, -442,
	85, 85, 85, -438, 100, 85, -465, -462, 84, -301,
	267, 136, 90, 90, 100, 84, -500, 31, 90, -403,
	84, 85, 85, 85, 85, -402, 100, -263, -345, 85,
	85, 158, 637, 84, 21, -329, -482, 614, 90, -519,
	449, -513, -511, 444, 445, 446, 447, 90, -448, -449,
	416, -370, -373, 608, 456, 456, 456, 650, 158, 126,
	-456, -222, -349, 308, 429, -334, 90, -405, -404, -195,
	85, -440, 317, 21, -301, -345, -440, 85, 158, -345,
	-345, 331, 100, 144, 100, -201, 331, -454, 316, 85,
	-465, -301, -464, -463, 315, 268, 84, 85, -376, -388,
	-345, 85, -280, -279, 542, -402, -405, 82, -405, 82,
	-405, 82, -405, 82, 85, -263, -349, 249, -330, -349,
	-514, 90, -521, 247, -517, -518, 448, -511, 21, 446,
	21, 21, -139, 158, 115, 457, 457, 457, -335, 90,
	90, -221, 35, 451, 385, -406, 255, 351, 352, 94,
	546, 338, 339, -195, 21, -441, -263, -302, -369, -369,
	100, 100, 85, 158, -349, 264, 84, -383, -377, -376,
	264, 85, -349, -284, -282, -283, 81, 463, 306, 307,
	85, -535, -535, -535, -535, -285, 85, 158, -528, 84,
	100, -516, -515, -517, 21, -514, 21, -514, -514, 453,
	-448, 90, -345, -345, 90, 90, 337, -325, 84, -453,
	-463, -462, -383, 85, 158, -424, -283, 81, -282, 81,
	16, 15, -405, -405, -405, -405, -349, -531, 31, 85,
	-527, -526, -326, -522, -349, 449, 450, 90, -514, 126,
	-606, -605, 631, 100, 100, -349, -438, -443, 85, -377,
	-281, 303, 304, 31, 170, -281, -530, -529, -327, 85,
	158, 157, 90, 90, 85, -459, 105, 41, 305, 158,
	126, -526, -349, -529, 41, -376, 157, -349,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 0, 0,
	0, 0, 0, 699, 700, 0, 663, 0, 0, 0,
	0, 0, 0, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	0, 336, 332, 253, 254, 255, 256, 257, 258, 259,
	343, 344, 517, 0, 0, 0, 0, 782, -2, 97,
	0, 0, 0, 0, 325, 0, 316, 316, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, -2, 712, 0, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 400, 401, 402, 396, 397, 399, 398, -2, 0,
	0, 712, 0, 0, 0, 790, 0, 0, 0, 833,
	855, 23, 0, 7, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 0, 0, 19, 0, 19, 0,
	0, 0, 1372, 1373, 1374, 1375, 2161, 2131, -2, 1898,
	1875, 2055, 2056, 1953, 1965, 2193, 2194, 2195, 2196, 2197,
	2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207,
	2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217,
	2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227,
	2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237,
	2238, 2239, 2240, 2241, 2242, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 0, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1967, 1968, 1969, 1970, 1971,
	1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
	1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
	1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
	2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
	2052, 2053, 2054, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
	2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
	2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
	2084, 2085, 2086, 2087, -2, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103,
	2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113,
	2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123,
	2124, 2125, 2126, 2127, 2128, 2129, 2130, 2132, 2133, 2134,
	2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144,
	2145, 2146, -2, -2, -2, 2150, 2151, 2152, 2153, 2154,
	2155, 2156, 2157, 2158, 2159, 2160, 2162, 2163, 2164, 2165,
	2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175,
	2176, 2177, 2178, 2179, 2180, 2181, 2182, 0, 309, 307,
	1845, 1875, 1898, 1953, 1965, 1966, 2003, 2055, 2056, 2088,
	2131, 2147, 2148, 2149, 2161, 0, 0, 974, 0, 760,
	0, 0, 765, 1321, 760, 337, 701, 702, 790, 816,
	661, 0, 374, 0, 1889, 378, 2138, 0, 0, 0,
	0, 658, 368, 369, 370, 371, 372, 373, 0, 0,
	947, 0, 0, 364, 0, 331, 1955, 2160, 1376, 0,
	0, 0, 0, 0, 196, 1098, 198, 1100, 202, 210,
	0, 0, 0, 215, 216, 219, 220, 221, 222, 223,
	0, 227, 0, 229, 232, 0, 234, 235, 0, 238,
	239, 240, 0, 250, 251, 252, 1101, 1102, 1103, -2,
	125, 972, 1803, 1689, 0, 1696, 1709, 1720, 1453, 1454,
	1455, 1456, 0, 0, 0, 0, 0, 0, 1464, 1465,
	0, 1493, 2197, 2238, 2239, 0, 1473, 1474, 1475, 1476,
	1477, 1478, 136, 148, 149, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 0, 1750, 1751, 1752, 1660, 1440, 1372, 0,
	2206, 0, 2228, 2233, 2234, 2235, 2236, 2227, 0, 0,
	1645, 0, 1635, 0, 0, -2, -2, 0, 0, 2028,
	-2, 2240, 2241, 2242, 2203, 2224, 2232, 2207, 2208, 2231,
	2199, 2200, 2201, 2194, 2195, 2196, 2198, 2210, 2212, 2223,
	0, 2219, 2229, 2230, 2136, 0, 0, 0, 0, 0,
	2178, 150, 151, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1656, -2, -2, 1659, -2, 1662, -2, -2, -2, -2,
	1667, 1668, -2, 1670, -2, -2, -2, -2, -2, -2,
	-2, 1647, 1648, 1649, 1650, 1639, 1640, 1641, 1642, 1643,
	1644, -2, -2, -2, 816, 897, 0, 816, 0, 791,
	838, 841, 844, 847, 794, 0, 0, 98, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 327,
	315, 317, 0, 321, 0, 314, 1134, 1134, 1134, 0,
	0, 0, 0, 1134, 1134, 1134, 1134, 1134, 0, 1134,
	0, 0, 0, 0, 0, 1134, 0, 1007, 1105, 1106,
	1107, 1132, 1133, 1206, 0, 0, 0, 717, 713, 714,
	715, 716, 804, 0, 806, 809, 0, 0, 638, 638,
	866, 866, 584, 0, 0, 0, 638, 0, 598, 590,
	0, 0, 0, 638, 0, 0, 811, 811, 0, 641,
	648, 638, 638, -2, 638, 638, 635, 638, 0, 0,
	1146, 604, 605, 606, 590, 590, 609, 610, 611, 621,
	622, 649, 1827, 0, 0, 517, 517, 0, 517, 517,
	0, 517, 517, 517, 0, 719, 0, 1998, 1896, 1971,
	1855, 1955, 2160, 0, 282, 2028, 287, 0, 1897, 1916,
	0, 0, 1934, 0, -2, 0, 353, 816, 0, 0,
	790, 0, 0, 0, 0, 517, 517, 517, 517, 517,
	1205, 517, 517, 517, 517, 517, 0, 0, 0, 517,
	517, 517, 517, 0, 0, 856, 857, 852, 853, 854,
	858, 859, 5, 6, 19, 0, 0, 0, 0, 0,
	0, 104, 103, 1913, 0, 1804, 1822, 1755, 1756, 1757,
	1809, 1759, 1813, 1813, 1813, 1813, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1813, 1813, 0, 0,
	1802, 1779, 1811, 1811, 1811, 1809, 1806, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1816, 1816, 1819, 1819, 1816, 0, 414, 412, 413,
	1685, 0, 0, 0, 0, 760, 764, 1319, 0, 0,
	0, 816, -2, 0, 0, 662, 375, 1377, 0, 0,
	379, 0, 380, 0, 0, 382, 0, 0, 0, 403,
	0, 406, 390, 391, 392, 393, 386, 0, 176, 0,
	366, 367, 0, 0, 333, 0, 0, 0, 518, 0,
	0, 0, 0, 0, 0, 207, 203, 211, 214, 224,
	231, 0, 243, 245, 248, 204, 212, 217, 218, 225,
	246, 205, 208, 209, 213, 247, 249, 206, 226, 230,
	244, 228, 233, 236, 237, 242, 0, 177, 0, 0,
	0, 0, 0, 1695, 0, 0, 1728, 1729, 1730, 1731,
	1732, 1733, 1734, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 1689, 0, 0, 1459, 1460, 1461, 1462,
	0, 1466, 0, 1494, 0, 0, 0, 0, 0, 1749,
	1753, 0, 1685, 1685, 0, 1685, 1681, 0, 0, 0,
	0, 0, 0, 1685, 1618, 0, 0, 1620, 1636, 0,
	0, 1622, 1623, 0, 1626, 1627, 1685, 0, 1685, 1631,
	1685, 1685, 1685, 1614, 1615, 0, 1681, 1681, 1681, 1681,
	0, 0, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
	1681, 1681, 1681, 1681, 1681, 1681, 0, 0, 0, 0,
	811, 0, 817, 0, -2, 0, 835, 837, 839, 840,
	842, 843, 845, 846, 848, 849, 796, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 71, 73, 0, 0,
	0, 0, 0, 0, 319, 0, 324, 0, 0, 0,
	0, 0, 971, 0, 0, 1134, 1134, 1134, 1008, 0,
	0, 0, 0, 0, 0, 0, 0, 1134, 1134, 1134,
	1134, 0, 1152, 0, 0, 0, 719, 718, 0, 805,
	0, 0, 70, 577, 578, 579, 866, 0, 0, 581,
	582, 0, 583, 0, 590, 638, 638, 596, 597, 592,
	591, 644, 645, 641, 0, 641, 641, 866, 0, 615,
	616, 617, 638, 638, 623, 812, 0, 624, 625, 641,
	0, 646, 647, 866, 0, 0, 866, 866, 0, 633,
	634, 636, 638, 0, 0, 1134, 0, 654, 592, 592,
	1828, 1829, 0, 0, 1143, 0, 0, 0, 0, 657,
	0, 0, 0, 430, 431, 0, 0, 720, 0, 261,
	265, 0, 268, 0, 1998, 0, 1998, 0, 0, 275,
	0, 0, 0, 0, 0, 0, 305, 306, 0, 0,
	0, 0, 296, 299, 1313, 1314, 1095, 1096, 300, 301,
	345, 346, 0, 811, 834, 836, 830, 831, 832, 0,
	72, 0, 0, 0, 0, 0, 517, 0, 0, 0,
	0, 0, 695, 0, 987, 697, 0, 0, 0, 0,
	0, 874, 868, 870, 942, 136, 874, 8, 121, 118,
	0, 19, 0, 0, 19, 19, 0, 19, 310, 0,
	1825, 1823, 1824, 1758, 1810, 0, 1784, 0, 1785, 1786,
	1787, 1798, 1799, 0, 0, 1780, 0, 1781, 1782, 1783,
	1774, 0, 1775, 1776, 0, 1777, 1778, 308, 411, 0,
	0, 1686, 975, 0, 738, 752, 733, 0, 741, 0,
	0, 1321, 0, 0, 0, 721, 752, 723, 0, 741,
	811, 788, 0, 766, 0, 0, 376, 0, 387, 381,
	0, 388, 383, 384, 0, 0, 405, 407, 408, 409,
	394, 395, 659, 362, 363, 354, 355, 356, 357, 358,
	359, 360, 361, 0, 0, 0, 365, 146, 0, 334,
	335, 0, 0, 0, 190, 191, 192, 193, 194, 195,
	197, 181, 684, 686, 1087, 1099, 0, 1090, 0, 200,
	241, 173, 0, 0, 0, 1690, 1691, 1692, 1693, 1694,
	1699, 0, 1701, 1703, 1705, 1707, 0, 1725, -2, -2,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1710, 1723, 1724, 0, 0, 0, 0, 0,
	0, 1721, 1721, 1716, 0, 1479, 1315, 1316, 1457, 0,
	0, 1491, 1495, 0, 0, 0, 0, 0, 137, 1680,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 0,
	0, 1689, 0, 0, 0, 1682, 1683, 0, 0, 0,
	1573, 0, 0, 1579, 1580, 1581, 0, 747, 0, 1646,
	1619, 1637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 896,
	898, 0, 756, 758, 759, 785, 766, 792, 0, 0,
	0, 96, 101, 0, 1173, 0, 0, 0, 0, 0,
	0, 0, 74, 1147, 75, 1149, 328, 329, 0, 0,
	323, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 1023, 1024, 515, 1081, 0, 0, 0, 1097,
	1122, 1130, 0, 0, 0, 0, 0, 1179, 1009, 1014,
	1015, 1016, 1010, 1011, 1017, 1018, 0, 807, 0, 0,
	911, 580, 639, 640, 867, 587, 1955, 592, 866, 866,
	599, 593, 600, 643, 601, 602, 603, 641, 866, 866,
	813, 638, 641, 626, 642, 641, 1321, 630, 0, 637,
	1321, 655, 1321, 0, 653, 607, 608, 1181, 809, 428,
	429, 434, 436, 0, 485, 485, 485, 468, 485, 0,
	0, 456, 1830, 0, 0, 0, 0, 465, 1830, 0,
	0, 1830, 1830, 1830, 1830, 1830, 1830, 1830, 0, 0,
	1830, 1830, 1830, 1830, 1830, 1830, 1830, 1830, 1830, 1830,
	1830, 0, 1830, 1830, 1830, 1830, 1830, 1298, 1830, 0,
	484, 1144, 475, 476, 477, 478, 483, 0, 0, 512,
	0, 0, 1022, 0, 515, 0, 1064, 0, 0, 879,
	0, 880, 881, 882, 877, 913, 937, 937, 0, 937,
	917, 1321, 0, 0, 0, 273, 274, 262, 0, 263,
	0, 0, 276, 277, 0, 279, 280, 281, 288, 1896,
	1971, 283, 285, 0, 0, 289, 302, 303, 304, 0,
	0, 294, 295, 0, 0, 348, 349, 351, 0, 766,
	1148, 681, 1317, 682, 683, 687, 0, 0, 690, 691,
	692, 693, 694, 989, 0, 0, 1073, 1074, 1075, 1076,
	866, 0, 875, 0, 871, 943, 0, 945, 0, 866,
	0, 119, 19, 0, 112, 109, 0, 0, 0, 0,
	0, 1805, 1754, 1826, 0, 0, 0, 1807, 0, 0,
	0, 0, 0, 102, 768, 728, 0, 732, 749, 0,
	753, 0, 0, 745, 737, 742, 0, 0, 762, 729,
	1320, 0, 0, 0, 722, 0, 0, 727, 766, 0,
	789, 818, 819, 822, 1378, 0, 389, 385, 404, 0,
	517, 0, 0, 0, 184, 1084, 0, 185, 189, 179,
	0, 0, 0, 1089, 0, 1086, 1091, 0, 199, 0,
	0, 174, 175, 1164, 1173, 0, 0, 0, 1700, 1702,
	1704, 1706, 1708, 0, 1711, 1721, 1721, 1717, 0, 1712,
	0, 1714, 0, 1690, 1463, 0, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 1563, 1564, 0, 0, 1568,
	0, 1570, 1571, 1572, 1574, 0, 0, 0, 1578, 0,
	1617, 1638, 1621, 1624, 0, 1628, 0, 1630, 1632, 1633,
	1634, 0, 816, 816, 0, 0, 1535, 1535, 1535, 0,
	0, 0, 0, 1535, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 1481, 1482, 0, 0,
	0, 899, 786, 0, 0, 0, 0, 0, 1171, 0,
	86, 0, 0, 0, 0, 91, 0, 0, 76, 330,
	318, 320, 0, 0, 1135, 0, 0, 0, 0, 0,
	977, 978, 980, 0, 983, 984, 985, 989, 809, 0,
	809, 1034, 1830, 519, 0, 0, 1083, 0, 1053, 0,
	0, 0, -2, 0, 0, 1130, 0, 0, 0, 1183,
	0, 0, 0, 706, 710, 23, 810, 0, 585, 0,
	586, 638, 594, 595, 866, 618, 619, 0, 0, 866,
	638, 638, 629, 641, 650, 0, 651, 1321, 1183, 0,
	0, 1143, 1249, 1217, 446, 0, 1333, 1334, 486, 0,
	1340, 1349, 1134, 1410, 0, 1349, 0, 0, 1351, 1352,
	0, 0, 0, 0, 469, 470, 0, 455, 0, 0,
	0, 0, 0, 0, 454, 0, 0, 496, 0, 0,
	0, 0, 0, 1831, 1830, 1830, 0, 463, 464, 0,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 1830,
	1830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1289, 0, 0, 0, 0, 0, 0, 0,
	0, 1305, 1306, 0, 1034, 1830, 0, 0, 0, 0,
	519, 1051, 1069, 0, 432, 433, 493, 0, 0, 0,
	0, 0, 0, 903, 0, 0, 0, 902, 0, 0,
	0, 0, 0, 0, 809, 938, 0, 940, 941, 915,
	-2, 0, 879, 920, 1685, 0, 266, 267, 0, 0,
	272, 290, 292, 264, 0, 0, 0, 291, 293, 297,
	298, 347, 350, 352, 828, 0, 0, 1207, 0, 990,
	991, 993, 994, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1880, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 988,
	698, 862, 869, 876, 944, 946, 137, 872, 862, 0,
	122, 19, 121, 113, 114, 0, 19, 0, 0, 0,
	0, 1815, 1814, 1800, 0, 1801, 1812, 1817, 0, 1820,
	0, 415, 772, 0, 0, 752, 754, 0, 0, 752,
	0, 0, 761, 0, 0, 0, 0, 0, 0, 752,
	828, 768, 0, 825, 823, 824, 0, 0, 660, 147,
	410, 0, 0, 0, 0, 0, 685, 0, 1088, 181,
	0, 0, 201, 0, 0, 0, 1173, 1168, 1684, 1713,
	1715, 0, 1722, 1718, 1458, 1467, 1492, 0, 0, 1498,
	1510, 1510, 0, 0, 0, 1501, 1813, 1813, 1504, 1809,
	1811, 1809, 1510, 1510, 0, 138, 0, 0, 1569, 0,
	0, 0, 748, 0, 0, 0, 1531, 1533, 1535, 1535,
	1542, 1536, 1543, 1544, 1535, 1535, 1535, 1535, 1549, 1535,
	1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1529,
	0, 0, 1743, 1744, 757, 0, 0, 799, 800, 801,
	802, 803, 0, 0, 61, 61, 1173, 0, 95, 87,
	0, 0, 0, 0, 0, 322, 0, 77, 78, 0,
	0, 85, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 1326, 0, 1038, 1035, 1036, 1037, 0, 1078, 520,
	521, 522, 523, 0, 0, 0, 1082, 0, 0, 1046,
	0, 0, 0, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	-2, 1138, 0, 0, 0, 1326, 1157, 0, 0, 1162,
	1326, 1326, 0, 1191, 0, 1180, 760, 0, -2, 0,
	0, 708, 0, 0, 912, 588, 866, 612, 814, 815,
	1321, 866, 866, 638, 656, 652, 1191, 1182, 0, 435,
	485, 0, 1237, 0, 0, 1243, 0, 1250, 439, 0,
	487, 0, 1339, 1366, 1350, 1366, 1411, 1366, 1366, 1134,
	0, 487, 0, 0, 457, 0, 0, 0, 0, 0,
	453, 490, 822, 440, 442, 443, 444, 494, 495, 497,
	0, 499, 500, 459, 471, 472, 473, 474, 0, 0,
	0, 466, 479, 480, 481, 482, 441, 1266, 1267, 1268,
	1271, 1272, 1273, 1274, 0, 0, 1277, 1278, 1279, 1280,
	1281, 1363, 1364, 1365, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1307, 1308, 1309, 1310, 1311, 1312, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 0, 0, 1302, 0, 0,
	0, 1038, 0, 0, 0, 0, 0, 1078, 1053, 0,
	1071, 0, 1065, 1066, 0, 0, 730, 866, 340, 0,
	907, 900, 0, 886, 887, 904, 888, 905, 906, 892,
	0, 894, 0, 890, 891, 889, 866, 878, 914, 939,
	916, 919, 921, 922, 928, 0, 0, 0, 0, 260,
	269, 270, 271, 278, 0, 539, 284, 784, 0, 1318,
	688, 689, 1208, 1209, 696, 0, 995, 860, 0, 0,
	860, 117, 120, 0, 115, 0, 0, 0, 0, 107,
	105, 1808, 0, 0, 774, 161, 0, 0, 0, 750,
	0, 755, 752, 736, 746, 735, 743, 744, 763, 1322,
	1323, 1324, 1325, 752, 726, 725, 787, 772, 820, 821,
	0, 1379, 377, 0, 1085, 181, 186, 187, 188, 182,
	180, 1092, 0, 1094, 0, 1166, 0, 0, 1719, 1497,
	1468, 1499, 1511, 1512, 1500, 0, 1470, 1471, 1502, 1503,
	1505, 1506, 1507, 1508, 1509, 1472, 1565, 0, 1567, 1575,
	1576, 0, 1625, 1629, 0, 0, 0, 0, 0, 1540,
	1541, 1545, 1546, 1547, 1548, 1550, 1551, 1552, 1553, 1554,
	1555, 1556, 1557, 1558, 1559, 816, 1530, 0, 0, 0,
	0, 0, 0, 0, 797, 0, 0, 0, 63, 0,
	63, 1172, 1174, 0, 942, 0, 0, 92, 0, 0,
	79, 80, 0, 0, 0, 970, 973, 979, 981, 0,
	0, 0, 1327, 1328, 1330, 1331, 1332, 0, 1006, 0,
	0, 1026, 1027, 1028, 1040, 0, 0, 0, 525, 526,
	0, 0, 0, 538, 534, 535, 536, 516, 1077, 1060,
	0, 0, 1049, 0, 0, 1059, 0, 1139, 1830, 1830,
	1830, 0, 0, 1251, 1830, 1830, 0, 1159, 1161, 0,
	0, 1255, 1194, 0, 0, 1185, 0, 937, 0, 0,
	866, 707, 710, 711, 808, 589, 627, 631, 628, 866,
	1194, 427, 1215, 0, 0, 0, 0, 0, 1247, 0,
	0, 1219, 0, 458, 488, 0, -2, 0, 1367, 0,
	1353, 1367, 0, 0, 1366, 0, 447, 487, 0, 0,
	0, 501, 505, 506, 0, 503, 1406, 0, 504, 0,
	492, 0, 498, 1269, 1270, 0, 1275, 1276, 0, 1300,
	0, 0, 0, 438, 507, 0, 0, 0, 508, 509,
	514, 1046, 0, 1060, 0, 1070, 0, 1067, 1068, 816,
	0, 0, 883, 908, 0, 0, 884, 0, 885, 893,
	895, 339, 923, 0, 0, 925, 926, 927, 918, 286,
	829, 992, 0, 850, 0, 0, 873, 851, 0, 19,
	0, 0, 110, 1818, 1821, 776, 0, 773, 162, 0,
	0, 0, 0, 740, 751, 734, 724, 774, 826, 827,
	183, 178, 1093, 1176, 0, 1167, 0, 0, 1577, 0,
	1535, 1532, 1535, 1534, 1526, 0, 1483, 0, 1485, 1486,
	1487, 0, 1489, 1490, 0, 795, 0, 59, 0, 62,
	60, 0, 94, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 1012, 1255, 0, 1012, 1039, 1025, 0, 1079,
	1080, 0, 527, 528, 0, 531, 537, 1041, 0, 0,
	1043, 1044, 1045, 0, 0, 1057, 0, 0, 0, 0,
	1131, 1145, 0, 0, 0, -2, 0, -2, 1156, 0,
	1200, 0, 1192, 0, 1184, 0, 1187, 866, 866, -2,
	704, 709, 0, 632, 1200, 1217, 0, 1238, 0, 0,
	0, 0, 0, 0, 0, 1218, 0, 1231, 489, 1368,
	-2, 1382, 1384, 0, 1144, 1387, 1388, 0, 0, 0,
	0, 0, 0, 1432, 1396, 0, 0, 1400, 1401, 1402,
	0, 0, 1405, 0, 1737, 1738, 0, 1409, 0, 0,
	0, 0, 0, 0, 0, 1347, 448, 449, 0, 451,
	452, 1830, 1407, 491, 445, 1830, 461, 1299, 1303, 1304,
	1301, 513, 510, 511, 1049, 1052, 1063, 1072, 731, 811,
	341, 342, 909, 0, 901, 932, 929, 0, 0, 996,
	861, 864, 111, 116, 0, 0, 778, 0, 775, 0,
	769, 771, 172, 739, 776, 132, 164, 0, 0, 1469,
	1566, 1616, 1538, 1539, 0, 1527, 0, 1521, 1522, 1523,
	1528, 0, 0, 798, 793, 64, 90, 0, 93, 68,
	81, 0, 0, 0, 0, 998, 1005, 1019, 1150, 1329,
	1004, 0, 0, 524, 529, 0, 532, 533, 1061, 1060,
	0, 1047, 1048, 0, 1055, 0, 0, 1118, 1809, 0,
	1140, 1141, 1142, 1252, 1253, 1254, 1210, 1158, 0, -2,
	1263, 0, 0, 1154, 1176, 1210, 0, 0, 1188, 0,
	1195, 0, 1193, 1186, 816, 705, 1197, 437, 1249, 1239,
	0, 1241, 0, 0, 0, 0, 1220, -2, 0, 1383,
	1385, 1386, 1389, 1390, 1391, 1437, 1438, 1439, 0, 0,
	1394, 1434, 1435, 1436, 1395, 0, 0, 0, 0, 0,
	1735, 1736, 1430, 0, 0, 1354, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1355, 0, 0, 0, 1346, 1348, 450,
	0, 0, 1830, 1062, 338, 0, 0, 933, 935, 930,
	931, 863, 0, 106, 108, 123, 0, 777, 163, 0,
	778, 134, 0, 155, 0, 1177, 0, 1537, 1524, 0,
	0, 0, 0, 0, 1739, 1740, 1741, 0, 1484, 1488,
	89, 0, 66, 0, 82, 83, 0, 0, 0, 1020,
	1021, 1029, 1030, 0, 1032, 1033, 530, 1042, 1050, 1054,
	1057, 0, 1109, 0, 822, 0, 1212, 0, 1160, 1143,
	1265, 1830, 1163, 1212, 0, 1257, 1830, 1830, 1178, 0,
	1190, 0, 1202, 0, 1196, 811, 426, 0, 1199, 1235,
	1240, 1242, 1244, 0, 1248, 1246, 1221, -2, 0, 1229,
	0, 0, 1392, 1393, 0, 0, 1635, 1830, 0, 1425,
	0, 1109, 1109, 1109, 1109, 0, 502, 460, 0, 910,
	924, 0, 865, 0, 0, 767, 124, 0, 133, 152,
	0, 165, 166, 0, 0, 0, 0, 1169, 0, 1513,
	0, 0, 0, 1517, 1518, 1519, 1520, 65, 68, 0,
	0, 0, 997, 0, 1031, 1056, 1058, 1108, 1119, 1120,
	822, 1153, 0, 1249, 1264, 0, 1155, 1256, 0, 0,
	0, 1189, 1201, 0, 1204, 703, 1198, 1216, 0, 1245,
	1222, 1230, 0, 1225, 0, 0, 0, 1433, 0, 1399,
	0, 1404, 1413, 1426, 0, 0, 1335, 0, 1337, 0,
	1341, 0, 1343, 0, 0, 462, 934, 936, 0, 780,
	770, 135, 139, 0, 161, 158, 0, 167, 0, 0,
	0, 0, 1165, 0, 0, 1514, 1515, 1516, 67, 69,
	84, 0, 999, 1000, 1013, 1110, 1830, 1830, 0, 0,
	0, 1116, 1117, 1121, 0, 1237, 1269, 1258, 1259, 1260,
	1203, 1236, 1224, 0, -2, 1232, 0, 0, 1687, 1697,
	1698, 1397, 1403, 1412, 1414, 1415, 0, 1427, 1428, 1429,
	1431, 1109, 1109, 1109, 1109, 1345, 779, 0, 126, 0,
	0, 156, 157, 159, 0, 168, 0, 170, 171, 0,
	1525, 1001, 0, 0, 1113, 1114, 0, 1213, 0, 1215,
	1226, -2, 0, 1234, 0, 1398, 1416, 0, 1417, 0,
	0, 0, 1336, 1338, 1342, 1344, 781, 1175, 0, 140,
	0, 142, 144, 145, 1369, 153, 154, 160, 169, 0,
	986, 1002, 0, 1111, 1112, 1115, 0, 1217, 1233, 1688,
	1418, 1420, 1421, 0, 0, 1419, 127, 128, 0, 141,
	0, 0, 1170, 1003, 1214, 1211, 1422, 1424, 1423, 0,
	0, 143, 1370, 129, 130, 131, 0, 1371,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 117, 3, 3, 3, 148, 140, 3,
	84, 85, 145, 143, 158, 144, 157, 146, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 651, 648,
	127, 126, 128, 3, 652, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 150, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 649, 139, 650, 151,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 118, 119, 120, 121, 122, 123, 124,
	125, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 141, 142, 147, 149, 152, 153, 154, 155, 156,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:837
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:844
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:850
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:858
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:883
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:887
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:898
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:935
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:949
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:960
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:972
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:976
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:981
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:985
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:991
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1005
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1009
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1024
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1046
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1053
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1062
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1078
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1088
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1098
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1110
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1120
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1130
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1141
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1152
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1166
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1174
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1209
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1221
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1229
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1238
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1248
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1258
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1268
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1288
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1294
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1301
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1309
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1315
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1324
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1334
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1342
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1350
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1358
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1368
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1376
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1386
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1393
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1402
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1412
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1416
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1422
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1426
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1432
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1441
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1451
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1455
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1461
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1470
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1480
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1501
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1515
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1522
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1526
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1532
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1536
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1542
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1549
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1557
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1561
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1573
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1577
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1591
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1595
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1600
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1607
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1615
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1621
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1630
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1641
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1645
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1651
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1655
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1661
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1665
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1671
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1695
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1714
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1718
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1722
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1727
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1731
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1740
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1750
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1757
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1762
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1769
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1774
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1778
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1806
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1810
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1816
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1824
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1844
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1863
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1888
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1901
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1905
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1911
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1924
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1935
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1948
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1952
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1962
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1975
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1988
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1994
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2000
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2008
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2018
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2055
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2059
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2072
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2081
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2085
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2306
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2315
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2322
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2329
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2338
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2356
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2360
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2366
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2381
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2393
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2399
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2403
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2409
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2416
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2423
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2432
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2462
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2476
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2493
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2499
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2503
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2526
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2535
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2551
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2574
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2597
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2604
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2611
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2633
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2642
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2646
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2650
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2656
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2660
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2666
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2670
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2676
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2680
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2691
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2697
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2702
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2706
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2710
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2722
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2726
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2730
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2734
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2740
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2752
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2757
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2762
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2768
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2794
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2807
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2820
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2836
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2843
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2854
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2865
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2869
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2875
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2885
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2891
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2895
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2901
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2907
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2911
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2915
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2919
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2925
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2938
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2948
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2954
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2958
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2964
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2970
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2981
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2987
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2991
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2995
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3003
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3007
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3015
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3023
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3033
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3041
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3051
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3061
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3081
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3089
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3137
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3141
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3147
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3153
		{
			yyVAL.str = yyDollar[1].str
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3158
		{
			yyVAL.str = "true"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3159
		{
			yyVAL.str = "false"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3160
		{
			yyVAL.str = yyDollar[1].str
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3165
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3171
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3180
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3187
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3195
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3199
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3224
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3247
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3257
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3264
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3273
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3281
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3285
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3291
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3302
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3306
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3312
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3316
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3340
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3350
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3360
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3376
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3394
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3398
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3404
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3408
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3414
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3420
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3428
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3438
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3446
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3456
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3466
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3476
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3483
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3487
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3491
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3495
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3499
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3506
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3512
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3516
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3520
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3524
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3528
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3532
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3536
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3540
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3545
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3576
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3580
		{
			yyVAL.str = string("COLUMN")
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3585
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3591
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3597
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3605
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3609
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3615
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3623
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3630
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3636
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3642
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3648
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3654
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3661
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3668
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3676
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3682
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3694
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3700
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3708
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3712
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3719
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3752
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3767
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3782
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3795
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3801
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3812
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3825
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3829
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3837
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3841
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3846
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3850
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3866
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3870
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3874
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3878
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3885
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3889
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3893
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3897
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3904
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3908
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3915
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3919
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3927
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3934
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3941
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3947
		{
			yyVAL.item = nil
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3952
		{
			yyVAL.item = nil
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4000
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4006
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4012
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4018
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4027
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4035
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4043
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4051
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4055
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4059
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4070
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4074
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4080
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4085
		{
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4089
		{
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4094
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4114
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4128
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4134
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4140
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4146
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4152
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4158
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4167
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4171
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4175
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4179
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4187
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4191
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4210
		{
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4212
		{
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4221
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4231
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4240
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4244
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4248
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4254
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4260
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4266
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4272
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4281
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4292
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4304
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4312
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4318
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4330
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4344
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4350
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4356
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4363
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4372
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4376
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4380
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4385
		{
			yyVAL.str = ""
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4389
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4395
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4410
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4414
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4420
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4428
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4435
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4443
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4449
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4455
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4460
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4468
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4474
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4479
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4485
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4491
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4523
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4531
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4539
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4547
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4551
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4557
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4570
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4578
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4587
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4593
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4601
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4609
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4617
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4623
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4631
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4637
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4645
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4651
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4661
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4666
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4673
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4689
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4702
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4713
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4717
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4723
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4729
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4738
		{
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4740
		{
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4743
		{
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4752
		{
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4756
		{
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4761
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4770
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4777
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4783
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4791
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4798
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4805
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4825
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4833
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4843
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4847
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4853
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4860
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4866
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4874
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4881
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4888
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4907
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4911
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4915
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4920
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4924
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4928
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4934
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4943
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4947
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4953
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4957
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4963
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4967
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4973
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4978
		{
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4982
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4989
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4993
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5000
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5005
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5009
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5015
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5019
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5025
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5029
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5034
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5038
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5051
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5062
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5073
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5095
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5118
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5126
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5135
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5139
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5152
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5156
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5161
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5165
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5172
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5177
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5184
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5190
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5194
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5198
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5202
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5206
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5210
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5215
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5219
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5225
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5235
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5250
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5254
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5268
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5272
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5278
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5287
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5291
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5295
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5299
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5303
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5309
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5316
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5325
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5329
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5335
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5343
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5347
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5352
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5356
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5362
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5366
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5375
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5379
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5385
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5391
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5395
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5401
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5406
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5410
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5414
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5419
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5423
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5432
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5436
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5444
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5448
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5452
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5466
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5470
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5480
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5490
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5500
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5512
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5520
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5528
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5537
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5545
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5553
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5561
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5569
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5577
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5585
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5593
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5601
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5611
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5622
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5636
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5640
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5644
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5649
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5653
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5657
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5666
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5670
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5675
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5679
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprs: yyDollar[3].exprsUnion(),
				RollUp:       yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5687
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5691
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5696
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5700
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5706
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5710
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5716
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5720
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5724
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5728
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5733
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5741
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5747
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5755
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5765
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5775
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5779
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5785
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5794
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5803
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5812
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5822
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5832
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5836
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5842
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5846
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5856
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5860
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5864
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5868
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 896:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5874
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5884
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5888
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5894
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5900
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5904
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5910
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5916
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5920
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5924
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5928
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5934
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5938
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5944
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5948
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5954
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5958
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5964
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5968
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5978
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5991
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5997
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6003
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6017
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6028
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6035
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6039
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6045
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6055
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6059
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6063
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6068
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6072
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6076
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6080
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6085
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6089
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6093
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6097
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6101
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6106
		{
			yyVAL.str = ""
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6110
		{
			yyVAL.str = yyDollar[1].str
		}
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6114
		{
			yyVAL.str = yyDollar[2].str
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6120
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6124
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 942:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6129
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6133
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6137
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6141
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6145
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6151
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 970:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6193
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6206
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6212
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 973:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6218
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6231
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6236
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6243
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6250
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6254
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6260
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6266
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6271
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6275
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6279
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6283
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6290
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6323
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6328
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6335
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6342
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6346
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6352
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6358
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6362
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6366
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6372
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6378
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6384
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6388
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6394
		{
			yyVAL.str = ""
		}
	case 1003:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6401
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1004:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6407
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6422
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6439
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6456
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6460
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6466
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1010:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6470
		{
			yyVAL.str = "DEFINER = "
		}
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6474
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1012:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6479
		{
			yyVAL.str = ""
		}
	case 1013:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6483
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6497
		{
			yyVAL.str = ""
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6505
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6511
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6516
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6522
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6535
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6540
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6545
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6551
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6558
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6565
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6572
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6579
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6587
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6593
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6600
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6607
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6615
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6621
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6630
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6647
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6663
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6682
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6688
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6697
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6715
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6721
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6728
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6736
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6742
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6750
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6756
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6764
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6770
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6779
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6783
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6788
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6792
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6799
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6804
		{
			yyVAL.str = ""
		}
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6808
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1062:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6814
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6827
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6838
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6842
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6848
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6854
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6860
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6867
		{
			yyVAL.str = ""
		}
	case 1070:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6871
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6876
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6880
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6886
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6894
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6902
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6910
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6918
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6923
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6935
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6946
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7055
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7059
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7065
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7078
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7082
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7088
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7101
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7105
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7109
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7114
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7118
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7124
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7131
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7137
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7146
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1097:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7153
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7164
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7168
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7174
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7183
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7187
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7191
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7196
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7200
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7204
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7208
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7214
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7245
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7249
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7275
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7281
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7293
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7299
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7305
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7311
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7317
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7325
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7329
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7335
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7349
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7363
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7367
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7371
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7375
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7379
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7383
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7387
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7393
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7408
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7412
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7423
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7427
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7432
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7436
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7442
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7446
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7452
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7461
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7470
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7476
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7480
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7486
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7497
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7503
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7521
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7539
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7557
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7573
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7577
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7586
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7598
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7607
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7619
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7629
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7639
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7650
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7660
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7671
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7679
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7690
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7697
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7707
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7720
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7728
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7737
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7746
		{
			yyVAL.str = ""
		}
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7750
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7756
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7760
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7765
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7769
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7776
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7788
		{
			yyVAL.str = ""
		}
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7792
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1178:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7798
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7819
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7833
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7837
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7841
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7847
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7851
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7858
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7865
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7872
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7879
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7883
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7887
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7891
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7895
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7902
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7909
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7913
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7920
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7927
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7931
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7937
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7943
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7947
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7954
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7961
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7968
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7975
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7979
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7984
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7988
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7992
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7997
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8001
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8014
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8018
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8026
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8034
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8038
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8050
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8054
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8060
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8064
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8070
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8083
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8097
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8101
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8107
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8111
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8117
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8126
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8137
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8141
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8146
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8150
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8156
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8161
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8169
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8173
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8183
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8187
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8198
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8206
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8214
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8222
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8233
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8242
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8252
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8262
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8266
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8271
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8275
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8281
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8285
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8291
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8300
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8310
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8314
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8320
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8324
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8330
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8339
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8349
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8353
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8359
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8363
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8367
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8373
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8377
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8381
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8385
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8389
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8393
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8397
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8402
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8406
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8410
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8414
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8418
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8422
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8426
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8430
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8434
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8438
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8442
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8446
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8450
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8456
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8462
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8466
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8470
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8474
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8478
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8484
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8490
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8496
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8502
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8508
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8514
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8518
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8522
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8526
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8531
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8542
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8546
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8552
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8563
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8567
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8573
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8577
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8581
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8585
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8589
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8593
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8607
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8611
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8620
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8626
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8634
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8638
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8645
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8654
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8662
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8670
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8677
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8681
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8687
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8691
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8695
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8701
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8705
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8711
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8724
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8737
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8776
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8816
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8830
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8836
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8849
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8862
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8875
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8888
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8903
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8913
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8919
		{
			yyVAL.str = ""
		}
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8923
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8933
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8939
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8945
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8966
		{
			yyVAL.str = ""
		}
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8970
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8976
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8982
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8986
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8991
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8999
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9003
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9007
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9011
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9017
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9023
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9027
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9032
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9039
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9043
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9049
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9053
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9059
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9063
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9067
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9071
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9075
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9079
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9084
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9088
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9092
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9096
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9100
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9104
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9108
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9112
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9116
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9120
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9134
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9138
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9142
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9146
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9150
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9154
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9160
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9164
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9169
		{
			yyVAL.str = ""
		}
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9173
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9179
		{
			yyVAL.str = ""
		}
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9183
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1412:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9189
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9206
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9213
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9220
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9227
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9234
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9243
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9249
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9255
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9259
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9263
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9267
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9271
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9276
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9283
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9287
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9291
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9296
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9300
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9305
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9309
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9325
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9331
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9335
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9339
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9343
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9347
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9351
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9355
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9359
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9363
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9367
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9371
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9375
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9379
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9385
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9389
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9393
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9397
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9401
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9405
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9409
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9413
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9417
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9421
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9463
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9467
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9471
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9476
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9484
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9488
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9492
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9496
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9500
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9510
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9514
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9518
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9522
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9526
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9530
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9534
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9540
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9549
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9558
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9569
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9579
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9589
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9598
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9608
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9618
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9628
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9637
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9647
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9651
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9656
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9660
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9666
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9670
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9676
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9685
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9697
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9714
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9731
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9744
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9757
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9769
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9783
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9798
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9813
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9830
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9845
		{
		}
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9852
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9856
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9860
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9866
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9870
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9874
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9878
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9884
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9888
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9892
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9898
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9906
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9916
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9920
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9927
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9932
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9936
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9941
		{
			yyVAL.str = ","
		}
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9945
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9950
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9954
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1535:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9959
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9966
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9992
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10004
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10016
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10027
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10038
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10049
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10059
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10069
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10080
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10091
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10102
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10113
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10124
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10135
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10146
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10157
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10168
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10179
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10190
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10201
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10212
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10223
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10241
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10250
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10259
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10268
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10277
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10288
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10297
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10307
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10316
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10325
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10334
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10343
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10355
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10366
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10379
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10391
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10414
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10450
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10463
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10476
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10488
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10497
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10505
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10513
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10526
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10535
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10546
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10557
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10566
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10578
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10588
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10598
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10607
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10618
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10627
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10637
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10646
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10655
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10665
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10669
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10675
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10679
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10698
		{
		}
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10700
		{
		}
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10741
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10753
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10757
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10761
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10767
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10772
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10776
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10782
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10786
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10792
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10796
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10803
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10807
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10811
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10820
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10824
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10828
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10833
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10837
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10843
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10847
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10851
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10855
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10859
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10863
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10867
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10871
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10875
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10879
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10887
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10891
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10895
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10899
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10903
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10907
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10911
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10915
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10919
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10923
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10929
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10933
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10939
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10943
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10950
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10954
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10958
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10964
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10968
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10972
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10976
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10980
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10984
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10988
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10994
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10998
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11002
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11006
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11012
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11025
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11030
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11036
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11040
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11053
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11058
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11062
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11066
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11070
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11074
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11081
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11085
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11089
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11093
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11100
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11111
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11116
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11122
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11134
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11146
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11158
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11171
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11184
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11197
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11210
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11223
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11236
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11249
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11262
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11275
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11288
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11303
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11330
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11372
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11408
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11444
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11461
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11473
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11493
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11513
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11533
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11549
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11562
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11575
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11588
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11601
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11613
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11625
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11637
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11649
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11661
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11673
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11685
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11697
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11709
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11721
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11734
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11747
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11760
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11773
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11788
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11796
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11805
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11815
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11838
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11843
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11849
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11856
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11860
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11865
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11869
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11875
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11881
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11888
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11895
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11904
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11911
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11918
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11927
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11931
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11935
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11941
		{
		}
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11943
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11953
		{
			yyVAL.str = ""
		}
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11957
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
