// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const SELECT = 57352
const STREAM = 57353
const INSERT = 57354
const UPDATE = 57355
const DELETE = 57356
const FROM = 57357
const WHERE = 57358
const GROUP = 57359
const HAVING = 57360
const ORDER = 57361
const BY = 57362
const LIMIT = 57363
const OFFSET = 57364
const FOR = 57365
const LOWER_THAN_SET = 57366
const SET = 57367
const ALL = 57368
const DISTINCT = 57369
const DISTINCTROW = 57370
const AS = 57371
const EXISTS = 57372
const ASC = 57373
const DESC = 57374
const INTO = 57375
const DUPLICATE = 57376
const DEFAULT = 57377
const LOCK = 57378
const KEYS = 57379
const VALUES = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const SUBQUERY_AS_EXPR = 57399
const LOWER_THAN_STRING = 57400
const ID = 57401
const AT_ID = 57402
const AT_AT_ID = 57403
const STRING = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const INTEGRAL = 57409
const HEX = 57410
const BIT_LITERAL = 57411
const FLOAT = 57412
const HEXNUM = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const LOWER_THAN_CHARSET = 57417
const CHARSET = 57418
const UNIQUE = 57419
const KEY = 57420
const OR = 57421
const PIPE_CONCAT = 57422
const XOR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const ASSIGNMENT = 57440
const SHIFT_LEFT = 57441
const SHIFT_RIGHT = 57442
const DIV = 57443
const MOD = 57444
const UNARY = 57445
const COLLATE = 57446
const BINARY = 57447
const UNDERSCORE_BINARY = 57448
const INTERVAL = 57449
const BEGIN = 57450
const START = 57451
const TRANSACTION = 57452
const COMMIT = 57453
const ROLLBACK = 57454
const WORK = 57455
const CONSISTENT = 57456
const SNAPSHOT = 57457
const CHAIN = 57458
const NO = 57459
const RELEASE = 57460
const PRIORITY = 57461
const QUICK = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const DECIMAL_VALUE = 57476
const TIME = 57477
const TIMESTAMP = 57478
const DATETIME = 57479
const YEAR = 57480
const CHAR = 57481
const VARCHAR = 57482
const BOOL = 57483
const CHARACTER = 57484
const VARBINARY = 57485
const NCHAR = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const GEOMETRY = 57497
const POINT = 57498
const LINESTRING = 57499
const POLYGON = 57500
const GEOMETRYCOLLECTION = 57501
const MULTIPOINT = 57502
const MULTILINESTRING = 57503
const MULTIPOLYGON = 57504
const INT1 = 57505
const INT2 = 57506
const INT3 = 57507
const INT4 = 57508
const INT8 = 57509
const SQL_SMALL_RESULT = 57510
const SQL_BIG_RESULT = 57511
const SQL_BUFFER_RESULT = 57512
const LOW_PRIORITY = 57513
const HIGH_PRIORITY = 57514
const DELAYED = 57515
const CREATE = 57516
const ALTER = 57517
const DROP = 57518
const RENAME = 57519
const ANALYZE = 57520
const ADD = 57521
const SCHEMA = 57522
const TABLE = 57523
const INDEX = 57524
const VIEW = 57525
const TO = 57526
const IGNORE = 57527
const IF = 57528
const PRIMARY = 57529
const COLUMN = 57530
const CONSTRAINT = 57531
const SPATIAL = 57532
const FULLTEXT = 57533
const FOREIGN = 57534
const KEY_BLOCK_SIZE = 57535
const SHOW = 57536
const DESCRIBE = 57537
const EXPLAIN = 57538
const DATE = 57539
const ESCAPE = 57540
const REPAIR = 57541
const OPTIMIZE = 57542
const TRUNCATE = 57543
const MAXVALUE = 57544
const PARTITION = 57545
const REORGANIZE = 57546
const LESS = 57547
const THAN = 57548
const PROCEDURE = 57549
const TRIGGER = 57550
const STATUS = 57551
const VARIABLES = 57552
const ROLE = 57553
const PROXY = 57554
const AVG_ROW_LENGTH = 57555
const STORAGE = 57556
const DISK = 57557
const MEMORY = 57558
const CHECKSUM = 57559
const COMPRESSION = 57560
const DATA = 57561
const DIRECTORY = 57562
const DELAY_KEY_WRITE = 57563
const ENCRYPTION = 57564
const ENGINE = 57565
const MAX_ROWS = 57566
const MIN_ROWS = 57567
const PACK_KEYS = 57568
const ROW_FORMAT = 57569
const STATS_AUTO_RECALC = 57570
const STATS_PERSISTENT = 57571
const STATS_SAMPLE_PAGES = 57572
const DYNAMIC = 57573
const COMPRESSED = 57574
const REDUNDANT = 57575
const COMPACT = 57576
const FIXED = 57577
const COLUMN_FORMAT = 57578
const AUTO_RANDOM = 57579
const RESTRICT = 57580
const CASCADE = 57581
const ACTION = 57582
const PARTIAL = 57583
const SIMPLE = 57584
const CHECK = 57585
const ENFORCED = 57586
const RANGE = 57587
const LIST = 57588
const ALGORITHM = 57589
const LINEAR = 57590
const PARTITIONS = 57591
const SUBPARTITION = 57592
const SUBPARTITIONS = 57593
const TYPE = 57594
const ANY = 57595
const SOME = 57596
const PREPARE = 57597
const DEALLOCATE = 57598
const PROPERTIES = 57599
const PARSER = 57600
const VISIBLE = 57601
const INVISIBLE = 57602
const BTREE = 57603
const HASH = 57604
const RTREE = 57605
const BSI = 57606
const ZONEMAP = 57607
const LEADING = 57608
const BOTH = 57609
const TRAILING = 57610
const UNKNOWN = 57611
const EXPIRE = 57612
const ACCOUNT = 57613
const UNLOCK = 57614
const DAY = 57615
const NEVER = 57616
const SECOND = 57617
const ASCII = 57618
const COALESCE = 57619
const COLLATION = 57620
const HOUR = 57621
const MICROSECOND = 57622
const MINUTE = 57623
const MONTH = 57624
const QUARTER = 57625
const REPEAT = 57626
const REVERSE = 57627
const ROW_COUNT = 57628
const WEEK = 57629
const REVOKE = 57630
const FUNCTION = 57631
const PRIVILEGES = 57632
const TABLESPACE = 57633
const EXECUTE = 57634
const SUPER = 57635
const GRANT = 57636
const OPTION = 57637
const REFERENCES = 57638
const REPLICATION = 57639
const SLAVE = 57640
const CLIENT = 57641
const USAGE = 57642
const RELOAD = 57643
const FILE = 57644
const TEMPORARY = 57645
const ROUTINE = 57646
const EVENT = 57647
const SHUTDOWN = 57648
const NULLX = 57649
const AUTO_INCREMENT = 57650
const APPROXNUM = 57651
const SIGNED = 57652
const UNSIGNED = 57653
const ZEROFILL = 57654
const ADMIN_NAME = 57655
const RANDOM = 57656
const SUSPEND = 57657
const USER = 57658
const IDENTIFIED = 57659
const CIPHER = 57660
const ISSUER = 57661
const X509 = 57662
const SUBJECT = 57663
const SAN = 57664
const REQUIRE = 57665
const SSL = 57666
const NONE = 57667
const PASSWORD = 57668
const MAX_QUERIES_PER_HOUR = 57669
const MAX_UPDATES_PER_HOUR = 57670
const MAX_CONNECTIONS_PER_HOUR = 57671
const MAX_USER_CONNECTIONS = 57672
const FORMAT = 57673
const VERBOSE = 57674
const CONNECTION = 57675
const LOAD = 57676
const INFILE = 57677
const TERMINATED = 57678
const OPTIONALLY = 57679
const ENCLOSED = 57680
const ESCAPED = 57681
const STARTING = 57682
const LINES = 57683
const DATABASES = 57684
const TABLES = 57685
const EXTENDED = 57686
const FULL = 57687
const PROCESSLIST = 57688
const FIELDS = 57689
const COLUMNS = 57690
const OPEN = 57691
const ERRORS = 57692
const WARNINGS = 57693
const INDEXES = 57694
const SCHEMAS = 57695
const NAMES = 57696
const GLOBAL = 57697
const SESSION = 57698
const ISOLATION = 57699
const LEVEL = 57700
const READ = 57701
const WRITE = 57702
const ONLY = 57703
const REPEATABLE = 57704
const COMMITTED = 57705
const UNCOMMITTED = 57706
const SERIALIZABLE = 57707
const LOCAL = 57708
const CURRENT_TIMESTAMP = 57709
const DATABASE = 57710
const CURRENT_TIME = 57711
const LOCALTIME = 57712
const LOCALTIMESTAMP = 57713
const UTC_DATE = 57714
const UTC_TIME = 57715
const UTC_TIMESTAMP = 57716
const REPLACE = 57717
const CONVERT = 57718
const SEPARATOR = 57719
const CURRENT_DATE = 57720
const CURRENT_USER = 57721
const CURRENT_ROLE = 57722
const SECOND_MICROSECOND = 57723
const MINUTE_MICROSECOND = 57724
const MINUTE_SECOND = 57725
const HOUR_MICROSECOND = 57726
const HOUR_SECOND = 57727
const HOUR_MINUTE = 57728
const DAY_MICROSECOND = 57729
const DAY_SECOND = 57730
const DAY_MINUTE = 57731
const DAY_HOUR = 57732
const YEAR_MONTH = 57733
const SQL_TSI_HOUR = 57734
const SQL_TSI_DAY = 57735
const SQL_TSI_WEEK = 57736
const SQL_TSI_MONTH = 57737
const SQL_TSI_QUARTER = 57738
const SQL_TSI_YEAR = 57739
const SQL_TSI_SECOND = 57740
const SQL_TSI_MINUTE = 57741
const RECURSIVE = 57742
const CONFIG = 57743
const MATCH = 57744
const AGAINST = 57745
const BOOLEAN = 57746
const LANGUAGE = 57747
const WITH = 57748
const QUERY = 57749
const EXPANSION = 57750
const ADDDATE = 57751
const BIT_AND = 57752
const BIT_OR = 57753
const BIT_XOR = 57754
const CAST = 57755
const COUNT = 57756
const APPROX_COUNT_DISTINCT = 57757
const APPROX_PERCENTILE = 57758
const CURDATE = 57759
const CURTIME = 57760
const DATE_ADD = 57761
const DATE_SUB = 57762
const EXTRACT = 57763
const GROUP_CONCAT = 57764
const MAX = 57765
const MID = 57766
const MIN = 57767
const NOW = 57768
const POSITION = 57769
const SESSION_USER = 57770
const STD = 57771
const STDDEV = 57772
const STDDEV_POP = 57773
const STDDEV_SAMP = 57774
const SUBDATE = 57775
const SUBSTR = 57776
const SUBSTRING = 57777
const SUM = 57778
const SYSDATE = 57779
const SYSTEM_USER = 57780
const TRANSLATE = 57781
const TRIM = 57782
const VARIANCE = 57783
const VAR_POP = 57784
const VAR_SAMP = 57785
const AVG = 57786
const JSON_EXTRACT = 57787
const ROW = 57788
const OUTFILE = 57789
const HEADER = 57790
const MAX_FILE_SIZE = 57791
const FORCE_QUOTE = 57792
const UNUSED = 57793

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"JSON_EXTRACT",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6972

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 63,
	21, 411,
	-2, 392,
	-1, 68,
	199, 583,
	-2, 619,
	-1, 84,
	226, 275,
	227, 275,
	-2, 296,
	-1, 335,
	63, 1411,
	470, 1411,
	-2, 97,
	-1, 354,
	63, 744,
	470, 744,
	-2, 581,
	-1, 355,
	63, 574,
	470, 574,
	-2, 582,
	-1, 361,
	21, 412,
	-2, 375,
	-1, 435,
	94, 1292,
	105, 1292,
	124, 1292,
	-2, 1111,
	-1, 464,
	21, 412,
	-2, 375,
	-1, 620,
	58, 1440,
	-2, 1447,
	-1, 628,
	58, 1441,
	-2, 1455,
	-1, 630,
	58, 1437,
	-2, 1457,
	-1, 631,
	58, 1438,
	-2, 1458,
	-1, 636,
	58, 1439,
	-2, 1464,
	-1, 637,
	58, 1442,
	-2, 1465,
	-1, 638,
	58, 1443,
	-2, 1466,
	-1, 639,
	58, 874,
	-2, 1467,
	-1, 640,
	58, 875,
	-2, 1468,
	-1, 641,
	58, 876,
	-2, 1469,
	-1, 643,
	58, 1444,
	-2, 1471,
	-1, 644,
	58, 894,
	-2, 1472,
	-1, 645,
	58, 893,
	-2, 1473,
	-1, 648,
	58, 1445,
	-2, 1476,
	-1, 649,
	58, 1446,
	-2, 1477,
	-1, 655,
	58, 956,
	-2, 1292,
	-1, 656,
	58, 965,
	-2, 1317,
	-1, 657,
	58, 969,
	-2, 1356,
	-1, 658,
	58, 980,
	-2, 1416,
	-1, 659,
	58, 982,
	-2, 1426,
	-1, 660,
	58, 970,
	-2, 1431,
	-1, 661,
	58, 978,
	-2, 1435,
	-1, 662,
	58, 959,
	-2, 1436,
	-1, 816,
	1, 609,
	60, 609,
	469, 609,
	-2, 616,
	-1, 955,
	21, 411,
	-2, 802,
	-1, 1002,
	124, 1121,
	-2, 1119,
	-1, 1004,
	124, 510,
	-2, 1116,
	-1, 1005,
	124, 511,
	-2, 1117,
	-1, 1199,
	1, 610,
	60, 610,
	469, 610,
	-2, 616,
	-1, 1287,
	58, 1023,
	-2, 1433,
	-1, 1288,
	58, 1024,
	-2, 1434,
	-1, 1455,
	56, 332,
	59, 332,
	-2, 708,
	-1, 1777,
	79, 616,
	120, 616,
	156, 616,
	159, 616,
	-2, 656,
	-1, 1779,
	260, 769,
	-2, 750,
	-1, 1806,
	56, 332,
	59, 332,
	-2, 709,
	-1, 1891,
	79, 616,
	120, 616,
	156, 616,
	159, 616,
	-2, 657,
	-1, 1919,
	260, 769,
	-2, 751,
	-1, 2309,
	59, 631,
	60, 631,
	-2, 616,
	-1, 2313,
	59, 631,
	60, 631,
	-2, 616,
	-1, 2325,
	59, 635,
	60, 635,
	-2, 616,
	-1, 2328,
	59, 636,
	60, 636,
	-2, 616,
}

const yyPrivate = 57344

const yyLast = 23667

var yyAct = [...]int{
	801, 1290, 2315, 2313, 2312, 2320, 2286, 665, 2260, 790,
	1951, 663, 2151, 684, 2231, 2275, 1247, 1931, 2212, 2124,
	2213, 1887, 2105, 1771, 552, 1184, 1949, 886, 101, 2060,
	2128, 598, 590, 314, 320, 1950, 320, 2112, 851, 104,
	362, 1939, 1243, 1800, 361, 696, 63, 1597, 318, 22,
	1431, 1835, 324, 1920, 1964, 820, 433, 1492, 1938, 1458,
	356, 356, 1593, 540, 530, 1581, 100, 1828, 871, 619,
	1838, 389, 1846, 1471, 1850, 1642, 306, 845, 63, 1242,
	1439, 1613, 822, 1602, 1598, 1783, 1672, 1534, 1193, 1662,
	1680, 1651, 434, 984, 542, 459, 1608, 1205, 993, 985,
	101, 1497, 785, 999, 1002, 674, 1360, 1278, 1374, 994,
	62, 864, 848, 1229, 664, 1470, 846, 1433, 3, 1428,
	317, 15, 315, 6, 803, 1204, 1304, 1895, 441, 30,
	316, 5, 1200, 436, 666, 829, 786, 438, 461, 440,
	1291, 391, 612, 63, 1289, 868, 22, 326, 1190, 831,
	830, 1292, 888, 1166, 474, 307, 310, 891, 425, 388,
	922, 30, 566, 1245, 582, 512, 1269, 807, 777, 12,
	327, 328, 7, 4, 1173, 97, 1975, 1883, 491, 1770,
	798, 987, 599, 95, 1947, 319, 611, 2178, 1169, 1410,
	407, 92, 96, 1582, 27, 86, 69, 568, 1434, 2168,
	96, 96, 528, 96, 439, 27, 86, 69, 358, 96,
	96, 27, 86, 69, 1417, 96, 458, 511, 15, 396,
	6, 322, 305, 559, 1420, 746, 30, 1430, 5, 1560,
	410, 788, 402, 426, 853, 854, 446, 445, 743, 564,
	93, 553, 554, 386, 569, 2216, 2217, 766, 93, 93,
	551, 93, 2200, 550, 553, 554, 2198, 93, 745, 833,
	793, 1429, 506, 93, 2235, 2058, 444, 502, 2061, 2062,
	2063, 2064, 1585, 2139, 1586, 2142, 1587, 1978, 1772, 797,
	1614, 1615, 1616, 1617, 378, 1402, 1643, 468, 865, 477,
	2127, 331, 331, 1442, 1440, 1437, 1441, 1443, 1791, 1436,
	1435, 1442, 1440, 1646, 1441, 1443, 1171, 1169, 467, 404,
	448, 411, 403, 1191, 1961, 1834, 1833, 493, 466, 1936,
	2036, 1880, 320, 1618, 101, 503, 442, 497, 2177, 504,
	505, 1767, 363, 492, 2044, 1817, 2226, 778, 1502, 1282,
	1283, 1645, 2202, 1816, 401, 321, 463, 465, 2030, 2215,
	438, 464, 405, 2305, 2321, 498, 412, 63, 63, 440,
	2240, 2197, 484, 780, 2153, 2175, 1813, 1281, 1282, 1283,
	2024, 443, 2247, 68, 2296, 94, 2159, 1993, 1279, 2113,
	2114, 2115, 2117, 2116, 1445, 1446, 1447, 1448, 389, 2126,
	578, 1992, 360, 84, 2180, 2181, 2149, 2150, 2322, 2153,
	477, 380, 2204, 2205, 1418, 549, 548, 2316, 500, 517,
	560, 377, 376, 531, 565, 2287, 1981, 460, 1535, 2015,
	2137, 529, 356, 447, 439, 437, 501, 567, 434, 434,
	434, 1814, 372, 356, 356, 495, 532, 533, 1414, 535,
	30, 30, 479, 478, 2019, 779, 1256, 496, 499, 320,
	615, 615, 488, 1177, 1606, 1768, 805, 534, 323, 2278,
	494, 1830, 1829, 748, 537, 856, 595, 417, 470, 471,
	383, 384, 385, 1254, 1253, 1490, 563, 1252, 2090, 572,
	857, 764, 1251, 601, 570, 571, 544, 306, 356, 356,
	467, 356, 370, 556, 557, 749, 855, 414, 415, 2300,
	791, 2264, 1809, 1630, 1588, 63, 879, 482, 744, 356,
	356, 1499, 398, 1459, 400, 410, 419, 418, 63, 397,
	395, 394, 406, 399, 375, 408, 409, 63, 1408, 1407,
	773, 1401, 1396, 356, 356, 1220, 816, 371, 1182, 389,
	2203, 2179, 821, 545, 1163, 514, 101, 516, 472, 1501,
	903, 812, 1582, 479, 478, 752, 597, 480, 553, 554,
	838, 462, 553, 554, 2125, 356, 866, 101, 2279, 577,
	940, 390, 1607, 1442, 1440, 1634, 1441, 1443, 1280, 356,
	434, 1172, 356, 836, 826, 490, 2037, 1948, 1195, 379,
	614, 614, 1411, 806, 508, 588, 589, 1574, 880, 1815,
	1576, 30, 772, 543, 769, 70, 356, 356, 885, 101,
	30, 795, 768, 70, 70, 900, 70, 555, 775, 1812,
	558, 600, 70, 70, 546, 839, 889, 825, 70, 755,
	750, 539, 2017, 305, 610, 810, 2016, 741, 437, 834,
	835, 2020, 2021, 827, 828, 2282, 796, 887, 751, 890,
	1575, 771, 1168, 331, 770, 767, 800, 781, 824, 804,
	789, 585, 586, 587, 592, 592, 583, 841, 2273, 1432,
	957, 1603, 1606, 759, 760, 2163, 794, 584, 402, 1649,
	799, 811, 604, 605, 606, 607, 608, 609, 1398, 2276,
	2277, 2091, 2093, 2094, 2095, 2092, 1294, 1293, 818, 817,
	581, 1367, 1167, 832, 1258, 451, 456, 457, 883, 469,
	1740, 1375, 416, 547, 955, 1365, 1366, 1364, 867, 1987,
	331, 402, 792, 872, 1426, 1375, 862, 1540, 381, 872,
	872, 840, 809, 844, 877, 878, 899, 896, 863, 943,
	944, 945, 946, 947, 940, 896, 991, 991, 996, 2026,
	874, 875, 876, 2025, 884, 404, 1787, 904, 403, 763,
	1185, 1186, 1451, 1782, 881, 331, 2311, 762, 2010, 1004,
	2101, 580, 882, 897, 898, 899, 896, 821, 1302, 439,
	2292, 962, 1299, 2257, 958, 959, 960, 961, 1303, 2099,
	1607, 440, 1005, 2241, 1745, 1600, 2187, 2295, 404, 1601,
	1604, 403, 63, 420, 2097, 2100, 101, 101, 930, 956,
	331, 897, 898, 899, 896, 413, 2135, 964, 1206, 1719,
	1716, 1717, 1718, 980, 2098, 1750, 2087, 1749, 1748, 1746,
	2134, 1888, 1165, 314, 2107, 2085, 966, 2294, 331, 2096,
	1222, 2084, 2083, 2080, 1187, 1189, 2074, 889, 2071, 2070,
	1976, 1605, 1969, 1968, 1967, 990, 439, 1963, 1962, 356,
	1955, 2086, 1796, 974, 453, 454, 455, 1795, 1794, 1793,
	890, 941, 942, 943, 944, 945, 946, 947, 940, 1572,
	356, 1452, 753, 1609, 2236, 30, 2293, 1747, 2184, 2225,
	2208, 1248, 2106, 615, 2157, 101, 2209, 2156, 1250, 983,
	1543, 2325, 1274, 1542, 1276, 897, 898, 899, 896, 1211,
	1212, 1213, 1162, 1161, 1742, 997, 1003, 998, 897, 898,
	899, 896, 1300, 1301, 1214, 2133, 897, 898, 899, 896,
	1224, 1181, 939, 938, 948, 949, 941, 942, 943, 944,
	945, 946, 947, 940, 1201, 813, 814, 815, 1176, 2088,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 2081, 1249, 1210, 1369, 1370, 1216, 1180, 1218,
	2077, 2076, 1268, 2075, 1266, 2038, 1284, 1384, 2183, 2012,
	2131, 1977, 1965, 1215, 1493, 980, 1219, 832, 1217, 1223,
	1386, 897, 898, 899, 896, 2270, 1886, 1884, 1803, 1789,
	1751, 1752, 897, 898, 899, 896, 1255, 907, 908, 909,
	910, 911, 912, 913, 905, 872, 872, 872, 1758, 1623,
	1259, 1260, 1261, 948, 949, 941, 942, 943, 944, 945,
	946, 947, 940, 614, 1622, 1267, 1621, 1270, 1271, 1272,
	1273, 939, 938, 948, 949, 941, 942, 943, 944, 945,
	946, 947, 940, 1620, 1611, 1389, 1362, 712, 711, 1297,
	1179, 365, 366, 367, 368, 1178, 1390, 1368, 1295, 1296,
	976, 1298, 1339, 937, 364, 936, 754, 1334, 1335, 1336,
	1337, 1338, 2303, 1923, 1344, 1345, 1346, 1347, 1549, 808,
	331, 1505, 1548, 1377, 938, 948, 949, 941, 942, 943,
	944, 945, 946, 947, 940, 2268, 1376, 2164, 1379, 1505,
	2330, 1263, 1378, 1380, 1381, 603, 325, 1926, 2051, 951,
	2047, 954, 1385, 1921, 1387, 2046, 1509, 1875, 1934, 1935,
	2324, 2323, 1873, 1388, 1922, 952, 953, 950, 1870, 939,
	938, 948, 949, 941, 942, 943, 944, 945, 946, 947,
	940, 939, 938, 948, 949, 941, 942, 943, 944, 945,
	946, 947, 940, 1872, 1403, 1862, 1736, 1827, 1927, 1777,
	356, 1175, 2306, 356, 2302, 2301, 467, 357, 356, 897,
	898, 899, 896, 1423, 2056, 1760, 1413, 939, 938, 948,
	949, 941, 942, 943, 944, 945, 946, 947, 940, 1661,
	1871, 1175, 2290, 1635, 1455, 823, 897, 898, 899, 896,
	1461, 2035, 1175, 2289, 2263, 2262, 2040, 2223, 2040, 2218,
	1551, 1466, 897, 898, 899, 896, 1729, 467, 101, 101,
	101, 101, 1552, 897, 898, 899, 896, 1472, 1970, 467,
	101, 1487, 1453, 1265, 2206, 2195, 2194, 1522, 1239, 1472,
	1550, 1425, 1933, 63, 1599, 823, 22, 356, 1450, 1547,
	897, 898, 899, 896, 1546, 101, 101, 939, 938, 948,
	949, 941, 942, 943, 944, 945, 946, 947, 940, 1929,
	1415, 2040, 2173, 1544, 1248, 2040, 2172, 1488, 2040, 2171,
	2040, 2170, 1521, 897, 898, 899, 896, 1462, 1648, 1404,
	1510, 1928, 1930, 1495, 1496, 1514, 1409, 1545, 1424, 2162,
	2161, 1463, 1511, 1464, 897, 898, 899, 896, 2055, 2054,
	1629, 1421, 1422, 1457, 804, 1504, 1460, 1201, 15, 1454,
	6, 1489, 1449, 2053, 2052, 1469, 30, 1383, 5, 2049,
	2050, 1382, 1468, 1467, 1473, 1474, 1475, 1476, 2049, 2048,
	1456, 1484, 1486, 602, 1485, 1465, 1209, 2045, 1858, 1491,
	2281, 1936, 2040, 2039, 894, 1529, 1505, 1734, 1505, 1720,
	1494, 1505, 1513, 1924, 897, 898, 899, 896, 1532, 1533,
	897, 898, 899, 896, 1505, 1512, 1238, 1500, 1209, 1405,
	487, 1503, 1400, 1399, 1457, 991, 507, 1564, 991, 1857,
	486, 1567, 1394, 1393, 1412, 1209, 1208, 356, 892, 955,
	1505, 356, 356, 1175, 1174, 356, 757, 756, 1570, 1391,
	1239, 897, 898, 899, 896, 1856, 485, 1778, 467, 1757,
	486, 1169, 1761, 1506, 488, 1554, 1507, 1508, 1596, 63,
	1739, 1571, 1561, 1239, 488, 101, 1397, 897, 898, 899,
	896, 897, 898, 899, 896, 1372, 1265, 101, 1206, 1183,
	1633, 1559, 897, 898, 899, 896, 1164, 1566, 538, 579,
	1362, 1530, 2326, 2272, 439, 1516, 1517, 1518, 1519, 1520,
	1531, 1524, 1539, 1624, 96, 1525, 1526, 1527, 1528, 1563,
	96, 1556, 1555, 86, 69, 2266, 1565, 2248, 1733, 2245,
	1665, 1625, 1626, 1627, 1562, 1568, 1569, 2243, 2186, 1573,
	2122, 2110, 2108, 1537, 2103, 2065, 1541, 1580, 1732, 1619,
	897, 898, 899, 896, 1837, 2033, 2032, 2031, 2028, 1553,
	2023, 2008, 93, 872, 1631, 541, 1847, 1839, 93, 872,
	897, 898, 899, 896, 356, 1851, 1636, 1637, 1731, 1628,
	356, 1660, 1854, 1647, 1844, 1632, 1843, 1823, 1798, 2029,
	1638, 1874, 1730, 1756, 1639, 1788, 1363, 1656, 1659, 93,
	897, 898, 899, 896, 1726, 1427, 1753, 1392, 1197, 356,
	1725, 1257, 1755, 1225, 897, 898, 899, 896, 1207, 1665,
	982, 101, 981, 979, 978, 977, 897, 898, 899, 896,
	1781, 975, 897, 898, 899, 896, 1738, 939, 938, 948,
	949, 941, 942, 943, 944, 945, 946, 947, 940, 1735,
	923, 972, 971, 969, 968, 967, 356, 356, 965, 1776,
	101, 1806, 935, 1744, 934, 63, 933, 932, 1775, 931,
	929, 928, 1577, 1579, 927, 1759, 1667, 926, 1724, 467,
	1737, 925, 1723, 924, 1762, 921, 1721, 920, 1799, 1472,
	919, 918, 917, 1727, 1728, 916, 1826, 1785, 1248, 1766,
	897, 898, 899, 896, 897, 898, 899, 896, 915, 914,
	776, 1741, 1780, 1779, 747, 1784, 1754, 1784, 1819, 1786,
	489, 483, 438, 1808, 1792, 1652, 1653, 2253, 2251, 1797,
	2214, 1655, 1536, 1444, 1264, 509, 1481, 1805, 1804, 1658,
	1483, 1482, 1235, 1236, 1807, 1722, 1657, 1811, 1821, 1478,
	1477, 1810, 1820, 939, 938, 948, 949, 941, 942, 943,
	944, 945, 946, 947, 940, 1841, 1842, 897, 898, 899,
	896, 2310, 1831, 1395, 1231, 1234, 1235, 1236, 1232, 1845,
	1233, 1237, 1849, 1840, 1479, 1202, 1185, 1186, 1979, 1480,
	1583, 513, 1764, 1590, 50, 356, 356, 29, 1192, 101,
	28, 1765, 1848, 843, 1589, 592, 1241, 819, 2228, 467,
	1892, 592, 562, 1940, 1942, 561, 1940, 1940, 1160, 1596,
	872, 1670, 1852, 1822, 1855, 302, 1824, 1863, 303, 467,
	1865, 304, 1867, 2267, 1825, 515, 1860, 1881, 1294, 1293,
	1763, 1669, 2191, 897, 898, 899, 896, 1864, 2189, 1868,
	1869, 1498, 1866, 2144, 821, 1941, 2143, 1937, 525, 526,
	1876, 1668, 1879, 897, 898, 899, 896, 1371, 523, 524,
	1889, 1917, 521, 522, 1943, 1944, 519, 520, 2141, 2068,
	2066, 1958, 1945, 897, 898, 899, 896, 592, 1801, 897,
	898, 899, 896, 1885, 1663, 1818, 1808, 1774, 1773, 1226,
	1859, 365, 366, 367, 368, 1664, 1957, 518, 364, 1959,
	823, 2255, 2254, 1861, 364, 1515, 1406, 1953, 1954, 1231,
	1234, 1235, 1236, 1232, 1983, 1233, 1237, 481, 2254, 1966,
	2255, 858, 872, 1240, 392, 35, 1973, 939, 938, 948,
	949, 941, 942, 943, 944, 945, 946, 947, 940, 1,
	1790, 1610, 536, 382, 1340, 527, 761, 450, 356, 1946,
	476, 758, 475, 473, 1373, 2011, 1305, 101, 697, 986,
	992, 2104, 2227, 2259, 1984, 1985, 1942, 1988, 1989, 1990,
	1991, 2185, 1986, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 1937, 2230, 774,
	683, 2013, 2136, 2009, 1584, 2027, 2057, 2138, 2059, 1419,
	1972, 1416, 510, 1557, 1558, 2069, 709, 2034, 700, 970,
	702, 742, 452, 699, 2043, 1956, 1877, 1878, 438, 1644,
	369, 449, 393, 2041, 1960, 1769, 1832, 2102, 1853, 1836,
	2319, 2309, 2285, 1971, 2265, 2152, 2304, 2196, 2246, 2239,
	2148, 1980, 329, 859, 573, 63, 423, 2123, 2067, 467,
	1612, 1438, 467, 467, 467, 1194, 1248, 2072, 2073, 2082,
	1170, 467, 787, 2078, 2079, 330, 2176, 2109, 373, 1196,
	374, 1199, 1198, 1285, 906, 2111, 1361, 973, 2119, 2120,
	2121, 963, 617, 1538, 673, 667, 2146, 2130, 2118, 1641,
	1640, 1932, 837, 356, 356, 2132, 2129, 34, 33, 32,
	895, 1000, 698, 103, 1221, 1001, 2145, 1974, 2147, 2140,
	2232, 682, 681, 2042, 680, 679, 678, 1230, 1228, 1227,
	850, 849, 893, 2211, 101, 2154, 2155, 2210, 2166, 2167,
	1882, 467, 2022, 2089, 2018, 2014, 2158, 1891, 1890, 1918,
	1919, 1925, 1679, 467, 1675, 1677, 1678, 1676, 1743, 1671,
	1594, 2160, 1595, 1592, 1591, 1654, 1650, 2169, 988, 995,
	802, 98, 887, 847, 11, 10, 765, 9, 14, 2174,
	21, 20, 19, 58, 57, 56, 55, 2182, 18, 1801,
	8, 54, 2188, 2190, 53, 2192, 2193, 52, 17, 16,
	47, 48, 45, 44, 2199, 2201, 43, 42, 41, 40,
	39, 46, 38, 37, 36, 2207, 67, 2234, 66, 65,
	64, 23, 24, 25, 26, 76, 2238, 75, 77, 72,
	2233, 2219, 2220, 2221, 2222, 74, 73, 71, 31, 13,
	2242, 2, 2244, 2237, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2224, 2249,
	0, 0, 2252, 2250, 0, 0, 2261, 0, 0, 0,
	0, 2256, 0, 2258, 467, 0, 467, 0, 0, 2165,
	0, 0, 0, 2269, 791, 2271, 791, 0, 0, 0,
	2274, 0, 0, 0, 2234, 2284, 0, 0, 0, 0,
	0, 2280, 0, 467, 0, 0, 0, 2233, 2283, 0,
	2288, 0, 2291, 791, 0, 0, 0, 0, 0, 2261,
	2297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2307, 0, 0, 592, 592, 0, 0, 0, 2308,
	0, 0, 0, 0, 0, 0, 2318, 0, 2317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2329, 2328,
	2327, 2318, 1114, 1156, 0, 0, 1101, 0, 1063, 1116,
	1037, 1052, 1124, 1053, 1054, 1088, 1016, 1072, 227, 1050,
	0, 1104, 1008, 1040, 1041, 1010, 1047, 1011, 1038, 1065,
	172, 1036, 1075, 197, 1122, 0, 0, 256, 211, 0,
	0, 1068, 1106, 1070, 1093, 1062, 1089, 1024, 1082, 1117,
	1051, 1086, 1118, 0, 0, 0, 0, 0, 813, 814,
	815, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 1085, 1111, 1049, 0, 157, 1115, 1069, 1087, 0,
	0, 1009, 1083, 0, 1014, 1017, 1123, 1109, 1044, 1045,
	0, 0, 0, 2299, 0, 0, 0, 1066, 1071, 1090,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1042, 0, 1079, 0, 0, 0, 1019, 1015, 0, 1064,
	0, 146, 261, 275, 155, 252, 288, 160, 259, 151,
	226, 248, 0, 1155, 148, 273, 258, 208, 191, 192,
	147, 0, 243, 170, 183, 167, 224, 0, 1113, 300,
	166, 291, 1018, 283, 150, 1150, 282, 223, 270, 274,
	209, 203, 149, 272, 207, 202, 195, 174, 187, 235,
	201, 236, 188, 213, 212, 214, 1134, 1135, 1136, 1137,
	1138, 1146, 1147, 0, 1151, 1152, 1153, 1023, 0, 1043,
	1091, 0, 1007, 1099, 1107, 1061, 285, 1110, 1058, 1057,
	1141, 0, 1140, 260, 1142, 1143, 196, 1105, 1039, 1048,
	301, 1046, 246, 229, 1112, 1078, 1154, 244, 199, 271,
	237, 276, 262, 284, 240, 238, 142, 263, 169, 210,
	152, 153, 165, 171, 173, 175, 176, 219, 220, 232,
	251, 264, 265, 266, 168, 161, 245, 162, 185, 163,
	143, 253, 164, 144, 233, 269, 1139, 181, 241, 206,
	145, 205, 234, 268, 267, 292, 298, 299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1148,
	0, 1149, 297, 179, 1006, 280, 0, 225, 1102, 1012,
	1022, 1020, 1055, 1080, 1081, 221, 296, 1095, 1098, 1096,
	1125, 249, 0, 0, 0, 0, 0, 190, 231, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1013, 0, 257, 278, 290, 1157, 1158, 1159, 281,
	1056, 1030, 1067, 289, 1033, 1031, 1094, 1032, 1084, 1127,
	215, 216, 217, 218, 182, 0, 159, 1076, 1060, 1128,
	1129, 1130, 1131, 1132, 1133, 1035, 1108, 178, 184, 0,
	186, 158, 230, 180, 287, 193, 1100, 222, 189, 254,
	194, 200, 242, 286, 228, 247, 156, 277, 255, 204,
	1029, 1034, 1028, 1073, 1074, 1119, 1120, 1121, 1092, 1021,
	1103, 1025, 1027, 1026, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 1077, 141, 0, 198, 1126,
	239, 177, 705, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 172, 0, 0, 197, 0, 0,
	0, 256, 211, 0, 0, 0, 0, 720, 726, 1144,
	1145, 293, 294, 295, 279, 0, 0, 0, 668, 0,
	0, 0, 618, 712, 711, 685, 694, 0, 0, 154,
	686, 0, 693, 687, 691, 690, 688, 689, 0, 655,
	0, 0, 0, 0, 0, 0, 616, 672, 0, 676,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 670, 0, 0, 0, 0, 706, 0, 671, 0,
	0, 708, 0, 695, 0, 146, 261, 275, 155, 252,
	288, 160, 259, 151, 226, 248, 0, 0, 148, 273,
	258, 208, 191, 192, 147, 0, 243, 170, 183, 167,
	224, 692, 704, 661, 166, 659, 703, 283, 150, 0,
	282, 223, 270, 274, 209, 203, 149, 272, 207, 202,
	195, 174, 187, 235, 201, 236, 188, 213, 212, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	285, 0, 0, 719, 0, 0, 0, 260, 0, 0,
	196, 0, 0, 0, 662, 0, 246, 229, 729, 0,
	0, 244, 199, 271, 237, 276, 262, 284, 240, 238,
	142, 263, 169, 210, 152, 153, 165, 171, 173, 175,
	176, 219, 220, 232, 251, 264, 265, 266, 168, 161,
	245, 162, 185, 163, 143, 253, 164, 144, 233, 269,
	0, 181, 241, 206, 145, 205, 234, 268, 267, 292,
	298, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 1341, 1343, 297, 179, 0, 280,
	717, 225, 728, 713, 714, 715, 718, 721, 722, 657,
	660, 723, 725, 727, 730, 249, 0, 0, 0, 0,
	0, 190, 231, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 278, 290,
	0, 0, 0, 658, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 707, 215, 216, 217, 218, 656, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 184, 0, 186, 158, 230, 180, 287, 193,
	0, 222, 189, 254, 194, 200, 242, 286, 228, 247,
	156, 277, 255, 204, 736, 716, 735, 737, 738, 734,
	739, 740, 724, 677, 0, 732, 731, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 198, 0, 239, 177, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 120, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 710, 0, 0, 293, 294, 295, 279, 96,
	0, 705, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 675,
	0, 0, 0, 172, 0, 0, 197, 0, 0, 0,
	256, 211, 0, 0, 0, 0, 720, 726, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 668, 0, 0,
	0, 618, 712, 711, 685, 694, 0, 0, 154, 686,
	0, 693, 687, 691, 690, 688, 689, 0, 655, 0,
	0, 0, 0, 0, 0, 616, 672, 0, 676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 669,
	670, 0, 0, 0, 0, 706, 0, 671, 0, 0,
	708, 0, 695, 0, 146, 261, 275, 155, 252, 288,
	160, 259, 151, 226, 248, 0, 0, 148, 273, 258,
	208, 191, 192, 147, 0, 243, 170, 183, 167, 224,
	692, 704, 661, 166, 659, 703, 283, 150, 0, 282,
	223, 270, 274, 209, 203, 149, 272, 207, 202, 195,
	174, 187, 235, 201, 236, 188, 213, 212, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 285,
	0, 0, 719, 0, 0, 0, 260, 0, 0, 196,
	0, 0, 0, 662, 0, 246, 229, 729, 0, 0,
	244, 199, 271, 237, 276, 262, 284, 240, 238, 142,
	263, 169, 210, 152, 153, 165, 171, 173, 175, 176,
	219, 220, 232, 251, 264, 265, 266, 168, 161, 245,
	162, 185, 163, 143, 253, 164, 144, 233, 269, 0,
	181, 241, 206, 145, 205, 234, 268, 267, 292, 298,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 179, 0, 280, 717,
	225, 728, 713, 714, 715, 718, 721, 722, 657, 660,
	723, 725, 727, 730, 249, 0, 0, 0, 0, 0,
	190, 231, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 278, 290, 0,
	0, 0, 658, 0, 0, 0, 289, 0, 0, 0,
	0, 0, 707, 215, 216, 217, 218, 656, 0, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 184, 0, 186, 158, 230, 180, 287, 193, 0,
	222, 189, 254, 194, 200, 242, 286, 228, 247, 156,
	277, 255, 204, 736, 716, 735, 737, 738, 734, 739,
	740, 724, 677, 0, 732, 731, 733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 198, 70, 239, 177, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	120, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 710, 705, 0, 293, 294, 295, 279, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 172, 873, 0, 197, 0, 0,
	0, 256, 211, 0, 0, 0, 0, 720, 726, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 668, 0,
	0, 0, 618, 712, 711, 685, 694, 0, 0, 154,
	686, 0, 693, 687, 691, 690, 688, 689, 0, 655,
	0, 0, 0, 0, 0, 0, 616, 672, 0, 676,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 670, 0, 0, 0, 0, 706, 0, 671, 0,
	0, 870, 0, 695, 0, 146, 261, 275, 155, 252,
	288, 160, 259, 151, 226, 248, 0, 0, 148, 273,
	258, 208, 191, 192, 147, 0, 243, 170, 183, 167,
	224, 692, 704, 661, 166, 659, 703, 283, 150, 0,
	282, 223, 270, 274, 209, 203, 149, 272, 207, 202,
	195, 174, 187, 235, 201, 236, 188, 213, 212, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	285, 0, 0, 719, 0, 0, 0, 260, 0, 0,
	196, 0, 0, 0, 662, 0, 246, 229, 729, 0,
	0, 244, 199, 271, 237, 276, 262, 284, 240, 238,
	142, 263, 169, 210, 152, 153, 165, 171, 173, 175,
	176, 219, 220, 232, 251, 264, 265, 266, 168, 161,
	245, 162, 185, 163, 143, 253, 164, 144, 233, 269,
	0, 181, 241, 206, 145, 205, 234, 268, 267, 292,
	298, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 179, 0, 280,
	717, 225, 728, 713, 714, 715, 718, 721, 722, 657,
	660, 723, 725, 727, 730, 249, 0, 0, 0, 0,
	0, 190, 231, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 278, 290,
	0, 0, 0, 658, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 707, 215, 216, 217, 218, 656, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 184, 0, 186, 158, 230, 180, 287, 193,
	0, 222, 189, 254, 194, 200, 242, 286, 228, 247,
	156, 277, 255, 204, 736, 716, 735, 737, 738, 734,
	739, 740, 724, 677, 0, 732, 731, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 198, 0, 239, 177, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 120, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 710, 705, 0, 293, 294, 295, 279, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	0, 675, 0, 0, 0, 172, 2298, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 720, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 668,
	0, 0, 0, 618, 712, 711, 685, 694, 0, 0,
	154, 686, 0, 693, 687, 691, 690, 688, 689, 0,
	655, 0, 0, 0, 0, 0, 0, 616, 672, 0,
	676, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 669, 670, 0, 0, 0, 0, 706, 0, 671,
	0, 0, 708, 0, 695, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 692, 704, 661, 166, 659, 703, 283, 150,
	0, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 285, 0, 0, 719, 0, 0, 0, 260, 0,
	0, 196, 0, 0, 0, 662, 0, 246, 229, 729,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 240,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 0, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 298, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 717, 225, 728, 713, 714, 715, 718, 721, 722,
	657, 660, 723, 725, 727, 730, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 658, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 707, 215, 216, 217, 218, 656,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 184, 0, 186, 158, 230, 180, 287,
	193, 0, 222, 189, 254, 194, 200, 242, 286, 228,
	247, 156, 277, 255, 204, 736, 716, 735, 737, 738,
	734, 739, 740, 724, 677, 0, 732, 731, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 198, 0, 239, 177, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 120, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 710, 705, 0, 293, 294, 295, 279,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 0, 675, 0, 0, 0, 172, 873, 0, 197,
	0, 0, 0, 256, 211, 0, 0, 0, 0, 720,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	668, 0, 0, 0, 618, 712, 711, 685, 694, 0,
	0, 154, 686, 0, 693, 687, 691, 690, 688, 689,
	0, 655, 0, 0, 0, 0, 0, 0, 616, 672,
	0, 676, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 670, 0, 0, 0, 0, 706, 0,
	671, 0, 0, 708, 0, 695, 0, 146, 261, 275,
	155, 252, 288, 160, 259, 151, 226, 248, 0, 0,
	148, 273, 258, 208, 191, 192, 147, 0, 243, 170,
	183, 167, 224, 692, 704, 661, 166, 659, 703, 283,
	150, 0, 282, 223, 270, 274, 209, 203, 149, 272,
	207, 202, 195, 174, 187, 235, 201, 236, 188, 213,
	212, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 285, 0, 0, 719, 0, 0, 0, 260,
	0, 0, 196, 0, 0, 0, 662, 0, 246, 229,
	729, 0, 0, 244, 199, 271, 237, 276, 262, 284,
	240, 238, 142, 263, 169, 210, 152, 153, 165, 171,
	173, 175, 176, 219, 220, 232, 251, 264, 265, 266,
	168, 161, 245, 162, 185, 163, 143, 253, 164, 144,
	233, 269, 0, 181, 241, 206, 145, 205, 234, 268,
	267, 292, 298, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 179,
	0, 280, 717, 225, 728, 713, 714, 715, 718, 721,
	722, 657, 660, 723, 725, 727, 730, 249, 0, 0,
	0, 0, 0, 190, 231, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	278, 290, 0, 0, 0, 658, 0, 0, 0, 289,
	0, 0, 0, 0, 0, 707, 215, 216, 217, 218,
	656, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 184, 0, 186, 158, 230, 180,
	287, 193, 0, 222, 189, 254, 194, 200, 242, 286,
	228, 247, 156, 277, 255, 204, 736, 716, 735, 737,
	738, 734, 739, 740, 724, 677, 0, 732, 731, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 198, 0, 239, 177, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 120, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 710, 0, 0, 293, 294, 295,
	279, 705, 0, 0, 1523, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 675,
	0, 0, 0, 172, 0, 0, 197, 0, 0, 0,
	256, 211, 0, 0, 0, 0, 720, 726, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 668, 0, 0,
	0, 618, 712, 711, 685, 694, 0, 0, 154, 686,
	0, 693, 687, 691, 690, 688, 689, 0, 655, 0,
	0, 0, 0, 0, 0, 616, 672, 0, 676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 669,
	670, 0, 0, 0, 0, 706, 0, 671, 0, 0,
	708, 0, 695, 0, 146, 261, 275, 155, 252, 288,
	160, 259, 151, 226, 248, 0, 0, 148, 273, 258,
	208, 191, 192, 147, 0, 243, 170, 183, 167, 224,
	692, 704, 661, 166, 659, 703, 283, 150, 0, 282,
	223, 270, 274, 209, 203, 149, 272, 207, 202, 195,
	174, 187, 235, 201, 236, 188, 213, 212, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 285,
	0, 0, 719, 0, 0, 0, 260, 0, 0, 196,
	0, 0, 0, 662, 0, 246, 229, 729, 0, 0,
	244, 199, 271, 237, 276, 262, 284, 240, 238, 142,
	263, 169, 210, 152, 153, 165, 171, 173, 175, 176,
	219, 220, 232, 251, 264, 265, 266, 168, 161, 245,
	162, 185, 163, 143, 253, 164, 144, 233, 269, 0,
	181, 241, 206, 145, 205, 234, 268, 267, 292, 298,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 179, 0, 280, 717,
	225, 728, 713, 714, 715, 718, 721, 722, 657, 660,
	723, 725, 727, 730, 249, 0, 0, 0, 0, 0,
	190, 231, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 278, 290, 0,
	0, 0, 658, 0, 0, 0, 289, 0, 0, 0,
	0, 0, 707, 215, 216, 217, 218, 656, 0, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 184, 0, 186, 158, 230, 180, 287, 193, 0,
	222, 189, 254, 194, 200, 242, 286, 228, 247, 156,
	277, 255, 204, 736, 716, 735, 737, 738, 734, 739,
	740, 724, 677, 0, 732, 731, 733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 198, 0, 239, 177, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	120, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 710, 705, 0, 293, 294, 295, 279, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 172, 0, 0, 197, 0, 0,
	0, 256, 211, 0, 0, 0, 0, 720, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 668, 0,
	0, 0, 618, 712, 711, 685, 694, 0, 0, 154,
	686, 0, 693, 687, 691, 690, 688, 689, 0, 655,
	0, 0, 0, 0, 0, 0, 616, 672, 0, 676,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 670, 613, 0, 0, 0, 706, 0, 671, 0,
	0, 708, 0, 695, 0, 146, 261, 275, 155, 252,
	288, 160, 259, 151, 226, 248, 0, 0, 148, 273,
	258, 208, 191, 192, 147, 0, 243, 170, 183, 167,
	224, 692, 704, 661, 166, 659, 703, 283, 150, 0,
	282, 223, 270, 274, 209, 203, 149, 272, 207, 202,
	195, 174, 187, 235, 201, 236, 188, 213, 212, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	285, 0, 0, 719, 0, 0, 0, 260, 0, 0,
	196, 0, 0, 0, 662, 0, 246, 229, 729, 0,
	0, 244, 199, 271, 237, 276, 262, 284, 240, 238,
	142, 263, 169, 210, 152, 153, 165, 171, 173, 175,
	176, 219, 220, 232, 251, 264, 265, 266, 168, 161,
	245, 162, 185, 163, 143, 253, 164, 144, 233, 269,
	0, 181, 241, 206, 145, 205, 234, 268, 267, 292,
	298, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 179, 0, 280,
	717, 225, 728, 713, 714, 715, 718, 721, 722, 657,
	660, 723, 725, 727, 730, 249, 0, 0, 0, 0,
	0, 190, 231, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 278, 290,
	0, 0, 0, 658, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 707, 215, 216, 217, 218, 656, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 184, 0, 186, 158, 230, 180, 287, 193,
	0, 222, 189, 254, 194, 200, 242, 286, 228, 247,
	156, 277, 255, 204, 736, 716, 735, 737, 738, 734,
	739, 740, 724, 677, 0, 732, 731, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 198, 0, 239, 177, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 120, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 710, 705, 0, 293, 294, 295, 279, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	0, 675, 0, 0, 0, 172, 0, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 720, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 668,
	0, 0, 0, 618, 712, 711, 685, 694, 0, 0,
	154, 686, 0, 693, 687, 691, 690, 688, 689, 0,
	655, 0, 0, 0, 0, 0, 0, 616, 672, 0,
	676, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 669, 670, 0, 0, 0, 0, 706, 0, 671,
	0, 0, 708, 0, 695, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 692, 704, 661, 166, 659, 703, 283, 150,
	0, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 285, 0, 0, 719, 0, 0, 0, 260, 0,
	0, 196, 0, 0, 0, 662, 0, 246, 229, 729,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 240,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 0, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 298, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 717, 225, 728, 713, 714, 715, 718, 721, 722,
	657, 660, 723, 725, 727, 730, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 658, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 707, 215, 216, 217, 218, 656,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 184, 0, 186, 158, 230, 180, 287,
	193, 0, 222, 189, 254, 194, 200, 242, 286, 228,
	247, 156, 277, 255, 204, 736, 716, 735, 737, 738,
	734, 739, 740, 724, 677, 0, 732, 731, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 198, 0, 239, 177, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 120, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 710, 705, 0, 293, 294, 295, 279,
	0, 0, 0, 0, 227, 0, 0, 0, 1286, 0,
	0, 0, 675, 0, 0, 0, 172, 0, 0, 197,
	0, 0, 0, 256, 211, 0, 0, 0, 0, 720,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	668, 0, 0, 0, 618, 712, 711, 685, 694, 0,
	0, 154, 686, 0, 693, 687, 691, 690, 688, 689,
	0, 655, 0, 0, 0, 0, 0, 0, 0, 672,
	0, 676, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 670, 0, 0, 0, 0, 706, 0,
	671, 0, 0, 708, 0, 695, 0, 146, 261, 275,
	155, 252, 288, 160, 259, 151, 226, 248, 0, 0,
	148, 273, 258, 208, 191, 192, 147, 0, 243, 170,
	183, 167, 224, 692, 704, 661, 166, 659, 703, 283,
	150, 0, 282, 223, 270, 274, 209, 203, 149, 272,
	207, 202, 195, 174, 187, 235, 201, 236, 188, 213,
	212, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 285, 0, 0, 719, 0, 0, 0, 260,
	0, 0, 196, 0, 0, 0, 662, 0, 246, 229,
	729, 0, 0, 244, 199, 271, 237, 276, 262, 284,
	240, 238, 142, 263, 169, 210, 152, 153, 165, 171,
	173, 175, 176, 219, 220, 232, 251, 264, 265, 266,
	168, 161, 245, 162, 185, 163, 143, 253, 164, 144,
	233, 269, 0, 181, 241, 206, 145, 205, 234, 268,
	267, 292, 1287, 1288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 179,
	0, 280, 717, 225, 728, 713, 714, 715, 718, 721,
	722, 657, 660, 723, 725, 727, 730, 249, 0, 0,
	0, 0, 0, 190, 231, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	278, 290, 0, 0, 0, 658, 0, 0, 0, 289,
	0, 0, 0, 0, 0, 707, 215, 216, 217, 218,
	656, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 184, 0, 186, 158, 230, 180,
	287, 193, 0, 222, 189, 254, 194, 200, 242, 286,
	228, 247, 156, 277, 255, 204, 736, 716, 735, 737,
	738, 734, 739, 740, 724, 677, 0, 732, 731, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 198, 0, 239, 177, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 120, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 710, 705, 0, 293, 294, 295,
	279, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 0, 675, 0, 0, 0, 172, 0, 0,
	197, 0, 0, 0, 256, 211, 0, 0, 0, 0,
	720, 726, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 668, 0, 0, 0, 618, 712, 711, 685, 694,
	0, 0, 154, 686, 0, 693, 687, 691, 690, 688,
	689, 0, 655, 0, 0, 0, 0, 0, 0, 0,
	672, 0, 676, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 669, 670, 0, 0, 0, 0, 706,
	0, 671, 0, 0, 708, 0, 695, 0, 146, 261,
	275, 155, 252, 288, 160, 259, 151, 226, 248, 0,
	0, 148, 273, 258, 208, 191, 192, 147, 0, 243,
	170, 183, 167, 224, 692, 704, 661, 166, 659, 703,
	283, 150, 0, 282, 223, 270, 274, 209, 203, 149,
	272, 207, 202, 195, 174, 187, 235, 201, 236, 188,
	213, 212, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 285, 0, 0, 719, 0, 0, 0,
	260, 0, 0, 196, 0, 0, 0, 662, 0, 246,
	229, 729, 0, 0, 244, 199, 271, 237, 276, 262,
	284, 240, 238, 142, 263, 169, 210, 152, 153, 165,
	171, 173, 175, 176, 219, 220, 232, 251, 264, 265,
	266, 168, 161, 245, 162, 185, 163, 143, 253, 164,
	144, 233, 269, 0, 181, 241, 206, 145, 205, 234,
	268, 267, 292, 298, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	179, 0, 280, 717, 225, 728, 713, 714, 715, 718,
	721, 722, 657, 660, 723, 725, 727, 730, 249, 0,
	0, 0, 0, 0, 190, 231, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 278, 290, 0, 0, 0, 658, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 707, 215, 216, 217,
	218, 656, 0, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 184, 0, 186, 158, 230,
	180, 287, 193, 0, 222, 189, 254, 194, 200, 242,
	286, 228, 247, 156, 277, 255, 204, 736, 716, 735,
	737, 738, 734, 739, 740, 724, 677, 0, 732, 731,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 198, 0, 239, 177, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 120, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 710, 705, 0, 293, 294,
	295, 279, 0, 0, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 0, 675, 0, 0, 0, 172, 0,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 720, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 712, 711, 685,
	694, 0, 0, 154, 686, 0, 693, 687, 691, 690,
	688, 689, 0, 655, 0, 0, 0, 0, 0, 0,
	616, 672, 0, 676, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 669, 670, 0, 0, 0, 0,
	706, 0, 671, 0, 0, 708, 0, 695, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 692, 704, 661, 166, 659,
	703, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 285, 0, 0, 719, 0, 0,
	0, 260, 0, 0, 196, 0, 0, 0, 662, 0,
	246, 229, 729, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 0, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 717, 225, 728, 713, 714, 715,
	718, 721, 722, 657, 660, 723, 725, 727, 730, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 658, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 707, 215, 216,
	217, 218, 656, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 736, 716,
	735, 737, 738, 734, 739, 740, 724, 677, 0, 732,
	731, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 120, 635, 636, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 710, 0, 0, 293,
	294, 295, 279, 341, 0, 340, 344, 336, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 351,
	197, 0, 0, 0, 256, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 354, 0, 0, 355, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 340, 344, 336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 0, 0, 0, 146, 261,
	275, 155, 252, 288, 160, 259, 151, 226, 248, 0,
	0, 148, 273, 258, 208, 191, 192, 147, 0, 243,
	170, 183, 167, 224, 0, 0, 300, 166, 291, 0,
	283, 150, 0, 282, 223, 270, 274, 209, 203, 149,
	272, 207, 202, 195, 174, 187, 235, 201, 236, 188,
	213, 212, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 333, 337, 0, 0, 0,
	0, 0, 339, 285, 0, 0, 0, 0, 0, 0,
	260, 0, 0, 196, 343, 0, 0, 301, 0, 246,
	229, 0, 0, 0, 244, 199, 271, 237, 335, 262,
	284, 240, 359, 142, 263, 169, 210, 152, 153, 165,
	171, 173, 175, 176, 219, 220, 232, 251, 264, 265,
	266, 168, 161, 245, 162, 185, 163, 143, 253, 164,
	144, 233, 269, 0, 181, 241, 206, 145, 205, 234,
	268, 267, 292, 298, 299, 334, 333, 337, 0, 0,
	0, 0, 0, 339, 0, 0, 0, 0, 0, 297,
	179, 0, 280, 0, 225, 343, 0, 0, 0, 0,
	0, 0, 221, 296, 0, 0, 0, 0, 249, 782,
	0, 0, 338, 342, 345, 231, 346, 347, 0, 0,
	348, 349, 350, 0, 0, 352, 353, 0, 0, 0,
	257, 278, 290, 0, 0, 0, 281, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 182, 0, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 184, 0, 186, 158, 230,
	180, 287, 193, 0, 222, 189, 254, 194, 200, 242,
	286, 228, 247, 156, 277, 255, 204, 0, 0, 0,
	0, 0, 0, 338, 342, 783, 0, 346, 784, 0,
	0, 348, 349, 350, 0, 0, 352, 353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 198, 0, 239, 177, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 0, 0, 0, 293, 294,
	295, 279, 341, 0, 340, 344, 336, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 332, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 351, 197,
	0, 0, 0, 256, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 354, 0, 0, 355, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 261, 275,
	155, 252, 288, 160, 259, 151, 226, 248, 0, 0,
	148, 273, 258, 208, 191, 192, 147, 0, 243, 170,
	183, 167, 224, 0, 0, 300, 166, 291, 0, 283,
	150, 0, 282, 223, 270, 274, 209, 203, 149, 272,
	207, 202, 195, 174, 187, 235, 201, 236, 188, 213,
	212, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 333, 337, 0, 0, 0, 0,
	0, 339, 285, 0, 0, 0, 0, 0, 0, 260,
	0, 0, 196, 343, 0, 0, 301, 0, 246, 229,
	0, 0, 0, 244, 199, 271, 237, 335, 262, 284,
	240, 238, 142, 263, 169, 210, 152, 153, 165, 171,
	173, 175, 176, 219, 220, 232, 251, 264, 265, 266,
	168, 161, 245, 162, 185, 163, 143, 253, 164, 144,
	233, 269, 0, 181, 241, 206, 145, 205, 234, 268,
	267, 292, 298, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 179,
	0, 280, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 221, 296, 0, 0, 0, 0, 249, 0, 0,
	0, 338, 342, 345, 231, 346, 347, 0, 0, 348,
	349, 350, 0, 0, 352, 353, 0, 0, 0, 257,
	278, 290, 0, 0, 0, 281, 0, 0, 0, 289,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	182, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 184, 0, 186, 158, 230, 180,
	287, 193, 0, 222, 189, 254, 194, 200, 242, 286,
	228, 247, 156, 277, 255, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 198, 0, 239, 177, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 0, 0, 0, 293, 294, 295,
	279, 96, 0, 27, 86, 69, 0, 0, 0, 0,
	0, 0, 0, 227, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 0, 0, 300, 166, 291, 0, 283, 150,
	0, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 196, 0, 0, 0, 301, 0, 246, 229, 0,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 240,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 0, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 298, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	221, 296, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 281, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 309,
	311, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 184, 0, 186, 158, 230, 180, 287,
	193, 0, 222, 189, 254, 194, 200, 242, 286, 228,
	247, 156, 277, 255, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 198, 70, 239, 177, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 227, 0, 0, 293, 294, 295, 279,
	0, 0, 0, 0, 0, 172, 0, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 1603, 1606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 0, 0, 300, 166, 291, 0, 283, 150,
	0, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1607, 285, 0, 0, 0, 1600, 0, 1599, 260, 1601,
	1604, 196, 0, 0, 0, 301, 0, 246, 229, 0,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 240,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 1605, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 298, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	221, 296, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 281, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 182,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 184, 0, 186, 158, 230, 180, 287,
	193, 0, 222, 189, 254, 194, 200, 242, 286, 228,
	247, 156, 277, 255, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 198, 0, 239, 177, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 227, 0, 0, 293, 294, 295, 279,
	901, 0, 0, 0, 0, 172, 0, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 902, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 897, 898, 899, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 0, 0, 300, 166, 291, 0, 283, 150,
	0, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 196, 0, 0, 0, 301, 0, 246, 229, 0,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 240,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 0, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 298, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	221, 296, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 281, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 182,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 184, 0, 186, 158, 230, 180, 287,
	193, 0, 222, 189, 254, 194, 200, 242, 286, 228,
	247, 156, 277, 255, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 198, 0, 239, 177, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 227, 0, 0, 293, 294, 295, 279,
	0, 0, 0, 0, 0, 172, 422, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 430, 431, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 0, 0, 300, 166, 291, 404, 283, 150,
	403, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 196, 0, 0, 0, 301, 0, 246, 229, 0,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 421,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 0, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 298, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	221, 296, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 281, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 424, 215, 216, 217, 218, 182,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 184, 0, 186, 158, 230, 180, 287,
	193, 0, 432, 427, 428, 194, 200, 242, 286, 228,
	247, 156, 277, 255, 429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 198, 0, 239, 177, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 96, 0, 0, 293, 294, 295, 279,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	197, 0, 0, 0, 256, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 989, 0, 102, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 261,
	275, 155, 252, 288, 160, 259, 151, 226, 248, 0,
	0, 148, 273, 258, 208, 191, 192, 147, 0, 243,
	170, 183, 167, 224, 0, 0, 300, 166, 291, 0,
	283, 150, 0, 282, 223, 270, 274, 209, 203, 149,
	272, 207, 202, 195, 174, 187, 235, 201, 236, 188,
	213, 212, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	260, 0, 0, 196, 0, 0, 0, 301, 0, 246,
	229, 0, 0, 0, 244, 199, 271, 237, 276, 262,
	284, 240, 238, 142, 263, 169, 210, 152, 153, 165,
	171, 173, 175, 176, 219, 220, 232, 251, 264, 265,
	266, 168, 161, 245, 162, 185, 163, 143, 253, 164,
	144, 233, 269, 0, 181, 241, 206, 145, 205, 234,
	268, 267, 292, 298, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	179, 0, 280, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 221, 296, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 190, 231, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 278, 290, 0, 0, 0, 281, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 182, 0, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 184, 0, 186, 158, 230,
	180, 287, 193, 0, 222, 189, 254, 194, 200, 242,
	286, 228, 247, 156, 277, 255, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 198, 70, 239, 177, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 227, 0, 0, 293, 294,
	295, 279, 0, 0, 0, 0, 0, 172, 0, 0,
	197, 0, 0, 0, 256, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 430, 431, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 261,
	275, 155, 252, 288, 160, 259, 151, 226, 248, 0,
	0, 148, 273, 258, 208, 191, 192, 147, 0, 243,
	170, 183, 167, 224, 0, 0, 300, 166, 291, 404,
	283, 150, 403, 282, 223, 270, 274, 209, 203, 149,
	272, 207, 202, 195, 174, 187, 235, 201, 236, 188,
	213, 212, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	260, 0, 0, 196, 0, 0, 0, 301, 0, 246,
	229, 0, 0, 0, 244, 199, 271, 237, 276, 262,
	284, 240, 238, 142, 263, 169, 210, 152, 153, 165,
	171, 173, 175, 176, 219, 220, 232, 251, 264, 265,
	266, 168, 161, 245, 162, 185, 163, 143, 253, 164,
	144, 233, 269, 0, 181, 241, 206, 145, 205, 234,
	268, 267, 292, 298, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	179, 0, 280, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 221, 296, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 190, 231, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 278, 290, 0, 0, 0, 281, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 182, 0, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 184, 0, 186, 158, 230,
	180, 287, 193, 0, 432, 427, 428, 194, 200, 242,
	286, 228, 247, 156, 277, 255, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 198, 0, 239, 177, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 0, 0, 0, 293, 294,
	295, 279, 227, 0, 0, 0, 574, 0, 0, 0,
	0, 0, 0, 0, 172, 575, 0, 197, 0, 0,
	0, 256, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 0, 0, 355, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 261, 275, 155, 252,
	288, 160, 259, 151, 226, 248, 0, 0, 148, 273,
	258, 208, 191, 192, 147, 0, 243, 170, 183, 167,
	224, 0, 0, 300, 166, 291, 0, 283, 150, 0,
	282, 223, 270, 274, 209, 203, 149, 272, 207, 202,
	195, 174, 187, 235, 201, 236, 188, 213, 212, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 260, 0, 0,
	196, 0, 0, 0, 301, 0, 246, 229, 0, 0,
	0, 244, 199, 271, 237, 276, 262, 284, 240, 238,
	142, 263, 169, 210, 152, 153, 165, 171, 173, 175,
	176, 219, 220, 232, 251, 264, 265, 266, 168, 161,
	245, 162, 185, 163, 143, 253, 164, 144, 233, 269,
	0, 181, 241, 206, 145, 205, 234, 268, 267, 292,
	298, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 179, 0, 280,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 221,
	296, 0, 0, 0, 0, 249, 0, 0, 0, 0,
	0, 190, 231, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 278, 290,
	0, 0, 0, 281, 0, 0, 0, 289, 0, 0,
	0, 0, 576, 0, 215, 216, 217, 218, 182, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 184, 0, 186, 158, 230, 180, 287, 193,
	0, 222, 189, 254, 194, 200, 242, 286, 228, 247,
	156, 277, 255, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 198, 0, 239, 177, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 0, 0, 0, 293, 294, 295, 279, 227,
	0, 0, 0, 861, 0, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 0, 355, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 860,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 596, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 594, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 593, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 591, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 594, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 593, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2229, 0, 102,
	712, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 594, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 593, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 594, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1802, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 594, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	1578, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 1262, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 594, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	712, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1952, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 594, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 852, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1666,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 1275, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 0, 355, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 1203,
	0, 0, 293, 294, 295, 279, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 0, 0, 300, 166, 291,
	0, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 196, 0, 0, 0, 301, 0,
	246, 229, 0, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 0, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 281, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 182, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 227, 0, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 0, 172, 0,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 0, 0, 300, 166, 291,
	0, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 0, 1188, 0, 0,
	0, 260, 0, 0, 196, 0, 0, 0, 301, 0,
	246, 229, 0, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 0, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 281, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 182, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 227, 0, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 0, 172, 0,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 594,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 0, 0, 300, 166, 291,
	0, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 196, 0, 0, 0, 301, 0,
	246, 229, 0, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 0, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 842, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 182, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 227, 0, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 0, 172, 0,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 0, 0, 300, 166, 291,
	0, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 196, 0, 0, 0, 301, 0,
	246, 229, 0, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 0, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 281, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 182, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 387, 0, 0, 141, 0, 198, 0, 239, 177,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 227, 0, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 99, 172, 0,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 0, 0, 300, 166, 291,
	0, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 196, 0, 0, 0, 301, 0,
	246, 229, 0, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 0, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 281, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 182, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 227, 0, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 0, 172, 0,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 0, 0, 300, 166, 291,
	0, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 196, 0, 0, 0, 301, 0,
	246, 229, 0, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 0, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 281, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 182, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 227, 0, 0, 293,
	294, 295, 279, 1244, 0, 0, 0, 0, 172, 0,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 813, 814, 815, 1246,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 0, 0, 300, 166, 291,
	0, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 196, 0, 0, 0, 301, 0,
	246, 229, 0, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 0, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 281, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 182, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 197, 0, 0, 0, 256,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	813, 814, 815, 1246, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 261, 275, 155, 252, 288, 160,
	259, 151, 226, 248, 0, 0, 148, 273, 258, 208,
	191, 192, 147, 0, 243, 170, 183, 167, 224, 0,
	0, 300, 166, 291, 0, 283, 150, 0, 282, 223,
	270, 274, 209, 203, 149, 272, 207, 202, 195, 174,
	187, 235, 201, 236, 188, 213, 212, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 196, 0,
	0, 0, 301, 0, 246, 229, 0, 0, 0, 244,
	199, 271, 237, 276, 262, 284, 240, 238, 142, 263,
	169, 210, 152, 153, 165, 171, 173, 175, 176, 219,
	220, 232, 251, 264, 265, 266, 168, 161, 245, 162,
	185, 163, 143, 253, 164, 144, 233, 269, 0, 181,
	241, 206, 145, 205, 234, 268, 267, 292, 298, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 179, 0, 280, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 221, 296, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 0, 190,
	231, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 278, 290, 0, 0,
	0, 281, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 182, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	184, 0, 186, 158, 230, 180, 287, 193, 0, 222,
	189, 254, 194, 200, 242, 286, 228, 247, 156, 277,
	255, 204, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 197,
	0, 0, 0, 256, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	198, 0, 239, 177, 813, 814, 815, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 261, 275,
	155, 252, 288, 160, 259, 151, 226, 248, 0, 0,
	148, 273, 258, 208, 191, 192, 147, 0, 243, 170,
	183, 167, 224, 0, 0, 300, 166, 291, 0, 283,
	150, 0, 282, 223, 270, 274, 209, 203, 149, 272,
	207, 202, 195, 174, 187, 235, 201, 236, 188, 213,
	212, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 260,
	0, 0, 196, 0, 0, 0, 301, 0, 246, 229,
	0, 0, 0, 244, 199, 271, 237, 276, 262, 284,
	240, 238, 142, 263, 169, 210, 152, 153, 165, 171,
	173, 175, 176, 219, 220, 232, 251, 264, 265, 266,
	168, 161, 245, 162, 185, 163, 143, 253, 164, 144,
	233, 269, 0, 181, 241, 206, 145, 205, 234, 268,
	267, 292, 298, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 179,
	0, 280, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 221, 296, 0, 0, 0, 0, 249, 0, 0,
	0, 0, 0, 190, 231, 0, 250, 1695, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	278, 290, 0, 0, 0, 281, 0, 0, 0, 289,
	0, 0, 1325, 0, 0, 0, 215, 216, 217, 218,
	182, 0, 159, 0, 0, 0, 897, 898, 899, 896,
	0, 0, 0, 178, 184, 0, 186, 158, 230, 180,
	287, 193, 0, 222, 189, 254, 194, 200, 242, 286,
	228, 247, 156, 277, 255, 204, 1695, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1683, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 198, 0, 239, 177, 0, 1325,
	1702, 1706, 1708, 1710, 1712, 1713, 1715, 0, 1719, 1716,
	1717, 1718, 0, 0, 1697, 1698, 1699, 1700, 1681, 1682,
	1703, 0, 1684, 0, 1685, 1686, 1687, 1688, 1689, 1690,
	1691, 1692, 1693, 1694, 1701, 0, 0, 293, 294, 295,
	279, 0, 1705, 1707, 1709, 1711, 1714, 1321, 0, 1318,
	0, 0, 1683, 1320, 1317, 1319, 1323, 1324, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 1702,
	1706, 1708, 1710, 1712, 1713, 1715, 1696, 1719, 1716, 1717,
	1718, 0, 0, 1697, 1698, 1699, 1700, 1681, 1682, 1703,
	0, 1684, 0, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
	1692, 1693, 1694, 1701, 96, 0, 27, 86, 69, 0,
	0, 1705, 1707, 1709, 1711, 1714, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 1321, 0, 1318, 0, 0, 0,
	1320, 1317, 1319, 1323, 1324, 1696, 1915, 51, 1322, 0,
	0, 0, 93, 0, 0, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, 1315, 1316, 1328, 1329, 1330, 1331,
	1332, 1333, 1326, 1327, 0, 1202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1673,
	1674, 0, 0, 0, 0, 0, 0, 0, 2314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1897,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1915, 0,
	0, 0, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1328, 1329, 1330, 1331, 1332, 1333, 1326,
	1327, 0, 0, 0, 0, 0, 0, 1202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1704, 0, 68, 85, 94, 0, 49,
	0, 1982, 1915, 0, 0, 0, 0, 0, 0, 0,
	0, 1897, 0, 0, 0, 84, 79, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1905, 0, 1704, 0, 0, 1897, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 82, 0, 0,
	1894, 0, 0, 0, 1896, 1898, 1900, 0, 1902, 1903,
	1904, 1906, 1907, 1908, 1910, 1911, 1912, 1913, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 83, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 1916, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1905, 0, 0, 61, 0, 0, 1914, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1894, 0, 0, 1893, 1896, 1898, 1900, 0,
	1902, 1903, 1904, 1906, 1907, 1908, 1910, 1911, 1912, 1913,
	0, 0, 0, 1909, 0, 1901, 0, 0, 0, 0,
	1899, 0, 0, 0, 0, 0, 1905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1916, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1894, 70, 0, 0,
	1896, 1898, 1900, 0, 1902, 1903, 1904, 1906, 1907, 1908,
	1910, 1911, 1912, 1913, 0, 0, 0, 0, 0, 0,
	1914, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1893, 0, 0,
	1916, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1909, 0, 0, 0, 0,
	0, 0, 1899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1914, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1893, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1909,
	0, 0, 0, 0, 0, 0, 1899,
}

var yyPact = [...]int{
	23124, -1000, -294, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 20994, -1000, -1000,
	1480, -1000, 8641, 21434, 73, 21434, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 260,
	-1000, 21434, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8182,
	7723, 156, -1000, 1865, -1000, -1000, -1000, -1000, 204, 282,
	20554, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 153, 23, 282, 367, 371, 382,
	382, 9961, 1865, 190, 38, -1000, 679, 23124, 197, 21434,
	-1000, 437, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1865, 1865, 21434, -63, 615,
	-1000, 193, 199, 205, 433, -1000, -1000, -1000, -1000, 1882,
	-1000, 21434, 1635, 21434, -1000, 1371, 1375, -1000, -1000, 1632,
	-1000, 115, 26, -4, 127, -1000, -1000, 180, -1000, -1000,
	-1000, -1000, -1000, 67, -1000, 13, -1000, 14, -1000, -1000,
	-1000, -98, -1000, -1000, -1000, -1000, -1000, 1341, 393, 1650,
	-166, 1728, 1784, 1474, 1857, 1820, 1816, 1812, 1802, 4,
	210, 210, 210, 258, 210, -1000, -1000, -1000, -1000, -1000,
	-1000, 327, -1000, -1000, -1000, -1000, 1409, 21434, -1000, 1477,
	501, 501, 609, 179, -1000, -1000, -110, -132, 501, 501,
	-132, 25, -1000, 1760, 1757, -1000, -1000, -1000, -1000, -1000,
	-1000, 210, 211, 225, -1000, -179, -1000, 351, -1000, 344,
	-1000, 11300, 162, 1410, 677, -1000, 572, 21434, 21434, 21434,
	572, 572, 12627, 12187, 432, -1000, 1784, 1474, -1000, 1293,
	1055, 1474, 211, 211, 211, 211, 211, 211, 21434, 5460,
	5460, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 200,
	1626, -1000, 21434, 1784, 1728, 1784, -1000, 431, 812, 1011,
	-1000, -1000, 193, 1357, -1000, 597, -1000, -1000, -1000, -1000,
	21434, 182, -1000, 994, 1622, 139, 7804, 16147, 18787, 21434,
	16147, -1000, -1000, -1000, -1000, -1000, -100, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 139, 16147, 16147,
	-73, -1000, -1000, -284, 1728, 5911, -1000, -1000, 5911, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 256, 210, -1000,
	1027, 646, 16147, 18787, 883, 21434, 225, -1000, 21434, 1409,
	1748, 21434, 1864, 6813, 1864, 21434, -1000, -1000, 501, 501,
	-1000, 609, 609, -1000, -1000, -101, 1864, 1864, -123, 21434,
	210, -1000, -1000, 1027, 20114, 1743, 17027, -1000, -143, 365,
	331, 347, -1000, -1000, 1894, -1000, -1000, 1385, 11747, 10853,
	223, 16147, 3650, -1000, -1000, 572, 572, 572, 3650, 3650,
	386, -1000, -1000, -1000, -1000, -1000, -1000, 21434, 1728, -1000,
	-1000, -1000, -1000, -1000, 1027, 16147, 18787, 21434, 21434, 22602,
	-1000, 1349, -1000, -1000, 9521, 426, 5911, 913, 1621, -1000,
	-1000, 1620, 1607, 1604, 1603, 1602, 1599, 1597, -1000, 1562,
	-1000, -1000, 1595, 1593, 1589, 1586, -1000, -1000, -1000, -1000,
	-1000, -1000, 1583, -1000, -1000, -1000, 1582, 1562, -1000, -1000,
	1581, 1579, 1578, 1576, 1574, -1000, -1000, -1000, -1000, -1000,
	-1000, 1010, 1008, 1033, -1000, -1000, -1000, -1000, 3199, 6813,
	6813, 6813, 6813, -1000, -1000, 1511, 5911, 1570, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7264, -1000, 1567, 1566, 1565,
	1564, 1563, 1562, 1543, 1005, 1537, 1536, 1535, 6813, 1534,
	1532, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1349, -1000, -282, -1000, 10413, 21434, 21434, -1000, 1728,
	-1000, 1728, 2326, -1000, 1765, -1000, 193, 94, -1000, -1000,
	-1000, -1000, -1000, -1000, 420, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1407, -1000, 21434, 590, -1000, -1000,
	-1000, -1000, -1000, 13, 14, 1372, -1000, -28, 111, -1000,
	1354, -1000, -1000, -1000, 590, 1372, 252, 1000, 995, -1000,
	909, 414, 1400, -1000, 729, 19674, 21434, -17, -1000, 1738,
	248, 1385, 1522, -1000, -1000, -1000, 1720, 19234, -1000, 1530,
	1346, -1000, -1000, 5911, -1000, -1000, 1864, 1864, 1864, 501,
	22602, 609, 21434, 609, -1000, -1000, 609, -1000, 411, 21434,
	-17, 248, 1525, -1000, 1844, 1361, -1000, -1000, -1000, -1000,
	1747, 21874, 190, -1000, -1000, 350, 342, 339, 18787, 245,
	-1000, -1000, 1385, -1000, -1000, -1000, 1523, 610, -1000, -1000,
	6813, -1000, 691, -1000, 3650, 3650, 3650, -1000, -1000, 14827,
	-1000, -1000, -1000, 1372, 1385, 1649, 1397, -1000, -1000, -1000,
	-1000, 1864, 5460, -1000, 17027, -1000, 5911, 5911, 5911, 5911,
	-1000, 18347, -1000, 17907, -1000, 292, 6362, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5911, 1782, 1782, 1782, 5911, 670,
	5911, 5911, -1000, 718, 22787, 1782, 1782, 1782, 1782, 1782,
	-1000, 2740, 1782, 1782, 1782, 1782, -1000, -1000, 6813, 6813,
	6813, 6813, 6813, 6813, 6813, 6813, 6813, 6813, 6813, 6813,
	1508, 613, 6813, 6813, 6813, 1055, 1777, 1396, -1000, -1000,
	-1000, -1000, -1000, 621, 691, 5911, 22874, 5911, 5911, 5911,
	-1000, 1281, 1277, -1000, -1000, 5911, -1000, 5911, 6813, 5911,
	-1000, 1782, 990, 1864, 1360, -1000, 1519, -1000, 1343, 1705,
	-1000, 408, 1387, -1000, 594, 1333, -1000, -1000, -1000, -1000,
	407, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-65, -1000, -1000, 21434, 994, 1329, 1871, 405, 404, 16147,
	-1000, 169, 16147, -1000, -1000, 21434, 237, 16147, 12, -140,
	5911, 5911, 21434, 5911, -1000, -1000, -1000, 1477, 638, 1517,
	-105, 575, -1000, -225, -1000, -42, 1648, 106, -1000, 1720,
	-1000, 642, -1000, 21434, 1335, -1000, 389, 23124, -1000, 21434,
	691, -1000, -1000, -1000, 1864, -1000, 501, -1000, 501, 609,
	21434, -1000, -1000, -105, -225, 1275, 21434, 17027, 17027, 17027,
	17027, -1000, 1675, 1674, -1000, 1709, 1661, 1665, 21434, 17027,
	21434, -1000, -1000, -1000, 22238, -1000, -1000, -1000, -1000, 1271,
	1865, -1000, -1000, -1000, 340, 1385, 16147, 919, 223, -1000,
	-1000, -1000, -1000, -1000, 21434, 21434, 1804, -1000, 1384, 1699,
	-1000, 652, 652, 660, -1000, -1000, 387, -1000, -1000, 263,
	-1000, -1000, -1000, -1000, -1000, 1511, -1000, -1000, -1000, 1265,
	1351, 691, 5911, -1000, -1000, 5911, 5911, 1097, 5911, 1252,
	1325, 1312, -1000, 1245, 1870, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5911, 5911, 5911, 5911, 5911, 1232,
	5009, -1000, -1000, -1000, 5911, 5911, 5911, 5911, 915, 987,
	-1000, 627, 627, 453, 453, 453, 453, 453, 761, 761,
	-1000, -1000, -1000, 3199, 1508, 6813, 6813, 6813, 203, 1801,
	1617, -1000, 5911, 635, -1000, 5911, 844, -1000, 1223, 1292,
	1204, 1199, -1000, -1000, 1032, 1190, 1161, 1172, 5911, 1376,
	1804, -282, 4552, 191, 21434, -282, 21434, 21434, 4552, -1000,
	21434, 2326, 809, -1000, -1000, -1000, 16147, 485, 538, -1000,
	14387, 16147, -1000, -1000, 16147, 129, 1727, -1000, -1000, -86,
	-79, 691, 691, 380, -1000, 1745, 1733, 9081, 814, -1000,
	-1000, 989, -1000, -1000, -64, -1000, -1000, -1000, 238, -1000,
	988, 971, 969, 954, 21434, -1000, -1000, -1000, -1000, -1000,
	575, 575, 575, 197, 1264, 379, 17027, 21434, -1000, 16587,
	1143, -1000, -1000, 1864, 1864, 501, -1000, 814, -2, -31,
	1239, -1000, 585, 1640, 1646, 1640, -1000, -1000, -1000, -1000,
	1671, -1000, 1664, -1000, -1000, 1239, -1000, 1477, -1000, -1000,
	-1000, 1372, 1139, -1000, -1000, -1000, -1000, 1846, 1855, 17467,
	-1000, -1000, -1000, -1000, -1000, 5911, 1771, 1751, 1731, 22892,
	1309, -1000, -1000, -1000, -1000, 5911, 1655, 1592, 1588, 1520,
	1514, -1000, 5911, 5911, 1211, 1502, 1488, 1458, 1438, 1307,
	-1000, 203, 1801, 1081, -1000, 6813, 6813, 1380, 617, -1000,
	5911, 823, 673, 13507, -1000, 5911, -1000, -1000, -1000, 13507,
	-1000, 6813, -1000, 1369, 953, 1846, -1000, 1125, 1373, -1000,
	-282, -1000, -1000, 1360, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1372, -1000, -1000, -1000, -1000, 16147, 1742,
	248, -1000, 20, 257, -286, -75, 1848, 1847, 21434, 190,
	21434, 1109, 1368, -1000, -1000, -1000, 22961, 591, -1000, 21434,
	682, 373, 210, 373, 675, 1507, -1000, -1000, -1000, 934,
	-36, -1000, -64, -1000, 799, 798, 797, 792, -34, -1000,
	-1000, -1000, -1000, -1000, 1500, 13507, 13947, 933, 21874, 17027,
	16587, 1189, -1000, 378, -1000, -1000, -1000, -1000, 1864, -1000,
	-1000, -2, -1000, 330, 308, 48, 1845, 1859, 21434, 4552,
	-1000, -1000, 5911, 1499, -1000, 5911, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5911, 5911, -1000, -1000, 691, -1000, -1000,
	-1000, 1107, -1000, 319, 319, -12, -1000, -1000, -1000, 1466,
	-1000, 1479, 1479, 1466, 1466, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1498, 1496, -1000, 1466, 1478, 1478,
	1466, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1487, 1487, 1494, 1487,
	-1000, 1365, -1000, -1000, -1000, -1000, -1000, 1339, 1298, 5911,
	-1000, -1000, -1000, -1000, -1000, -1000, 6813, -1000, -1000, -1000,
	-1000, 691, 5911, 1105, -1000, 1466, 1479, -1000, 1466, 1478,
	1466, 319, 319, 1078, 1140, 1072, 1501, -1000, 1067, -1000,
	-1000, 4552, 1360, -1000, 16147, 16147, -230, 9, 21434, -289,
	932, -1000, 1843, 931, 766, -1000, 1477, 23316, 9081, 1048,
	-1000, -1000, 21434, 21434, -1000, 21434, 21434, 210, 5911, -1000,
	-1000, 164, -1000, -1000, -1000, -1000, -1000, -1000, 15707, -1000,
	-1000, -1000, -1000, -1000, 1864, 1189, 378, -1000, -1000, 463,
	-1000, -1000, -1000, -1000, 790, -1000, -1000, -1000, 919, 1784,
	-1000, -1000, 691, 21434, 691, 691, 1351, -1000, -1000, -1000,
	-1000, -1000, -15, -1000, -1000, -1000, -1000, 788, -1000, 787,
	-1000, -1000, -1000, 917, 917, -1000, -1000, 784, -1000, -1000,
	-1000, 783, -1000, -1000, 782, -1000, -1000, -1000, -1000, 1178,
	-1000, 691, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5911, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -123, -291, 780, -1000, 916, -78, -1000, -1000, 1729,
	196, 23262, -1000, 575, 575, 599, 575, 575, 575, 575,
	154, 140, 575, 575, 575, 575, 575, 575, 575, 575,
	575, 575, 575, 575, 575, 575, 1473, -1000, -1000, 1048,
	-1000, -1000, 693, 6813, -1000, -1000, 914, 13947, 384, 409,
	1472, -1000, 110, 672, 668, -1000, 21434, -1000, 1470, 1503,
	79, 1469, -1000, 1468, 1467, 21434, 1151, 255, 910, 1303,
	-1000, 1466, 5911, 1859, -1000, 44, -1000, -1000, -1000, 1297,
	-1000, -1000, 1065, 1060, 1289, -1000, 1280, 1058, 1274, 1259,
	-1000, 1124, -93, -85, -1000, 1457, -1000, -1000, 1830, 190,
	-1000, 1829, 23316, -1000, 779, 778, 575, 575, 776, 908,
	906, 905, 575, 575, 773, 897, 22238, 772, 771, 765,
	791, 884, 443, 769, 754, 735, 21434, 1456, 827, -1000,
	-1000, 1801, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 764, 1454, -1000, -1000, 1453, 15707, 101,
	101, 15707, 15707, 15707, 1452, 303, -1000, -53, -1000, -1000,
	15707, 1725, 920, 1784, -1000, -1000, -1000, -1000, -1000, 860,
	-1000, -1000, -1000, 760, -1000, 746, -1000, 218, -84, -85,
	-1000, 1828, -80, 1806, 1803, 21434, 766, -1000, 134, -1000,
	-1000, -1000, 13507, 13507, -1000, -1000, -1000, -1000, 832, 829,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 145, 21434, 1250, -1000, 581, 1047, 5911, -220,
	15707, 1231, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1229,
	1226, 1222, 15707, -1000, -1000, -1000, 104, -1000, 118, -1000,
	-1000, 1725, -1000, -1000, 918, 828, 1450, 726, -75, 1798,
	-1000, 766, 1792, 766, 766, 1186, -1000, -1000, 95, 198,
	194, -1000, 261, -1000, -1000, -1000, -1000, -1000, -1000, 170,
	1184, -1000, 827, 825, -1000, 836, 1645, -1000, -13, 1159,
	-1000, -1000, -1000, -1000, 1157, -1000, -1000, 575, 824, 61,
	-1000, -1000, -1000, -1000, -1000, 1753, 13067, -94, -1000, 819,
	-1000, 766, -1000, -1000, -1000, 21434, 93, 723, 6813, 1449,
	6813, 1441, 108, 1439, -1000, -1000, -1000, -1000, -1000, 303,
	-1000, -1000, 1643, 1642, 1868, -1000, -1000, -1000, -1000, 118,
	118, 118, 118, 6, 713, -1000, 883, -1000, 21434, -1000,
	1155, -1000, -1000, -1000, 377, -1000, -1000, -1000, -1000, 1437,
	1783, -1000, 1045, 21434, 935, 21434, 1415, 574, 6813, -1000,
	-1000, 1887, -1000, 1884, 434, 434, -1000, -1000, -1000, 1301,
	-1000, 551, -1000, 15267, 21434, -1000, 195, 99, -1000, 1153,
	-1000, 1142, 21434, 710, 826, -1000, -1000, -1000, 762, 117,
	-1000, 21434, 4101, -1000, 375, 1115, -1000, 1020, 85, -1000,
	-1000, 1112, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 691,
	21434, -1000, 195, 1703, -1000, 696, -1000, -1000, -1000, 23170,
	185, -1000, -1000, 23170, 87, -1000, 175, -1000, -1000, 1071,
	-1000, 839, 1414, -1000, 87, 23316, 5911, -1000, 23316, 1050,
	-1000,
}

var yyPgo = [...]int{
	0, 118, 2211, 173, 130, 122, 172, 2209, 1770, 1767,
	2208, 2207, 2206, 2205, 2199, 2198, 2197, 2195, 2194, 2193,
	2192, 2191, 2190, 2189, 2188, 2186, 169, 2184, 2183, 2182,
	2181, 2180, 2179, 2178, 2177, 2176, 2173, 2172, 2171, 2170,
	120, 2169, 1764, 2168, 2167, 2164, 2161, 2160, 156, 2158,
	2156, 2155, 2154, 2153, 2152, 2151, 2150, 2148, 2147, 2146,
	2145, 2144, 165, 48, 110, 191, 45, 183, 186, 142,
	77, 125, 166, 116, 2143, 2141, 112, 25, 124, 2140,
	44, 40, 31, 182, 109, 55, 63, 95, 2139, 2138,
	91, 2136, 2135, 2134, 2133, 62, 2132, 84, 38, 97,
	27, 2130, 2129, 2128, 86, 2127, 2126, 2125, 2124, 90,
	2122, 67, 53, 2121, 2120, 2119, 2118, 2117, 32, 2116,
	43, 2115, 2114, 2113, 2112, 2110, 2109, 2108, 15, 18,
	20, 2107, 2103, 17, 2, 2102, 157, 82, 89, 101,
	2101, 332, 2100, 2099, 2098, 113, 2097, 151, 2096, 2095,
	2094, 2092, 2091, 10, 2090, 54, 2087, 2086, 2085, 56,
	2084, 2083, 2082, 104, 39, 50, 103, 2081, 2080, 79,
	163, 16, 231, 0, 152, 42, 2079, 2078, 2077, 185,
	155, 149, 2072, 94, 219, 135, 57, 2071, 47, 75,
	2070, 2069, 2065, 107, 69, 11, 2064, 114, 2063, 140,
	87, 2062, 106, 2061, 144, 1, 99, 2057, 160, 2056,
	2054, 2053, 132, 2052, 2051, 64, 127, 2050, 2049, 2048,
	26, 2047, 35, 30, 2046, 147, 171, 2045, 2042, 2040,
	136, 102, 88, 2035, 2031, 80, 2030, 117, 81, 73,
	115, 712, 111, 65, 19, 2027, 158, 2026, 233, 164,
	145, 2024, 2023, 170, 1116, 168, 2022, 153, 9, 2021,
	2020, 12, 2019, 24, 2018, 2017, 2016, 2015, 6, 2014,
	2012, 2011, 3, 5, 2010, 4, 105, 51, 70, 2009,
	72, 74, 2008, 2006, 2005, 2004, 2002, 239, 2001, 2000,
	1999, 1995, 1993, 1992, 1991, 93, 1990, 1989, 1988, 1986,
	68, 1984, 1983, 1982, 1981, 1980, 29, 1979, 1978, 21,
	1977, 23, 1976, 1974, 1972, 13, 134, 1970, 1969, 14,
	1968, 1951, 7, 8, 1943, 1942, 58, 41, 37, 85,
	83, 1941, 22, 1940, 98, 1939, 1938, 126, 1936, 108,
	1934, 128, 159, 243, 1933, 154, 1932, 1931, 1930, 1927,
	1926, 1925, 1924, 728, 1923, 1922, 162, 59, 167, 1921,
	148, 1920, 119, 96, 1919, 1905, 1904, 150, 1903,
}

//line mysql_sql.y:6972
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 364, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 56, 325, 325, 324, 324, 323,
	323, 322, 322, 322, 321, 321, 321, 320, 320, 319,
	319, 318, 318, 316, 316, 317, 315, 314, 314, 312,
	312, 310, 310, 311, 311, 305, 305, 308, 308, 306,
	306, 306, 306, 309, 304, 304, 304, 303, 303, 55,
	55, 55, 243, 243, 54, 54, 257, 257, 257, 257,
	257, 255, 255, 255, 255, 254, 254, 253, 253, 258,
	258, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 49, 49, 49, 49, 52, 53,
	251, 251, 251, 251, 251, 252, 252, 252, 50, 51,
	51, 242, 242, 247, 247, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 250, 250, 250,
	249, 249, 248, 248, 43, 43, 43, 46, 45, 241,
	241, 241, 241, 241, 241, 241, 241, 44, 44, 44,
	44, 44, 44, 41, 41, 40, 40, 42, 42, 240,
	240, 239, 59, 59, 59, 59, 59, 59, 59, 58,
	58, 61, 61, 60, 48, 48, 48, 48, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 348, 348, 348,
	350, 350, 177, 178, 365, 176, 176, 176, 344, 344,
	345, 346, 347, 347, 347, 57, 7, 7, 38, 39,
	39, 287, 287, 190, 190, 191, 191, 189, 189, 189,
	189, 189, 189, 290, 291, 186, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 30, 30, 37,
	366, 366, 366, 35, 36, 286, 286, 286, 34, 33,
	32, 31, 31, 29, 29, 28, 28, 183, 183, 185,
	185, 181, 367, 367, 263, 263, 184, 184, 27, 27,
	182, 182, 160, 180, 180, 180, 6, 10, 10, 10,
	10, 10, 10, 10, 15, 17, 16, 13, 12, 11,
	14, 5, 5, 5, 5, 8, 8, 9, 71, 71,
	99, 99, 357, 357, 353, 353, 354, 354, 354, 355,
	355, 356, 356, 4, 294, 294, 294, 294, 294, 294,
	333, 333, 333, 334, 89, 89, 84, 84, 295, 295,
	206, 335, 335, 302, 302, 301, 301, 300, 300, 87,
	87, 88, 88, 75, 75, 62, 62, 307, 307, 307,
	307, 313, 313, 284, 284, 125, 125, 156, 156, 157,
	157, 63, 63, 64, 64, 64, 64, 64, 64, 341,
	341, 343, 343, 342, 86, 86, 82, 82, 83, 83,
	83, 81, 81, 80, 79, 79, 78, 77, 77, 77,
	66, 66, 65, 65, 65, 65, 65, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 67,
	67, 349, 349, 349, 288, 288, 288, 293, 293, 138,
	138, 139, 139, 137, 137, 68, 68, 69, 69, 69,
	69, 136, 136, 135, 70, 70, 76, 72, 72, 74,
	74, 74, 74, 146, 146, 145, 145, 145, 145, 92,
	92, 144, 143, 143, 143, 91, 91, 90, 90, 85,
	85, 73, 73, 142, 368, 368, 140, 169, 169, 169,
	175, 175, 168, 168, 168, 168, 168, 179, 174, 174,
	170, 170, 171, 171, 171, 3, 3, 3, 3, 21,
	21, 21, 21, 25, 25, 351, 351, 18, 358, 360,
	359, 361, 361, 361, 362, 362, 362, 363, 363, 19,
	237, 237, 236, 236, 238, 238, 238, 238, 232, 232,
	233, 233, 233, 233, 234, 234, 234, 235, 235, 235,
	235, 231, 231, 230, 228, 228, 228, 229, 229, 229,
	229, 229, 229, 172, 172, 20, 225, 225, 226, 226,
	226, 227, 227, 219, 219, 219, 219, 24, 223, 223,
	224, 224, 224, 224, 224, 220, 220, 222, 222, 218,
	218, 218, 218, 218, 23, 217, 217, 215, 215, 213,
	213, 214, 214, 212, 212, 212, 216, 216, 22, 289,
	289, 259, 259, 262, 262, 269, 269, 270, 270, 268,
	268, 275, 275, 274, 274, 273, 273, 272, 272, 271,
	271, 266, 266, 265, 265, 260, 260, 260, 260, 260,
	261, 261, 264, 264, 267, 267, 116, 116, 117, 117,
	117, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	331, 331, 332, 119, 119, 119, 123, 123, 123, 123,
	123, 123, 118, 118, 120, 120, 100, 100, 98, 98,
	93, 93, 94, 94, 95, 95, 96, 96, 97, 97,
	97, 97, 97, 97, 245, 245, 329, 329, 330, 330,
	326, 326, 326, 328, 328, 328, 328, 328, 327, 327,
	101, 154, 154, 154, 173, 173, 173, 153, 153, 153,
	115, 115, 114, 114, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 244, 244, 187,
	187, 188, 188, 133, 131, 131, 132, 132, 132, 132,
	129, 130, 128, 128, 128, 128, 128, 127, 127, 126,
	126, 126, 221, 221, 124, 124, 122, 122, 122, 121,
	121, 121, 276, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 198, 198, 203,
	203, 340, 340, 339, 102, 102, 102, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 111, 111, 111, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 299, 299, 299, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 152,
	352, 352, 352, 336, 336, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 150, 150, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 207,
	207, 208, 208, 296, 296, 296, 296, 296, 296, 297,
	297, 298, 298, 298, 298, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 196, 147, 147, 147, 209, 204, 204,
	205, 205, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 201, 201, 201, 201, 201, 193, 193, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 200, 200,
	202, 202, 211, 211, 211, 210, 210, 210, 210, 210,
	210, 210, 113, 113, 113, 113, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 104, 104, 104, 104,
	108, 108, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 109, 109, 109, 109,
	107, 107, 107, 107, 107, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	106, 155, 155, 277, 277, 280, 280, 278, 278, 279,
	281, 281, 281, 282, 282, 282, 283, 283, 283, 285,
	285, 159, 159, 159, 165, 165, 158, 158, 166, 166,
	167, 167, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 14, 0, 2, 1, 3, 3,
	3, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 9,
	4, 7, 0, 3, 7, 4, 1, 3, 3, 3,
	1, 0, 1, 1, 1, 1, 3, 1, 4, 1,
	3, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 6,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 0,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 1, 2, 9, 7, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 2, 4, 3, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 1, 1, 1, 1, 6, 1, 1, 7, 7,
	9, 0, 2, 0, 1, 1, 2, 2, 2, 1,
	4, 2, 2, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 5,
	1, 1, 1, 5, 5, 0, 1, 1, 2, 2,
	3, 6, 7, 4, 4, 7, 8, 0, 2, 0,
	2, 2, 1, 1, 1, 1, 0, 1, 4, 5,
	1, 3, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 6, 4, 4,
	3, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	0, 1, 3, 3, 1, 3, 1, 3, 1, 3,
	4, 0, 1, 0, 1, 1, 3, 1, 1, 0,
	4, 1, 3, 2, 1, 0, 8, 0, 4, 7,
	4, 0, 2, 0, 2, 0, 2, 0, 4, 1,
	3, 1, 1, 4, 3, 4, 5, 4, 5, 2,
	3, 1, 3, 6, 0, 3, 0, 1, 2, 4,
	4, 0, 1, 3, 1, 3, 2, 0, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 7,
	7, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 1, 4,
	4, 4, 3, 2, 2, 2, 3, 2, 3, 0,
	2, 1, 1, 2, 2, 0, 1, 2, 4, 1,
	3, 1, 4, 3, 0, 1, 2, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 8, 11, 0, 1, 7, 1, 4,
	1, 3, 4, 3, 0, 1, 1, 0, 2, 6,
	0, 2, 1, 2, 2, 2, 2, 2, 0, 1,
	2, 2, 2, 2, 1, 3, 2, 2, 2, 2,
	2, 1, 3, 2, 1, 3, 2, 0, 3, 3,
	5, 5, 4, 1, 1, 4, 1, 3, 1, 3,
	2, 1, 1, 0, 1, 1, 1, 11, 0, 2,
	3, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 5, 1, 1, 0, 3, 0,
	1, 1, 2, 4, 4, 4, 0, 1, 10, 0,
	1, 0, 6, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	6, 0, 2, 0, 2, 4, 5, 4, 5, 1,
	6, 5, 0, 3, 0, 1, 0, 1, 1, 3,
	2, 3, 3, 4, 4, 3, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 5, 4,
	1, 3, 3, 0, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	0, 1, 1, 3, 1, 1, 2, 1, 7, 7,
	7, 7, 8, 5, 0, 1, 0, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 2, 1, 2, 2, 1, 1, 2,
	2, 2, 2, 2, 1, 5, 6, 1, 2, 0,
	1, 1, 2, 5, 0, 1, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 1, 1, 2, 5, 6,
	6, 6, 1, 1, 1, 1, 1, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 5,
	4, 4, 5, 5, 5, 5, 4, 5, 5, 5,
	5, 5, 5, 5, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 5, 4, 6, 6, 7, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 2, 3, 2,
	4, 6, 2, 2, 4, 6, 4, 2, 2, 0,
	1, 2, 3, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 3, 0, 1,
	1, 3, 3, 3, 3, 3, 2, 3, 4, 3,
	4, 1, 3, 4, 3, 4, 1, 1, 1, 3,
	4, 4, 5, 3, 4, 5, 6, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -364, -2, -1, -3, -4, -5, -6, -47, -58,
	-60, -61, -26, -7, -57, -40, -41, -43, -49, -54,
	-55, -56, -63, -21, -20, -19, -18, 12, -8, -9,
	-341, -10, -176, -177, -178, -365, -27, -28, -29, -31,
	-32, -33, -34, -35, -36, -37, -30, -39, -38, 195,
	-42, 53, -44, -45, -46, -50, -51, -52, -53, 305,
	311, 351, -64, -66, -22, -23, -24, -25, 191, 14,
	423, -11, -14, -12, -13, -16, -17, -15, 213, 212,
	32, 272, 273, 309, 211, 192, 13, 125, 126, 128,
	129, 25, -65, 58, 193, -67, 10, 469, -75, 33,
	-98, -173, 62, -161, -164, 426, 427, 428, 429, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
	461, 420, 230, 254, 257, 264, 125, 144, 138, 166,
	158, 133, 234, 235, 69, 128, 380, 79, 365, 350,
	131, 249, 251, 253, 256, 236, 154, 149, 248, 232,
	147, 237, 34, 238, 171, 239, 240, 425, 361, 287,
	367, 261, 348, 148, 362, 252, 364, 172, 176, 372,
	311, 142, 143, 369, 374, 170, 210, 37, 422, 222,
	375, 174, 169, 165, 383, 265, 263, 168, 141, 164,
	233, 42, 178, 177, 179, 344, 345, 346, 347, 241,
	242, 299, 371, 161, 150, 291, 134, 22, 378, 217,
	366, 312, 243, 258, 266, 173, 175, 224, 229, 424,
	228, 262, 376, 146, 221, 250, 216, 379, 135, 305,
	314, 244, 129, 255, 373, 382, 41, 327, 140, 132,
	207, 126, 226, 231, 245, 246, 247, 268, 267, 259,
	162, 223, 167, 139, 163, 127, 225, 381, 328, 468,
	289, 333, 160, 157, 227, 200, 377, 368, 130, 337,
	329, 155, 269, 465, 466, 467, 300, 286, 270, 271,
	153, 214, -42, -9, -8, -65, -66, -180, 23, 348,
	-48, 349, 195, 58, -173, -5, -4, -40, -63, -179,
	-173, 272, -179, 198, -173, -254, -225, -253, -226, -256,
	-227, -172, 26, 192, 191, 225, 14, 193, 309, 199,
	12, 10, 310, 211, 13, 311, 313, 314, 317, 318,
	319, 36, 322, 323, 62, 65, -173, -254, -225, 229,
	236, -80, -81, -141, 19, 6, 7, 8, 9, -289,
	288, 333, 228, -219, -217, 320, 208, 207, 80, 385,
	197, -353, -354, 188, 189, 190, -343, 417, -342, -173,
	418, -159, -366, -286, 368, 367, -184, 366, 359, 370,
	361, 191, 79, 159, 156, 199, 369, 37, 372, 373,
	362, 288, 333, -353, 130, 127, -241, 85, 135, 134,
	-241, 228, 35, -247, 343, -246, -248, 372, 373, 383,
	63, 64, 371, -159, -173, 79, -81, -141, -80, -64,
	-66, -341, 288, 333, 228, 199, 198, 385, 272, -288,
	-349, 26, -293, 185, 186, 187, 27, 28, -1, -87,
	220, -98, 124, -81, -80, -81, -153, -173, 350, 94,
	-48, -48, 349, -344, -345, -346, -348, 195, 349, 348,
	124, 15, -179, 56, -98, 55, 59, 15, 59, 58,
	470, 63, 307, 321, 333, 308, 320, 200, 228, 321,
	228, 359, 200, 312, 315, 316, 360, 55, 201, 55,
	-303, 383, -62, 33, -83, 21, -67, -66, 20, 26,
	27, 26, 27, 26, 27, 26, 27, -351, 198, 417,
	-215, 203, -215, -215, 199, -215, -355, 137, 59, -343,
	-86, 58, -183, 102, -183, -367, 15, 104, 227, 226,
	363, 360, -263, 364, 365, -184, -183, -183, -184, 198,
	385, 25, 25, -215, -287, 203, -356, 202, 376, 423,
	133, 134, 135, -251, 26, 35, 342, -225, 228, 59,
	94, 23, -249, 94, 105, -248, -248, -248, -249, -249,
	-118, 35, -172, 121, 65, -118, 35, 124, -82, -83,
	-67, -66, 60, 60, -287, -287, -287, -287, -287, -287,
	-179, -68, -69, 112, -199, -173, 86, -201, 62, -194,
	426, 427, 428, 429, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 440, 442, 443, 444, 445, 446,
	447, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 459, 460, 461, 79, 348, 299, 333, 155,
	300, 153, 214, -195, -197, -322, -316, -192, 58, 110,
	111, 118, 87, -196, -276, 30, 89, 393, -148, -149,
	-150, -151, -152, -317, -315, 65, 70, 73, 76, 77,
	75, 74, 151, 72, 66, 123, -66, -336, -162, -292,
	-298, 197, -296, 156, 152, 12, 116, 343, 121, -299,
	462, 64, 63, 293, 294, 295, 385, 290, 296, 203,
	47, 297, 298, 301, 392, 302, 48, 303, 292, 218,
	304, 396, 395, 397, 389, 386, 384, 387, 388, 390,
	391, -68, -294, 38, -63, 58, 25, 58, -173, -82,
	-62, -83, 124, 70, 65, -48, 60, 59, -347, 76,
	77, -350, 170, 162, -173, -59, 65, -3, -4, -5,
	-6, -26, -40, -63, -318, -316, 58, -255, 198, 306,
	224, -253, 225, 311, 314, -231, -230, -228, -172, -226,
	-258, -153, -172, 360, -255, -231, -230, 352, 464, -62,
	-199, -173, -79, -78, -199, 200, -215, -358, 62, 86,
	-231, -225, -171, 62, 63, 64, -173, -356, -342, 29,
	-85, -173, -137, 16, -197, -137, -98, -183, -183, -185,
	-367, -181, -367, 360, -137, -137, -263, -182, -173, -215,
	-358, -231, 333, 30, -72, -70, -73, -74, -76, -140,
	-142, -98, 58, 377, 378, 131, 134, 133, 7, -252,
	342, 26, -225, -246, -242, 65, 343, -230, -250, 55,
	121, -300, -199, 35, -249, -249, -249, -250, -250, 120,
	-173, -62, -358, -231, -225, -173, -100, -98, -174, -171,
	-164, -136, 59, -135, 15, -168, 85, 82, 83, 84,
	-173, 29, 65, 124, -199, 101, -210, 94, 95, 96,
	97, 98, 99, 100, 58, 58, 58, 58, 58, 58,
	58, 58, -208, 58, 58, 58, 58, 58, 58, 58,
	-208, 58, 58, 58, 58, 58, 65, 65, 107, 106,
	117, 110, 111, 112, 113, 114, 115, 116, 108, 109,
	104, 86, 102, 103, 88, -66, -199, -205, -197, -197,
	-197, -197, -276, -203, -199, 58, -199, 58, 58, 58,
	-297, 58, 58, -207, -208, 58, 65, 58, 58, 58,
	-197, 58, 58, -136, -295, -206, -335, 463, -89, 60,
	-84, -173, -333, -334, -84, -88, -173, -62, -62, -166,
	-167, -158, -163, -170, -171, -164, 288, 196, 26, 85,
	29, 31, 293, 325, 88, 121, 20, 89, 156, 120,
	295, 393, 294, 191, 51, 395, 397, 396, 386, 384,
	335, 339, 341, 338, 385, 359, 35, 14, 32, 212,
	27, 28, 114, 193, 92, 93, 215, 30, 213, 77,
	23, 54, 15, 17, 18, 296, 334, 203, 202, 104,
	352, 199, 49, 12, 123, 33, 101, 336, 45, 81,
	47, 102, 21, 387, 388, 36, 351, 419, 219, 116,
	297, 298, 52, 86, 342, 75, 55, 82, 19, 50,
	103, 194, 392, 48, 340, 301, 303, 417, 302, 197,
	370, 10, 292, 394, 25, 211, 46, 198, 360, 91,
	201, 76, 218, 152, 6, 80, 13, 53, 56, 389,
	390, 391, 38, 90, 16, 304, 423, 343, 353, 354,
	355, 356, 357, 358, 180, 181, 182, 183, 184, 260,
	206, 204, 208, 209, 463, 464, 185, 186, 283, 285,
	159, 188, 189, 190, 220, 137, 7, 330, 331, 332,
	23, -48, -345, 124, 59, -85, -257, 112, 62, 59,
	-229, 334, 470, 63, 60, 59, -257, 201, 65, 65,
	59, 22, 124, 59, -77, 31, 32, -98, 203, -98,
	-360, 330, 30, -232, -233, 340, -218, 56, -213, -214,
	-212, -216, 35, 15, -71, -99, -173, 58, 60, 59,
	-199, -137, -137, -137, -183, -174, -185, -180, -185, -181,
	124, -160, -173, -360, -232, 58, 25, -143, -144, -145,
	-146, 45, 49, 51, 46, 47, 48, 52, 25, 59,
	-368, 29, -169, -175, 29, -170, 65, -171, -164, -64,
	-66, 132, 135, 135, 134, -225, 201, 58, 94, -250,
	-250, -250, 35, -172, 55, 59, -137, -69, -70, -72,
	-199, -199, -199, -199, -173, 65, -173, 112, -193, 86,
	286, 75, 76, 77, -194, -211, 26, 270, 271, -204,
	-205, -199, -147, 27, 26, -147, -147, -199, -147, 112,
	-205, -205, 60, 70, -337, -338, 398, 399, 400, 401,
	402, 403, 404, 405, 406, 407, 408, 297, 292, 298,
	296, 290, 304, 299, 300, 155, 415, 416, 409, 410,
	411, 412, 413, 414, -147, -147, -147, -147, -147, -199,
	-352, 284, 283, 285, -147, -147, -147, -147, -195, -195,
	-195, -195, -195, -195, -195, -195, -195, -195, -195, -195,
	-202, -209, -276, 58, 104, 102, 103, 88, -197, -195,
	-195, 60, 59, -340, -339, 90, -199, -337, -204, -199,
	-204, -204, 60, 60, -205, -204, -195, -204, -147, 65,
	-137, 59, 58, 60, 59, 38, 124, 59, 94, 60,
	59, 124, 350, -173, -316, 60, 15, 124, 124, -230,
	20, 423, -172, -153, 201, -231, -304, 202, 392, -307,
	364, -199, -199, -173, -78, -86, 86, 58, -362, 366,
	332, -165, 94, -237, 423, 342, 341, 337, -234, -235,
	336, 338, 335, 339, 55, 278, 279, 280, 281, -212,
	-159, 120, 239, -98, -71, -173, 15, 59, -357, 124,
	-1, -173, -137, -183, -183, -185, -173, -362, -237, 60,
	-240, -239, -153, -73, -73, -73, -73, 45, 45, 45,
	50, 45, 50, 45, -145, -240, -76, -173, -175, 60,
	135, -231, -186, 65, -242, -98, -98, -139, 17, 124,
	-193, 286, 75, -276, 60, 59, -199, -199, -199, 29,
	-205, 60, 60, 60, 60, 15, -199, -199, -199, -199,
	-199, 60, 15, 15, -199, -199, -199, -199, -199, -205,
	-202, -197, -195, -195, -200, 215, 85, -199, -198, -339,
	92, -199, 59, 56, 60, 15, 60, 60, 60, 56,
	60, 59, 60, -199, 59, -139, -206, -302, -301, -300,
	38, -63, -84, -295, -173, -334, -300, -173, -166, -163,
	-171, -164, 70, -231, 112, 112, 62, -172, 343, -172,
	-231, -243, 423, 33, -313, 358, 353, 355, 124, 29,
	30, -93, -94, -95, -101, -96, -153, -188, -97, 206,
	204, 208, -330, 80, 209, 260, 81, 199, -363, 69,
	-359, 65, -236, -238, 344, 345, 346, 347, 85, -235,
	65, 65, 65, 65, -98, -165, -165, -165, -87, 56,
	124, -70, -99, -173, 112, 60, -137, -137, -183, -363,
	-190, -191, -189, 288, -290, 343, 334, -137, 59, 94,
	-91, -90, 55, 56, -92, 55, -90, 45, 45, -137,
	-86, 60, -138, 18, 20, -173, 112, -199, 60, 60,
	60, -102, -104, 327, 328, -108, -105, -107, -106, -110,
	-109, 156, 157, 121, 160, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 25, 214, 152, 153, 154,
	155, 172, 138, 158, 421, 180, 139, 181, 140, 182,
	141, 183, 142, 143, 184, 144, 147, 148, 149, 146,
	60, -199, 60, 60, 60, 60, 60, -199, -199, 15,
	60, 60, 60, 60, 60, -200, 85, -197, -194, 60,
	93, -199, 91, -103, -109, 121, 156, 214, 155, 154,
	152, 327, 328, -118, -199, -118, -195, 60, 65, -138,
	60, 59, -295, -172, 20, 29, -232, 311, 198, -284,
	465, -311, 353, 20, 20, -63, -98, 60, 59, -104,
	-97, -173, 81, -329, -330, -215, -329, 81, 58, 65,
	-361, 334, -238, 70, 70, 70, 70, -235, 58, -118,
	-120, -172, 121, 65, -169, -70, -173, -137, -357, 124,
	-137, -189, 289, 36, 123, 291, 35, 287, 20, -81,
	-239, -300, -199, 58, -199, -199, -205, 60, -111, 143,
	142, -111, -283, 328, 327, -277, -279, 58, -278, 58,
	-278, -277, -277, 58, 58, -277, -280, 58, -280, -277,
	-281, 58, -281, -282, 58, -281, 60, 60, 60, -199,
	-194, -199, 60, -277, -278, -277, -280, -277, -111, -111,
	60, 60, 23, 60, 60, 60, -300, -172, -172, -243,
	312, -98, -125, 466, 65, 20, 65, -309, 65, -86,
	-116, -117, -134, 325, 230, -216, 234, 69, 235, 350,
	236, 199, 238, 239, 240, 210, 241, 242, 243, 343,
	244, 245, 246, 247, 308, 6, 274, -95, -115, -114,
	-112, 75, 86, 35, 325, -113, 69, 120, 253, 231,
	254, -133, -187, 204, 80, 81, 313, -188, -326, -327,
	-173, -327, -173, -326, -326, -215, -199, 20, 423, -220,
	-222, -153, 58, -137, -137, 70, -291, -186, -82, -85,
	-285, 329, 70, 70, -155, 65, -155, 70, 70, 70,
	60, -199, -305, -263, -156, 467, 70, 65, 355, 29,
	-259, 220, 59, -134, -165, -165, -159, 120, -165, -165,
	-165, -165, 237, 237, -165, -165, -165, -165, -165, -165,
	-165, -165, -165, -165, -165, -165, -165, -165, 58, -112,
	75, -195, 65, -120, -121, 35, 252, 248, -122, 35,
	232, 233, -124, 58, 260, 81, 81, -98, 58, 56,
	269, 58, 58, 58, -327, 60, 65, 331, 65, 60,
	59, -277, -199, -81, 290, 60, 60, 60, 60, 59,
	60, 60, 60, 59, 60, 59, 60, -312, 358, -308,
	-306, 353, 354, 355, 356, 58, 20, -63, 20, -134,
	70, 70, -165, -165, 70, 65, 65, 65, -165, -165,
	70, 65, -175, 70, 70, 70, 70, 35, 65, -123,
	35, 248, 252, 249, 250, 251, 70, 35, 70, 35,
	70, 35, -173, 58, -331, -332, 65, 70, 58, -221,
	58, -220, -328, 278, 279, 280, 282, 281, -328, -220,
	-220, -220, 58, -245, -244, 261, 86, 343, -223, -222,
	-77, 60, -82, 65, 70, 70, -314, 202, -310, 357,
	-306, 20, 355, 20, 20, -157, -173, -309, -260, 262,
	263, -261, -267, 265, -118, -118, 65, 65, -119, 231,
	-100, 60, 59, 94, 60, -199, -127, -126, 419, -220,
	60, 60, 60, 60, -220, 261, -224, 210, 69, 423,
	276, 277, -77, 60, 60, -321, 58, 70, -311, 20,
	-309, 20, -309, -309, 60, 59, -265, 266, 58, -263,
	58, -263, 81, 279, 232, 233, 60, -332, 65, 60,
	-131, -132, -129, -130, 55, 362, 258, 259, 60, -223,
	-223, -223, -223, 60, -165, 65, 275, -325, 25, 60,
	-320, -319, -154, -315, -173, 358, 65, -309, -173, -262,
	267, 70, -195, 58, -195, 58, -264, 264, 58, -244,
	-130, 55, -129, 55, 14, 13, -133, 70, -171, -324,
	-323, -322, 60, 59, 124, -269, 58, 20, 60, -258,
	60, -258, 58, 94, -195, -128, 255, 256, 25, 134,
	-128, 59, 94, -319, -173, -270, -268, 220, -261, 60,
	60, -258, 70, 60, 75, 35, 257, -323, 35, -199,
	124, 60, 59, 62, -266, 268, 60, -173, -268, -271,
	38, 70, -275, -272, 58, -134, 222, -275, -134, -274,
	-273, 267, 223, 60, 59, 62, 58, -273, -272, -205,
	60,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 515, 516, 517, 518, 0, 321, 322,
	0, 306, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 236, 237, 0,
	185, 184, 164, 165, 166, 124, 125, 126, 127, 0,
	0, 0, 391, -2, 519, 520, 521, 522, -2, 334,
	0, 307, 308, 309, 310, 311, 312, 313, 225, 226,
	227, 222, 223, 224, -2, 0, 334, 177, 0, 169,
	169, 0, 411, 0, 0, 422, 444, 23, 369, 0,
	374, 708, 744, 745, 746, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
	1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 186, 323, 324, 411, 411, 208, 0, 1317,
	212, 0, 0, 0, 303, 204, 205, 206, 207, 0,
	507, 0, 201, 0, 183, 0, 0, 85, 576, 87,
	578, 0, 91, 93, 94, -2, 98, 99, 100, 101,
	102, 103, 104, 0, 106, 1325, 108, 1385, 111, 112,
	113, 0, 122, 123, -2, -2, 573, 0, 0, 1373,
	67, -2, 0, 0, 0, 427, 430, 433, 436, 525,
	607, 607, 607, 0, 607, 620, 584, 585, 586, 605,
	606, 339, 335, 336, 337, 338, 399, 0, 401, 404,
	287, 287, 0, 0, 278, 279, 0, 296, 287, 287,
	296, 0, 1111, 0, 0, 270, 271, 272, 276, 277,
	297, 607, 241, 341, 178, 179, 168, 0, 173, 0,
	167, 1375, 0, 138, 0, 143, 0, 1324, 1389, 1339,
	0, 0, 1357, 0, 162, -2, 406, 0, 412, 0,
	411, 0, 241, 241, 241, 241, 241, 241, 0, 0,
	0, 445, 446, 441, 442, 443, 447, 448, 3, 0,
	0, 373, 0, 406, -2, 0, 209, 747, 0, 0,
	213, 214, 0, 0, 228, 0, 231, 217, 218, 219,
	0, 0, 203, 0, 0, 81, 0, 0, 0, 0,
	0, 580, 92, 121, 95, 96, 0, 116, 118, 120,
	119, 105, 117, 107, 109, 110, 115, 81, 0, 0,
	0, 68, 394, 0, 375, 0, 424, 426, 0, 428,
	429, 431, 432, 434, 435, 437, 438, 0, 607, 526,
	0, 0, 0, 0, 0, 0, 341, 340, 0, 400,
	0, 0, 453, 0, 453, 0, 292, 293, 287, 287,
	280, 289, 0, 294, 295, 0, 453, 453, 0, 0,
	607, 1112, 1113, 0, 0, 0, 0, 342, 0, 0,
	171, 0, 176, 128, 133, 131, 132, 134, 0, 0,
	0, 0, 0, 160, 161, 0, 0, 0, 0, 0,
	151, 154, 702, 703, 574, 155, 156, 0, 375, 407,
	423, 425, 420, 421, 0, 0, 0, 0, 0, 0,
	320, 461, 455, 457, 502, 31, 0, 1001, 744, 1006,
	-2, 1448, 1449, 1450, 1451, 1452, 1453, 1454, -2, 1456,
	-2, -2, 1459, 1460, 1461, 1463, -2, -2, -2, -2,
	-2, -2, 1470, -2, -2, -2, 1474, 1475, -2, -2,
	1478, 1479, 1480, 1481, 1482, -2, -2, -2, -2, -2,
	-2, -2, -2, 1017, 815, 816, 817, 818, 0, 0,
	0, 0, 0, 825, 826, 0, 839, 0, 832, 833,
	834, 835, 836, 43, 44, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 964, 802, 0, 0, 0,
	949, 0, 939, 0, 977, 0, 0, 0, 0, 0,
	0, 45, 46, 955, 957, 958, 960, 961, 962, 963,
	966, 967, 968, 971, 972, 973, 974, 975, 976, 979,
	981, 951, 952, 953, 954, 943, 944, 945, 946, 947,
	948, 461, 343, 361, 345, 0, 350, 0, 709, 375,
	397, 375, 0, 210, 0, 215, 0, 0, 230, 232,
	233, 234, 220, 221, 304, 199, 200, 192, 193, 194,
	195, 196, 197, 198, 202, 41, 0, 0, 82, 83,
	84, 86, 97, 0, 0, 75, 561, 567, 564, 577,
	0, 89, 579, 114, 0, 70, 0, 0, 0, 395,
	408, 31, 413, 414, 417, 0, 0, 0, 528, 0,
	548, 575, 599, 512, 513, 514, -2, 0, 402, 0,
	0, 489, 267, 0, 288, 268, 453, 453, 453, 287,
	0, 289, 0, 289, 283, 284, 0, 298, 300, 0,
	0, 548, 1416, 242, 466, 0, 467, 468, 464, 491,
	494, 497, 0, 180, 181, 0, 0, 175, 0, 0,
	135, 136, 137, 144, 139, 141, 0, 0, 145, 157,
	158, 159, 367, 368, 0, 0, 0, 149, 150, 0,
	163, 393, 314, 315, 316, 0, 318, 706, 319, 508,
	509, 453, 0, 462, 0, 458, 0, 0, 0, 0,
	503, 0, 505, 0, 996, 0, 0, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 988, 984, 984, 984, 0, 984,
	0, 0, 924, 0, 0, 984, 984, 984, 984, 984,
	925, 0, 984, 984, 984, 984, 938, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 990, 0, 821, 822,
	823, 824, 827, 0, 840, 0, 0, 988, 988, 988,
	927, 0, 0, 929, 940, 0, 933, 988, 0, 988,
	937, 984, 0, 453, 344, 358, 0, 362, 0, 0,
	354, 356, 349, 351, 0, 0, 371, 396, 398, 748,
	0, 1118, -2, 1120, -2, -2, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
	1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
	1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	0, 216, 229, 0, 0, 0, 0, 76, 80, 0,
	563, 0, 0, 566, 88, 0, 0, 0, 64, 377,
	0, 0, 0, 0, 416, 418, 419, 404, 0, 0,
	534, 1114, 608, 540, 549, 0, 0, 0, 604, -2,
	611, 0, 617, 0, 0, 328, 332, 23, 405, 0,
	454, 269, 273, 274, 453, 290, 287, 291, 287, 289,
	0, 299, 302, 534, 540, 0, 0, 0, 0, 0,
	0, 482, 0, 0, 481, 0, 0, 0, 0, 0,
	0, 495, 496, 498, 0, 500, 501, 510, 511, 0,
	411, 182, 170, 172, 0, 130, 0, 0, 0, 146,
	147, 148, 152, 153, 0, 0, 451, 456, 463, 466,
	992, 993, 994, 995, 504, 506, 32, 459, 997, 0,
	999, 1002, 1007, 1008, 1004, 0, 1022, -2, -2, 0,
	989, 990, 0, 985, 986, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 0, 0, 0, 0, 0, 0,
	0, 890, 891, 892, 0, 0, 0, 0, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	1009, 1020, 1021, 0, 0, 0, 0, 0, 1018, 1013,
	0, 819, 0, 837, 841, 0, 0, 983, 0, 990,
	0, 0, 950, 928, 0, 0, 0, 0, 0, 0,
	451, 361, 363, 0, 0, 361, 0, 0, 0, 370,
	0, 0, 0, 305, 42, 235, 0, 0, 0, 562,
	0, 0, 565, 90, 0, 72, 0, 65, 66, 381,
	0, 409, 410, 32, 415, 0, 0, 710, 537, 535,
	536, 0, 1115, 539, 0, 550, 551, 552, 553, 554,
	0, 0, 0, 0, 0, 600, 601, 602, 603, 612,
	1114, 1114, 1114, 369, 0, -2, 0, 0, 330, 0,
	0, 490, 281, 453, 453, 287, 301, 537, 243, 0,
	453, 189, 0, 485, 479, 0, 472, 483, 484, 475,
	0, 477, 0, 473, 474, 453, 465, 404, 499, 493,
	174, 129, 0, 255, 140, 317, 707, 449, 0, 0,
	998, 1000, 1003, 1005, 877, 0, 0, 0, 0, 0,
	0, 866, 860, 861, 942, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	1010, 1018, 1014, 0, 1011, 0, 0, 991, 0, 842,
	0, 0, 0, 0, 878, 0, 882, 926, 930, 0,
	934, 0, 936, 0, 0, 449, 359, 0, 364, 365,
	361, 348, 355, 347, 357, 352, 353, 372, 749, 1119,
	1116, 1117, 211, 74, 77, 78, 79, 568, 0, 569,
	548, 71, 0, 0, 383, 53, 0, 0, 0, 0,
	0, 0, 711, 712, 714, 715, 0, 0, 717, 771,
	0, 726, 607, 726, 0, 0, 728, 729, 527, 0,
	0, 530, 541, 542, 0, 0, 0, 0, 0, 556,
	557, 558, 559, 560, 0, 0, 0, 0, 497, 0,
	0, 453, 329, 332, 333, 403, 285, 282, 453, 238,
	239, 244, 245, 0, 249, 0, 0, 411, 0, 0,
	469, 486, 0, 0, 470, 0, 471, 476, 478, 188,
	492, 142, 439, 0, 0, 33, 460, 991, 862, 863,
	864, 0, 844, 856, 856, 1106, 1047, 1048, 1049, 1093,
	1051, 1097, 1097, 1093, 1093, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 0, 0, 1070, 1093, 1095, 1095,
	1093, 1090, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1100, 1100, 1103, 1100,
	865, 0, 884, 867, 868, 871, 869, 0, 0, 0,
	883, 872, 873, 859, 987, 1012, 0, 1019, 1015, 820,
	828, 838, 0, 0, 847, 1093, 1097, 850, 1093, 1095,
	1093, 856, 856, 0, 0, 0, 0, 870, 0, 440,
	360, 0, 346, 572, 0, 0, 72, 0, 0, 385,
	0, 382, 0, 0, 0, 523, 404, -2, 0, -2,
	716, 772, 738, 738, 727, 738, 738, 607, 0, 538,
	529, 0, 543, 544, 545, 546, 547, 555, 0, 613,
	614, 704, 705, 615, 453, 453, -2, 326, 331, 0,
	286, 246, 247, 248, 0, 251, 252, 254, 0, 406,
	190, 191, 487, 0, 480, 450, 452, 829, 845, 857,
	858, 846, 1109, 1107, 1108, 1050, 1094, 0, 1075, 0,
	1076, 1077, 1078, 0, 0, 1071, 1072, 0, 1073, 1074,
	1066, 0, 1067, 1068, 0, 1069, 881, 886, 887, 0,
	1016, 843, 830, 848, 849, 851, 852, 853, 854, 855,
	831, 879, 0, 931, 935, 889, 366, 570, 571, 69,
	73, 55, 387, 0, 384, 0, 378, 380, 63, 0,
	621, -2, 658, 1114, 1114, 0, 1114, 1114, 1114, 1114,
	0, 0, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
	1114, 1114, 1114, 1114, 1114, 1114, 0, 713, 740, -2,
	752, 754, 0, 0, 757, 758, 0, 0, 0, 0,
	794, 764, 0, 0, 1034, 1035, 0, 770, 0, 730,
	739, 0, 739, 0, 0, 738, 0, 0, 0, 0,
	595, 1093, 0, 411, 327, 0, 253, 240, 187, 0,
	1046, 1110, 0, 0, 0, 1091, 0, 0, 0, 0,
	888, 0, 49, 0, 376, 0, 386, 54, 0, 0,
	618, 0, 616, 660, 0, 0, 1114, 1114, 0, 0,
	0, 0, 1114, 1114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 753,
	755, 756, 759, 760, 761, 799, 800, 801, 762, 796,
	797, 798, 763, 0, 0, 1032, 1033, 792, 0, 0,
	0, 0, 0, 0, 0, 724, 531, 0, 533, 588,
	0, 417, 0, 406, 250, 488, 1099, 1098, 1088, 0,
	1089, 1096, 1101, 0, 1104, 0, 880, 47, 51, 56,
	57, 0, 0, 0, 0, 0, 0, 524, 654, 659,
	661, 662, 0, 0, 665, 666, 667, 668, 0, 0,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	696, 697, 698, 699, 700, 701, 681, 682, 683, 684,
	685, 686, 693, 0, 0, 690, 0, 0, 0, 787,
	0, 0, 731, 733, 734, 735, 736, 737, 732, 0,
	0, 0, 0, 723, 725, 767, 0, 532, 587, 596,
	597, 417, 325, 1092, 0, 0, 34, 0, 53, 0,
	58, 0, 0, 0, 0, 0, 389, 379, 643, 0,
	0, 649, 0, 655, 663, 664, 669, 670, 687, 0,
	0, 689, 0, 0, 795, 0, 774, 788, 0, 0,
	588, 588, 588, 588, 0, 768, 589, 1114, 0, 0,
	593, 594, 598, 1102, 1105, 25, 0, 0, 50, 0,
	59, 0, 61, 62, 388, 0, 623, 0, 0, 0,
	0, 0, 652, 0, 694, 695, 688, 691, 692, 765,
	773, 775, 776, 777, 0, 789, 790, 791, 793, 718,
	719, 720, 721, 0, 0, 591, 0, 24, 0, 35,
	0, 37, 39, 40, 741, 48, 52, 60, 390, 625,
	0, 644, 0, 0, 0, 0, 0, 0, 0, 766,
	778, 0, 779, 0, 0, 0, 722, 590, 592, 26,
	27, 0, 36, 0, 0, 622, 0, 654, 645, 0,
	647, 0, 0, 0, 0, 780, 782, 783, 0, 0,
	781, 0, 0, 38, 742, 0, 627, 0, 641, 646,
	648, 0, 653, 651, 784, 786, 785, 28, 29, 30,
	0, 626, 0, 639, 624, 0, 650, 743, 628, -2,
	0, 642, 629, -2, 0, 637, 0, 630, 638, 0,
	633, 0, 0, 632, 0, -2, 0, 634, -2, 0,
	640,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 115, 107, 3,
	58, 60, 112, 110, 59, 111, 124, 113, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 469,
	95, 94, 96, 3, 470, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 117, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 118,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 108, 109, 114,
	116, 119, 120, 121, 122, 123, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:532
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:538
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:564
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:568
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:574
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:589
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:593
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:599
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:603
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:609
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:616
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:625
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:629
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:633
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:638
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:642
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:646
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:652
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:661
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:672
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:676
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:682
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:686
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:692
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:696
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:702
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:726
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:745
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:749
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:754
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:758
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:766
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:770
		{
			yyVAL.str = yyDollar[3].str
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:775
		{
			yyVAL.str = "\n"
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:779
		{
			yyVAL.str = yyDollar[3].str
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:788
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:812
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:816
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:822
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:828
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:846
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:863
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:886
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:890
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:894
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:899
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:903
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:909
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:919
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:927
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:937
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:941
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:951
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:961
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:971
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:977
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:983
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:990
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:998
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1006
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1010
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1014
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1018
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1024
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1028
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1050
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1054
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1060
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1064
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1068
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1072
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1076
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1080
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1200
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1206
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1214
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1218
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1226
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1236
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1244
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1250
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1256
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1260
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1267
		{
			yyVAL.str = yyDollar[3].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1273
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1277
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1283
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1291
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1300
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1308
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1316
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1339
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1369
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1376
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1384
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1391
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1398
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1407
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1411
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1415
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1421
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1425
		{
			yyVAL.str = yyDollar[1].str
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1432
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1443
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1449
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1454
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1458
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1462
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1466
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1470
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1474
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1478
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1482
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1488
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1492
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1496
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1500
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1505
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1510
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1516
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1520
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1527
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1534
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1545
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: yyDollar[4].tableExprsUnion(),
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1556
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1560
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1566
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1578
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1584
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1588
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1594
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1598
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1604
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1613
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1619
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1623
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1627
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1631
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1635
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1639
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1647
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1655
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1665
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1697
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1701
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1707
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1713
		{
			yyVAL.str = yyDollar[1].str
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1718
		{
			yyVAL.str = "true"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1719
		{
			yyVAL.str = "false"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1720
		{
			yyVAL.str = yyDollar[1].str
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1725
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1736
		{
			yyLOCAL = &tree.AlterAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1748
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1759
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1772
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1776
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1781
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1785
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1791
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1795
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1801
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1805
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1809
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1813
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1817
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1821
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1827
		{
			yyVAL.item = nil
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1832
		{
			yyVAL.item = nil
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1854
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1858
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1864
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1878
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1888
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1897
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1901
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1905
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1911
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1917
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1923
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1929
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1939
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1951
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1955
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1961
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1973
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1986
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1990
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1995
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1999
		{
			yyVAL.str = yyDollar[2].str
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2005
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2018
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2022
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2028
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2032
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2038
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2042
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2051
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2055
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2059
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2077
		{
			yyLOCAL = &tree.DropAccount{
				IfExists: yyDollar[3].boolValUnion(),
				Name:     yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2086
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2095
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2104
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2114
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2120
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2134
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2139
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2146
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2162
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: yyDollar[7].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2175
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: yyDollar[8].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2190
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2196
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2201
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2208
		{
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2210
		{
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2213
		{
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2222
		{
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2226
		{
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2231
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2240
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2247
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2253
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2261
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2268
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2275
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2294
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2298
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2302
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2308
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2317
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2321
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2327
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2331
		{
			yyVAL.str = yyDollar[3].str
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2337
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2341
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2347
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2352
		{
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2356
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2363
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2367
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2374
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2379
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2383
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2393
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2399
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2403
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2408
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2412
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2425
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2432
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2439
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2457
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2476
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2489
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2493
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2506
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2510
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2515
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2519
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2526
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2531
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2538
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2544
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2548
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2552
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2556
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2560
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2564
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2570
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2577
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2586
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2590
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2596
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2604
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2608
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2617
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2623
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2627
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2631
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2636
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2640
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2646
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2652
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2656
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2662
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2667
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2671
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2675
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2682
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2686
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2692
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2696
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2706
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2716
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2726
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2738
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2746
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2754
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2763
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2771
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2779
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2787
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2795
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2803
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2811
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2819
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2827
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2837
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2848
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2866
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2870
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2874
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2883
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2887
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2892
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2896
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2901
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2905
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2911
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2915
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2921
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2925
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2929
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2933
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2938
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2946
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2952
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2960
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2964
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2977
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2986
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2996
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3005
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3015
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3019
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3029
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3033
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3037
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3041
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3047
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3051
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3057
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3063
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3067
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3071
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3077
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3081
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3087
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3091
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3097
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3101
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3107
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3111
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:3124
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3129
		{
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3130
		{
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:3134
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3146
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3150
		{
			yyVAL.str = yyDollar[1].str
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3154
		{
			yyVAL.str = yyDollar[2].str
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3163
		{
			yyVAL.str = ""
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3167
		{
			yyVAL.str = yyDollar[1].str
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3171
		{
			yyVAL.str = yyDollar[2].str
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3175
		{
			yyVAL.str = yyDollar[1].str
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3179
		{
			yyVAL.str = yyDollar[2].str
		}
	case 523:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3213
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3223
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3234
		{
		}
	case 527:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3239
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3251
		{
			yyVAL.str = yyDollar[1].str
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:3257
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3267
		{
			yyVAL.str = yyDollar[1].str
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:3273
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:3280
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:3286
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:3294
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:3300
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:3307
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:3315
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:3321
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3330
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3340
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3344
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3350
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3354
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3360
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3364
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3368
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3372
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3378
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3385
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3390
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3395
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3400
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3406
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3410
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3414
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3420
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3424
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3428
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3432
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3438
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3442
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3448
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3461
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3465
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3469
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3474
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3478
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3485
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3491
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3499
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3506
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3518
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3527
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3531
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3537
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3541
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3545
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3554
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3558
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3562
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3566
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3572
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3591
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3595
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3617
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3621
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3625
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3629
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3633
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3639
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3643
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3649
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3654
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3659
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3663
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3667
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3671
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3675
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3681
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3695
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3699
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3704
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3708
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3714
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3718
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3724
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3728
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3732
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3737
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3741
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3747
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3759
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3763
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3768
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3772
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3782
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3786
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3795
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3799
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3805
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3809
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3815
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3824
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3834
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3838
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3844
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3848
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3854
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3861
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3870
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3874
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3879
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3883
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3888
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3892
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3902
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3906
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3917
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3925
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3933
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3941
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3952
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3962
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3972
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3976
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3981
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3985
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3990
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3994
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:4000
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:4004
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:4008
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4014
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4018
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4022
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4026
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4030
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4034
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4038
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4042
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4046
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4050
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4054
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4058
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4062
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4066
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4070
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4074
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4078
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4082
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4086
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4090
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4094
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4098
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4102
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4106
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4110
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4114
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4118
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4122
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:4133
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:4137
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:4143
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4148
		{
			yyVAL.str = ""
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4152
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4156
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4162
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4166
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4170
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4174
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4178
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4182
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4196
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4200
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4209
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4214
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4220
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4227
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4231
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4237
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4241
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4247
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4257
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4263
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4272
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4281
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4304
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4313
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4323
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4331
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4337
		{
			yyVAL.str = ""
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4341
		{
			yyVAL.str = yyDollar[1].str
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4351
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4357
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4363
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4377
		{
			yyVAL.str = ""
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4384
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4390
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4394
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4398
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4409
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4413
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4417
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4422
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4426
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4432
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4436
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4442
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4446
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4450
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4454
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4458
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4462
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4466
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4470
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4474
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4478
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4482
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4486
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4490
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4500
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4504
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4509
		{
			yyVAL.str = ""
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4513
		{
			yyVAL.str = yyDollar[1].str
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4519
		{
			yyVAL.str = ""
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4523
		{
			yyVAL.str = yyDollar[2].str
		}
	case 773:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4529
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4540
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4550
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4557
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4564
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4571
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4580
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4586
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4592
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4596
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4600
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4604
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4608
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4613
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4620
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4624
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4628
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4633
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4637
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4642
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4646
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4662
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4668
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4672
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4676
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4680
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4684
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4688
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4692
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4696
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4700
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4704
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4708
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4712
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4716
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4722
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4726
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4730
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4734
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4738
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4742
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4746
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4750
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4754
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4758
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4762
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4766
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4771
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4779
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4783
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4787
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4796
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4800
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4804
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4808
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4812
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4817
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4821
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4826
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4830
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4836
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4840
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4846
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4856
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4873
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4890
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4903
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4916
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4928
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4942
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4957
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4972
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4989
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5004
		{
		}
	case 859:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5010
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5019
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5027
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5035
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5044
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5053
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5062
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5071
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5080
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5089
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5098
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5107
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5116
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5125
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5134
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5150
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5158
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5166
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5174
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5182
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5191
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5199
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5208
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5217
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5225
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5233
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5242
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5252
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			a1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			a2 := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{a1, a2},
			}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5273
		{
			yyVAL.str = yyDollar[1].str
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5309
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5321
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5335
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5343
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5350
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5357
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5369
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5377
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5388
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5397
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5406
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5414
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5424
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5432
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5440
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5450
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5454
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5460
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5464
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5483
		{
		}
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5485
		{
		}
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5525
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5535
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5539
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5543
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5549
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5554
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5558
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5564
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5568
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5575
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5579
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5583
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5591
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5595
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5599
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5603
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5607
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5612
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5617
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5623
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5627
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5631
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5635
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5642
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5646
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5652
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5656
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5660
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5664
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5668
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5672
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5676
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5680
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5686
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5690
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5696
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5700
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5707
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5711
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5715
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5721
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5725
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5729
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5733
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5737
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5741
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5745
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5751
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5755
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5759
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5763
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5769
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5773
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5786
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5791
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5795
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5799
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5803
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5817
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5821
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5835
		{
			yyLOCAL = tree.NewParamExpr(yyp)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5841
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5852
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5857
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5863
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5875
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5887
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5899
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5912
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5925
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5938
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5951
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5964
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5977
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5990
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6003
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6016
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6029
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6044
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6067
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6104
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6152
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6169
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6181
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6196
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6216
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6236
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6252
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6265
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6278
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6291
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6304
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6316
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6328
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6340
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6352
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6364
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6376
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6388
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6400
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6412
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6425
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6440
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6463
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6468
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6474
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6481
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6485
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6490
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6494
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6500
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6506
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6513
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6520
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6529
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6536
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6543
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6552
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6556
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6560
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6566
		{
		}
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6568
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6578
		{
			yyVAL.str = ""
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6582
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
