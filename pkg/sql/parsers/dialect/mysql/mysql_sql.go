// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CROSS_L2 = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const INCREMENT = 57659
const CYCLE = 57660
const MINVALUE = 57661
const PUBLICATION = 57662
const SUBSCRIPTIONS = 57663
const PUBLICATIONS = 57664
const PROPERTIES = 57665
const PARSER = 57666
const VISIBLE = 57667
const INVISIBLE = 57668
const BTREE = 57669
const HASH = 57670
const RTREE = 57671
const BSI = 57672
const IVFFLAT = 57673
const MASTER = 57674
const ZONEMAP = 57675
const LEADING = 57676
const BOTH = 57677
const TRAILING = 57678
const UNKNOWN = 57679
const LISTS = 57680
const OP_TYPE = 57681
const REINDEX = 57682
const EXPIRE = 57683
const ACCOUNT = 57684
const ACCOUNTS = 57685
const UNLOCK = 57686
const DAY = 57687
const NEVER = 57688
const PUMP = 57689
const MYSQL_COMPATIBILITY_MODE = 57690
const UNIQUE_CHECK_ON_AUTOINCR = 57691
const MODIFY = 57692
const CHANGE = 57693
const SECOND = 57694
const ASCII = 57695
const COALESCE = 57696
const COLLATION = 57697
const HOUR = 57698
const MICROSECOND = 57699
const MINUTE = 57700
const MONTH = 57701
const QUARTER = 57702
const REPEAT = 57703
const REVERSE = 57704
const ROW_COUNT = 57705
const WEEK = 57706
const REVOKE = 57707
const FUNCTION = 57708
const PRIVILEGES = 57709
const TABLESPACE = 57710
const EXECUTE = 57711
const SUPER = 57712
const GRANT = 57713
const OPTION = 57714
const REFERENCES = 57715
const REPLICATION = 57716
const SLAVE = 57717
const CLIENT = 57718
const USAGE = 57719
const RELOAD = 57720
const FILE = 57721
const TEMPORARY = 57722
const ROUTINE = 57723
const EVENT = 57724
const SHUTDOWN = 57725
const NULLX = 57726
const AUTO_INCREMENT = 57727
const APPROXNUM = 57728
const SIGNED = 57729
const UNSIGNED = 57730
const ZEROFILL = 57731
const ENGINES = 57732
const LOW_CARDINALITY = 57733
const AUTOEXTEND_SIZE = 57734
const ADMIN_NAME = 57735
const RANDOM = 57736
const SUSPEND = 57737
const ATTRIBUTE = 57738
const HISTORY = 57739
const REUSE = 57740
const CURRENT = 57741
const OPTIONAL = 57742
const FAILED_LOGIN_ATTEMPTS = 57743
const PASSWORD_LOCK_TIME = 57744
const UNBOUNDED = 57745
const SECONDARY = 57746
const RESTRICTED = 57747
const USER = 57748
const IDENTIFIED = 57749
const CIPHER = 57750
const ISSUER = 57751
const X509 = 57752
const SUBJECT = 57753
const SAN = 57754
const REQUIRE = 57755
const SSL = 57756
const NONE = 57757
const PASSWORD = 57758
const SHARED = 57759
const EXCLUSIVE = 57760
const MAX_QUERIES_PER_HOUR = 57761
const MAX_UPDATES_PER_HOUR = 57762
const MAX_CONNECTIONS_PER_HOUR = 57763
const MAX_USER_CONNECTIONS = 57764
const FORMAT = 57765
const VERBOSE = 57766
const CONNECTION = 57767
const TRIGGERS = 57768
const PROFILES = 57769
const LOAD = 57770
const INLINE = 57771
const INFILE = 57772
const TERMINATED = 57773
const OPTIONALLY = 57774
const ENCLOSED = 57775
const ESCAPED = 57776
const STARTING = 57777
const LINES = 57778
const ROWS = 57779
const IMPORT = 57780
const DISCARD = 57781
const JSONTYPE = 57782
const MODUMP = 57783
const OVER = 57784
const PRECEDING = 57785
const FOLLOWING = 57786
const GROUPS = 57787
const DATABASES = 57788
const TABLES = 57789
const SEQUENCES = 57790
const EXTENDED = 57791
const FULL = 57792
const PROCESSLIST = 57793
const FIELDS = 57794
const COLUMNS = 57795
const OPEN = 57796
const ERRORS = 57797
const WARNINGS = 57798
const INDEXES = 57799
const SCHEMAS = 57800
const NODE = 57801
const LOCKS = 57802
const ROLES = 57803
const TABLE_NUMBER = 57804
const COLUMN_NUMBER = 57805
const TABLE_VALUES = 57806
const TABLE_SIZE = 57807
const NAMES = 57808
const GLOBAL = 57809
const PERSIST = 57810
const SESSION = 57811
const ISOLATION = 57812
const LEVEL = 57813
const READ = 57814
const WRITE = 57815
const ONLY = 57816
const REPEATABLE = 57817
const COMMITTED = 57818
const UNCOMMITTED = 57819
const SERIALIZABLE = 57820
const LOCAL = 57821
const EVENTS = 57822
const PLUGINS = 57823
const CURRENT_TIMESTAMP = 57824
const DATABASE = 57825
const CURRENT_TIME = 57826
const LOCALTIME = 57827
const LOCALTIMESTAMP = 57828
const UTC_DATE = 57829
const UTC_TIME = 57830
const UTC_TIMESTAMP = 57831
const REPLACE = 57832
const CONVERT = 57833
const SEPARATOR = 57834
const TIMESTAMPDIFF = 57835
const CURRENT_DATE = 57836
const CURRENT_USER = 57837
const CURRENT_ROLE = 57838
const SECOND_MICROSECOND = 57839
const MINUTE_MICROSECOND = 57840
const MINUTE_SECOND = 57841
const HOUR_MICROSECOND = 57842
const HOUR_SECOND = 57843
const HOUR_MINUTE = 57844
const DAY_MICROSECOND = 57845
const DAY_SECOND = 57846
const DAY_MINUTE = 57847
const DAY_HOUR = 57848
const YEAR_MONTH = 57849
const SQL_TSI_HOUR = 57850
const SQL_TSI_DAY = 57851
const SQL_TSI_WEEK = 57852
const SQL_TSI_MONTH = 57853
const SQL_TSI_QUARTER = 57854
const SQL_TSI_YEAR = 57855
const SQL_TSI_SECOND = 57856
const SQL_TSI_MINUTE = 57857
const RECURSIVE = 57858
const CONFIG = 57859
const DRAINER = 57860
const SOURCE = 57861
const STREAM = 57862
const HEADERS = 57863
const CONNECTOR = 57864
const CONNECTORS = 57865
const DAEMON = 57866
const PAUSE = 57867
const CANCEL = 57868
const TASK = 57869
const RESUME = 57870
const MATCH = 57871
const AGAINST = 57872
const BOOLEAN = 57873
const LANGUAGE = 57874
const WITH = 57875
const QUERY = 57876
const EXPANSION = 57877
const WITHOUT = 57878
const VALIDATION = 57879
const UPGRADE = 57880
const RETRY = 57881
const ADDDATE = 57882
const BIT_AND = 57883
const BIT_OR = 57884
const BIT_XOR = 57885
const CAST = 57886
const COUNT = 57887
const APPROX_COUNT = 57888
const APPROX_COUNT_DISTINCT = 57889
const SERIAL_EXTRACT = 57890
const APPROX_PERCENTILE = 57891
const CURDATE = 57892
const CURTIME = 57893
const DATE_ADD = 57894
const DATE_SUB = 57895
const EXTRACT = 57896
const GROUP_CONCAT = 57897
const MAX = 57898
const MID = 57899
const MIN = 57900
const NOW = 57901
const POSITION = 57902
const SESSION_USER = 57903
const STD = 57904
const STDDEV = 57905
const MEDIAN = 57906
const CLUSTER_CENTERS = 57907
const KMEANS = 57908
const STDDEV_POP = 57909
const STDDEV_SAMP = 57910
const SUBDATE = 57911
const SUBSTR = 57912
const SUBSTRING = 57913
const SUM = 57914
const SYSDATE = 57915
const SYSTEM_USER = 57916
const TRANSLATE = 57917
const TRIM = 57918
const VARIANCE = 57919
const VAR_POP = 57920
const VAR_SAMP = 57921
const AVG = 57922
const RANK = 57923
const ROW_NUMBER = 57924
const DENSE_RANK = 57925
const BIT_CAST = 57926
const BITMAP_BIT_POSITION = 57927
const BITMAP_BUCKET_NUMBER = 57928
const BITMAP_COUNT = 57929
const BITMAP_CONSTRUCT_AGG = 57930
const BITMAP_OR_AGG = 57931
const NEXTVAL = 57932
const SETVAL = 57933
const CURRVAL = 57934
const LASTVAL = 57935
const ARROW = 57936
const ROW = 57937
const OUTFILE = 57938
const HEADER = 57939
const MAX_FILE_SIZE = 57940
const FORCE_QUOTE = 57941
const PARALLEL = 57942
const STRICT = 57943
const UNUSED = 57944
const BINDINGS = 57945
const DO = 57946
const DECLARE = 57947
const LOOP = 57948
const WHILE = 57949
const LEAVE = 57950
const ITERATE = 57951
const UNTIL = 57952
const CALL = 57953
const PREV = 57954
const SLIDING = 57955
const FILL = 57956
const SPBEGIN = 57957
const BACKEND = 57958
const SERVERS = 57959
const HANDLER = 57960
const PERCENT = 57961
const SAMPLE = 57962
const MO_TS = 57963
const PITR = 57964
const CDC = 57965
const GROUPING = 57966
const SETS = 57967
const CUBE = 57968
const ROLLUP = 57969
const LOGSERVICE = 57970
const REPLICAS = 57971
const STORES = 57972
const SETTINGS = 57973
const KILL = 57974
const BACKUP = 57975
const FILESYSTEM = 57976
const PARALLELISM = 57977
const RESTORE = 57978
const QUERY_RESULT = 57979

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12806

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 141,
	11, 802,
	22, 802,
	-2, 795,
	-1, 166,
	246, 1229,
	248, 1128,
	-2, 1175,
	-1, 193,
	44, 625,
	248, 625,
	275, 632,
	276, 632,
	474, 625,
	-2, 660,
	-1, 233,
	658, 2001,
	-2, 529,
	-1, 541,
	658, 2124,
	-2, 409,
	-1, 599,
	658, 2183,
	-2, 407,
	-1, 600,
	658, 2184,
	-2, 408,
	-1, 601,
	658, 2185,
	-2, 410,
	-1, 741,
	327, 178,
	446, 178,
	447, 178,
	-2, 1903,
	-1, 808,
	86, 1688,
	-2, 2060,
	-1, 809,
	86, 1707,
	-2, 2031,
	-1, 813,
	86, 1708,
	-2, 2059,
	-1, 847,
	86, 1615,
	-2, 2263,
	-1, 848,
	86, 1616,
	-2, 2262,
	-1, 849,
	86, 1617,
	-2, 2252,
	-1, 850,
	86, 2224,
	-2, 2245,
	-1, 851,
	86, 2225,
	-2, 2246,
	-1, 852,
	86, 2226,
	-2, 2254,
	-1, 853,
	86, 2227,
	-2, 2234,
	-1, 854,
	86, 2228,
	-2, 2243,
	-1, 855,
	86, 2229,
	-2, 2255,
	-1, 856,
	86, 2230,
	-2, 2256,
	-1, 857,
	86, 2231,
	-2, 2261,
	-1, 858,
	86, 2232,
	-2, 2266,
	-1, 859,
	86, 2233,
	-2, 2267,
	-1, 860,
	86, 1684,
	-2, 2098,
	-1, 861,
	86, 1685,
	-2, 1887,
	-1, 862,
	86, 1686,
	-2, 2107,
	-1, 863,
	86, 1687,
	-2, 1896,
	-1, 865,
	86, 1690,
	-2, 1904,
	-1, 867,
	86, 1692,
	-2, 2131,
	-1, 869,
	86, 1695,
	-2, 1923,
	-1, 871,
	86, 1697,
	-2, 2143,
	-1, 872,
	86, 1698,
	-2, 2142,
	-1, 873,
	86, 1699,
	-2, 1968,
	-1, 874,
	86, 1700,
	-2, 2055,
	-1, 877,
	86, 1703,
	-2, 2154,
	-1, 879,
	86, 1705,
	-2, 2157,
	-1, 880,
	86, 1706,
	-2, 2159,
	-1, 881,
	86, 1709,
	-2, 2167,
	-1, 882,
	86, 1710,
	-2, 2040,
	-1, 883,
	86, 1711,
	-2, 2085,
	-1, 884,
	86, 1712,
	-2, 2050,
	-1, 885,
	86, 1713,
	-2, 2075,
	-1, 896,
	86, 1593,
	-2, 2257,
	-1, 897,
	86, 1594,
	-2, 2258,
	-1, 898,
	86, 1595,
	-2, 2259,
	-1, 1002,
	469, 660,
	470, 660,
	-2, 626,
	-1, 1053,
	128, 1887,
	139, 1887,
	159, 1887,
	-2, 1861,
	-1, 1174,
	22, 829,
	-2, 778,
	-1, 1284,
	11, 802,
	22, 802,
	-2, 1470,
	-1, 1368,
	22, 829,
	-2, 778,
	-1, 1727,
	86, 1760,
	-2, 2057,
	-1, 1728,
	86, 1761,
	-2, 2058,
	-1, 1903,
	87, 1000,
	-2, 1006,
	-1, 2356,
	111, 1167,
	155, 1167,
	195, 1167,
	198, 1167,
	288, 1167,
	-2, 1160,
	-1, 2517,
	11, 802,
	22, 802,
	-2, 941,
	-1, 2551,
	87, 1847,
	160, 1847,
	-2, 2042,
	-1, 2552,
	87, 1847,
	160, 1847,
	-2, 2041,
	-1, 2553,
	87, 1823,
	160, 1823,
	-2, 2028,
	-1, 2554,
	87, 1824,
	160, 1824,
	-2, 2033,
	-1, 2555,
	87, 1825,
	160, 1825,
	-2, 1956,
	-1, 2556,
	87, 1826,
	160, 1826,
	-2, 1950,
	-1, 2557,
	87, 1827,
	160, 1827,
	-2, 1877,
	-1, 2558,
	87, 1828,
	160, 1828,
	-2, 2030,
	-1, 2559,
	87, 1829,
	160, 1829,
	-2, 1954,
	-1, 2560,
	87, 1830,
	160, 1830,
	-2, 1949,
	-1, 2561,
	87, 1831,
	160, 1831,
	-2, 1937,
	-1, 2562,
	87, 1847,
	160, 1847,
	-2, 1938,
	-1, 2563,
	87, 1847,
	160, 1847,
	-2, 1939,
	-1, 2565,
	87, 1836,
	160, 1836,
	-2, 2075,
	-1, 2566,
	87, 1813,
	160, 1813,
	-2, 2060,
	-1, 2567,
	87, 1845,
	160, 1845,
	-2, 2031,
	-1, 2568,
	87, 1845,
	160, 1845,
	-2, 2059,
	-1, 2569,
	87, 1845,
	160, 1845,
	-2, 1905,
	-1, 2570,
	87, 1843,
	160, 1843,
	-2, 2050,
	-1, 2571,
	87, 1840,
	160, 1840,
	-2, 1928,
	-1, 2572,
	86, 1794,
	87, 1794,
	160, 1794,
	404, 1794,
	405, 1794,
	406, 1794,
	-2, 1876,
	-1, 2573,
	86, 1795,
	87, 1795,
	160, 1795,
	404, 1795,
	405, 1795,
	406, 1795,
	-2, 1878,
	-1, 2574,
	86, 1796,
	87, 1796,
	160, 1796,
	404, 1796,
	405, 1796,
	406, 1796,
	-2, 2103,
	-1, 2575,
	86, 1798,
	87, 1798,
	160, 1798,
	404, 1798,
	405, 1798,
	406, 1798,
	-2, 2032,
	-1, 2576,
	86, 1800,
	87, 1800,
	160, 1800,
	404, 1800,
	405, 1800,
	406, 1800,
	-2, 2011,
	-1, 2577,
	86, 1802,
	87, 1802,
	160, 1802,
	404, 1802,
	405, 1802,
	406, 1802,
	-2, 1955,
	-1, 2578,
	86, 1804,
	87, 1804,
	160, 1804,
	404, 1804,
	405, 1804,
	406, 1804,
	-2, 1933,
	-1, 2579,
	86, 1805,
	87, 1805,
	160, 1805,
	404, 1805,
	405, 1805,
	406, 1805,
	-2, 1934,
	-1, 2580,
	86, 1807,
	87, 1807,
	160, 1807,
	404, 1807,
	405, 1807,
	406, 1807,
	-2, 1875,
	-1, 2581,
	87, 1850,
	160, 1850,
	404, 1850,
	405, 1850,
	406, 1850,
	-2, 1910,
	-1, 2582,
	87, 1850,
	160, 1850,
	404, 1850,
	405, 1850,
	406, 1850,
	-2, 1924,
	-1, 2583,
	87, 1853,
	160, 1853,
	404, 1853,
	405, 1853,
	406, 1853,
	-2, 1906,
	-1, 2584,
	87, 1853,
	160, 1853,
	404, 1853,
	405, 1853,
	406, 1853,
	-2, 1971,
	-1, 2585,
	87, 1850,
	160, 1850,
	404, 1850,
	405, 1850,
	406, 1850,
	-2, 1993,
	-1, 2804,
	111, 1167,
	155, 1167,
	195, 1167,
	198, 1167,
	288, 1167,
	-2, 1161,
	-1, 2822,
	84, 722,
	160, 722,
	-2, 1345,
	-1, 3248,
	198, 1167,
	312, 1433,
	-2, 1405,
	-1, 3431,
	111, 1167,
	155, 1167,
	195, 1167,
	198, 1167,
	-2, 1285,
	-1, 3433,
	111, 1167,
	155, 1167,
	195, 1167,
	198, 1167,
	-2, 1285,
	-1, 3445,
	84, 722,
	160, 722,
	-2, 1345,
	-1, 3466,
	198, 1167,
	312, 1433,
	-2, 1406,
	-1, 3618,
	111, 1167,
	155, 1167,
	195, 1167,
	198, 1167,
	-2, 1286,
	-1, 3646,
	87, 1247,
	160, 1247,
	-2, 1167,
	-1, 3790,
	87, 1247,
	160, 1247,
	-2, 1167,
	-1, 3954,
	87, 1251,
	160, 1251,
	-2, 1167,
	-1, 4005,
	87, 1252,
	160, 1252,
	-2, 1167,
}

const yyPrivate = 57344

const yyLast = 54413

var yyAct = [...]int{
	775, 751, 4055, 777, 4027, 2852, 222, 4047, 1628, 1988,
	3958, 3964, 3451, 3965, 1707, 3550, 3856, 3267, 3957, 3790,
	3234, 760, 3879, 3837, 3914, 3674, 3341, 3480, 3768, 753,
	2846, 3738, 3828, 1320, 3342, 3789, 3857, 3606, 2764, 1767,
	1472, 1540, 3707, 2849, 805, 1052, 641, 3554, 3759, 3838,
	3413, 1175, 3840, 1629, 3545, 1936, 1478, 3418, 1754, 2403,
	68, 3467, 1703, 659, 1769, 665, 665, 3627, 3243, 2825,
	3615, 665, 683, 692, 1710, 1169, 692, 3205, 3191, 3167,
	3339, 2964, 3620, 2965, 3588, 2086, 3194, 3434, 207, 2963,
	2083, 3405, 2941, 2875, 3263, 3252, 2099, 3436, 3245, 2960,
	2122, 3384, 1772, 704, 2675, 2048, 3032, 2511, 2154, 2197,
	2547, 2406, 3307, 2992, 1948, 2793, 2952, 3174, 2367, 3172,
	3214, 1165, 3170, 3168, 2335, 3251, 700, 140, 36, 3165,
	2640, 2805, 2311, 1613, 3140, 1606, 2618, 2310, 743, 2180,
	3006, 2193, 748, 2549, 3169, 2163, 2162, 2600, 1865, 2127,
	2155, 1621, 933, 3080, 1618, 2079, 2052, 2512, 2192, 2495,
	1438, 2782, 1617, 2490, 2777, 2877, 2857, 1978, 2404, 974,
	1046, 2817, 6, 1405, 2366, 1912, 218, 8, 217, 7,
	1533, 1113, 1481, 2545, 2194, 2227, 1768, 1448, 1701, 2356,
	1580, 1549, 744, 658, 752, 1518, 2347, 2399, 641, 742,
	1512, 1461, 2712, 1947, 1761, 750, 1191, 2350, 1741, 761,
	1692, 1650, 2161, 2143, 2158, 1632, 640, 697, 1908, 1045,
	1587, 1700, 222, 1517, 222, 2519, 1104, 1105, 23, 1911,
	1457, 2049, 2491, 665, 674, 1473, 1514, 1571, 973, 1011,
	900, 706, 1773, 114, 707, 15, 1706, 24, 17, 10,
	208, 1084, 950, 27, 971, 2711, 1444, 200, 691, 997,
	1390, 956, 1061, 204, 3847, 902, 1366, 1321, 703, 205,
	64, 196, 167, 903, 661, 2201, 16, 2436, 1252, 1253,
	1254, 1251, 1252, 1253, 1254, 1251, 14, 3756, 197, 744,
	1252, 1253, 1254, 1251, 2748, 188, 2748, 2748, 2521, 198,
	1101, 3350, 3049, 3448, 3048, 1079, 3221, 1170, 2211, 3581,
	1100, 3421, 1102, 3334, 1171, 2663, 2603, 687, 139, 2606,
	2604, 1878, 2601, 1594, 1590, 688, 670, 1096, 1097, 1058,
	1060, 206, 33, 125, 695, 660, 2309, 677, 1516, 1482,
	666, 1385, 201, 3815, 1097, 749, 1359, 922, 684, 920,
	2315, 1097, 1441, 1442, 1443, 1031, 1643, 1879, 686, 964,
	3150, 965, 2319, 1388, 3133, 3135, 3130, 3132, 4039, 1495,
	1872, 1170, 1381, 3543, 1592, 3028, 3026, 1080, 2132, 1095,
	2740, 2738, 3823, 8, 3714, 7, 1252, 1253, 1254, 1251,
	1252, 1253, 1254, 1251, 3708, 3546, 3340, 2177, 3842, 2157,
	945, 1315, 901, 3109, 685, 2149, 2444, 4061, 3836, 3940,
	205, 64, 196, 167, 959, 912, 955, 4036, 3722, 147,
	148, 3593, 149, 150, 2742, 3775, 1250, 151, 3560, 3993,
	152, 2657, 205, 1214, 205, 64, 196, 167, 205, 2649,
	205, 205, 205, 3589, 2198, 2357, 921, 1396, 919, 3435,
	2358, 1636, 1074, 1069, 1064, 1068, 1072, 205, 64, 196,
	167, 205, 2693, 1627, 2811, 3834, 1056, 3743, 37, 3776,
	205, 3890, 936, 1391, 1057, 1186, 1557, 205, 1395, 1394,
	1077, 1633, 1393, 201, 1067, 922, 920, 3052, 1062, 1648,
	1641, 139, 702, 166, 194, 203, 195, 123, 205, 64,
	196, 167, 3720, 1026, 1024, 1635, 1025, 201, 1397, 3107,
	3040, 201, 1640, 201, 2809, 201, 193, 187, 186, 1645,
	2209, 1430, 1881, 70, 913, 2958, 139, 2766, 2351, 2539,
	201, 1413, 1249, 2763, 201, 1075, 1673, 2540, 1491, 2999,
	689, 1492, 2062, 1647, 1078, 3745, 3134, 961, 3131, 954,
	201, 205, 64, 196, 167, 3000, 3001, 2619, 958, 957,
	1519, 917, 1521, 1659, 2812, 2767, 1065, 205, 64, 196,
	167, 201, 3937, 1469, 891, 939, 890, 892, 893, 946,
	894, 895, 2063, 2064, 189, 190, 191, 1890, 1891, 2526,
	1076, 1020, 2525, 2779, 1032, 2527, 3968, 3969, 1693, 953,
	2096, 1697, 1962, 2780, 1229, 1477, 1709, 1230, 2760, 1476,
	1479, 1480, 3238, 1242, 1479, 1480, 1028, 199, 963, 1593,
	1591, 1247, 3570, 952, 201, 1696, 1807, 951, 2298, 1494,
	1066, 1055, 1183, 938, 2743, 1232, 3236, 1054, 135, 944,
	201, 3992, 192, 3845, 136, 3933, 2761, 2644, 3919, 3845,
	3928, 3844, 2778, 3844, 3927, 3942, 3943, 3843, 3926, 3711,
	3843, 942, 1189, 665, 665, 1412, 4031, 4032, 3938, 3939,
	1194, 1197, 3826, 3033, 665, 1179, 3829, 3830, 3831, 3832,
	1030, 166, 1682, 203, 3343, 3916, 3343, 3034, 3916, 3035,
	1180, 1194, 1197, 2213, 692, 692, 3853, 665, 3357, 962,
	2896, 137, 2080, 2070, 193, 2785, 2768, 1073, 3187, 2485,
	1688, 1698, 1713, 3406, 63, 2205, 3598, 1227, 2140, 3411,
	2479, 2346, 962, 3185, 1234, 943, 2074, 1235, 3070, 2953,
	2769, 3747, 3748, 1600, 1599, 1695, 1245, 1246, 3935, 1178,
	3492, 2654, 1061, 1070, 3068, 1244, 1071, 192, 2442, 2741,
	3544, 1217, 3027, 3967, 2947, 1237, 2481, 1029, 2482, 2483,
	1292, 3846, 3569, 65, 1384, 3752, 3595, 3192, 3388, 3240,
	3571, 701, 2205, 2488, 1505, 2188, 2210, 1467, 3181, 3182,
	3183, 1228, 738, 1107, 3755, 740, 2542, 2762, 1172, 1239,
	739, 3360, 1493, 3074, 2747, 3184, 657, 3507, 145, 202,
	1171, 146, 960, 1171, 1171, 1209, 168, 1179, 1286, 1058,
	1060, 61, 4000, 3266, 3203, 1061, 3701, 3215, 1414, 2316,
	3780, 3050, 3872, 2199, 3867, 3047, 1880, 1240, 1241, 2199,
	3504, 1712, 1711, 2232, 2199, 2818, 1324, 1233, 1185, 2943,
	3561, 949, 690, 1097, 2200, 2474, 1081, 1063, 3772, 1097,
	1097, 1097, 1694, 694, 1097, 2094, 2095, 1097, 1231, 2216,
	2218, 2219, 1188, 3941, 693, 915, 690, 2956, 1171, 1196,
	1195, 1325, 2212, 3774, 3264, 3265, 1238, 138, 45, 2353,
	3193, 3497, 1058, 1060, 62, 3141, 3858, 3874, 5, 1222,
	1196, 1195, 1224, 2602, 3179, 3452, 1027, 1595, 3880, 3235,
	2851, 1236, 3702, 916, 65, 142, 143, 2847, 2848, 144,
	2851, 1198, 3459, 3398, 2331, 1456, 3742, 1387, 3396, 1389,
	1225, 3156, 2477, 3852, 687, 687, 687, 901, 65, 3508,
	690, 1401, 688, 688, 688, 1404, 1173, 1167, 1174, 1410,
	659, 937, 935, 1206, 1057, 3557, 2739, 168, 1200, 3665,
	3594, 1364, 1202, 1203, 1369, 684, 684, 684, 1642, 3269,
	2658, 1288, 1289, 1290, 1291, 686, 686, 686, 4067, 168,
	1208, 168, 1293, 974, 3721, 168, 2454, 168, 168, 168,
	3746, 3397, 3781, 690, 1392, 3193, 1683, 202, 964, 1684,
	965, 4050, 65, 2453, 168, 1479, 1480, 2791, 168, 690,
	3660, 3241, 1218, 1468, 1529, 1882, 1528, 168, 1207, 2542,
	3773, 685, 685, 685, 168, 2422, 1182, 1184, 1187, 1479,
	1480, 2402, 2425, 2784, 2409, 1454, 3188, 665, 1220, 1453,
	1507, 1719, 1722, 1723, 665, 168, 1452, 1475, 641, 641,
	1223, 1226, 1720, 2081, 918, 65, 2954, 3071, 641, 641,
	3749, 3654, 1544, 1544, 3881, 665, 3794, 3730, 3760, 3731,
	3244, 65, 2475, 2476, 3934, 3437, 1219, 3730, 1166, 3731,
	745, 1471, 1470, 3956, 3129, 3725, 692, 1572, 659, 2424,
	2788, 2789, 2445, 1583, 2402, 1336, 1337, 1283, 168, 2419,
	2897, 3599, 2898, 2899, 1546, 2787, 3541, 1021, 222, 3180,
	3346, 3913, 2071, 2925, 168, 1406, 2217, 641, 1551, 1689,
	1407, 1408, 702, 3733, 1542, 1542, 1417, 1418, 1419, 1420,
	1421, 1515, 1423, 3733, 2423, 2073, 2994, 2996, 1429, 3260,
	3264, 3265, 4051, 1411, 3675, 3676, 3677, 3681, 3679, 3680,
	3678, 3201, 1214, 1221, 1506, 3732, 3145, 689, 689, 689,
	927, 2409, 2412, 2650, 3268, 3732, 3011, 3012, 2531, 1625,
	2440, 2202, 1422, 2069, 1630, 2408, 2046, 1370, 1450, 1368,
	2410, 1639, 2797, 2800, 2801, 2802, 2798, 2799, 1403, 3298,
	1415, 1023, 3073, 2412, 1022, 2753, 1428, 1884, 1427, 3793,
	1426, 1425, 1463, 1464, 1033, 696, 2228, 3399, 2214, 2215,
	1671, 931, 3667, 1416, 2330, 2894, 929, 928, 1523, 1525,
	968, 969, 970, 3385, 1544, 3261, 1544, 1179, 1536, 1537,
	2634, 3082, 3081, 1435, 2411, 1649, 1061, 1437, 2757, 966,
	1538, 1539, 1213, 1061, 2323, 1447, 1440, 2325, 2324, 3661,
	3662, 1400, 1455, 1894, 1496, 1497, 1893, 963, 927, 1465,
	1604, 934, 1607, 1608, 3579, 3955, 3147, 1484, 1485, 1483,
	1487, 1488, 1486, 1489, 1609, 1610, 4048, 4049, 2322, 1615,
	1616, 1573, 1398, 1399, 3202, 1601, 1892, 1596, 1721, 923,
	2466, 1708, 924, 930, 1544, 1527, 1021, 2413, 3628, 1638,
	1098, 1099, 2408, 2402, 2407, 1103, 2405, 2410, 4069, 926,
	2995, 1179, 1771, 2418, 929, 928, 3656, 2416, 1623, 1620,
	3655, 3220, 1624, 4063, 1802, 1803, 1820, 1806, 2413, 670,
	2266, 1552, 1564, 2265, 1558, 1821, 2338, 2823, 1458, 1462,
	1462, 1462, 3923, 1250, 1570, 1584, 3347, 3304, 1828, 2542,
	1830, 2121, 1831, 1832, 1833, 3300, 1755, 1449, 1585, 2339,
	2340, 2411, 1690, 1458, 1458, 1666, 1667, 1705, 2926, 2928,
	2929, 2930, 2927, 4057, 1810, 1811, 1812, 2916, 2917, 1691,
	1023, 3726, 1214, 1022, 1449, 3727, 2621, 1826, 2349, 1176,
	1827, 3726, 3402, 1179, 1021, 3839, 2207, 2824, 3359, 1883,
	1176, 4045, 2509, 1886, 4007, 1888, 1250, 1840, 1841, 1686,
	1724, 3979, 2303, 1895, 1897, 1863, 1898, 4076, 1900, 1901,
	1805, 1652, 1657, 1572, 2754, 1660, 1885, 1862, 1909, 1544,
	1914, 1915, 3262, 1917, 1507, 665, 1034, 3976, 2439, 1212,
	665, 687, 2649, 1544, 687, 687, 4058, 974, 3273, 688,
	1937, 3970, 688, 688, 3271, 1680, 3139, 1874, 1670, 1678,
	1677, 1674, 1544, 1866, 1699, 1679, 3952, 1669, 1507, 1704,
	1702, 1819, 684, 683, 4008, 684, 684, 4008, 1023, 3907,
	2824, 1022, 686, 3906, 3980, 686, 686, 3137, 1676, 905,
	906, 907, 908, 1961, 2119, 1750, 1751, 1743, 1675, 2510,
	3900, 2510, 1968, 1968, 2915, 1507, 2348, 1507, 1507, 3875,
	3977, 665, 665, 3014, 2035, 1909, 2039, 1211, 2771, 1544,
	2043, 2044, 1214, 3863, 2242, 2059, 3304, 641, 685, 2683,
	2510, 685, 685, 1658, 3813, 1916, 1661, 1662, 1250, 3953,
	3812, 641, 2744, 1544, 3807, 3806, 2639, 3805, 1918, 1365,
	2626, 2198, 1250, 1965, 2061, 2395, 1250, 2308, 1157, 1153,
	1154, 1155, 1156, 2302, 2688, 2301, 2687, 2686, 2684, 2273,
	665, 1909, 1544, 2242, 2104, 2189, 665, 665, 665, 700,
	700, 2092, 2207, 2045, 1436, 1758, 2114, 2115, 2116, 2117,
	1869, 1834, 1530, 2123, 1212, 1990, 3864, 1905, 1906, 1907,
	222, 4059, 2097, 222, 222, 2037, 222, 3814, 3448, 1920,
	1921, 1922, 1923, 2371, 3804, 1870, 1864, 2242, 2242, 1971,
	2242, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 3018, 2826, 2652, 2685, 1752, 1753, 2089,
	2090, 910, 1938, 2075, 1634, 2651, 1820, 1820, 2165, 3784,
	2382, 1646, 2643, 3783, 1949, 2389, 1951, 1952, 1820, 1820,
	1904, 1939, 1940, 1953, 689, 2182, 3758, 689, 689, 2261,
	1958, 2246, 2106, 2107, 2108, 1913, 2103, 1970, 1954, 1960,
	1681, 1933, 1963, 1964, 2082, 1934, 1829, 2242, 2131, 1929,
	1959, 2134, 2135, 1944, 2137, 3513, 3461, 2060, 1937, 2241,
	2176, 2187, 1544, 2196, 2126, 1793, 1061, 1950, 1942, 1061,
	1972, 1973, 2112, 1654, 2066, 3427, 2068, 3377, 1061, 3373,
	1945, 1946, 2207, 1301, 1199, 2167, 2207, 2087, 2088, 1252,
	1253, 1254, 1251, 2036, 1967, 1969, 1163, 1955, 1956, 2242,
	1158, 1252, 1253, 1254, 1251, 3410, 3691, 3511, 2041, 1283,
	2047, 3281, 2091, 2190, 1267, 1532, 2065, 1966, 2067, 2989,
	2076, 2730, 4070, 3225, 2172, 2042, 2718, 2710, 2542, 3462,
	2665, 925, 2647, 1058, 1060, 2240, 3065, 2689, 2690, 1252,
	1253, 1254, 1251, 4035, 2635, 1058, 1060, 2381, 3428, 2101,
	3378, 2160, 3374, 2102, 2628, 2437, 2109, 2110, 1809, 1808,
	3332, 3848, 1458, 2160, 2623, 2615, 1500, 1501, 2221, 1503,
	1504, 2672, 1508, 1509, 1510, 1061, 1462, 2128, 1702, 1252,
	1253, 1254, 1251, 3757, 3282, 3105, 3718, 1255, 1462, 3658,
	2613, 2611, 2510, 2609, 2371, 1285, 2145, 2370, 1459, 1250,
	1250, 2304, 2280, 1250, 1295, 2371, 1559, 1560, 1561, 1562,
	1563, 3868, 1565, 1566, 1567, 1568, 1569, 2624, 1534, 1531,
	1575, 1576, 1577, 1578, 2166, 2238, 2279, 2629, 1937, 1535,
	1304, 2175, 2173, 1789, 2178, 2264, 2255, 2624, 2616, 2254,
	1786, 2186, 1058, 1060, 1788, 1785, 1787, 1791, 1792, 3657,
	2313, 2314, 1790, 2317, 2253, 3869, 2320, 3629, 2184, 2274,
	2275, 2243, 2277, 2614, 2610, 3643, 2610, 2326, 3602, 2284,
	2371, 2191, 1846, 743, 2303, 1250, 665, 665, 665, 687,
	2601, 1445, 932, 2296, 2204, 1446, 2206, 688, 1663, 3420,
	3305, 665, 665, 665, 665, 905, 906, 907, 908, 1250,
	3296, 3630, 2244, 3288, 2368, 2220, 3283, 2229, 1250, 1250,
	684, 3196, 1250, 3440, 2374, 1507, 778, 788, 3438, 1460,
	686, 2950, 2223, 2224, 2222, 1743, 779, 1250, 780, 784,
	787, 783, 781, 782, 2242, 2234, 1835, 1836, 1837, 1838,
	2949, 1507, 1842, 1843, 1844, 1845, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 3441, 2431, 2207,
	2795, 1664, 3439, 3216, 1809, 1808, 685, 2749, 790, 141,
	2662, 2185, 1490, 2627, 141, 2533, 1555, 2170, 2169, 2168,
	1432, 785, 1431, 1181, 2595, 1774, 1775, 1776, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1796, 1797, 1798, 1799,
	1800, 1801, 1794, 1795, 2129, 1762, 2438, 2235, 1588, 2386,
	2129, 1899, 1762, 2388, 786, 2390, 665, 1968, 1270, 1271,
	1272, 1273, 1274, 1267, 3019, 2514, 2514, 2059, 2514, 1254,
	1251, 2297, 2299, 2300, 3925, 1251, 3670, 671, 2409, 2412,
	141, 1749, 3669, 3036, 3217, 2886, 2884, 910, 641, 641,
	2863, 2861, 2305, 3603, 3604, 2391, 1179, 1746, 1748, 1745,
	4066, 1747, 1544, 665, 2225, 2226, 1252, 1253, 1254, 1251,
	3649, 3596, 2332, 1303, 2401, 1445, 665, 1634, 1839, 1446,
	4041, 3408, 1179, 2586, 659, 1324, 1302, 1061, 3218, 2732,
	1583, 2733, 2059, 4040, 3983, 2591, 2400, 2593, 3951, 2937,
	222, 2935, 689, 2376, 2377, 3950, 2394, 2378, 1252, 1253,
	1254, 1251, 2384, 2379, 2380, 2385, 2933, 2922, 2375, 3335,
	1325, 1824, 3870, 1582, 2537, 4065, 2765, 2528, 3809, 2529,
	3797, 3597, 2518, 2516, 3787, 2520, 1825, 2387, 3777, 3709,
	2631, 3409, 3632, 3631, 2057, 3453, 2550, 3442, 2534, 2535,
	2414, 2415, 3407, 2420, 1058, 1060, 3284, 3186, 2645, 2936,
	3061, 2934, 2196, 3031, 1092, 1093, 1094, 3030, 2920, 1544,
	1059, 1544, 2544, 1544, 2413, 141, 2932, 2921, 1179, 2408,
	2402, 2407, 2919, 2405, 2410, 2383, 2664, 2918, 2596, 2910,
	141, 3414, 141, 2904, 2903, 2397, 2902, 2590, 1091, 2901,
	2745, 1088, 2617, 1252, 1253, 1254, 1251, 2530, 2484, 664,
	664, 2522, 1544, 1179, 2605, 672, 2489, 2696, 1523, 1525,
	1252, 1253, 1254, 1251, 2307, 2148, 2147, 2523, 2146, 3333,
	2142, 2141, 2703, 2655, 2098, 1889, 1887, 1544, 2411, 1655,
	1383, 2794, 2659, 2443, 3419, 3173, 2446, 2447, 2448, 2449,
	2450, 2451, 2452, 2691, 2538, 2455, 2456, 2457, 2458, 2459,
	2460, 2461, 2462, 2463, 2464, 2465, 1161, 2467, 2468, 2469,
	2470, 2471, 4062, 2472, 1542, 1462, 2588, 2587, 2704, 2541,
	2589, 1252, 1253, 1254, 1251, 4060, 2751, 2752, 3551, 1588,
	2755, 1714, 1715, 1716, 1717, 1718, 2707, 2708, 4033, 1542,
	1252, 1253, 1254, 1251, 3750, 3751, 2105, 3999, 1179, 2674,
	3998, 3995, 1179, 3931, 2680, 1252, 1253, 1254, 1251, 1544,
	2661, 3098, 1507, 3930, 2597, 1160, 738, 3739, 2039, 740,
	3911, 2656, 3855, 1759, 739, 3607, 2822, 1763, 1764, 1765,
	1766, 3833, 2828, 2670, 3824, 2694, 2648, 1804, 3801, 3796,
	3795, 2676, 3754, 2676, 2646, 1814, 3741, 2653, 2637, 2736,
	2838, 1085, 1086, 1087, 1090, 3740, 1089, 2641, 2642, 3710,
	1179, 3651, 2772, 3611, 3600, 3582, 2550, 672, 2860, 2666,
	2667, 3580, 3577, 3574, 3097, 1179, 1179, 1179, 1968, 1526,
	1061, 1179, 2682, 2870, 2871, 2872, 2873, 1179, 2880, 2692,
	2881, 2882, 3573, 2883, 2669, 2885, 3549, 4068, 1867, 2806,
	3547, 1252, 1253, 1254, 1251, 1702, 2880, 2807, 1275, 1276,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1267, 2514, 1252,
	1253, 1254, 1251, 3521, 2855, 3518, 2792, 2839, 1589, 3515,
	2942, 3404, 2938, 1252, 1253, 1254, 1251, 2829, 1990, 2855,
	2866, 2867, 641, 3393, 3386, 2869, 3370, 3368, 3363, 2039,
	3294, 2876, 3293, 1179, 2059, 2059, 2059, 2059, 2059, 2059,
	3291, 3290, 2702, 2774, 3285, 2776, 3279, 3278, 2819, 3197,
	1179, 2059, 3160, 3159, 2514, 3155, 2944, 2858, 3151, 3149,
	1941, 2858, 3146, 2854, 2790, 2773, 3961, 3144, 2312, 2853,
	2997, 4021, 1544, 3075, 3072, 2713, 2714, 2841, 2865, 3051,
	2821, 2719, 2827, 665, 665, 1957, 8, 3029, 7, 2813,
	3004, 2931, 2923, 1252, 1253, 1254, 1251, 2966, 2257, 3084,
	2913, 2911, 2907, 2843, 2840, 2906, 2831, 2905, 2758, 2750,
	2837, 2834, 2856, 2746, 2966, 2638, 2862, 3887, 3575, 2327,
	2859, 2868, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1267,
	2321, 2985, 846, 845, 3883, 1913, 2318, 2151, 222, 1252,
	1253, 1254, 1251, 222, 1867, 1252, 1253, 1254, 1251, 1867,
	1867, 2900, 2144, 2998, 2705, 2912, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1256, 2781, 1820, 2239, 1820, 2256, 1877,
	3046, 1876, 2830, 3735, 1656, 1332, 1328, 1252, 1253, 1254,
	1251, 2835, 2836, 2945, 3060, 1327, 2951, 1164, 914, 3734,
	1544, 3723, 2948, 3067, 3719, 1252, 1253, 1254, 1251, 2130,
	3576, 3558, 2133, 3433, 3432, 2136, 2982, 2986, 2138, 3431,
	3401, 2988, 2987, 205, 3382, 196, 167, 141, 141, 141,
	1059, 3380, 3563, 3379, 1061, 3376, 3020, 3375, 1608, 3005,
	3002, 3024, 3562, 3369, 3015, 3367, 1061, 3348, 1609, 1610,
	3338, 3337, 1615, 1616, 1252, 1253, 1254, 1251, 1866, 1252,
	1253, 1254, 1251, 3045, 3501, 2237, 2892, 2893, 3324, 1252,
	1253, 1254, 1251, 3323, 2181, 2967, 2968, 2969, 2970, 2971,
	2972, 2908, 2909, 3226, 3043, 3163, 1623, 1620, 3136, 3103,
	1624, 1252, 1253, 1254, 1251, 3054, 201, 3022, 3021, 3094,
	3086, 3085, 3079, 1284, 3064, 3148, 3365, 2946, 3013, 2770,
	3101, 2612, 3152, 3153, 3154, 2608, 3069, 2607, 3157, 3158,
	3042, 3039, 3037, 3044, 2285, 3056, 1179, 3100, 3055, 3057,
	2278, 2272, 3176, 1252, 1253, 1254, 1251, 1252, 1253, 1254,
	1251, 3063, 3190, 1252, 1253, 1254, 1251, 665, 2271, 2270,
	2269, 3076, 2267, 2263, 1252, 1253, 1254, 1251, 2262, 3206,
	1179, 3077, 2260, 665, 2251, 1179, 1179, 2248, 2247, 3087,
	3088, 3090, 2150, 1860, 2059, 2368, 3096, 3224, 2810, 2231,
	1859, 1858, 3083, 2236, 1823, 1822, 1813, 664, 1168, 205,
	2855, 2245, 1556, 3092, 3093, 1554, 2431, 3138, 1177, 3089,
	4020, 3091, 3200, 3982, 3905, 1322, 3882, 3819, 3250, 3816,
	3253, 3803, 3253, 3253, 3798, 3704, 3703, 1179, 3685, 3668,
	1061, 1205, 1061, 3664, 2855, 3642, 3626, 1061, 2252, 2855,
	2855, 3143, 3142, 3531, 3529, 3274, 2259, 2806, 3499, 3498,
	3495, 3270, 3494, 1544, 1544, 3460, 3161, 3457, 3455, 3178,
	3422, 3095, 1371, 1061, 3237, 3239, 1603, 1614, 2276, 1605,
	3228, 2249, 201, 2281, 2282, 2283, 3162, 1619, 2286, 2287,
	2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 1622, 3222,
	1611, 2855, 1439, 2939, 3275, 3276, 3199, 1058, 1060, 3208,
	665, 2864, 3219, 3223, 3211, 3212, 2815, 3176, 2814, 2808,
	2775, 2731, 2622, 3249, 2532, 1542, 1542, 2473, 2369, 1507,
	1504, 3232, 2039, 2039, 3258, 3110, 3111, 2401, 3099, 2341,
	2306, 3112, 3113, 3114, 3115, 2729, 3116, 3117, 3118, 3119,
	3120, 3121, 3122, 3123, 3124, 3125, 3126, 3254, 3255, 2400,
	3259, 1744, 201, 2111, 1903, 1252, 1253, 1254, 1251, 3248,
	3899, 2728, 1252, 1253, 1254, 1251, 1873, 3272, 1252, 1253,
	1254, 1251, 1687, 1637, 1612, 1179, 1382, 1367, 3227, 2696,
	1363, 1362, 1361, 3229, 3230, 1360, 1359, 3336, 1252, 1253,
	1254, 1251, 1358, 1357, 1356, 1355, 3280, 3256, 1266, 1265,
	1275, 1276, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1267,
	1354, 1353, 1352, 1351, 3897, 3788, 1553, 2268, 2727, 1350,
	671, 3301, 3302, 1349, 3287, 3286, 1348, 1347, 3292, 3895,
	2726, 3295, 1346, 3299, 665, 1345, 1344, 1343, 1342, 2550,
	1341, 1340, 3312, 1339, 3313, 1252, 1253, 1254, 1251, 1338,
	1335, 1334, 3041, 1333, 3231, 1331, 141, 1252, 1253, 1254,
	1251, 1330, 3893, 2725, 3053, 3317, 3320, 3321, 3322, 1266,
	1265, 1275, 1276, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
	1267, 1329, 1326, 1319, 1318, 3326, 1316, 1315, 1314, 3289,
	1252, 1253, 1254, 1251, 1313, 1312, 1311, 1867, 1310, 1867,
	2724, 1309, 1308, 1307, 1306, 1305, 1300, 2123, 3390, 3349,
	1299, 3392, 3303, 2723, 1298, 3394, 1297, 1296, 1867, 1867,
	1216, 3351, 1162, 3352, 141, 3496, 3355, 1252, 1253, 1254,
	1251, 141, 2373, 3316, 3356, 3308, 3309, 2355, 1204, 3371,
	1252, 1253, 1254, 1251, 141, 4013, 4011, 141, 141, 3361,
	1582, 3966, 3311, 665, 2039, 3395, 2796, 2543, 2153, 1215,
	141, 1502, 2984, 3315, 3426, 3924, 2722, 3314, 1513, 1265,
	1275, 1276, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1267,
	2514, 2059, 3445, 2721, 2983, 1061, 2979, 2975, 2676, 1550,
	2976, 2980, 1061, 1252, 1253, 1254, 1251, 2720, 2974, 2630,
	2973, 2633, 3383, 3835, 3387, 3463, 3647, 3389, 1179, 124,
	1252, 1253, 1254, 1251, 2717, 2977, 2981, 3250, 2504, 2505,
	2978, 1179, 2636, 2625, 1252, 1253, 1254, 1251, 2716, 67,
	66, 1433, 1179, 3195, 3510, 1931, 1932, 3059, 1544, 3533,
	3209, 1252, 1253, 1254, 1251, 3213, 2715, 3534, 2441, 3415,
	1926, 1927, 1928, 3417, 3447, 1252, 1253, 1254, 1251, 665,
	3246, 2039, 3247, 3353, 3354, 1179, 2673, 3506, 3493, 2679,
	2620, 3233, 3464, 1252, 1253, 1254, 1251, 3327, 667, 3512,
	2697, 2698, 2028, 1597, 2660, 3503, 3444, 3443, 2700, 2701,
	3450, 3486, 2709, 1651, 222, 1631, 2876, 3532, 668, 669,
	1542, 2328, 2888, 2113, 2706, 2641, 2642, 1179, 3522, 2889,
	2890, 2891, 3500, 1210, 3171, 3525, 3505, 3535, 3502, 1252,
	1253, 1254, 1251, 3164, 2842, 3509, 2171, 2816, 2393, 2966,
	4024, 2364, 1935, 1714, 1867, 3514, 1902, 3800, 2699, 3517,
	3519, 3277, 3520, 2486, 3537, 2695, 2480, 3516, 3526, 3578,
	3524, 3527, 1809, 1808, 2040, 3523, 1378, 1379, 1499, 3585,
	1376, 1377, 1498, 1179, 3556, 1252, 1253, 1254, 1251, 1243,
	3446, 2966, 1252, 1253, 1254, 1251, 3319, 2671, 3007, 3449,
	2329, 1757, 3542, 1179, 1544, 1544, 3572, 2183, 3552, 3206,
	1374, 1375, 1451, 3553, 1424, 3583, 3584, 1372, 1373, 1474,
	3989, 3619, 3987, 3619, 1252, 1253, 1254, 1251, 1252, 1253,
	1254, 1251, 2832, 2833, 3944, 3921, 1179, 3636, 1179, 3613,
	3614, 3920, 3608, 3918, 3859, 3609, 3820, 2855, 3699, 3698,
	3639, 3637, 3641, 3548, 3372, 1544, 3345, 3344, 3423, 3424,
	3425, 3330, 3591, 3610, 3429, 3430, 1542, 1755, 3592, 3590,
	2426, 2396, 1061, 665, 3601, 1179, 1179, 1653, 3329, 1179,
	1179, 3017, 1449, 3391, 3624, 3062, 3612, 3623, 4015, 4014,
	1466, 2756, 2357, 2058, 2250, 3447, 1386, 1201, 3635, 3687,
	1708, 2167, 1708, 3682, 4014, 4015, 3493, 3666, 3648, 3325,
	1937, 3645, 3696, 3652, 3672, 3673, 1176, 1755, 3683, 3684,
	209, 3, 75, 3587, 3705, 3706, 2, 4037, 4038, 3486,
	905, 906, 907, 908, 1, 1176, 2737, 1544, 2499, 2503,
	2504, 2505, 2500, 2508, 2501, 2506, 3693, 1871, 2502, 1380,
	2507, 909, 904, 1520, 2524, 2093, 1548, 1875, 3692, 911,
	3736, 2990, 3454, 2991, 3456, 3694, 3318, 2993, 141, 2759,
	3729, 141, 141, 1867, 141, 2203, 2955, 2478, 3717, 1919,
	2345, 3189, 1434, 967, 1924, 1815, 1668, 1193, 3712, 1665,
	1192, 1190, 3716, 1760, 792, 2156, 2940, 2914, 3724, 1542,
	3695, 3728, 974, 3564, 4023, 3565, 4054, 3769, 3763, 3981,
	4026, 3633, 3634, 3400, 1059, 1685, 776, 141, 3912, 3825,
	3403, 3985, 3827, 1179, 3715, 2208, 1059, 1248, 3038, 993,
	833, 803, 3753, 1317, 1644, 3108, 3792, 3786, 3640, 3106,
	802, 3412, 141, 2786, 3700, 3010, 3764, 3771, 994, 3556,
	2139, 3765, 3023, 3766, 3025, 1974, 1975, 3822, 1061, 3713,
	1598, 3782, 1602, 2392, 3779, 3778, 1179, 3878, 3646, 3242,
	2850, 1544, 1626, 1867, 3873, 3458, 3568, 3566, 1867, 3567,
	708, 2072, 639, 1043, 3686, 3638, 2152, 1708, 709, 2372,
	2181, 3799, 1266, 1265, 1275, 1276, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1267, 3936, 3808, 3802, 947, 2354, 948,
	940, 2804, 3810, 2803, 2100, 1725, 1257, 1742, 3127, 3128,
	2100, 2100, 2100, 1284, 3851, 3078, 1294, 3841, 747, 2233,
	2783, 3481, 3003, 1542, 74, 3821, 73, 3817, 3818, 1266,
	1265, 1275, 1276, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
	1267, 72, 3860, 3102, 71, 230, 794, 229, 1793, 3737,
	3605, 3849, 3908, 4028, 773, 3689, 772, 771, 770, 3690,
	769, 768, 2497, 2498, 3854, 2496, 2494, 2493, 2054, 2053,
	3877, 3016, 3328, 3862, 1179, 2118, 3644, 2120, 3204, 2879,
	2874, 1979, 1544, 1977, 1511, 3902, 3650, 2421, 2428, 3871,
	3909, 3892, 3894, 3896, 3898, 1976, 3876, 3963, 3362, 2492,
	3559, 3888, 3889, 3885, 3663, 2924, 3910, 3555, 1925, 2417,
	1996, 2895, 1993, 3891, 1992, 2887, 3659, 3653, 2024, 3767,
	3688, 3618, 3465, 3901, 3466, 3472, 2363, 1112, 1108, 1110,
	3917, 3915, 1544, 1111, 1109, 3769, 2499, 2503, 2504, 2505,
	2500, 2508, 2501, 2506, 1542, 2681, 2502, 3297, 2507, 3929,
	2398, 3954, 3166, 2337, 2336, 2334, 2333, 3962, 1409, 3850,
	3945, 3932, 3586, 3947, 2548, 3948, 3949, 2546, 1159, 3310,
	3616, 3306, 2164, 3946, 2179, 3058, 2055, 2051, 2050, 1083,
	1082, 1579, 2957, 2487, 3978, 3744, 1930, 941, 2352, 3971,
	41, 3972, 121, 3973, 1542, 3974, 108, 184, 3975, 59,
	183, 58, 119, 181, 3988, 3257, 3990, 3991, 57, 103,
	3986, 3984, 102, 118, 179, 1179, 1789, 3841, 56, 3994,
	214, 213, 216, 1786, 215, 212, 2598, 1788, 1785, 1787,
	1791, 1792, 2599, 211, 3792, 1790, 4003, 1586, 210, 3811,
	3922, 3622, 3904, 899, 4005, 4006, 4004, 4012, 4010, 4009,
	44, 4022, 43, 4030, 185, 42, 4029, 109, 4016, 4017,
	4018, 4019, 60, 40, 39, 38, 34, 13, 12, 35,
	22, 4042, 21, 1179, 1672, 4034, 20, 26, 32, 4001,
	31, 134, 133, 30, 132, 3877, 4044, 4043, 131, 4046,
	130, 129, 128, 4052, 127, 126, 4056, 29, 19, 4053,
	51, 50, 49, 48, 47, 205, 64, 196, 167, 46,
	9, 122, 3861, 117, 115, 28, 116, 3865, 3866, 113,
	4064, 112, 111, 110, 197, 2517, 106, 104, 86, 4030,
	4072, 188, 4029, 4071, 85, 198, 84, 1708, 99, 98,
	97, 4056, 4073, 96, 95, 94, 92, 4077, 3886, 93,
	2342, 2343, 2344, 981, 139, 992, 3761, 83, 82, 81,
	80, 79, 101, 107, 105, 2359, 2360, 2361, 2362, 125,
	90, 100, 91, 89, 88, 87, 78, 77, 201, 1796,
	1797, 1798, 1799, 1800, 1801, 1794, 1795, 1278, 76, 1282,
	2058, 165, 164, 163, 162, 161, 159, 160, 141, 158,
	157, 156, 155, 154, 153, 1279, 1281, 1277, 52, 1280,
	1266, 1265, 1275, 1276, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1267, 53, 54, 55, 978, 979, 175, 174, 3470,
	176, 178, 180, 177, 182, 172, 1021, 170, 173, 3364,
	171, 169, 69, 11, 120, 18, 3366, 25, 4, 0,
	0, 0, 3104, 0, 0, 147, 148, 0, 149, 150,
	0, 0, 0, 151, 0, 0, 152, 0, 0, 0,
	3482, 0, 0, 0, 0, 0, 0, 0, 3381, 0,
	0, 0, 0, 3473, 0, 3996, 3997, 0, 0, 0,
	1513, 0, 0, 0, 3468, 0, 0, 0, 0, 3490,
	3491, 0, 0, 0, 0, 3469, 1266, 1265, 1275, 1276,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1267, 0, 0,
	1023, 0, 0, 1022, 0, 0, 0, 0, 0, 166,
	194, 203, 195, 123, 0, 0, 0, 1550, 0, 0,
	0, 0, 3474, 0, 0, 0, 0, 0, 2668, 0,
	2100, 0, 193, 187, 186, 0, 0, 0, 0, 70,
	0, 0, 1007, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 1266, 1265, 1275, 1276, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 720, 719, 726, 716, 984, 0,
	0, 0, 0, 0, 0, 0, 0, 723, 724, 0,
	725, 729, 0, 0, 710, 0, 0, 0, 0, 0,
	189, 190, 191, 0, 734, 0, 0, 0, 141, 0,
	1867, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	3489, 0, 2407, 0, 0, 0, 1867, 0, 0, 3528,
	0, 0, 3530, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1006, 1004, 0, 0, 3478, 0, 0,
	3536, 0, 0, 0, 135, 0, 0, 0, 192, 0,
	136, 0, 0, 0, 0, 1003, 2230, 0, 0, 3475,
	3479, 3477, 3476, 0, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 983, 1016,
	1266, 1265, 1275, 1276, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1267, 0, 0, 0, 0, 0, 0, 0, 3484,
	3485, 0, 1012, 0, 0, 0, 0, 137, 1266, 1265,
	1275, 1276, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1267,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2058, 2058, 2058, 2058, 2058, 2058, 1013, 1017,
	0, 0, 0, 0, 0, 0, 0, 3492, 0, 2058,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 3471,
	998, 1002, 1020, 0, 0, 3483, 999, 996, 995, 65,
	1001, 986, 987, 985, 988, 989, 990, 991, 0, 1018,
	2820, 1019, 0, 0, 0, 0, 2025, 0, 711, 713,
	712, 1986, 1014, 1015, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 145, 202, 0, 146, 0, 0,
	0, 722, 168, 0, 0, 0, 0, 61, 737, 0,
	0, 0, 2028, 1995, 0, 715, 0, 0, 0, 1010,
	0, 0, 2029, 2030, 0, 1009, 141, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	1005, 0, 0, 0, 0, 0, 0, 0, 1994, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 2002, 0, 0, 0,
	0, 0, 0, 138, 45, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 3488, 0, 0, 0, 0,
	0, 0, 0, 720, 719, 726, 716, 0, 0, 0,
	0, 142, 143, 0, 0, 144, 723, 724, 0, 725,
	729, 0, 0, 710, 0, 0, 0, 0, 1008, 0,
	0, 0, 0, 734, 980, 975, 0, 717, 721, 727,
	976, 728, 730, 0, 2018, 731, 732, 733, 0, 0,
	735, 736, 0, 0, 0, 0, 0, 3008, 3009, 0,
	0, 0, 0, 0, 2025, 0, 0, 0, 0, 1986,
	0, 3487, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 0, 740, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2028, 1995, 0, 0, 0, 0, 0, 0, 0, 0,
	2029, 2030, 0, 0, 0, 0, 0, 0, 1985, 1987,
	1984, 0, 0, 1981, 0, 0, 0, 0, 2006, 0,
	0, 0, 0, 0, 0, 0, 1994, 0, 0, 2012,
	0, 0, 0, 0, 1304, 0, 0, 1997, 1059, 1980,
	141, 0, 0, 0, 2002, 141, 0, 0, 0, 2000,
	2034, 0, 2058, 2001, 2003, 2005, 0, 2007, 2008, 2009,
	2013, 2014, 2015, 2017, 2020, 2021, 2022, 0, 0, 0,
	0, 141, 0, 0, 2010, 2019, 2011, 720, 719, 726,
	716, 0, 0, 0, 0, 0, 1989, 0, 0, 0,
	723, 724, 0, 725, 729, 0, 714, 710, 0, 3884,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 0,
	2026, 0, 2018, 0, 0, 0, 0, 711, 713, 712,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 1982, 1983, 0,
	722, 0, 0, 0, 0, 0, 0, 737, 0, 0,
	0, 0, 0, 738, 715, 2023, 740, 0, 705, 0,
	0, 739, 0, 0, 0, 1252, 1253, 1254, 1251, 0,
	0, 0, 1999, 0, 0, 0, 0, 0, 0, 1998,
	0, 0, 0, 3959, 0, 0, 1985, 2845, 1984, 0,
	0, 2844, 0, 0, 0, 0, 2006, 0, 0, 0,
	0, 3198, 0, 2016, 0, 0, 0, 2012, 0, 0,
	0, 0, 2004, 0, 0, 0, 0, 3210, 0, 0,
	0, 0, 0, 0, 0, 2032, 2031, 2000, 2034, 0,
	0, 2001, 2003, 2005, 0, 2007, 2008, 2009, 2013, 2014,
	2015, 2017, 2020, 2021, 2022, 1793, 0, 0, 0, 0,
	0, 0, 2010, 2019, 2011, 0, 0, 3959, 0, 0,
	0, 0, 0, 0, 1989, 0, 717, 721, 727, 0,
	728, 730, 0, 0, 731, 732, 733, 0, 1991, 735,
	736, 0, 0, 0, 0, 0, 0, 0, 2026, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 711, 713, 712, 0, 0, 0, 0, 0, 3959,
	0, 0, 718, 0, 0, 1982, 1983, 0, 0, 0,
	2027, 0, 0, 2033, 722, 0, 0, 0, 0, 0,
	0, 737, 0, 2023, 0, 0, 0, 0, 715, 0,
	0, 0, 0, 0, 2100, 0, 0, 0, 0, 0,
	1999, 0, 0, 0, 0, 0, 0, 1998, 0, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2016, 0, 0, 0, 0, 0, 0, 0, 0,
	2004, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 2032, 2031, 0, 0, 0, 0, 0,
	0, 0, 0, 1789, 0, 0, 0, 0, 0, 0,
	1786, 0, 0, 0, 1788, 1785, 1787, 1791, 1792, 0,
	0, 0, 1790, 0, 0, 714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2058,
	717, 721, 727, 0, 728, 730, 1991, 0, 731, 732,
	733, 0, 0, 735, 736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3358, 0,
	0, 0, 0, 1116, 0, 0, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2027, 0,
	0, 2033, 0, 0, 1139, 1143, 1145, 1147, 1149, 1150,
	1152, 0, 1157, 1153, 1154, 1155, 1156, 0, 1134, 1135,
	1136, 1137, 1114, 1115, 1140, 0, 1117, 0, 1119, 1120,
	1121, 1122, 1118, 1123, 1124, 1125, 1126, 1127, 1130, 1132,
	1128, 1129, 1138, 0, 0, 0, 0, 0, 0, 0,
	1142, 1144, 1146, 1148, 1151, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 1774, 1775, 1776, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1796, 1797, 1798, 1799,
	1800, 1801, 1794, 1795, 0, 0, 0, 0, 0, 0,
	1133, 0, 0, 0, 0, 0, 0, 2100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 525, 558, 547, 631,
	513, 0, 0, 2100, 0, 0, 0, 762, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 801, 561, 512, 428, 380, 579, 578, 0,
	0, 870, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 0, 754, 0, 0, 791,
	846, 845, 778, 788, 0, 0, 308, 228, 507, 627,
	509, 508, 779, 0, 780, 784, 787, 783, 781, 782,
	0, 861, 0, 0, 0, 0, 0, 0, 746, 758,
	0, 763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 755, 756, 0, 0, 0,
	0, 811, 0, 757, 0, 0, 806, 785, 789, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 141, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	786, 809, 813, 329, 884, 807, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 1141, 301, 449, 376, 371,
	359, 337, 885, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 3671, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 804, 0, 624, 0, 463,
	0, 0, 868, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 808, 0, 417, 398, 881, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 1817, 1816, 1818, 475, 363, 364, 0, 342, 290,
	291, 648, 865, 394, 589, 622, 623, 514, 0, 880,
	860, 862, 863, 867, 871, 872, 873, 874, 875, 877,
	879, 883, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 882, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 812, 564, 565, 384, 385, 386, 387,
	869, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 891,
	864, 890, 892, 893, 889, 894, 895, 876, 767, 0,
	819, 887, 886, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 774, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 853, 826, 827,
	828, 764, 829, 823, 824, 765, 825, 854, 817, 850,
	851, 793, 820, 830, 849, 831, 852, 855, 856, 896,
	897, 837, 821, 256, 898, 834, 857, 848, 847, 832,
	818, 858, 859, 800, 795, 835, 836, 822, 841, 842,
	843, 766, 814, 815, 816, 838, 839, 796, 797, 798,
	799, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 844, 632, 432,
	0, 840, 635, 636, 633, 370, 419, 437, 426, 810,
	649, 510, 511, 650, 621, 0, 759, 0, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 335, 1868, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 801, 561, 512,
	428, 380, 579, 578, 0, 0, 870, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 2084, 0,
	0, 754, 0, 0, 791, 846, 845, 778, 788, 0,
	0, 308, 228, 507, 627, 509, 508, 779, 0, 780,
	784, 787, 783, 781, 782, 0, 861, 0, 0, 0,
	0, 0, 0, 746, 758, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 756, 0, 0, 0, 0, 811, 0, 757, 0,
	0, 2085, 785, 789, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 786, 809, 813, 329, 884,
	807, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 885, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	804, 0, 624, 0, 463, 0, 0, 868, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 808, 0,
	417, 398, 881, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 865, 394, 589,
	622, 623, 514, 0, 880, 860, 862, 863, 867, 871,
	872, 873, 874, 875, 877, 879, 883, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 882, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 812, 564,
	565, 384, 385, 386, 387, 869, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 891, 864, 890, 892, 893, 889,
	894, 895, 876, 767, 0, 819, 887, 886, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 774, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 853, 826, 827, 828, 764, 829, 823, 824,
	765, 825, 854, 817, 850, 851, 793, 820, 830, 849,
	831, 852, 855, 856, 896, 897, 837, 821, 256, 898,
	834, 857, 848, 847, 832, 818, 858, 859, 800, 795,
	835, 836, 822, 841, 842, 843, 766, 814, 815, 816,
	838, 839, 796, 797, 798, 799, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 844, 632, 432, 0, 840, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	0, 759, 205, 810, 0, 0, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 1287, 561, 512, 428, 380, 579, 578, 0, 0,
	870, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 754, 0, 0, 791, 846,
	845, 778, 788, 0, 0, 308, 228, 507, 627, 509,
	508, 779, 0, 780, 784, 787, 783, 781, 782, 0,
	861, 0, 0, 0, 0, 0, 0, 746, 758, 0,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 756, 0, 0, 0, 0,
	811, 0, 757, 0, 0, 806, 785, 789, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 786,
	809, 813, 329, 884, 807, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 885, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 804, 0, 624, 0, 463, 0,
	0, 868, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 808, 0, 417, 398, 881, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 865, 394, 589, 622, 623, 514, 0, 880, 860,
	862, 863, 867, 871, 872, 873, 874, 875, 877, 879,
	883, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 882, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 812, 564, 565, 384, 385, 386, 387, 869,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 891, 864,
	890, 892, 893, 889, 894, 895, 876, 767, 0, 819,
	887, 886, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 774, 292, 520, 366, 168,
	409, 340, 585, 586, 0, 637, 853, 826, 827, 828,
	764, 829, 823, 824, 765, 825, 854, 817, 850, 851,
	793, 820, 830, 849, 831, 852, 855, 856, 896, 897,
	837, 821, 256, 898, 834, 857, 848, 847, 832, 818,
	858, 859, 800, 795, 835, 836, 822, 841, 842, 843,
	766, 814, 815, 816, 838, 839, 796, 797, 798, 799,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 844, 632, 432, 0,
	840, 635, 636, 633, 370, 419, 437, 426, 810, 649,
	510, 511, 650, 621, 0, 759, 0, 396, 0, 0,
	525, 558, 547, 631, 513, 0, 0, 0, 0, 0,
	0, 762, 0, 0, 0, 335, 4074, 0, 365, 562,
	544, 554, 545, 530, 531, 532, 539, 345, 533, 534,
	535, 505, 536, 506, 537, 538, 801, 561, 512, 428,
	380, 579, 578, 0, 0, 870, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	754, 0, 0, 791, 846, 845, 778, 788, 0, 0,
	308, 228, 507, 627, 509, 508, 779, 0, 780, 784,
	787, 783, 781, 782, 0, 861, 0, 0, 0, 0,
	0, 0, 746, 758, 0, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 755,
	756, 0, 0, 0, 0, 811, 0, 757, 0, 0,
	806, 785, 789, 0, 0, 0, 0, 298, 434, 453,
	309, 423, 466, 314, 431, 445, 304, 395, 420, 0,
	0, 300, 451, 430, 377, 355, 356, 299, 0, 414,
	333, 347, 330, 393, 786, 809, 813, 329, 884, 807,
	461, 302, 0, 460, 392, 447, 452, 378, 372, 0,
	301, 449, 376, 371, 359, 337, 885, 360, 361, 351,
	404, 369, 405, 352, 382, 381, 383, 0, 0, 0,
	0, 0, 489, 490, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 804,
	0, 624, 0, 463, 0, 0, 868, 0, 0, 0,
	433, 0, 0, 362, 0, 0, 0, 808, 0, 417,
	398, 881, 0, 0, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 653, 654, 655, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 0, 0, 0, 475, 363,
	364, 0, 342, 290, 291, 648, 865, 394, 589, 622,
	623, 514, 0, 880, 860, 862, 863, 867, 871, 872,
	873, 874, 875, 877, 879, 883, 647, 0, 568, 583,
	651, 582, 644, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 882, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 812, 564, 565,
	384, 385, 386, 387, 869, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 656, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 891, 864, 890, 892, 893, 889, 894,
	895, 876, 767, 0, 819, 887, 886, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 645, 642, 446, 646,
	774, 292, 520, 366, 0, 409, 340, 585, 586, 0,
	637, 853, 826, 827, 828, 764, 829, 823, 824, 765,
	825, 854, 817, 850, 851, 793, 820, 830, 849, 831,
	852, 855, 856, 896, 897, 837, 821, 256, 898, 834,
	857, 848, 847, 832, 818, 858, 859, 800, 795, 835,
	836, 822, 841, 842, 843, 766, 814, 815, 816, 838,
	839, 796, 797, 798, 799, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 643, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 844, 632, 432, 0, 840, 635, 636, 633, 370,
	419, 437, 426, 810, 649, 510, 511, 650, 621, 0,
	759, 0, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 801, 561, 512, 428, 380, 579, 578, 0, 0,
	870, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 754, 0, 0, 791, 846,
	845, 778, 788, 0, 0, 308, 228, 507, 627, 509,
	508, 779, 0, 780, 784, 787, 783, 781, 782, 0,
	861, 0, 0, 0, 0, 0, 0, 746, 758, 0,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 756, 0, 0, 0, 0,
	811, 0, 757, 0, 0, 806, 785, 789, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 786,
	809, 813, 329, 884, 807, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 885, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 804, 0, 624, 0, 463, 0,
	0, 868, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 808, 0, 417, 398, 881, 3960, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 865, 394, 589, 622, 623, 514, 0, 880, 860,
	862, 863, 867, 871, 872, 873, 874, 875, 877, 879,
	883, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 882, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 812, 564, 565, 384, 385, 386, 387, 869,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 891, 864,
	890, 892, 893, 889, 894, 895, 876, 767, 0, 819,
	887, 886, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 774, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 853, 826, 827, 828,
	764, 829, 823, 824, 765, 825, 854, 817, 850, 851,
	793, 820, 830, 849, 831, 852, 855, 856, 896, 897,
	837, 821, 256, 898, 834, 857, 848, 847, 832, 818,
	858, 859, 800, 795, 835, 836, 822, 841, 842, 843,
	766, 814, 815, 816, 838, 839, 796, 797, 798, 799,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 844, 632, 432, 0,
	840, 635, 636, 633, 370, 419, 437, 426, 810, 649,
	510, 511, 650, 621, 0, 759, 0, 396, 0, 0,
	525, 558, 547, 631, 513, 0, 0, 0, 0, 0,
	0, 762, 0, 0, 0, 335, 1868, 0, 365, 562,
	544, 554, 545, 530, 531, 532, 539, 345, 533, 534,
	535, 505, 536, 506, 537, 538, 801, 561, 512, 428,
	380, 579, 578, 0, 0, 870, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	754, 0, 0, 791, 846, 845, 778, 788, 0, 0,
	308, 228, 507, 627, 509, 508, 779, 0, 780, 784,
	787, 783, 781, 782, 0, 861, 0, 0, 0, 0,
	0, 0, 746, 758, 0, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 755,
	756, 0, 0, 0, 0, 811, 0, 757, 0, 0,
	806, 785, 789, 0, 0, 0, 0, 298, 434, 453,
	309, 423, 466, 314, 431, 445, 304, 395, 420, 0,
	0, 300, 451, 430, 377, 355, 356, 299, 0, 414,
	333, 347, 330, 393, 786, 809, 813, 329, 884, 807,
	461, 302, 0, 460, 392, 447, 452, 378, 372, 0,
	301, 449, 376, 371, 359, 337, 885, 360, 361, 351,
	404, 369, 405, 352, 382, 381, 383, 0, 0, 0,
	0, 0, 489, 490, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 804,
	0, 624, 0, 463, 0, 0, 868, 0, 0, 0,
	433, 0, 0, 362, 0, 0, 0, 808, 0, 417,
	398, 881, 0, 0, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 653, 654, 655, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 0, 0, 0, 475, 363,
	364, 0, 342, 290, 291, 648, 865, 394, 589, 622,
	623, 514, 0, 880, 860, 862, 863, 867, 871, 872,
	873, 874, 875, 877, 879, 883, 647, 0, 568, 583,
	651, 582, 644, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 882, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 812, 564, 565,
	384, 385, 386, 387, 869, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 656, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 891, 864, 890, 892, 893, 889, 894,
	895, 876, 767, 0, 819, 887, 886, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 645, 642, 446, 646,
	774, 292, 520, 366, 0, 409, 340, 585, 586, 0,
	637, 853, 826, 827, 828, 764, 829, 823, 824, 765,
	825, 854, 817, 850, 851, 793, 820, 830, 849, 831,
	852, 855, 856, 896, 897, 837, 821, 256, 898, 834,
	857, 848, 847, 832, 818, 858, 859, 800, 795, 835,
	836, 822, 841, 842, 843, 766, 814, 815, 816, 838,
	839, 796, 797, 798, 799, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 643, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 844, 632, 432, 0, 840, 635, 636, 633, 370,
	419, 437, 426, 810, 649, 510, 511, 650, 621, 0,
	759, 0, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 801, 561, 512, 428, 380, 579, 578, 0, 0,
	870, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 754, 0, 0, 791, 846,
	845, 778, 788, 0, 0, 308, 228, 507, 627, 509,
	508, 779, 0, 780, 784, 787, 783, 781, 782, 0,
	861, 0, 0, 0, 0, 0, 0, 746, 758, 0,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 756, 1581, 0, 0, 0,
	811, 0, 757, 0, 0, 806, 785, 789, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 786,
	809, 813, 329, 884, 807, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 885, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 804, 0, 624, 0, 463, 0,
	0, 868, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 808, 0, 417, 398, 881, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 865, 394, 589, 622, 623, 514, 0, 880, 860,
	862, 863, 867, 871, 872, 873, 874, 875, 877, 879,
	883, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 882, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 812, 564, 565, 384, 385, 386, 387, 869,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 891, 864,
	890, 892, 893, 889, 894, 895, 876, 767, 0, 819,
	887, 886, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 774, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 853, 826, 827, 828,
	764, 829, 823, 824, 765, 825, 854, 817, 850, 851,
	793, 820, 830, 849, 831, 852, 855, 856, 896, 897,
	837, 821, 256, 898, 834, 857, 848, 847, 832, 818,
	858, 859, 800, 795, 835, 836, 822, 841, 842, 843,
	766, 814, 815, 816, 838, 839, 796, 797, 798, 799,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 844, 632, 432, 0,
	840, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 810, 759, 0, 2258, 0, 0,
	0, 0, 0, 396, 0, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 762, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 801, 561, 512, 428, 380, 579, 578, 0,
	0, 870, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 0, 754, 0, 0, 791,
	846, 845, 778, 788, 0, 0, 308, 228, 507, 627,
	509, 508, 779, 0, 780, 784, 787, 783, 781, 782,
	0, 861, 0, 0, 0, 0, 0, 0, 746, 758,
	0, 763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 755, 756, 0, 0, 0,
	0, 811, 0, 757, 0, 0, 806, 785, 789, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	786, 809, 813, 329, 884, 807, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 885, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 804, 0, 624, 0, 463,
	0, 0, 868, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 808, 0, 417, 398, 881, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 865, 394, 589, 622, 623, 514, 0, 880,
	860, 862, 863, 867, 871, 872, 873, 874, 875, 877,
	879, 883, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 882, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 812, 564, 565, 384, 385, 386, 387,
	869, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 891,
	864, 890, 892, 893, 889, 894, 895, 876, 767, 0,
	819, 887, 886, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 774, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 853, 826, 827,
	828, 764, 829, 823, 824, 765, 825, 854, 817, 850,
	851, 793, 820, 830, 849, 831, 852, 855, 856, 896,
	897, 837, 821, 256, 898, 834, 857, 848, 847, 832,
	818, 858, 859, 800, 795, 835, 836, 822, 841, 842,
	843, 766, 814, 815, 816, 838, 839, 796, 797, 798,
	799, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 844, 632, 432,
	0, 840, 635, 636, 633, 370, 419, 437, 426, 810,
	649, 510, 511, 650, 621, 0, 759, 0, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 801, 561, 512,
	428, 380, 579, 578, 0, 0, 870, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 754, 0, 0, 791, 846, 845, 778, 788, 0,
	0, 308, 228, 507, 627, 509, 508, 779, 0, 780,
	784, 787, 783, 781, 782, 0, 861, 0, 0, 0,
	0, 0, 0, 746, 758, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 756, 1861, 0, 0, 0, 811, 0, 757, 0,
	0, 806, 785, 789, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 786, 809, 813, 329, 884,
	807, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 885, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	804, 0, 624, 0, 463, 0, 0, 868, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 808, 0,
	417, 398, 881, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 865, 394, 589,
	622, 623, 514, 0, 880, 860, 862, 863, 867, 871,
	872, 873, 874, 875, 877, 879, 883, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 882, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 812, 564,
	565, 384, 385, 386, 387, 869, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 891, 864, 890, 892, 893, 889,
	894, 895, 876, 767, 0, 819, 887, 886, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 774, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 853, 826, 827, 828, 764, 829, 823, 824,
	765, 825, 854, 817, 850, 851, 793, 820, 830, 849,
	831, 852, 855, 856, 896, 897, 837, 821, 256, 898,
	834, 857, 848, 847, 832, 818, 858, 859, 800, 795,
	835, 836, 822, 841, 842, 843, 766, 814, 815, 816,
	838, 839, 796, 797, 798, 799, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 844, 632, 432, 0, 840, 635, 636, 633,
	370, 419, 437, 426, 810, 649, 510, 511, 650, 621,
	0, 759, 0, 396, 0, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 762, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 801, 561, 512, 428, 380, 579, 578, 0,
	0, 870, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 0, 754, 0, 0, 791,
	846, 845, 778, 788, 0, 0, 308, 228, 507, 627,
	509, 508, 779, 0, 780, 784, 787, 783, 781, 782,
	0, 861, 0, 0, 0, 0, 0, 0, 746, 758,
	0, 763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 755, 756, 0, 0, 0,
	0, 811, 0, 757, 0, 0, 806, 785, 789, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	786, 809, 813, 329, 884, 807, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 885, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 804, 0, 624, 0, 463,
	0, 0, 868, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 808, 0, 417, 398, 881, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 865, 394, 589, 622, 623, 514, 0, 880,
	860, 862, 863, 867, 871, 872, 873, 874, 875, 877,
	879, 883, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 882, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 812, 564, 565, 384, 385, 386, 387,
	869, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 891,
	864, 890, 892, 893, 889, 894, 895, 876, 767, 0,
	819, 887, 886, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 774, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 853, 826, 827,
	828, 764, 829, 823, 824, 765, 825, 854, 817, 850,
	851, 793, 820, 830, 849, 831, 852, 855, 856, 896,
	897, 837, 821, 256, 898, 834, 857, 848, 847, 832,
	818, 858, 859, 800, 795, 835, 836, 822, 841, 842,
	843, 766, 814, 815, 816, 838, 839, 796, 797, 798,
	799, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 844, 632, 432,
	0, 840, 635, 636, 633, 370, 419, 437, 426, 810,
	649, 510, 511, 650, 621, 0, 759, 0, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 801, 561, 512,
	428, 380, 579, 578, 0, 0, 870, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 754, 0, 0, 791, 846, 845, 778, 788, 0,
	0, 308, 228, 507, 627, 509, 508, 779, 0, 780,
	784, 787, 783, 781, 782, 0, 861, 0, 0, 0,
	0, 0, 0, 746, 758, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 756, 0, 0, 0, 0, 811, 0, 757, 0,
	0, 806, 785, 789, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 786, 809, 813, 329, 884,
	807, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 885, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	804, 0, 624, 0, 463, 0, 0, 868, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 808, 0,
	417, 398, 881, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 865, 394, 589,
	622, 623, 514, 0, 880, 860, 862, 863, 867, 871,
	872, 873, 874, 875, 877, 879, 883, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 882, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 812, 564,
	565, 384, 385, 386, 387, 869, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 891, 864, 890, 892, 893, 889,
	894, 895, 876, 767, 0, 819, 887, 886, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 774, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 853, 826, 827, 828, 764, 829, 823, 824,
	765, 825, 854, 817, 850, 851, 793, 820, 830, 849,
	831, 852, 855, 856, 896, 897, 837, 821, 256, 898,
	834, 857, 848, 847, 832, 818, 858, 859, 800, 795,
	835, 836, 822, 841, 842, 843, 766, 814, 815, 816,
	838, 839, 796, 797, 798, 799, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 844, 632, 432, 0, 3538, 635, 3539, 3540,
	370, 419, 437, 426, 810, 649, 510, 511, 650, 621,
	0, 759, 0, 396, 0, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 762, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 801, 561, 512, 428, 380, 579, 578, 0,
	0, 870, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 0, 754, 0, 0, 791,
	846, 845, 778, 788, 0, 0, 308, 228, 507, 627,
	509, 508, 2734, 0, 2735, 784, 787, 783, 781, 782,
	0, 861, 0, 0, 0, 0, 0, 0, 746, 758,
	0, 763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 755, 756, 0, 0, 0,
	0, 811, 0, 757, 0, 0, 806, 785, 789, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	786, 809, 813, 329, 884, 807, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 885, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 804, 0, 624, 0, 463,
	0, 0, 868, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 808, 0, 417, 398, 881, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 865, 394, 589, 622, 623, 514, 0, 880,
	860, 862, 863, 867, 871, 872, 873, 874, 875, 877,
	879, 883, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 882, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 812, 564, 565, 384, 385, 386, 387,
	869, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 891,
	864, 890, 892, 893, 889, 894, 895, 876, 767, 0,
	819, 887, 886, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 774, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 853, 826, 827,
	828, 764, 829, 823, 824, 765, 825, 854, 817, 850,
	851, 793, 820, 830, 849, 831, 852, 855, 856, 896,
	897, 837, 821, 256, 898, 834, 857, 848, 847, 832,
	818, 858, 859, 800, 795, 835, 836, 822, 841, 842,
	843, 766, 814, 815, 816, 838, 839, 796, 797, 798,
	799, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 844, 632, 432,
	0, 840, 635, 636, 633, 370, 419, 437, 426, 810,
	649, 510, 511, 650, 621, 0, 759, 0, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 1726, 0,
	0, 0, 762, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 801, 561, 512,
	428, 380, 579, 578, 0, 0, 870, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 754, 0, 0, 791, 846, 845, 778, 788, 0,
	0, 308, 228, 507, 627, 509, 508, 779, 0, 780,
	784, 787, 783, 781, 782, 0, 861, 0, 0, 0,
	0, 0, 0, 0, 758, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 756, 0, 0, 0, 0, 811, 0, 757, 0,
	0, 806, 785, 789, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 786, 809, 813, 329, 884,
	807, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 885, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	804, 0, 624, 0, 463, 0, 0, 868, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 808, 0,
	417, 398, 881, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 1727, 1728,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 865, 394, 589,
	622, 623, 514, 0, 880, 860, 862, 863, 867, 871,
	872, 873, 874, 875, 877, 879, 883, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 882, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 812, 564,
	565, 384, 385, 386, 387, 869, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 891, 864, 890, 892, 893, 889,
	894, 895, 876, 767, 0, 819, 887, 886, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 774, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 853, 826, 827, 828, 764, 829, 823, 824,
	765, 825, 854, 817, 850, 851, 793, 820, 830, 849,
	831, 852, 855, 856, 896, 897, 837, 821, 256, 898,
	834, 857, 848, 847, 832, 818, 858, 859, 800, 795,
	835, 836, 822, 841, 842, 843, 766, 814, 815, 816,
	838, 839, 796, 797, 798, 799, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 844, 632, 432, 0, 840, 635, 636, 633,
	370, 419, 437, 426, 810, 649, 510, 511, 650, 621,
	0, 759, 0, 396, 0, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 762, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 801, 561, 512, 428, 380, 579, 578, 0,
	0, 870, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 0, 754, 0, 0, 791,
	846, 845, 778, 788, 0, 0, 308, 228, 507, 627,
	509, 508, 779, 0, 780, 784, 787, 783, 781, 782,
	0, 861, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 755, 756, 0, 0, 0,
	0, 811, 0, 757, 0, 0, 806, 785, 789, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	786, 809, 813, 329, 884, 807, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 885, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 804, 0, 624, 0, 463,
	0, 0, 868, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 808, 0, 417, 398, 881, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 865, 394, 589, 622, 623, 514, 0, 880,
	860, 862, 863, 867, 871, 872, 873, 874, 875, 877,
	879, 883, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 882, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 812, 564, 565, 384, 385, 386, 387,
	869, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 891,
	864, 890, 892, 893, 889, 894, 895, 876, 767, 0,
	819, 887, 886, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 774, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 853, 826, 827,
	828, 764, 829, 823, 824, 765, 825, 854, 817, 850,
	851, 793, 820, 830, 849, 831, 852, 855, 856, 896,
	897, 837, 821, 256, 898, 834, 857, 848, 847, 832,
	818, 858, 859, 800, 795, 835, 836, 822, 841, 842,
	843, 766, 814, 815, 816, 838, 839, 796, 797, 798,
	799, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 844, 632, 432,
	0, 840, 635, 636, 633, 370, 419, 437, 426, 810,
	649, 510, 511, 650, 621, 0, 759, 0, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 801, 561, 512,
	428, 380, 579, 578, 0, 0, 870, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 791, 846, 845, 778, 788, 0,
	0, 308, 228, 507, 627, 509, 508, 779, 0, 780,
	784, 787, 783, 781, 782, 0, 861, 0, 0, 0,
	0, 0, 0, 746, 758, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 756, 0, 0, 0, 0, 811, 0, 757, 0,
	0, 806, 785, 789, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 786, 809, 813, 329, 884,
	807, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 885, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	804, 0, 624, 0, 463, 0, 0, 868, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 808, 0,
	417, 398, 881, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 865, 394, 589,
	622, 623, 514, 0, 880, 860, 862, 863, 867, 871,
	872, 873, 874, 875, 877, 879, 883, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 882, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 812, 564,
	565, 384, 385, 386, 387, 869, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 891, 864, 890, 892, 893, 889,
	894, 895, 876, 767, 0, 819, 887, 886, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 774, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 853, 826, 827, 828, 764, 829, 823, 824,
	765, 825, 854, 817, 850, 851, 793, 820, 830, 849,
	831, 852, 855, 856, 896, 897, 837, 821, 256, 898,
	834, 857, 848, 847, 832, 818, 858, 859, 800, 795,
	835, 836, 822, 841, 842, 843, 766, 814, 815, 816,
	838, 839, 796, 797, 798, 799, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 844, 632, 432, 0, 840, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	0, 759, 205, 64, 196, 167, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 197, 0, 0, 0, 0, 0, 0, 188, 0,
	335, 0, 198, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 139, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 166, 194, 203, 195,
	123, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 220, 0, 0, 0, 433, 0, 0, 362, 193,
	187, 186, 479, 0, 417, 398, 232, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 599, 600, 601,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	458, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 223, 571, 574,
	504, 233, 0, 568, 583, 541, 582, 234, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 137, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 231, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 238, 303, 446, 239, 0, 292, 520, 366, 168,
	409, 340, 585, 586, 61, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	235, 45, 221, 224, 226, 225, 0, 62, 569, 581,
	615, 5, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 142, 236,
	510, 511, 237, 621, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 139, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 2409, 2412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 2413,
	463, 0, 0, 0, 2408, 0, 2407, 433, 2405, 2410,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 2411, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 168, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 227, 0, 0, 778, 788, 0, 0, 308,
	228, 507, 627, 509, 508, 779, 0, 780, 784, 787,
	783, 781, 782, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	785, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 786, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 205, 64,
	196, 167, 0, 0, 0, 0, 0, 0, 396, 675,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 682, 0, 0, 0, 0, 0, 0,
	0, 681, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 679, 680, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 676, 678, 313, 486, 410,
	690, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 168, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 2572, 2575, 2576, 2577, 2578, 2579,
	2580, 0, 2585, 2581, 2582, 2583, 2584, 0, 2567, 2568,
	2569, 2570, 1114, 2551, 2573, 0, 2552, 392, 2553, 2554,
	2555, 2556, 1118, 2557, 2558, 2559, 2560, 2561, 2564, 2565,
	2562, 2563, 2571, 404, 369, 405, 352, 382, 381, 383,
	1142, 1144, 1146, 1148, 1151, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	2566, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 2574, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 2409, 2412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 2413, 463, 0,
	0, 0, 2408, 0, 2407, 433, 2405, 2410, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 2411, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 2430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 2429,
	463, 0, 0, 0, 2435, 2432, 2434, 433, 0, 2433,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	2427, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 2430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 2429, 463, 0, 0, 0, 2435, 2432, 2434, 433,
	0, 2433, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 2124, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 2125, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 1252,
	1253, 1254, 1251, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 205, 649, 510, 511, 650, 621,
	0, 0, 0, 0, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 139, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 2174, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 168, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	205, 649, 510, 511, 650, 621, 0, 0, 0, 0,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 139,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 2159, 0, 227, 0, 0, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 168, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 1042, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 1049,
	1050, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 1036, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 1023, 461, 302, 1022, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 1040, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	1041, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 1044, 564, 565, 384, 385, 386, 387, 346,
	590, 1039, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 1051, 1037, 1047, 1038, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 1048, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 1035, 419, 437, 426, 205, 649,
	510, 511, 650, 621, 0, 0, 0, 0, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 139, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2056, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 168, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 1049, 1050, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 1023, 461, 302, 1022, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	1051, 2077, 1047, 2078, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 1048, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 2959, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 2962, 0,
	0, 0, 2961, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 1547, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 1545, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1543, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 1541, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 1545, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1543,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4025, 0, 227, 846, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 1545,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1543, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 2474, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 972, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 1545, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1756, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 2513,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 2515, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 2124, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 2125, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 3175,
	3177, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 2536, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 1545, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 663, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 662, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 846, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4002, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 3770,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 3903, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1770, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3785, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 3697, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 3207,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2056, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 3416, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3066, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 1545, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 2515, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 2878, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 2632,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 2592, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	2365, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 1910, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 2038,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 1545, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 1943, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 1574, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 673, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	972, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 1896, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 1524, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	1522, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 1402, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 741, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 698, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 699, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 1131, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 1131, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 1116, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 0, 0, 0, 0,
	0, 0, 1139, 1143, 1145, 1147, 1149, 1150, 1152, 0,
	1157, 1153, 1154, 1155, 1156, 0, 1134, 1135, 1136, 1137,
	1114, 1115, 1140, 0, 1117, 0, 1119, 1120, 1121, 1122,
	1118, 1123, 1124, 1125, 1126, 1127, 1130, 1132, 1128, 1129,
	1138, 0, 0, 0, 0, 0, 0, 0, 1142, 1144,
	1146, 1148, 1151, 2025, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3617, 0, 0, 0, 0, 1133, 2028,
	0, 1139, 1143, 1145, 1147, 1149, 1150, 1152, 0, 1157,
	1153, 1154, 1155, 1156, 0, 1134, 1135, 1136, 1137, 1114,
	1115, 1140, 2025, 1117, 0, 1119, 1120, 1121, 1122, 1118,
	1123, 1124, 1125, 1126, 1127, 1130, 1132, 1128, 1129, 1138,
	0, 0, 0, 201, 0, 0, 0, 1142, 1144, 1146,
	1148, 1151, 0, 2002, 0, 0, 0, 0, 2028, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 2025, 0, 0, 0,
	0, 0, 3791, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2002, 0, 0, 0, 0, 0, 0, 0,
	0, 2018, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2028, 0, 0, 0, 0, 0, 0, 2677,
	2678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2025, 0,
	2018, 0, 0, 0, 0, 0, 2002, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2006, 0, 0, 0, 0,
	0, 0, 0, 0, 2028, 0, 2012, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2000, 2034, 0, 0,
	2001, 2003, 2005, 0, 2007, 2008, 2009, 2013, 2014, 2015,
	2017, 2020, 2021, 2022, 2018, 0, 0, 0, 0, 0,
	0, 2010, 2019, 2011, 2006, 0, 0, 0, 2002, 0,
	0, 0, 0, 0, 0, 2012, 0, 0, 0, 0,
	0, 0, 0, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2000, 2034, 2026, 0, 2001,
	2003, 2005, 0, 2007, 2008, 2009, 2013, 2014, 2015, 2017,
	2020, 2021, 2022, 0, 0, 0, 0, 0, 0, 0,
	2010, 2019, 2011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3762, 0, 0, 0, 2018, 0, 2006, 0,
	0, 0, 2023, 0, 0, 0, 0, 0, 0, 2012,
	0, 0, 0, 0, 0, 0, 2026, 0, 0, 1999,
	0, 0, 0, 0, 0, 0, 1998, 0, 0, 2000,
	2034, 0, 1141, 2001, 2003, 2005, 0, 2007, 2008, 2009,
	2013, 2014, 2015, 2017, 2020, 2021, 2022, 0, 0, 0,
	2016, 0, 0, 0, 2010, 2019, 2011, 0, 0, 2004,
	0, 2023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1999, 0,
	2006, 0, 0, 0, 0, 1998, 0, 0, 0, 0,
	2026, 2012, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2016,
	0, 2000, 2034, 0, 0, 2001, 2003, 2005, 2004, 2007,
	2008, 2009, 2013, 2014, 2015, 2017, 2020, 2021, 2022, 0,
	0, 0, 0, 0, 0, 2023, 2010, 2019, 2011, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1999, 0, 0, 0, 0, 0, 0, 1998,
	0, 0, 0, 0, 0, 0, 0, 3621, 0, 0,
	0, 0, 2026, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2016, 0, 0, 0, 0, 0, 0,
	0, 0, 2004, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2023, 0, 0,
	0, 0, 0, 0, 0, 0, 3625, 0, 0, 0,
	0, 0, 0, 0, 1999, 0, 0, 0, 0, 0,
	0, 1998, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2016, 0, 0, 0, 0,
	0, 0, 0, 0, 2004, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3625,
}

var yyPact = [...]int{
	256, -1000, -1000, -1000, -324, 14989, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49149, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 437, 49149, -319, 30821, 47253, -1000, -1000, 2660, -1000,
	47885, 16905, 49149, 536, 525, 49149, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 949, -1000, 52941, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 860, 4650, 52309, 11170, -210,
	-1000, 1473, -27, 2556, 544, -192, -194, 1111, 1117, 1131,
	1033, 49149, 1080, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 302, 976, 48517, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4055, 257, 948, 976, 21969, 173, 167,
	1473, 464, -53, 207, -1000, 2161, 4022, 202, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11170,
	11170, 14989, -358, 14989, 11170, 49149, 49149, -1000, -1000, -1000,
	-1000, -319, 47885, 860, 4650, 11170, 2556, 544, -192, -194,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -53, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 167, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5097,
	-1000, 1571, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2263, 3076, 1567,
	2555, 799, 47253, 49149, -1000, 148, 799, -1000, -1000, -1000,
	1473, 3544, -1000, 49149, 49149, 248, 1885, -1000, 554, 397,
	421, 429, 361, 1555, -1000, -1000, -1000, -1000, -1000, -1000,
	663, 3500, -1000, 49149, 49149, 3094, 49149, -1000, 2267, 731,
	-1000, 4834, 3316, 1424, 982, 3116, -1000, -1000, 3074, -1000,
	367, 643, 358, 478, 430, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 364, -1000, 3381, -1000, -1000, 356, -1000, -1000,
	344, -1000, -1000, -1000, 157, -1000, -1000, -1000, -1000, -1000,
	-1000, 36, -1000, -1000, 1173, 1982, 11170, 2488, -1000, 3999,
	1584, -1000, -1000, -1000, 6719, 13710, 13710, 13710, 13710, 49149,
	-1000, -1000, 2906, 11170, 3071, 3070, 3068, 3064, -1000, -1000,
	-1000, -1000, -1000, -1000, 3060, 1554, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2011, -1000, -1000, -1000, 14345,
	-1000, 3059, 3058, 3057, 3056, 3055, 3052, 3050, 3049, 3048,
	3042, 3041, 3040, 3038, 3037, 2769, 16263, 3036, 2553, 2544,
	3035, 3015, 3009, 2543, 3007, 3005, 3004, 2769, 2769, 3003,
	2997, 2995, 2994, 2992, 2991, 2990, 2989, 2986, 2981, 2980,
	2977, 2973, 2967, 2966, 2965, 2964, 2949, 2948, 2947, 2946,
	2940, 2939, 2936, 2935, 2934, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1379,
	-1000, 2931, 3525, 2826, -1000, 3404, 3397, 3367, 3363, -258,
	2930, 2168, -1000, -1000, 113, 3499, 49149, -276, 49149, 440,
	-62, -65, -66, -1000, -42, -1000, -1000, 1100, -1000, 1067,
	51677, 928, -1000, -1000, 49149, 853, 853, 853, 49149, 49149,
	282, 931, 853, 853, 853, 853, 853, 914, 853, 3410,
	945, 944, 942, 940, 853, 14, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1884, 1882, 3211, 1047, -1000, -1000, -1000,
	-1000, 1414, 49149, -1000, 2846, 440, -294, 1775, 1775, 3484,
	3484, 3408, 761, 754, 750, 1775, 600, -1000, 1811, 1811,
	1811, 1811, 1775, 529, 796, 3417, 3417, 141, 1811, 124,
	1775, 1775, 124, 1775, 1775, -1000, 1969, 292, -265, -1000,
	-1000, -1000, -1000, 1811, 1811, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3370, 3366, 860, 860, 49149, 860, 240, 49149,
	860, 860, 860, 49149, 870, -310, 73, 51045, 50413, 2330,
	2267, 729, 727, 1422, 1721, -1000, 1720, 49149, 49149, 1720,
	1720, 25133, 24501, -1000, 49149, -1000, 3525, 2826, 2758, 1919,
	2755, 2826, -68, 440, 860, 860, 860, 860, 860, 325,
	860, 860, 860, 860, 860, 49149, 49149, 46621, 860, 860,
	860, 860, 9259, 2161, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14989, 2197, 2345,
	199, -4, -304, 276, -1000, -1000, 49149, 3281, 329, -1000,
	-1000, -1000, 2820, -1000, 2823, 2823, 2823, 2823, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2823, 2823,
	2844, 2928, -1000, -1000, 2821, 2821, 2821, 2820, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2831, 2831, 2842, 2842, 2831, 49149, -87,
	-1000, -1000, 11170, 49149, 3295, 419, 2927, 799, -1000, -1000,
	49149, 320, 457, 3525, 3293, 3417, 3476, -1000, -1000, 1544,
	2167, 2542, -1000, 361, -1000, 485, 361, -1000, 538, 538,
	1831, -1000, 1247, -1000, -1000, -1000, -1000, -1000, -1000, 49149,
	36, 444, -1000, -1000, 2502, 2926, -1000, 677, 1269, 1352,
	-1000, 352, 4311, 39669, 2267, 39669, 49149, -1000, -1000, -1000,
	-1000, -1000, -1000, 142, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 385, -1000,
	11170, 11170, 11170, 11170, 11170, -1000, 924, 13075, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13710, 13710, 13710, 13710, 13710,
	13710, 13710, 13710, 13710, 13710, 13710, 13710, 2905, 1951, 13710,
	13710, 13710, 13710, 27661, 1919, 3334, 1415, 315, 1584, 1584,
	1584, 1584, 11170, -1000, 1920, 1982, 11170, 11170, 11170, 11170,
	33981, 49149, -1000, -1000, 4821, 11170, 11170, 1501, 11170, 3359,
	11170, 11170, 11170, 2749, 5440, 49149, 11170, -1000, 2748, 2747,
	-1000, -1000, 2064, 11170, -1000, -1000, 11170, -1000, -1000, 11170,
	13710, 11170, -1000, 11170, 11170, 11170, -1000, -1000, 3584, 3359,
	3359, 3359, 1961, 11170, 11170, 3359, 3359, 3359, 1755, 3359,
	3359, 3359, 3359, 3359, 3359, 3359, 3359, 3359, 3359, 3359,
	2744, 2743, 2736, 10535, 3417, -210, -1000, 8624, 3293, 3417,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-261, 2920, 49149, 2539, 2537, -335, 187, 505, 49149, 1170,
	-1000, -1000, 49149, 2164, 49149, 2163, 97, 1107, 1073, 1071,
	-1000, -1000, 49149, 49781, -1000, 49149, 1923, 49149, 49149, 3340,
	-1000, 2908, 49149, 853, 853, 853, -1000, 44725, 39669, 49149,
	49149, 2267, 49149, 49149, 49149, 853, 853, 853, 853, 49149,
	-1000, 3236, 39669, 3218, 870, -1000, 49149, 1414, 3336, 49149,
	-1000, -1000, -1000, -1000, 3484, 13710, 13710, -1000, -1000, 11170,
	-1000, 45989, 1811, 1775, 1775, -1000, -1000, 49149, -1000, -1000,
	-1000, 1811, 49149, 1811, 1811, 3484, 1811, -1000, -1000, -1000,
	1775, 1775, -1000, -1000, 11170, -1000, -1000, 1811, 1811, -1000,
	-1000, 3484, 49149, 138, 3484, 3484, 145, -1000, -1000, -1000,
	1775, 49149, 49149, 853, 49149, -1000, 49149, 49149, -1000, -1000,
	49149, 49149, 4540, 49149, 44725, 45357, 3362, -1000, 39669, 49149,
	49149, 1413, -1000, 916, 37141, -1000, 49149, 1384, -1000, 54,
	-1000, 92, 73, 1720, 73, 1720, 913, -1000, 670, 693,
	23237, 610, 39669, 6075, -1000, -1000, 1720, 1720, 6075, 6075,
	1587, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1411, -1000,
	366, 3417, -1000, -1000, -1000, -1000, -1000, 2162, -1000, 49149,
	44725, 39669, 2267, 49149, 860, 49149, 49149, 49149, 49149, 49149,
	-1000, 2907, 1543, -1000, 3306, 49149, 49149, 49149, 49149, 1324,
	-1000, -1000, 20065, 1535, -1000, -1000, 1916, -1000, 11170, 14989,
	-245, 11170, 14989, 14989, 11170, 14989, -1000, 11170, 312, -1000,
	-1000, -1000, -1000, 2159, -1000, 2158, -1000, -1000, -1000, -1000,
	-1000, 2520, 2520, -1000, 2156, -1000, -1000, -1000, -1000, 2154,
	-1000, -1000, 2153, -1000, -1000, -1000, -1000, -151, 2735, 1173,
	-1000, 2505, 3115, -213, -1000, 21337, 49149, 49149, 419, -342,
	1881, 1880, 1879, 3341, -1000, -213, -1000, 20701, 49149, 3417,
	-1000, -216, 3293, 11170, 49149, -1000, 3403, -1000, -1000, 361,
	-1000, -1000, -1000, 538, 450, -1000, -1000, -1000, -1000, -1000,
	-1000, 1532, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 416, -55, -56, 1405, -1000, 49149, -1000, -1000,
	352, 39669, 41565, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	284, -1000, -1000, 185, -1000, 911, 291, 1829, -1000, -1000,
	269, 216, 253, 970, 1982, -1000, 1943, 1943, 1948, -1000,
	752, -1000, -1000, -1000, -1000, 2906, -1000, -1000, -1000, 2305,
	3067, -1000, 1901, 1901, 1592, 1592, 1592, 1592, 1592, 2437,
	2437, -1000, -1000, -1000, 6719, 2905, 13710, 13710, 13710, 13710,
	932, 932, 4327, 4299, -1000, -1000, -1000, -1000, 11170, 176,
	1913, -1000, 11170, 2679, 1695, 2590, 1605, 1804, -1000, 2820,
	11170, 1502, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2731, 2730, 2894, 3497, 2727, 11170, -1000, -1000,
	1797, 1782, 1779, -1000, 2541, 9900, -1000, -1000, -1000, 2725,
	1500, 2721, -1000, -1000, -1000, 2716, 1778, 1236, 2715, 2897,
	2713, 2712, 2711, 2694, 1399, 11170, 11170, 11170, 11170, 2693,
	1769, 1745, 11170, 11170, 11170, 11170, 2687, 11170, 11170, 11170,
	11170, 11170, 11170, 11170, 11170, 11170, 11170, 49149, 169, 169,
	169, 1395, 1393, -1000, -1000, 1744, -1000, 1982, -1000, -1000,
	3293, -1000, 2884, 2152, 1387, -1000, -1000, -316, 2436, 49149,
	49149, 180, 49149, 2504, -277, 49149, -1000, -1000, 2498, -1000,
	-1000, -1000, 1098, 1060, 1064, -1000, 49149, -1000, 2487, 3304,
	3396, 890, 49149, 1188, 2883, 49149, 49149, 49149, 311, -1000,
	-1000, 1336, -1000, 291, 28, 552, 1212, 3093, 3495, -100,
	49149, 49149, 49149, 49149, 3335, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 44093, -1000, 2872, 1740, -1000, -1000, 1584,
	1584, 1982, 3088, 49149, 49149, 3484, 3484, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1811, 3484, 3484, 1617, 1775, 1811,
	-1000, -1000, 1811, -342, -1000, 1811, -1000, -342, 1486, -342,
	49149, -1000, -1000, -1000, 3332, 2846, 1385, -1000, -1000, -1000,
	3470, 1956, 830, 830, 1053, 767, 3469, 18801, -1000, 1657,
	1273, 910, 3244, 363, -1000, 1657, -148, 813, 1657, 1657,
	1657, 1657, 1657, 1657, 1657, 707, 690, 1657, 1657, 1657,
	1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1115, 1657,
	1657, 1657, 1657, 1657, -1000, 1657, 2871, 513, -1000, -1000,
	-1000, -1000, -1000, -1000, 781, 608, 310, 3354, 391, -1000,
	393, 1336, 348, 3351, 414, 49149, 49149, 3797, 1360, -1000,
	-1000, -1000, -1000, -1000, 28293, 28293, 22605, 28293, -1000, 212,
	1720, 73, 100, -1000, -1000, 1384, 6075, 1384, 6075, 2135,
	-1000, -1000, 908, -1000, -1000, 1212, -1000, 49149, 49149, -1000,
	-1000, 2868, 1877, -1000, -1000, 16263, -1000, 6075, 6075, -1000,
	-1000, 30189, 49149, -1000, 33, -1000, 47, 3293, -1000, 1179,
	-1000, -1000, 1381, 1212, 3114, 49149, 1179, 1179, 1179, -1000,
	-1000, 17537, 49149, 49149, -1000, -1000, -1000, -1000, 3484, 9259,
	-1000, 37141, -1000, -1000, 43461, -1000, 42829, 1889, -1000, 14989,
	2231, 196, -1000, 272, -311, 195, 2119, 194, 1982, -1000,
	-1000, 2680, 2678, 1736, -1000, 1734, 2674, 1733, 1708, 2130,
	-1000, 88, -1000, 3269, 1216, -1000, 2866, -1000, 1707, 3201,
	-1000, 1380, -1000, 1875, 1697, -1000, -1000, -1000, 11170, 42197,
	11170, 1028, 1216, 1687, 3200, 1380, 3293, 2483, -1000, 1376,
	-1000, 2359, 1483, 205, -1000, -1000, -1000, 49149, 860, 2502,
	1675, 41565, 1272, -1000, 903, 1476, 1466, -1000, 39669, 353,
	39669, -1000, 39669, -1000, -1000, 410, -1000, 49149, 3284, -1000,
	-1000, -1000, 2436, 1872, -341, 49149, -1000, -1000, -1000, -1000,
	-1000, 1673, -1000, 932, 932, 4327, 4161, -1000, 13710, -1000,
	13710, 3330, -1000, 1676, -1000, 11170, 2216, 53425, 11170, 53425,
	1363, 26397, 33981, -85, 3307, 3298, 49149, -1000, -1000, 11170,
	11170, -1000, 3291, -1000, -1000, -1000, -1000, 11170, 11170, 2485,
	-1000, 49149, -1000, -1000, -1000, -1000, 26397, -1000, 13710, -1000,
	-1000, -1000, -1000, 11170, 1368, 1368, 3245, 1670, 169, 169,
	169, 3199, 3181, 3167, 1669, 169, 3150, 3136, 3119, 3066,
	3053, 3016, 2983, 2971, 2914, 2888, 1664, -1000, 2865, -1000,
	-1000, 2017, 12440, 8624, -1000, -1000, 317, 1372, 2128, 2481,
	137, -1000, 1869, -1000, 2477, 49149, 49149, 1168, -1000, 49149,
	3494, -1000, -1000, -1000, -1000, 1054, -1000, 2476, -1000, 287,
	2054, 206, 334, 2672, 1348, -1000, -1000, 49149, -1000, -1000,
	-1000, 17537, 2846, 2864, 2846, 181, 1657, 662, 39669, 720,
	-1000, 49149, 2172, 1862, 3113, 828, 3280, 49149, 2863, 428,
	2862, 2860, 3331, 501, 53514, 49149, 1310, -1000, 1465, 4022,
	-1000, 49149, -1000, 2267, -1000, 1775, -1000, -1000, 3484, -1000,
	-1000, 11170, 11170, 3484, 1775, 1775, -1000, 1811, -1000, 49149,
	-1000, -342, 501, 53514, 3328, 4718, 593, 2443, -1000, 49149,
	-1000, -1000, -1000, 912, -1000, 1070, 853, 49149, 1968, 1070,
	1967, 2855, -1000, -1000, 49149, 49149, 49149, 49149, -1000, -1000,
	49149, -1000, 49149, 49149, 49149, 49149, 49149, 40933, -1000, 49149,
	49149, -1000, 49149, 1963, 49149, 1962, 3300, -1000, 1657, 1657,
	1007, -1000, -1000, 658, -1000, 40933, 2127, 2124, 2122, 2121,
	2475, 2473, 2470, 1657, 1657, 2117, 2469, 40301, 2468, 1321,
	2115, 2110, 2096, 2105, 2460, 1061, -1000, 2459, 2104, 2089,
	2087, 49149, 2847, 2378, 506, -1000, -1000, 2054, 181, 1657,
	389, 49149, 1842, 1823, 662, 633, 540, 25, 23869, -1000,
	-1000, -1000, 49149, 37141, 37141, 37141, 37141, 37141, 37141, -1000,
	3171, 3158, 3161, -1000, 3186, 3157, 3187, 3155, 3122, 49149,
	37141, 2846, -1000, 40301, -1000, -1000, -1000, 1919, 1662, 3489,
	1049, 11170, 6075, -1000, -1000, 50, 62, -1000, -1000, -1000,
	-1000, 39669, 2458, 610, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3394, 49149, 49149, 849, 2671, 1343, -1000, -1000, -1000,
	53514, 2823, 2823, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2823, 2823, 2844, -1000, -1000, 2821, 2821, 2821,
	2820, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2831, 2831, 2842, 2842, 2831, -1000, -1000, 3482, -1000,
	1331, -1000, -1000, 1464, -1000, 1933, -327, 14989, 1910, 1784,
	-1000, 11170, 14989, 11170, -247, 374, -249, -1000, -1000, -1000,
	2455, -1000, -1000, -1000, 2095, -1000, 2091, -1000, 220, 239,
	1960, -213, 8624, 448, 49149, -213, 49149, 8624, -1000, 49149,
	168, -353, -355, 164, 2447, 425, -213, 3394, 88, 11170,
	3232, -1000, -1000, 49149, 2088, -1000, -1000, -1000, 3488, 39669,
	2267, 1619, 39037, -1000, 355, -1000, 279, 636, 2442, -1000,
	936, 136, 2441, 2436, -1000, -1000, -1000, -1000, 13710, 1584,
	-1000, -1000, -1000, 1982, 11170, 2665, -1000, 1040, 1040, 2523,
	2664, 2663, -1000, 2823, 2823, -1000, 2820, 2821, 2820, 1040,
	1040, 2662, -1000, 2815, -1000, 3307, -1000, 2327, 2881, -1000,
	2690, 2673, 11170, -1000, 2652, 4095, 1655, 0, -180, 169,
	169, -1000, -1000, -1000, -1000, 169, 169, 169, 169, -1000,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 805, -88, -269, -90, -271, -1000, 2651, 1317, -1000,
	-1000, -1000, -1000, -1000, 1501, 1286, 563, 563, 2436, 2435,
	-1000, 896, 2430, 1086, 49149, 2427, -279, -1000, 2426, -1000,
	-1000, 49149, 49149, 49149, 2423, -1000, 607, 49149, 49149, 2421,
	2420, 1188, 53514, 2648, 3327, 18169, 3318, 2179, -1000, -1000,
	-1000, 29557, 633, -1000, -1000, -1000, 736, 365, 2085, 606,
	-1000, 49149, 521, 3220, 1813, 2417, 49149, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3280, -1000, 986, 477, 35877, 15631,
	-1000, 427, 49149, -1000, 18169, 18169, 427, 481, 1972, -1000,
	799, 1227, 147, 37141, 49149, -1000, 36509, 2646, -1000, 1212,
	3484, -1000, 1982, 1982, -342, 3484, 3484, 1775, -1000, -1000,
	481, -1000, 427, -1000, 1039, 19433, 581, 550, 526, -1000,
	656, -1000, -1000, 791, 3254, 53514, -1000, 49149, -1000, 49149,
	-1000, 49149, 49149, 853, 11170, 3254, 49149, 879, -1000, 1183,
	532, 465, 841, 841, 1284, -1000, 3307, -1000, -1000, 1278,
	-1000, -1000, -1000, -1000, 49149, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26397, 26397, 3349, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2415, 2414,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49149,
	1654, -1000, 1808, 2084, 2412, 2179, 29557, 1805, 1720, 2409,
	2408, 633, -1000, 2400, 2398, 2172, 1802, 933, 49149, -1000,
	1185, 49149, 49149, -1000, 1356, -1000, 1792, 3092, 3109, 3092,
	-1000, 3092, -1000, -1000, -1000, -1000, -1000, -1000, 3138, -1000,
	3134, -1000, -1000, -1000, -1000, 1356, -1000, -1000, -1000, -1000,
	-1000, 1049, -1000, 3392, 1070, 1070, 1070, 2636, -1000, -1000,
	-1000, -1000, 1272, 2631, -1000, -1000, -1000, 3514, -1000, -1000,
	-1000, -1000, -1000, -1000, 17537, 3275, 3478, 3460, 38405, -1000,
	-327, 1665, -1000, 2136, 188, 2024, 49149, -1000, -1000, -1000,
	2614, 2613, -218, 238, 3456, 3455, 1085, -1000, 2610, 1242,
	-213, -1000, -1000, 1216, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -356, -213, -1000, 1216, -1000, 220, -1000, -1000, 3257,
	-1000, -1000, 2267, -1000, 273, -1000, -1000, -1000, -1000, -1000,
	-1000, 265, -1000, 49149, -1000, 1228, 134, -1000, 1982, -1000,
	-1000, -1000, -1000, -1000, 53425, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2396, -1000, -1000, 11170, -1000,
	-1000, -1000, 2669, -1000, -1000, 11170, 2608, 2395, 2606, 2394,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3525, -1000, 3453,
	1622, 2600, 2598, 1620, 2596, 2594, -1000, 11170, 2587, 1501,
	1021, 2392, 1021, -1000, -1000, 409, 28925, 49149, 3486, -1000,
	49149, 2391, -1000, -1000, 49149, -1000, 2054, 604, 667, -1000,
	-1000, -1000, -1000, 953, 427, 2583, 1222, -1000, -1000, -1000,
	-1000, 427, -1000, 2379, 289, -1000, -1000, -1000, -1000, 2080,
	-1000, -1000, 2069, 1577, 303, -1000, -1000, -1000, -1000, -1000,
	-1000, 2125, 49149, 37773, 2178, 1791, -345, -1000, 2814, -1000,
	1657, 1657, 1657, 49149, 1618, -1000, 1657, 1657, 2582, -1000,
	-1000, 2577, 2576, -101, 797, 1846, 1841, -1000, 2075, 28293,
	37141, 36509, 1329, -1000, 1439, -1000, -1000, -1000, -1000, -1000,
	-1000, 3484, 797, -1000, 576, 2073, 13710, 2812, 13710, 2811,
	596, 2809, 1599, -1000, 49149, -1000, -1000, 49149, 4117, 2806,
	-1000, 2804, 3081, 559, 2803, 2802, 49149, 2627, -1000, 3254,
	49149, 788, 3265, -1000, -1000, -1000, 442, -1000, -1000, 616,
	-1000, 49149, -1000, 49149, -1000, 1582, -1000, 26397, -1000, -1000,
	1598, -1000, 2378, 2377, 1501, -1000, -1000, 289, 2373, 6075,
	-1000, -1000, -1000, -1000, -1000, 3220, 2371, 2125, 49149, -1000,
	49149, 1185, 1185, 3525, 49149, 8624, -1000, -1000, 11170, 2798,
	-1000, 11170, -1000, -1000, -1000, -1000, -1000, -1000, 2797, 3268,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1854, -1000, 11170,
	11805, -1000, 844, 14989, -251, 372, -1000, -1000, -1000, -220,
	2348, -1000, -1000, 3452, 2344, 2226, 49149, -1000, -1000, 1216,
	-1000, 1216, -218, -1000, -1000, 1212, -1000, -1000, 1175, 660,
	-1000, 2574, 290, -1000, 2605, -1000, 2595, 169, -1000, 169,
	-1000, 308, 11170, -1000, 2340, -1000, -1000, -1000, 2321, -1000,
	-1000, 2491, -1000, 2573, -1000, 2320, -1000, -1000, 49149, -1000,
	-1000, 1084, 2319, -347, -1000, 2313, 2054, 2054, 49149, 53514,
	-107, -101, 18169, -107, -1000, -1000, 400, 404, -1000, -1000,
	2059, 674, -1000, -1000, 2312, 626, -1000, 1185, -1000, 1770,
	1975, 2273, 33981, 26397, 27661, 2311, -1000, -1000, 35877, 1854,
	1854, 53647, 385, 53780, -1000, 2790, 1124, 1785, -1000, 2071,
	-1000, 2070, -1000, 3484, 1329, 144, -1000, -1000, 1606, -1000,
	1124, 2443, 3450, -1000, 3618, 49149, 3571, 49149, 2789, 1767,
	13710, -1000, 791, 3184, -1000, -1000, 4117, -1000, -1000, 1993,
	13710, -1000, -1000, 2309, 27661, 1009, 1751, 1691, 958, 2787,
	-1000, 637, 3512, -1000, -1000, -1000, 1004, 2783, -1000, 1959,
	1953, -1000, 49149, -1000, 33981, 33981, 790, 790, 33981, 33981,
	2782, 841, -1000, -1000, 13710, -1000, -1000, 1657, -1000, -1000,
	-1000, 1657, 1581, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2178, -1000, -1000, 1179, -1000, 3417, -1000, -1000, 1982, 49149,
	1982, 35245, -1000, 3448, 3447, -1000, 1982, 266, 260, 2780,
	2779, -1000, -327, 49149, 49149, -222, 2067, -1000, 2307, 209,
	-1000, -1000, 1177, -220, -233, 145, 26397, 1688, -1000, 2567,
	426, -133, -1000, -1000, -1000, -1000, 2564, -1000, 955, -1000,
	-1000, -1000, 1173, 2562, 2546, -1000, -1000, -1000, -1000, 49149,
	-1000, 2265, -1000, 2303, 2294, 602, -82, -1000, -1000, 484,
	-1000, -1000, -1000, 639, 2242, -1000, -1000, 403, -1000, -1000,
	-1000, 2125, 2290, -1000, -1000, 127, -1000, 1685, 1569, -1000,
	-1000, -1000, -1000, -1000, -1000, 789, -1000, 427, 53862, -1000,
	1273, 27029, -1000, 1175, 789, 513, 32717, 675, 323, -1000,
	2066, -1000, -1000, 3525, -1000, 647, -1000, 583, -1000, 1556,
	-1000, 1552, 34613, 2062, 2968, -1000, 53706, 918, -1000, -1000,
	4327, -1000, -1000, -1000, -1000, -1000, -1000, 2288, 2287, -1000,
	-1000, -1000, -1000, -1000, 2058, 2778, 75, 3345, 2286, -1000,
	-1000, 2775, 1517, 1450, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1448, 1447, 33981, -1000, -1000, 4327, 2056,
	26397, 1657, -1000, -1000, 1443, 1437, -1000, -1000, -1000, -1000,
	-1000, -301, 2773, 11170, 11170, -1000, -1000, -1000, 2771, -1000,
	-1000, 3445, -222, -236, 2282, 219, 228, -1000, 2279, -1000,
	-84, 3177, -144, -1000, -1000, 965, -214, 200, 191, 183,
	-1000, -1000, -1000, 11170, -1000, -1000, -1000, 104, -1000, 1663,
	-1000, -1000, 2054, 49149, 611, -1000, -1000, -1000, -1000, 263,
	-1000, -1000, -1000, -1000, -1000, -1000, 2273, 2270, -1000, 565,
	3443, -1000, 53780, -1000, 1657, -1000, 565, 1426, -1000, 1657,
	1657, -1000, 489, -1000, 1739, -1000, 2050, -1000, 3417, -1000,
	487, -1000, 567, -1000, -1000, -1000, 1412, -1000, -1000, -1000,
	53706, 579, -1000, 782, 2770, -1000, -1000, 2507, 11170, 2769,
	1657, 2490, -75, 33981, 3018, 2985, 2970, 2916, 1403, -1000,
	-1000, 26397, -1000, -1000, 33349, -1000, 2768, 1386, 1382, 49149,
	2226, -1000, -1000, 2268, -1000, 850, 236, 228, -1000, 3442,
	198, 3440, 3434, 1172, 3139, -1000, -1000, 1947, -1000, 197,
	193, 189, -1000, -1000, -1000, -1000, -1000, 2265, 2261, 2251,
	609, -1000, 349, -1000, -1000, -1000, 313, -1000, 3433, 593,
	-1000, 26397, -1000, -1000, 32717, 1854, 1854, -1000, -1000, 2033,
	-1000, -1000, -1000, -1000, 2026, -1000, -1000, -1000, 1369, -1000,
	49149, 987, 7989, -1000, 2439, -1000, 49149, -1000, 3108, -1000,
	286, 1354, 313, 790, 313, 790, 313, 790, 313, 790,
	350, -1000, -1000, -1000, 1340, 11170, -1000, -1000, 1314, -1000,
	-1000, -1000, 2767, 2022, 238, 233, 3421, -1000, 2226, 3419,
	2226, 2226, -1000, 184, -121, 965, -1000, -1000, -1000, -1000,
	-1000, -1000, 2249, -1000, -1000, -1000, -1000, 1657, 1657, 2248,
	2245, 471, -1000, -1000, 32085, 581, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 579, 53780, -1000, 7989, 1307, -1000, 1982,
	-1000, 841, -1000, -1000, 3103, 3102, 3493, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2764, 2444, -1000,
	49149, 3338, 25765, 213, -1000, -1000, -1000, 2236, -1000, 2226,
	-1000, -1000, 1645, -134, -1000, -267, 2021, 2008, -1000, -1000,
	49149, -1000, 49149, 576, -1000, 53780, 1304, -1000, 7989, -1000,
	-1000, 3510, -1000, 3508, 959, 959, 313, 313, 313, 313,
	11170, -1000, -1000, -1000, 49149, -1000, 1276, -1000, -1000, -1000,
	1432, -1000, -1000, -1000, -1000, 2223, -145, -1000, -1000, 2210,
	-1000, -1000, -1000, 1226, 2443, -1000, -1000, -1000, -1000, -1000,
	2048, 659, -1000, 2350, 1138, -1000, 1624, -1000, 31453, 49149,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49149,
	7354, -1000, 1248, -1000, -1000, 1982, 49149, -1000,
}

var yyPgo = [...]int{
	0, 172, 3540, 250, 178, 4178, 88, 249, 286, 276,
	248, 4177, 4175, 4174, 4173, 3270, 3269, 4172, 4171, 4170,
	4168, 4167, 4165, 4164, 4163, 4162, 4161, 4160, 4158, 4157,
	4154, 4153, 4152, 4138, 4134, 4133, 4132, 4131, 4130, 4129,
	4127, 4126, 4125, 4124, 4123, 4122, 4121, 247, 4118, 4107,
	4106, 4105, 4104, 4103, 4102, 4101, 4100, 4094, 4093, 4092,
	4091, 4090, 4089, 4088, 4087, 4085, 4079, 4076, 4075, 4074,
	4073, 4070, 4069, 4068, 4066, 4064, 4058, 4057, 4056, 4053,
	4052, 4051, 243, 4049, 4046, 253, 4045, 3249, 4044, 4043,
	4041, 4040, 4039, 4034, 4033, 4032, 4031, 4030, 4028, 337,
	4027, 4025, 4024, 4022, 4021, 4020, 4018, 4014, 4013, 4012,
	4011, 4010, 4008, 332, 4007, 4006, 4004, 4002, 228, 4000,
	245, 3999, 176, 128, 3998, 3997, 3996, 3995, 3994, 3993,
	3992, 3987, 3985, 3984, 3982, 3980, 3973, 3972, 240, 211,
	74, 3971, 47, 3970, 3968, 220, 3967, 149, 3963, 147,
	3962, 3956, 3955, 3954, 3952, 3951, 3950, 3948, 3944, 3943,
	3942, 3939, 3938, 3933, 3932, 3931, 3930, 3929, 3927, 3926,
	3922, 3920, 3918, 50, 3917, 261, 3916, 84, 3915, 189,
	3913, 78, 3912, 468, 127, 257, 1998, 263, 3911, 190,
	3910, 3909, 251, 174, 3908, 3907, 274, 3906, 231, 225,
	156, 105, 130, 3905, 139, 3904, 266, 51, 40, 235,
	145, 55, 160, 121, 3902, 214, 99, 112, 3901, 3899,
	140, 3898, 237, 183, 3897, 110, 3894, 3892, 3891, 3889,
	3888, 199, 193, 3886, 3885, 124, 3884, 3883, 75, 129,
	3882, 79, 144, 168, 122, 3880, 2174, 118, 96, 3877,
	123, 104, 3875, 143, 3864, 3863, 3859, 3858, 181, 3857,
	3856, 153, 61, 3855, 3854, 3852, 70, 3851, 87, 3849,
	41, 3848, 58, 3847, 3846, 3845, 3844, 3842, 3841, 3840,
	3839, 3838, 3837, 3835, 3834, 54, 3832, 3831, 3830, 3828,
	7, 11, 13, 3827, 27, 3825, 167, 3818, 3817, 163,
	3814, 200, 3813, 3811, 98, 93, 3810, 94, 165, 3809,
	9, 28, 77, 3808, 3807, 3805, 187, 3802, 3801, 3799,
	273, 3798, 3797, 3796, 159, 3795, 3793, 3792, 626, 3791,
	3790, 3788, 3787, 3786, 3784, 64, 3783, 1, 213, 42,
	3782, 132, 137, 3780, 37, 31, 3779, 45, 114, 203,
	134, 101, 3777, 3776, 3775, 277, 197, 107, 62, 0,
	100, 217, 157, 3774, 3771, 3756, 258, 3754, 234, 201,
	232, 256, 259, 182, 3752, 3751, 59, 3750, 161, 29,
	52, 142, 345, 21, 205, 3749, 1070, 10, 185, 3748,
	208, 3746, 8, 18, 53, 150, 3739, 3738, 33, 267,
	3737, 3736, 3735, 131, 3733, 3731, 173, 82, 3730, 3729,
	3728, 3727, 39, 3726, 186, 16, 3724, 103, 3709, 244,
	3708, 246, 141, 188, 175, 158, 221, 229, 83, 81,
	3706, 1761, 155, 109, 17, 3704, 219, 3703, 170, 180,
	3702, 90, 3701, 241, 268, 210, 3700, 184, 14, 48,
	36, 30, 43, 12, 255, 202, 3699, 3697, 23, 49,
	3696, 56, 3695, 20, 3694, 3692, 38, 3690, 68, 5,
	3689, 3688, 19, 22, 3687, 35, 209, 171, 120, 97,
	67, 3684, 3683, 162, 135, 3682, 133, 154, 151, 3680,
	80, 3679, 3677, 3670, 3668, 771, 252, 3667, 3665, 3664,
	3663, 3661, 3660, 3659, 3655, 215, 3654, 108, 44, 3653,
	3651, 3650, 3649, 85, 148, 3648, 3647, 3645, 3644, 32,
	136, 3642, 15, 3641, 26, 24, 34, 3639, 106, 3638,
	3, 194, 3636, 3635, 4, 3630, 3629, 2, 3626, 3624,
	125, 3620, 95, 25, 166, 111, 3617, 3616, 92, 212,
	146, 3615, 3614, 102, 242, 204, 3613, 60, 238, 254,
	3611, 206, 3610, 3609, 3607, 3606, 3605, 1229, 3603, 3602,
	236, 69, 89, 3601, 218, 117, 3600, 3597, 91, 164,
	119, 116, 57, 86, 3596, 115, 207, 3595, 196, 3589,
	260, 3587, 3586, 113, 3583, 3581, 3579, 3577, 191, 3576,
	3575, 195, 223, 3574, 3573, 265, 3572, 3571, 3569, 3567,
	3556, 3554, 3548, 3547, 3546, 3542, 230, 339, 3510,
}

//line mysql_sql.y:12806
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 611, 614, 614, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 350, 350, 351, 351, 130, 346, 346, 345, 345,
	131, 132, 133, 590, 590, 134, 135, 165, 589, 589,
	589, 589, 167, 167, 167, 167, 167, 466, 129, 129,
	129, 129, 129, 171, 171, 171, 171, 171, 127, 596,
	596, 596, 597, 597, 124, 154, 153, 156, 156, 155,
	155, 152, 152, 148, 151, 151, 150, 150, 149, 144,
	146, 146, 145, 147, 147, 125, 113, 126, 539, 539,
	538, 538, 537, 537, 491, 491, 492, 492, 337, 337,
	337, 536, 536, 536, 535, 535, 534, 534, 533, 533,
	531, 531, 532, 530, 529, 529, 529, 527, 527, 527,
	523, 523, 525, 524, 524, 526, 518, 518, 521, 521,
	519, 519, 519, 519, 522, 517, 517, 517, 516, 516,
	112, 112, 112, 433, 433, 111, 111, 447, 447, 447,
	447, 447, 445, 445, 445, 445, 445, 445, 444, 444,
	443, 443, 448, 448, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 100, 100, 100, 100, 100,
	100, 100, 107, 105, 105, 105, 106, 602, 602, 601,
	601, 603, 603, 603, 603, 604, 604, 103, 103, 103,
	104, 442, 442, 442, 101, 102, 102, 432, 432, 437,
	437, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 441, 441, 441, 439, 439, 438,
	438, 440, 440, 91, 91, 91, 91, 91, 91, 95,
	96, 97, 97, 97, 97, 94, 93, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 92, 92, 92, 92,
	92, 92, 86, 86, 86, 86, 86, 85, 85, 87,
	87, 429, 429, 428, 108, 108, 109, 599, 599, 598,
	600, 600, 600, 600, 110, 116, 116, 116, 116, 116,
	116, 116, 116, 115, 115, 118, 118, 117, 119, 99,
	99, 99, 99, 99, 99, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 564, 564, 564, 564, 565, 565, 364, 365, 615,
	367, 363, 363, 363, 560, 560, 561, 562, 563, 563,
	563, 114, 14, 221, 221, 465, 465, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 13, 84, 89,
	89, 90, 300, 300, 301, 295, 295, 302, 302, 170,
	303, 303, 303, 308, 308, 309, 309, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 280,
	280, 280, 275, 275, 275, 275, 276, 276, 277, 277,
	278, 278, 278, 278, 279, 279, 356, 356, 304, 304,
	304, 306, 306, 305, 299, 297, 297, 297, 297, 297,
	297, 297, 298, 298, 298, 298, 307, 307, 82, 88,
	88, 88, 88, 577, 577, 83, 83, 588, 588, 495,
	495, 378, 378, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 500,
	501, 374, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 79,
	80, 81, 54, 57, 58, 169, 53, 53, 53, 418,
	418, 52, 616, 616, 349, 349, 67, 66, 56, 68,
	69, 70, 71, 72, 73, 51, 65, 65, 65, 65,
	65, 65, 65, 65, 76, 512, 512, 618, 618, 618,
	74, 75, 494, 494, 494, 64, 63, 62, 61, 60,
	60, 50, 50, 49, 49, 55, 160, 59, 161, 161,
	371, 371, 371, 373, 373, 369, 617, 617, 461, 461,
	372, 372, 48, 48, 48, 48, 77, 370, 370, 348,
	368, 368, 368, 12, 12, 10, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 26, 27, 29, 426, 426, 423, 28,
	20, 19, 19, 23, 22, 18, 18, 21, 24, 25,
	25, 9, 9, 9, 9, 15, 15, 16, 193, 193,
	247, 247, 571, 571, 567, 567, 568, 568, 568, 569,
	569, 570, 570, 120, 506, 506, 506, 506, 506, 506,
	8, 8, 216, 216, 505, 505, 505, 505, 505, 505,
	430, 430, 430, 549, 549, 549, 550, 215, 215, 210,
	210, 507, 507, 395, 551, 551, 515, 515, 514, 514,
	513, 513, 213, 213, 214, 214, 196, 196, 139, 139,
	520, 520, 520, 520, 528, 528, 490, 490, 285, 285,
	339, 339, 340, 340, 183, 183, 184, 184, 184, 184,
	184, 184, 605, 605, 606, 607, 608, 608, 609, 609,
	609, 610, 610, 610, 610, 610, 557, 557, 559, 559,
	558, 212, 212, 208, 208, 209, 209, 209, 207, 207,
	206, 205, 205, 204, 202, 202, 202, 203, 203, 203,
	220, 220, 186, 186, 186, 185, 185, 185, 185, 185,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 187, 190, 190, 191, 191, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 317, 317, 318,
	318, 318, 318, 318, 137, 137, 499, 499, 316, 316,
	188, 188, 189, 189, 189, 189, 315, 315, 314, 201,
	201, 200, 199, 199, 199, 194, 194, 194, 194, 194,
	195, 326, 326, 325, 325, 324, 324, 324, 324, 327,
	123, 136, 136, 138, 219, 219, 323, 322, 322, 322,
	322, 218, 218, 217, 217, 211, 211, 198, 198, 198,
	198, 321, 197, 319, 595, 595, 594, 594, 593, 591,
	591, 591, 592, 592, 592, 592, 541, 541, 541, 541,
	541, 357, 357, 357, 362, 362, 360, 360, 360, 360,
	360, 366, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 39, 230, 231, 40, 232, 232,
	233, 233, 234, 234, 235, 236, 237, 237, 237, 237,
	38, 222, 222, 223, 223, 224, 224, 225, 226, 226,
	226, 229, 227, 228, 228, 613, 613, 612, 37, 37,
	30, 174, 174, 175, 175, 175, 177, 177, 281, 281,
	281, 176, 176, 178, 178, 178, 572, 574, 574, 576,
	575, 575, 575, 578, 578, 578, 578, 578, 579, 579,
	579, 579, 580, 580, 31, 157, 157, 181, 181, 162,
	583, 583, 583, 582, 582, 584, 584, 585, 585, 343,
	343, 344, 344, 172, 173, 173, 164, 159, 180, 180,
	180, 180, 180, 182, 182, 249, 249, 158, 163, 166,
	168, 573, 581, 581, 581, 427, 427, 424, 425, 425,
	422, 421, 421, 421, 587, 587, 586, 586, 586, 358,
	358, 32, 417, 417, 419, 420, 420, 420, 411, 411,
	411, 411, 36, 415, 415, 416, 416, 416, 416, 416,
	416, 416, 412, 412, 414, 414, 410, 410, 410, 410,
	410, 410, 410, 35, 179, 179, 409, 409, 406, 406,
	404, 404, 405, 405, 403, 403, 403, 407, 407, 43,
	78, 44, 45, 46, 42, 408, 408, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 141, 140, 140,
	140, 140, 140, 143, 143, 342, 342, 341, 341, 142,
	282, 282, 41, 260, 260, 482, 482, 477, 477, 477,
	477, 477, 497, 497, 497, 478, 478, 478, 479, 479,
	479, 481, 481, 481, 480, 480, 480, 480, 480, 496,
	496, 498, 498, 498, 449, 449, 450, 450, 450, 453,
	453, 469, 469, 470, 470, 468, 468, 475, 475, 474,
	474, 473, 473, 472, 472, 471, 471, 471, 471, 464,
	464, 463, 463, 451, 451, 451, 451, 451, 452, 452,
	452, 462, 462, 467, 467, 313, 313, 312, 312, 268,
	268, 269, 269, 311, 311, 266, 266, 267, 267, 267,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 547, 547, 548, 271,
	271, 283, 283, 283, 283, 283, 283, 270, 270, 272,
	272, 248, 248, 246, 246, 238, 238, 238, 238, 238,
	238, 239, 239, 240, 240, 241, 241, 241, 245, 245,
	244, 244, 244, 244, 242, 242, 243, 243, 243, 243,
	243, 243, 435, 435, 544, 544, 545, 545, 540, 540,
	540, 543, 543, 543, 543, 543, 543, 543, 546, 546,
	546, 542, 542, 250, 336, 336, 336, 359, 359, 359,
	359, 361, 335, 335, 335, 265, 265, 264, 264, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 434, 434, 375, 375, 376, 376, 294, 293, 293,
	293, 293, 293, 291, 292, 290, 290, 290, 290, 290,
	287, 287, 286, 286, 286, 288, 288, 288, 288, 288,
	413, 413, 284, 284, 274, 274, 274, 273, 273, 273,
	476, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 289, 333, 333, 333, 334, 334, 334, 334, 334,
	334, 334, 334, 385, 385, 391, 391, 556, 556, 555,
	251, 251, 251, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 261, 261, 261, 458, 458, 458, 458, 459,
	459, 459, 459, 460, 460, 460, 456, 456, 457, 457,
	396, 397, 397, 503, 503, 504, 504, 454, 454, 455,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 511, 511, 511, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 566, 566, 566, 552, 552, 552, 553, 553,
	553, 553, 553, 553, 553, 553, 553, 553, 553, 553,
	554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
	554, 554, 554, 554, 554, 554, 554, 331, 331, 331,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 398, 398,
	399, 399, 508, 508, 508, 508, 508, 508, 509, 509,
	510, 510, 510, 510, 502, 502, 502, 502, 502, 502,
	502, 502, 502, 502, 502, 502, 502, 502, 502, 502,
	502, 502, 502, 502, 502, 502, 502, 502, 502, 502,
	502, 502, 502, 502, 383, 328, 328, 328, 400, 392,
	392, 393, 393, 394, 394, 386, 386, 386, 386, 386,
	386, 387, 387, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 388, 388, 390, 390, 402,
	402, 402, 401, 401, 401, 401, 401, 401, 401, 263,
	263, 263, 263, 380, 380, 380, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 253, 253,
	253, 253, 257, 257, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 258, 258,
	258, 258, 258, 256, 256, 256, 256, 256, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 121, 122, 122,
	255, 338, 338, 483, 483, 486, 486, 484, 484, 485,
	487, 487, 487, 488, 488, 488, 489, 489, 489, 493,
	493, 347, 347, 347, 355, 355, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	2, 3, 7, 9, 10, 10, 12, 1, 5, 6,
	8, 10, 9, 5, 7, 9, 8, 6, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 11, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 3,
	1, 1, 1, 1, 0, 3, 3, 0, 3, 3,
	0, 1, 3, 0, 1, 3, 0, 2, 1, 2,
	3, 4, 3, 3, 1, 0, 1, 1, 0, 1,
	8, 5, 7, 0, 3, 8, 5, 1, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 4, 1, 3, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 2, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 1, 1, 2, 2,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 3, 4, 4, 5, 1, 3, 3,
	1, 2, 2, 2, 1, 2, 2, 3, 4, 4,
	6, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	3, 3, 4, 5, 4, 2, 2, 0, 1, 4,
	2, 4, 1, 5, 3, 2, 1, 2, 2, 4,
	4, 5, 2, 1, 3, 4, 4, 1, 2, 9,
	7, 1, 3, 3, 1, 1, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 3, 4, 4, 5, 3, 4, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 1, 1, 1,
	1, 6, 4, 1, 1, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 10, 7, 4,
	4, 3, 1, 3, 3, 1, 3, 1, 6, 7,
	3, 3, 3, 1, 1, 1, 3, 2, 4, 5,
	5, 6, 5, 5, 3, 2, 2, 1, 3, 4,
	3, 7, 5, 8, 2, 2, 1, 3, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	2, 1, 3, 2, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 6, 3, 3, 1, 1, 7, 7,
	7, 8, 8, 0, 4, 7, 6, 0, 3, 0,
	2, 0, 1, 1, 1, 1, 4, 2, 2, 3,
	3, 4, 5, 3, 4, 4, 2, 2, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 4, 3, 3, 3, 2, 5, 5, 0,
	2, 7, 0, 1, 0, 1, 5, 5, 3, 3,
	2, 4, 4, 4, 4, 4, 1, 1, 1, 3,
	3, 1, 1, 1, 6, 0, 1, 1, 1, 1,
	5, 5, 0, 1, 1, 3, 3, 3, 4, 7,
	7, 5, 4, 7, 8, 3, 3, 2, 3, 4,
	0, 2, 2, 0, 2, 2, 1, 1, 1, 1,
	0, 1, 5, 5, 6, 4, 3, 1, 3, 1,
	1, 3, 5, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 3, 1, 4,
	6, 6, 4, 4, 4, 4, 4, 3, 6, 3,
	5, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	5, 5, 1, 3, 2, 1, 5, 4, 4, 2,
	0, 5, 4, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 6, 4, 5, 7,
	4, 5, 0, 1, 3, 8, 0, 6, 0, 4,
	6, 1, 1, 1, 1, 1, 2, 3, 1, 3,
	6, 0, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 3, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 7, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	4, 7, 6, 6, 3, 5, 0, 2, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 1, 4, 4, 4, 3, 4,
	3, 2, 2, 2, 2, 2, 3, 2, 3, 2,
	4, 1, 3, 4, 0, 2, 1, 1, 2, 2,
	2, 0, 1, 2, 4, 1, 3, 1, 3, 2,
	3, 1, 4, 3, 0, 1, 1, 2, 5, 2,
	2, 2, 0, 2, 3, 3, 0, 1, 3, 1,
	3, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 3,
	0, 1, 1, 3, 1, 3, 0, 1, 1, 1,
	14, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 0, 1, 2, 9, 9,
	7, 1, 2, 3, 3, 3, 0, 4, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 4,
	1, 1, 1, 3, 3, 4, 3, 3, 0, 1,
	1, 1, 0, 2, 7, 8, 10, 2, 2, 8,
	0, 3, 3, 0, 3, 0, 3, 0, 5, 1,
	3, 0, 3, 3, 0, 2, 9, 8, 0, 2,
	2, 3, 3, 0, 2, 0, 2, 4, 4, 4,
	4, 1, 0, 2, 2, 1, 3, 2, 1, 3,
	2, 1, 3, 2, 0, 1, 3, 4, 3, 1,
	1, 4, 1, 3, 1, 1, 1, 1, 0, 1,
	1, 1, 11, 0, 2, 3, 3, 2, 2, 3,
	1, 1, 1, 3, 3, 4, 0, 2, 2, 2,
	2, 2, 2, 6, 0, 4, 1, 1, 0, 3,
	0, 1, 1, 2, 4, 4, 4, 0, 1, 8,
	2, 4, 4, 4, 9, 0, 2, 11, 9, 11,
	8, 6, 9, 7, 10, 7, 6, 2, 2, 9,
	4, 5, 3, 0, 4, 1, 3, 0, 3, 6,
	0, 2, 10, 0, 2, 0, 2, 0, 3, 2,
	4, 3, 0, 2, 1, 0, 2, 3, 0, 2,
	3, 0, 2, 1, 0, 3, 2, 4, 3, 0,
	1, 0, 1, 1, 0, 6, 0, 3, 5, 0,
	4, 0, 3, 1, 3, 4, 5, 0, 3, 1,
	3, 2, 3, 1, 2, 0, 4, 6, 5, 0,
	2, 0, 2, 4, 5, 4, 5, 1, 5, 6,
	5, 0, 3, 0, 1, 1, 3, 3, 3, 0,
	4, 1, 3, 3, 3, 0, 1, 1, 3, 2,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 5, 4, 5, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 5, 5, 5, 5,
	6, 0, 1, 1, 3, 1, 1, 1, 1, 1,
	7, 9, 7, 9, 2, 1, 7, 9, 7, 9,
	8, 5, 0, 1, 0, 1, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 3, 3, 2,
	2, 1, 5, 6, 4, 1, 1, 1, 5, 4,
	1, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 2, 2, 0, 4, 7, 3, 3,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 2,
	2, 2, 2, 4, 1, 1, 2, 5, 6, 8,
	6, 6, 6, 1, 1, 1, 1, 1, 1, 3,
	9, 1, 4, 4, 4, 7, 9, 7, 7, 7,
	9, 7, 7, 0, 2, 0, 1, 1, 2, 4,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 5, 0, 1,
	3, 0, 1, 0, 2, 0, 2, 0, 1, 6,
	8, 8, 6, 6, 5, 5, 5, 6, 6, 6,
	6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 1, 1, 1, 4, 4, 6, 8,
	6, 4, 5, 4, 4, 4, 3, 4, 6, 6,
	7, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 8,
	4, 2, 3, 2, 4, 2, 2, 4, 6, 2,
	2, 4, 6, 4, 2, 4, 4, 4, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 3, 0,
	1, 1, 3, 1, 3, 3, 3, 3, 3, 2,
	1, 1, 1, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 1, 3, 4, 4, 5, 4, 5,
	3, 4, 5, 6, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -611, -614, -2, -5, 632, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -183, -127, -128,
	-129, -171, -132, -134, -135, 622, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 555, 628, 458, 14, 507, -15, -16, -557, -17,
	267, -363, -364, -365, -367, -615, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -131,
	-79, -80, -81, -83, -82, -88, -84, -89, -159, -164,
	-13, -170, -90, 241, -87, 77, -101, -102, -103, -104,
	-105, -106, -107, -109, -110, 382, 388, 445, 621, 62,
	-184, -186, 649, 650, 653, 542, 545, 163, 164, 166,
	167, 171, 174, -34, -35, -36, -37, -38, -39, -41,
	-40, -42, -43, -44, -45, -46, 237, 16, 550, -18,
	-21, -19, -22, -20, -28, -29, -27, -24, -26, -158,
	-25, -163, -23, -166, -168, -133, 262, 261, 39, 328,
	329, 330, 386, 260, 238, 240, 15, 32, 43, 361,
	-185, 86, 543, 239, -187, 13, 655, -6, -3, -2,
	-144, -148, -152, -155, -156, -153, -154, -4, -122, 121,
	252, 623, -359, 378, 624, 626, 625, 89, 97, -352,
	-354, 458, 267, 382, 388, 621, 650, 653, 542, 545,
	557, 558, 559, 560, 561, 562, 563, 564, 566, 567,
	568, 569, 570, 571, 572, 582, 583, 573, 574, 575,
	576, 577, 578, 579, 580, 584, 585, 586, 587, 588,
	589, 590, 591, 592, 593, 594, 595, 596, 597, 510,
	607, 608, 609, 610, 538, 565, 601, 602, 603, 604,
	359, 360, 547, 279, 303, 413, 309, 316, 163, 183,
	177, 206, 197, 543, 172, 283, 321, 284, 96, 166,
	493, 111, 470, 442, 169, 298, 300, 302, 539, 540,
	372, 305, 537, 304, 306, 308, 541, 285, 362, 193,
	188, 297, 281, 186, 286, 41, 287, 211, 288, 289,
	552, 466, 358, 472, 313, 53, 440, 187, 467, 301,
	469, 215, 219, 484, 485, 181, 182, 474, 487, 210,
	213, 214, 259, 355, 356, 44, 549, 271, 488, 217,
	645, 209, 204, 496, 317, 315, 208, 180, 203, 282,
	66, 221, 220, 222, 436, 437, 438, 439, 290, 291,
	376, 483, 200, 189, 363, 173, 23, 491, 266, 471,
	389, 292, 310, 318, 216, 218, 273, 278, 333, 551,
	444, 277, 314, 489, 185, 270, 299, 265, 492, 646,
	174, 391, 293, 167, 307, 486, 648, 495, 65, 404,
	179, 170, 639, 256, 164, 275, 280, 647, 294, 295,
	296, 536, 320, 319, 311, 171, 544, 201, 272, 207,
	191, 178, 202, 165, 274, 494, 405, 619, 361, 423,
	199, 196, 276, 249, 490, 473, 168, 427, 406, 194,
	322, 614, 615, 616, 377, 354, 323, 324, 192, 263,
	464, 465, 327, 433, 345, 407, 443, 414, 408, 228,
	229, 331, 476, 478, 212, 617, 334, 335, 336, 468,
	337, 338, 339, 340, 381, 57, 59, 98, 101, 100,
	651, 652, 64, 30, 367, 370, 402, 409, 347, 620,
	548, 344, 348, 349, 371, 26, 425, 393, 429, 428,
	49, 50, 51, 54, 55, 56, 58, 60, 61, 52,
	535, 386, 399, 497, 46, 48, 396, 28, 373, 424,
	446, 343, 426, 457, 47, 455, 456, 477, 27, 375,
	374, 63, 45, 432, 434, 435, 325, 341, 384, 629,
	498, 379, 395, 398, 380, 346, 369, 400, 68, 67,
	392, 630, 387, 385, 342, 553, 554, 350, 581, 364,
	441, 532, 531, 530, 529, 528, 527, 526, 525, 328,
	329, 330, 410, 411, 412, 422, 415, 416, 417, 418,
	419, 420, 421, 460, 461, 631, 479, 481, 482, 480,
	244, 654, 365, 366, 247, 633, 634, 99, 635, 637,
	636, 29, 638, 644, 641, 642, 643, 556, 232, -440,
	-438, -359, 543, 621, 388, 542, 545, 382, 361, 650,
	653, 386, 267, 328, 329, 330, 458, 359, -232, -359,
	654, -196, 251, 40, -246, -359, -196, -87, -16, -15,
	-185, -186, -246, 246, -368, 24, 440, -99, 441, 241,
	242, 86, 78, -359, -9, -113, -8, -120, -85, -183,
	445, -366, -359, 328, 328, -366, 246, -361, 277, 421,
	-359, -495, 252, -444, -417, 278, -443, -419, -446, -420,
	33, 237, 239, 238, 555, 274, 16, 386, 248, 14,
	13, 387, 260, 26, 27, 29, 15, 388, 390, 30,
	391, 394, 395, 396, 43, 399, 400, 267, 89, 97,
	92, 285, -231, -359, -394, -386, 118, -389, -381, -382,
	-384, -337, -531, -379, 86, 145, 146, 153, 119, 656,
	-383, -476, 37, 121, 561, 565, 601, 508, -329, -330,
	-331, -332, -333, -334, 546, -359, -532, -530, 92, 102,
	104, 108, 109, 107, 105, 157, 190, 106, 93, 158,
	-186, 89, -552, 571, -353, 594, 607, 608, 609, 610,
	593, 62, -502, -510, 245, -508, 156, 195, 263, 191,
	14, 151, 433, 192, 602, 603, 604, 568, 590, 510,
	572, 582, 597, 563, 564, 566, 558, 559, 560, 562,
	573, 575, 589, -511, 585, 595, 596, 581, 605, 606,
	641, 598, 599, 600, 637, 91, 90, 588, 587, 574,
	569, 570, 576, 557, 567, 577, 578, 586, 591, 592,
	370, 111, 371, 372, 500, 362, 81, 373, 252, 440,
	71, 374, 375, 376, 377, 378, 507, 379, 72, 380,
	369, 267, 423, 381, 194, 212, 512, 511, 513, 504,
	501, 499, 502, 503, 505, 506, 579, 580, 584, -136,
	-138, 612, -605, -320, -606, 6, 7, 8, 9, -607,
	158, -596, 442, 551, 92, 321, 359, 17, 500, 640,
	541, 640, 541, 168, 165, -431, 168, 117, 174, 173,
	250, 168, -431, -359, 171, 640, 170, 639, 331, 273,
	-408, -174, 359, 423, 337, 98, 277, -411, -409, 539,
	-496, 325, 321, 297, 247, 114, -175, 257, 256, 112,
	500, 245, 397, 316, 57, 59, -567, -568, 234, 235,
	236, -559, 533, -558, -359, 640, 645, 372, 100, 101,
	639, 28, 246, 383, 273, 478, 476, 477, 479, 480,
	481, 482, -65, -512, -494, 473, 472, -372, 465, 471,
	463, 475, 466, 360, 339, 555, 338, 237, 633, 540,
	534, -347, 407, 443, 497, 498, 384, 444, 484, 486,
	467, 111, 198, 195, 247, 249, 246, 639, 359, 500,
	423, 98, 337, 246, -567, 645, 165, 484, 486, 442,
	277, 421, 42, -437, 433, -436, -438, 485, 496, 90,
	91, 483, -347, 111, 464, 464, -605, -320, -184, -186,
	-123, -557, 541, 640, 247, 359, 423, 277, 248, 246,
	536, 539, 249, 500, 245, 328, 383, 273, 337, 98,
	170, 639, -190, -191, -192, 230, 231, 232, 70, 235,
	233, 67, 33, 34, 35, -1, 125, 655, -386, -386,
	-6, 658, -6, -386, -359, -359, 160, -253, -257, -254,
	-256, -255, -259, -258, 195, 196, 156, 199, 205, 201,
	202, 203, 204, 206, 207, 208, 209, 210, 213, 214,
	211, 32, 212, 263, 191, 192, 193, 194, 215, 177,
	197, 548, 223, 178, 224, 179, 225, 180, 226, 181,
	182, 227, 183, 186, 187, 188, 189, 185, 159, -221,
	92, 33, 86, 159, 92, -213, 269, -196, -246, -238,
	159, 656, -213, -605, -206, -207, 11, -246, -335, -359,
	442, 128, -99, 78, -99, 441, 78, -99, 441, 241,
	-560, -561, -562, -564, 241, 441, 440, 242, -118, 159,
	285, 17, -366, -366, 84, -246, -419, 277, -444, -417,
	37, 83, 160, 250, 160, 83, 86, 384, 359, 423,
	385, 500, 246, 397, 249, 277, 398, 359, 423, 246,
	249, 500, 277, 359, 246, 249, 423, 277, 398, 359,
	463, 464, 249, 28, 389, 392, 393, 464, -516, 496,
	160, 117, 114, 115, 116, -386, 135, -401, 128, 129,
	130, 131, 132, 133, 134, 142, 141, 152, 145, 146,
	147, 148, 149, 150, 151, 143, 144, 138, 118, 136,
	140, 137, 120, 155, -186, -386, -394, 62, -384, -384,
	-384, -384, -359, -476, -391, -386, 86, 86, 86, 86,
	86, 159, 105, 92, -386, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, -509, 86, 86,
	-398, -399, 86, 86, -379, -335, 86, 92, 92, 86,
	86, 86, 92, 86, 86, 86, -399, -399, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, -207, 160, -206, 86, -206, -207,
	-187, -186, 33, 34, 33, 34, 33, 34, 33, 34,
	-608, 630, 86, 102, 651, 228, 17, -359, 639, -359,
	-590, 33, 544, 544, 544, 544, 489, 550, 172, 173,
	174, -359, 171, 250, -359, -406, 252, -406, -406, -230,
	-359, -232, 383, 249, 536, 249, -175, -406, -406, -406,
	-406, -406, 248, -406, 24, 246, 246, 246, 246, -406,
	507, 128, 128, 60, -569, 176, 160, -559, -212, 86,
	-590, 646, 647, 648, -371, 136, 140, -371, -316, 18,
	-316, 24, 275, 275, 275, -371, 315, -616, -617, 17,
	138, -369, -617, -369, -369, -371, -618, 248, 474, 44,
	276, 275, -208, -209, 22, -208, 468, 464, -461, 469,
	470, -373, -617, -372, -371, -371, -372, -371, -371, -371,
	33, 246, 249, 500, 337, 634, -616, -616, 32, 32,
	-495, -495, -246, -495, -495, 534, -348, -359, -495, -495,
	-495, -300, -301, -246, -570, 251, 648, -602, -601, 487,
	-604, 489, 165, -438, 165, -438, 89, -419, 277, 277,
	160, 128, 24, -439, 128, 139, -438, -438, -439, -439,
	-270, 42, -358, 156, -359, 92, -270, 42, -599, -598,
	-246, -207, -187, -186, 87, 87, 87, 544, -590, -495,
	-495, -495, -495, -495, -496, -495, -495, -495, -495, -495,
	-366, -222, -359, -232, 252, -495, -495, -495, -495, -188,
	-189, 147, -386, -359, -192, -3, -146, -145, 122, 123,
	125, 624, 378, 623, 627, 621, -438, 42, -489, 405,
	404, -483, -485, 86, -484, 86, -484, -484, -484, -484,
	-484, 86, 86, -486, 86, -486, -486, -483, -487, 86,
	-487, -488, 86, -488, -487, -359, -465, 550, -392, -394,
	-359, 40, -505, 62, -183, 86, 32, 86, -213, -359,
	192, 170, 638, 36, -506, 62, -183, 86, 32, -207,
	-139, 40, -209, 21, 159, 102, 92, -118, -99, 78,
	-118, -99, -99, 87, 160, -563, 108, 109, -565, 210,
	201, -359, -116, 92, -7, -8, -9, -10, -47, -85,
	-82, -183, 238, 542, 545, -533, -531, 86, 33, 432,
	83, 17, -445, 246, 500, 383, 273, 249, 359, -443,
	-426, -423, -421, -358, -419, -422, -421, -448, -335, 464,
	-140, 447, 446, 327, -386, -386, -386, -386, -386, 107,
	118, 354, 108, 109, -381, -402, 33, 323, 324, -382,
	-382, -382, -382, -382, -382, -382, -382, -382, -382, -382,
	-382, -390, -400, -476, 86, 138, 136, 140, 137, 120,
	-384, -384, -382, -382, -272, -358, 156, 87, 160, -386,
	-556, -555, 122, -386, -386, -386, -386, -412, -414, -335,
	86, -359, -553, -554, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 374, 369, 375, 373, 362,
	381, 376, 377, 194, 531, 532, 525, 526, 527, 528,
	529, 530, -392, -392, -386, -553, -392, -328, 34, 33,
	-394, -394, -394, 87, -386, -566, 352, 351, 353, -210,
	-359, -392, 87, 87, 87, 102, -394, -394, -392, -382,
	-392, -392, -392, -392, -554, -328, -328, -328, -328, 147,
	-394, -394, -328, -328, -328, -328, 147, -328, -328, -328,
	-328, -328, -328, -328, -328, -328, -328, -328, 87, 87,
	87, 147, -394, -208, -138, -514, -513, -386, 42, -139,
	-209, -609, 631, 86, -335, -597, 92, 92, 656, 170,
	639, 17, 500, -359, 17, 246, -359, 102, -359, 102,
	490, 491, 169, 173, 172, -359, 171, -359, -359, 118,
	-359, -359, 36, 86, -222, -406, -406, -406, -574, -359,
	93, -427, -424, -421, -359, -359, -417, -359, -348, -246,
	-406, -406, -406, -406, -246, -281, 54, 55, 56, -421,
	-176, 57, 58, -570, -558, 36, -211, -359, -316, -384,
	-384, -386, -421, 277, -616, -371, -371, -349, -348, -373,
	-368, -373, -373, -316, -369, -371, -371, -386, -373, -369,
	-316, -359, 464, -316, -316, -461, -371, -370, -359, -370,
	-406, -348, -349, -349, -246, -246, -295, -302, -296, -303,
	269, 243, 367, 368, 240, 238, 11, 239, -310, 316,
	-407, 508, -276, -277, 78, 43, -279, 267, 409, 402,
	279, 283, 96, 284, 442, 285, 248, 287, 288, 289,
	304, 306, 259, 290, 291, 292, 433, 293, 164, 305,
	294, 295, 296, 385, -271, 6, 340, 550, 42, 52,
	53, 456, 455, 553, 280, -359, -574, -572, 32, -359,
	32, -427, -421, -359, -359, 160, 250, -199, -201, -198,
	-194, -195, -200, -319, -321, -197, 86, -246, -186, -359,
	-438, 160, 488, 490, 491, -602, -439, -602, -439, 250,
	33, 432, -442, 432, 33, -417, -436, 484, 486, -432,
	92, 433, -422, -441, 83, 156, -513, -439, -439, -441,
	-441, 155, 160, -600, 489, 490, 234, -208, 102, -248,
	-246, -574, -426, -417, -359, -495, -248, -248, -248, -361,
	-361, 86, 159, 37, -359, -359, -359, -359, -315, 160,
	-314, 17, -360, -359, 36, 92, 159, -147, -145, 124,
	-386, -6, 623, -386, -6, -6, -386, -6, -386, -493,
	406, 102, 102, -338, 92, -338, 102, 102, 102, 556,
	87, 92, -430, 83, -507, -395, -551, 612, -215, 87,
	-210, -549, -550, -210, -214, -359, -505, -238, 128, 128,
	128, 25, -507, -215, 87, -549, -208, 613, -139, -205,
	-204, -386, -359, 24, -118, -99, -561, 159, 359, 160,
	-211, -445, -425, -422, -447, 147, -359, -433, 160, 550,
	659, 90, 250, -587, -586, 424, 87, 160, -517, 251,
	507, 92, 656, 440, 228, 229, 107, 354, 108, 109,
	-476, -394, -390, -384, -384, -382, -382, -388, 264, -388,
	117, -386, 657, -385, -555, 124, -386, 36, 160, 36,
	160, 84, 160, 87, -483, -386, 159, 87, 87, 17,
	17, 87, -386, 87, 87, 87, 87, 17, 17, -386,
	87, 159, 87, 87, 87, 87, 84, 87, 160, 87,
	87, 87, 87, 160, -394, -394, -386, -394, 87, 87,
	87, -386, -386, -386, -394, 87, -386, -386, -386, -386,
	-386, -386, -386, -386, -386, -386, -211, -455, 459, -455,
	-455, 160, 160, 160, 87, -139, 86, 102, 160, 652,
	-342, -341, 92, -359, -359, 170, 639, -359, 92, 639,
	-359, 92, 170, 174, 174, 173, -359, 92, 37, 24,
	314, 24, -231, -233, -234, -235, -236, -237, 138, 161,
	162, 86, -246, -246, -246, -576, 410, -588, 160, 42,
	-586, 500, -172, 327, -410, 84, -179, 17, 550, -246,
	-246, -246, -246, -260, 36, 17, -193, -247, -359, 86,
	87, 160, -418, 84, -359, -349, -316, -316, -373, -316,
	-316, 160, 23, -371, -373, -373, -238, -369, -238, 159,
	-238, -348, -482, 36, -212, 160, 21, 269, -245, -356,
	-242, -244, 254, -376, -243, 257, -545, 255, 253, 112,
	258, 312, 113, 248, -356, -356, 254, -280, 250, 36,
	-356, -298, 248, 357, 312, 255, 21, 269, -297, 248,
	113, -359, 254, 258, 255, 253, -355, 128, -347, 155,
	250, 44, 385, -355, 554, 269, -355, -355, -355, -355,
	-355, -355, -355, 286, 286, -355, -355, -355, -355, -355,
	-355, -355, -355, -355, -355, -355, 165, -355, -355, -355,
	-355, -355, -355, 86, 332, 281, 282, 314, -577, 410,
	32, 365, 365, 366, -588, 361, 32, -180, 359, -301,
	-299, -370, 32, -322, -323, -324, -325, -327, -326, 69,
	73, 75, 79, 70, 71, 72, 76, 81, 74, 32,
	160, -357, -362, 36, -359, 92, -357, -186, -201, -199,
	-357, 86, -439, -601, -603, 492, 489, 495, -441, -441,
	102, 250, 86, 128, -441, -441, 42, -358, -598, 496,
	490, -139, 160, 83, -248, -223, -224, -225, -226, -253,
	-335, 196, 199, 201, 202, 203, 204, 206, 207, 208,
	209, 210, 213, 214, 211, 212, 263, 191, 192, 193,
	194, 215, 177, 197, 548, 178, 179, 180, 181, 182,
	183, 186, 187, 188, 189, 185, -359, -232, -316, -189,
	-201, -359, 92, -359, 147, 125, -6, 123, -151, -150,
	-149, 126, 621, 627, 125, 125, 125, 87, 87, 87,
	160, 87, 87, 87, 160, 87, 160, 102, -520, 469,
	41, 160, 86, 87, 160, 62, 160, 128, 87, 160,
	-386, -359, 92, -386, 192, 87, 62, -139, 92, 160,
	-202, 38, 39, 159, 442, -359, -531, 87, -447, 160,
	250, 159, 159, -423, 388, -358, -425, 21, 550, -335,
	40, -342, 128, 656, -359, 87, -388, -388, 117, -384,
	-381, 87, 125, -386, 123, -251, -253, 404, 405, -386,
	-251, -252, -258, 156, 195, 263, 194, 193, 191, 404,
	405, -270, -414, 547, -202, 87, -359, -386, -386, 87,
	-386, -386, 17, -359, -270, -382, -386, -207, -207, 87,
	87, -454, -455, -454, -454, 87, 87, 87, 87, -454,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 86, 102, 104, 102, 104, -513, -610, 64, 629,
	63, 432, 107, 317, 160, 102, 92, 657, 160, 128,
	92, -359, -359, 17, 246, -359, 17, 174, 92, -589,
	321, 359, 500, 246, -466, 102, 321, 359, 500, 396,
	87, 160, -335, -223, -212, 86, -212, -579, 471, 412,
	422, -355, -378, -377, 361, 43, -500, 433, 418, 419,
	-424, 277, -348, -585, 99, 128, 83, 344, 348, 349,
	345, 346, 347, -404, -405, -403, -407, -572, 86, 86,
	-183, 36, 136, -179, 86, 86, 36, -477, 334, -253,
	-246, -193, -359, 17, 160, -571, 159, -1, -359, -417,
	-371, -316, -386, -386, -316, -371, -371, -373, -359, -238,
	-477, -253, 36, -296, 243, 239, -451, 314, 315, -452,
	-467, 317, -469, 86, -250, -335, -243, -544, -545, -406,
	-359, 113, -544, 113, 86, -250, -335, -335, -299, -335,
	-359, -359, -359, -359, -306, -305, -335, -308, 33, -309,
	-359, -359, -359, -359, 113, -359, 113, -275, 42, 49,
	50, 51, -355, -355, 198, -278, 42, 432, 434, 435,
	-308, 102, 102, 102, 102, 92, 92, 92, -355, -355,
	102, 92, -362, 92, -546, 173, 46, 47, 102, 102,
	102, 102, 42, 92, -283, 42, 297, 301, 298, 299,
	300, 92, 102, 42, 102, 42, 102, 42, -359, 86,
	-547, -548, 92, 333, -466, -579, -355, 365, -438, 128,
	128, -378, -581, 96, 413, -584, 327, -182, 500, 33,
	-216, 243, 239, -572, -429, -428, -335, -198, -198, -198,
	-198, -198, -198, 69, 80, 69, 69, 69, 74, 69,
	74, 69, -324, 69, 80, -429, -200, -212, -362, 87,
	-595, -594, -593, -591, 77, 251, 78, -392, -441, 489,
	493, 494, -425, -374, 92, -432, -220, 24, -246, -246,
	-498, 307, 308, 87, 160, -253, -318, 19, 159, 121,
	-6, -147, -149, -386, -6, -386, 623, 378, 624, 92,
	102, 102, -528, 453, 448, 450, 113, -395, -515, -514,
	62, -183, -210, -507, -550, -513, -359, 657, 657, 657,
	657, 92, 62, -183, -507, -220, -520, -204, -203, 45,
	-359, 102, 17, -422, -417, 147, 147, -359, 389, -433,
	92, 411, 92, 246, 657, 92, -342, -381, -386, 87,
	-261, 182, 181, -261, 36, 87, 87, -484, -484, -483,
	-486, -483, -261, -261, 87, 86, -202, 87, 24, 87,
	87, 87, -386, 87, 87, 160, -503, 509, -504, 583,
	-454, -454, -454, -454, -454, -454, -454, -454, -454, -454,
	-454, -454, -454, -454, -454, -454, -454, -397, -396, 269,
	454, 636, 636, 454, 636, 636, 87, 160, -553, 160,
	-350, 322, -350, -341, 92, 250, 92, 170, -359, 92,
	639, 92, -359, -359, -359, 92, 314, -359, -359, 92,
	92, -235, -253, 87, 36, -239, -240, -241, -250, -242,
	-244, 36, -580, 96, -575, 92, -359, 93, -581, 158,
	363, 42, 414, 415, 430, 358, 102, 102, 420, -573,
	-359, -181, 246, 359, -583, 53, 128, 92, -246, -403,
	-347, 155, 288, 337, -313, -312, -359, 92, -239, -183,
	-246, -239, -239, -183, -478, 336, 21, 102, 146, -213,
	84, 159, -201, -247, -359, 147, 87, -316, -238, -316,
	-316, -371, -478, -183, -463, 318, 86, -461, 86, -461,
	113, 345, -470, -468, 269, -304, 46, 48, -253, -542,
	-359, -540, -542, -359, -540, -540, -406, -386, -304, -250,
	250, 32, 239, -307, 342, 343, 348, -434, 313, 118,
	-434, 160, -202, 160, -359, -270, -270, 32, 92, 92,
	-248, 87, 160, 128, 102, 92, -580, -575, 128, -439,
	92, 92, -581, 92, 92, -585, 128, -249, 246, -348,
	160, -216, -216, -316, 160, 128, -218, -217, 83, 84,
	-219, 83, -217, -217, 69, 69, -316, -593, -592, 24,
	-545, -545, -545, 87, 87, 15, -225, 42, -317, 20,
	21, 147, 125, 123, 125, 125, -359, 87, 87, -490,
	614, -524, -526, 448, 21, 21, 15, 251, 87, -507,
	657, -507, -528, 46, 47, -417, -433, 433, -246, 160,
	657, -251, -289, 92, -386, 87, -386, 87, 92, 87,
	92, -207, 21, 87, 160, 87, 87, 87, 160, 87,
	87, -386, 87, -553, -351, 192, 92, -351, 359, -360,
	-359, 17, -359, 92, -359, -466, 314, 314, 246, 244,
	-183, 87, 160, -183, 92, -578, 424, 102, 42, 102,
	158, 416, -501, -173, 96, -248, 33, -216, -582, 96,
	128, 656, 86, -355, -355, -355, -359, 87, 160, -355,
	-355, 87, 87, 87, -268, 550, -479, 268, 102, 146,
	102, 146, 102, -357, -201, -359, -316, -571, 159, -316,
	-479, -453, 319, 102, -382, 86, -382, 86, -462, 316,
	86, 87, 160, -359, -335, -265, -264, -262, 107, 118,
	42, 402, -263, 96, 155, 302, 305, 304, 280, 303,
	-294, -375, 83, 408, 342, 343, -407, 614, 538, 253,
	112, 113, 390, -376, 86, 86, 84, 322, 86, 86,
	-542, 87, -304, -335, 42, -307, 42, 355, 313, -305,
	-359, 155, -270, 87, -548, 92, -553, -578, 92, -441,
	-583, 92, -173, -248, -572, -207, -428, -513, -386, 86,
	-386, 86, 69, 11, 19, -379, -386, -394, 641, 643,
	644, 252, -6, 624, 378, -285, 615, 92, 21, 92,
	-522, 92, -429, -490, -142, -282, -347, 285, 87, -288,
	138, 550, 87, 87, -454, -454, -457, -456, -460, 454,
	314, 462, -394, 92, 92, 87, 87, 92, -359, 170,
	92, 656, 92, -466, -466, -359, -227, -253, -177, 550,
	-268, -241, -177, 21, 550, 362, 42, 102, 42, 417,
	92, -181, 128, 108, 109, -343, -344, 92, -412, -270,
	-272, 92, -312, -379, -379, -266, -183, 36, -267, -310,
	-407, 550, -141, -140, -266, 550, 86, -480, 164, 102,
	146, 102, 102, -316, -316, -480, -469, 21, 87, -448,
	87, -448, 86, 128, -382, -468, -471, 62, -262, 107,
	-382, 92, -272, -273, 42, 301, 297, 128, 128, -274,
	42, 281, 282, -284, 86, 312, 15, 198, 86, 113,
	113, -246, -412, -412, -543, 344, 345, 346, 350, 348,
	349, 347, -543, -412, -412, 86, -435, -434, -382, -355,
	-355, 155, -582, -208, -211, -541, -359, 253, 21, 21,
	-499, 550, 642, 86, 86, -359, -359, -339, 616, 102,
	92, 450, -285, -491, 617, -518, -461, -270, 128, 87,
	76, 548, 551, 87, -459, 120, 416, 420, -380, -383,
	102, 104, 190, 158, 87, 87, -359, -346, -345, 92,
	92, 92, 314, 549, -178, 61, 496, 92, 93, 411,
	92, 93, 362, -173, 92, 657, 160, 128, 87, -449,
	269, -183, 160, -310, -347, -142, -449, -269, -311, -359,
	92, -497, 173, 335, 550, 102, 146, 102, -207, -481,
	173, 335, -452, 87, 87, 87, -448, 102, 87, -475,
	-472, 86, -310, 271, 138, 92, 92, 102, 86, -508,
	32, 92, -413, 86, 87, 87, 87, 87, -412, 102,
	-270, -355, 87, 87, 160, 644, 86, -394, -394, 86,
	21, -339, -492, 618, 92, -527, 453, -521, -519, 448,
	449, 450, 451, 92, 549, 66, 552, -458, -459, 420,
	-380, -383, 612, 460, 460, 460, 657, 160, 128, -466,
	-229, -359, 312, 433, -344, 92, -415, -450, 321, 21,
	-310, -355, -450, 87, 160, -355, -355, 335, 102, 146,
	102, -208, 335, -464, 320, 87, -475, -310, -474, -473,
	319, 272, 86, 87, -386, -398, -355, 87, -287, -286,
	546, -412, -415, 84, -415, 84, -415, 84, -415, 84,
	87, -270, -359, 253, -137, 86, 87, 87, -340, -359,
	-522, 92, -529, 251, -525, -526, 452, -519, 21, 450,
	21, 21, -143, 160, 66, 117, 461, 461, 461, -345,
	92, 92, -228, 36, 455, 389, -416, 259, 355, 356,
	96, 550, 342, 343, 21, -451, -270, -311, -379, -379,
	102, 102, 87, 160, -359, 268, 86, -393, -387, -386,
	268, 87, -359, -293, -291, -292, 83, 467, 310, 311,
	87, -543, -543, -543, -543, -294, 87, 160, -392, 87,
	160, -536, 86, 102, -524, -523, -525, 21, -522, 21,
	-522, -522, 457, 550, -458, 92, -355, -355, 92, 92,
	341, -335, 86, -463, -473, -472, -393, 87, 160, -434,
	-292, 83, -291, 83, 16, 15, -415, -415, -415, -415,
	86, 87, -359, -539, 32, 87, -535, -534, -336, -530,
	-359, 453, 454, 92, -522, 128, 551, -613, -612, 635,
	102, 102, -359, -448, -453, 87, -387, -290, 307, 308,
	32, 173, -290, -392, -538, -537, -337, 87, 160, 159,
	92, 552, 92, 87, -469, 107, 42, 309, 87, 160,
	128, -534, -359, -537, 42, -386, 159, -359,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 313, 314, 315, 316,
	317, 318, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 0, 0, 0, 0, 0, 711, 712, 0, 675,
	0, 0, 0, 0, 0, 0, 552, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 584, 585,
	586, 587, 588, 427, 428, 429, 430, 431, 432, 433,
	434, 435, 436, 0, 347, 343, 255, 256, 257, 258,
	259, 260, 261, 354, 355, 529, 0, 0, 0, 0,
	794, -2, 99, 0, 0, 0, 0, 336, 0, 327,
	327, 0, 0, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, -2, 724, 0, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 411, 412, 413, 407,
	408, 410, 409, -2, 0, 0, 724, 0, 0, 0,
	802, 0, 0, 0, 845, 863, 23, 0, 7, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	0, 19, 0, 19, 0, 0, 0, 1397, 1398, 1399,
	1400, 2197, 2167, -2, 1932, 1909, 2091, 2092, 1988, 2000,
	2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243,
	2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253,
	2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263,
	2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273,
	2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102,
	2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112,
	2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
	2123, -2, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132,
	2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
	2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
	2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
	2163, 2164, 2165, 2166, 2168, 2169, 2170, 2171, 2172, 2173,
	2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, -2,
	-2, -2, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193,
	2194, 2195, 2196, 2198, 2199, 2200, 2201, 2202, 2203, 2204,
	2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214,
	2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 0,
	311, 309, 1879, 1909, 1932, 1988, 2000, 2001, 2039, 2091,
	2092, 2124, 2167, 2183, 2184, 2185, 2197, 0, 0, 998,
	0, 772, 0, 0, 777, 1345, 772, 348, 713, 714,
	802, 828, 673, 0, 385, 0, 1923, 389, 2174, 0,
	0, 0, 0, 670, 379, 380, 381, 382, 383, 384,
	0, 0, 971, 0, 0, 375, 0, 342, 1990, 2196,
	1401, 0, 0, 0, 0, 0, 198, 1122, 200, 1124,
	204, 212, 0, 0, 0, 217, 218, 221, 222, 223,
	224, 225, 0, 229, 0, 231, 234, 0, 236, 237,
	0, 240, 241, 242, 0, 252, 253, 254, 1125, 1126,
	1127, -2, 127, 996, 1837, 1723, 0, 1730, 1743, 1754,
	1483, 1484, 1485, 1486, 0, 0, 0, 0, 0, 0,
	1494, 1495, 0, 1525, 2238, 2279, 2280, 0, 1503, 1504,
	1505, 1506, 1507, 1508, 0, 138, 150, 151, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 0, 1784, 1785, 1786, 1694,
	1470, 1397, 0, 2247, 0, 2269, 2274, 2275, 2276, 2277,
	2268, 0, 0, 1678, 0, 1668, 0, 0, -2, -2,
	0, 0, 2064, -2, 2281, 2282, 2283, 2244, 2265, 2273,
	2248, 2249, 2272, 2240, 2241, 2242, 2235, 2236, 2237, 2239,
	2251, 2253, 2264, 0, 2260, 2270, 2271, 2172, 0, 0,
	2219, 0, 0, 0, 2214, 152, 153, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1689, -2, 1691, -2, 1693, -2,
	1696, -2, -2, -2, -2, 1701, 1702, -2, 1704, -2,
	-2, -2, -2, -2, -2, -2, 1680, 1681, 1682, 1683,
	1672, 1673, 1674, 1675, 1676, 1677, -2, -2, -2, 828,
	921, 0, 828, 0, 803, 850, 853, 856, 859, 806,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 337, 338, 326, 328, 0, 332, 0,
	0, 328, 325, 319, 0, 1158, 1158, 1158, 0, 0,
	0, 0, 1158, 1158, 1158, 1158, 1158, 0, 1158, 0,
	0, 0, 0, 0, 1158, 0, 1031, 1129, 1130, 1131,
	1156, 1157, 1230, 0, 0, 0, 729, 725, 726, 727,
	728, 816, 0, 818, 821, 0, 0, 650, 650, 888,
	888, 596, 0, 0, 0, 650, 0, 610, 602, 0,
	0, 0, 650, 0, 0, 823, 823, 0, 653, 660,
	650, 650, -2, 650, 650, 647, 650, 0, 0, 1170,
	616, 617, 618, 602, 602, 621, 622, 623, 633, 634,
	661, 1861, 0, 0, 529, 529, 0, 529, 529, 0,
	529, 529, 529, 0, 731, 1948, 2034, 1930, 2006, 1889,
	1990, 2196, 0, 284, 2064, 289, 0, 1931, 1951, 0,
	0, 1969, 0, -2, 0, 364, 828, 0, 0, 802,
	0, 0, 0, 0, 529, 529, 529, 529, 529, 1229,
	529, 529, 529, 529, 529, 0, 0, 0, 529, 529,
	529, 529, 0, 864, 865, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 5, 6, 19, 0, 0,
	0, 0, 0, 0, 106, 105, 0, 1838, 1856, 1789,
	1790, 1791, 1843, 1793, 1847, 1847, 1847, 1847, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1847, 1847,
	0, 0, 1836, 1813, 1845, 1845, 1845, 1843, 1840, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1850, 1850, 1853, 1853, 1850, 0, 425,
	423, 424, 1719, 0, 0, 0, 0, 772, 776, 1343,
	0, 0, 0, 828, -2, 0, 0, 674, 386, 1402,
	0, 0, 390, 0, 391, 0, 0, 393, 0, 0,
	0, 414, 0, 417, 401, 402, 403, 404, 397, 0,
	178, 0, 377, 378, 0, 0, 344, 0, 0, 0,
	530, 0, 0, 0, 0, 0, 0, 209, 205, 213,
	216, 226, 233, 0, 245, 247, 250, 206, 214, 219,
	220, 227, 248, 207, 210, 211, 215, 249, 251, 208,
	228, 232, 246, 230, 235, 238, 239, 244, 0, 179,
	0, 0, 0, 0, 0, 1729, 0, 0, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 1723, 0, 0, 1489, 1490,
	1491, 1492, 0, 1496, 0, 1526, 0, 0, 0, 0,
	0, 0, 1783, 1787, 0, 1719, 1719, 0, 1719, 1715,
	0, 0, 0, 0, 0, 0, 1719, 1651, 0, 0,
	1653, 1669, 0, 0, 1655, 1656, 0, 1659, 1660, 1719,
	0, 1719, 1664, 1719, 1719, 1719, 1647, 1648, 0, 1715,
	1715, 1715, 1715, 0, 0, 1715, 1715, 1715, 1715, 1715,
	1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715,
	0, 0, 0, 0, 823, 0, 829, 0, -2, 0,
	847, 849, 851, 852, 854, 855, 857, 858, 860, 861,
	808, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	71, 73, 0, 0, 0, 0, 0, 0, 330, 0,
	335, 321, 2026, 0, 320, 0, 0, 0, 0, 0,
	995, 0, 0, 1158, 1158, 1158, 1032, 0, 0, 0,
	0, 0, 0, 0, 0, 1158, 1158, 1158, 1158, 0,
	1176, 0, 0, 0, 731, 730, 0, 817, 0, 0,
	70, 589, 590, 591, 888, 0, 0, 593, 594, 0,
	595, 0, 602, 650, 650, 608, 609, 604, 603, 656,
	657, 653, 0, 653, 653, 888, 0, 627, 628, 629,
	650, 650, 635, 824, 0, 636, 637, 653, 0, 658,
	659, 888, 0, 0, 888, 888, 0, 645, 646, 648,
	650, 0, 0, 1158, 0, 666, 604, 604, 1862, 1863,
	0, 0, 1167, 0, 0, 0, 0, 669, 0, 0,
	0, 441, 442, 0, 0, 732, 0, 263, 267, 0,
	270, 0, 2034, 0, 2034, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 307, 308, 0, 0, 0, 0,
	298, 301, 1337, 1338, 1119, 1120, 302, 303, 356, 357,
	0, 823, 846, 848, 842, 843, 844, 0, 72, 0,
	0, 0, 0, 0, 529, 0, 0, 0, 0, 0,
	707, 0, 1011, 709, 0, 0, 0, 0, 0, 896,
	890, 892, 966, 138, 866, 8, 123, 120, 0, 19,
	0, 0, 19, 19, 0, 19, 312, 0, 1859, 1857,
	1858, 1792, 1844, 0, 1818, 0, 1819, 1820, 1821, 1832,
	1833, 0, 0, 1814, 0, 1815, 1816, 1817, 1808, 0,
	1809, 1810, 0, 1811, 1812, 310, 422, 0, 0, 1720,
	999, 0, 750, 764, 745, 0, 753, 0, 0, 1345,
	0, 0, 0, 0, 733, 764, 735, 0, 753, 823,
	800, 0, 778, 0, 0, 387, 0, 398, 392, 0,
	399, 394, 395, 0, 0, 416, 418, 419, 420, 405,
	406, 671, 373, 374, 365, 366, 367, 368, 369, 370,
	371, 372, 0, 0, 0, 376, 148, 0, 345, 346,
	0, 0, 0, 192, 193, 194, 195, 196, 197, 199,
	183, 696, 698, 1111, 1123, 0, 1114, 0, 202, 243,
	175, 0, 0, 0, 1724, 1725, 1726, 1727, 1728, 1733,
	0, 1735, 1737, 1739, 1741, 0, 1759, -2, -2, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1744, 1757, 1758, 0, 0, 0, 0, 0, 0,
	1755, 1755, 1750, 0, 1509, 1339, 1340, 1487, 0, 0,
	1523, 1527, 0, 0, 0, 0, 0, 0, 1142, 1843,
	0, 139, 1714, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 0, 0, 1723, 0, 0, 0, 1716, 1717,
	0, 0, 0, 1606, 0, 0, 1612, 1613, 1614, 0,
	759, 0, 1679, 1652, 1670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 920, 922, 0, 768, 770, 771, 797,
	778, 804, 0, 0, 0, 98, 103, 0, 1197, 0,
	0, 0, 0, 0, 0, 0, 74, 1171, 75, 1173,
	339, 340, 0, 0, 334, 322, 2026, 324, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 1047,
	1048, 527, 1105, 0, 0, 0, 1121, 1146, 1154, 0,
	0, 0, 0, 0, 1203, 1033, 1038, 1039, 1040, 1034,
	1035, 1041, 1042, 0, 819, 0, 0, 935, 592, 651,
	652, 889, 599, 1990, 604, 888, 888, 611, 605, 612,
	655, 613, 614, 615, 653, 888, 888, 825, 650, 653,
	638, 654, 653, 1345, 642, 0, 649, 1345, 667, 1345,
	0, 665, 619, 620, 1205, 821, 439, 440, 445, 447,
	0, 496, 496, 496, 479, 496, 0, 0, 467, 1864,
	0, 0, 0, 0, 476, 1864, 0, 0, 1864, 1864,
	1864, 1864, 1864, 1864, 1864, 0, 0, 1864, 1864, 1864,
	1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864, 0, 1864,
	1864, 1864, 1864, 1864, 1322, 1864, 0, 495, 1168, 486,
	487, 488, 489, 494, 0, 0, 523, 0, 0, 1046,
	0, 527, 0, 0, 1088, 0, 0, 901, 0, 902,
	903, 904, 899, 937, 961, 961, 0, 961, 941, 1345,
	0, 0, 0, 275, 276, 264, 0, 265, 0, 0,
	278, 279, 0, 281, 282, 283, 290, 1930, 2006, 285,
	287, 0, 0, 291, 304, 305, 306, 0, 0, 296,
	297, 0, 0, 359, 360, 362, 0, 778, 1172, 693,
	1341, 694, 695, 699, 0, 0, 702, 703, 704, 705,
	706, 1013, 0, 0, 1097, 1098, 1099, 1100, 888, 0,
	897, 0, 893, 967, 0, 969, 0, 0, 121, 19,
	0, 114, 111, 0, 0, 0, 0, 0, 1839, 1788,
	1860, 0, 0, 0, 1841, 0, 0, 0, 0, 0,
	104, 780, 740, 0, 744, 761, 0, 765, 0, 0,
	757, 749, 754, 0, 0, 774, 741, 1344, 0, 0,
	0, 0, 734, 0, 0, 739, 778, 0, 801, 830,
	831, 834, 1403, 0, 400, 396, 415, 0, 529, 0,
	0, 0, 186, 1108, 0, 187, 191, 181, 0, 0,
	0, 1113, 0, 1110, 1115, 0, 201, 0, 0, 176,
	177, 1188, 1197, 0, 0, 0, 1734, 1736, 1738, 1740,
	1742, 0, 1745, 1755, 1755, 1751, 0, 1746, 0, 1748,
	0, 1724, 1493, 0, 1528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 1596, 1597, 0,
	0, 1601, 0, 1603, 1604, 1605, 1607, 0, 0, 0,
	1611, 0, 1650, 1671, 1654, 1657, 0, 1661, 0, 1663,
	1665, 1666, 1667, 0, 828, 828, 0, 0, 1567, 1567,
	1567, 0, 0, 0, 0, 1567, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 1513,
	1514, 0, 0, 0, 923, 798, 0, 0, 0, 0,
	0, 1195, 0, 88, 0, 0, 0, 0, 93, 0,
	0, 76, 341, 329, 331, 0, 323, 0, 1159, 0,
	0, 0, 0, 0, 1001, 1002, 1004, 0, 1007, 1008,
	1009, 1013, 821, 0, 821, 1058, 1864, 531, 0, 0,
	1107, 0, 1077, 0, 0, 0, -2, 0, 0, 1154,
	0, 0, 0, 1207, 0, 0, 0, 718, 722, 23,
	822, 0, 597, 0, 598, 650, 606, 607, 888, 630,
	631, 0, 0, 888, 650, 650, 641, 653, 662, 0,
	663, 1345, 1207, 0, 0, 1167, 1273, 1241, 457, 0,
	1358, 1359, 497, 0, 1365, 1374, 1158, 1435, 0, 1374,
	0, 0, 1376, 1377, 0, 0, 0, 0, 480, 481,
	0, 466, 0, 0, 0, 0, 0, 0, 465, 0,
	0, 507, 0, 0, 0, 0, 0, 1865, 1864, 1864,
	0, 474, 475, 0, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 1864, 1864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 1330, 0, 1058, 1864,
	0, 0, 0, 0, 531, 1102, 1075, 1093, 0, 443,
	444, 504, 0, 0, 0, 0, 0, 0, 0, 927,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 821, 962, 0, 964, 965, 939, -2, 0, 901,
	944, 1719, 0, 268, 269, 0, 0, 274, 292, 294,
	266, 0, 0, 0, 293, 295, 299, 300, 358, 361,
	363, 840, 0, 0, 1231, 0, 1014, 1015, 1017, 1018,
	0, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1914, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1012, 710, 879, 891,
	898, 968, 970, 139, 894, 0, 124, 19, 123, 115,
	116, 0, 19, 0, 0, 0, 0, 1849, 1848, 1834,
	0, 1835, 1846, 1851, 0, 1854, 0, 426, 784, 0,
	0, 764, 766, 0, 0, 764, 0, 0, 773, 0,
	0, 0, 0, 0, 0, 0, 764, 840, 780, 0,
	837, 835, 836, 0, 0, 672, 149, 421, 0, 0,
	0, 0, 0, 697, 0, 1112, 183, 0, 0, 203,
	0, 0, 0, 1197, 1192, 1718, 1747, 1749, 0, 1756,
	1752, 1488, 1497, 1524, 0, 0, 1530, 1542, 1542, 0,
	0, 0, 1533, 1847, 1847, 1536, 1843, 1845, 1843, 1542,
	1542, 0, 1143, 0, 1144, 834, 140, 0, 0, 1602,
	0, 0, 0, 760, 0, 0, 0, 1563, 1565, 1567,
	1567, 1574, 1568, 1575, 1576, 1567, 1567, 1567, 1567, 1581,
	1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
	1567, 1561, 0, 0, 1777, 1778, 769, 0, 0, 811,
	812, 813, 814, 815, 0, 0, 61, 61, 1197, 0,
	97, 89, 0, 0, 0, 0, 0, 333, 0, 77,
	78, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 1006, 0, 0, 0, 1351, 0, 1062, 1059, 1060,
	1061, 0, 1102, 532, 533, 534, 535, 0, 0, 0,
	1106, 0, 0, 1070, 0, 0, 0, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, -2, 1162, 0, 0, 0, 1351,
	1181, 0, 0, 1186, 1351, 1351, 0, 1215, 0, 1204,
	772, 0, -2, 0, 0, 720, 0, 0, 936, 600,
	888, 624, 826, 827, 1345, 888, 888, 650, 668, 664,
	1215, 1206, 0, 446, 496, 0, 1261, 0, 0, 1267,
	0, 1274, 450, 0, 498, 0, 1364, 1391, 1375, 1391,
	1436, 1391, 1391, 1158, 0, 498, 0, 0, 468, 0,
	0, 0, 0, 0, 464, 501, 834, 451, 453, 454,
	455, 505, 506, 508, 0, 510, 511, 470, 482, 483,
	484, 485, 0, 0, 0, 477, 490, 491, 492, 493,
	452, 1290, 1291, 1292, 1295, 1296, 1297, 1298, 0, 0,
	1301, 1302, 1303, 1304, 1305, 1388, 1389, 1390, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1331, 1332, 1333, 1334, 1335,
	1336, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 0,
	0, 1326, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 1102, 526, 0, 0, 1077, 0, 1095, 0, 1089,
	1090, 0, 0, 742, 888, 351, 0, 931, 924, 0,
	908, 0, 910, 928, 911, 929, 930, 915, 0, 917,
	0, 913, 914, 919, 912, 888, 900, 938, 963, 940,
	943, 945, 946, 952, 0, 0, 0, 0, 262, 271,
	272, 273, 280, 0, 551, 286, 796, 0, 1342, 700,
	701, 1232, 1233, 708, 0, 1019, 877, 0, 0, 119,
	122, 0, 117, 0, 0, 0, 0, 109, 107, 1842,
	0, 0, 786, 163, 0, 0, 0, 762, 0, 767,
	764, 748, 758, 747, 755, 756, 775, 1346, 1347, 1348,
	1349, 0, 764, 738, 737, 799, 784, 832, 833, 0,
	1404, 388, 0, 1109, 183, 188, 189, 190, 184, 182,
	1116, 0, 1118, 0, 1190, 0, 0, 1753, 1529, 1498,
	1531, 1543, 1544, 1532, 0, 1500, 1501, 1534, 1535, 1537,
	1538, 1539, 1540, 1541, 1502, 0, 1145, 1598, 0, 1600,
	1608, 1609, 0, 1658, 1662, 0, 0, 0, 0, 0,
	1572, 1573, 1577, 1578, 1579, 1580, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 828, 1562, 0,
	0, 0, 0, 0, 0, 0, 809, 0, 0, 0,
	63, 0, 63, 1196, 1198, 0, 966, 0, 0, 94,
	0, 0, 79, 80, 0, 82, 0, 0, 0, 994,
	997, 1003, 1005, 0, 0, 0, 1352, 1353, 1355, 1356,
	1357, 0, 1030, 0, 0, 1050, 1051, 1052, 1064, 0,
	537, 538, 0, 0, 0, 550, 546, 547, 548, 528,
	1101, 1084, 0, 0, 1073, 0, 0, 1083, 0, 1163,
	1864, 1864, 1864, 0, 0, 1275, 1864, 1864, 0, 1183,
	1185, 0, 0, 1279, 1218, 0, 0, 1209, 0, 961,
	0, 0, 888, 719, 722, 723, 820, 601, 639, 643,
	640, 888, 1218, 438, 1239, 0, 0, 0, 0, 0,
	1271, 0, 0, 1243, 0, 469, 499, 0, -2, 0,
	1392, 0, 1378, 1392, 0, 0, 1391, 0, 458, 498,
	0, 0, 0, 512, 516, 517, 0, 514, 1431, 0,
	515, 0, 503, 0, 509, 1293, 1294, 0, 1299, 1300,
	0, 1324, 0, 0, 0, 449, 518, 0, 0, 0,
	519, 520, 525, 1103, 1104, 1070, 0, 1084, 0, 1094,
	0, 1091, 1092, 828, 0, 0, 905, 932, 0, 0,
	906, 0, 907, 909, 916, 918, 350, 947, 0, 0,
	949, 950, 951, 942, 288, 841, 1016, 0, 862, 0,
	0, 895, 0, 19, 0, 0, 112, 1852, 1855, 788,
	0, 785, 164, 0, 0, 0, 0, 752, 763, 746,
	1350, 736, 786, 838, 839, 185, 180, 1117, 1200, 0,
	1191, 0, 1455, 1511, 0, 1610, 0, 1567, 1564, 1567,
	1566, 1558, 0, 1515, 0, 1517, 1518, 1519, 0, 1521,
	1522, 0, 807, 0, 59, 0, 62, 60, 0, 96,
	90, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	1036, 1279, 0, 1036, 1063, 1049, 0, 0, 539, 540,
	0, 543, 549, 1065, 0, 0, 1067, 1068, 1069, 0,
	0, 1081, 0, 0, 0, 0, 1155, 1169, 0, 0,
	0, -2, 0, -2, 1180, 0, 1224, 0, 1216, 0,
	1208, 0, 1211, 888, 888, -2, 716, 721, 0, 644,
	1224, 1241, 0, 1262, 0, 0, 0, 0, 0, 0,
	0, 1242, 0, 1255, 500, 1393, -2, 1407, 1409, 0,
	1168, 1412, 1413, 0, 0, 0, 0, 0, 0, 1462,
	1421, 0, 0, 1425, 1426, 1427, 0, 0, 1430, 0,
	1771, 1772, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 1372, 459, 460, 0, 462, 463, 1864, 1432, 502,
	456, 1864, 472, 1323, 1327, 1328, 1325, 524, 521, 522,
	1073, 1076, 1087, 1096, 743, 823, 352, 353, 933, 0,
	925, 956, 953, 0, 0, 1020, 878, 886, 2219, 2221,
	2218, 113, 118, 0, 0, 790, 0, 787, 0, 781,
	783, 174, 751, 788, 134, 166, 0, 0, 1499, 0,
	0, 0, 1599, 1649, 1570, 1571, 0, 1559, 0, 1553,
	1554, 1555, 1560, 0, 0, 810, 805, 64, 92, 0,
	95, 68, 83, 0, 0, 0, 0, 1022, 1029, 1043,
	1174, 1354, 1028, 0, 0, 536, 541, 0, 544, 545,
	1085, 1084, 0, 1071, 1072, 0, 1079, 0, 0, 1164,
	1165, 1166, 1276, 1277, 1278, 1234, 1182, 0, -2, 1287,
	0, 0, 1178, 1200, 1234, 0, 0, 1212, 0, 1219,
	0, 1217, 1210, 828, 717, 1221, 448, 1273, 1263, 0,
	1265, 0, 0, 0, 0, 1244, -2, 0, 1408, 1410,
	1411, 1414, 1415, 1416, 1467, 1468, 1469, 0, 0, 1419,
	1464, 1465, 1466, 1420, 0, 0, 0, 0, 0, 1769,
	1770, 1460, 0, 0, 1379, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1380, 0, 0, 0, 1371, 1373, 461, 0,
	0, 1864, 1086, 349, 0, 0, 957, 959, 954, 955,
	880, 0, 0, 0, 0, 108, 110, 125, 0, 789,
	165, 0, 790, 136, 0, 157, 0, 1201, 0, 1510,
	0, 0, 0, 1569, 1556, 0, 0, 0, 0, 0,
	1773, 1774, 1775, 0, 1516, 1520, 91, 0, 66, 0,
	84, 85, 0, 0, 0, 1044, 1045, 1053, 1054, 0,
	1056, 1057, 542, 1066, 1074, 1078, 1081, 0, 1133, 1236,
	0, 1184, 1167, 1289, 1864, 1187, 1236, 0, 1281, 1864,
	1864, 1202, 0, 1214, 0, 1226, 0, 1220, 823, 437,
	0, 1223, 1259, 1264, 1266, 1268, 0, 1272, 1270, 1245,
	-2, 0, 1253, 0, 0, 1417, 1418, 0, 0, 1668,
	1864, 0, 1450, 0, 1133, 1133, 1133, 1133, 0, 513,
	471, 0, 934, 948, 0, 887, 0, 0, 0, 0,
	0, 779, 126, 0, 135, 154, 0, 167, 168, 0,
	0, 0, 0, 1193, 0, 1458, 1459, 0, 1545, 0,
	0, 0, 1549, 1550, 1551, 1552, 65, 68, 0, 0,
	0, 1021, 0, 1055, 1080, 1082, 1132, 1177, 0, 1273,
	1288, 0, 1179, 1280, 0, 0, 0, 1213, 1225, 0,
	1228, 715, 1222, 1240, 0, 1269, 1246, 1254, 0, 1249,
	0, 0, 0, 1463, 0, 1424, 0, 1429, 1438, 1451,
	0, 0, 1360, 0, 1362, 0, 1366, 0, 1368, 0,
	0, 473, 958, 960, 0, 1719, 882, 883, 0, 792,
	782, 137, 141, 0, 163, 160, 0, 169, 0, 0,
	0, 0, 1189, 0, 1456, 0, 1546, 1547, 1548, 67,
	69, 86, 0, 1023, 1024, 1037, 1134, 1864, 1864, 0,
	0, 0, 1140, 1141, 0, 1261, 1293, 1282, 1283, 1284,
	1227, 1260, 1248, 0, -2, 1256, 0, 0, 1721, 1731,
	1732, 1422, 1428, 1437, 1439, 1440, 0, 1452, 1453, 1454,
	1461, 1133, 1133, 1133, 1133, 1370, 881, 0, 0, 791,
	0, 128, 0, 0, 158, 159, 161, 0, 170, 0,
	172, 173, 0, 0, 1557, 1025, 0, 0, 1137, 1138,
	0, 1237, 0, 1239, 1250, -2, 0, 1258, 0, 1423,
	1441, 0, 1442, 0, 0, 0, 1361, 1363, 1367, 1369,
	1719, 884, 793, 1199, 0, 142, 0, 144, 146, 147,
	1394, 155, 156, 162, 171, 0, 0, 1010, 1026, 0,
	1135, 1136, 1139, 0, 1241, 1257, 1722, 1443, 1445, 1446,
	0, 0, 1444, 0, 129, 130, 0, 143, 0, 0,
	1194, 1457, 1027, 1238, 1235, 1447, 1449, 1448, 885, 0,
	0, 145, 1395, 131, 132, 133, 0, 1396,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 658, 655,
	129, 128, 130, 3, 659, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 656, 141, 657, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:845
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:852
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:858
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:866
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:876
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:968
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:984
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:989
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:993
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:999
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1021
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1025
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1048
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1078
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1086
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1096
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1106
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1116
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1126
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1138
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1148
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1158
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1169
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1180
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1194
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1202
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1210
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1218
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1227
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1249
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1257
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1266
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1276
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1286
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1296
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1316
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1322
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1329
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1337
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1343
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1352
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1370
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1378
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1386
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1396
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1414
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1421
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1430
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1440
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1444
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1450
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1454
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1460
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1469
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1479
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1483
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1489
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1498
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1508
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1529
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1543
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1550
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1554
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1560
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1564
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1570
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1577
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1585
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1589
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1601
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1605
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1619
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1623
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1628
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1635
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1639
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1643
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1649
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1658
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1669
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1673
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1679
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1683
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1689
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1693
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1699
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1719
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1738
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1742
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1746
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1751
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1755
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1764
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1774
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1781
		{
			yyVAL.str = yyDollar[3].str
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1786
		{
			yyVAL.str = "\n"
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1793
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1798
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1802
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1830
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1834
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1840
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1848
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1868
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1887
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1912
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1916
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1920
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1925
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1929
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1935
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1948
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1959
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1972
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1976
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1986
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1999
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2012
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2018
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2024
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2032
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2042
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2056
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2060
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2064
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2068
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2072
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2079
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2083
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2089
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2096
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2105
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2109
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2295
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2299
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2303
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2307
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2311
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2315
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2330
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2339
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2346
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2353
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2362
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2380
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2384
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2390
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2397
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2405
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2409
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2413
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2417
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2423
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2427
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2433
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2440
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2447
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2456
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2490
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2494
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2500
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2506
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2510
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2517
		{
			yyVAL.str = yyDollar[3].str
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2523
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2527
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2541
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2550
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2559
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2567
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2575
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2598
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2617
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2624
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2631
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2639
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2646
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2653
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2662
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2666
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2670
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2676
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2680
		{
			yyVAL.str = yyDollar[1].str
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2686
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2690
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2696
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2700
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2714
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2720
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2726
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2731
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2736
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2741
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2747
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2758
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2762
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2766
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2770
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2774
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2778
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2782
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2786
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2790
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2796
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2800
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2804
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2808
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2813
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2818
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2824
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2837
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2850
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2863
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2876
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2892
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2899
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2910
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2921
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2925
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2931
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2941
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2947
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2951
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2957
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2963
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2967
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2971
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2975
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2981
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2994
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3010
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3014
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3020
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3026
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3037
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3043
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3051
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3055
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3059
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3063
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3071
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3079
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3089
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3107
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3117
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3133
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3137
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3145
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3153
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3193
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3197
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3203
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3209
		{
			yyVAL.str = yyDollar[1].str
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3214
		{
			yyVAL.str = "true"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3215
		{
			yyVAL.str = "false"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3216
		{
			yyVAL.str = yyDollar[1].str
		}
	case 421:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3221
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3227
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3236
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3243
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3251
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3255
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3280
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3303
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3313
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3320
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3329
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3337
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3341
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3347
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3358
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3362
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3368
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3372
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3396
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3406
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3416
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3432
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3450
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3454
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3460
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3464
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3470
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3476
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3484
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3494
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3502
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3512
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3522
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3532
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3539
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3543
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3547
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3551
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3555
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3562
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3568
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3572
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3576
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3580
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3584
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3588
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3592
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3596
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3601
		{
			yyVAL.str = ""
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3632
		{
			yyVAL.str = ""
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3636
		{
			yyVAL.str = string("COLUMN")
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3641
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3647
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3653
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3661
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3665
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3671
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3679
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3686
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3692
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3698
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3704
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3710
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3717
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3724
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3732
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3738
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3750
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3756
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3764
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3768
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3775
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3793
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3808
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3823
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3838
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3851
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3857
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3868
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3880
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3893
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3897
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3905
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3909
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3914
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3918
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3934
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3938
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3942
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3946
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3953
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3957
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3961
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3965
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3972
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3976
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3983
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3987
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3991
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3995
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4002
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4009
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4015
		{
			yyVAL.item = nil
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4020
		{
			yyVAL.item = nil
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4068
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4074
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4080
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4086
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4095
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4103
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4111
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4119
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4123
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4127
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4138
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4142
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4148
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4153
		{
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4157
		{
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4162
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4172
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4182
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4190
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4196
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4202
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4208
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4214
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4220
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4226
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4235
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4239
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4243
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4247
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4251
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4255
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4259
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4263
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4269
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4278
		{
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4280
		{
		}
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4289
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4299
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4308
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4312
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4316
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4328
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4340
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4349
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4360
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4372
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4380
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4386
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4398
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4412
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4418
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4424
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4431
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4435
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4440
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4444
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4448
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4453
		{
			yyVAL.str = ""
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4457
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4463
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4478
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4482
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4488
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4496
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4503
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4511
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4517
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4523
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4528
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4536
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4542
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4547
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4553
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4559
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4563
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4591
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4599
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4607
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4615
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4619
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4625
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4638
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4646
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4655
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4661
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4669
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4677
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4685
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4691
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4699
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4705
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4713
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4719
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4729
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4734
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4741
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4757
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4770
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4781
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4785
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4791
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4797
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4806
		{
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4808
		{
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4811
		{
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4820
		{
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4824
		{
		}
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4829
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4838
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4845
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4851
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4859
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4866
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4873
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4893
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4901
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4911
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4915
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4921
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4928
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4934
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4942
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4949
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4956
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4975
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4979
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4983
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4988
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4992
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4996
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5002
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5011
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5015
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5021
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5025
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5031
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5035
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5041
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5046
		{
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5050
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5057
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5061
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5068
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5073
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5077
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5083
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5087
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5093
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5097
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5102
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5106
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5119
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5130
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5141
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5163
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5186
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5194
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5203
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5207
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5220
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5224
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5229
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5233
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5240
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5245
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5252
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5258
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5262
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5266
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5270
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5274
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5278
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5283
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5287
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5293
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5303
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5318
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5322
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5336
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5340
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5346
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5355
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5359
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5363
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5367
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5371
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5377
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5384
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5393
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5397
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5403
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5411
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5415
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5420
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5424
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5430
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5434
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5438
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5443
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5447
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5453
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5459
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5463
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5469
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5474
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5478
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5482
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5487
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5491
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5495
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5500
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5504
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5512
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5516
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5520
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5534
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5538
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5548
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5558
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5568
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5580
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5588
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5596
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5605
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5613
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5621
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5629
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5637
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5645
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5653
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5661
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5669
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5679
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5692
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5696
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5702
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5706
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5712
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5716
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5720
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5724
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5728
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5732
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5736
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5740
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5744
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5748
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5774
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5779
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5783
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5793
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5802
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5811
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5822
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5826
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5831
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5835
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5840
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5844
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5850
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5854
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5860
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5864
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5868
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5872
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5877
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5885
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5891
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5899
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5909
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5919
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5923
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5929
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5938
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5947
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5956
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5964
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5975
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5985
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5989
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5995
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5999
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6009
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6013
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6017
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6021
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6027
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6033
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6044
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6048
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6054
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6060
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6064
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6070
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6076
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6080
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6084
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6088
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 931:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6094
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6098
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6104
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6108
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6114
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6118
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6124
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6128
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6138
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6151
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6157
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6163
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6177
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6188
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6195
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6199
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6205
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6215
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6219
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6223
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6228
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6232
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6236
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6240
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6245
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6249
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6253
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6257
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6261
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6266
		{
			yyVAL.str = ""
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6270
		{
			yyVAL.str = yyDollar[1].str
		}
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6274
		{
			yyVAL.str = yyDollar[2].str
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6280
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6284
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6289
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6293
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6297
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6301
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6305
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6311
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 994:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6353
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6366
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6372
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 997:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6378
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6391
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6396
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6403
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6410
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6414
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6420
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6426
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6431
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6435
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6439
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6443
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6450
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6483
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6488
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6495
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6502
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6506
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6512
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6518
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6522
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6526
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6532
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6538
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6544
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6548
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6554
		{
			yyVAL.str = ""
		}
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6561
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1028:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6567
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6582
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6599
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6616
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6620
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6626
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6630
		{
			yyVAL.str = "DEFINER = "
		}
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6634
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6639
		{
			yyVAL.str = ""
		}
	case 1037:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6643
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1043:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6657
		{
			yyVAL.str = ""
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6665
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6671
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6676
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6682
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6695
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6700
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6705
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6711
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6718
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6725
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6732
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6739
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6747
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6753
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6760
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6767
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6775
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6781
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6790
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6807
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6823
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6842
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6848
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6857
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6875
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6881
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6888
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6896
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6902
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6910
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6916
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6924
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6930
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6939
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6943
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6948
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6952
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6959
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6964
		{
			yyVAL.str = ""
		}
	case 1085:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6968
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1086:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6974
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6987
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6998
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7002
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7008
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7014
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7020
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7027
		{
			yyVAL.str = ""
		}
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7031
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7036
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7040
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7046
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7054
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7062
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7070
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7078
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7083
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7095
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7106
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7215
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7219
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7225
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7238
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7242
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7248
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7261
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7265
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7269
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7274
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7278
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7284
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7291
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7297
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7306
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7313
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7324
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7328
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7334
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7343
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7347
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7351
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7356
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7360
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7364
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7368
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7374
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7405
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7409
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7435
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7441
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7453
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7459
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7465
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7471
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7477
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7485
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7489
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7495
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7509
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7523
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7527
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7531
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7535
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7539
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7543
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7547
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7553
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7568
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7572
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7583
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7587
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7592
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7596
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7602
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7606
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7612
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7621
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7630
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7636
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7640
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7646
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7657
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7663
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7681
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7699
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7717
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7733
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7737
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7746
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7758
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7767
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7779
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7789
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7799
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7810
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7820
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7831
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7839
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7850
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7857
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7867
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7880
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7888
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7897
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7906
		{
			yyVAL.str = ""
		}
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7910
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7916
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7920
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7925
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7929
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7936
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7948
		{
			yyVAL.str = ""
		}
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7952
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1202:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7958
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7979
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7993
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7997
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8001
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8007
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8011
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8018
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8025
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8032
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8039
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8043
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8047
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8051
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8055
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8062
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8069
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8073
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8080
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8087
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8091
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8097
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8103
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8107
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8114
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8121
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8128
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8135
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8139
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8144
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8148
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8152
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8157
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8161
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8178
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8186
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8194
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8198
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8214
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8220
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8224
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8230
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8243
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8257
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8261
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8267
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8271
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8277
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8286
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8297
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8301
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8306
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8310
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8316
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8321
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8329
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8333
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8343
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8347
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8358
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8366
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8374
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8382
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8393
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8402
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8412
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8422
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8426
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8431
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8435
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8441
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8445
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8451
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8460
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8470
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8474
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8480
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8484
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8490
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8499
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8509
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8513
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8519
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8523
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8527
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8533
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8537
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8541
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8545
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8549
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8553
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8557
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8562
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8566
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8570
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8574
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8578
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8582
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8586
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8590
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8594
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8598
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8602
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8606
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8610
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8616
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8622
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8626
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8630
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8634
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8638
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8644
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8650
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8656
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8662
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8668
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8674
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8678
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8682
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8686
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8691
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8702
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8706
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8712
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8723
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8727
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8733
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8737
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8741
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8745
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8749
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8753
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8767
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8771
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8780
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8786
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8794
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8798
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8805
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8814
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8822
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8829
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8837
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8844
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8848
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8854
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8858
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8862
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8868
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8872
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8878
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8891
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8904
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8943
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8983
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8997
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9003
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9016
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9029
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9042
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9055
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9070
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9080
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9086
		{
			yyVAL.str = ""
		}
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9090
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9100
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9106
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9112
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9133
		{
			yyVAL.str = ""
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9137
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9143
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9149
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9153
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9158
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9166
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9170
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9174
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9178
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9184
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9190
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9194
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9199
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9206
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9210
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9216
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9220
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9226
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9230
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9234
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9238
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9242
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9246
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9251
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9255
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9259
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9263
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9267
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9271
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9275
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9279
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9283
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9287
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9301
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9305
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9309
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9313
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9317
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9321
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9327
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9331
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9336
		{
			yyVAL.str = ""
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9340
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9346
		{
			yyVAL.str = ""
		}
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9350
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1437:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9356
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9373
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9380
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9387
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9394
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9401
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9410
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9416
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9422
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9426
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9430
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9434
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9438
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9443
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9450
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9454
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9458
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9463
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9467
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9471
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9479
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9488
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9493
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9497
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9513
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9519
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9523
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9527
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9531
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9535
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9539
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9543
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9547
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9551
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9555
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9559
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9563
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9567
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9573
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9577
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9581
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9585
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9589
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9593
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9597
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9601
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9605
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9609
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9651
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9655
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9659
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9664
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9672
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9676
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9680
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9684
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9688
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9698
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9702
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9706
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9710
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9714
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9718
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9722
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9726
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9739
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9745
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9754
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9763
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9774
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9784
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9794
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9803
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9813
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9823
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9833
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9842
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9856
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9861
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9865
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9871
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9875
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9881
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9890
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9902
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9919
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9936
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9949
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9962
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9974
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9988
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10003
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10018
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10035
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10050
		{
		}
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10057
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10061
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10065
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10071
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10075
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10079
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10083
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10089
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10093
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10097
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10103
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10111
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10121
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10125
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10132
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10137
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10141
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10146
		{
			yyVAL.str = ","
		}
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10150
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10155
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10159
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1567:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10164
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10171
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10197
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10209
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10221
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10232
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10243
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10254
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10264
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10274
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10285
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10296
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10307
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10318
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10329
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10340
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10351
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10362
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10373
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10384
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10395
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10406
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10417
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10428
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10439
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10463
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10472
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10481
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10490
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10499
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10510
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10519
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10529
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10538
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10547
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10556
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10565
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10577
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10588
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10601
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10613
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10636
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10672
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10685
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10698
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10710
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10719
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10727
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10735
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10748
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10757
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10768
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10779
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10788
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10800
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10810
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10820
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10829
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10840
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10849
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10859
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10868
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10877
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10887
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10891
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10897
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10901
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10920
		{
		}
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10922
		{
		}
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10964
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10976
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10980
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10984
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10990
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10995
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10999
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11005
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11009
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11015
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11019
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11026
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11030
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11034
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11043
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11047
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11051
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11056
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11060
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11066
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11070
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11074
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11078
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11082
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11086
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11090
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11094
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11098
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11102
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11110
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11114
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11118
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11122
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11126
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11130
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11134
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11138
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11142
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11146
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11152
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11156
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11162
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11166
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11173
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11177
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11181
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11187
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11191
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11195
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11199
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11203
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11207
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11211
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11217
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11221
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11225
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11229
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11235
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11248
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11253
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11259
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11263
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11276
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11281
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11285
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11289
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11293
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11297
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11304
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11308
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11312
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11316
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11323
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11334
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11339
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11345
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11357
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11369
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11381
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11394
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11407
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11420
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11433
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11446
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11459
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11472
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11485
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11498
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11511
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11526
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11553
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11595
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11631
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11667
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11684
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11696
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11716
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11736
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11756
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11772
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11785
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11798
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11811
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11824
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11836
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11848
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11860
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11872
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11884
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11896
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11908
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11920
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11932
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11944
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11957
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11970
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11983
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11996
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12011
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12019
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12028
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12038
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12061
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12066
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12072
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12079
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12083
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12088
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12092
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12098
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12104
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12111
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12118
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12127
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12134
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12141
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12150
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12154
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12158
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12164
		{
		}
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12166
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12176
		{
			yyVAL.str = ""
		}
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12180
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
