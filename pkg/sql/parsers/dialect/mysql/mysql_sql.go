// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const UUID = 57532
const VECF32 = 57533
const VECF64 = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const INT1 = 57543
const INT2 = 57544
const INT3 = 57545
const INT4 = 57546
const INT8 = 57547
const S3OPTION = 57548
const STAGEOPTION = 57549
const SQL_SMALL_RESULT = 57550
const SQL_BIG_RESULT = 57551
const SQL_BUFFER_RESULT = 57552
const LOW_PRIORITY = 57553
const HIGH_PRIORITY = 57554
const DELAYED = 57555
const CREATE = 57556
const ALTER = 57557
const DROP = 57558
const RENAME = 57559
const ANALYZE = 57560
const ADD = 57561
const RETURNS = 57562
const SCHEMA = 57563
const TABLE = 57564
const SEQUENCE = 57565
const INDEX = 57566
const VIEW = 57567
const TO = 57568
const IGNORE = 57569
const IF = 57570
const PRIMARY = 57571
const COLUMN = 57572
const CONSTRAINT = 57573
const SPATIAL = 57574
const FULLTEXT = 57575
const FOREIGN = 57576
const KEY_BLOCK_SIZE = 57577
const SHOW = 57578
const DESCRIBE = 57579
const EXPLAIN = 57580
const DATE = 57581
const ESCAPE = 57582
const REPAIR = 57583
const OPTIMIZE = 57584
const TRUNCATE = 57585
const MAXVALUE = 57586
const PARTITION = 57587
const REORGANIZE = 57588
const LESS = 57589
const THAN = 57590
const PROCEDURE = 57591
const TRIGGER = 57592
const STATUS = 57593
const VARIABLES = 57594
const ROLE = 57595
const PROXY = 57596
const AVG_ROW_LENGTH = 57597
const STORAGE = 57598
const DISK = 57599
const MEMORY = 57600
const CHECKSUM = 57601
const COMPRESSION = 57602
const DATA = 57603
const DIRECTORY = 57604
const DELAY_KEY_WRITE = 57605
const ENCRYPTION = 57606
const ENGINE = 57607
const MAX_ROWS = 57608
const MIN_ROWS = 57609
const PACK_KEYS = 57610
const ROW_FORMAT = 57611
const STATS_AUTO_RECALC = 57612
const STATS_PERSISTENT = 57613
const STATS_SAMPLE_PAGES = 57614
const DYNAMIC = 57615
const COMPRESSED = 57616
const REDUNDANT = 57617
const COMPACT = 57618
const FIXED = 57619
const COLUMN_FORMAT = 57620
const AUTO_RANDOM = 57621
const ENGINE_ATTRIBUTE = 57622
const SECONDARY_ENGINE_ATTRIBUTE = 57623
const INSERT_METHOD = 57624
const RESTRICT = 57625
const CASCADE = 57626
const ACTION = 57627
const PARTIAL = 57628
const SIMPLE = 57629
const CHECK = 57630
const ENFORCED = 57631
const RANGE = 57632
const LIST = 57633
const ALGORITHM = 57634
const LINEAR = 57635
const PARTITIONS = 57636
const SUBPARTITION = 57637
const SUBPARTITIONS = 57638
const CLUSTER = 57639
const TYPE = 57640
const ANY = 57641
const SOME = 57642
const EXTERNAL = 57643
const LOCALFILE = 57644
const URL = 57645
const PREPARE = 57646
const DEALLOCATE = 57647
const RESET = 57648
const EXTENSION = 57649
const INCREMENT = 57650
const CYCLE = 57651
const MINVALUE = 57652
const PUBLICATION = 57653
const SUBSCRIPTIONS = 57654
const PUBLICATIONS = 57655
const PROPERTIES = 57656
const PARSER = 57657
const VISIBLE = 57658
const INVISIBLE = 57659
const BTREE = 57660
const HASH = 57661
const RTREE = 57662
const BSI = 57663
const IVFFLAT = 57664
const MASTER = 57665
const ZONEMAP = 57666
const LEADING = 57667
const BOTH = 57668
const TRAILING = 57669
const UNKNOWN = 57670
const LISTS = 57671
const OP_TYPE = 57672
const REINDEX = 57673
const EXPIRE = 57674
const ACCOUNT = 57675
const ACCOUNTS = 57676
const UNLOCK = 57677
const DAY = 57678
const NEVER = 57679
const PUMP = 57680
const MYSQL_COMPATIBILITY_MODE = 57681
const UNIQUE_CHECK_ON_AUTOINCR = 57682
const MODIFY = 57683
const CHANGE = 57684
const SECOND = 57685
const ASCII = 57686
const COALESCE = 57687
const COLLATION = 57688
const HOUR = 57689
const MICROSECOND = 57690
const MINUTE = 57691
const MONTH = 57692
const QUARTER = 57693
const REPEAT = 57694
const REVERSE = 57695
const ROW_COUNT = 57696
const WEEK = 57697
const REVOKE = 57698
const FUNCTION = 57699
const PRIVILEGES = 57700
const TABLESPACE = 57701
const EXECUTE = 57702
const SUPER = 57703
const GRANT = 57704
const OPTION = 57705
const REFERENCES = 57706
const REPLICATION = 57707
const SLAVE = 57708
const CLIENT = 57709
const USAGE = 57710
const RELOAD = 57711
const FILE = 57712
const TEMPORARY = 57713
const ROUTINE = 57714
const EVENT = 57715
const SHUTDOWN = 57716
const NULLX = 57717
const AUTO_INCREMENT = 57718
const APPROXNUM = 57719
const SIGNED = 57720
const UNSIGNED = 57721
const ZEROFILL = 57722
const ENGINES = 57723
const LOW_CARDINALITY = 57724
const AUTOEXTEND_SIZE = 57725
const ADMIN_NAME = 57726
const RANDOM = 57727
const SUSPEND = 57728
const ATTRIBUTE = 57729
const HISTORY = 57730
const REUSE = 57731
const CURRENT = 57732
const OPTIONAL = 57733
const FAILED_LOGIN_ATTEMPTS = 57734
const PASSWORD_LOCK_TIME = 57735
const UNBOUNDED = 57736
const SECONDARY = 57737
const RESTRICTED = 57738
const USER = 57739
const IDENTIFIED = 57740
const CIPHER = 57741
const ISSUER = 57742
const X509 = 57743
const SUBJECT = 57744
const SAN = 57745
const REQUIRE = 57746
const SSL = 57747
const NONE = 57748
const PASSWORD = 57749
const SHARED = 57750
const EXCLUSIVE = 57751
const MAX_QUERIES_PER_HOUR = 57752
const MAX_UPDATES_PER_HOUR = 57753
const MAX_CONNECTIONS_PER_HOUR = 57754
const MAX_USER_CONNECTIONS = 57755
const FORMAT = 57756
const VERBOSE = 57757
const CONNECTION = 57758
const TRIGGERS = 57759
const PROFILES = 57760
const LOAD = 57761
const INLINE = 57762
const INFILE = 57763
const TERMINATED = 57764
const OPTIONALLY = 57765
const ENCLOSED = 57766
const ESCAPED = 57767
const STARTING = 57768
const LINES = 57769
const ROWS = 57770
const IMPORT = 57771
const DISCARD = 57772
const JSONTYPE = 57773
const MODUMP = 57774
const OVER = 57775
const PRECEDING = 57776
const FOLLOWING = 57777
const GROUPS = 57778
const DATABASES = 57779
const TABLES = 57780
const SEQUENCES = 57781
const EXTENDED = 57782
const FULL = 57783
const PROCESSLIST = 57784
const FIELDS = 57785
const COLUMNS = 57786
const OPEN = 57787
const ERRORS = 57788
const WARNINGS = 57789
const INDEXES = 57790
const SCHEMAS = 57791
const NODE = 57792
const LOCKS = 57793
const ROLES = 57794
const TABLE_NUMBER = 57795
const COLUMN_NUMBER = 57796
const TABLE_VALUES = 57797
const TABLE_SIZE = 57798
const NAMES = 57799
const GLOBAL = 57800
const PERSIST = 57801
const SESSION = 57802
const ISOLATION = 57803
const LEVEL = 57804
const READ = 57805
const WRITE = 57806
const ONLY = 57807
const REPEATABLE = 57808
const COMMITTED = 57809
const UNCOMMITTED = 57810
const SERIALIZABLE = 57811
const LOCAL = 57812
const EVENTS = 57813
const PLUGINS = 57814
const CURRENT_TIMESTAMP = 57815
const DATABASE = 57816
const CURRENT_TIME = 57817
const LOCALTIME = 57818
const LOCALTIMESTAMP = 57819
const UTC_DATE = 57820
const UTC_TIME = 57821
const UTC_TIMESTAMP = 57822
const REPLACE = 57823
const CONVERT = 57824
const SEPARATOR = 57825
const TIMESTAMPDIFF = 57826
const CURRENT_DATE = 57827
const CURRENT_USER = 57828
const CURRENT_ROLE = 57829
const SECOND_MICROSECOND = 57830
const MINUTE_MICROSECOND = 57831
const MINUTE_SECOND = 57832
const HOUR_MICROSECOND = 57833
const HOUR_SECOND = 57834
const HOUR_MINUTE = 57835
const DAY_MICROSECOND = 57836
const DAY_SECOND = 57837
const DAY_MINUTE = 57838
const DAY_HOUR = 57839
const YEAR_MONTH = 57840
const SQL_TSI_HOUR = 57841
const SQL_TSI_DAY = 57842
const SQL_TSI_WEEK = 57843
const SQL_TSI_MONTH = 57844
const SQL_TSI_QUARTER = 57845
const SQL_TSI_YEAR = 57846
const SQL_TSI_SECOND = 57847
const SQL_TSI_MINUTE = 57848
const RECURSIVE = 57849
const CONFIG = 57850
const DRAINER = 57851
const SOURCE = 57852
const STREAM = 57853
const HEADERS = 57854
const CONNECTOR = 57855
const CONNECTORS = 57856
const DAEMON = 57857
const PAUSE = 57858
const CANCEL = 57859
const TASK = 57860
const RESUME = 57861
const MATCH = 57862
const AGAINST = 57863
const BOOLEAN = 57864
const LANGUAGE = 57865
const WITH = 57866
const QUERY = 57867
const EXPANSION = 57868
const WITHOUT = 57869
const VALIDATION = 57870
const UPGRADE = 57871
const RETRY = 57872
const ADDDATE = 57873
const BIT_AND = 57874
const BIT_OR = 57875
const BIT_XOR = 57876
const CAST = 57877
const COUNT = 57878
const APPROX_COUNT = 57879
const APPROX_COUNT_DISTINCT = 57880
const SERIAL_EXTRACT = 57881
const APPROX_PERCENTILE = 57882
const CURDATE = 57883
const CURTIME = 57884
const DATE_ADD = 57885
const DATE_SUB = 57886
const EXTRACT = 57887
const GROUP_CONCAT = 57888
const MAX = 57889
const MID = 57890
const MIN = 57891
const NOW = 57892
const POSITION = 57893
const SESSION_USER = 57894
const STD = 57895
const STDDEV = 57896
const MEDIAN = 57897
const CLUSTER_CENTERS = 57898
const KMEANS = 57899
const STDDEV_POP = 57900
const STDDEV_SAMP = 57901
const SUBDATE = 57902
const SUBSTR = 57903
const SUBSTRING = 57904
const SUM = 57905
const SYSDATE = 57906
const SYSTEM_USER = 57907
const TRANSLATE = 57908
const TRIM = 57909
const VARIANCE = 57910
const VAR_POP = 57911
const VAR_SAMP = 57912
const AVG = 57913
const RANK = 57914
const ROW_NUMBER = 57915
const DENSE_RANK = 57916
const BIT_CAST = 57917
const BITMAP_BIT_POSITION = 57918
const BITMAP_BUCKET_NUMBER = 57919
const BITMAP_COUNT = 57920
const BITMAP_CONSTRUCT_AGG = 57921
const BITMAP_OR_AGG = 57922
const NEXTVAL = 57923
const SETVAL = 57924
const CURRVAL = 57925
const LASTVAL = 57926
const ARROW = 57927
const ROW = 57928
const OUTFILE = 57929
const HEADER = 57930
const MAX_FILE_SIZE = 57931
const FORCE_QUOTE = 57932
const PARALLEL = 57933
const STRICT = 57934
const UNUSED = 57935
const BINDINGS = 57936
const DO = 57937
const DECLARE = 57938
const LOOP = 57939
const WHILE = 57940
const LEAVE = 57941
const ITERATE = 57942
const UNTIL = 57943
const CALL = 57944
const PREV = 57945
const SLIDING = 57946
const FILL = 57947
const SPBEGIN = 57948
const BACKEND = 57949
const SERVERS = 57950
const HANDLER = 57951
const PERCENT = 57952
const SAMPLE = 57953
const MO_TS = 57954
const PITR = 57955
const KILL = 57956
const BACKUP = 57957
const FILESYSTEM = 57958
const PARALLELISM = 57959
const RESTORE = 57960
const QUERY_RESULT = 57961

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12244

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 126,
	11, 752,
	22, 752,
	-2, 745,
	-1, 147,
	239, 1156,
	241, 1055,
	-2, 1102,
	-1, 173,
	43, 574,
	241, 574,
	268, 581,
	269, 581,
	465, 574,
	-2, 611,
	-1, 214,
	640, 1914,
	-2, 485,
	-1, 516,
	640, 2034,
	-2, 371,
	-1, 574,
	640, 2093,
	-2, 369,
	-1, 575,
	640, 2094,
	-2, 370,
	-1, 576,
	640, 2095,
	-2, 372,
	-1, 709,
	320, 157,
	437, 157,
	438, 157,
	-2, 1819,
	-1, 775,
	83, 1606,
	-2, 1970,
	-1, 776,
	83, 1624,
	-2, 1941,
	-1, 780,
	83, 1625,
	-2, 1969,
	-1, 813,
	83, 1533,
	-2, 2167,
	-1, 814,
	83, 1534,
	-2, 2166,
	-1, 815,
	83, 1535,
	-2, 2156,
	-1, 816,
	83, 2128,
	-2, 2149,
	-1, 817,
	83, 2129,
	-2, 2150,
	-1, 818,
	83, 2130,
	-2, 2158,
	-1, 819,
	83, 2131,
	-2, 2138,
	-1, 820,
	83, 2132,
	-2, 2147,
	-1, 821,
	83, 2133,
	-2, 2159,
	-1, 822,
	83, 2134,
	-2, 2160,
	-1, 823,
	83, 2135,
	-2, 2165,
	-1, 824,
	83, 2136,
	-2, 2170,
	-1, 825,
	83, 2137,
	-2, 2171,
	-1, 826,
	83, 1602,
	-2, 2008,
	-1, 827,
	83, 1603,
	-2, 1803,
	-1, 828,
	83, 1604,
	-2, 2017,
	-1, 829,
	83, 1605,
	-2, 1812,
	-1, 831,
	83, 1608,
	-2, 1820,
	-1, 832,
	83, 1609,
	-2, 2041,
	-1, 834,
	83, 1612,
	-2, 1839,
	-1, 836,
	83, 1614,
	-2, 2053,
	-1, 837,
	83, 1615,
	-2, 2052,
	-1, 838,
	83, 1616,
	-2, 1883,
	-1, 839,
	83, 1617,
	-2, 1965,
	-1, 842,
	83, 1620,
	-2, 2064,
	-1, 844,
	83, 1622,
	-2, 2067,
	-1, 845,
	83, 1623,
	-2, 2069,
	-1, 846,
	83, 1626,
	-2, 2077,
	-1, 847,
	83, 1627,
	-2, 1950,
	-1, 848,
	83, 1628,
	-2, 1995,
	-1, 849,
	83, 1629,
	-2, 1960,
	-1, 850,
	83, 1630,
	-2, 1985,
	-1, 861,
	83, 1511,
	-2, 2161,
	-1, 862,
	83, 1512,
	-2, 2162,
	-1, 863,
	83, 1513,
	-2, 2163,
	-1, 954,
	460, 611,
	461, 611,
	-2, 575,
	-1, 1002,
	125, 1803,
	136, 1803,
	156, 1803,
	-2, 1777,
	-1, 1119,
	22, 779,
	-2, 728,
	-1, 1225,
	11, 752,
	22, 752,
	-2, 1391,
	-1, 1307,
	22, 779,
	-2, 728,
	-1, 1641,
	83, 1677,
	-2, 1967,
	-1, 1642,
	83, 1678,
	-2, 1968,
	-1, 1800,
	84, 931,
	-2, 937,
	-1, 2237,
	108, 1094,
	152, 1094,
	191, 1094,
	194, 1094,
	281, 1094,
	-2, 1087,
	-1, 2390,
	11, 752,
	22, 752,
	-2, 873,
	-1, 2422,
	84, 1763,
	157, 1763,
	-2, 1952,
	-1, 2423,
	84, 1763,
	157, 1763,
	-2, 1951,
	-1, 2424,
	84, 1739,
	157, 1739,
	-2, 1938,
	-1, 2425,
	84, 1740,
	157, 1740,
	-2, 1943,
	-1, 2426,
	84, 1741,
	157, 1741,
	-2, 1871,
	-1, 2427,
	84, 1742,
	157, 1742,
	-2, 1865,
	-1, 2428,
	84, 1743,
	157, 1743,
	-2, 1793,
	-1, 2429,
	84, 1744,
	157, 1744,
	-2, 1940,
	-1, 2430,
	84, 1745,
	157, 1745,
	-2, 1869,
	-1, 2431,
	84, 1746,
	157, 1746,
	-2, 1864,
	-1, 2432,
	84, 1747,
	157, 1747,
	-2, 1853,
	-1, 2433,
	84, 1763,
	157, 1763,
	-2, 1854,
	-1, 2434,
	84, 1763,
	157, 1763,
	-2, 1855,
	-1, 2436,
	84, 1752,
	157, 1752,
	-2, 1985,
	-1, 2437,
	84, 1730,
	157, 1730,
	-2, 1970,
	-1, 2438,
	84, 1761,
	157, 1761,
	-2, 1941,
	-1, 2439,
	84, 1761,
	157, 1761,
	-2, 1969,
	-1, 2440,
	84, 1761,
	157, 1761,
	-2, 1821,
	-1, 2441,
	84, 1759,
	157, 1759,
	-2, 1960,
	-1, 2442,
	84, 1756,
	157, 1756,
	-2, 1844,
	-1, 2443,
	83, 1711,
	84, 1711,
	157, 1711,
	395, 1711,
	396, 1711,
	397, 1711,
	-2, 1792,
	-1, 2444,
	83, 1712,
	84, 1712,
	157, 1712,
	395, 1712,
	396, 1712,
	397, 1712,
	-2, 1794,
	-1, 2445,
	83, 1713,
	84, 1713,
	157, 1713,
	395, 1713,
	396, 1713,
	397, 1713,
	-2, 2013,
	-1, 2446,
	83, 1715,
	84, 1715,
	157, 1715,
	395, 1715,
	396, 1715,
	397, 1715,
	-2, 1942,
	-1, 2447,
	83, 1717,
	84, 1717,
	157, 1717,
	395, 1717,
	396, 1717,
	397, 1717,
	-2, 1923,
	-1, 2448,
	83, 1719,
	84, 1719,
	157, 1719,
	395, 1719,
	396, 1719,
	397, 1719,
	-2, 1870,
	-1, 2449,
	83, 1721,
	84, 1721,
	157, 1721,
	395, 1721,
	396, 1721,
	397, 1721,
	-2, 1849,
	-1, 2450,
	83, 1722,
	84, 1722,
	157, 1722,
	395, 1722,
	396, 1722,
	397, 1722,
	-2, 1850,
	-1, 2451,
	83, 1724,
	84, 1724,
	157, 1724,
	395, 1724,
	396, 1724,
	397, 1724,
	-2, 1791,
	-1, 2452,
	84, 1766,
	157, 1766,
	395, 1766,
	396, 1766,
	397, 1766,
	-2, 1826,
	-1, 2453,
	84, 1766,
	157, 1766,
	395, 1766,
	396, 1766,
	397, 1766,
	-2, 1840,
	-1, 2454,
	84, 1769,
	157, 1769,
	395, 1769,
	396, 1769,
	397, 1769,
	-2, 1822,
	-1, 2455,
	84, 1769,
	157, 1769,
	395, 1769,
	396, 1769,
	397, 1769,
	-2, 1886,
	-1, 2456,
	84, 1766,
	157, 1766,
	395, 1766,
	396, 1766,
	397, 1766,
	-2, 1907,
	-1, 2664,
	108, 1094,
	152, 1094,
	191, 1094,
	194, 1094,
	281, 1094,
	-2, 1088,
	-1, 2682,
	81, 672,
	157, 672,
	-2, 1271,
	-1, 3092,
	194, 1094,
	305, 1359,
	-2, 1331,
	-1, 3264,
	108, 1094,
	152, 1094,
	191, 1094,
	194, 1094,
	-2, 1212,
	-1, 3266,
	108, 1094,
	152, 1094,
	191, 1094,
	194, 1094,
	-2, 1212,
	-1, 3278,
	81, 672,
	157, 672,
	-2, 1271,
	-1, 3300,
	194, 1094,
	305, 1359,
	-2, 1332,
	-1, 3444,
	108, 1094,
	152, 1094,
	191, 1094,
	194, 1094,
	-2, 1213,
	-1, 3471,
	84, 1174,
	157, 1174,
	-2, 1094,
	-1, 3606,
	84, 1174,
	157, 1174,
	-2, 1094,
	-1, 3760,
	84, 1178,
	157, 1178,
	-2, 1094,
	-1, 3808,
	84, 1179,
	157, 1179,
	-2, 1094,
}

const yyPrivate = 57344

const yyLast = 49121

var yyAct = [...]int{
	742, 719, 3854, 744, 3828, 2712, 203, 1885, 3764, 3847,
	3285, 3770, 3379, 1621, 713, 3664, 3771, 3763, 3606, 3078,
	728, 3690, 3111, 3646, 3721, 721, 3182, 2511, 3499, 3584,
	3314, 3640, 1260, 2706, 3605, 3183, 1457, 3431, 3668, 3432,
	3429, 3527, 610, 772, 1120, 2623, 2715, 2709, 1001, 3575,
	3647, 1394, 1535, 3649, 3383, 628, 1617, 634, 634, 1400,
	60, 1833, 3251, 634, 651, 660, 3087, 3374, 660, 3451,
	3441, 3301, 2685, 1668, 1114, 1624, 3180, 2285, 3048, 3413,
	3446, 3009, 717, 3267, 37, 2822, 1974, 2820, 3037, 188,
	2821, 3239, 1977, 2802, 2736, 3107, 3089, 3096, 3138, 3269,
	1682, 2546, 1942, 2090, 2884, 2384, 3222, 3168, 2418, 2048,
	672, 2844, 3148, 668, 2817, 2653, 3016, 3095, 2420, 2288,
	1450, 3014, 3012, 711, 1845, 3011, 3020, 3057, 2248, 3007,
	2267, 3010, 2665, 1110, 2199, 2215, 125, 1547, 36, 2988,
	2367, 2931, 1531, 1992, 2198, 2086, 2490, 2073, 657, 2056,
	928, 2857, 2057, 2049, 2472, 716, 1970, 1774, 2021, 2085,
	1539, 1945, 2372, 2867, 1536, 2385, 2641, 2636, 2738, 2717,
	1364, 2286, 1864, 2247, 1875, 2677, 2237, 610, 2416, 995,
	1809, 1615, 1059, 720, 2087, 1498, 627, 1436, 1466, 2227,
	199, 8, 1332, 2281, 2579, 2052, 198, 7, 6, 1675,
	2097, 1943, 1844, 203, 2120, 203, 1655, 1050, 1051, 710,
	2037, 1568, 1606, 1133, 634, 1044, 1045, 729, 2055, 643,
	1049, 609, 963, 1505, 2011, 665, 27, 1550, 1614, 23,
	718, 994, 1433, 1489, 1808, 1805, 2392, 1620, 1683, 1435,
	674, 1010, 15, 1395, 865, 1497, 1370, 1383, 16, 927,
	14, 675, 33, 102, 24, 1404, 646, 17, 659, 1403,
	10, 712, 1524, 1379, 189, 904, 179, 185, 910, 1305,
	1261, 671, 2094, 925, 3569, 867, 949, 1193, 1194, 1195,
	1192, 1366, 1193, 1194, 1195, 1192, 1560, 1029, 868, 2394,
	656, 2614, 1046, 1047, 1048, 1193, 1194, 1195, 1192, 2578,
	2614, 3459, 2614, 3281, 2901, 3064, 655, 1559, 2900, 2104,
	1115, 3254, 652, 2268, 654, 3175, 653, 1007, 2534, 1009,
	2478, 2476, 2475, 2473, 1116, 1787, 663, 639, 1512, 1043,
	1508, 1042, 187, 629, 2197, 1324, 630, 2981, 2983, 2978,
	918, 1043, 919, 186, 56, 175, 148, 1043, 2980, 3839,
	1417, 1781, 1320, 3372, 712, 2606, 2604, 2880, 2878, 1030,
	2026, 176, 1115, 3635, 1510, 3534, 3528, 983, 168, 3375,
	3181, 2070, 177, 3651, 2051, 1255, 866, 2958, 8, 899,
	1193, 1194, 1195, 1192, 7, 2043, 1041, 1193, 1194, 1195,
	1192, 124, 2326, 913, 635, 909, 877, 2608, 1327, 3418,
	3414, 186, 186, 56, 175, 148, 112, 186, 186, 186,
	3591, 2238, 186, 180, 1155, 3268, 2520, 3745, 2091, 186,
	2239, 1545, 186, 3557, 3701, 2528, 1554, 1566, 1476, 2671,
	1024, 1019, 1014, 1018, 1022, 1475, 1474, 1013, 1011, 186,
	56, 175, 148, 1012, 2956, 1339, 186, 56, 175, 148,
	1546, 890, 1356, 2232, 3592, 1005, 1551, 1563, 1027, 1328,
	2903, 670, 1017, 2102, 2625, 1789, 1131, 2892, 1006, 2815,
	124, 180, 180, 2410, 1190, 2411, 3559, 2669, 1553, 1565,
	2851, 2852, 180, 1955, 1956, 186, 56, 175, 148, 180,
	130, 131, 180, 132, 133, 856, 2850, 855, 857, 858,
	2626, 859, 860, 1577, 1437, 878, 1439, 1987, 1954, 180,
	1128, 978, 976, 1025, 977, 2491, 180, 1791, 1792, 2982,
	1028, 2979, 915, 972, 908, 2318, 1607, 2672, 1859, 1611,
	1401, 1402, 1623, 912, 911, 2638, 1391, 1170, 1413, 3082,
	1171, 1414, 1015, 2398, 1188, 2639, 2397, 3774, 3775, 2399,
	893, 1004, 1399, 1610, 900, 180, 1398, 1401, 1402, 186,
	1003, 147, 174, 184, 1163, 110, 1026, 1165, 1173, 3654,
	3734, 3653, 3733, 3654, 907, 3653, 3742, 1338, 3652, 3732,
	3396, 3652, 3080, 173, 167, 166, 3304, 2186, 3795, 3723,
	62, 1183, 3738, 917, 2637, 1166, 3832, 3833, 906, 3638,
	984, 3184, 905, 2609, 2885, 3723, 1016, 124, 892, 1511,
	1509, 2886, 898, 2887, 1717, 3641, 3642, 3643, 3644, 3726,
	3531, 3184, 980, 2515, 1125, 3316, 1627, 1416, 2106, 180,
	2757, 1965, 634, 634, 896, 3661, 1136, 1612, 3307, 3197,
	1971, 2627, 2644, 634, 1124, 1961, 1602, 3240, 1168, 3302,
	2098, 169, 170, 171, 3324, 3325, 3423, 3747, 3748, 3031,
	3303, 1609, 660, 660, 2360, 634, 186, 56, 175, 148,
	3743, 3744, 916, 3247, 3021, 1159, 2226, 3561, 3562, 2921,
	2034, 2628, 178, 1023, 3326, 706, 982, 3740, 708, 916,
	1123, 1518, 1517, 707, 2919, 3029, 2525, 3308, 897, 1186,
	1187, 1161, 3773, 120, 172, 2231, 1185, 172, 2324, 121,
	1010, 1158, 1169, 1164, 1167, 2807, 2607, 2103, 3395, 1020,
	3373, 2879, 1021, 2363, 2364, 2362, 3397, 1053, 1233, 1196,
	1340, 3735, 657, 657, 1389, 3566, 180, 1226, 3420, 1160,
	3552, 1427, 1589, 1626, 1625, 1323, 1236, 3226, 1561, 3341,
	2368, 3026, 3027, 3025, 3110, 2081, 3568, 1180, 1558, 1985,
	1986, 2621, 626, 981, 3803, 880, 122, 3028, 3084, 1117,
	2304, 1244, 3338, 3200, 1124, 914, 2284, 2307, 1608, 55,
	1150, 1136, 2925, 1010, 2613, 1116, 1007, 1116, 1009, 1172,
	1415, 3323, 1116, 2289, 2109, 2111, 2112, 2622, 2092, 1264,
	2092, 881, 2092, 1181, 1182, 2902, 3108, 3109, 3046, 3058,
	2899, 3683, 3596, 3678, 903, 3588, 1162, 2678, 3312, 662,
	1265, 1130, 1031, 2125, 661, 658, 2093, 2813, 57, 2234,
	1043, 669, 1138, 1137, 2306, 1043, 1043, 1043, 3331, 2989,
	3309, 3313, 3311, 3310, 1116, 1043, 1043, 3669, 3685, 3286,
	3691, 3079, 3590, 2711, 2707, 2708, 2211, 2711, 2105, 1007,
	1227, 1009, 658, 181, 182, 3746, 183, 3023, 3293, 658,
	1378, 149, 3113, 3556, 656, 656, 53, 2305, 3318, 3319,
	1139, 2474, 1326, 3232, 147, 1598, 184, 57, 1513, 3230,
	655, 655, 2998, 1336, 628, 866, 652, 652, 654, 654,
	653, 653, 979, 3560, 1127, 1129, 173, 3342, 658, 1303,
	1119, 2358, 1308, 2605, 891, 1118, 1401, 1402, 1147, 3419,
	1143, 1144, 3660, 3490, 57, 3865, 3326, 928, 1006, 149,
	149, 57, 918, 2336, 919, 149, 149, 149, 3305, 1790,
	149, 1149, 123, 41, 3317, 2529, 2291, 149, 1234, 54,
	149, 3231, 2643, 5, 1229, 1230, 1231, 1232, 1390, 1401,
	1402, 127, 128, 2335, 3546, 129, 3547, 149, 1112, 3597,
	57, 3032, 3589, 3386, 149, 1972, 1141, 1138, 1137, 634,
	2356, 2357, 1429, 2650, 1446, 3022, 2413, 1445, 610, 610,
	3563, 1148, 2922, 1376, 3085, 1375, 3850, 610, 610, 973,
	1397, 1461, 1461, 3739, 634, 1374, 1633, 1636, 1637, 2647,
	2648, 3485, 2758, 149, 2759, 2760, 3692, 1634, 1393, 1392,
	3549, 3576, 1964, 3424, 2646, 3610, 660, 1490, 628, 3479,
	3088, 1111, 2977, 1501, 1501, 2110, 1962, 1603, 1463, 2327,
	3762, 3270, 1175, 3044, 203, 1176, 1224, 1500, 1500, 2284,
	1468, 3548, 3370, 610, 1333, 1276, 1277, 1459, 1459, 3546,
	2786, 3547, 670, 3112, 3108, 3109, 3024, 2657, 2660, 2661,
	2662, 2658, 2659, 1178, 3322, 2301, 1155, 3541, 3187, 3720,
	1337, 3656, 975, 2290, 1334, 974, 1434, 149, 2292, 1343,
	1344, 1345, 1346, 1347, 3405, 1349, 3104, 2993, 2521, 2402,
	2322, 1355, 2846, 2848, 1543, 2095, 1428, 1348, 2294, 1548,
	2617, 1519, 2924, 1354, 1353, 3549, 1557, 1352, 1341, 1455,
	1456, 3500, 3501, 3502, 3506, 3504, 3505, 3503, 1351, 2862,
	2863, 664, 3233, 3492, 3851, 2755, 1309, 1307, 3105, 2210,
	3223, 1587, 2293, 922, 923, 924, 3548, 2107, 2108, 1361,
	3321, 2121, 920, 1174, 3609, 1461, 2619, 1461, 1124, 1582,
	1583, 2205, 1154, 1567, 1342, 2207, 2206, 1441, 1443, 2933,
	2932, 1010, 3045, 1331, 973, 1794, 1453, 1454, 1010, 1372,
	2777, 2778, 1034, 1039, 1040, 917, 181, 182, 1795, 183,
	1385, 1386, 1179, 1793, 149, 1552, 1380, 1384, 1384, 1384,
	1363, 3406, 1564, 2994, 1622, 2697, 1628, 1629, 1630, 1631,
	1632, 2204, 1369, 2202, 1491, 657, 1788, 1177, 3761, 1377,
	882, 1380, 1380, 1533, 1534, 1461, 1387, 1597, 1405, 1418,
	1419, 1408, 1514, 2348, 1406, 1407, 883, 1409, 1410, 2295,
	1411, 1444, 1681, 3452, 3486, 3487, 1556, 1635, 1673, 1329,
	1330, 1586, 1677, 1678, 1679, 1680, 1730, 975, 3861, 1585,
	974, 1714, 1541, 886, 1538, 3848, 3849, 1542, 3856, 1724,
	2847, 3866, 3542, 1371, 1469, 3730, 3648, 639, 3481, 1502,
	1191, 1669, 3480, 2300, 1488, 1482, 3145, 2298, 1155, 1643,
	1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	1654, 2683, 1619, 1371, 2776, 1666, 1667, 3188, 1503, 2787,
	2789, 2790, 2791, 2788, 885, 2493, 3141, 3236, 888, 887,
	1121, 1776, 1124, 1522, 3199, 1525, 1526, 2014, 985, 1600,
	2191, 2100, 2618, 1796, 2520, 1798, 1527, 1528, 3117, 1490,
	3106, 3857, 3063, 2382, 1806, 1461, 1811, 1812, 1715, 1814,
	1429, 634, 3845, 1739, 1638, 1772, 634, 656, 1575, 1461,
	2229, 1578, 2155, 928, 1570, 2154, 1834, 3542, 1783, 1595,
	1604, 3543, 3115, 655, 1461, 1036, 1037, 1038, 1605, 652,
	1429, 654, 1121, 653, 2987, 651, 1838, 1576, 1720, 1721,
	1722, 1592, 1616, 1591, 1613, 1152, 1596, 1594, 2985, 1775,
	1593, 1736, 2263, 1590, 1737, 1858, 2218, 1618, 1729, 2383,
	3810, 1854, 2383, 2134, 1865, 1865, 973, 1429, 2684, 1429,
	1429, 1750, 1751, 634, 634, 3811, 1932, 1806, 1936, 2219,
	2220, 1461, 1939, 1940, 1952, 2865, 1657, 3782, 1191, 2630,
	1771, 2684, 3145, 1193, 1194, 1195, 1192, 1153, 610, 3776,
	1461, 1664, 1665, 3758, 1193, 1194, 1195, 1192, 1813, 2610,
	2321, 1193, 1194, 1195, 1192, 1776, 1191, 2012, 1862, 2383,
	1776, 1776, 1153, 2510, 1815, 3711, 2228, 3686, 634, 1806,
	1461, 2498, 1997, 3811, 634, 634, 634, 668, 668, 2133,
	1193, 1194, 1195, 1192, 2007, 2008, 2009, 2010, 3674, 975,
	2954, 2016, 974, 3629, 3628, 1887, 3623, 2131, 203, 2413,
	3783, 203, 203, 2091, 203, 1934, 3622, 1744, 1155, 1778,
	1988, 2024, 3572, 1953, 2027, 2277, 3759, 2030, 1304, 2196,
	2032, 2190, 1802, 1803, 1804, 2189, 2262, 870, 871, 872,
	873, 1868, 1980, 1981, 1817, 1818, 1819, 1820, 3572, 1773,
	2100, 3621, 1779, 2162, 1730, 1730, 2059, 1966, 3620, 2082,
	3600, 1983, 1958, 1362, 1960, 1672, 1730, 1730, 1447, 3599,
	3246, 3675, 1801, 2075, 1978, 1979, 3630, 2252, 3571, 3572,
	3873, 3858, 1810, 3281, 2869, 2686, 2074, 1866, 3347, 3572,
	2523, 1996, 2522, 1830, 2514, 1973, 1826, 2025, 1836, 1837,
	2028, 2029, 1834, 2031, 1847, 3295, 1461, 2089, 1867, 1950,
	3260, 1839, 1831, 1835, 1010, 1472, 3215, 1010, 2271, 2069,
	3211, 1869, 1870, 3516, 3572, 3125, 1010, 1999, 2000, 2001,
	1380, 3572, 2061, 2100, 1850, 2150, 1851, 2841, 1841, 2135,
	2080, 1552, 2100, 1846, 1384, 1848, 1849, 2019, 1856, 2005,
	1857, 3572, 1572, 1860, 1861, 1241, 1384, 1842, 1843, 1855,
	3345, 2413, 1933, 2083, 657, 1938, 633, 633, 1810, 2585,
	1941, 2577, 641, 2065, 1852, 1853, 1140, 1208, 3296, 1967,
	1957, 1108, 1959, 3261, 2536, 2518, 875, 2124, 3068, 3216,
	1007, 2129, 1009, 3212, 1863, 1103, 1712, 1713, 3126, 1716,
	1224, 1982, 1007, 2916, 1009, 3059, 2054, 1731, 1995, 3867,
	2383, 3679, 2002, 2003, 1994, 2506, 3836, 1616, 2054, 1010,
	1738, 2319, 1740, 1449, 1741, 1742, 1743, 2020, 2022, 3570,
	884, 3538, 2141, 870, 871, 872, 873, 745, 755, 3483,
	2148, 2039, 1191, 3453, 1191, 2118, 2119, 746, 3482, 747,
	751, 754, 750, 748, 749, 3680, 2500, 1191, 2252, 1367,
	2495, 2066, 2165, 1368, 2487, 2485, 2483, 2170, 2171, 2172,
	2481, 2251, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
	2183, 2184, 2071, 3060, 2060, 2068, 2192, 3454, 2496, 2201,
	1451, 2203, 2169, 3468, 2079, 1007, 2114, 1009, 2168, 2153,
	711, 1452, 752, 634, 634, 634, 656, 2077, 1422, 1423,
	1381, 1425, 1426, 3425, 1430, 1431, 1432, 2084, 634, 634,
	634, 634, 655, 641, 1448, 2144, 2143, 3061, 652, 2501,
	654, 2249, 653, 2496, 753, 3253, 2078, 2488, 2486, 2482,
	2473, 2255, 1429, 2482, 2252, 3146, 1477, 1478, 1479, 1480,
	1481, 3137, 1483, 1484, 1485, 1486, 1487, 2113, 3131, 2191,
	1493, 1494, 1495, 1496, 889, 1191, 2115, 1412, 1429, 3127,
	2122, 1191, 1191, 3074, 2127, 1719, 1718, 1657, 3273, 2142,
	2099, 1579, 875, 2163, 2164, 2313, 2166, 2554, 1719, 1718,
	3271, 2116, 2117, 2173, 1745, 1746, 1747, 1748, 1191, 1191,
	1752, 1753, 1754, 1755, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 3039, 1102, 1098, 1099, 1100, 1101,
	2023, 2559, 3274, 2558, 2557, 2555, 2810, 2809, 1382, 2655,
	2291, 2294, 2615, 2533, 3272, 2499, 2320, 1206, 1216, 1217,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1208, 2387, 2387,
	1952, 2387, 1191, 2100, 1580, 1211, 1212, 1213, 1214, 1215,
	1208, 2404, 2185, 2187, 2188, 2064, 2063, 2062, 1367, 610,
	610, 1358, 1368, 1776, 1357, 1776, 1126, 1124, 1193, 1194,
	1195, 1192, 3173, 1461, 634, 2543, 2467, 1756, 1676, 3176,
	2556, 2193, 2273, 1776, 1776, 2270, 1676, 2272, 2128, 634,
	1749, 2283, 1264, 2871, 2282, 1124, 2457, 628, 3731, 2212,
	1010, 2230, 1506, 1501, 2023, 1952, 1195, 1192, 2462, 1797,
	2464, 1192, 3495, 1265, 203, 3494, 2888, 1500, 2291, 2294,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1208, 2747, 2408,
	2745, 1663, 2723, 2276, 2256, 2400, 2721, 2401, 3426, 3427,
	3474, 2421, 2391, 2598, 2389, 2599, 2393, 1660, 1662, 1659,
	1734, 1661, 2295, 3421, 2503, 2405, 2406, 2290, 2284, 2289,
	3864, 2287, 2292, 2296, 2297, 1735, 2302, 2502, 1243, 2505,
	3244, 2516, 2798, 2279, 3841, 2089, 1007, 2796, 1009, 2257,
	2258, 1242, 1461, 3840, 1461, 3786, 1461, 2935, 3757, 2260,
	2261, 1124, 3756, 1193, 1194, 1195, 1192, 3681, 2624, 2535,
	2269, 2259, 3625, 2468, 2477, 3613, 2265, 2461, 1384, 2266,
	3603, 3422, 1193, 1194, 1195, 1192, 2293, 3593, 2365, 2560,
	2561, 3174, 2794, 3863, 3529, 1461, 2563, 2264, 3245, 2654,
	2797, 2395, 2415, 2544, 3456, 2795, 2550, 2530, 1441, 1443,
	2526, 2570, 2783, 2564, 2565, 3455, 1461, 3287, 3275, 3243,
	2295, 2567, 2568, 3030, 2912, 2290, 2284, 2289, 2883, 2287,
	2292, 2562, 2409, 1193, 1194, 1195, 1192, 2573, 1207, 1206,
	1216, 1217, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1208,
	2793, 1459, 2571, 2458, 2882, 2781, 2780, 2157, 2460, 2779,
	2412, 2771, 3252, 2616, 2765, 1628, 1776, 2764, 2574, 2575,
	2782, 2763, 1459, 3698, 1193, 1194, 1195, 1192, 1124, 2762,
	2611, 2489, 1124, 2545, 2293, 1193, 1194, 1195, 1192, 1461,
	2195, 2042, 2651, 2652, 2551, 1193, 1194, 1195, 1192, 1936,
	2572, 633, 1113, 2041, 2469, 2040, 2036, 2682, 2035, 2547,
	2532, 2547, 1122, 2688, 1991, 2527, 1990, 1989, 2459, 1573,
	1322, 3139, 706, 3015, 2631, 708, 2517, 2466, 2421, 2519,
	707, 3860, 2699, 2524, 1146, 3564, 3565, 2692, 2693, 2541,
	3859, 2508, 1124, 3380, 2602, 1193, 1194, 1195, 1192, 1106,
	2720, 3834, 3802, 3801, 1507, 3798, 3736, 1124, 1124, 1124,
	1865, 1010, 3718, 1124, 3663, 2731, 2732, 2733, 2734, 1124,
	2741, 3430, 2742, 2743, 1998, 2744, 2553, 2746, 2666, 3645,
	3636, 2537, 2538, 3617, 3612, 2670, 2667, 3611, 2741, 1616,
	1216, 1217, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1208,
	2387, 3567, 3555, 3554, 2726, 2727, 1105, 3530, 3476, 2730,
	3437, 3407, 2540, 3403, 2799, 2737, 3400, 3399, 1887, 1193,
	1194, 1195, 1192, 610, 2679, 2689, 3378, 1506, 3376, 1936,
	1124, 1952, 1952, 1952, 1952, 1199, 1200, 1201, 1202, 1203,
	1204, 1205, 1197, 1124, 1952, 3355, 3354, 2387, 2146, 3351,
	757, 126, 3349, 2633, 2701, 2635, 126, 2803, 3282, 3242,
	2632, 2132, 3241, 1461, 2804, 2947, 3238, 2718, 3224, 2649,
	3208, 2718, 3206, 2714, 634, 634, 2823, 2673, 2325, 3134,
	2681, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2725, 2823,
	2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346,
	2347, 8, 2349, 2350, 2351, 2352, 2353, 7, 2354, 2687,
	2700, 640, 2703, 3133, 126, 2145, 3128, 2716, 3123, 2512,
	2513, 2722, 3122, 3040, 3002, 2946, 1810, 3001, 2580, 2581,
	203, 2997, 2729, 2837, 2586, 203, 2992, 1193, 1194, 1195,
	1192, 2719, 1193, 1194, 1195, 1192, 2200, 2926, 2875, 3767,
	2877, 2923, 1193, 1194, 1195, 1192, 2761, 1730, 2881, 1730,
	2855, 2792, 2898, 2784, 2774, 2773, 2691, 2772, 2768, 1776,
	2767, 2694, 2766, 2612, 1776, 2911, 1193, 1194, 1195, 1192,
	2509, 1461, 812, 811, 2918, 2074, 2045, 2805, 2038, 2698,
	1786, 1785, 2811, 1193, 1194, 1195, 1192, 1574, 2690, 1272,
	2866, 1268, 2808, 1267, 2836, 2838, 1109, 2695, 2696, 879,
	3694, 3551, 2840, 3550, 3539, 2839, 1010, 3402, 3387, 2872,
	2929, 2856, 2853, 3266, 2876, 3265, 3264, 1010, 3235, 3667,
	3220, 1008, 2824, 2825, 2826, 2827, 3401, 3218, 126, 3217,
	2893, 3214, 1533, 1534, 2951, 3213, 3207, 1775, 1424, 3205,
	3189, 2904, 2897, 126, 3179, 126, 1193, 1194, 1195, 1192,
	3178, 3164, 3163, 1193, 1194, 1195, 1192, 2895, 3069, 3389,
	2940, 3005, 2942, 1467, 2984, 3388, 1541, 2905, 1538, 2995,
	2952, 1542, 186, 2996, 175, 148, 2874, 2999, 3000, 2873,
	2870, 2920, 2915, 2945, 3335, 1124, 1193, 1194, 1195, 1192,
	2937, 3018, 1193, 1194, 1195, 1192, 2936, 2889, 2896, 2894,
	2930, 3034, 2891, 3203, 2864, 2629, 2907, 634, 2908, 2484,
	2906, 1193, 1194, 1195, 1192, 2480, 2914, 2479, 2174, 3049,
	1124, 2167, 2161, 634, 2160, 1124, 1124, 2159, 1703, 2927,
	1193, 1194, 1195, 1192, 1952, 2249, 1526, 3067, 2569, 2158,
	2156, 2934, 180, 3710, 2152, 2928, 1527, 1528, 2151, 2149,
	2140, 2941, 2943, 2944, 2137, 2136, 2313, 2044, 1769, 1768,
	1767, 2986, 1733, 2950, 1732, 3043, 3604, 1723, 3094, 186,
	3097, 1473, 3097, 3097, 1471, 2713, 3785, 1124, 1262, 3693,
	1010, 3631, 1010, 3619, 3614, 1521, 3510, 1010, 3493, 3101,
	1193, 1194, 1195, 1192, 3489, 2666, 3118, 3467, 3450, 2991,
	3004, 3363, 2640, 2990, 1461, 1461, 3052, 3114, 3361, 2130,
	3333, 3056, 3332, 1010, 3329, 3116, 3003, 3081, 3083, 3328,
	1207, 1206, 1216, 1217, 1209, 1210, 1211, 1212, 1213, 1214,
	1215, 1208, 1193, 1194, 1195, 1192, 3065, 3077, 3294, 180,
	3119, 3120, 3035, 3036, 3291, 3289, 3255, 3042, 1532, 3051,
	1523, 634, 1537, 1540, 3054, 3055, 1007, 3018, 1009, 1529,
	1459, 1459, 1365, 3066, 3062, 3093, 1429, 2938, 2939, 1936,
	1936, 2800, 3102, 2724, 2675, 3071, 2674, 2283, 3076, 2668,
	2282, 2634, 2597, 2494, 3092, 1193, 1194, 1195, 1192, 3098,
	3099, 1699, 3708, 3465, 2949, 2849, 2753, 2754, 1696, 2403,
	2355, 2250, 1698, 1695, 1697, 1701, 1702, 2221, 3103, 2194,
	1700, 2769, 2770, 1658, 180, 2004, 1124, 1800, 1782, 1601,
	2563, 1193, 1194, 1195, 1192, 1555, 2959, 2960, 1530, 3177,
	1321, 1306, 2961, 2962, 2963, 2964, 2806, 2965, 2966, 2967,
	2968, 2969, 2970, 2971, 2972, 2973, 2974, 1207, 1206, 1216,
	1217, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1208, 1302,
	1301, 1300, 2421, 1426, 1299, 1298, 3100, 3816, 2948, 1297,
	2138, 3706, 2596, 3130, 1296, 634, 3704, 3129, 3136, 3132,
	1295, 1294, 1293, 3142, 3143, 1292, 1291, 3070, 3135, 3153,
	3140, 1290, 3072, 3073, 3124, 1193, 1194, 1195, 1192, 1193,
	1194, 1195, 1192, 1289, 1288, 3157, 1287, 2539, 1286, 1285,
	1816, 1284, 3202, 1283, 1282, 1821, 3160, 3161, 3162, 3204,
	1281, 1280, 1279, 1278, 3166, 1275, 1274, 1273, 3172, 1271,
	3075, 1207, 1206, 1216, 1217, 1209, 1210, 1211, 1212, 1213,
	1214, 1215, 1208, 1270, 1269, 3227, 1266, 3814, 2595, 1259,
	3219, 1258, 3190, 1256, 1706, 1707, 1708, 1709, 1710, 1711,
	1704, 1705, 3192, 3191, 1193, 1194, 1195, 1192, 1255, 3196,
	3209, 2594, 1254, 1253, 3195, 1193, 1194, 1195, 1192, 2593,
	1252, 1251, 1871, 1872, 1250, 1249, 1248, 3201, 126, 126,
	1008, 3772, 2592, 1247, 3229, 1246, 1245, 3259, 1193, 1194,
	1195, 1192, 2591, 1240, 2547, 1239, 1193, 1194, 1195, 1192,
	1238, 1237, 1157, 2387, 1952, 3278, 1107, 1010, 3144, 1193,
	1194, 1195, 1192, 3330, 1010, 3149, 3150, 2254, 2236, 1193,
	1194, 1195, 1192, 1145, 3156, 3152, 2656, 1993, 3221, 3297,
	2414, 3234, 1124, 1993, 1993, 1993, 2590, 3225, 3237, 2047,
	2589, 3094, 1156, 2833, 2831, 1124, 3155, 3154, 2834, 2832,
	2830, 2829, 2835, 1225, 2379, 2380, 1124, 2828, 3344, 3472,
	2507, 2497, 1461, 1193, 1194, 1195, 1192, 1193, 1194, 1195,
	1192, 1359, 3038, 3365, 3249, 3250, 111, 3090, 3298, 3091,
	3280, 3366, 1936, 1828, 1829, 2323, 1124, 1776, 59, 2910,
	58, 3337, 2588, 1823, 1824, 1825, 3193, 3194, 3346, 3340,
	3167, 1776, 2737, 3288, 3360, 3290, 3277, 3362, 3276, 1924,
	3327, 1515, 2531, 3320, 2492, 203, 3284, 2587, 1459, 1193,
	1194, 1195, 1192, 1569, 3368, 2584, 1549, 2749, 1124, 3357,
	3364, 2209, 2823, 3367, 2750, 2751, 2752, 636, 3334, 2006,
	3336, 3339, 2512, 2513, 1193, 1194, 1195, 1192, 1151, 637,
	3343, 638, 1193, 1194, 1195, 1192, 2583, 3013, 3006, 3352,
	3348, 2582, 3350, 2702, 2676, 3353, 2275, 3404, 2245, 3356,
	1832, 3358, 1799, 3410, 2823, 1719, 1718, 1124, 2576, 3359,
	1317, 1318, 3825, 1193, 1194, 1195, 1192, 3385, 1193, 1194,
	1195, 1192, 2566, 1315, 1316, 3616, 1124, 1461, 1461, 1310,
	1313, 1314, 3049, 3121, 3371, 1193, 1194, 1195, 1192, 3382,
	2542, 2366, 3445, 2361, 3445, 1937, 3408, 3409, 3381, 1193,
	1194, 1195, 1192, 1311, 1312, 1421, 1420, 1184, 3439, 3440,
	1124, 3461, 1124, 3435, 3159, 2858, 2208, 1193, 1194, 1195,
	1192, 2076, 3433, 3464, 1373, 3466, 1350, 1396, 3369, 1461,
	3792, 3790, 3279, 1459, 1669, 1671, 3750, 3417, 3416, 3415,
	3728, 3727, 3283, 3725, 3670, 1010, 3632, 634, 3524, 1124,
	1124, 3436, 3523, 1124, 1124, 3462, 1622, 3449, 1622, 3377,
	3438, 3448, 1193, 1194, 1195, 1192, 3210, 3186, 3398, 3442,
	3185, 3280, 3412, 2061, 3460, 3170, 2308, 2278, 3512, 1571,
	3507, 3169, 1834, 3470, 3521, 1669, 3497, 3498, 2868, 1371,
	3508, 3509, 3473, 3525, 3526, 3433, 3433, 3469, 3327, 3433,
	3433, 3320, 3477, 3818, 3817, 3817, 1461, 3475, 2374, 2378,
	2379, 2380, 2375, 3228, 2376, 2381, 2913, 1470, 2377, 3463,
	2238, 640, 2139, 1325, 1142, 3818, 3491, 3553, 3165, 3518,
	1121, 1388, 2222, 2223, 2224, 3545, 3517, 190, 3, 67,
	2, 3513, 3537, 3519, 3837, 3838, 1, 2240, 2241, 2242,
	2243, 2603, 1780, 2369, 126, 870, 871, 872, 873, 1319,
	1121, 874, 1459, 869, 3536, 3540, 1438, 2396, 3544, 3574,
	3532, 3585, 3579, 1207, 1206, 1216, 1217, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1208, 1984, 1465, 1784, 1124, 876,
	2374, 2378, 2379, 2380, 2375, 2842, 2376, 2381, 2843, 3608,
	2377, 3602, 2953, 3158, 2845, 2620, 3573, 2096, 2812, 2359,
	2225, 3033, 1360, 921, 1725, 3580, 1584, 3385, 1033, 3582,
	1135, 126, 3594, 3581, 1010, 3390, 1581, 3391, 126, 1134,
	3598, 1124, 1132, 1674, 1622, 759, 1461, 2050, 2801, 2775,
	3520, 126, 3824, 3457, 3458, 3853, 3784, 3827, 3577, 1599,
	743, 3719, 3637, 126, 3788, 3615, 1207, 1206, 1216, 1217,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1208, 3624, 3639,
	3535, 2101, 3626, 3655, 1189, 2890, 945, 3433, 3659, 800,
	770, 1257, 3650, 1562, 1244, 2957, 2955, 1035, 769, 3256,
	3257, 3258, 1459, 1124, 3633, 3262, 3263, 3248, 2645, 2861,
	3587, 1032, 946, 2033, 3634, 3533, 3671, 1516, 1520, 2274,
	3595, 3689, 3471, 1467, 3086, 2710, 1544, 3684, 3292, 3394,
	3392, 3666, 3657, 3393, 676, 1963, 608, 992, 1993, 3511,
	3662, 2046, 3665, 677, 3688, 2253, 3741, 3618, 901, 3433,
	1124, 3673, 2235, 902, 894, 2664, 2663, 1639, 1461, 3695,
	1198, 3713, 3716, 1656, 2975, 2976, 3703, 3705, 3707, 3709,
	1235, 3687, 715, 2126, 2642, 3717, 3682, 3315, 3696, 2854,
	66, 65, 64, 63, 2015, 211, 761, 3702, 210, 3428,
	3715, 3829, 741, 740, 3712, 739, 3433, 738, 737, 736,
	2373, 3724, 2371, 1461, 3722, 2370, 3585, 1947, 1946, 2013,
	3047, 2740, 2735, 1876, 1459, 1874, 2728, 2303, 2310, 1873,
	3769, 3699, 3760, 933, 1219, 3749, 1223, 3700, 3768, 3488,
	2785, 3384, 3754, 3755, 3751, 3753, 1822, 2299, 3765, 3752,
	1893, 2756, 1220, 1222, 1218, 1890, 1221, 1207, 1206, 1216,
	1217, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1208, 1459,
	1889, 2748, 3484, 3777, 3478, 3778, 3797, 3779, 3791, 3780,
	3793, 3794, 3781, 1921, 3583, 3444, 3299, 3789, 3787, 3300,
	3306, 1124, 3650, 2244, 1058, 3796, 1054, 1056, 1057, 1055,
	2552, 2280, 3008, 930, 931, 2217, 2216, 2214, 3608, 2213,
	1335, 3806, 3658, 3737, 973, 3411, 2419, 3765, 2417, 3808,
	3809, 3807, 1104, 3815, 3823, 3151, 3831, 3813, 3147, 3830,
	3812, 2058, 2072, 3819, 3820, 3821, 3822, 3804, 2909, 1948,
	1944, 2814, 3558, 1827, 3842, 3835, 1124, 2123, 895, 2233,
	109, 100, 165, 52, 164, 51, 3688, 3844, 107, 3843,
	3846, 162, 50, 95, 1951, 94, 3765, 3855, 3852, 106,
	160, 1207, 1206, 1216, 1217, 1209, 1210, 1211, 1212, 1213,
	1214, 1215, 1208, 49, 195, 194, 197, 196, 193, 2470,
	3862, 2471, 1622, 192, 1504, 191, 2680, 975, 3831, 3869,
	974, 3830, 3868, 186, 56, 175, 148, 3514, 3855, 3870,
	3729, 3515, 3447, 864, 3874, 40, 39, 38, 34, 13,
	12, 176, 3872, 35, 22, 21, 1588, 20, 168, 26,
	32, 31, 177, 119, 118, 30, 117, 959, 126, 116,
	115, 126, 126, 114, 126, 934, 113, 29, 19, 44,
	43, 124, 1207, 1206, 1216, 1217, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1208, 42, 9, 112, 105, 103, 28,
	104, 101, 936, 180, 98, 96, 78, 77, 688, 687,
	694, 684, 76, 91, 1008, 90, 89, 126, 88, 87,
	691, 692, 86, 693, 697, 84, 1008, 678, 85, 944,
	75, 74, 73, 72, 71, 93, 99, 702, 97, 82,
	126, 92, 83, 81, 80, 79, 70, 69, 68, 146,
	145, 144, 143, 142, 140, 141, 688, 687, 694, 684,
	139, 138, 137, 136, 135, 958, 956, 134, 691, 692,
	45, 693, 697, 46, 47, 678, 48, 156, 155, 157,
	130, 131, 159, 132, 133, 702, 161, 955, 158, 163,
	153, 151, 154, 2859, 2860, 152, 150, 61, 11, 929,
	108, 18, 25, 4, 0, 0, 0, 0, 0, 0,
	935, 968, 3627, 0, 0, 0, 0, 0, 0, 1225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 706,
	0, 0, 708, 0, 964, 0, 0, 707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 174, 184, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 969, 0, 173, 167, 166, 3672, 0, 0, 0,
	62, 3676, 3677, 0, 0, 0, 0, 0, 0, 0,
	952, 0, 950, 954, 972, 0, 0, 0, 951, 948,
	947, 0, 953, 938, 939, 937, 940, 941, 942, 943,
	0, 970, 3697, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 967, 679, 681, 680, 0,
	0, 0, 0, 0, 0, 0, 686, 0, 0, 0,
	0, 169, 170, 171, 1922, 0, 0, 0, 690, 1883,
	0, 0, 0, 0, 0, 705, 0, 0, 0, 0,
	0, 962, 683, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 178, 0, 679, 681, 680, 0, 0, 1924,
	1892, 0, 957, 0, 686, 0, 0, 0, 0, 1925,
	1926, 0, 0, 120, 0, 0, 690, 172, 0, 121,
	0, 0, 0, 705, 0, 0, 0, 0, 0, 0,
	683, 0, 0, 0, 673, 1891, 0, 0, 1193, 1194,
	1195, 1192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1899, 0, 0, 0, 0, 3041, 0, 3799, 3800,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3053, 0, 0, 0, 122, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 932, 0, 0, 55,
	0, 0, 685, 689, 695, 0, 696, 698, 0, 0,
	699, 700, 701, 0, 0, 703, 704, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1703, 0, 1915,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2390, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	685, 689, 695, 0, 696, 698, 0, 0, 699, 700,
	701, 1703, 0, 703, 704, 0, 688, 687, 694, 684,
	0, 0, 0, 0, 0, 0, 0, 0, 691, 692,
	0, 693, 697, 181, 182, 678, 183, 0, 0, 0,
	0, 149, 0, 0, 0, 702, 53, 0, 0, 0,
	1882, 1884, 1881, 0, 1878, 1951, 0, 0, 0, 1903,
	1993, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	1909, 0, 0, 0, 0, 0, 0, 0, 1894, 0,
	1877, 0, 0, 0, 0, 0, 0, 0, 0, 706,
	1897, 1931, 708, 0, 1898, 1900, 1902, 707, 1904, 1905,
	1906, 1910, 1911, 1912, 1914, 1917, 1918, 1919, 0, 0,
	0, 0, 123, 41, 0, 1907, 1916, 1908, 0, 54,
	0, 682, 0, 0, 0, 1922, 0, 1886, 0, 0,
	1883, 127, 128, 0, 0, 129, 0, 0, 0, 0,
	1699, 0, 0, 0, 0, 0, 0, 1696, 0, 1923,
	0, 1698, 1695, 1697, 1701, 1702, 0, 0, 0, 1700,
	1924, 1892, 0, 0, 0, 0, 0, 0, 0, 682,
	1925, 1926, 0, 0, 1699, 0, 1879, 1880, 0, 0,
	0, 1696, 0, 0, 3198, 1698, 1695, 1697, 1701, 1702,
	0, 0, 0, 1700, 1920, 0, 1891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1896, 1899, 0, 0, 0, 0, 0, 1895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 679, 681, 680, 0, 0, 0,
	0, 0, 1913, 0, 686, 0, 0, 0, 0, 0,
	0, 1901, 0, 0, 0, 0, 690, 0, 0, 0,
	0, 0, 0, 705, 1928, 1927, 0, 0, 0, 0,
	683, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1915, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
	1692, 1693, 1694, 1706, 1707, 1708, 1709, 1710, 1711, 1704,
	1705, 0, 0, 0, 0, 0, 0, 1888, 0, 0,
	0, 0, 0, 0, 0, 0, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1706, 1707, 1708,
	1709, 1710, 1711, 1704, 1705, 0, 0, 0, 0, 0,
	0, 1882, 2705, 1881, 0, 2704, 0, 0, 0, 1930,
	1903, 0, 1929, 0, 0, 0, 0, 0, 0, 0,
	0, 1909, 0, 0, 0, 0, 0, 0, 0, 0,
	685, 689, 695, 0, 696, 698, 0, 0, 699, 700,
	701, 1897, 1931, 703, 704, 1898, 1900, 1902, 0, 1904,
	1905, 1906, 1910, 1911, 1912, 1914, 1917, 1918, 1919, 0,
	0, 1951, 1951, 1951, 1951, 0, 1907, 1916, 1908, 0,
	0, 0, 0, 0, 1951, 0, 0, 0, 1886, 0,
	0, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1923, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1879, 1880, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1920, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 1896, 0, 0, 126, 0, 0, 0, 1895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 1913, 0, 0, 0, 126, 0, 682,
	0, 0, 1901, 0, 0, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 1928, 1927, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	1088, 1090, 1092, 1094, 1095, 1097, 3496, 1102, 1098, 1099,
	1100, 1101, 0, 1079, 1080, 1081, 1082, 1060, 1061, 1085,
	0, 1063, 0, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1075, 1077, 1073, 1074, 1083, 0, 1888, 1076,
	0, 0, 0, 0, 1087, 1089, 1091, 1093, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1922, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	1930, 0, 1078, 1929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3443, 0, 0, 0, 0, 0, 1924,
	0, 1076, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 126, 0, 0, 0, 0, 126, 0, 0,
	0, 180, 0, 0, 1951, 1922, 0, 0, 0, 0,
	0, 1899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1062, 0, 126, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1924, 1084, 1088, 1090, 1092, 1094, 1095, 1097, 0, 1102,
	1098, 1099, 1100, 1101, 0, 1079, 1080, 1081, 1082, 1060,
	1061, 1085, 0, 1063, 0, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1075, 1077, 1073, 1074, 1083, 1915,
	0, 2548, 2549, 1062, 0, 0, 1087, 1089, 1091, 1093,
	1096, 0, 1899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 1088, 1090, 1092, 1094, 1095, 1097,
	0, 1102, 1098, 1099, 1100, 1101, 0, 1079, 1080, 1081,
	1082, 1060, 1061, 1085, 1078, 1063, 0, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1073, 1074,
	1083, 0, 0, 0, 0, 0, 0, 0, 1087, 1089,
	1091, 1093, 1096, 0, 0, 0, 3578, 0, 0, 1903,
	1915, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	1897, 1931, 0, 0, 1898, 1900, 1902, 0, 1904, 1905,
	1906, 1910, 1911, 1912, 1914, 1917, 1918, 1919, 0, 0,
	0, 0, 0, 0, 0, 1907, 1916, 1908, 0, 0,
	0, 0, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1903, 0, 0, 0, 0, 0, 0, 0, 0, 1923,
	0, 1909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1897, 1931, 0, 0, 1898, 1900, 1902, 0, 1904,
	1905, 1906, 1910, 1911, 1912, 1914, 1917, 1918, 1919, 0,
	0, 0, 0, 0, 1920, 0, 1907, 1916, 1908, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1896, 0, 0, 0, 0, 0, 0, 1895, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	1923, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 1913, 0, 0, 0, 0, 0, 0, 0,
	0, 1901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1920, 0, 0, 0, 0,
	0, 0, 0, 0, 1951, 0, 0, 0, 0, 0,
	0, 0, 1896, 0, 0, 0, 0, 0, 0, 1895,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1913, 0, 0, 0, 0, 0, 0,
	0, 0, 1901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 777, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 768, 536, 487, 405, 358, 554,
	553, 0, 0, 835, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 722, 0, 0, 758,
	812, 811, 745, 755, 0, 0, 287, 209, 482, 602,
	484, 483, 746, 0, 747, 751, 754, 750, 748, 749,
	0, 827, 0, 0, 0, 0, 0, 0, 714, 726,
	0, 731, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 724, 0, 0, 0,
	0, 778, 0, 725, 0, 0, 773, 752, 756, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 753,
	776, 780, 308, 849, 774, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	850, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 771, 0, 599, 0, 438, 0, 0, 833, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 775,
	0, 395, 376, 846, 126, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 1727, 1726, 1728, 450, 342,
	343, 0, 321, 269, 270, 617, 831, 372, 564, 597,
	598, 489, 0, 845, 826, 828, 829, 832, 836, 837,
	838, 839, 840, 842, 844, 848, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 847, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 779, 539, 540,
	362, 363, 364, 365, 834, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 856, 830, 855, 857, 858, 854, 859,
	860, 841, 735, 0, 786, 852, 851, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 819, 793, 794, 795, 732, 796, 790, 791, 733,
	792, 820, 784, 816, 817, 760, 787, 797, 815, 798,
	818, 821, 822, 861, 862, 804, 788, 235, 863, 801,
	823, 814, 813, 799, 785, 824, 825, 767, 762, 802,
	803, 789, 807, 808, 809, 734, 781, 782, 783, 805,
	806, 763, 764, 765, 766, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 810, 607, 409, 777, 618, 485, 486, 619, 596,
	0, 727, 0, 374, 0, 500, 533, 522, 606, 488,
	0, 0, 0, 0, 0, 0, 730, 0, 0, 0,
	314, 1777, 0, 344, 537, 519, 529, 520, 505, 506,
	507, 514, 324, 508, 509, 510, 480, 511, 481, 512,
	513, 768, 536, 487, 405, 358, 554, 553, 0, 0,
	835, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	1975, 0, 0, 722, 0, 0, 758, 812, 811, 745,
	755, 0, 0, 287, 209, 482, 602, 484, 483, 746,
	0, 747, 751, 754, 750, 748, 749, 0, 827, 0,
	0, 0, 0, 0, 0, 714, 726, 0, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 723, 724, 0, 0, 0, 0, 778, 0,
	725, 0, 0, 1976, 752, 756, 0, 0, 0, 0,
	277, 411, 428, 288, 401, 441, 293, 408, 283, 373,
	397, 0, 0, 279, 426, 407, 355, 334, 335, 278,
	0, 392, 312, 326, 309, 371, 753, 776, 780, 308,
	849, 774, 436, 281, 0, 435, 370, 422, 427, 356,
	350, 280, 424, 354, 349, 338, 316, 850, 339, 340,
	330, 382, 348, 383, 331, 360, 359, 361, 0, 0,
	0, 0, 0, 464, 465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 771, 0,
	599, 0, 438, 0, 0, 833, 0, 0, 0, 410,
	0, 0, 341, 0, 0, 0, 775, 0, 395, 376,
	846, 0, 0, 393, 346, 423, 384, 429, 412, 437,
	389, 385, 272, 413, 311, 357, 284, 286, 306, 313,
	315, 317, 318, 366, 367, 379, 400, 414, 415, 416,
	310, 294, 394, 295, 328, 296, 273, 302, 300, 303,
	402, 304, 275, 380, 420, 0, 323, 390, 353, 276,
	352, 381, 419, 418, 285, 445, 451, 452, 541, 0,
	457, 622, 623, 624, 466, 471, 472, 473, 475, 476,
	477, 478, 542, 559, 526, 496, 459, 550, 493, 497,
	498, 562, 0, 0, 0, 450, 342, 343, 0, 321,
	269, 270, 617, 831, 372, 564, 597, 598, 489, 0,
	845, 826, 828, 829, 832, 836, 837, 838, 839, 840,
	842, 844, 848, 616, 0, 543, 558, 620, 557, 613,
	378, 0, 399, 555, 502, 0, 547, 521, 0, 548,
	517, 552, 0, 491, 0, 406, 431, 443, 460, 463,
	492, 577, 578, 579, 274, 462, 581, 582, 583, 584,
	585, 586, 587, 580, 847, 524, 501, 527, 442, 504,
	503, 0, 0, 538, 779, 539, 540, 362, 363, 364,
	365, 834, 565, 292, 461, 388, 0, 525, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 531, 528, 625,
	0, 588, 589, 0, 0, 455, 456, 320, 327, 474,
	329, 291, 377, 322, 440, 336, 0, 467, 532, 468,
	591, 594, 592, 593, 369, 332, 333, 403, 337, 347,
	391, 439, 375, 396, 289, 430, 404, 351, 518, 545,
	856, 830, 855, 857, 858, 854, 859, 860, 841, 735,
	0, 786, 852, 851, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 573, 572, 571, 570,
	569, 568, 567, 566, 0, 0, 515, 417, 301, 263,
	297, 298, 305, 614, 611, 421, 615, 0, 271, 495,
	345, 0, 386, 319, 560, 561, 0, 0, 819, 793,
	794, 795, 732, 796, 790, 791, 733, 792, 820, 784,
	816, 817, 760, 787, 797, 815, 798, 818, 821, 822,
	861, 862, 804, 788, 235, 863, 801, 823, 814, 813,
	799, 785, 824, 825, 767, 762, 802, 803, 789, 807,
	808, 809, 734, 781, 782, 783, 805, 806, 763, 764,
	765, 766, 0, 0, 0, 446, 447, 448, 470, 0,
	432, 494, 612, 0, 0, 0, 0, 0, 0, 0,
	544, 556, 590, 0, 600, 601, 603, 605, 810, 607,
	409, 0, 618, 485, 486, 619, 596, 0, 727, 186,
	777, 0, 0, 0, 0, 0, 0, 0, 0, 374,
	0, 500, 533, 522, 606, 488, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 0, 314, 0, 0, 344,
	537, 519, 529, 520, 505, 506, 507, 514, 324, 508,
	509, 510, 480, 511, 481, 512, 513, 1228, 536, 487,
	405, 358, 554, 553, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 722,
	0, 0, 758, 812, 811, 745, 755, 0, 0, 287,
	209, 482, 602, 484, 483, 746, 0, 747, 751, 754,
	750, 748, 749, 0, 827, 0, 0, 0, 0, 0,
	0, 714, 726, 0, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 723, 724,
	0, 0, 0, 0, 778, 0, 725, 0, 0, 773,
	752, 756, 0, 0, 0, 0, 277, 411, 428, 288,
	401, 441, 293, 408, 283, 373, 397, 0, 0, 279,
	426, 407, 355, 334, 335, 278, 0, 392, 312, 326,
	309, 371, 753, 776, 780, 308, 849, 774, 436, 281,
	0, 435, 370, 422, 427, 356, 350, 280, 424, 354,
	349, 338, 316, 850, 339, 340, 330, 382, 348, 383,
	331, 360, 359, 361, 0, 0, 0, 0, 0, 464,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 595, 771, 0, 599, 0, 438, 0,
	0, 833, 0, 0, 0, 410, 0, 0, 341, 0,
	0, 0, 775, 0, 395, 376, 846, 0, 0, 393,
	346, 423, 384, 429, 412, 437, 389, 385, 272, 413,
	311, 357, 284, 286, 306, 313, 315, 317, 318, 366,
	367, 379, 400, 414, 415, 416, 310, 294, 394, 295,
	328, 296, 273, 302, 300, 303, 402, 304, 275, 380,
	420, 0, 323, 390, 353, 276, 352, 381, 419, 418,
	285, 445, 451, 452, 541, 0, 457, 622, 623, 624,
	466, 471, 472, 473, 475, 476, 477, 478, 542, 559,
	526, 496, 459, 550, 493, 497, 498, 562, 0, 0,
	0, 450, 342, 343, 0, 321, 269, 270, 617, 831,
	372, 564, 597, 598, 489, 0, 845, 826, 828, 829,
	832, 836, 837, 838, 839, 840, 842, 844, 848, 616,
	0, 543, 558, 620, 557, 613, 378, 0, 399, 555,
	502, 0, 547, 521, 0, 548, 517, 552, 0, 491,
	0, 406, 431, 443, 460, 463, 492, 577, 578, 579,
	274, 462, 581, 582, 583, 584, 585, 586, 587, 580,
	847, 524, 501, 527, 442, 504, 503, 0, 0, 538,
	779, 539, 540, 362, 363, 364, 365, 834, 565, 292,
	461, 388, 0, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 531, 528, 625, 0, 588, 589, 0,
	0, 455, 456, 320, 327, 474, 329, 291, 377, 322,
	440, 336, 0, 467, 532, 468, 591, 594, 592, 593,
	369, 332, 333, 403, 337, 347, 391, 439, 375, 396,
	289, 430, 404, 351, 518, 545, 856, 830, 855, 857,
	858, 854, 859, 860, 841, 735, 0, 786, 852, 851,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 573, 572, 571, 570, 569, 568, 567, 566,
	0, 0, 515, 417, 301, 263, 297, 298, 305, 614,
	611, 421, 615, 0, 271, 495, 345, 149, 386, 319,
	560, 561, 0, 0, 819, 793, 794, 795, 732, 796,
	790, 791, 733, 792, 820, 784, 816, 817, 760, 787,
	797, 815, 798, 818, 821, 822, 861, 862, 804, 788,
	235, 863, 801, 823, 814, 813, 799, 785, 824, 825,
	767, 762, 802, 803, 789, 807, 808, 809, 734, 781,
	782, 783, 805, 806, 763, 764, 765, 766, 0, 0,
	0, 446, 447, 448, 470, 0, 432, 494, 612, 0,
	0, 0, 0, 0, 0, 0, 544, 556, 590, 0,
	600, 601, 603, 605, 810, 607, 409, 777, 618, 485,
	486, 619, 596, 0, 727, 0, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 0, 314, 3871, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 768, 536, 487, 405, 358, 554,
	553, 0, 0, 835, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 722, 0, 0, 758,
	812, 811, 745, 755, 0, 0, 287, 209, 482, 602,
	484, 483, 746, 0, 747, 751, 754, 750, 748, 749,
	0, 827, 0, 0, 0, 0, 0, 0, 714, 726,
	0, 731, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 724, 0, 0, 0,
	0, 778, 0, 725, 0, 0, 773, 752, 756, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 753,
	776, 780, 308, 849, 774, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	850, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 771, 0, 599, 0, 438, 0, 0, 833, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 775,
	0, 395, 376, 846, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 831, 372, 564, 597,
	598, 489, 0, 845, 826, 828, 829, 832, 836, 837,
	838, 839, 840, 842, 844, 848, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 847, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 779, 539, 540,
	362, 363, 364, 365, 834, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 856, 830, 855, 857, 858, 854, 859,
	860, 841, 735, 0, 786, 852, 851, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 819, 793, 794, 795, 732, 796, 790, 791, 733,
	792, 820, 784, 816, 817, 760, 787, 797, 815, 798,
	818, 821, 822, 861, 862, 804, 788, 235, 863, 801,
	823, 814, 813, 799, 785, 824, 825, 767, 762, 802,
	803, 789, 807, 808, 809, 734, 781, 782, 783, 805,
	806, 763, 764, 765, 766, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 810, 607, 409, 777, 618, 485, 486, 619, 596,
	0, 727, 0, 374, 0, 500, 533, 522, 606, 488,
	0, 0, 0, 0, 0, 0, 730, 0, 0, 0,
	314, 0, 0, 344, 537, 519, 529, 520, 505, 506,
	507, 514, 324, 508, 509, 510, 480, 511, 481, 512,
	513, 768, 536, 487, 405, 358, 554, 553, 0, 0,
	835, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 722, 0, 0, 758, 812, 811, 745,
	755, 0, 0, 287, 209, 482, 602, 484, 483, 746,
	0, 747, 751, 754, 750, 748, 749, 0, 827, 0,
	0, 0, 0, 0, 0, 714, 726, 0, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 723, 724, 0, 0, 0, 0, 778, 0,
	725, 0, 0, 773, 752, 756, 0, 0, 0, 0,
	277, 411, 428, 288, 401, 441, 293, 408, 283, 373,
	397, 0, 0, 279, 426, 407, 355, 334, 335, 278,
	0, 392, 312, 326, 309, 371, 753, 776, 780, 308,
	849, 774, 436, 281, 0, 435, 370, 422, 427, 356,
	350, 280, 424, 354, 349, 338, 316, 850, 339, 340,
	330, 382, 348, 383, 331, 360, 359, 361, 0, 0,
	0, 0, 0, 464, 465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 771, 0,
	599, 0, 438, 0, 0, 833, 0, 0, 0, 410,
	0, 0, 341, 0, 0, 0, 775, 0, 395, 376,
	846, 3766, 0, 393, 346, 423, 384, 429, 412, 437,
	389, 385, 272, 413, 311, 357, 284, 286, 306, 313,
	315, 317, 318, 366, 367, 379, 400, 414, 415, 416,
	310, 294, 394, 295, 328, 296, 273, 302, 300, 303,
	402, 304, 275, 380, 420, 0, 323, 390, 353, 276,
	352, 381, 419, 418, 285, 445, 451, 452, 541, 0,
	457, 622, 623, 624, 466, 471, 472, 473, 475, 476,
	477, 478, 542, 559, 526, 496, 459, 550, 493, 497,
	498, 562, 0, 0, 0, 450, 342, 343, 0, 321,
	269, 270, 617, 831, 372, 564, 597, 598, 489, 0,
	845, 826, 828, 829, 832, 836, 837, 838, 839, 840,
	842, 844, 848, 616, 0, 543, 558, 620, 557, 613,
	378, 0, 399, 555, 502, 0, 547, 521, 0, 548,
	517, 552, 0, 491, 0, 406, 431, 443, 460, 463,
	492, 577, 578, 579, 274, 462, 581, 582, 583, 584,
	585, 586, 587, 580, 847, 524, 501, 527, 442, 504,
	503, 0, 0, 538, 779, 539, 540, 362, 363, 364,
	365, 834, 565, 292, 461, 388, 0, 525, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 531, 528, 625,
	0, 588, 589, 0, 0, 455, 456, 320, 327, 474,
	329, 291, 377, 322, 440, 336, 0, 467, 532, 468,
	591, 594, 592, 593, 369, 332, 333, 403, 337, 347,
	391, 439, 375, 396, 289, 430, 404, 351, 518, 545,
	856, 830, 855, 857, 858, 854, 859, 860, 841, 735,
	0, 786, 852, 851, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 573, 572, 571, 570,
	569, 568, 567, 566, 0, 0, 515, 417, 301, 263,
	297, 298, 305, 614, 611, 421, 615, 0, 271, 495,
	345, 0, 386, 319, 560, 561, 0, 0, 819, 793,
	794, 795, 732, 796, 790, 791, 733, 792, 820, 784,
	816, 817, 760, 787, 797, 815, 798, 818, 821, 822,
	861, 862, 804, 788, 235, 863, 801, 823, 814, 813,
	799, 785, 824, 825, 767, 762, 802, 803, 789, 807,
	808, 809, 734, 781, 782, 783, 805, 806, 763, 764,
	765, 766, 0, 0, 0, 446, 447, 448, 470, 0,
	432, 494, 612, 0, 0, 0, 0, 0, 0, 0,
	544, 556, 590, 0, 600, 601, 603, 605, 810, 607,
	409, 777, 618, 485, 486, 619, 596, 0, 727, 0,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 314, 1777, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 768, 536,
	487, 405, 358, 554, 553, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	722, 0, 0, 758, 812, 811, 745, 755, 0, 0,
	287, 209, 482, 602, 484, 483, 746, 0, 747, 751,
	754, 750, 748, 749, 0, 827, 0, 0, 0, 0,
	0, 0, 714, 726, 0, 731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	724, 0, 0, 0, 0, 778, 0, 725, 0, 0,
	773, 752, 756, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 753, 776, 780, 308, 849, 774, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 850, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 771, 0, 599, 0, 438,
	0, 0, 833, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 775, 0, 395, 376, 846, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	831, 372, 564, 597, 598, 489, 0, 845, 826, 828,
	829, 832, 836, 837, 838, 839, 840, 842, 844, 848,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 847, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 779, 539, 540, 362, 363, 364, 365, 834, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 856, 830, 855,
	857, 858, 854, 859, 860, 841, 735, 0, 786, 852,
	851, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 819, 793, 794, 795, 732,
	796, 790, 791, 733, 792, 820, 784, 816, 817, 760,
	787, 797, 815, 798, 818, 821, 822, 861, 862, 804,
	788, 235, 863, 801, 823, 814, 813, 799, 785, 824,
	825, 767, 762, 802, 803, 789, 807, 808, 809, 734,
	781, 782, 783, 805, 806, 763, 764, 765, 766, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 810, 607, 409, 777, 618,
	485, 486, 619, 596, 0, 727, 0, 374, 0, 500,
	533, 522, 606, 488, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 314, 0, 0, 344, 537, 519,
	529, 520, 505, 506, 507, 514, 324, 508, 509, 510,
	480, 511, 481, 512, 513, 768, 536, 487, 405, 358,
	554, 553, 0, 0, 835, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 722, 0, 0,
	758, 812, 811, 745, 755, 0, 0, 287, 209, 482,
	602, 484, 483, 746, 0, 747, 751, 754, 750, 748,
	749, 0, 827, 0, 0, 0, 0, 0, 0, 714,
	726, 0, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 724, 1499, 0,
	0, 0, 778, 0, 725, 0, 0, 773, 752, 756,
	0, 0, 0, 0, 277, 411, 428, 288, 401, 441,
	293, 408, 283, 373, 397, 0, 0, 279, 426, 407,
	355, 334, 335, 278, 0, 392, 312, 326, 309, 371,
	753, 776, 780, 308, 849, 774, 436, 281, 0, 435,
	370, 422, 427, 356, 350, 280, 424, 354, 349, 338,
	316, 850, 339, 340, 330, 382, 348, 383, 331, 360,
	359, 361, 0, 0, 0, 0, 0, 464, 465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 771, 0, 599, 0, 438, 0, 0, 833,
	0, 0, 0, 410, 0, 0, 341, 0, 0, 0,
	775, 0, 395, 376, 846, 0, 0, 393, 346, 423,
	384, 429, 412, 437, 389, 385, 272, 413, 311, 357,
	284, 286, 306, 313, 315, 317, 318, 366, 367, 379,
	400, 414, 415, 416, 310, 294, 394, 295, 328, 296,
	273, 302, 300, 303, 402, 304, 275, 380, 420, 0,
	323, 390, 353, 276, 352, 381, 419, 418, 285, 445,
	451, 452, 541, 0, 457, 622, 623, 624, 466, 471,
	472, 473, 475, 476, 477, 478, 542, 559, 526, 496,
	459, 550, 493, 497, 498, 562, 0, 0, 0, 450,
	342, 343, 0, 321, 269, 270, 617, 831, 372, 564,
	597, 598, 489, 0, 845, 826, 828, 829, 832, 836,
	837, 838, 839, 840, 842, 844, 848, 616, 0, 543,
	558, 620, 557, 613, 378, 0, 399, 555, 502, 0,
	547, 521, 0, 548, 517, 552, 0, 491, 0, 406,
	431, 443, 460, 463, 492, 577, 578, 579, 274, 462,
	581, 582, 583, 584, 585, 586, 587, 580, 847, 524,
	501, 527, 442, 504, 503, 0, 0, 538, 779, 539,
	540, 362, 363, 364, 365, 834, 565, 292, 461, 388,
	0, 525, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 531, 528, 625, 0, 588, 589, 0, 0, 455,
	456, 320, 327, 474, 329, 291, 377, 322, 440, 336,
	0, 467, 532, 468, 591, 594, 592, 593, 369, 332,
	333, 403, 337, 347, 391, 439, 375, 396, 289, 430,
	404, 351, 518, 545, 856, 830, 855, 857, 858, 854,
	859, 860, 841, 735, 0, 786, 852, 851, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 572, 571, 570, 569, 568, 567, 566, 0, 0,
	515, 417, 301, 263, 297, 298, 305, 614, 611, 421,
	615, 0, 271, 495, 345, 0, 386, 319, 560, 561,
	0, 0, 819, 793, 794, 795, 732, 796, 790, 791,
	733, 792, 820, 784, 816, 817, 760, 787, 797, 815,
	798, 818, 821, 822, 861, 862, 804, 788, 235, 863,
	801, 823, 814, 813, 799, 785, 824, 825, 767, 762,
	802, 803, 789, 807, 808, 809, 734, 781, 782, 783,
	805, 806, 763, 764, 765, 766, 0, 0, 0, 446,
	447, 448, 470, 0, 432, 494, 612, 0, 0, 0,
	0, 0, 0, 0, 544, 556, 590, 0, 600, 601,
	603, 605, 810, 607, 409, 0, 618, 485, 486, 619,
	596, 777, 727, 0, 2147, 0, 0, 0, 0, 0,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 768, 536,
	487, 405, 358, 554, 553, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	722, 0, 0, 758, 812, 811, 745, 755, 0, 0,
	287, 209, 482, 602, 484, 483, 746, 0, 747, 751,
	754, 750, 748, 749, 0, 827, 0, 0, 0, 0,
	0, 0, 714, 726, 0, 731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	724, 0, 0, 0, 0, 778, 0, 725, 0, 0,
	773, 752, 756, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 753, 776, 780, 308, 849, 774, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 850, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 771, 0, 599, 0, 438,
	0, 0, 833, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 775, 0, 395, 376, 846, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	831, 372, 564, 597, 598, 489, 0, 845, 826, 828,
	829, 832, 836, 837, 838, 839, 840, 842, 844, 848,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 847, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 779, 539, 540, 362, 363, 364, 365, 834, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 856, 830, 855,
	857, 858, 854, 859, 860, 841, 735, 0, 786, 852,
	851, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 819, 793, 794, 795, 732,
	796, 790, 791, 733, 792, 820, 784, 816, 817, 760,
	787, 797, 815, 798, 818, 821, 822, 861, 862, 804,
	788, 235, 863, 801, 823, 814, 813, 799, 785, 824,
	825, 767, 762, 802, 803, 789, 807, 808, 809, 734,
	781, 782, 783, 805, 806, 763, 764, 765, 766, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 810, 607, 409, 777, 618,
	485, 486, 619, 596, 0, 727, 0, 374, 0, 500,
	533, 522, 606, 488, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 314, 0, 0, 344, 537, 519,
	529, 520, 505, 506, 507, 514, 324, 508, 509, 510,
	480, 511, 481, 512, 513, 768, 536, 487, 405, 358,
	554, 553, 0, 0, 835, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 722, 0, 0,
	758, 812, 811, 745, 755, 0, 0, 287, 209, 482,
	602, 484, 483, 746, 0, 747, 751, 754, 750, 748,
	749, 0, 827, 0, 0, 0, 0, 0, 0, 714,
	726, 0, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 724, 1770, 0,
	0, 0, 778, 0, 725, 0, 0, 773, 752, 756,
	0, 0, 0, 0, 277, 411, 428, 288, 401, 441,
	293, 408, 283, 373, 397, 0, 0, 279, 426, 407,
	355, 334, 335, 278, 0, 392, 312, 326, 309, 371,
	753, 776, 780, 308, 849, 774, 436, 281, 0, 435,
	370, 422, 427, 356, 350, 280, 424, 354, 349, 338,
	316, 850, 339, 340, 330, 382, 348, 383, 331, 360,
	359, 361, 0, 0, 0, 0, 0, 464, 465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 771, 0, 599, 0, 438, 0, 0, 833,
	0, 0, 0, 410, 0, 0, 341, 0, 0, 0,
	775, 0, 395, 376, 846, 0, 0, 393, 346, 423,
	384, 429, 412, 437, 389, 385, 272, 413, 311, 357,
	284, 286, 306, 313, 315, 317, 318, 366, 367, 379,
	400, 414, 415, 416, 310, 294, 394, 295, 328, 296,
	273, 302, 300, 303, 402, 304, 275, 380, 420, 0,
	323, 390, 353, 276, 352, 381, 419, 418, 285, 445,
	451, 452, 541, 0, 457, 622, 623, 624, 466, 471,
	472, 473, 475, 476, 477, 478, 542, 559, 526, 496,
	459, 550, 493, 497, 498, 562, 0, 0, 0, 450,
	342, 343, 0, 321, 269, 270, 617, 831, 372, 564,
	597, 598, 489, 0, 845, 826, 828, 829, 832, 836,
	837, 838, 839, 840, 842, 844, 848, 616, 0, 543,
	558, 620, 557, 613, 378, 0, 399, 555, 502, 0,
	547, 521, 0, 548, 517, 552, 0, 491, 0, 406,
	431, 443, 460, 463, 492, 577, 578, 579, 274, 462,
	581, 582, 583, 584, 585, 586, 587, 580, 847, 524,
	501, 527, 442, 504, 503, 0, 0, 538, 779, 539,
	540, 362, 363, 364, 365, 834, 565, 292, 461, 388,
	0, 525, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 531, 528, 625, 0, 588, 589, 0, 0, 455,
	456, 320, 327, 474, 329, 291, 377, 322, 440, 336,
	0, 467, 532, 468, 591, 594, 592, 593, 369, 332,
	333, 403, 337, 347, 391, 439, 375, 396, 289, 430,
	404, 351, 518, 545, 856, 830, 855, 857, 858, 854,
	859, 860, 841, 735, 0, 786, 852, 851, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 572, 571, 570, 569, 568, 567, 566, 0, 0,
	515, 417, 301, 263, 297, 298, 305, 614, 611, 421,
	615, 0, 271, 495, 345, 0, 386, 319, 560, 561,
	0, 0, 819, 793, 794, 795, 732, 796, 790, 791,
	733, 792, 820, 784, 816, 817, 760, 787, 797, 815,
	798, 818, 821, 822, 861, 862, 804, 788, 235, 863,
	801, 823, 814, 813, 799, 785, 824, 825, 767, 762,
	802, 803, 789, 807, 808, 809, 734, 781, 782, 783,
	805, 806, 763, 764, 765, 766, 0, 0, 0, 446,
	447, 448, 470, 0, 432, 494, 612, 0, 0, 0,
	0, 0, 0, 0, 544, 556, 590, 0, 600, 601,
	603, 605, 810, 607, 409, 777, 618, 485, 486, 619,
	596, 0, 727, 0, 374, 0, 500, 533, 522, 606,
	488, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 314, 0, 0, 344, 537, 519, 529, 520, 505,
	506, 507, 514, 324, 508, 509, 510, 480, 511, 481,
	512, 513, 768, 536, 487, 405, 358, 554, 553, 0,
	0, 835, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 722, 0, 0, 758, 812, 811,
	745, 755, 0, 0, 287, 209, 482, 602, 484, 483,
	746, 0, 747, 751, 754, 750, 748, 749, 0, 827,
	0, 0, 0, 0, 0, 0, 714, 726, 0, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 723, 724, 0, 0, 0, 0, 778,
	0, 725, 0, 0, 773, 752, 756, 0, 0, 0,
	0, 277, 411, 428, 288, 401, 441, 293, 408, 283,
	373, 397, 0, 0, 279, 426, 407, 355, 334, 335,
	278, 0, 392, 312, 326, 309, 371, 753, 776, 780,
	308, 849, 774, 436, 281, 0, 435, 370, 422, 427,
	356, 350, 280, 424, 354, 349, 338, 316, 850, 339,
	340, 330, 382, 348, 383, 331, 360, 359, 361, 0,
	0, 0, 0, 0, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 771,
	0, 599, 0, 438, 0, 0, 833, 0, 0, 0,
	410, 0, 0, 341, 0, 0, 0, 775, 0, 395,
	376, 846, 0, 0, 393, 346, 423, 384, 429, 412,
	437, 389, 385, 272, 413, 311, 357, 284, 286, 306,
	313, 315, 317, 318, 366, 367, 379, 400, 414, 415,
	416, 310, 294, 394, 295, 328, 296, 273, 302, 300,
	303, 402, 304, 275, 380, 420, 0, 323, 390, 353,
	276, 352, 381, 419, 418, 285, 445, 451, 452, 541,
	0, 457, 622, 623, 624, 466, 471, 472, 473, 475,
	476, 477, 478, 542, 559, 526, 496, 459, 550, 493,
	497, 498, 562, 0, 0, 0, 450, 342, 343, 0,
	321, 269, 270, 617, 831, 372, 564, 597, 598, 489,
	0, 845, 826, 828, 829, 832, 836, 837, 838, 839,
	840, 842, 844, 848, 616, 0, 543, 558, 620, 557,
	613, 378, 0, 399, 555, 502, 0, 547, 521, 0,
	548, 517, 552, 0, 491, 0, 406, 431, 443, 460,
	463, 492, 577, 578, 579, 274, 462, 581, 582, 583,
	584, 585, 586, 587, 580, 847, 524, 501, 527, 442,
	504, 503, 0, 0, 538, 779, 539, 540, 362, 363,
	364, 365, 834, 565, 292, 461, 388, 0, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 528,
	625, 0, 588, 589, 0, 0, 455, 456, 320, 327,
	474, 329, 291, 377, 322, 440, 336, 0, 467, 532,
	468, 591, 594, 592, 593, 369, 332, 333, 403, 337,
	347, 391, 439, 375, 396, 289, 430, 404, 351, 518,
	545, 856, 830, 855, 857, 858, 854, 859, 860, 841,
	735, 0, 786, 852, 851, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 572, 571,
	570, 569, 568, 567, 566, 0, 0, 515, 417, 301,
	263, 297, 298, 305, 614, 611, 421, 615, 0, 271,
	495, 345, 0, 386, 319, 560, 561, 0, 0, 819,
	793, 794, 795, 732, 796, 790, 791, 733, 792, 820,
	784, 816, 817, 760, 787, 797, 815, 798, 818, 821,
	822, 861, 862, 804, 788, 235, 863, 801, 823, 814,
	813, 799, 785, 824, 825, 767, 762, 802, 803, 789,
	807, 808, 809, 734, 781, 782, 783, 805, 806, 763,
	764, 765, 766, 0, 0, 0, 446, 447, 448, 470,
	0, 432, 494, 612, 0, 0, 0, 0, 0, 0,
	0, 544, 556, 590, 0, 600, 601, 603, 605, 810,
	607, 409, 777, 618, 485, 486, 619, 596, 0, 727,
	0, 374, 0, 500, 533, 522, 606, 488, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 0, 314, 0,
	0, 344, 537, 519, 529, 520, 505, 506, 507, 514,
	324, 508, 509, 510, 480, 511, 481, 512, 513, 768,
	536, 487, 405, 358, 554, 553, 0, 0, 835, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 0, 758, 812, 811, 745, 755, 0,
	0, 287, 209, 482, 602, 484, 483, 2600, 0, 2601,
	751, 754, 750, 748, 749, 0, 827, 0, 0, 0,
	0, 0, 0, 714, 726, 0, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 724, 0, 0, 0, 0, 778, 0, 725, 0,
	0, 773, 752, 756, 0, 0, 0, 0, 277, 411,
	428, 288, 401, 441, 293, 408, 283, 373, 397, 0,
	0, 279, 426, 407, 355, 334, 335, 278, 0, 392,
	312, 326, 309, 371, 753, 776, 780, 308, 849, 774,
	436, 281, 0, 435, 370, 422, 427, 356, 350, 280,
	424, 354, 349, 338, 316, 850, 339, 340, 330, 382,
	348, 383, 331, 360, 359, 361, 0, 0, 0, 0,
	0, 464, 465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 771, 0, 599, 0,
	438, 0, 0, 833, 0, 0, 0, 410, 0, 0,
	341, 0, 0, 0, 775, 0, 395, 376, 846, 0,
	0, 393, 346, 423, 384, 429, 412, 437, 389, 385,
	272, 413, 311, 357, 284, 286, 306, 313, 315, 317,
	318, 366, 367, 379, 400, 414, 415, 416, 310, 294,
	394, 295, 328, 296, 273, 302, 300, 303, 402, 304,
	275, 380, 420, 0, 323, 390, 353, 276, 352, 381,
	419, 418, 285, 445, 451, 452, 541, 0, 457, 622,
	623, 624, 466, 471, 472, 473, 475, 476, 477, 478,
	542, 559, 526, 496, 459, 550, 493, 497, 498, 562,
	0, 0, 0, 450, 342, 343, 0, 321, 269, 270,
	617, 831, 372, 564, 597, 598, 489, 0, 845, 826,
	828, 829, 832, 836, 837, 838, 839, 840, 842, 844,
	848, 616, 0, 543, 558, 620, 557, 613, 378, 0,
	399, 555, 502, 0, 547, 521, 0, 548, 517, 552,
	0, 491, 0, 406, 431, 443, 460, 463, 492, 577,
	578, 579, 274, 462, 581, 582, 583, 584, 585, 586,
	587, 580, 847, 524, 501, 527, 442, 504, 503, 0,
	0, 538, 779, 539, 540, 362, 363, 364, 365, 834,
	565, 292, 461, 388, 0, 525, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 531, 528, 625, 0, 588,
	589, 0, 0, 455, 456, 320, 327, 474, 329, 291,
	377, 322, 440, 336, 0, 467, 532, 468, 591, 594,
	592, 593, 369, 332, 333, 403, 337, 347, 391, 439,
	375, 396, 289, 430, 404, 351, 518, 545, 856, 830,
	855, 857, 858, 854, 859, 860, 841, 735, 0, 786,
	852, 851, 853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 573, 572, 571, 570, 569, 568,
	567, 566, 0, 0, 515, 417, 301, 263, 297, 298,
	305, 614, 611, 421, 615, 0, 271, 495, 345, 0,
	386, 319, 560, 561, 0, 0, 819, 793, 794, 795,
	732, 796, 790, 791, 733, 792, 820, 784, 816, 817,
	760, 787, 797, 815, 798, 818, 821, 822, 861, 862,
	804, 788, 235, 863, 801, 823, 814, 813, 799, 785,
	824, 825, 767, 762, 802, 803, 789, 807, 808, 809,
	734, 781, 782, 783, 805, 806, 763, 764, 765, 766,
	0, 0, 0, 446, 447, 448, 470, 0, 432, 494,
	612, 0, 0, 0, 0, 0, 0, 0, 544, 556,
	590, 0, 600, 601, 603, 605, 810, 607, 409, 777,
	618, 485, 486, 619, 596, 0, 727, 0, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 1640, 0, 0,
	0, 730, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 768, 536, 487, 405,
	358, 554, 553, 0, 0, 835, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 722, 0,
	0, 758, 812, 811, 745, 755, 0, 0, 287, 209,
	482, 602, 484, 483, 746, 0, 747, 751, 754, 750,
	748, 749, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 726, 0, 731, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 723, 724, 0,
	0, 0, 0, 778, 0, 725, 0, 0, 773, 752,
	756, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 753, 776, 780, 308, 849, 774, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 850, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 771, 0, 599, 0, 438, 0, 0,
	833, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 775, 0, 395, 376, 846, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 1641, 1642, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 831, 372,
	564, 597, 598, 489, 0, 845, 826, 828, 829, 832,
	836, 837, 838, 839, 840, 842, 844, 848, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 847,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 779,
	539, 540, 362, 363, 364, 365, 834, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 856, 830, 855, 857, 858,
	854, 859, 860, 841, 735, 0, 786, 852, 851, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 0, 386, 319, 560,
	561, 0, 0, 819, 793, 794, 795, 732, 796, 790,
	791, 733, 792, 820, 784, 816, 817, 760, 787, 797,
	815, 798, 818, 821, 822, 861, 862, 804, 788, 235,
	863, 801, 823, 814, 813, 799, 785, 824, 825, 767,
	762, 802, 803, 789, 807, 808, 809, 734, 781, 782,
	783, 805, 806, 763, 764, 765, 766, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 810, 607, 409, 777, 618, 485, 486,
	619, 596, 0, 727, 0, 374, 0, 500, 533, 522,
	606, 488, 0, 0, 0, 0, 0, 0, 730, 0,
	0, 0, 314, 0, 0, 344, 537, 519, 529, 520,
	505, 506, 507, 514, 324, 508, 509, 510, 480, 511,
	481, 512, 513, 768, 536, 487, 405, 358, 554, 553,
	0, 0, 835, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 0, 758, 812,
	811, 745, 755, 0, 0, 287, 209, 482, 602, 484,
	483, 746, 0, 747, 751, 754, 750, 748, 749, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 726, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 723, 724, 0, 0, 0, 0,
	778, 0, 725, 0, 0, 773, 752, 756, 0, 0,
	0, 0, 277, 411, 428, 288, 401, 441, 293, 408,
	283, 373, 397, 0, 0, 279, 426, 407, 355, 334,
	335, 278, 0, 392, 312, 326, 309, 371, 753, 776,
	780, 308, 849, 774, 436, 281, 0, 435, 370, 422,
	427, 356, 350, 280, 424, 354, 349, 338, 316, 850,
	339, 340, 330, 382, 348, 383, 331, 360, 359, 361,
	0, 0, 0, 0, 0, 464, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	771, 0, 599, 0, 438, 0, 0, 833, 0, 0,
	0, 410, 0, 0, 341, 0, 0, 0, 775, 0,
	395, 376, 846, 0, 0, 393, 346, 423, 384, 429,
	412, 437, 389, 385, 272, 413, 311, 357, 284, 286,
	306, 313, 315, 317, 318, 366, 367, 379, 400, 414,
	415, 416, 310, 294, 394, 295, 328, 296, 273, 302,
	300, 303, 402, 304, 275, 380, 420, 0, 323, 390,
	353, 276, 352, 381, 419, 418, 285, 445, 451, 452,
	541, 0, 457, 622, 623, 624, 466, 471, 472, 473,
	475, 476, 477, 478, 542, 559, 526, 496, 459, 550,
	493, 497, 498, 562, 0, 0, 0, 450, 342, 343,
	0, 321, 269, 270, 617, 831, 372, 564, 597, 598,
	489, 0, 845, 826, 828, 829, 832, 836, 837, 838,
	839, 840, 842, 844, 848, 616, 0, 543, 558, 620,
	557, 613, 378, 0, 399, 555, 502, 0, 547, 521,
	0, 548, 517, 552, 0, 491, 0, 406, 431, 443,
	460, 463, 492, 577, 578, 579, 274, 462, 581, 582,
	583, 584, 585, 586, 587, 580, 847, 524, 501, 527,
	442, 504, 503, 0, 0, 538, 779, 539, 540, 362,
	363, 364, 365, 834, 565, 292, 461, 388, 0, 525,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 531,
	528, 625, 0, 588, 589, 0, 0, 455, 456, 320,
	327, 474, 329, 291, 377, 322, 440, 336, 0, 467,
	532, 468, 591, 594, 592, 593, 369, 332, 333, 403,
	337, 347, 391, 439, 375, 396, 289, 430, 404, 351,
	518, 545, 856, 830, 855, 857, 858, 854, 859, 860,
	841, 735, 0, 786, 852, 851, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 573, 572,
	571, 570, 569, 568, 567, 566, 0, 0, 515, 417,
	301, 263, 297, 298, 305, 614, 611, 421, 615, 0,
	271, 495, 345, 0, 386, 319, 560, 561, 0, 0,
	819, 793, 794, 795, 732, 796, 790, 791, 733, 792,
	820, 784, 816, 817, 760, 787, 797, 815, 798, 818,
	821, 822, 861, 862, 804, 788, 235, 863, 801, 823,
	814, 813, 799, 785, 824, 825, 767, 762, 802, 803,
	789, 807, 808, 809, 734, 781, 782, 783, 805, 806,
	763, 764, 765, 766, 0, 0, 0, 446, 447, 448,
	470, 0, 432, 494, 612, 0, 0, 0, 0, 0,
	0, 0, 544, 556, 590, 0, 600, 601, 603, 605,
	810, 607, 409, 777, 618, 485, 486, 619, 596, 0,
	727, 0, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 730, 0, 0, 0, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	768, 536, 487, 405, 358, 554, 553, 0, 0, 835,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 758, 812, 811, 745, 755,
	0, 0, 287, 209, 482, 602, 484, 483, 746, 0,
	747, 751, 754, 750, 748, 749, 0, 827, 0, 0,
	0, 0, 0, 0, 714, 726, 0, 731, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 723, 724, 0, 0, 0, 0, 778, 0, 725,
	0, 0, 773, 752, 756, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 753, 776, 780, 308, 849,
	774, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 850, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 771, 0, 599,
	0, 438, 0, 0, 833, 0, 0, 0, 410, 0,
	0, 341, 0, 0, 0, 775, 0, 395, 376, 846,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 831, 372, 564, 597, 598, 489, 0, 845,
	826, 828, 829, 832, 836, 837, 838, 839, 840, 842,
	844, 848, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 847, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 779, 539, 540, 362, 363, 364, 365,
	834, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 856,
	830, 855, 857, 858, 854, 859, 860, 841, 735, 0,
	786, 852, 851, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 819, 793, 794,
	795, 732, 796, 790, 791, 733, 792, 820, 784, 816,
	817, 760, 787, 797, 815, 798, 818, 821, 822, 861,
	862, 804, 788, 235, 863, 801, 823, 814, 813, 799,
	785, 824, 825, 767, 762, 802, 803, 789, 807, 808,
	809, 734, 781, 782, 783, 805, 806, 763, 764, 765,
	766, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 810, 607, 409,
	0, 618, 485, 486, 619, 596, 0, 727, 186, 56,
	175, 148, 0, 0, 0, 0, 0, 0, 374, 0,
	500, 533, 522, 606, 488, 0, 176, 0, 0, 0,
	0, 0, 0, 168, 0, 314, 0, 177, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 124, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 147, 174, 184, 0,
	110, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	201, 0, 0, 0, 410, 0, 0, 341, 173, 167,
	166, 454, 0, 395, 376, 213, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 574, 575, 576, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 433, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 204, 546, 549, 479, 214, 0,
	543, 558, 516, 557, 215, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 122, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 212, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 387, 282,
	421, 398, 0, 271, 495, 345, 149, 386, 319, 560,
	561, 53, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 216, 41, 202,
	205, 207, 206, 0, 54, 544, 556, 590, 5, 600,
	601, 603, 605, 604, 607, 409, 127, 217, 485, 486,
	218, 596, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	124, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 2291, 2294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	0, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	2295, 438, 0, 0, 0, 2290, 0, 2289, 410, 2287,
	2292, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 2293, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	149, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1263, 0, 0, 208,
	0, 0, 745, 755, 0, 0, 287, 209, 482, 602,
	484, 483, 746, 0, 747, 751, 754, 750, 748, 749,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 752, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 753,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	186, 56, 175, 148, 0, 0, 0, 0, 0, 0,
	374, 644, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 650, 0, 0, 0, 0, 0,
	649, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 648, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 645, 647,
	292, 461, 388, 658, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 149, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 0, 618,
	485, 486, 619, 596, 374, 0, 500, 533, 522, 606,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 344, 537, 519, 529, 520, 505,
	506, 507, 514, 324, 508, 509, 510, 480, 511, 481,
	512, 513, 0, 536, 487, 405, 358, 554, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 287, 209, 482, 602, 484, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	2291, 2294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 411, 428, 288, 401, 441, 293, 408, 283,
	373, 397, 0, 0, 279, 426, 407, 355, 334, 335,
	278, 0, 392, 312, 326, 309, 371, 0, 425, 453,
	308, 444, 0, 436, 281, 0, 435, 370, 422, 427,
	356, 350, 280, 424, 354, 349, 338, 316, 469, 339,
	340, 330, 382, 348, 383, 331, 360, 359, 361, 0,
	0, 0, 0, 0, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 599, 2295, 438, 0, 0, 0, 2290, 0, 2289,
	410, 2287, 2292, 341, 0, 0, 0, 454, 0, 395,
	376, 621, 0, 0, 393, 346, 423, 384, 429, 412,
	437, 389, 385, 272, 413, 311, 357, 284, 286, 306,
	313, 315, 317, 318, 366, 367, 379, 400, 414, 415,
	416, 310, 294, 394, 295, 328, 296, 273, 302, 300,
	303, 402, 304, 275, 380, 420, 2293, 323, 390, 353,
	276, 352, 381, 419, 418, 285, 445, 451, 452, 541,
	0, 457, 622, 623, 624, 466, 471, 472, 473, 475,
	476, 477, 478, 542, 559, 526, 496, 459, 550, 493,
	497, 498, 562, 0, 0, 0, 450, 342, 343, 0,
	321, 269, 270, 617, 307, 372, 564, 597, 598, 489,
	0, 551, 490, 499, 299, 523, 535, 534, 368, 449,
	0, 546, 549, 479, 616, 0, 543, 558, 620, 557,
	613, 378, 0, 399, 555, 502, 0, 547, 521, 0,
	548, 517, 552, 0, 491, 0, 406, 431, 443, 460,
	463, 492, 577, 578, 579, 274, 462, 581, 582, 583,
	584, 585, 586, 587, 580, 434, 524, 501, 527, 442,
	504, 503, 0, 0, 538, 458, 539, 540, 362, 363,
	364, 365, 325, 565, 292, 461, 388, 0, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 528,
	625, 0, 588, 589, 0, 0, 455, 456, 320, 327,
	474, 329, 291, 377, 322, 440, 336, 0, 467, 532,
	468, 591, 594, 592, 593, 369, 332, 333, 403, 337,
	347, 391, 439, 375, 396, 289, 430, 404, 351, 518,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 572, 571,
	570, 569, 568, 567, 566, 0, 0, 515, 417, 301,
	263, 297, 298, 305, 614, 611, 421, 615, 0, 271,
	495, 345, 0, 386, 319, 560, 561, 0, 0, 219,
	220, 221, 222, 223, 224, 225, 226, 264, 227, 228,
	229, 230, 231, 232, 233, 236, 237, 238, 239, 240,
	241, 242, 243, 563, 234, 235, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	0, 0, 0, 265, 266, 267, 268, 0, 0, 259,
	260, 261, 262, 0, 0, 0, 446, 447, 448, 470,
	0, 432, 494, 612, 0, 0, 0, 0, 0, 0,
	0, 544, 556, 590, 0, 600, 601, 603, 605, 604,
	607, 409, 0, 618, 485, 486, 619, 596, 374, 0,
	500, 533, 522, 606, 488, 0, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 0, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 2443, 2446,
	2447, 2448, 2449, 2450, 2451, 0, 2456, 2452, 2453, 2454,
	2455, 0, 2438, 2439, 2440, 2441, 1060, 2422, 2444, 0,
	2423, 370, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431,
	2432, 2435, 2436, 2433, 2434, 2442, 382, 348, 383, 331,
	360, 359, 361, 1087, 1089, 1091, 1093, 1096, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	0, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 2437, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 2445, 345, 0, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 0, 618, 485, 486,
	619, 596, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	0, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 2312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	0, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	2311, 438, 0, 0, 0, 2317, 2314, 2316, 410, 0,
	2315, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 2309, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 2312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 599, 2311, 438, 0, 0, 0, 2317,
	2314, 2316, 410, 0, 2315, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 2017, 0, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 2018, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 1193, 1194,
	1195, 1192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 186, 618,
	485, 486, 619, 596, 0, 0, 0, 0, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 124, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 2067,
	0, 208, 0, 0, 0, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	0, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 454, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 149, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 186, 618, 485, 486,
	619, 596, 0, 0, 0, 0, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 124, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 2053, 0, 208,
	0, 0, 0, 0, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 149, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 991, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 998, 999, 0, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 986,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 975, 436,
	281, 974, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 989, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 990,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 993, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 1000, 987, 996, 988, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 997, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 186, 618,
	485, 486, 619, 596, 0, 0, 0, 0, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 124, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1949, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	0, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 454, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 149, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 0, 618, 485, 486,
	619, 596, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	0, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 998, 999, 0, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	975, 436, 281, 974, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	0, 438, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 1000, 1968, 996, 1969, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 997, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 2816, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 2819, 0, 0, 2818,
	595, 0, 0, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 1464, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 1462, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 0, 618,
	485, 486, 619, 596, 374, 0, 500, 533, 522, 606,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 1458, 0, 344, 537, 519, 529, 520, 505,
	506, 507, 514, 324, 508, 509, 510, 480, 511, 481,
	512, 513, 0, 536, 487, 405, 358, 554, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	1462, 0, 0, 0, 287, 209, 482, 602, 484, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 277, 411, 428, 288, 401, 441, 293, 408, 283,
	373, 397, 0, 0, 279, 426, 407, 355, 334, 335,
	278, 0, 392, 312, 326, 309, 371, 0, 425, 453,
	308, 444, 0, 436, 281, 0, 435, 370, 422, 427,
	356, 350, 280, 424, 354, 349, 338, 316, 469, 339,
	340, 330, 382, 348, 383, 331, 360, 359, 361, 0,
	0, 0, 0, 0, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 599, 0, 438, 0, 0, 0, 0, 0, 0,
	410, 0, 0, 341, 0, 0, 0, 454, 0, 395,
	376, 621, 0, 0, 393, 346, 423, 384, 429, 412,
	437, 389, 385, 272, 413, 311, 357, 284, 286, 306,
	313, 315, 317, 318, 366, 367, 379, 400, 414, 415,
	416, 310, 294, 394, 295, 328, 296, 273, 302, 300,
	303, 402, 304, 275, 380, 420, 0, 323, 390, 353,
	276, 352, 381, 419, 418, 285, 445, 451, 452, 541,
	0, 457, 622, 623, 624, 466, 471, 472, 473, 475,
	476, 477, 478, 542, 559, 526, 496, 459, 550, 493,
	497, 498, 562, 0, 0, 0, 450, 342, 343, 0,
	321, 269, 270, 617, 307, 372, 564, 597, 598, 489,
	0, 551, 490, 499, 299, 523, 535, 534, 368, 449,
	0, 546, 549, 479, 616, 0, 543, 558, 620, 557,
	613, 378, 0, 399, 555, 502, 0, 547, 521, 0,
	548, 517, 552, 0, 491, 0, 406, 431, 443, 460,
	463, 492, 577, 578, 579, 274, 462, 581, 582, 583,
	584, 585, 586, 587, 580, 434, 524, 501, 527, 442,
	504, 503, 0, 0, 538, 458, 539, 540, 362, 363,
	364, 365, 325, 565, 292, 461, 388, 0, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 528,
	625, 0, 588, 589, 0, 0, 455, 456, 320, 327,
	474, 329, 291, 377, 322, 440, 336, 0, 467, 532,
	468, 591, 594, 592, 593, 369, 332, 333, 403, 337,
	347, 391, 439, 375, 396, 289, 430, 404, 351, 518,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 572, 571,
	570, 569, 568, 567, 566, 0, 0, 515, 417, 301,
	263, 297, 298, 305, 614, 611, 421, 615, 0, 271,
	495, 345, 0, 386, 319, 560, 561, 0, 0, 219,
	220, 221, 222, 223, 224, 225, 226, 264, 227, 228,
	229, 230, 231, 232, 233, 236, 237, 238, 239, 240,
	241, 242, 243, 563, 234, 235, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	0, 0, 0, 265, 266, 267, 268, 0, 0, 259,
	260, 261, 262, 0, 0, 0, 446, 447, 448, 470,
	0, 432, 494, 612, 0, 0, 0, 0, 0, 0,
	0, 544, 556, 590, 0, 600, 601, 603, 605, 604,
	607, 409, 0, 618, 485, 486, 619, 596, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 0, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3826,
	0, 208, 812, 0, 0, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	0, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 454, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 0, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 0, 618, 485, 486,
	619, 596, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	0, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 1462, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	0, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	0, 438, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 1462, 0, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1670, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 2386, 0, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 2388, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 0, 618,
	485, 486, 619, 596, 374, 0, 500, 533, 522, 606,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 344, 537, 519, 529, 520, 505,
	506, 507, 514, 324, 508, 509, 510, 480, 511, 481,
	512, 513, 0, 536, 487, 405, 358, 554, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	3017, 3019, 0, 0, 287, 209, 482, 602, 484, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 411, 428, 288, 401, 441, 293, 408, 283,
	373, 397, 0, 0, 279, 426, 407, 355, 334, 335,
	278, 0, 392, 312, 326, 309, 371, 0, 425, 453,
	308, 444, 0, 436, 281, 0, 435, 370, 422, 427,
	356, 350, 280, 424, 354, 349, 338, 316, 469, 339,
	340, 330, 382, 348, 383, 331, 360, 359, 361, 0,
	0, 0, 0, 0, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 599, 0, 438, 0, 0, 0, 0, 0, 0,
	410, 0, 0, 341, 0, 0, 0, 454, 0, 395,
	376, 621, 0, 0, 393, 346, 423, 384, 429, 412,
	437, 389, 385, 272, 413, 311, 357, 284, 286, 306,
	313, 315, 317, 318, 366, 367, 379, 400, 414, 415,
	416, 310, 294, 394, 295, 328, 296, 273, 302, 300,
	303, 402, 304, 275, 380, 420, 0, 323, 390, 353,
	276, 352, 381, 419, 418, 285, 445, 451, 452, 541,
	0, 457, 622, 623, 624, 466, 471, 472, 473, 475,
	476, 477, 478, 542, 559, 526, 496, 459, 550, 493,
	497, 498, 562, 0, 0, 0, 450, 342, 343, 0,
	321, 269, 270, 617, 307, 372, 564, 597, 598, 489,
	0, 551, 490, 499, 299, 523, 535, 534, 368, 449,
	0, 546, 549, 479, 616, 0, 543, 558, 620, 557,
	613, 378, 0, 399, 555, 502, 0, 547, 521, 0,
	548, 517, 552, 0, 491, 0, 406, 431, 443, 460,
	463, 492, 577, 578, 579, 274, 462, 581, 582, 583,
	584, 585, 586, 587, 580, 434, 524, 501, 527, 442,
	504, 503, 0, 0, 538, 458, 539, 540, 362, 363,
	364, 365, 325, 565, 292, 461, 388, 0, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 528,
	625, 0, 588, 589, 0, 0, 455, 456, 320, 327,
	474, 329, 291, 377, 322, 440, 336, 0, 467, 532,
	468, 591, 594, 592, 593, 369, 332, 333, 403, 337,
	347, 391, 439, 375, 396, 289, 430, 404, 351, 518,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 572, 571,
	570, 569, 568, 567, 566, 0, 0, 515, 417, 301,
	263, 297, 298, 305, 614, 611, 421, 615, 0, 271,
	495, 345, 0, 386, 319, 560, 561, 0, 0, 219,
	220, 221, 222, 223, 224, 225, 226, 264, 227, 228,
	229, 230, 231, 232, 233, 236, 237, 238, 239, 240,
	241, 242, 243, 563, 234, 235, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	0, 0, 0, 265, 266, 267, 268, 0, 0, 259,
	260, 261, 262, 0, 0, 0, 446, 447, 448, 470,
	0, 432, 494, 612, 0, 0, 0, 0, 0, 0,
	0, 544, 556, 590, 0, 600, 601, 603, 605, 604,
	607, 409, 0, 618, 485, 486, 619, 596, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 2407, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 0, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 1462, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	0, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 454, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 0, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 0, 618, 485, 486,
	619, 596, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 632, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	0, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	0, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	0, 438, 0, 631, 0, 0, 0, 0, 410, 0,
	0, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	812, 0, 0, 0, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3805, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 0, 618,
	485, 486, 619, 596, 374, 0, 500, 533, 522, 606,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 344, 537, 519, 529, 520, 505,
	506, 507, 514, 324, 508, 509, 510, 480, 511, 481,
	512, 513, 0, 536, 487, 405, 358, 554, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	3586, 0, 0, 0, 287, 209, 482, 602, 484, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 411, 428, 288, 401, 441, 293, 408, 283,
	373, 397, 0, 0, 279, 426, 407, 355, 334, 335,
	278, 0, 392, 312, 326, 309, 371, 0, 425, 453,
	308, 444, 0, 436, 281, 0, 435, 370, 422, 427,
	356, 350, 280, 424, 354, 349, 338, 316, 469, 339,
	340, 330, 382, 348, 383, 331, 360, 359, 361, 0,
	0, 0, 0, 0, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 599, 0, 438, 0, 0, 0, 0, 0, 0,
	410, 0, 0, 341, 0, 0, 0, 454, 0, 395,
	376, 621, 0, 0, 393, 346, 423, 384, 429, 412,
	437, 389, 385, 272, 413, 311, 357, 284, 286, 306,
	313, 315, 317, 318, 366, 367, 379, 400, 414, 415,
	416, 310, 294, 394, 295, 328, 296, 273, 302, 300,
	303, 402, 304, 275, 380, 420, 0, 323, 390, 353,
	276, 352, 381, 419, 418, 285, 445, 451, 452, 541,
	0, 457, 622, 623, 624, 466, 471, 472, 473, 475,
	476, 477, 478, 542, 559, 526, 496, 459, 550, 493,
	497, 498, 562, 0, 0, 0, 450, 342, 343, 0,
	321, 269, 270, 617, 307, 372, 564, 597, 598, 489,
	0, 551, 490, 499, 299, 523, 535, 534, 368, 449,
	0, 546, 549, 479, 616, 0, 543, 558, 620, 557,
	613, 378, 0, 399, 555, 502, 0, 547, 521, 0,
	548, 517, 552, 0, 491, 0, 406, 431, 443, 460,
	463, 492, 577, 578, 579, 274, 462, 581, 582, 583,
	584, 585, 586, 587, 580, 434, 524, 501, 527, 442,
	504, 503, 0, 0, 538, 458, 539, 540, 362, 363,
	364, 365, 325, 565, 292, 461, 388, 0, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 528,
	625, 0, 588, 589, 0, 0, 455, 456, 320, 327,
	474, 329, 291, 377, 322, 440, 336, 0, 467, 532,
	468, 591, 594, 592, 593, 369, 332, 333, 403, 337,
	347, 391, 439, 375, 396, 289, 430, 404, 351, 518,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 572, 571,
	570, 569, 568, 567, 566, 0, 0, 515, 417, 301,
	263, 297, 298, 305, 614, 611, 421, 615, 0, 271,
	495, 345, 0, 386, 319, 560, 561, 0, 0, 219,
	220, 221, 222, 223, 224, 225, 226, 264, 227, 228,
	229, 230, 231, 232, 233, 236, 237, 238, 239, 240,
	241, 242, 243, 563, 234, 235, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	0, 0, 0, 265, 266, 267, 268, 0, 0, 259,
	260, 261, 262, 0, 0, 0, 446, 447, 448, 470,
	0, 432, 494, 612, 0, 0, 0, 0, 0, 0,
	0, 544, 556, 590, 0, 600, 601, 603, 605, 604,
	607, 409, 0, 618, 485, 486, 619, 596, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 0, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	0, 3714, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 454, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 0, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 0, 618, 485, 486,
	619, 596, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	0, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3434, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	0, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	0, 438, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3601, 0, 208,
	0, 0, 0, 0, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 3522, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 0, 618,
	485, 486, 619, 596, 374, 0, 500, 533, 522, 606,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 344, 537, 519, 529, 520, 505,
	506, 507, 514, 324, 508, 509, 510, 480, 511, 481,
	512, 513, 0, 536, 487, 405, 358, 554, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	3050, 0, 0, 0, 287, 209, 482, 602, 484, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 411, 428, 288, 401, 441, 293, 408, 283,
	373, 397, 0, 0, 279, 426, 407, 355, 334, 335,
	278, 0, 392, 312, 326, 309, 371, 0, 425, 453,
	308, 444, 0, 436, 281, 0, 435, 370, 422, 427,
	356, 350, 280, 424, 354, 349, 338, 316, 469, 339,
	340, 330, 382, 348, 383, 331, 360, 359, 361, 0,
	0, 0, 0, 0, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 599, 0, 438, 0, 0, 0, 0, 0, 0,
	410, 0, 0, 341, 0, 0, 0, 454, 0, 395,
	376, 621, 0, 0, 393, 346, 423, 384, 429, 412,
	437, 389, 385, 272, 413, 311, 357, 284, 286, 306,
	313, 315, 317, 318, 366, 367, 379, 400, 414, 415,
	416, 310, 294, 394, 295, 328, 296, 273, 302, 300,
	303, 402, 304, 275, 380, 420, 0, 323, 390, 353,
	276, 352, 381, 419, 418, 285, 445, 451, 452, 541,
	0, 457, 622, 623, 624, 466, 471, 472, 473, 475,
	476, 477, 478, 542, 559, 526, 496, 459, 550, 493,
	497, 498, 562, 0, 0, 0, 450, 342, 343, 0,
	321, 269, 270, 617, 307, 372, 564, 597, 598, 489,
	0, 551, 490, 499, 299, 523, 535, 534, 368, 449,
	0, 546, 549, 479, 616, 0, 543, 558, 620, 557,
	613, 378, 0, 399, 555, 502, 0, 547, 521, 0,
	548, 517, 552, 0, 491, 0, 406, 431, 443, 460,
	463, 492, 577, 578, 579, 274, 462, 581, 582, 583,
	584, 585, 586, 587, 580, 434, 524, 501, 527, 442,
	504, 503, 0, 0, 538, 458, 539, 540, 362, 363,
	364, 365, 325, 565, 292, 461, 388, 0, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 528,
	625, 0, 588, 589, 0, 0, 455, 456, 320, 327,
	474, 329, 291, 377, 322, 440, 336, 0, 467, 532,
	468, 591, 594, 592, 593, 369, 332, 333, 403, 337,
	347, 391, 439, 375, 396, 289, 430, 404, 351, 518,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 572, 571,
	570, 569, 568, 567, 566, 0, 0, 515, 417, 301,
	263, 297, 298, 305, 614, 611, 421, 615, 0, 271,
	495, 345, 0, 386, 319, 560, 561, 0, 0, 219,
	220, 221, 222, 223, 224, 225, 226, 264, 227, 228,
	229, 230, 231, 232, 233, 236, 237, 238, 239, 240,
	241, 242, 243, 563, 234, 235, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	0, 0, 0, 265, 266, 267, 268, 0, 0, 259,
	260, 261, 262, 0, 0, 0, 446, 447, 448, 470,
	0, 432, 494, 612, 0, 0, 0, 0, 0, 0,
	0, 544, 556, 590, 0, 600, 601, 603, 605, 604,
	607, 409, 0, 618, 485, 486, 619, 596, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 0, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	0, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 454, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 0, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 0, 618, 485, 486,
	619, 596, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	0, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1949, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	0, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	0, 438, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2917, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 0, 618,
	485, 486, 619, 596, 374, 0, 500, 533, 522, 606,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 344, 537, 519, 529, 520, 505,
	506, 507, 514, 324, 508, 509, 510, 480, 511, 481,
	512, 513, 0, 536, 487, 405, 358, 554, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	1462, 0, 0, 0, 287, 209, 482, 602, 484, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 411, 428, 288, 401, 441, 293, 408, 283,
	373, 397, 0, 0, 279, 426, 407, 355, 334, 335,
	278, 0, 392, 312, 326, 309, 371, 0, 425, 453,
	308, 444, 0, 436, 281, 0, 435, 370, 422, 427,
	356, 350, 280, 424, 354, 349, 338, 316, 469, 339,
	340, 330, 382, 348, 383, 331, 360, 359, 361, 0,
	0, 0, 0, 0, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 599, 0, 438, 0, 0, 0, 0, 0, 0,
	410, 0, 0, 341, 0, 0, 0, 454, 0, 395,
	376, 621, 0, 0, 393, 346, 423, 384, 429, 412,
	437, 389, 385, 272, 413, 311, 357, 284, 286, 306,
	313, 315, 317, 318, 366, 367, 379, 400, 414, 415,
	416, 310, 294, 394, 295, 328, 296, 273, 302, 300,
	303, 402, 304, 275, 380, 420, 0, 323, 390, 353,
	276, 352, 381, 419, 418, 285, 445, 451, 452, 541,
	0, 457, 622, 623, 624, 466, 471, 472, 473, 475,
	476, 477, 478, 542, 559, 526, 496, 459, 550, 493,
	497, 498, 562, 0, 0, 0, 450, 342, 343, 0,
	321, 269, 270, 617, 307, 372, 564, 597, 598, 489,
	0, 551, 490, 499, 299, 523, 535, 534, 368, 449,
	0, 546, 549, 479, 616, 0, 543, 558, 620, 557,
	613, 378, 0, 399, 555, 502, 0, 547, 521, 0,
	548, 517, 552, 0, 491, 0, 406, 431, 443, 460,
	463, 492, 577, 578, 579, 274, 462, 581, 582, 583,
	584, 585, 586, 587, 580, 434, 524, 501, 527, 442,
	504, 503, 0, 0, 538, 458, 539, 540, 362, 363,
	364, 365, 325, 565, 292, 461, 388, 0, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 528,
	625, 0, 588, 589, 0, 0, 455, 456, 320, 327,
	474, 329, 291, 377, 322, 440, 336, 0, 467, 532,
	468, 591, 594, 592, 593, 369, 332, 333, 403, 337,
	347, 391, 439, 375, 396, 289, 430, 404, 351, 518,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 572, 571,
	570, 569, 568, 567, 566, 0, 0, 515, 417, 301,
	263, 297, 298, 305, 614, 611, 421, 615, 0, 271,
	495, 345, 0, 386, 319, 560, 561, 0, 0, 219,
	220, 221, 222, 223, 224, 225, 226, 264, 227, 228,
	229, 230, 231, 232, 233, 236, 237, 238, 239, 240,
	241, 242, 243, 563, 234, 235, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	0, 0, 0, 265, 266, 267, 268, 0, 0, 259,
	260, 261, 262, 0, 0, 0, 446, 447, 448, 470,
	0, 432, 494, 612, 0, 0, 0, 0, 0, 0,
	0, 544, 556, 590, 0, 600, 601, 603, 605, 604,
	607, 409, 0, 618, 485, 486, 619, 596, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 0, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 2388, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	0, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 454, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 0, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 0, 618, 485, 486,
	619, 596, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 2739, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	0, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	0, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	0, 438, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 2504, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 0, 618,
	485, 486, 619, 596, 374, 0, 500, 533, 522, 606,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 344, 537, 519, 529, 520, 505,
	506, 507, 514, 324, 508, 509, 510, 480, 511, 481,
	512, 513, 0, 536, 487, 405, 358, 554, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 287, 209, 482, 602, 484, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 411, 428, 288, 401, 441, 293, 408, 283,
	373, 397, 0, 0, 279, 426, 407, 355, 334, 335,
	278, 0, 392, 312, 326, 309, 371, 0, 425, 453,
	308, 444, 0, 436, 281, 0, 435, 370, 422, 427,
	356, 350, 280, 424, 354, 349, 338, 316, 469, 339,
	340, 330, 382, 348, 383, 331, 360, 359, 361, 0,
	0, 0, 0, 0, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 599, 0, 438, 0, 0, 0, 0, 0, 0,
	410, 0, 0, 341, 0, 0, 0, 454, 0, 395,
	376, 621, 0, 0, 393, 346, 423, 384, 429, 412,
	437, 389, 385, 272, 413, 311, 357, 284, 286, 306,
	313, 315, 317, 318, 366, 367, 379, 400, 414, 415,
	416, 310, 294, 394, 295, 328, 296, 273, 302, 300,
	303, 402, 304, 275, 380, 420, 0, 323, 390, 353,
	276, 352, 381, 419, 418, 285, 445, 451, 452, 541,
	0, 457, 622, 623, 624, 466, 471, 472, 473, 475,
	476, 477, 478, 542, 559, 526, 496, 459, 550, 493,
	497, 498, 562, 0, 0, 0, 450, 342, 343, 0,
	321, 269, 270, 617, 307, 372, 564, 597, 598, 489,
	0, 551, 490, 499, 299, 523, 535, 534, 368, 449,
	0, 546, 549, 479, 616, 0, 543, 558, 620, 557,
	613, 378, 0, 399, 555, 502, 0, 547, 521, 0,
	548, 517, 552, 0, 491, 0, 406, 431, 443, 460,
	463, 492, 577, 578, 579, 274, 462, 581, 582, 583,
	584, 585, 586, 587, 580, 434, 524, 501, 527, 442,
	504, 503, 0, 0, 538, 458, 539, 540, 362, 363,
	364, 365, 325, 565, 292, 461, 388, 0, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 528,
	625, 0, 588, 589, 0, 0, 455, 456, 320, 327,
	474, 329, 291, 377, 322, 440, 336, 0, 467, 532,
	468, 591, 594, 592, 593, 369, 332, 333, 403, 337,
	347, 391, 439, 375, 396, 289, 430, 404, 351, 518,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 572, 571,
	570, 569, 568, 567, 566, 0, 0, 515, 417, 301,
	263, 297, 298, 305, 614, 611, 421, 615, 0, 271,
	495, 345, 0, 386, 319, 560, 561, 0, 0, 219,
	220, 221, 222, 223, 224, 225, 226, 264, 227, 228,
	229, 230, 231, 232, 233, 236, 237, 238, 239, 240,
	241, 242, 243, 563, 234, 235, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	0, 0, 0, 265, 266, 267, 268, 0, 0, 259,
	260, 261, 262, 0, 0, 0, 446, 447, 448, 470,
	0, 432, 494, 612, 0, 0, 0, 0, 0, 0,
	0, 544, 556, 590, 0, 600, 601, 603, 605, 604,
	607, 409, 0, 618, 485, 486, 619, 596, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 0, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 2463, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	0, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 454, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 0, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 2246, 618, 485, 486,
	619, 596, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	0, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	0, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	0, 438, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 1807, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 1935, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 0, 618,
	485, 486, 619, 596, 374, 0, 500, 533, 522, 606,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 344, 537, 519, 529, 520, 505,
	506, 507, 514, 324, 508, 509, 510, 480, 511, 481,
	512, 513, 0, 536, 487, 405, 358, 554, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	1462, 0, 0, 0, 287, 209, 482, 602, 484, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 411, 428, 288, 401, 441, 293, 408, 283,
	373, 397, 0, 0, 279, 426, 407, 355, 334, 335,
	278, 0, 392, 312, 326, 309, 371, 0, 425, 453,
	308, 444, 0, 436, 281, 0, 435, 370, 422, 427,
	356, 350, 280, 424, 354, 349, 338, 316, 469, 339,
	340, 330, 382, 348, 383, 331, 360, 359, 361, 0,
	0, 0, 0, 0, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 599, 0, 438, 0, 0, 0, 0, 0, 0,
	410, 0, 0, 341, 0, 0, 0, 454, 0, 395,
	376, 621, 0, 0, 393, 346, 423, 384, 429, 412,
	437, 1840, 385, 272, 413, 311, 357, 284, 286, 306,
	313, 315, 317, 318, 366, 367, 379, 400, 414, 415,
	416, 310, 294, 394, 295, 328, 296, 273, 302, 300,
	303, 402, 304, 275, 380, 420, 0, 323, 390, 353,
	276, 352, 381, 419, 418, 285, 445, 451, 452, 541,
	0, 457, 622, 623, 624, 466, 471, 472, 473, 475,
	476, 477, 478, 542, 559, 526, 496, 459, 550, 493,
	497, 498, 562, 0, 0, 0, 450, 342, 343, 0,
	321, 269, 270, 617, 307, 372, 564, 597, 598, 489,
	0, 551, 490, 499, 299, 523, 535, 534, 368, 449,
	0, 546, 549, 479, 616, 0, 543, 558, 620, 557,
	613, 378, 0, 399, 555, 502, 0, 547, 521, 0,
	548, 517, 552, 0, 491, 0, 406, 431, 443, 460,
	463, 492, 577, 578, 579, 274, 462, 581, 582, 583,
	584, 585, 586, 587, 580, 434, 524, 501, 527, 442,
	504, 503, 0, 0, 538, 458, 539, 540, 362, 363,
	364, 365, 325, 565, 292, 461, 388, 0, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 528,
	625, 0, 588, 589, 0, 0, 455, 456, 320, 327,
	474, 329, 291, 377, 322, 440, 336, 0, 467, 532,
	468, 591, 594, 592, 593, 369, 332, 333, 403, 337,
	347, 391, 439, 375, 396, 289, 430, 404, 351, 518,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 572, 571,
	570, 569, 568, 567, 566, 0, 0, 515, 417, 301,
	263, 297, 298, 305, 614, 611, 421, 615, 0, 271,
	495, 345, 0, 386, 319, 560, 561, 0, 0, 219,
	220, 221, 222, 223, 224, 225, 226, 264, 227, 228,
	229, 230, 231, 232, 233, 236, 237, 238, 239, 240,
	241, 242, 243, 563, 234, 235, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	0, 0, 0, 265, 266, 267, 268, 0, 0, 259,
	260, 261, 262, 0, 0, 0, 446, 447, 448, 470,
	0, 432, 494, 612, 0, 0, 0, 0, 0, 0,
	0, 544, 556, 590, 0, 600, 601, 603, 605, 604,
	607, 409, 0, 618, 485, 486, 619, 596, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 0, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 428, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	1492, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 454, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 0, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 0, 618, 485, 486,
	619, 596, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 632, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	0, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	411, 428, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	0, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	0, 438, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 642, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 306, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 389, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 587,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 926, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 0, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 0, 618,
	485, 486, 619, 596, 374, 0, 500, 533, 522, 606,
	488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 344, 537, 519, 529, 520, 505,
	506, 507, 514, 324, 508, 509, 510, 480, 511, 481,
	512, 513, 0, 536, 487, 405, 358, 554, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 287, 209, 482, 602, 484, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 411, 428, 288, 401, 441, 293, 408, 283,
	373, 397, 0, 0, 279, 426, 407, 355, 334, 335,
	278, 0, 392, 312, 326, 309, 371, 0, 425, 453,
	308, 444, 0, 436, 281, 0, 435, 370, 422, 427,
	356, 350, 280, 424, 354, 349, 338, 316, 469, 339,
	340, 330, 382, 348, 383, 331, 360, 359, 361, 0,
	0, 0, 0, 0, 464, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 599, 0, 438, 0, 0, 0, 0, 0, 0,
	410, 0, 0, 341, 0, 0, 0, 454, 0, 395,
	376, 621, 0, 0, 393, 346, 423, 384, 429, 412,
	437, 389, 385, 272, 413, 311, 357, 284, 286, 306,
	313, 315, 317, 318, 366, 367, 379, 400, 414, 415,
	416, 310, 294, 394, 295, 328, 296, 273, 302, 300,
	303, 402, 304, 275, 380, 420, 0, 323, 390, 353,
	276, 352, 381, 419, 418, 285, 445, 451, 452, 541,
	0, 457, 622, 623, 624, 466, 471, 472, 473, 475,
	476, 477, 478, 542, 559, 526, 496, 459, 550, 493,
	497, 498, 562, 0, 0, 0, 450, 342, 343, 0,
	321, 269, 270, 617, 307, 372, 564, 597, 598, 489,
	0, 551, 490, 499, 299, 523, 535, 534, 368, 449,
	0, 546, 549, 479, 616, 0, 543, 558, 620, 557,
	613, 378, 0, 399, 555, 502, 0, 547, 521, 0,
	548, 517, 552, 0, 491, 0, 406, 431, 443, 460,
	463, 492, 577, 578, 579, 274, 462, 581, 582, 583,
	584, 585, 586, 587, 580, 434, 524, 501, 527, 442,
	504, 503, 0, 0, 538, 458, 539, 540, 362, 363,
	364, 365, 325, 565, 292, 461, 388, 0, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 528,
	625, 0, 588, 589, 0, 0, 455, 456, 320, 327,
	474, 329, 291, 377, 322, 440, 336, 0, 467, 532,
	468, 591, 594, 592, 593, 369, 332, 333, 403, 337,
	347, 391, 439, 375, 396, 289, 430, 404, 351, 518,
	545, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 572, 571,
	570, 569, 568, 567, 566, 0, 0, 515, 417, 301,
	263, 297, 298, 305, 614, 611, 421, 615, 0, 271,
	495, 345, 0, 386, 319, 560, 561, 0, 0, 219,
	220, 221, 222, 223, 224, 225, 226, 264, 227, 228,
	229, 230, 231, 232, 233, 236, 237, 238, 239, 240,
	241, 242, 243, 563, 234, 235, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	0, 0, 0, 265, 266, 267, 268, 0, 0, 259,
	260, 261, 262, 0, 0, 0, 446, 447, 448, 470,
	0, 432, 494, 612, 0, 0, 0, 0, 0, 0,
	0, 544, 556, 590, 0, 600, 601, 603, 605, 604,
	607, 409, 0, 618, 485, 486, 619, 596, 374, 0,
	500, 533, 522, 606, 488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 344, 537,
	519, 529, 520, 505, 506, 507, 514, 324, 508, 509,
	510, 480, 511, 481, 512, 513, 0, 536, 487, 405,
	358, 554, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 287, 209,
	482, 602, 484, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 411, 1442, 288, 401,
	441, 293, 408, 283, 373, 397, 0, 0, 279, 426,
	407, 355, 334, 335, 278, 0, 392, 312, 326, 309,
	371, 0, 425, 453, 308, 444, 0, 436, 281, 0,
	435, 370, 422, 427, 356, 350, 280, 424, 354, 349,
	338, 316, 469, 339, 340, 330, 382, 348, 383, 331,
	360, 359, 361, 0, 0, 0, 0, 0, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 599, 0, 438, 0, 0,
	0, 0, 0, 0, 410, 0, 0, 341, 0, 0,
	0, 454, 0, 395, 376, 621, 0, 0, 393, 346,
	423, 384, 429, 412, 437, 389, 385, 272, 413, 311,
	357, 284, 286, 306, 313, 315, 317, 318, 366, 367,
	379, 400, 414, 415, 416, 310, 294, 394, 295, 328,
	296, 273, 302, 300, 303, 402, 304, 275, 380, 420,
	0, 323, 390, 353, 276, 352, 381, 419, 418, 285,
	445, 451, 452, 541, 0, 457, 622, 623, 624, 466,
	471, 472, 473, 475, 476, 477, 478, 542, 559, 526,
	496, 459, 550, 493, 497, 498, 562, 0, 0, 0,
	450, 342, 343, 0, 321, 269, 270, 617, 307, 372,
	564, 597, 598, 489, 0, 551, 490, 499, 299, 523,
	535, 534, 368, 449, 0, 546, 549, 479, 616, 0,
	543, 558, 620, 557, 613, 378, 0, 399, 555, 502,
	0, 547, 521, 0, 548, 517, 552, 0, 491, 0,
	406, 431, 443, 460, 463, 492, 577, 578, 579, 274,
	462, 581, 582, 583, 584, 585, 586, 587, 580, 434,
	524, 501, 527, 442, 504, 503, 0, 0, 538, 458,
	539, 540, 362, 363, 364, 365, 325, 565, 292, 461,
	388, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 531, 528, 625, 0, 588, 589, 0, 0,
	455, 456, 320, 327, 474, 329, 291, 377, 322, 440,
	336, 0, 467, 532, 468, 591, 594, 592, 593, 369,
	332, 333, 403, 337, 347, 391, 439, 375, 396, 289,
	430, 404, 351, 518, 545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 572, 571, 570, 569, 568, 567, 566, 0,
	0, 515, 417, 301, 263, 297, 298, 305, 614, 611,
	421, 615, 0, 271, 495, 345, 0, 386, 319, 560,
	561, 0, 0, 219, 220, 221, 222, 223, 224, 225,
	226, 264, 227, 228, 229, 230, 231, 232, 233, 236,
	237, 238, 239, 240, 241, 242, 243, 563, 234, 235,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 0, 0, 0, 265, 266, 267,
	268, 0, 0, 259, 260, 261, 262, 0, 0, 0,
	446, 447, 448, 470, 0, 432, 494, 612, 0, 0,
	0, 0, 0, 0, 0, 544, 556, 590, 0, 600,
	601, 603, 605, 604, 607, 409, 0, 618, 485, 486,
	619, 596, 374, 0, 500, 533, 522, 606, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 344, 537, 519, 529, 520, 505, 506, 507,
	514, 324, 508, 509, 510, 480, 511, 481, 512, 513,
	0, 536, 487, 405, 358, 554, 553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 287, 209, 482, 602, 484, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	411, 1440, 288, 401, 441, 293, 408, 283, 373, 397,
	0, 0, 279, 426, 407, 355, 334, 335, 278, 0,
	392, 312, 326, 309, 371, 0, 425, 453, 308, 444,
	0, 436, 281, 0, 435, 370, 422, 427, 356, 350,
	280, 424, 354, 349, 338, 316, 469, 339, 340, 330,
	382, 348, 383, 331, 360, 359, 361, 0, 0, 0,
	0, 0, 464, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 599,
	0, 438, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 341, 0, 0, 0, 454, 0, 395, 376, 621,
	0, 0, 393, 346, 423, 384, 429, 412, 437, 389,
	385, 272, 413, 311, 357, 284, 286, 306, 313, 315,
	317, 318, 366, 367, 379, 400, 414, 415, 416, 310,
	294, 394, 295, 328, 296, 273, 302, 300, 303, 402,
	304, 275, 380, 420, 0, 323, 390, 353, 276, 352,
	381, 419, 418, 285, 445, 451, 452, 541, 0, 457,
	622, 623, 624, 466, 471, 472, 473, 475, 476, 477,
	478, 542, 559, 526, 496, 459, 550, 493, 497, 498,
	562, 0, 0, 0, 450, 342, 343, 0, 321, 269,
	270, 617, 307, 372, 564, 597, 598, 489, 0, 551,
	490, 499, 299, 523, 535, 534, 368, 449, 0, 546,
	549, 479, 616, 0, 543, 558, 620, 557, 613, 378,
	0, 399, 555, 502, 0, 547, 521, 0, 548, 517,
	552, 0, 491, 0, 406, 431, 443, 460, 463, 492,
	577, 578, 579, 274, 462, 581, 582, 583, 584, 585,
	586, 587, 580, 434, 524, 501, 527, 442, 504, 503,
	0, 0, 538, 458, 539, 540, 362, 363, 364, 365,
	325, 565, 292, 461, 388, 0, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 531, 528, 625, 0,
	588, 589, 0, 0, 455, 456, 320, 327, 474, 329,
	291, 377, 322, 440, 336, 0, 467, 532, 468, 591,
	594, 592, 593, 369, 332, 333, 403, 337, 347, 391,
	439, 375, 396, 289, 430, 404, 351, 518, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 573, 572, 571, 570, 569,
	568, 567, 566, 0, 0, 515, 417, 301, 263, 297,
	298, 305, 614, 611, 421, 615, 0, 271, 495, 345,
	0, 386, 319, 560, 561, 0, 0, 219, 220, 221,
	222, 223, 224, 225, 226, 264, 227, 228, 229, 230,
	231, 232, 233, 236, 237, 238, 239, 240, 241, 242,
	243, 563, 234, 235, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 0, 0,
	0, 265, 266, 267, 268, 0, 0, 259, 260, 261,
	262, 0, 0, 0, 446, 447, 448, 470, 0, 432,
	494, 612, 0, 0, 0, 0, 0, 0, 0, 544,
	556, 590, 0, 600, 601, 603, 605, 604, 607, 409,
	0, 618, 485, 486, 619, 596, 374, 0, 500, 533,
	522, 606, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 344, 537, 519, 529,
	520, 505, 506, 507, 514, 324, 508, 509, 510, 480,
	511, 481, 512, 513, 0, 536, 487, 405, 358, 554,
	553, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 287, 209, 482, 602,
	484, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 411, 428, 288, 401, 441, 293,
	408, 283, 373, 397, 0, 0, 279, 426, 407, 355,
	334, 335, 278, 0, 392, 312, 326, 309, 371, 0,
	425, 453, 308, 444, 0, 436, 281, 0, 435, 370,
	422, 427, 356, 350, 280, 424, 354, 349, 338, 316,
	469, 339, 340, 330, 382, 348, 383, 331, 360, 359,
	361, 0, 0, 0, 0, 0, 464, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 0, 599, 0, 438, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 341, 0, 0, 0, 454,
	0, 395, 376, 621, 0, 0, 393, 346, 423, 384,
	429, 412, 437, 389, 385, 272, 413, 311, 357, 284,
	286, 709, 313, 315, 317, 318, 366, 367, 379, 400,
	414, 415, 416, 310, 294, 394, 295, 328, 296, 273,
	302, 300, 303, 402, 304, 275, 380, 420, 0, 323,
	390, 353, 276, 352, 381, 419, 418, 285, 445, 451,
	452, 541, 0, 457, 622, 623, 624, 466, 471, 472,
	473, 475, 476, 477, 478, 542, 559, 526, 496, 459,
	550, 493, 497, 498, 562, 0, 0, 0, 450, 342,
	343, 0, 321, 269, 270, 617, 307, 372, 564, 597,
	598, 489, 0, 551, 490, 499, 299, 523, 535, 534,
	368, 449, 0, 546, 549, 479, 616, 0, 543, 558,
	620, 557, 613, 378, 0, 399, 555, 502, 0, 547,
	521, 0, 548, 517, 552, 0, 491, 0, 406, 431,
	443, 460, 463, 492, 577, 578, 579, 274, 462, 581,
	582, 583, 584, 585, 586, 587, 580, 434, 524, 501,
	527, 442, 504, 503, 0, 0, 538, 458, 539, 540,
	362, 363, 364, 365, 325, 565, 292, 461, 388, 0,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	531, 528, 625, 0, 588, 589, 0, 0, 455, 456,
	320, 327, 474, 329, 291, 377, 322, 440, 336, 0,
	467, 532, 468, 591, 594, 592, 593, 369, 332, 333,
	403, 337, 347, 391, 439, 375, 396, 289, 430, 404,
	351, 518, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 573,
	572, 571, 570, 569, 568, 567, 566, 0, 0, 515,
	417, 301, 263, 297, 298, 305, 614, 611, 421, 615,
	0, 271, 495, 345, 0, 386, 319, 560, 561, 0,
	0, 219, 220, 221, 222, 223, 224, 225, 226, 264,
	227, 228, 229, 230, 231, 232, 233, 236, 237, 238,
	239, 240, 241, 242, 243, 563, 234, 235, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 0, 0, 0, 265, 266, 267, 268, 0,
	0, 259, 260, 261, 262, 0, 0, 0, 446, 447,
	448, 470, 0, 432, 494, 612, 0, 0, 0, 0,
	0, 0, 0, 544, 556, 590, 0, 600, 601, 603,
	605, 604, 607, 409, 0, 618, 485, 486, 619, 596,
	374, 0, 500, 533, 522, 606, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	344, 537, 519, 529, 520, 505, 506, 507, 514, 324,
	508, 509, 510, 480, 511, 481, 512, 513, 0, 536,
	487, 405, 358, 554, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	287, 209, 482, 602, 484, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 411, 428,
	288, 401, 441, 293, 408, 283, 373, 397, 0, 0,
	279, 426, 407, 355, 334, 335, 278, 0, 392, 312,
	326, 309, 371, 0, 425, 453, 308, 444, 0, 436,
	281, 0, 435, 370, 422, 427, 356, 350, 280, 424,
	354, 349, 338, 316, 469, 339, 340, 330, 382, 348,
	383, 331, 360, 359, 361, 0, 0, 0, 0, 0,
	464, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 599, 0, 438,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 341,
	0, 0, 0, 454, 0, 395, 376, 621, 0, 0,
	393, 346, 423, 384, 429, 412, 437, 666, 385, 272,
	413, 311, 357, 284, 286, 306, 313, 315, 317, 318,
	366, 367, 379, 400, 414, 415, 416, 310, 294, 394,
	295, 328, 296, 273, 302, 300, 303, 402, 304, 275,
	380, 420, 0, 323, 390, 353, 276, 352, 381, 419,
	418, 285, 445, 451, 452, 541, 0, 457, 622, 623,
	624, 466, 471, 472, 473, 475, 476, 477, 478, 542,
	559, 526, 496, 459, 550, 493, 497, 498, 562, 0,
	0, 0, 450, 342, 343, 0, 321, 269, 270, 617,
	307, 372, 564, 597, 598, 489, 0, 551, 490, 499,
	299, 523, 535, 534, 368, 449, 0, 546, 549, 479,
	616, 0, 543, 558, 620, 557, 613, 378, 0, 399,
	555, 502, 0, 547, 521, 0, 548, 517, 552, 0,
	491, 0, 406, 431, 443, 460, 463, 492, 577, 578,
	579, 274, 462, 581, 582, 583, 584, 585, 586, 667,
	580, 434, 524, 501, 527, 442, 504, 503, 0, 0,
	538, 458, 539, 540, 362, 363, 364, 365, 325, 565,
	292, 461, 388, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 531, 528, 625, 0, 588, 589,
	0, 0, 455, 456, 320, 327, 474, 329, 291, 377,
	322, 440, 336, 0, 467, 532, 468, 591, 594, 592,
	593, 369, 332, 333, 403, 337, 347, 391, 439, 375,
	396, 289, 430, 404, 351, 518, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 572, 571, 570, 569, 568, 567,
	566, 0, 0, 515, 417, 301, 263, 297, 298, 305,
	614, 611, 421, 615, 0, 271, 495, 345, 0, 386,
	319, 560, 561, 0, 0, 219, 220, 221, 222, 223,
	224, 225, 226, 264, 227, 228, 229, 230, 231, 232,
	233, 236, 237, 238, 239, 240, 241, 242, 243, 563,
	234, 235, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 0, 0, 0, 265,
	266, 267, 268, 1922, 0, 259, 260, 261, 262, 0,
	0, 0, 446, 447, 448, 470, 0, 432, 494, 612,
	0, 0, 0, 0, 0, 0, 0, 544, 556, 590,
	0, 600, 601, 603, 605, 604, 607, 409, 1924, 618,
	485, 486, 619, 596, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1922, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3607, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1899, 0, 0, 0, 0, 0, 0, 0, 1924, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1899, 0, 0, 0, 0, 0, 0, 0, 1915, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1915, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1909,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1897,
	1931, 0, 0, 1898, 1900, 1902, 0, 1904, 1905, 1906,
	1910, 1911, 1912, 1914, 1917, 1918, 1919, 0, 0, 0,
	0, 0, 0, 0, 1907, 1916, 1908, 0, 1903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1909,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1923, 1897,
	1931, 0, 0, 1898, 1900, 1902, 0, 1904, 1905, 1906,
	1910, 1911, 1912, 1914, 1917, 1918, 1919, 0, 0, 0,
	0, 0, 0, 0, 1907, 1916, 1908, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1920, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1923, 0,
	1896, 0, 0, 0, 0, 0, 0, 1895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1913, 0, 0, 0, 0, 0, 0, 0, 0,
	1901, 0, 0, 1920, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1896, 0, 0, 0, 0, 0, 0, 1895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1913, 0, 0, 0, 0, 0, 0, 0, 0,
	1901,
}

var yyPact = [...]int{
	330, -1000, -1000, -1000, -305, 14235, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 45581, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 412, 45581, -303, 28389, 43739, -1000, -1000,
	2609, -1000, 44353, 16097, 45581, 503, 498, 45581, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	892, -1000, 48037, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	817, 3973, 47423, 11141, -227, -1000, 1727, -37, 2460, 451,
	1055, 1074, 1149, 1149, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 284, 915, 44967,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3666, 272, 915, 21017, 105, 96, 1727,
	409, -94, -89, -95, 192, -1000, 1150, 3850, 209, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11141, 11141, 14235, -347, 14235, 11141, 45581, 45581, -1000, -1000,
	-1000, -1000, -303, 44353, 817, 3973, 11141, 2460, 451, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -89, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -94, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -95, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 96, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4938, -1000,
	1539, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2257, 2983, 1525, 2457,
	769, 43739, 45581, -1000, 154, 769, -1000, -1000, -1000, 1727,
	3429, -1000, 45581, 45581, 191, 1851, -1000, 433, 389, 546,
	327, 1520, -1000, -1000, -1000, -1000, -1000, -1000, 698, 3387,
	-1000, 45581, 45581, 3002, 45581, -1000, 2176, 721, -1000, 4353,
	3172, 1315, 919, 3022, -1000, -1000, 2979, -1000, 336, 325,
	298, 803, 407, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	349, -1000, 3260, -1000, -1000, 326, -1000, -1000, 316, -1000,
	-1000, -1000, 89, -1000, -1000, -1000, -1000, -1000, -1000, -13,
	-1000, -1000, 1123, 2114, 11141, 2250, -1000, 3579, 1548, -1000,
	-1000, -1000, 6816, 12992, 12992, 12992, 12992, 45581, -1000, -1000,
	2781, 11141, 2978, 2977, 2972, 2970, -1000, -1000, -1000, -1000,
	-1000, -1000, 1499, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1989, -1000, -1000, -1000, 13609, -1000, 2963, 2962,
	2960, 2953, 2952, 2951, 2948, 2947, 2940, 2939, 2935, 2920,
	2918, 2916, 2645, 15473, 2913, 2454, 2452, 2911, 2910, 2896,
	2450, 2894, 2893, 2892, 2645, 2645, 2890, 2889, 2888, 2887,
	2881, 2880, 2878, 2876, 2875, 2873, 2871, 2870, 2858, 2853,
	2852, 2849, 2848, 2847, 2841, 2836, 2832, 2831, 2828, 2827,
	2826, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1371, -1000, 2798, 3399, 2706, -1000,
	3251, 3228, 3221, 3208, -269, 2797, 2161, -1000, -1000, 112,
	3386, 45581, -1000, -82, -1000, -1000, 1081, -1000, 1003, -1000,
	809, 809, 45581, 45581, 203, 876, 809, 809, 809, 809,
	809, 866, 809, 3282, 889, 878, 875, 874, 809, -46,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1849, 1846, 3072,
	977, -1000, -1000, -1000, -1000, 1406, 45581, -1000, 2729, 1626,
	1626, 3351, 3351, 3280, 737, 727, 725, 1626, 562, -1000,
	1793, 1793, 1793, 1793, 1626, 493, 750, 3285, 3285, 97,
	1793, 65, 1626, 1626, 65, 1626, 1626, -1000, 1835, 299,
	-275, -1000, -1000, -1000, -1000, 1793, 1793, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3255, 3254, 817, 817, 45581, 817,
	216, 45581, 817, 817, 817, 842, 26, 46809, 46195, 2176,
	717, 714, 1411, 1699, -1000, 1665, 45581, 45581, 1665, 1665,
	24091, 23477, -1000, 45581, -1000, 3399, 2706, 2640, 1531, 2637,
	2706, -99, -100, -107, 817, 817, 817, 817, 817, 301,
	817, 817, 817, 817, 817, 45581, 45581, 43125, 817, 817,
	817, 817, 9284, 9284, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14235, 2248, 2174, 208, -5, -290, 276,
	-1000, -1000, 45581, 3130, 296, -1000, -1000, -1000, 2652, -1000,
	2717, 2717, 2717, 2717, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2717, 2717, 2726, 2795, -1000, -1000, 2715,
	2715, 2715, 2652, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2719, 2719,
	2720, 2720, 2719, 45581, -120, -1000, -1000, 11141, 45581, 3147,
	395, 2792, 769, -1000, -1000, 45581, 119, 396, 3399, 3144,
	3285, 3338, -1000, -1000, 1496, 2160, 2448, -1000, 327, -1000,
	426, 327, 1797, -1000, 1054, -1000, -1000, -1000, -1000, -1000,
	45581, -13, 653, -1000, -1000, 2435, 2786, -1000, 614, 1290,
	1361, -1000, 287, 3925, 36371, 2176, 36371, 45581, -1000, -1000,
	-1000, -1000, -1000, -1000, 77, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 306,
	-1000, 11141, 11141, 11141, 11141, 11141, -1000, 902, 12375, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12992, 12992, 12992, 12992,
	12992, 12992, 12992, 12992, 12992, 12992, 12992, 12992, 2780, 1924,
	12992, 12992, 12992, 12992, 25933, 1531, 3231, 1408, 292, 1548,
	1548, 1548, 1548, 11141, -1000, 1869, 2114, 11141, 11141, 11141,
	11141, 45581, -1000, -1000, 4137, 11141, 11141, 4171, 11141, 3203,
	11141, 11141, 11141, 2633, 5573, 45581, 11141, -1000, 2630, 2628,
	-1000, -1000, 1976, 11141, -1000, -1000, 11141, -1000, -1000, 11141,
	12992, 11141, -1000, 11141, 11141, 11141, -1000, -1000, 2488, 3203,
	3203, 3203, 1856, 11141, 11141, 3203, 3203, 3203, 1843, 3203,
	3203, 3203, 3203, 3203, 3203, 3203, 3203, 3203, 3203, 2626,
	2625, 2624, 10524, 3285, -227, -1000, 8667, 3144, 3285, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -271,
	2785, 45581, 2442, 2441, -313, 1049, 448, 36, 1027, 1006,
	1020, -1000, 45581, 1904, 45581, 3197, -1000, 2784, 45581, 809,
	809, 809, -1000, 41283, 36371, 45581, 45581, 2176, 45581, 45581,
	45581, 809, 809, 809, 809, 45581, -1000, 3100, 36371, 3087,
	842, -1000, 45581, 1406, 3195, 45581, 3351, 12992, 12992, -1000,
	-1000, 11141, -1000, 42511, 1793, 1626, 1626, -1000, -1000, 45581,
	-1000, -1000, -1000, 1793, 45581, 1793, 1793, 3351, 1793, -1000,
	-1000, -1000, 1626, 1626, -1000, -1000, 11141, -1000, -1000, 1793,
	1793, -1000, -1000, 3351, 45581, 73, 3351, 3351, 70, -1000,
	-1000, -1000, 1626, 45581, 45581, 809, 45581, -1000, 45581, 45581,
	-1000, -1000, 45581, 45581, 4168, 45581, 41283, 41897, 3244, -1000,
	36371, 45581, 45581, 34529, -1000, 1366, -1000, 29, -1000, 2,
	26, 1665, 26, 1665, -1000, 613, 599, 22249, 551, 36371,
	6190, -1000, -1000, 1665, 1665, 6190, 6190, 1549, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1404, -1000, 279, 3285, -1000,
	-1000, -1000, -1000, -1000, 2158, 2157, 2155, 45581, 41283, 36371,
	2176, 45581, 817, 45581, 45581, 45581, 45581, 45581, -1000, 2782,
	1493, -1000, 3163, 45581, 45581, 45581, 45581, 1310, -1000, -1000,
	19167, 1491, 1310, -1000, 1893, -1000, 11141, 14235, -254, 11141,
	14235, 14235, 11141, 14235, -1000, 11141, 283, -1000, -1000, -1000,
	-1000, 2149, -1000, 2147, -1000, -1000, -1000, -1000, -1000, 2439,
	2439, -1000, 2146, -1000, -1000, -1000, -1000, 2144, -1000, -1000,
	2132, -1000, -1000, -1000, -1000, -162, 2623, 1123, -1000, 2437,
	3019, -229, -1000, 20403, 45581, 45581, 395, -314, -1000, 1842,
	1841, 1840, -1000, -229, -1000, 19785, 45581, 3285, -1000, -233,
	3144, 11141, 45581, -1000, 3277, -1000, -1000, 327, -1000, 472,
	401, -1000, -1000, -1000, -1000, -1000, -1000, 1484, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 405, 1402,
	-1000, 45581, -1000, -1000, 287, 36371, 38213, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 261, -1000, -1000, 185, -1000, 862,
	235, 1796, -1000, -1000, 219, 220, 197, 924, 2114, -1000,
	1903, 1903, 1907, -1000, 690, -1000, -1000, -1000, -1000, 2781,
	-1000, -1000, -1000, 2190, 1798, -1000, 1811, 1811, 1528, 1528,
	1528, 1528, 1528, 1888, 1888, -1000, -1000, -1000, 6816, 2780,
	12992, 12992, 12992, 12992, 894, 894, 3774, 3693, -1000, -1000,
	-1000, -1000, 11141, 184, 1877, -1000, 11141, 2724, 1350, 2366,
	1332, 1483, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2621, 2620, 2903, 3385, 2616, 11141, -1000, -1000,
	1795, 1742, 1741, -1000, 2371, 9907, -1000, -1000, -1000, 2615,
	1479, 2614, -1000, -1000, -1000, 2610, 1715, 1281, 2606, 2040,
	2605, 2593, 2590, 2588, 1396, 11141, 11141, 11141, 11141, 2587,
	1714, 1708, 11141, 11141, 11141, 11141, 2584, 11141, 11141, 11141,
	11141, 11141, 11141, 11141, 11141, 11141, 11141, 137, 137, 137,
	1378, 1374, -1000, -1000, 1702, -1000, 2114, -1000, -1000, 3144,
	-1000, 2776, 2131, 1372, -1000, -1000, -300, 2397, 45581, 1046,
	45581, -1000, -1000, 1044, 991, 996, 3272, 3155, 832, 45581,
	1271, 2774, 45581, 45581, 45581, 275, -1000, -1000, 1319, -1000,
	235, 214, 509, 1131, 2997, 3383, -121, 45581, 45581, 45581,
	45581, 3193, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	40669, -1000, 2768, 1687, -1000, -1000, 1548, 1548, 2114, 2996,
	45581, 45581, 3351, 3351, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1793, 3351, 3351, 1379, 1626, 1793, -1000, -1000, 1793,
	-325, -1000, 1793, -1000, -325, 1462, -325, 45581, -1000, -1000,
	-1000, 3191, 2729, 1368, -1000, -1000, -1000, 3336, 1821, 802,
	802, 1040, 529, 3335, 17939, -1000, 1596, 1308, 857, 3102,
	332, -1000, 1596, -153, 777, 1596, 1596, 1596, 1596, 1596,
	1596, 1596, 684, 654, 1596, 1596, 1596, 1596, 1596, 1596,
	1596, 1596, 1596, 1596, 1596, 1071, 1596, 1596, 1596, 1596,
	1596, -1000, 1596, 2767, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 706, 604, 263, 3242, 369, -1000, 367, 1319, 3240,
	400, 3402, 1312, -1000, -1000, -1000, -1000, 26547, 26547, 21635,
	26547, -1000, 206, 26, 63, -1000, -1000, 1366, 6190, 1366,
	6190, -1000, -1000, 856, -1000, -1000, 1131, -1000, 45581, 45581,
	-1000, -1000, 2766, 1836, -1000, -1000, 15473, -1000, 6190, 6190,
	-1000, -1000, 27775, 45581, -1000, -14, -1000, -6, 3144, -1000,
	-1000, -1000, 1352, -1000, -1000, 1356, 1131, 3010, 45581, 1352,
	1352, 1352, -1000, -1000, 17325, 45581, 45581, -1000, -1000, -1000,
	-1000, 3351, 9284, -1000, 34529, -1000, -1000, 40055, -1000, 39441,
	3351, 1864, -1000, 14235, 2124, 200, -1000, 269, -296, 199,
	1992, 198, 2114, -1000, -1000, 2583, 2581, 1686, -1000, 1682,
	2575, 1681, 1680, 2122, -1000, 55, -1000, 3134, 1158, -1000,
	2750, -1000, 1676, 3060, -1000, 1324, -1000, 1810, 1672, -1000,
	-1000, -1000, 11141, 38827, 11141, 1158, 1631, 3059, 1324, 3144,
	2431, -1000, 1316, -1000, 2422, 1438, 190, -1000, -1000, -1000,
	45581, 817, 2435, 1601, 38213, 1177, -1000, 855, 1436, 1434,
	-1000, 36371, 317, 36371, -1000, 36371, -1000, -1000, 404, -1000,
	45581, 3133, -1000, -1000, -1000, 2397, 1808, -320, 45581, -1000,
	-1000, -1000, -1000, -1000, 1600, -1000, 894, 894, 3774, 2843,
	-1000, 12992, -1000, 12992, 3186, -1000, 1863, -1000, 11141, 2103,
	4756, 11141, 4756, 1734, 25319, 45581, -1000, -1000, 11141, 11141,
	-1000, 3168, -1000, -1000, -1000, -1000, 11141, 11141, 2671, -1000,
	45581, -1000, -1000, -1000, -1000, 25319, -1000, 12992, -1000, -1000,
	-1000, -1000, 11141, 1309, 1309, 3154, 1587, 137, 137, 137,
	3137, 3132, 3101, 1585, 137, 3093, 3068, 3016, 3012, 2968,
	2958, 2945, 2937, 2914, 2838, -1000, 2749, -1000, -1000, 1954,
	11758, 8667, -1000, -1000, 293, 1302, 2121, 2424, 145, -1000,
	1807, -1000, 45581, 1093, -1000, -1000, -1000, 986, 447, -1000,
	2009, 150, 294, 2571, 1282, -1000, -1000, 45581, -1000, -1000,
	-1000, 17325, 2729, 2748, 2729, 132, 1596, 600, 36371, 713,
	-1000, 45581, 45581, 2043, 1804, 3006, 732, 3128, 45581, 2746,
	394, 2743, 2741, 3189, 492, 5000, 45581, 1284, -1000, 1429,
	3850, -1000, 45581, -1000, 2176, -1000, 1626, -1000, -1000, 3351,
	-1000, -1000, 11141, 11141, 3351, 1626, 1626, -1000, 1038, 1793,
	-1000, 45581, -1000, -1000, 492, 5000, 3188, 4469, 547, 2642,
	-1000, 45581, -1000, -1000, -1000, 837, -1000, 998, 809, 45581,
	1936, 998, 1932, 2740, -1000, -1000, 45581, 45581, 45581, 45581,
	-1000, -1000, 45581, -1000, 45581, 45581, 45581, 45581, 45581, 37599,
	-1000, 45581, 45581, -1000, 45581, 1930, 45581, 1928, 3146, -1000,
	1596, 1596, 941, -1000, -1000, 589, -1000, 37599, 2120, 2112,
	2108, 2105, 2423, 2421, 2419, 1596, 1596, 2102, 2418, 36985,
	2415, 1135, 2100, 2097, 2096, 2111, 2414, 1019, -1000, 2412,
	2091, 2046, 2041, 45581, 2738, 2308, -1000, -1000, 2009, 132,
	1596, 359, 45581, 1802, 1801, 600, 507, -22, 22863, 45581,
	34529, 34529, 34529, 34529, -1000, 3049, 3043, 3042, -1000, 3036,
	3035, 3044, 45581, 34529, 2729, -1000, 36985, -1000, -1000, -1000,
	1531, 1553, 3320, 1026, 11141, -1000, -1000, 16, -4, -1000,
	-1000, -1000, 36371, 2411, 551, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3271, 45581, 45581, 829, 2570, 1278, -1000, -1000,
	-1000, 5000, 2717, 2717, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2717, 2717, 2726, -1000, -1000, 2715, 2715,
	2715, 2652, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2719, 2719, 2720, 2720, 2719, -1000, -1000, 3349,
	-1000, 1252, -1000, -1000, 1428, -1000, 3349, 1885, -308, 14235,
	1799, 1717, -1000, 11141, 14235, 11141, -256, 352, -258, -1000,
	-1000, -1000, 2409, -1000, -1000, -1000, 2095, -1000, 2069, -1000,
	160, 172, 1916, -229, 8667, 406, 45581, -229, 45581, 8667,
	-1000, 45581, 171, -331, -335, 166, 399, -229, 3271, 55,
	11141, 3105, -1000, -1000, 45581, 2065, -1000, -1000, -1000, 3379,
	36371, 2176, 1559, 35757, -1000, 314, -1000, 259, 590, 2402,
	-1000, 873, 143, 2398, 2397, -1000, -1000, -1000, -1000, 12992,
	1548, -1000, -1000, -1000, 2114, 11141, 2566, -1000, 992, 992,
	2062, 2562, 2556, -1000, 2717, 2717, -1000, 2652, 2715, 2652,
	992, 992, 2549, -1000, 2381, 2834, -1000, 2760, 2629, 11141,
	-1000, 2536, 3398, 1343, -56, -197, 137, 137, -1000, -1000,
	-1000, -1000, 137, 137, 137, 137, -1000, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 770, -106, -279,
	-108, -289, -1000, 2530, 1241, -1000, -1000, -1000, -1000, -1000,
	4171, 1227, 524, 524, 2397, 2387, 854, 1036, 45581, -1000,
	-1000, -1000, 45581, 2382, -1000, 585, 45581, 45581, 2378, 2375,
	1271, 5000, 2527, 3183, 16711, 3182, 2170, -1000, -1000, -1000,
	27161, 581, -1000, -1000, -1000, 712, 346, 2064, 560, -1000,
	45581, 400, 400, 3080, 1789, 2374, 45581, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3128, -1000, 891, 480, 33301, 14859,
	-1000, 388, 45581, -1000, 16711, 16711, 388, 482, 1684, -1000,
	769, 1261, 149, 34529, 45581, -1000, 33915, 2524, -1000, 1131,
	3351, -1000, 2114, 2114, -325, 3351, 3351, 1748, 1626, -1000,
	482, -1000, 388, -1000, 1919, 18553, 540, 499, 456, -1000,
	658, -1000, -1000, 768, 3092, 5000, -1000, 45581, -1000, 45581,
	-1000, 45581, 45581, 809, 11141, 3092, 45581, 853, -1000, -1000,
	1107, 473, 415, 757, 757, 1215, -1000, 3165, -1000, -1000,
	1181, -1000, -1000, -1000, -1000, 45581, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 25319, 25319, 3232, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2373,
	2369, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	45581, 1541, -1000, 1744, 2367, 2170, 27161, 1733, 1665, 2364,
	2330, 581, 2043, 1726, 2168, 45581, -1000, 1159, 45581, 45581,
	-1000, 1285, -1000, 1720, 2995, 3005, 2995, -1000, -1000, -1000,
	-1000, -1000, 3039, -1000, 3038, -1000, -1000, 1285, -1000, -1000,
	-1000, -1000, -1000, 1026, -1000, 3270, 998, 998, 998, 2518,
	-1000, -1000, -1000, 1177, 2517, -1000, -1000, -1000, 3393, -1000,
	-1000, -1000, -1000, -1000, -1000, 17325, 3119, 3341, 3334, 35143,
	3341, -1000, -308, 1860, -1000, 2011, 193, 1867, 45581, -1000,
	-1000, -1000, 2516, 2510, -235, 182, 3329, 3326, 1063, -1000,
	2506, 1173, -229, -1000, -1000, 1158, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -229, -1000, 1158, -1000, 160, -1000, -1000,
	3111, -1000, -1000, 2176, -1000, 257, -1000, -1000, -1000, -1000,
	-1000, -1000, 215, -1000, 45581, -1000, 1167, 134, -1000, 2114,
	-1000, -1000, -1000, -1000, -1000, 4756, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11141, -1000, -1000,
	-1000, 2569, -1000, -1000, 11141, 2505, 2323, 2502, 2321, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3399, -1000, 3325, 1536, 2501,
	2497, 1532, 2495, 2493, -1000, 11141, 2486, 4171, 952, 2319,
	952, -1000, -1000, 397, 45581, 3376, -1000, -1000, 2009, 582,
	644, -1000, -1000, -1000, -1000, 895, 388, 2484, 1160, -1000,
	-1000, -1000, -1000, 388, -1000, 2317, 232, -1000, -1000, -1000,
	-1000, 2313, 2310, 2060, -1000, -1000, 2039, 1415, 266, -1000,
	-1000, -1000, -1000, -1000, -1000, 2168, 2168, 2109, 1710, -327,
	-1000, 2713, -1000, 1596, 1596, 1596, 45581, 1526, -1000, 1596,
	1596, 2482, -1000, -1000, 2481, 2479, -126, 780, 1791, 1779,
	-1000, 2059, 26547, 34529, 33915, 1255, -1000, 1427, -1000, -1000,
	-1000, -1000, -1000, -1000, 2309, 3351, 780, -1000, 537, 2058,
	12992, 2712, 12992, 2711, 559, 2705, 1521, -1000, 45581, -1000,
	-1000, 45581, 545, 2686, -1000, 2681, 2992, 523, 2679, 2677,
	45581, 2550, -1000, 3092, 45581, 731, 3118, -1000, -1000, -1000,
	403, -1000, -1000, 601, -1000, 45581, -1000, 45581, -1000, 1508,
	-1000, 25319, -1000, -1000, 1504, -1000, 2308, 2303, -1000, -1000,
	232, 2300, 6190, -1000, -1000, -1000, 3080, 2297, -1000, 2296,
	-1000, 45581, 1159, 1159, 3399, 45581, 8667, -1000, -1000, 11141,
	2675, -1000, 11141, -1000, -1000, -1000, -1000, -1000, 2668, 3122,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1648, -1000, 11141,
	11141, -1000, -1000, 807, 14235, -262, 351, -1000, -1000, -1000,
	-237, 2279, -1000, -1000, 3318, 2277, 2194, 45581, -1000, -1000,
	1158, 1158, -235, -1000, -1000, 1131, -1000, -1000, 1066, 695,
	-1000, 2474, 2531, -1000, 2525, 137, -1000, 137, -1000, 273,
	11141, -1000, 2268, -1000, -1000, -1000, 2267, -1000, -1000, 2492,
	-1000, 2473, -1000, 2264, -1000, -1000, 45581, 851, 1034, 2262,
	2009, 2009, 45581, 5000, -141, -126, 16711, -141, -1000, -1000,
	378, -1000, -1000, 385, -1000, -1000, 2022, 615, -1000, -1000,
	-1000, -1000, 1688, 1943, 2222, 31459, 25319, 25933, 2261, -1000,
	-1000, 33301, 1648, 1648, 4988, 306, 48687, -1000, 2665, 1082,
	1644, -1000, 2056, -1000, 2045, -1000, 3351, 1255, 147, -1000,
	-1000, 1544, -338, -1000, 1082, 2642, 3314, -1000, 3315, 45581,
	2759, 45581, 2664, 1668, 12992, -1000, 768, 3058, -1000, -1000,
	545, -1000, -1000, 1946, 12992, -1000, -1000, 2259, 25933, 988,
	1623, 1614, 970, 2661, -1000, 618, 3391, -1000, -1000, -1000,
	939, 2655, -1000, 1915, 1912, -1000, 45581, -1000, 31459, 31459,
	786, 786, 31459, 31459, 2653, 757, -1000, -1000, 12992, -1000,
	-1000, 1596, -1000, -1000, -1000, 1596, 1471, -1000, -1000, -1000,
	-1000, -1000, -1000, 2109, -1000, -1000, -1000, 3285, -1000, -1000,
	2114, 45581, 2114, 32687, -1000, 3311, 3307, -1000, 2114, 1123,
	-1000, -308, 45581, 45581, -241, 2035, -1000, 2258, 179, -1000,
	-1000, 1129, -237, -243, 70, 25319, 1606, -1000, -1000, -1000,
	-1000, -1000, 2470, -1000, 960, -1000, -1000, -1000, 1123, 2469,
	2467, -1000, -1000, -1000, -1000, 390, 45581, -1000, 2254, 2253,
	566, -117, -1000, -1000, 416, -1000, -1000, -1000, 588, 2186,
	-1000, -1000, 382, -1000, -1000, 2252, -1000, -1000, 117, -1000,
	1604, 1494, -1000, 2652, 11141, -1000, -1000, -1000, -1000, -1000,
	-1000, 759, -1000, 388, 5069, -1000, 1308, -1000, 1066, 759,
	30231, 646, 311, -1000, 2028, -1000, -1000, 3399, -1000, -1000,
	643, -1000, 543, -1000, 1485, -1000, 1476, 32073, 2021, 2632,
	-1000, 48627, 890, -1000, -1000, 3774, -1000, -1000, -1000, -1000,
	-1000, -1000, 2238, 2235, -1000, -1000, -1000, -1000, -1000, 2016,
	2651, 5, 3224, 2234, -1000, -1000, 2650, 1474, 1467, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1432, 1422,
	31459, -1000, -1000, 3774, 2013, 25319, 1596, -1000, -1000, 1420,
	1419, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2648, -1000,
	-1000, 3305, -241, -246, 2231, 155, 176, -1000, 2230, -1000,
	-1000, 865, -230, 130, 124, 122, -1000, -1000, -1000, 11141,
	-1000, -1000, 45581, 838, -1000, -1000, 2009, 45581, 617, -1000,
	-1000, -1000, -1000, 211, -1000, -1000, -1000, -1000, -1000, 2222,
	2215, -1000, 31459, 3165, 2485, 533, 3303, -1000, 48687, -1000,
	1596, -1000, 533, 1414, -1000, 1596, 1596, -1000, 487, -1000,
	1612, -1000, 2008, -1000, 3285, -1000, 485, -1000, 535, -1000,
	-1000, -1000, 1393, -1000, -1000, -1000, 48627, 538, -1000, 751,
	2646, -1000, -1000, 2466, 11141, 2645, 1596, 2129, -113, 31459,
	2845, 2840, 2761, 2612, 1391, -1000, -1000, 25319, -1000, -1000,
	30845, 45581, 2194, -1000, -1000, 2213, -1000, 835, 162, 176,
	-1000, 3302, 178, 3300, 3299, 1118, 1894, -1000, 127, 120,
	118, -1000, -1000, -1000, -1000, -1000, 381, 2207, 557, -1000,
	307, -1000, -1000, -1000, 324, -1000, -1000, 3165, -1000, 3295,
	547, -1000, 25319, -1000, -1000, 30231, 1648, 1648, -1000, -1000,
	2003, -1000, -1000, -1000, -1000, 1999, -1000, -1000, -1000, 1369,
	-1000, 45581, 957, 8050, -1000, 2405, -1000, 45581, -1000, 2961,
	-1000, 244, 1365, 324, 786, 324, 786, 324, 786, 324,
	786, 303, -1000, -1000, -1000, 1353, -1000, -1000, -1000, 2643,
	1996, 182, 146, 3290, -1000, 2194, 3289, 2194, 2194, -1000,
	140, 865, -1000, -1000, -1000, 45581, -1000, 2206, -1000, -1000,
	-1000, -1000, 1596, 1596, 2204, 2203, 432, -1000, -1000, -1000,
	29617, 540, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 538,
	48687, -1000, 8050, 1326, -1000, 2114, -1000, 757, -1000, -1000,
	2917, 2837, 3368, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45581, 3211, 24705, 152, -1000, -1000, -1000,
	2202, -1000, 2194, -1000, -1000, 1591, -1000, -1000, -277, 1994,
	1985, -1000, -1000, 45581, -1000, 45581, 537, -1000, 48687, 1268,
	-1000, 8050, -1000, -1000, 3390, -1000, 3369, 965, 965, 324,
	324, 324, 324, -1000, -1000, 45581, -1000, 1184, -1000, -1000,
	-1000, 1425, -1000, -1000, -1000, -1000, 2191, -1000, -1000, 2182,
	-1000, -1000, -1000, 1174, 2642, -1000, -1000, -1000, -1000, -1000,
	2029, 623, -1000, 1114, -1000, 1584, -1000, 29003, 45581, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 45581, 7433, -1000, 1424,
	-1000, -1000, 2114, 45581, -1000,
}

var yyPgo = [...]int{
	0, 198, 3417, 264, 196, 4033, 89, 260, 250, 248,
	257, 4032, 4031, 4030, 4028, 3150, 3148, 4027, 4026, 4025,
	4022, 4021, 4020, 4019, 4018, 4016, 4012, 4009, 4008, 4007,
	4006, 4004, 4003, 4000, 3997, 3994, 3993, 3992, 3991, 3990,
	3985, 3984, 3983, 3982, 3981, 3980, 3979, 254, 3978, 3977,
	3976, 3975, 3974, 3973, 3972, 3971, 3969, 3968, 3966, 3965,
	3964, 3963, 3962, 3961, 3960, 3959, 3958, 3955, 3952, 3949,
	3948, 3946, 3945, 3943, 3942, 3937, 3936, 3935, 3934, 253,
	3931, 3930, 226, 3929, 3136, 3928, 3927, 3925, 3924, 3910,
	3909, 3908, 256, 3907, 3906, 3903, 3900, 3899, 3896, 3895,
	3894, 3893, 3891, 3890, 252, 3889, 3887, 3886, 3885, 229,
	3884, 242, 3883, 190, 138, 3880, 3879, 3878, 3877, 3876,
	3875, 3873, 244, 211, 75, 3872, 54, 3870, 3855, 223,
	3854, 158, 3853, 154, 3851, 3849, 3848, 3847, 3846, 3845,
	3844, 3843, 3830, 3829, 3825, 3823, 3822, 3821, 3818, 3815,
	3814, 3813, 3812, 3811, 3810, 3809, 98, 3808, 268, 3803,
	79, 3802, 176, 140, 3801, 84, 136, 266, 2390, 267,
	245, 185, 173, 102, 3800, 336, 3799, 201, 236, 161,
	27, 3798, 147, 3792, 269, 44, 51, 243, 152, 61,
	170, 133, 3791, 195, 114, 112, 3788, 3785, 151, 3782,
	233, 178, 3778, 108, 3776, 3775, 3773, 3772, 3770, 209,
	186, 3769, 3767, 135, 3766, 3765, 74, 129, 3762, 81,
	125, 171, 122, 3761, 1609, 128, 143, 131, 101, 3760,
	118, 3759, 3758, 3757, 3756, 182, 3754, 3753, 141, 71,
	3750, 3749, 3746, 70, 3745, 83, 3744, 36, 3743, 73,
	3734, 3732, 3731, 3730, 3715, 3711, 3710, 3707, 3706, 3701,
	3700, 3699, 67, 3697, 3691, 9, 11, 16, 3690, 30,
	3689, 174, 3688, 3687, 3686, 3685, 3683, 96, 94, 3682,
	95, 168, 3681, 7, 29, 78, 3680, 3679, 224, 246,
	107, 163, 3678, 288, 3677, 3675, 3672, 162, 3670, 614,
	3669, 3668, 3667, 3665, 3663, 3662, 46, 3661, 1, 210,
	41, 3660, 134, 144, 3659, 40, 48, 124, 202, 139,
	106, 3658, 3656, 3655, 525, 193, 105, 56, 0, 3654,
	225, 165, 3653, 3652, 3651, 258, 3650, 219, 247, 172,
	281, 276, 259, 3649, 3647, 77, 130, 3644, 166, 25,
	53, 155, 82, 20, 230, 3643, 14, 8, 204, 3642,
	206, 3640, 450, 17, 137, 153, 3635, 3634, 32, 270,
	3633, 3630, 3627, 132, 3626, 3625, 192, 80, 3624, 3623,
	3622, 3618, 37, 3617, 39, 15, 3616, 110, 3615, 251,
	3613, 237, 145, 181, 180, 159, 228, 234, 85, 90,
	3611, 1730, 156, 103, 22, 3609, 231, 3607, 179, 120,
	3606, 86, 3605, 240, 271, 212, 3604, 184, 13, 49,
	38, 33, 47, 10, 299, 194, 3603, 3600, 23, 50,
	3599, 59, 3598, 19, 3597, 3596, 45, 3595, 66, 5,
	3594, 3592, 18, 21, 3591, 34, 217, 175, 127, 99,
	69, 3590, 3589, 52, 262, 3588, 142, 164, 160, 3587,
	76, 3585, 3584, 3583, 3582, 831, 3581, 265, 3580, 3579,
	3578, 3577, 3568, 3567, 3566, 3565, 227, 3563, 109, 43,
	3561, 3560, 3559, 3556, 92, 157, 3555, 3554, 3551, 3550,
	31, 146, 3549, 12, 3534, 26, 24, 35, 3532, 104,
	3531, 3, 183, 3530, 3529, 4, 3527, 3526, 2, 3525,
	3522, 117, 3520, 97, 28, 169, 119, 3519, 3518, 93,
	218, 149, 3517, 3515, 100, 238, 199, 3513, 60, 249,
	273, 3512, 213, 3509, 3506, 3500, 3498, 3496, 3494, 1152,
	3493, 3492, 232, 72, 87, 3491, 235, 116, 3490, 3489,
	91, 167, 121, 126, 62, 88, 3488, 115, 200, 3487,
	189, 3485, 3484, 3483, 111, 3478, 3475, 3469, 3467, 188,
	3466, 3465, 187, 239, 3447, 3446, 275, 3443, 3441, 3439,
	3432, 3431, 3426, 3425, 3424, 3420, 3419, 263, 255, 3411,
}

//line mysql_sql.y:12244
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 582, 585, 585, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 119, 119, 319, 319, 320,
	320, 149, 561, 561, 151, 151, 151, 151, 151, 436,
	120, 120, 120, 120, 120, 120, 120, 118, 567, 567,
	567, 568, 568, 115, 138, 137, 140, 140, 139, 139,
	136, 136, 132, 135, 135, 134, 134, 133, 128, 130,
	130, 129, 131, 131, 116, 104, 117, 510, 510, 509,
	509, 508, 508, 461, 461, 462, 462, 308, 308, 308,
	507, 507, 507, 506, 506, 505, 505, 504, 504, 502,
	502, 503, 501, 500, 500, 500, 498, 498, 498, 494,
	494, 496, 495, 495, 497, 489, 489, 492, 492, 490,
	490, 490, 490, 493, 488, 488, 488, 487, 487, 103,
	103, 103, 403, 403, 102, 102, 417, 417, 417, 417,
	417, 415, 415, 415, 415, 415, 415, 414, 414, 413,
	413, 418, 418, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 93, 93, 93, 93, 93, 98,
	98, 98, 573, 573, 572, 572, 574, 574, 574, 574,
	575, 575, 96, 96, 96, 97, 412, 412, 412, 94,
	95, 95, 402, 402, 407, 407, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 411,
	411, 411, 409, 409, 408, 408, 410, 410, 87, 87,
	87, 90, 89, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 88, 88, 88, 88, 88, 88, 83, 83,
	83, 83, 83, 82, 82, 84, 84, 399, 399, 398,
	99, 99, 100, 570, 570, 569, 571, 571, 571, 571,
	101, 107, 107, 107, 107, 107, 107, 107, 107, 106,
	106, 109, 109, 108, 110, 92, 92, 92, 92, 92,
	92, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 535, 535, 535, 537, 537, 333,
	334, 586, 336, 332, 332, 332, 531, 531, 532, 533,
	534, 534, 534, 105, 14, 199, 199, 435, 435, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 13, 81,
	86, 86, 270, 270, 275, 275, 154, 276, 276, 276,
	281, 281, 282, 282, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 257, 257, 257, 252,
	252, 252, 252, 253, 253, 254, 254, 255, 255, 255,
	255, 256, 256, 325, 325, 277, 277, 277, 279, 279,
	278, 274, 272, 272, 272, 272, 272, 272, 272, 273,
	273, 273, 273, 280, 280, 79, 85, 85, 85, 85,
	549, 549, 80, 560, 560, 465, 465, 348, 348, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 470, 471, 343, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 54, 57, 58, 153, 53, 53, 53, 388, 388,
	52, 587, 587, 318, 318, 67, 66, 56, 68, 69,
	70, 71, 72, 73, 51, 65, 65, 65, 65, 65,
	65, 65, 65, 76, 483, 483, 589, 589, 589, 74,
	75, 464, 464, 464, 64, 63, 62, 61, 60, 60,
	50, 50, 49, 49, 55, 144, 59, 145, 145, 340,
	340, 340, 342, 342, 338, 346, 346, 588, 588, 431,
	431, 341, 341, 48, 48, 48, 48, 77, 339, 339,
	317, 337, 337, 337, 12, 12, 10, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 26, 27, 29, 396, 396, 393, 28,
	20, 19, 19, 23, 22, 18, 18, 21, 24, 25,
	25, 9, 9, 9, 9, 15, 15, 16, 172, 172,
	225, 225, 543, 543, 539, 539, 540, 540, 540, 541,
	541, 542, 542, 111, 477, 477, 477, 477, 477, 477,
	8, 8, 194, 194, 476, 476, 476, 476, 476, 476,
	400, 400, 400, 520, 520, 520, 521, 193, 193, 188,
	188, 478, 478, 365, 522, 522, 486, 486, 485, 485,
	484, 484, 191, 191, 192, 192, 175, 175, 123, 123,
	491, 491, 491, 491, 499, 499, 460, 460, 262, 262,
	310, 310, 311, 311, 165, 165, 166, 166, 166, 166,
	166, 166, 576, 576, 577, 578, 579, 579, 580, 580,
	580, 581, 581, 581, 581, 581, 528, 528, 530, 530,
	529, 190, 190, 186, 186, 187, 187, 187, 185, 185,
	184, 183, 183, 182, 180, 180, 180, 181, 181, 181,
	198, 198, 168, 168, 168, 167, 167, 167, 167, 167,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 169, 169, 536, 536, 536, 466, 466, 466,
	473, 473, 290, 290, 291, 291, 289, 289, 170, 170,
	171, 171, 171, 171, 288, 288, 287, 173, 173, 179,
	178, 178, 174, 174, 174, 174, 298, 298, 297, 297,
	297, 297, 114, 121, 121, 122, 197, 197, 296, 295,
	295, 295, 295, 196, 196, 195, 195, 189, 189, 177,
	177, 177, 177, 294, 176, 292, 566, 566, 565, 565,
	564, 562, 562, 562, 563, 563, 563, 563, 512, 512,
	512, 512, 512, 326, 326, 326, 331, 331, 329, 329,
	329, 329, 329, 335, 7, 7, 7, 7, 7, 7,
	7, 7, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 39, 208, 209, 40, 210,
	210, 211, 211, 212, 212, 213, 214, 215, 215, 215,
	215, 38, 200, 200, 201, 201, 202, 202, 203, 204,
	204, 204, 207, 205, 206, 206, 584, 584, 583, 37,
	37, 30, 157, 157, 158, 158, 158, 160, 160, 258,
	258, 258, 159, 159, 161, 161, 161, 544, 546, 546,
	548, 547, 547, 547, 550, 550, 550, 550, 550, 551,
	551, 551, 551, 552, 552, 31, 141, 141, 146, 555,
	555, 555, 554, 554, 556, 556, 557, 557, 314, 314,
	315, 315, 155, 156, 156, 148, 143, 163, 163, 163,
	163, 163, 164, 164, 142, 147, 150, 152, 545, 553,
	553, 553, 397, 397, 394, 395, 395, 392, 391, 391,
	391, 559, 559, 558, 558, 558, 327, 327, 32, 387,
	387, 389, 390, 390, 390, 381, 381, 381, 381, 36,
	385, 385, 386, 386, 386, 386, 386, 386, 386, 382,
	382, 384, 384, 380, 380, 380, 380, 380, 380, 380,
	35, 162, 162, 379, 379, 376, 376, 374, 374, 375,
	375, 373, 373, 373, 377, 377, 43, 78, 44, 45,
	46, 42, 378, 378, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 125, 124, 124, 124, 124, 124,
	127, 127, 313, 313, 312, 312, 126, 259, 259, 41,
	237, 237, 452, 452, 447, 447, 447, 447, 447, 468,
	468, 468, 448, 448, 448, 449, 449, 449, 451, 451,
	451, 450, 450, 450, 450, 450, 467, 467, 469, 469,
	469, 419, 419, 420, 420, 420, 423, 423, 439, 439,
	440, 440, 438, 438, 445, 445, 444, 444, 443, 443,
	442, 442, 441, 441, 441, 441, 434, 434, 433, 433,
	421, 421, 421, 421, 421, 422, 422, 422, 432, 432,
	437, 437, 286, 286, 285, 285, 245, 245, 246, 246,
	284, 284, 243, 243, 244, 244, 244, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 518, 518, 519, 248, 248, 260, 260, 260,
	260, 260, 260, 247, 247, 249, 249, 226, 226, 224,
	224, 216, 216, 216, 216, 216, 216, 217, 217, 218,
	218, 219, 219, 219, 223, 223, 222, 222, 222, 222,
	220, 220, 221, 221, 221, 221, 221, 221, 405, 405,
	515, 515, 516, 516, 511, 511, 511, 514, 514, 514,
	514, 514, 514, 514, 517, 517, 517, 513, 513, 227,
	307, 307, 307, 328, 328, 328, 328, 330, 306, 306,
	306, 242, 242, 241, 241, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 404, 404, 344,
	344, 345, 345, 269, 268, 268, 268, 268, 268, 266,
	267, 265, 265, 265, 265, 265, 264, 264, 263, 263,
	263, 383, 383, 261, 261, 251, 251, 251, 250, 250,
	250, 446, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 304, 304, 304, 305, 305, 305, 305, 305, 305,
	305, 305, 355, 355, 361, 361, 527, 527, 526, 228,
	228, 228, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 238, 238, 238, 428, 428, 428, 428, 429, 429,
	429, 429, 430, 430, 430, 426, 426, 427, 427, 366,
	367, 367, 474, 474, 475, 475, 424, 424, 425, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 482, 482, 482, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	538, 538, 538, 523, 523, 523, 524, 524, 524, 524,
	524, 524, 524, 524, 524, 524, 524, 524, 525, 525,
	525, 525, 525, 525, 525, 525, 525, 525, 525, 525,
	525, 525, 525, 525, 525, 302, 302, 302, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 368, 368, 369, 369,
	479, 479, 479, 479, 479, 479, 480, 480, 481, 481,
	481, 481, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 353, 299, 299, 299, 370, 362, 362, 363, 363,
	364, 364, 356, 356, 356, 356, 356, 356, 357, 357,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 358, 358, 360, 360, 372, 372, 372, 371,
	371, 371, 371, 371, 371, 371, 240, 240, 240, 240,
	350, 350, 350, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 230, 230, 230, 230, 234,
	234, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 235, 235, 235, 235, 235,
	233, 233, 233, 233, 233, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 112, 113, 113, 232, 309, 309, 453,
	453, 456, 456, 454, 454, 455, 457, 457, 457, 458,
	458, 458, 459, 459, 459, 463, 463, 316, 316, 316,
	324, 324, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 8, 8, 0, 2, 0,
	2, 6, 1, 2, 7, 9, 10, 10, 12, 1,
	5, 6, 8, 10, 9, 11, 13, 4, 0, 1,
	1, 0, 1, 5, 2, 2, 6, 9, 6, 9,
	4, 7, 8, 0, 1, 1, 2, 4, 6, 1,
	2, 4, 0, 2, 10, 11, 2, 0, 2, 1,
	3, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 2, 3, 1, 3, 1, 1, 1, 3, 1,
	1, 1, 1, 0, 3, 3, 0, 3, 3, 0,
	1, 3, 0, 1, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 8,
	5, 7, 0, 3, 8, 5, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	4, 1, 3, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 2, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 1, 1, 2, 2, 1,
	1, 1, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 1, 3, 3, 1, 2, 2, 2, 1,
	2, 2, 3, 4, 4, 6, 1, 1, 1, 2,
	4, 6, 1, 4, 1, 3, 3, 4, 4, 4,
	4, 3, 3, 2, 4, 4, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 2, 2, 0, 1, 4, 2, 4, 1, 5,
	3, 2, 1, 2, 2, 4, 4, 5, 2, 1,
	3, 4, 4, 1, 2, 9, 7, 1, 3, 3,
	1, 1, 3, 1, 3, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 2, 4, 3, 3, 1, 1, 1, 1, 1,
	1, 2, 3, 4, 7, 2, 3, 3, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 1,
	1, 1, 1, 6, 4, 1, 1, 0, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 10, 7,
	4, 4, 1, 3, 1, 6, 7, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 7, 8, 8,
	0, 4, 7, 0, 3, 0, 2, 0, 1, 1,
	1, 1, 4, 2, 2, 3, 3, 4, 5, 3,
	4, 4, 2, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 3, 3, 2, 5, 5, 0, 2,
	7, 0, 1, 0, 1, 5, 5, 3, 3, 2,
	4, 4, 4, 4, 4, 1, 1, 1, 3, 3,
	1, 1, 1, 6, 0, 1, 1, 1, 1, 5,
	5, 0, 1, 1, 3, 3, 3, 4, 7, 7,
	5, 4, 7, 8, 3, 3, 2, 3, 4, 0,
	2, 2, 0, 2, 2, 0, 5, 1, 1, 1,
	1, 0, 1, 5, 5, 5, 4, 3, 1, 3,
	1, 1, 3, 5, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 3, 1, 4,
	6, 6, 4, 4, 4, 4, 4, 3, 6, 3,
	5, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	5, 5, 1, 3, 2, 1, 5, 4, 4, 2,
	0, 5, 4, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 6, 4, 5, 7,
	4, 5, 0, 1, 3, 8, 0, 6, 0, 4,
	6, 1, 1, 1, 1, 1, 2, 3, 1, 3,
	6, 0, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 3, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 7, 7, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 2, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 3, 1,
	1, 1, 4, 4, 4, 3, 2, 2, 2, 3,
	2, 3, 4, 1, 3, 4, 0, 2, 1, 1,
	2, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 1, 7, 1,
	3, 0, 1, 1, 3, 1, 3, 0, 1, 1,
	1, 14, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 4, 1, 1, 1, 1, 0, 1, 2, 9,
	9, 7, 1, 2, 3, 3, 3, 0, 4, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	4, 1, 1, 1, 3, 3, 4, 3, 3, 0,
	1, 1, 1, 0, 2, 7, 8, 8, 8, 0,
	3, 3, 0, 3, 0, 3, 0, 5, 1, 3,
	0, 3, 3, 0, 2, 9, 7, 0, 2, 2,
	3, 3, 0, 2, 4, 4, 4, 4, 1, 0,
	2, 2, 1, 3, 2, 1, 3, 2, 1, 3,
	2, 0, 1, 3, 4, 3, 1, 1, 4, 1,
	3, 1, 1, 1, 1, 0, 1, 1, 1, 11,
	0, 2, 3, 3, 2, 2, 3, 1, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 2, 2,
	6, 0, 4, 1, 1, 0, 3, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 8, 2, 4, 4,
	4, 9, 0, 2, 11, 9, 11, 8, 6, 9,
	7, 10, 7, 6, 2, 2, 9, 4, 5, 3,
	0, 4, 1, 3, 0, 3, 6, 0, 2, 10,
	0, 2, 0, 2, 0, 3, 2, 4, 3, 0,
	2, 1, 0, 2, 3, 0, 2, 3, 0, 2,
	1, 0, 3, 2, 4, 3, 0, 1, 0, 1,
	1, 0, 6, 0, 3, 5, 0, 4, 0, 3,
	1, 3, 4, 5, 0, 3, 1, 3, 2, 3,
	1, 2, 0, 4, 6, 5, 0, 2, 0, 2,
	4, 5, 4, 5, 1, 5, 6, 5, 0, 3,
	0, 1, 1, 3, 3, 3, 0, 4, 1, 3,
	3, 3, 0, 1, 1, 3, 2, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	5, 4, 1, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 0, 2, 5, 5, 5, 5, 0, 1, 1,
	3, 1, 1, 1, 1, 1, 7, 9, 7, 9,
	2, 1, 7, 9, 7, 9, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 3,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 2, 1, 2, 2, 1, 1,
	2, 2, 2, 3, 3, 2, 2, 1, 5, 6,
	4, 1, 1, 1, 5, 4, 1, 1, 2, 0,
	1, 1, 2, 5, 0, 1, 1, 2, 2, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 2, 2,
	2, 0, 3, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 3, 5,
	2, 2, 2, 2, 4, 1, 1, 2, 5, 6,
	8, 6, 6, 6, 1, 1, 1, 1, 1, 1,
	3, 4, 4, 4, 7, 9, 7, 7, 7, 9,
	7, 7, 0, 2, 0, 1, 1, 2, 4, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 5, 0, 1, 3,
	0, 1, 0, 2, 0, 2, 0, 1, 6, 8,
	8, 6, 6, 5, 5, 5, 6, 6, 6, 6,
	5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 1, 1, 1, 4, 4, 6, 8, 6, 4,
	5, 4, 4, 4, 3, 4, 6, 6, 7, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 8, 4, 2,
	3, 2, 4, 2, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 4, 4, 4, 0, 1, 2, 3,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 0, 1, 1, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 1, 1,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 3, 4, 4, 5, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 4, 1, 2, 3, 5, 1, 1, 3, 0,
	1, 0, 3, 0, 3, 3, 0, 3, 5, 0,
	3, 5, 0, 1, 1, 0, 1, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -582, -585, -2, -5, 623, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -165, -118, -119,
	-120, 613, -88, -89, -90, -33, -32, -31, -30, -141,
	-146, -149, -151, 546, 619, 449, 14, 498, -15, -16,
	-528, -17, 260, -332, -333, -334, -336, -586, -48, -49,
	-50, -60, -61, -62, -63, -64, -74, -75, -76, -51,
	-52, -53, -56, -54, -67, -66, -68, -69, -70, -71,
	-72, -73, -55, -59, -144, -145, -77, -57, -78, -58,
	-153, -80, -79, -85, -81, -86, -143, -148, -13, -154,
	235, -84, 76, -94, -95, -96, -97, -98, -100, -101,
	373, 379, 436, 612, 61, -166, -168, 631, 632, 635,
	160, 161, 163, 164, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 231, 16, 541,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-142, -25, -147, -23, -150, -152, 255, 254, 38, 321,
	322, 323, 377, 253, 232, 15, 31, 42, 352, -167,
	83, 533, 534, 536, 233, -169, 13, 637, -6, -3,
	-2, -128, -132, -136, -139, -140, -137, -138, -4, -113,
	118, 245, 614, -328, 369, 615, 617, 616, 86, 94,
	-321, -323, 449, 260, 373, 379, 612, 632, 635, 548,
	549, 550, 551, 552, 553, 554, 555, 557, 558, 559,
	560, 561, 562, 563, 573, 574, 564, 565, 566, 567,
	568, 569, 570, 571, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 501, 598,
	599, 600, 601, 529, 556, 592, 593, 594, 595, 350,
	351, 538, 272, 296, 404, 302, 309, 160, 179, 173,
	201, 193, 534, 168, 276, 314, 277, 93, 163, 484,
	108, 461, 433, 166, 291, 293, 295, 530, 531, 363,
	298, 528, 297, 299, 301, 532, 278, 353, 189, 184,
	290, 274, 182, 279, 40, 280, 206, 281, 282, 543,
	457, 349, 463, 306, 52, 431, 183, 458, 294, 460,
	210, 214, 475, 476, 177, 178, 465, 478, 205, 208,
	209, 252, 346, 347, 43, 540, 264, 479, 212, 204,
	200, 487, 310, 308, 203, 176, 199, 275, 65, 216,
	215, 217, 427, 428, 429, 430, 283, 284, 367, 474,
	196, 185, 354, 169, 23, 482, 259, 462, 380, 285,
	303, 311, 211, 213, 266, 271, 542, 533, 435, 270,
	307, 480, 181, 263, 292, 258, 483, 170, 536, 382,
	286, 164, 300, 477, 486, 64, 395, 175, 167, 630,
	249, 161, 268, 273, 287, 288, 289, 527, 313, 312,
	304, 535, 197, 265, 202, 187, 174, 198, 162, 267,
	485, 396, 610, 352, 414, 195, 192, 269, 242, 481,
	464, 165, 418, 397, 190, 315, 605, 606, 607, 368,
	345, 316, 317, 188, 256, 455, 456, 320, 424, 336,
	398, 434, 405, 399, 223, 224, 324, 467, 469, 207,
	608, 325, 326, 327, 459, 328, 329, 330, 331, 372,
	56, 58, 95, 98, 97, 633, 634, 63, 29, 358,
	361, 393, 400, 338, 611, 539, 335, 339, 340, 362,
	25, 416, 384, 420, 419, 48, 49, 50, 53, 54,
	55, 57, 59, 60, 51, 526, 377, 390, 488, 45,
	47, 387, 27, 364, 415, 437, 334, 417, 448, 46,
	446, 447, 468, 26, 366, 365, 62, 44, 423, 425,
	426, 318, 332, 375, 620, 489, 370, 386, 389, 371,
	337, 360, 391, 67, 66, 383, 621, 378, 376, 333,
	544, 545, 341, 572, 355, 432, 523, 522, 521, 520,
	519, 518, 517, 516, 321, 322, 323, 401, 402, 403,
	413, 406, 407, 408, 409, 410, 411, 412, 451, 452,
	622, 470, 472, 473, 471, 237, 636, 356, 357, 240,
	624, 625, 96, 626, 628, 627, 28, 629, -410, -408,
	-328, 534, 612, 379, 533, 536, 373, 352, 632, 635,
	377, 260, 321, 322, 323, 449, 350, -210, -328, 636,
	-175, 244, 39, -224, -328, -175, -84, -16, -15, -167,
	-168, -224, 239, -337, 24, 431, -92, 432, 235, 83,
	77, -328, -9, -104, -8, -111, -82, -165, 436, -335,
	-328, 321, 321, -335, 239, -330, 270, 412, -328, -465,
	245, -414, -387, 271, -413, -389, -416, -390, 32, 231,
	233, 232, 546, 267, 16, 377, 241, 14, 13, 378,
	253, 25, 26, 28, 15, 379, 381, 29, 382, 385,
	386, 387, 42, 390, 391, 260, 86, 94, 89, 278,
	-209, -328, -364, -356, 115, -359, -351, -352, -354, -308,
	-502, -349, 83, 142, 143, 150, 116, 638, -353, -446,
	36, 118, 552, 556, 592, 499, -300, -301, -302, -303,
	-304, -305, -328, -503, -501, 89, 99, 101, 105, 106,
	104, 102, 154, 186, 103, 90, 155, -168, 86, -523,
	562, -322, 585, 598, 599, 600, 601, 584, 61, -472,
	-481, 238, -479, 153, 191, 256, 187, 14, 148, 424,
	188, 593, 594, 595, 559, 581, 501, 563, 573, 588,
	554, 555, 557, 549, 550, 551, 553, 564, 566, 580,
	-482, 576, 586, 587, 572, 596, 597, 589, 590, 591,
	628, 88, 87, 579, 578, 565, 560, 561, 567, 548,
	558, 568, 569, 577, 582, 583, 361, 108, 362, 363,
	491, 353, 364, 245, 431, 70, 365, 366, 367, 368,
	369, 498, 370, 71, 371, 360, 260, 414, 372, 190,
	207, 503, 502, 504, 495, 492, 490, 493, 494, 496,
	497, 570, 571, 575, -121, -122, 603, -576, -293, -577,
	6, 7, 8, 9, -578, 155, -567, 433, 542, 89,
	314, 350, 165, 162, -401, 165, 114, 170, 169, -401,
	167, 630, 324, 266, -378, -157, 350, 414, 328, 95,
	270, -381, -379, 530, -467, 318, 314, 290, 240, 111,
	-158, 250, 249, 109, 491, 238, 388, 309, 56, 58,
	-539, -540, 228, 229, 230, -530, 524, -529, -328, 363,
	97, 98, 630, 27, 239, 374, 266, 469, 467, 468,
	470, 471, 472, 473, -65, -483, -464, 464, 463, -341,
	456, 462, 454, 466, 457, 351, 330, 546, 329, 231,
	624, 531, 525, -316, 398, 434, 488, 489, 375, 435,
	475, 477, 458, 108, 194, 191, 240, 242, 239, 630,
	350, 491, 414, 95, 328, -539, 162, 475, 477, 270,
	412, 41, -407, 424, -406, -408, 476, 487, 87, 88,
	474, -316, 108, 455, 455, -576, -293, -166, -168, -114,
	-528, 532, 532, 532, 240, 350, 414, 270, 241, 239,
	527, 530, 242, 491, 238, 321, 374, 266, 328, 95,
	167, 630, -466, -536, 32, -473, 225, 226, 227, 33,
	34, -1, 122, 637, -356, -356, -6, 640, -6, -356,
	-328, -328, 157, -230, -234, -231, -233, -232, -236, -235,
	191, 192, 153, 195, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 208, 209, 206, 31, 207, 256, 187,
	188, 189, 190, 210, 173, 193, 539, 218, 174, 219,
	175, 220, 176, 221, 177, 178, 222, 179, 182, 183,
	184, 185, 181, 156, -199, 89, 32, 83, 156, 89,
	-191, 262, -175, -224, -216, 156, 638, -191, -576, -184,
	-185, 11, -224, -306, -328, 433, 125, -92, 77, -92,
	432, 77, -531, -532, -533, -535, 235, 432, 431, -109,
	156, 278, 17, -335, -335, 81, -224, -389, 270, -414,
	-387, 36, 80, 157, 243, 157, 80, 83, 375, 350,
	414, 376, 491, 239, 388, 242, 270, 389, 350, 414,
	239, 242, 491, 270, 350, 239, 242, 414, 270, 389,
	350, 454, 455, 242, 27, 380, 383, 384, 455, -487,
	487, 157, 114, 111, 112, 113, -356, 132, -371, 125,
	126, 127, 128, 129, 130, 131, 139, 138, 149, 142,
	143, 144, 145, 146, 147, 148, 140, 141, 135, 115,
	133, 137, 134, 117, 152, -168, -356, -364, 61, -354,
	-354, -354, -354, -328, -446, -361, -356, 83, 83, 83,
	83, 156, 102, 89, -356, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, -480, 83, 83,
	-368, -369, 83, 83, -349, -306, 83, 89, 89, 83,
	83, 83, 89, 83, 83, 83, -369, -369, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, -185, 157, -184, 83, -184, -185, -169,
	-168, 32, 33, 32, 33, 32, 33, 32, 33, -579,
	621, 83, 99, 633, 223, 17, -328, 480, 541, 168,
	169, 170, -376, 245, -376, -208, -328, -210, 374, 242,
	527, 242, -158, -376, -376, -376, -376, -376, 241, -376,
	24, 239, 239, 239, 239, -376, 498, 125, 125, 59,
	-541, 172, 157, -530, -190, 83, -340, 133, 137, -340,
	-289, 18, -289, 24, 268, 268, 268, -340, 308, -587,
	-588, 17, 135, -338, -588, -338, -338, -340, -589, 241,
	465, 43, 269, 268, -186, -187, 22, -186, 459, 455,
	-431, 460, 461, -342, -588, -341, -340, -340, -341, -340,
	-340, -340, 32, 239, 242, 491, 328, 625, -587, -587,
	31, 31, -465, -465, -224, -465, -465, 525, -317, -328,
	-465, -465, -465, -542, 244, -573, -572, 478, -575, 480,
	162, -408, 162, -408, -389, 270, 270, 157, 125, 24,
	-409, 125, 136, -408, -408, -409, -409, -247, 41, -327,
	153, -328, 89, -247, 41, -570, -569, -224, -185, -169,
	-168, 84, 84, 84, 535, 535, 535, -465, -465, -465,
	-465, -465, -467, -465, -465, -465, -465, -465, -335, -200,
	-328, -210, 245, -465, -465, -465, -465, -170, -171, 144,
	-356, -328, -170, -3, -130, -129, 119, 120, 122, 615,
	369, 614, 618, 612, -408, 41, -459, 396, 395, -453,
	-455, 83, -454, 83, -454, -454, -454, -454, -454, 83,
	83, -456, 83, -456, -456, -453, -457, 83, -457, -458,
	83, -458, -457, -328, -435, 541, -362, -364, -328, 39,
	-476, 61, -165, 83, 31, 83, -191, -328, 639, 188,
	167, 629, -477, 61, -165, 83, 31, -185, -123, 39,
	-187, 21, 156, 99, 89, -109, -92, 77, -109, 84,
	157, -534, 105, 106, -537, 205, 197, -328, -107, 89,
	-7, -8, -9, -10, -47, -82, -79, -165, 232, -504,
	-502, 83, 32, 423, 80, 17, -415, 239, 491, 374,
	266, 242, 350, -413, -396, -393, -391, -327, -389, -392,
	-391, -418, -306, 455, -124, 438, 437, 320, -356, -356,
	-356, -356, -356, 104, 115, 345, 105, 106, -351, -372,
	32, 316, 317, -352, -352, -352, -352, -352, -352, -352,
	-352, -352, -352, -352, -352, -360, -370, -446, 83, 135,
	133, 137, 134, 117, -354, -354, -352, -352, -249, -327,
	153, 84, 157, -356, -527, -526, 119, -356, -356, -356,
	-356, -328, -524, -525, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 365, 360, 366, 364, 353,
	372, 367, 368, 190, 522, 523, 516, 517, 518, 519,
	520, 521, -362, -362, -356, -524, -362, -299, 33, 32,
	-364, -364, -364, 84, -356, -538, 343, 342, 344, -188,
	-328, -362, 84, 84, 84, 99, -364, -364, -362, -352,
	-362, -362, -362, -362, -525, -299, -299, -299, -299, 144,
	-364, -364, -299, -299, -299, -299, 144, -299, -299, -299,
	-299, -299, -299, -299, -299, -299, -299, 84, 84, 84,
	144, -364, -186, -122, -485, -484, -356, 41, -123, -187,
	-580, 622, 83, -306, -568, 89, 89, 638, 167, 17,
	491, 481, 482, 166, 169, 168, -328, 115, -328, 35,
	83, -200, -376, -376, -376, -546, -328, 90, -397, -394,
	-391, -328, -328, -387, -328, -317, -224, -376, -376, -376,
	-376, -224, -258, 53, 54, 55, -391, -159, 56, 57,
	-542, -529, 35, -189, -328, -289, -354, -354, -356, -391,
	270, -587, -340, -340, -318, -317, -342, -337, -342, -342,
	-289, -338, -340, -340, -356, -342, -338, -289, -328, 455,
	-289, -289, -431, -340, -339, -328, -339, -376, -317, -318,
	-318, -224, -224, -270, -275, -271, -276, 262, 236, 358,
	359, 234, 232, 11, 233, -283, 309, -377, 499, -253,
	-254, 77, 42, -256, 260, 400, 393, 272, 276, 93,
	277, 433, 278, 241, 280, 281, 282, 297, 299, 252,
	283, 284, 285, 424, 286, 161, 298, 287, 288, 289,
	376, -248, 6, 331, 41, 51, 52, 447, 446, 544,
	541, 273, -328, -546, -544, 31, -328, 31, -397, -328,
	-328, -178, -173, -177, -174, -179, -292, -294, -176, 83,
	-224, -168, -328, 157, 479, 481, 482, -573, -409, -573,
	-409, 32, 423, -412, 423, 32, -387, -406, 475, 477,
	-402, 89, 424, -392, -411, 80, 153, -484, -409, -409,
	-411, -411, 152, 157, -571, 480, 481, 228, -186, 99,
	99, 99, -226, -224, -546, -396, -387, -328, -465, -226,
	-226, -226, -330, -330, 83, 156, 36, -328, -328, -328,
	-328, -288, 157, -287, 17, -329, -328, 35, 89, 156,
	-288, -131, -129, 121, -356, -6, 614, -356, -6, -6,
	-356, -6, -356, -463, 397, 99, 99, -309, 89, -309,
	99, 99, 99, 547, 84, 89, -400, 80, -478, -365,
	-522, 603, -193, 84, -188, -520, -521, -188, -192, -328,
	-476, -216, 125, 125, 125, -478, -193, 84, -520, -186,
	604, -123, -183, -182, -356, -328, 24, -109, -92, -532,
	156, 350, 157, -189, -415, -395, -392, -417, 144, -328,
	-403, 157, 541, 641, 87, 243, -559, -558, 415, 84,
	157, -488, 244, 498, 89, 638, 431, 223, 224, 104,
	345, 105, 106, -446, -364, -360, -354, -354, -352, -352,
	-358, 257, -358, 114, -356, 639, -355, -526, 121, -356,
	35, 157, 35, 157, 81, 156, 84, 84, 17, 17,
	84, -356, 84, 84, 84, 84, 17, 17, -356, 84,
	156, 84, 84, 84, 84, 81, 84, 157, 84, 84,
	84, 84, 157, -364, -364, -356, -364, 84, 84, 84,
	-356, -356, -356, -364, 84, -356, -356, -356, -356, -356,
	-356, -356, -356, -356, -356, -425, 450, -425, -425, 157,
	157, 157, 84, -123, 83, 99, 157, 634, -313, -312,
	89, -328, 167, -328, 167, 170, 170, 169, 24, 36,
	307, 24, -209, -211, -212, -213, -214, -215, 135, 158,
	159, 83, -224, -224, -224, -548, 401, -560, 157, 41,
	-558, 491, 239, -155, 320, -380, 81, -162, 17, 541,
	-224, -224, -224, -224, -237, 35, 17, -172, -225, -328,
	83, 84, 157, -388, 81, -328, -318, -289, -289, -342,
	-289, -289, 157, 23, -340, -342, -342, -346, 638, -338,
	-346, 156, -346, -317, -452, 35, -190, 157, 21, 262,
	-223, -325, -220, -222, 247, -345, -221, 250, -516, 248,
	246, 109, 251, 305, 110, 241, -325, -325, 247, -257,
	243, 35, -325, -273, 241, 348, 305, 248, 21, 262,
	-272, 241, 110, -328, 247, 251, 248, 246, -324, 125,
	-316, 152, 243, 43, 376, -324, 545, 262, -324, -324,
	-324, -324, -324, -324, -324, 279, 279, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, 162, -324,
	-324, -324, -324, -324, -324, 83, 274, 275, 307, -549,
	401, 31, 356, 356, 357, -560, 31, -163, 350, 31,
	-295, -296, -297, -298, 68, 72, 74, 78, 69, 70,
	71, 75, 31, 157, -326, -331, 35, -328, 89, -326,
	-168, -173, -178, -326, 83, -572, -574, 483, 480, 486,
	-411, -411, 243, 83, 125, -411, -411, 41, -327, -569,
	487, 481, -123, 157, 80, -226, -201, -202, -203, -204,
	-230, -306, 192, 195, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 208, 209, 206, 207, 256, 187, 188,
	189, 190, 210, 173, 193, 539, 174, 175, 176, 177,
	178, 179, 182, 183, 184, 185, 181, -328, -210, -289,
	-171, -173, -328, 89, -328, 144, -289, 122, -6, 120,
	-135, -134, -133, 123, 612, 618, 122, 122, 122, 84,
	84, 84, 157, 84, 84, 84, 157, 84, 157, 99,
	-491, 460, 40, 157, 83, 84, 157, 61, 157, 125,
	84, 157, -356, -328, 89, -356, 84, 61, -123, 89,
	157, -180, 37, 38, 156, 433, -328, -502, 84, -417,
	157, 243, 156, 156, -393, 379, -327, -395, 21, 541,
	-306, 39, -313, 125, 638, -328, 84, -358, -358, 114,
	-354, -351, 84, 122, -356, 120, -228, -230, 395, 396,
	-356, -228, -229, -235, 153, 191, 256, 190, 189, 187,
	395, 396, -247, -328, -356, -356, 84, -356, -356, 17,
	-328, -247, -352, -356, -185, -185, 84, 84, -424, -425,
	-424, -424, 84, 84, 84, 84, -424, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 83, 99, 101,
	99, 101, -484, -581, 63, 620, 62, 423, 104, 310,
	157, 99, 89, 639, 157, 125, -328, 17, 239, 170,
	-561, 314, 350, -436, 99, 314, 350, 491, 387, 84,
	157, -306, -201, -190, 83, -190, -551, 462, 403, 413,
	-324, -348, -347, 352, 42, -470, 424, 409, 410, -394,
	270, -328, -328, -557, 96, 125, 80, 335, 339, 340,
	336, 337, 338, -374, -375, -373, -377, -544, 83, 83,
	-165, 35, 133, -162, 83, 83, 35, -447, 325, -230,
	-224, -172, -328, 17, 157, -543, 156, -1, -328, -387,
	-340, -289, -356, -356, -289, -340, -340, 167, -342, -328,
	-447, -230, 35, -271, 236, 233, -421, 307, 308, -422,
	-437, 310, -439, 83, -227, -306, -221, -515, -516, -376,
	-328, 110, -515, 110, 83, -227, -306, -306, -274, -339,
	-306, -328, -328, -328, -328, -279, -278, -306, -281, 32,
	-282, -328, -328, -328, -328, 110, -328, 110, -252, 41,
	48, 49, 50, -324, -324, 194, -255, 41, 423, 425,
	426, -281, 99, 99, 99, 99, 89, 89, 89, -324,
	-324, 99, 89, -331, 89, -517, 169, 45, 46, 99,
	99, 99, 99, 41, 89, -260, 41, 290, 294, 291,
	292, 293, 89, 99, 41, 99, 41, 99, 41, -328,
	83, -518, -519, 89, -436, -551, -324, 356, -408, 125,
	125, -348, -556, 320, -164, 491, 32, -194, 236, 233,
	-544, -399, -398, -306, -177, -177, -177, -177, 68, 68,
	68, 68, 73, 68, 73, 68, -297, -399, -179, -190,
	-331, 84, -566, -565, -564, -562, 76, 244, 77, -362,
	480, 484, 485, -395, -343, 89, -402, -198, 24, -224,
	-224, -469, 300, 301, 84, 157, -230, -291, 19, 156,
	-291, 118, -6, -131, -133, -356, -6, -356, 614, 369,
	615, 89, 99, 99, -499, 444, 439, 441, 110, -365,
	-486, -485, 61, -165, -188, -478, -521, -484, -328, 639,
	639, 639, 639, 61, -165, -478, -198, -491, -182, -181,
	44, -328, 99, 17, -392, -387, 144, 144, -328, 380,
	-403, 89, 402, 89, 239, 639, 89, -313, -351, -356,
	84, -238, 178, 177, -238, 35, 84, 84, -454, -454,
	-453, -456, -453, -238, -238, 84, 84, 24, 84, 84,
	84, -356, 84, 84, 157, -474, 500, -475, 574, -424,
	-424, -424, -424, -424, -424, -424, -424, -424, -424, -424,
	-424, -424, -424, -424, -424, -367, -366, 262, 445, 627,
	627, 445, 627, 627, 84, 157, -524, 157, -319, 315,
	-319, -312, 89, 243, 167, -328, -328, 89, 307, -328,
	-328, 89, 89, -213, -230, 84, 35, -217, -218, -219,
	-227, -220, -222, 35, -552, 93, -547, 89, -328, 90,
	-553, 93, 404, 155, 354, 41, 405, 406, 421, 349,
	99, 99, 411, -545, -328, -163, -163, -555, 52, 125,
	89, -224, -373, -316, 152, 281, 328, -286, -285, -328,
	89, -217, -165, -224, -217, -217, -165, -448, 327, 21,
	99, 143, -191, 81, 156, -173, -225, -328, 144, 84,
	-289, -346, -289, -289, 125, -340, -448, -165, -433, 311,
	83, -431, 83, -431, 110, 336, -440, -438, 262, -277,
	45, 47, -230, -513, -328, -511, -513, -328, -511, -511,
	-376, -356, -277, -227, 243, 31, 233, -280, 333, 334,
	339, -404, 306, 115, -404, 157, -180, 157, -328, -247,
	-247, 31, 89, 89, -226, 84, 157, 125, 89, -552,
	-547, 125, -409, 89, 89, -553, -557, 125, -156, 93,
	-317, 157, -194, -194, -289, 157, 125, -196, -195, 80,
	81, -197, 80, -195, 68, 68, -289, -564, -563, 24,
	-516, -516, -516, 84, 84, 15, -203, 41, -290, 20,
	21, 144, -290, 122, 120, 122, 122, -328, 84, 84,
	-460, 605, -495, -497, 439, 21, 21, 15, 244, 84,
	-478, -478, -499, 45, 46, -387, -403, 424, -224, 157,
	639, -228, -356, 84, -356, 84, 89, 84, 89, -185,
	21, 84, 157, 84, 84, 84, 157, 84, 84, -356,
	84, -524, -320, 188, 89, -320, 350, -328, 17, -436,
	307, 307, 239, 237, -165, 84, 157, -165, 89, -550,
	415, 89, 89, 99, 41, 99, 155, 407, -471, -156,
	-156, -554, 93, 125, 638, 83, -324, -324, -324, -328,
	84, 157, -324, -324, 84, 84, 84, -245, 541, -449,
	261, 99, 143, 99, 143, 99, -326, -173, -328, -289,
	-543, 156, 89, -289, -449, -423, 312, 99, -352, 83,
	-352, 83, -432, 309, 83, 84, 157, -328, -306, -242,
	-241, -239, 104, 115, 41, 393, -240, 93, 152, 295,
	298, 297, 273, 296, -269, -344, 80, 399, 333, 334,
	-377, 605, 529, 246, 109, 110, 381, -345, 83, 83,
	81, 315, 83, 83, -513, 84, -277, -306, 41, -280,
	41, 346, 306, -278, -328, 152, -247, 84, -519, 89,
	-550, 89, -411, -555, 89, 89, -544, -185, -398, -484,
	-356, 83, -356, 83, 68, 11, 19, -349, -356, -364,
	245, -6, 615, 369, -262, 606, 89, 21, 89, -493,
	89, -399, -460, -126, -259, -316, 278, 84, 84, 84,
	-424, -424, -427, -426, -430, 445, 307, 453, -364, 89,
	89, 84, 84, 89, -328, 243, 167, 89, -436, -436,
	-328, -205, -230, -160, 541, -245, -219, -160, 21, 541,
	353, 41, 99, 41, 408, 125, 105, 106, -314, -315,
	89, -382, -384, -306, 83, -247, -249, 89, -285, -349,
	-349, -243, -165, 35, -244, -283, -377, -125, -124, -243,
	83, -450, 161, 99, 143, 99, 99, -289, -289, 639,
	-450, -439, 21, 84, -418, 84, -418, 83, 125, -352,
	-438, -441, 61, -239, 104, -352, 89, -249, -250, 41,
	294, 290, 125, 125, -251, 41, 274, 275, -261, 83,
	305, 15, 194, 83, 110, 110, -224, -382, -382, -514,
	335, 336, 337, 341, 339, 340, 338, -514, -382, -382,
	83, -405, -404, -352, -324, -324, 152, -554, -186, -189,
	-512, -328, 246, 21, 21, -328, -328, -310, 607, 99,
	89, 441, -262, -461, 608, -489, -431, -247, 125, 84,
	-429, 117, 407, 411, -350, -353, 99, 101, 186, 155,
	84, 84, 350, -328, 89, 89, 307, 540, -161, 60,
	487, 89, 90, 402, 89, 90, 353, 89, 639, 157,
	125, 84, 157, -453, -356, -419, 262, -165, 157, -283,
	-316, -126, -419, -246, -284, -328, 89, -468, 169, 326,
	541, 99, 143, 99, -185, -451, 169, 326, -422, 84,
	84, 84, -418, 99, 84, -445, -442, 83, -283, 264,
	135, 89, 89, 99, 83, -479, 31, 89, -383, 83,
	84, 84, 84, 84, -382, 99, -247, -324, 84, 84,
	157, 83, 21, -310, -462, 609, 89, -498, 444, -492,
	-490, 439, 440, 441, 442, 89, -428, -429, 411, -350,
	-353, 603, 451, 451, 451, -328, 243, -436, -207, -328,
	305, 424, -315, 89, -385, -384, -180, 84, -420, 314,
	21, -283, -324, -420, 84, 157, -324, -324, 326, 99,
	143, 99, -186, 326, -434, 313, 84, -445, -283, -444,
	-443, 312, 265, 83, 84, -356, -368, -324, 84, -264,
	-263, 537, -382, -385, 81, -385, 81, -385, 81, -385,
	81, 84, -247, -328, 246, -311, -328, -493, 89, -500,
	244, -496, -497, 443, -490, 21, 441, 21, 21, -127,
	157, 114, 452, 452, 452, 350, 89, -206, 35, 446,
	380, -386, 252, 346, 347, 93, 541, 333, 334, -180,
	21, -421, -247, -284, -349, -349, 99, 99, 84, 157,
	-328, 261, 83, -363, -357, -356, 261, 84, -328, -268,
	-266, -267, 80, 458, 303, 304, 84, -514, -514, -514,
	-514, -269, 84, 157, -507, 83, 99, -495, -494, -496,
	21, -493, 21, -493, -493, 448, -428, -328, 89, -324,
	-324, 89, 89, 332, -306, 83, -433, -443, -442, -363,
	84, 157, -404, -267, 80, -266, 80, 16, 15, -385,
	-385, -385, -385, -328, -510, 31, 84, -506, -505, -307,
	-501, -328, 444, 445, 89, -493, 125, -584, -583, 626,
	99, 99, -328, -418, -423, 84, -357, -265, 300, 301,
	31, 169, -265, -509, -508, -308, 84, 157, 156, 89,
	89, 84, -439, 104, 41, 302, 157, 125, -505, -328,
	-508, 41, -356, 156, -328,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 0, 288, 289, 290, 904, 905, 906, 907, 908,
	909, 910, 911, 0, 0, 0, 0, 0, 661, 662,
	0, 626, 0, 0, 0, 0, 0, 0, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 389, 390, 391, 392, 393, 394, 395, 396, 397,
	0, 313, 309, 234, 235, 236, 237, 238, 320, 321,
	485, 0, 0, 0, 0, 744, -2, 78, 0, 0,
	302, 0, 293, 293, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, -2, 674, 0,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 373, 374, 375, 369,
	370, 372, 371, -2, 0, 674, 0, 0, 0, 752,
	0, 0, 0, 0, 0, 795, 817, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1323, 1324,
	1325, 1326, 2107, 2077, -2, 1848, 1825, 2001, 2002, 2138,
	2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
	2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158,
	2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168,
	2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178,
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, -2, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, -2, -2, -2, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2108, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
	2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 0, 286,
	284, 1795, 1825, 1848, 1902, 1913, 1914, 1949, 2001, 2002,
	2034, 2077, 2093, 2094, 2095, 2107, 0, 0, 929, 0,
	722, 0, 0, 727, 1271, 722, 314, 663, 664, 752,
	778, 624, 0, 351, 0, 1839, 355, 2084, 0, 0,
	0, 621, 345, 346, 347, 348, 349, 350, 0, 0,
	903, 0, 0, 341, 0, 308, 1904, 2106, 1327, 0,
	0, 0, 0, 0, 177, 1049, 179, 1051, 183, 191,
	0, 0, 0, 196, 197, 200, 201, 202, 203, 204,
	0, 208, 0, 210, 213, 0, 215, 216, 0, 219,
	220, 221, 0, 231, 232, 233, 1052, 1053, 1054, -2,
	106, 927, 1753, 1640, 0, 1647, 1660, 1671, 1404, 1405,
	1406, 1407, 0, 0, 0, 0, 0, 0, 1415, 1416,
	0, 1444, 2142, 2183, 2184, 0, 1424, 1425, 1426, 1427,
	1428, 1429, 117, 129, 130, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 0, 1701, 1702, 1703, 1611, 1391, 1323, 0,
	2151, 0, 2173, 2178, 2179, 2180, 2181, 2172, 0, 0,
	1596, 0, 1586, 0, 0, -2, -2, 0, 0, 1974,
	-2, 2185, 2186, 2187, 2148, 2169, 2177, 2152, 2153, 2176,
	2144, 2145, 2146, 2139, 2140, 2141, 2143, 2155, 2157, 2168,
	0, 2164, 2174, 2175, 2082, 0, 0, 0, 0, 0,
	2124, 131, 132, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1607, -2, -2, 1610, -2, 1613, -2, -2, -2, -2,
	1618, 1619, -2, 1621, -2, -2, -2, -2, -2, -2,
	-2, 1598, 1599, 1600, 1601, 1590, 1591, 1592, 1593, 1594,
	1595, -2, -2, -2, 778, 853, 0, 778, 0, 753,
	800, 803, 806, 809, 756, 0, 0, 79, 80, 0,
	0, 0, 303, 304, 292, 294, 0, 298, 0, 291,
	1085, 1085, 0, 0, 0, 0, 1085, 1085, 1085, 1085,
	1085, 0, 1085, 0, 0, 0, 0, 0, 1085, 0,
	962, 1056, 1057, 1058, 1083, 1084, 1157, 0, 0, 0,
	679, 675, 676, 677, 678, 766, 0, 768, 771, 599,
	599, 826, 826, 545, 0, 0, 0, 599, 0, 559,
	551, 0, 0, 0, 599, 0, 0, 773, 773, 0,
	602, 611, 599, 599, -2, 599, 599, 596, 599, 0,
	0, 1097, 565, 566, 567, 551, 551, 570, 571, 572,
	582, 583, 612, 1777, 0, 0, 485, 485, 0, 485,
	485, 0, 485, 485, 485, 681, 1944, 1846, 1919, 1904,
	2106, 0, 259, 1974, 264, 0, 1847, 1866, 0, 0,
	1884, 0, -2, 0, 330, 778, 0, 0, 752, 0,
	0, 0, 0, 0, 485, 485, 485, 485, 485, 1156,
	485, 485, 485, 485, 485, 0, 0, 0, 485, 485,
	485, 485, 0, 0, 818, 819, 814, 815, 816, 820,
	821, 5, 6, 19, 0, 0, 0, 0, 0, 0,
	85, 84, 0, 1754, 1772, 1706, 1707, 1708, 1759, 1710,
	1763, 1763, 1763, 1763, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1763, 1763, 0, 0, 1752, 1730, 1761,
	1761, 1761, 1759, 1756, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1766, 1766,
	1769, 1769, 1766, 0, 387, 385, 386, 1636, 0, 0,
	0, 0, 722, 726, 1269, 0, 0, 0, 778, -2,
	0, 0, 625, 352, 1328, 0, 0, 356, 0, 357,
	0, 0, 0, 376, 0, 379, 364, 365, 366, 360,
	0, 157, 0, 343, 344, 0, 0, 310, 0, 0,
	0, 486, 0, 0, 0, 0, 0, 0, 188, 184,
	192, 195, 205, 212, 0, 224, 226, 229, 185, 193,
	198, 199, 206, 227, 186, 189, 190, 194, 228, 230,
	187, 207, 211, 225, 209, 214, 217, 218, 223, 0,
	158, 0, 0, 0, 0, 0, 1646, 0, 0, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 1640, 0, 0, 1410,
	1411, 1412, 1413, 0, 1417, 0, 1445, 0, 0, 0,
	0, 0, 1700, 1704, 0, 1636, 1636, 0, 1636, 1632,
	0, 0, 0, 0, 0, 0, 1636, 1569, 0, 0,
	1571, 1587, 0, 0, 1573, 1574, 0, 1577, 1578, 1636,
	0, 1636, 1582, 1636, 1636, 1636, 1565, 1566, 0, 1632,
	1632, 1632, 1632, 0, 0, 1632, 1632, 1632, 1632, 1632,
	1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 0,
	0, 0, 0, 773, 0, 779, 0, -2, 0, 797,
	799, 801, 802, 804, 805, 807, 808, 810, 811, 758,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 296,
	0, 301, 0, 0, 0, 0, 926, 0, 0, 1085,
	1085, 1085, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1085, 1085, 1085, 0, 1103, 0, 0, 0,
	681, 680, 0, 767, 0, 0, 826, 0, 0, 542,
	543, 0, 544, 0, 551, 599, 599, 557, 558, 553,
	552, 607, 608, 602, 0, 602, 602, 826, 0, 576,
	577, 578, 599, 599, 584, 774, 0, 585, 586, 602,
	0, 609, 610, 826, 0, 0, 826, 826, 0, 594,
	595, 597, 599, 0, 0, 1085, 0, 617, 553, 553,
	1778, 1779, 0, 0, 1094, 0, 0, 0, 0, 620,
	0, 0, 0, 0, 682, 239, 242, 0, 245, 0,
	1944, 0, 1944, 0, 252, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 273, 276, 1263,
	1264, 1046, 1047, 277, 278, 322, 323, 0, 773, 796,
	798, 792, 793, 794, 0, 0, 0, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 657, 0,
	942, 659, 0, 0, 0, 0, 0, 834, 828, 830,
	898, 117, 834, 8, 102, 99, 0, 19, 0, 0,
	19, 19, 0, 19, 287, 0, 1775, 1773, 1774, 1709,
	1760, 0, 1735, 0, 1736, 1737, 1738, 1748, 1749, 0,
	0, 1731, 0, 1732, 1733, 1734, 1725, 0, 1726, 1727,
	0, 1728, 1729, 285, 384, 0, 0, 1637, 930, 0,
	700, 714, 695, 0, 703, 0, 0, 1271, 1272, 0,
	0, 0, 683, 714, 685, 0, 703, 773, 750, 0,
	728, 0, 0, 353, 0, 361, 358, 0, 362, 0,
	0, 378, 380, 381, 382, 367, 368, 622, 339, 340,
	331, 332, 333, 334, 335, 336, 337, 338, 0, 342,
	127, 0, 311, 312, 0, 0, 0, 171, 172, 173,
	174, 175, 176, 178, 162, 646, 648, 1038, 1050, 0,
	1041, 0, 181, 222, 154, 0, 0, 0, 1641, 1642,
	1643, 1644, 1645, 1650, 0, 1652, 1654, 1656, 1658, 0,
	1676, -2, -2, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1661, 1674, 1675, 0, 0,
	0, 0, 0, 0, 1672, 1672, 1667, 0, 1430, 1265,
	1266, 1408, 0, 0, 1442, 1446, 0, 0, 0, 0,
	0, 118, 1631, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 0, 0, 1640, 0, 0, 0, 1633, 1634,
	0, 0, 0, 1524, 0, 0, 1530, 1531, 1532, 0,
	709, 0, 1597, 1570, 1588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 852, 854, 0, 718, 720, 721, 747, 728,
	754, 0, 0, 0, 77, 82, 0, 1124, 0, 0,
	0, 305, 306, 0, 0, 300, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 978, 979, 483, 1032,
	0, 0, 0, 1048, 1073, 1081, 0, 0, 0, 0,
	0, 1130, 964, 969, 970, 971, 965, 966, 972, 973,
	0, 769, 0, 0, 867, 541, 600, 601, 827, 548,
	1904, 553, 826, 826, 560, 554, 561, 604, 562, 563,
	564, 602, 826, 826, 775, 599, 602, 587, 603, 602,
	605, 591, 0, 598, 605, 618, 605, 0, 616, 568,
	569, 1132, 771, 400, 401, 402, 404, 0, 453, 453,
	453, 436, 453, 0, 0, 424, 1780, 0, 0, 0,
	0, 433, 1780, 0, 0, 1780, 1780, 1780, 1780, 1780,
	1780, 1780, 0, 0, 1780, 1780, 1780, 1780, 1780, 1780,
	1780, 1780, 1780, 1780, 1780, 0, 1780, 1780, 1780, 1780,
	1780, 1249, 1780, 0, 1095, 443, 444, 445, 446, 451,
	452, 0, 0, 480, 0, 0, 977, 0, 483, 0,
	1017, 839, 0, 840, 841, 837, 869, 893, 893, 0,
	893, 873, 1271, 0, 0, 250, 251, 240, 0, 241,
	0, 253, 254, 0, 256, 257, 258, 265, 1846, 1919,
	260, 262, 0, 0, 266, 279, 280, 281, 0, 0,
	271, 272, 0, 0, 325, 326, 328, 0, 728, 1098,
	1099, 1100, 643, 1267, 644, 645, 649, 0, 0, 652,
	653, 654, 655, 656, 944, 0, 0, 1024, 1025, 1026,
	1027, 826, 0, 835, 0, 831, 899, 0, 901, 0,
	826, 0, 100, 19, 0, 93, 90, 0, 0, 0,
	0, 0, 1755, 1705, 1776, 0, 0, 0, 1757, 0,
	0, 0, 0, 0, 83, 730, 690, 0, 694, 711,
	0, 715, 0, 0, 707, 699, 704, 0, 0, 724,
	691, 1270, 0, 0, 0, 684, 0, 0, 689, 728,
	0, 751, 780, 781, 784, 1329, 0, 363, 359, 377,
	0, 485, 0, 0, 0, 165, 1035, 0, 166, 170,
	160, 0, 0, 0, 1040, 0, 1037, 1042, 0, 180,
	0, 0, 155, 156, 1115, 1124, 0, 0, 0, 1651,
	1653, 1655, 1657, 1659, 0, 1662, 1672, 1672, 1668, 0,
	1663, 0, 1665, 0, 1641, 1414, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 1514, 1515, 0, 0,
	1519, 0, 1521, 1522, 1523, 1525, 0, 0, 0, 1529,
	0, 1568, 1589, 1572, 1575, 0, 1579, 0, 1581, 1583,
	1584, 1585, 0, 778, 778, 0, 0, 1486, 1486, 1486,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 1432, 1433, 0,
	0, 0, 855, 748, 0, 0, 0, 0, 0, 1122,
	0, 70, 0, 0, 307, 295, 297, 0, 0, 1086,
	0, 0, 0, 0, 932, 933, 935, 0, 938, 939,
	940, 944, 771, 0, 771, 989, 1780, 487, 0, 0,
	1034, 0, 0, 1006, 0, 0, 0, -2, 0, 0,
	1081, 0, 0, 0, 1134, 0, 0, 0, 668, 672,
	23, 772, 0, 546, 0, 547, 599, 555, 556, 826,
	579, 580, 0, 0, 826, 599, 599, 590, 0, 602,
	613, 0, 614, 615, 1134, 0, 0, 1094, 1200, 1168,
	414, 0, 1284, 1285, 454, 0, 1291, 1300, 1085, 1361,
	0, 1300, 0, 0, 1302, 1303, 0, 0, 0, 0,
	437, 438, 0, 423, 0, 0, 0, 0, 0, 0,
	422, 0, 0, 464, 0, 0, 0, 0, 0, 1781,
	1780, 1780, 0, 431, 432, 0, 435, 0, 0, 0,
	0, 0, 0, 0, 0, 1780, 1780, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1240, 0,
	0, 0, 0, 0, 0, 0, 1255, 1256, 0, 989,
	1780, 0, 0, 0, 0, 487, 1004, 1022, 0, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 771, 894, 0, 896, 897, 871,
	-2, 0, 839, 876, 1636, 243, 244, 0, 0, 249,
	267, 269, 0, 0, 0, 268, 270, 274, 275, 324,
	327, 329, 790, 0, 0, 1158, 0, 945, 946, 948,
	949, 0, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1830, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 943, 660, 824,
	829, 836, 900, 902, 118, 832, 824, 0, 103, 19,
	102, 94, 95, 0, 19, 0, 0, 0, 0, 1765,
	1764, 1750, 0, 1751, 1762, 1767, 0, 1770, 0, 388,
	734, 0, 0, 714, 716, 0, 0, 714, 0, 0,
	723, 0, 0, 0, 0, 0, 0, 714, 790, 730,
	0, 787, 785, 786, 0, 0, 623, 128, 383, 0,
	0, 0, 0, 0, 647, 0, 1039, 162, 0, 0,
	182, 0, 0, 0, 1124, 1119, 1635, 1664, 1666, 0,
	1673, 1669, 1409, 1418, 1443, 0, 0, 1449, 1461, 1461,
	0, 0, 0, 1452, 1763, 1763, 1455, 1759, 1761, 1759,
	1461, 1461, 0, 119, 0, 0, 1520, 0, 0, 0,
	710, 0, 0, 0, 1482, 1484, 1486, 1486, 1493, 1487,
	1494, 1495, 1486, 1486, 1486, 1486, 1500, 1486, 1486, 1486,
	1486, 1486, 1486, 1486, 1486, 1486, 1486, 1480, 0, 0,
	1694, 1695, 719, 0, 0, 761, 762, 763, 764, 765,
	0, 0, 57, 57, 1124, 0, 71, 0, 0, 299,
	61, 62, 0, 0, 69, 0, 0, 0, 0, 0,
	937, 0, 0, 0, 1277, 0, 993, 990, 991, 992,
	0, 1029, 488, 489, 490, 491, 0, 0, 0, 1033,
	0, 1017, 1017, 999, 0, 0, 0, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, -2, 1089, 0, 0, 0, 1277,
	1108, 0, 0, 1113, 1277, 1277, 0, 1142, 0, 1131,
	722, 0, -2, 0, 0, 670, 0, 0, 868, 549,
	826, 573, 776, 777, 605, 826, 826, 0, 599, 619,
	1142, 1133, 0, 403, 453, 0, 1188, 0, 0, 1194,
	0, 1201, 407, 0, 455, 0, 1290, 1317, 1301, 1317,
	1362, 1317, 1317, 1085, 0, 455, 0, 0, 425, 461,
	0, 0, 0, 0, 0, 421, 458, 784, 408, 410,
	411, 412, 462, 463, 465, 0, 467, 468, 427, 439,
	440, 441, 442, 0, 0, 0, 434, 447, 448, 449,
	450, 409, 1217, 1218, 1219, 1222, 1223, 1224, 1225, 0,
	0, 1228, 1229, 1230, 1231, 1232, 1314, 1315, 1316, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1257, 1258, 1259, 1260,
	1261, 1262, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	0, 0, 1252, 0, 0, 993, 0, 0, 0, 0,
	0, 1029, 1006, 0, 1013, 0, 1018, 1019, 0, 0,
	692, 826, 317, 0, 863, 856, 0, 845, 860, 861,
	862, 848, 0, 850, 0, 846, 847, 826, 838, 870,
	895, 872, 875, 877, 878, 884, 0, 0, 0, 0,
	246, 247, 248, 255, 0, 507, 261, 746, 0, 1268,
	650, 651, 1159, 1160, 658, 0, 950, 822, 0, 0,
	822, 98, 101, 0, 96, 0, 0, 0, 0, 88,
	86, 1758, 0, 0, 736, 142, 0, 0, 0, 712,
	0, 717, 714, 698, 708, 697, 705, 706, 725, 1273,
	1274, 1275, 1276, 714, 688, 687, 749, 734, 782, 783,
	0, 1330, 354, 0, 1036, 162, 167, 168, 169, 163,
	161, 1043, 0, 1045, 0, 1117, 0, 0, 1670, 1448,
	1419, 1450, 1462, 1463, 1451, 0, 1421, 1422, 1453, 1454,
	1456, 1457, 1458, 1459, 1460, 1423, 1516, 0, 1518, 1526,
	1527, 0, 1576, 1580, 0, 0, 0, 0, 0, 1491,
	1492, 1496, 1497, 1498, 1499, 1501, 1502, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 778, 1481, 0, 0, 0,
	0, 0, 0, 0, 759, 0, 0, 0, 59, 0,
	59, 1123, 1125, 0, 0, 0, 63, 64, 0, 0,
	0, 925, 928, 934, 936, 0, 0, 0, 1278, 1279,
	1281, 1282, 1283, 0, 961, 0, 0, 981, 982, 983,
	995, 0, 0, 0, 493, 494, 0, 0, 0, 506,
	502, 503, 504, 484, 1028, 1013, 1013, 1002, 0, 0,
	1012, 0, 1090, 1780, 1780, 1780, 0, 0, 1202, 1780,
	1780, 0, 1110, 1112, 0, 0, 1206, 1145, 0, 0,
	1136, 0, 893, 0, 0, 826, 669, 672, 673, 770,
	550, 588, 592, 589, 0, 826, 1145, 399, 1166, 0,
	0, 0, 0, 0, 1198, 0, 0, 1170, 0, 426,
	456, 0, -2, 0, 1318, 0, 1304, 1318, 0, 0,
	1317, 0, 415, 455, 0, 0, 0, 469, 473, 474,
	0, 471, 1357, 0, 472, 0, 460, 0, 466, 1220,
	1221, 0, 1226, 1227, 0, 1251, 0, 0, 406, 475,
	0, 0, 0, 476, 477, 482, 999, 0, 1016, 0,
	1023, 0, 1020, 1021, 778, 0, 0, 842, 864, 0,
	0, 843, 0, 844, 849, 851, 316, 879, 0, 0,
	881, 882, 883, 874, 263, 791, 947, 0, 812, 0,
	0, 833, 813, 0, 19, 0, 0, 91, 1768, 1771,
	738, 0, 735, 143, 0, 0, 0, 0, 702, 713,
	696, 686, 736, 788, 789, 164, 159, 1044, 1127, 0,
	1118, 0, 0, 1528, 0, 1486, 1483, 1486, 1485, 1477,
	0, 1434, 0, 1436, 1437, 1438, 0, 1440, 1441, 0,
	757, 0, 55, 0, 58, 56, 0, 72, 0, 0,
	0, 0, 0, 0, 967, 1206, 0, 967, 994, 980,
	0, 1030, 1031, 0, 495, 496, 0, 499, 505, 996,
	997, 998, 0, 0, 1010, 0, 0, 0, 0, 1082,
	1096, 0, 0, 0, -2, 0, -2, 1107, 0, 1151,
	0, 1143, 0, 1135, 0, 1138, 826, 826, -2, 666,
	671, 0, 0, 593, 1151, 1168, 0, 1189, 0, 0,
	0, 0, 0, 0, 0, 1169, 0, 1182, 457, 1319,
	-2, 1333, 1335, 0, 1095, 1338, 1339, 0, 0, 0,
	0, 0, 0, 1383, 1347, 0, 0, 1351, 1352, 1353,
	0, 0, 1356, 0, 1688, 1689, 0, 1360, 0, 0,
	0, 0, 0, 0, 0, 1298, 416, 417, 0, 419,
	420, 1780, 1358, 459, 413, 1780, 429, 1250, 1253, 1254,
	481, 478, 479, 1002, 1005, 1014, 693, 773, 318, 319,
	865, 0, 857, 888, 885, 0, 0, 951, 823, 825,
	92, 97, 0, 0, 740, 0, 737, 0, 731, 733,
	153, 701, 738, 113, 145, 0, 0, 1420, 1517, 1567,
	1489, 1490, 0, 1478, 0, 1472, 1473, 1474, 1479, 0,
	0, 760, 755, 60, 74, 0, 0, 65, 0, 0,
	0, 0, 953, 960, 974, 1101, 1280, 959, 0, 0,
	492, 497, 0, 500, 501, 0, 1000, 1001, 0, 1008,
	0, 0, 1069, 1759, 0, 1091, 1092, 1093, 1203, 1204,
	1205, 1161, 1109, 0, -2, 1214, 0, 1105, 1127, 1161,
	0, 1139, 0, 1146, 0, 1144, 1137, 778, 667, 606,
	1148, 405, 1200, 1190, 0, 1192, 0, 0, 0, 0,
	1171, -2, 0, 1334, 1336, 1337, 1340, 1341, 1342, 1388,
	1389, 1390, 0, 0, 1345, 1385, 1386, 1387, 1346, 0,
	0, 0, 0, 0, 1686, 1687, 1381, 0, 0, 1305,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1306, 0, 0,
	0, 1297, 1299, 418, 0, 0, 1780, 1015, 315, 0,
	0, 889, 891, 886, 887, 87, 89, 104, 0, 739,
	144, 0, 740, 115, 0, 136, 0, 1128, 0, 1488,
	1475, 0, 0, 0, 0, 0, 1690, 1691, 1692, 0,
	1435, 1439, 0, 73, 66, 67, 0, 0, 0, 975,
	976, 984, 985, 0, 987, 988, 498, 1003, 1007, 1010,
	0, 1060, 0, 784, 0, 1163, 0, 1111, 1094, 1216,
	1780, 1114, 1163, 0, 1208, 1780, 1780, 1129, 0, 1141,
	0, 1153, 0, 1147, 773, 398, 0, 1150, 1186, 1191,
	1193, 1195, 0, 1199, 1197, 1172, -2, 0, 1180, 0,
	0, 1343, 1344, 0, 0, 1586, 1780, 0, 1376, 0,
	1060, 1060, 1060, 1060, 0, 470, 428, 0, 866, 880,
	0, 0, 0, 729, 105, 0, 114, 133, 0, 146,
	147, 0, 0, 0, 0, 1120, 0, 1464, 0, 0,
	0, 1468, 1469, 1470, 1471, 75, 0, 0, 0, 952,
	0, 986, 1009, 1011, 1059, 1070, 1071, 784, 1104, 0,
	1200, 1215, 0, 1106, 1207, 0, 0, 0, 1140, 1152,
	0, 1155, 665, 1149, 1167, 0, 1196, 1173, 1181, 0,
	1176, 0, 0, 0, 1384, 0, 1350, 0, 1355, 1364,
	1377, 0, 0, 1286, 0, 1288, 0, 1292, 0, 1294,
	0, 0, 430, 890, 892, 0, 742, 732, 116, 120,
	0, 142, 139, 0, 148, 0, 0, 0, 0, 1116,
	0, 0, 1465, 1466, 1467, 0, 68, 0, 954, 955,
	968, 1061, 1780, 1780, 0, 0, 0, 1067, 1068, 1072,
	0, 1188, 1220, 1209, 1210, 1211, 1154, 1187, 1175, 0,
	-2, 1183, 0, 0, 1638, 1648, 1649, 1348, 1354, 1363,
	1365, 1366, 0, 1378, 1379, 1380, 1382, 1060, 1060, 1060,
	1060, 1296, 741, 0, 107, 0, 0, 137, 138, 140,
	0, 149, 0, 151, 152, 0, 1476, 76, 956, 0,
	0, 1064, 1065, 0, 1164, 0, 1166, 1177, -2, 0,
	1185, 0, 1349, 1367, 0, 1368, 0, 0, 0, 1287,
	1289, 1293, 1295, 743, 1126, 0, 121, 0, 123, 125,
	126, 1320, 134, 135, 141, 150, 0, 941, 957, 0,
	1062, 1063, 1066, 0, 1168, 1184, 1639, 1369, 1371, 1372,
	0, 0, 1370, 108, 109, 0, 122, 0, 0, 1121,
	958, 1165, 1162, 1373, 1375, 1374, 0, 0, 124, 1321,
	110, 111, 112, 0, 1322,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 640, 637,
	126, 125, 127, 3, 641, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 638, 138, 639, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:818
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:825
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:831
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:839
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:849
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:883
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:916
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:926
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:937
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:949
		{
			yyVAL.str = ""
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:953
		{
			yyVAL.str = yyDollar[2].str
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:958
		{
			yyVAL.str = ""
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:962
		{
			yyVAL.str = yyDollar[2].str
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:970
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:980
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:990
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1002
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1012
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1022
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1033
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1058
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1066
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1074
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1082
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1091
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1101
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1110
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1120
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1133
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1153
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1159
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1166
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1174
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1180
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1189
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1207
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1215
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1223
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1233
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1241
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1251
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1258
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1267
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1277
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1281
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1287
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1291
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1297
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1306
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1316
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1320
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1326
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1335
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1339
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1345
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1366
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1380
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1387
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1391
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1397
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1401
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1407
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1414
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1422
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1426
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1438
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1442
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1456
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1460
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1465
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1472
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1476
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1480
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1486
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1495
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1506
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1510
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1516
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1520
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1526
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1530
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1536
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1560
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1579
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1583
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1587
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1592
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1596
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1605
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1615
		{
			yyVAL.str = ""
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1622
		{
			yyVAL.str = yyDollar[3].str
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1627
		{
			yyVAL.str = "\n"
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1634
		{
			yyVAL.str = yyDollar[3].str
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1639
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1643
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1671
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1675
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1681
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1689
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1709
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1728
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1753
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1757
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1761
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1766
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1770
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1776
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1789
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1800
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1813
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1817
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1827
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1840
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1853
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1859
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1865
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1873
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1883
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1893
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1897
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1901
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1905
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1909
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1913
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1920
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1924
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1930
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1937
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1946
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1950
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1956
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1960
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1964
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1968
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1972
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1976
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1980
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1984
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1988
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1992
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1996
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2000
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2004
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2008
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2012
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2016
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2020
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2024
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2056
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2060
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2064
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2068
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2072
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2076
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2080
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2169
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2176
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2183
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2193
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2197
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2203
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2210
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2236
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2246
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2253
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2260
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2269
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2299
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2303
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2307
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2313
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2319
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2323
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2330
		{
			yyVAL.str = yyDollar[3].str
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2336
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2340
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2346
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2354
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2363
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2372
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2380
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2388
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2411
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2434
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2441
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2448
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2456
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2463
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2479
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2483
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2487
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2493
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2497
		{
			yyVAL.str = yyDollar[1].str
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2503
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2507
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2513
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2517
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2528
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2539
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2543
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2547
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2551
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2555
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2559
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2563
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2567
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2571
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2577
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2581
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2585
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2589
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2594
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2599
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2605
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2618
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2631
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2644
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2657
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2673
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2680
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2691
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2702
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2706
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2712
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2722
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2728
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2732
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2738
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2744
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2748
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2752
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2756
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2762
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2775
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2785
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2791
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2795
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2801
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2807
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2818
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2824
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2828
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2832
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2836
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2840
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2844
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2852
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2860
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2870
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2882
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2886
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2894
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2902
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2941
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2945
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2951
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2957
		{
			yyVAL.str = yyDollar[1].str
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2962
		{
			yyVAL.str = "true"
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2963
		{
			yyVAL.str = "false"
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2964
		{
			yyVAL.str = yyDollar[1].str
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2969
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2975
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2984
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2991
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2999
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3003
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3027
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3050
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3060
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3067
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3076
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3080
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3086
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3090
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3114
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3124
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3134
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3150
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3168
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3172
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3178
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3182
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3188
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3194
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3202
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3212
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3220
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3230
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3240
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3250
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3257
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3261
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3265
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3269
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3273
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3280
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3286
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3290
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3294
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3298
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3302
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3306
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3310
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3314
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3319
		{
			yyVAL.str = ""
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3350
		{
			yyVAL.str = ""
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3354
		{
			yyVAL.str = string("COLUMN")
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3359
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3365
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3371
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3379
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3383
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3389
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3397
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3404
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3410
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3416
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3422
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3428
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3435
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3442
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3450
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3456
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3468
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3474
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3482
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3486
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3493
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3511
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3526
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3541
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3556
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3569
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3575
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3586
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3599
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3603
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3611
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3615
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3620
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3624
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3640
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3644
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3648
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3652
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3659
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3663
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3667
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3671
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3678
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3682
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3689
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3693
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3697
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3701
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3708
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3715
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3721
		{
			yyVAL.item = nil
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3726
		{
			yyVAL.item = nil
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3770
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3779
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3787
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3795
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3803
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3807
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3811
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3826
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3832
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3837
		{
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3841
		{
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3846
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3856
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3866
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3874
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3880
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3886
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3892
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3898
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3904
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3910
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3919
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3923
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3927
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3931
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3935
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3939
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3943
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3947
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3953
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3962
		{
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3964
		{
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3983
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3992
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3996
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4000
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4006
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4012
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4018
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4024
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4033
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4044
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4056
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4064
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4070
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4082
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4096
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4102
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4108
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4115
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4119
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4124
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4128
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4132
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4137
		{
			yyVAL.str = ""
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4141
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4147
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4152
		{
			yyVAL.str = ""
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4156
		{
			yyVAL.str = yyDollar[4].str
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4171
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4175
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4181
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4189
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4196
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4200
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4206
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4212
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4217
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4225
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4231
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4236
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4242
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4248
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4252
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4279
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4287
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4295
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4303
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4307
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4313
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4326
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4343
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4349
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4357
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4365
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4373
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4379
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4387
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4393
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4401
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4407
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4417
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4422
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4429
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4445
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4458
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4469
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4473
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4479
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4485
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4494
		{
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4496
		{
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4499
		{
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4508
		{
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4512
		{
		}
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4517
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4526
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4533
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4539
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4547
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4554
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4561
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4581
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4589
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4599
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4603
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4609
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4616
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4622
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4630
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4637
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4644
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4663
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4667
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4671
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4676
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4680
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4684
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4690
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4699
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4703
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4709
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4713
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4719
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4723
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4729
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4734
		{
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4738
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4745
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4749
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4756
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4761
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4765
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4771
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4775
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4781
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4785
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4790
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4794
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4807
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4818
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4829
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4851
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4874
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4882
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4891
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4895
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4908
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4912
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4917
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4921
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4928
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4933
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4940
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4946
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4950
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4954
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4958
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4962
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4966
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4971
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4975
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4981
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4991
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5006
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5010
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5024
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5028
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5034
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5043
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5047
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5051
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5055
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5059
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5065
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5072
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5081
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5085
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5091
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5099
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5103
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5108
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5112
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5118
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5122
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5126
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5131
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5135
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5141
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5147
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5151
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5157
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5162
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5166
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5170
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5175
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5179
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5183
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5188
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5192
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5200
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5204
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5208
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5222
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5226
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5236
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5246
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5256
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5268
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5276
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5284
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5293
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5301
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5309
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5317
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5325
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5333
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5341
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5349
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5357
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5367
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5378
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5392
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5396
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5400
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5405
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5409
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5413
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5422
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5426
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5431
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5435
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5440
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5444
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5450
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5454
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5460
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5464
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5468
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5472
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5477
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5485
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5491
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5499
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5507
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5517
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5523
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5532
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5541
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5550
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5560
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5564
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5574
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5578
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5582
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5586
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 852:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5592
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5602
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5606
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5612
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5618
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5622
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5628
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5634
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5638
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5642
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5646
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5652
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5656
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5662
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5666
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5672
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5676
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5682
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5686
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5696
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5709
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5715
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5721
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5735
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5746
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5753
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5757
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5763
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5773
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5777
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5781
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5786
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5790
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5794
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5798
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5803
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5807
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5811
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5815
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5819
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5824
		{
			yyVAL.str = ""
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5828
		{
			yyVAL.str = yyDollar[1].str
		}
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5832
		{
			yyVAL.str = yyDollar[2].str
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5838
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5842
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 898:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5847
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5851
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5855
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5859
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5863
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5869
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 925:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5910
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5923
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5929
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 928:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5935
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5948
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5953
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5960
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5967
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5971
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5977
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5983
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5988
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5992
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5996
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6000
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6007
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6040
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6045
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6052
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6059
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6063
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6069
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6075
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6079
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6083
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6089
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6095
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6101
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6105
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6111
		{
			yyVAL.str = ""
		}
	case 958:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6118
		{
			yyVAL.str = yyDollar[2].str
		}
	case 959:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6124
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6139
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6156
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6173
		{
			yyVAL.str = yyDollar[1].str
		}
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6177
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6183
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6187
		{
			yyVAL.str = "DEFINER = "
		}
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6191
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6196
		{
			yyVAL.str = ""
		}
	case 968:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6200
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6214
		{
			yyVAL.str = ""
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6222
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6228
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6233
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6239
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6252
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6257
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6262
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6268
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6275
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6282
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6289
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6296
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6304
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6310
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6317
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6324
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6332
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6338
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6347
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6364
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6381
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6400
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6418
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6424
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6431
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6439
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6445
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6453
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6459
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6467
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6473
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6482
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6486
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6491
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6495
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6502
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6507
		{
			yyVAL.str = ""
		}
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6511
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1015:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6517
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6530
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6540
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6544
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6550
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6556
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6562
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6569
		{
			yyVAL.str = ""
		}
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6573
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1024:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6579
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6587
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6595
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6603
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6611
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6616
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6628
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6639
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6748
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6752
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6758
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6771
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6775
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6781
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6794
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6798
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6802
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6807
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6811
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6817
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6824
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6830
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6839
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6846
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6857
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6861
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6867
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6876
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6880
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6884
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6889
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6893
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6897
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6901
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6907
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6938
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6942
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6968
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6974
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6986
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6992
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6998
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7004
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7010
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7018
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7022
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7028
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7042
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7056
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7060
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7064
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7068
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7072
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7076
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7080
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7086
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7101
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7105
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7116
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7120
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7125
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7129
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7135
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7139
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7145
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7154
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7163
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7169
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7173
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7179
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7190
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7196
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7214
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7232
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7250
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7266
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7270
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7279
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7291
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7300
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7312
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7322
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7332
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7343
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7353
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7364
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7372
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7383
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7390
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7400
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7413
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7421
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7430
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7439
		{
			yyVAL.str = ""
		}
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7443
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7449
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7453
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7458
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7462
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7469
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7481
		{
			yyVAL.str = ""
		}
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7485
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1129:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7491
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7512
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7526
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7530
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7534
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7540
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7544
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7551
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7558
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7565
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7572
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7576
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7580
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7584
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7588
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7595
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7602
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7606
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7613
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7620
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7624
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7630
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7636
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7640
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7647
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7654
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7661
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7668
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7672
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7677
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7681
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7685
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7690
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7694
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7707
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7711
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7719
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7727
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7731
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7743
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7747
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7753
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7757
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7763
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7776
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7790
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7794
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7800
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7804
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7810
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7819
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7830
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7834
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7839
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7843
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7849
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7854
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7862
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7866
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7876
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7880
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7891
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7899
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7907
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7915
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7926
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7935
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7945
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7955
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7959
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7964
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7968
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7974
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7978
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7984
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7993
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8003
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8007
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8013
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8017
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8023
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8032
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8042
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8046
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8052
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8056
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8060
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8066
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8070
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8074
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8078
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8082
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8086
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8090
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8095
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8099
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8103
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8107
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8111
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8115
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8119
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8123
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8127
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8131
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8135
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8139
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8143
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8149
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8155
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8159
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8163
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8167
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8171
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8177
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8183
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8189
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8195
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8201
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8207
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8211
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8215
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8219
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8226
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8230
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8236
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8247
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8251
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8257
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8261
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8265
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8269
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8273
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8277
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8291
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8295
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8304
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8310
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8318
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8322
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8326
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8333
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8341
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8348
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8356
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8363
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8367
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8373
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8377
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8381
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8387
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8391
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8397
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8410
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8423
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8462
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8502
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8516
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8522
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8535
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8548
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8561
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8574
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8589
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8599
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8605
		{
			yyVAL.str = ""
		}
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8609
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8619
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8625
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8631
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8652
		{
			yyVAL.str = ""
		}
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8656
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8662
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8668
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8672
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8677
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8685
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8689
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8693
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8697
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8703
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8709
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8713
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8718
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8725
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8729
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8735
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8739
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8745
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8749
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8753
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8757
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8761
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8765
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8770
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8774
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8778
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8782
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8786
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8790
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8794
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8798
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8802
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8806
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8820
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8824
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8828
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8832
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8836
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8840
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8846
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8850
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8855
		{
			yyVAL.str = ""
		}
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8859
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8865
		{
			yyVAL.str = ""
		}
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8869
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8875
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8892
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8899
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8906
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8913
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8920
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8929
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8935
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8941
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8945
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8949
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8953
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8957
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8962
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8969
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8973
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8977
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8982
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8986
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8991
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8995
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9011
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9017
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9021
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9025
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9029
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9033
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9037
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9041
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9045
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9049
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9053
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9057
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9061
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9065
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9071
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9075
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9079
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9083
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9087
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9091
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9095
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9099
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9103
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9107
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9149
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9153
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9157
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9162
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9170
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9174
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9178
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9182
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9186
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9196
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9200
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9204
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9208
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9212
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9216
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9220
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9226
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9235
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9244
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9255
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9265
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9275
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9284
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9294
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9304
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9314
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9323
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9333
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9337
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9342
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9346
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9352
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9356
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9362
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9371
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9383
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9400
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9417
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9430
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9443
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9455
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9469
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9484
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9499
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9516
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9531
		{
		}
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9538
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9542
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9546
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9552
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9556
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9560
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9564
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9570
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9574
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9578
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9584
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9592
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9602
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9606
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9613
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9618
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9622
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9627
		{
			yyVAL.str = ","
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9631
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9636
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9640
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1486:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9645
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9652
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9678
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9690
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9702
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9713
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9724
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9735
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9745
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9755
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9766
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9777
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9788
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9799
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9810
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9821
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9832
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9843
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9854
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9865
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9876
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9887
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9898
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9909
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9927
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9936
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9945
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9954
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9963
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9974
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9983
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9993
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10002
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10011
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10020
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10029
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10041
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10052
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10065
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10077
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10100
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10136
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10149
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10162
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10174
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10183
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10191
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10199
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10212
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10221
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10232
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10243
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10252
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10264
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10274
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10284
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10293
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10304
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10313
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10323
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10332
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10341
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10351
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10355
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10361
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10365
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10384
		{
		}
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10386
		{
		}
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10427
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10439
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10443
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10447
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10453
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10458
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10462
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10468
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10472
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10478
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10482
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10489
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10493
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10497
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10506
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10510
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10514
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10519
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10523
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10529
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10533
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10537
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10541
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10545
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10549
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10553
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10557
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10561
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10565
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10573
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10577
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10581
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10585
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10589
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10593
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10597
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10601
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10605
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10609
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10619
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10625
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10629
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10636
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10640
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10644
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10650
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10654
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10658
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10662
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10666
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10670
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10674
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10680
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10684
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10688
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10692
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10698
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10711
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10716
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10722
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10726
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10739
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10744
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10748
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10752
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10756
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10760
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10767
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10771
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10775
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10779
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10786
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10797
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10802
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10808
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10820
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10832
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10844
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10857
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10870
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10883
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10896
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10909
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10922
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10935
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10948
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10961
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10974
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10989
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11016
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11058
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11094
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11130
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11147
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11159
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11179
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11199
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11219
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11235
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11248
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11261
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11274
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11287
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11299
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11311
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11323
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11335
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11347
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11359
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11371
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11383
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11395
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11408
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11421
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11434
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11447
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11462
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11470
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11479
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11489
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11512
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11517
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11523
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11530
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11534
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11539
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11543
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11549
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11555
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11562
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11569
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11578
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11585
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11592
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11601
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11605
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11609
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11615
		{
		}
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11617
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11627
		{
			yyVAL.str = ""
		}
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11631
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
