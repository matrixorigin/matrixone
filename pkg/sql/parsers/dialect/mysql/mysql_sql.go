// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const DATALINK = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const UUID = 57533
const VECF32 = 57534
const VECF64 = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const INT1 = 57544
const INT2 = 57545
const INT3 = 57546
const INT4 = 57547
const INT8 = 57548
const S3OPTION = 57549
const STAGEOPTION = 57550
const SQL_SMALL_RESULT = 57551
const SQL_BIG_RESULT = 57552
const SQL_BUFFER_RESULT = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const DELAYED = 57556
const CREATE = 57557
const ALTER = 57558
const DROP = 57559
const RENAME = 57560
const ANALYZE = 57561
const ADD = 57562
const RETURNS = 57563
const SCHEMA = 57564
const TABLE = 57565
const SEQUENCE = 57566
const INDEX = 57567
const VIEW = 57568
const TO = 57569
const IGNORE = 57570
const IF = 57571
const PRIMARY = 57572
const COLUMN = 57573
const CONSTRAINT = 57574
const SPATIAL = 57575
const FULLTEXT = 57576
const FOREIGN = 57577
const KEY_BLOCK_SIZE = 57578
const SHOW = 57579
const DESCRIBE = 57580
const EXPLAIN = 57581
const DATE = 57582
const ESCAPE = 57583
const REPAIR = 57584
const OPTIMIZE = 57585
const TRUNCATE = 57586
const MAXVALUE = 57587
const PARTITION = 57588
const REORGANIZE = 57589
const LESS = 57590
const THAN = 57591
const PROCEDURE = 57592
const TRIGGER = 57593
const STATUS = 57594
const VARIABLES = 57595
const ROLE = 57596
const PROXY = 57597
const AVG_ROW_LENGTH = 57598
const STORAGE = 57599
const DISK = 57600
const MEMORY = 57601
const CHECKSUM = 57602
const COMPRESSION = 57603
const DATA = 57604
const DIRECTORY = 57605
const DELAY_KEY_WRITE = 57606
const ENCRYPTION = 57607
const ENGINE = 57608
const MAX_ROWS = 57609
const MIN_ROWS = 57610
const PACK_KEYS = 57611
const ROW_FORMAT = 57612
const STATS_AUTO_RECALC = 57613
const STATS_PERSISTENT = 57614
const STATS_SAMPLE_PAGES = 57615
const DYNAMIC = 57616
const COMPRESSED = 57617
const REDUNDANT = 57618
const COMPACT = 57619
const FIXED = 57620
const COLUMN_FORMAT = 57621
const AUTO_RANDOM = 57622
const ENGINE_ATTRIBUTE = 57623
const SECONDARY_ENGINE_ATTRIBUTE = 57624
const INSERT_METHOD = 57625
const RESTRICT = 57626
const CASCADE = 57627
const ACTION = 57628
const PARTIAL = 57629
const SIMPLE = 57630
const CHECK = 57631
const ENFORCED = 57632
const RANGE = 57633
const LIST = 57634
const ALGORITHM = 57635
const LINEAR = 57636
const PARTITIONS = 57637
const SUBPARTITION = 57638
const SUBPARTITIONS = 57639
const CLUSTER = 57640
const TYPE = 57641
const ANY = 57642
const SOME = 57643
const EXTERNAL = 57644
const LOCALFILE = 57645
const URL = 57646
const PREPARE = 57647
const DEALLOCATE = 57648
const RESET = 57649
const EXTENSION = 57650
const RETENTION = 57651
const PERIOD = 57652
const INCREMENT = 57653
const CYCLE = 57654
const MINVALUE = 57655
const PUBLICATION = 57656
const SUBSCRIPTIONS = 57657
const PUBLICATIONS = 57658
const PROPERTIES = 57659
const PARSER = 57660
const VISIBLE = 57661
const INVISIBLE = 57662
const BTREE = 57663
const HASH = 57664
const RTREE = 57665
const BSI = 57666
const IVFFLAT = 57667
const MASTER = 57668
const ZONEMAP = 57669
const LEADING = 57670
const BOTH = 57671
const TRAILING = 57672
const UNKNOWN = 57673
const LISTS = 57674
const OP_TYPE = 57675
const REINDEX = 57676
const EXPIRE = 57677
const ACCOUNT = 57678
const ACCOUNTS = 57679
const UNLOCK = 57680
const DAY = 57681
const NEVER = 57682
const PUMP = 57683
const MYSQL_COMPATIBILITY_MODE = 57684
const UNIQUE_CHECK_ON_AUTOINCR = 57685
const MODIFY = 57686
const CHANGE = 57687
const SECOND = 57688
const ASCII = 57689
const COALESCE = 57690
const COLLATION = 57691
const HOUR = 57692
const MICROSECOND = 57693
const MINUTE = 57694
const MONTH = 57695
const QUARTER = 57696
const REPEAT = 57697
const REVERSE = 57698
const ROW_COUNT = 57699
const WEEK = 57700
const REVOKE = 57701
const FUNCTION = 57702
const PRIVILEGES = 57703
const TABLESPACE = 57704
const EXECUTE = 57705
const SUPER = 57706
const GRANT = 57707
const OPTION = 57708
const REFERENCES = 57709
const REPLICATION = 57710
const SLAVE = 57711
const CLIENT = 57712
const USAGE = 57713
const RELOAD = 57714
const FILE = 57715
const TEMPORARY = 57716
const ROUTINE = 57717
const EVENT = 57718
const SHUTDOWN = 57719
const NULLX = 57720
const AUTO_INCREMENT = 57721
const APPROXNUM = 57722
const SIGNED = 57723
const UNSIGNED = 57724
const ZEROFILL = 57725
const ENGINES = 57726
const LOW_CARDINALITY = 57727
const AUTOEXTEND_SIZE = 57728
const ADMIN_NAME = 57729
const RANDOM = 57730
const SUSPEND = 57731
const ATTRIBUTE = 57732
const HISTORY = 57733
const REUSE = 57734
const CURRENT = 57735
const OPTIONAL = 57736
const FAILED_LOGIN_ATTEMPTS = 57737
const PASSWORD_LOCK_TIME = 57738
const UNBOUNDED = 57739
const SECONDARY = 57740
const RESTRICTED = 57741
const USER = 57742
const IDENTIFIED = 57743
const CIPHER = 57744
const ISSUER = 57745
const X509 = 57746
const SUBJECT = 57747
const SAN = 57748
const REQUIRE = 57749
const SSL = 57750
const NONE = 57751
const PASSWORD = 57752
const SHARED = 57753
const EXCLUSIVE = 57754
const MAX_QUERIES_PER_HOUR = 57755
const MAX_UPDATES_PER_HOUR = 57756
const MAX_CONNECTIONS_PER_HOUR = 57757
const MAX_USER_CONNECTIONS = 57758
const FORMAT = 57759
const VERBOSE = 57760
const CONNECTION = 57761
const TRIGGERS = 57762
const PROFILES = 57763
const LOAD = 57764
const INLINE = 57765
const INFILE = 57766
const TERMINATED = 57767
const OPTIONALLY = 57768
const ENCLOSED = 57769
const ESCAPED = 57770
const STARTING = 57771
const LINES = 57772
const ROWS = 57773
const IMPORT = 57774
const DISCARD = 57775
const JSONTYPE = 57776
const MODUMP = 57777
const OVER = 57778
const PRECEDING = 57779
const FOLLOWING = 57780
const GROUPS = 57781
const DATABASES = 57782
const TABLES = 57783
const SEQUENCES = 57784
const EXTENDED = 57785
const FULL = 57786
const PROCESSLIST = 57787
const FIELDS = 57788
const COLUMNS = 57789
const OPEN = 57790
const ERRORS = 57791
const WARNINGS = 57792
const INDEXES = 57793
const SCHEMAS = 57794
const NODE = 57795
const LOCKS = 57796
const ROLES = 57797
const TABLE_NUMBER = 57798
const COLUMN_NUMBER = 57799
const TABLE_VALUES = 57800
const TABLE_SIZE = 57801
const NAMES = 57802
const GLOBAL = 57803
const PERSIST = 57804
const SESSION = 57805
const ISOLATION = 57806
const LEVEL = 57807
const READ = 57808
const WRITE = 57809
const ONLY = 57810
const REPEATABLE = 57811
const COMMITTED = 57812
const UNCOMMITTED = 57813
const SERIALIZABLE = 57814
const LOCAL = 57815
const EVENTS = 57816
const PLUGINS = 57817
const CURRENT_TIMESTAMP = 57818
const DATABASE = 57819
const CURRENT_TIME = 57820
const LOCALTIME = 57821
const LOCALTIMESTAMP = 57822
const UTC_DATE = 57823
const UTC_TIME = 57824
const UTC_TIMESTAMP = 57825
const REPLACE = 57826
const CONVERT = 57827
const SEPARATOR = 57828
const TIMESTAMPDIFF = 57829
const CURRENT_DATE = 57830
const CURRENT_USER = 57831
const CURRENT_ROLE = 57832
const SECOND_MICROSECOND = 57833
const MINUTE_MICROSECOND = 57834
const MINUTE_SECOND = 57835
const HOUR_MICROSECOND = 57836
const HOUR_SECOND = 57837
const HOUR_MINUTE = 57838
const DAY_MICROSECOND = 57839
const DAY_SECOND = 57840
const DAY_MINUTE = 57841
const DAY_HOUR = 57842
const YEAR_MONTH = 57843
const SQL_TSI_HOUR = 57844
const SQL_TSI_DAY = 57845
const SQL_TSI_WEEK = 57846
const SQL_TSI_MONTH = 57847
const SQL_TSI_QUARTER = 57848
const SQL_TSI_YEAR = 57849
const SQL_TSI_SECOND = 57850
const SQL_TSI_MINUTE = 57851
const RECURSIVE = 57852
const CONFIG = 57853
const DRAINER = 57854
const SOURCE = 57855
const STREAM = 57856
const HEADERS = 57857
const CONNECTOR = 57858
const CONNECTORS = 57859
const DAEMON = 57860
const PAUSE = 57861
const CANCEL = 57862
const TASK = 57863
const RESUME = 57864
const MATCH = 57865
const AGAINST = 57866
const BOOLEAN = 57867
const LANGUAGE = 57868
const WITH = 57869
const QUERY = 57870
const EXPANSION = 57871
const WITHOUT = 57872
const VALIDATION = 57873
const UPGRADE = 57874
const RETRY = 57875
const ADDDATE = 57876
const BIT_AND = 57877
const BIT_OR = 57878
const BIT_XOR = 57879
const CAST = 57880
const COUNT = 57881
const APPROX_COUNT = 57882
const APPROX_COUNT_DISTINCT = 57883
const SERIAL_EXTRACT = 57884
const APPROX_PERCENTILE = 57885
const CURDATE = 57886
const CURTIME = 57887
const DATE_ADD = 57888
const DATE_SUB = 57889
const EXTRACT = 57890
const GROUP_CONCAT = 57891
const MAX = 57892
const MID = 57893
const MIN = 57894
const NOW = 57895
const POSITION = 57896
const SESSION_USER = 57897
const STD = 57898
const STDDEV = 57899
const MEDIAN = 57900
const CLUSTER_CENTERS = 57901
const KMEANS = 57902
const STDDEV_POP = 57903
const STDDEV_SAMP = 57904
const SUBDATE = 57905
const SUBSTR = 57906
const SUBSTRING = 57907
const SUM = 57908
const SYSDATE = 57909
const SYSTEM_USER = 57910
const TRANSLATE = 57911
const TRIM = 57912
const VARIANCE = 57913
const VAR_POP = 57914
const VAR_SAMP = 57915
const AVG = 57916
const RANK = 57917
const ROW_NUMBER = 57918
const DENSE_RANK = 57919
const BIT_CAST = 57920
const BITMAP_BIT_POSITION = 57921
const BITMAP_BUCKET_NUMBER = 57922
const BITMAP_COUNT = 57923
const BITMAP_CONSTRUCT_AGG = 57924
const BITMAP_OR_AGG = 57925
const NEXTVAL = 57926
const SETVAL = 57927
const CURRVAL = 57928
const LASTVAL = 57929
const ARROW = 57930
const ROW = 57931
const OUTFILE = 57932
const HEADER = 57933
const MAX_FILE_SIZE = 57934
const FORCE_QUOTE = 57935
const PARALLEL = 57936
const STRICT = 57937
const UNUSED = 57938
const BINDINGS = 57939
const DO = 57940
const DECLARE = 57941
const LOOP = 57942
const WHILE = 57943
const LEAVE = 57944
const ITERATE = 57945
const UNTIL = 57946
const CALL = 57947
const PREV = 57948
const SLIDING = 57949
const FILL = 57950
const SPBEGIN = 57951
const BACKEND = 57952
const SERVERS = 57953
const HANDLER = 57954
const PERCENT = 57955
const SAMPLE = 57956
const MO_TS = 57957
const PITR = 57958
const CDC = 57959
const ROLLUP = 57960
const KILL = 57961
const BACKUP = 57962
const FILESYSTEM = 57963
const PARALLELISM = 57964
const RESTORE = 57965
const QUERY_RESULT = 57966

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"ROLLUP",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12521

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 134,
	11, 778,
	22, 778,
	-2, 771,
	-1, 157,
	240, 1189,
	242, 1088,
	-2, 1135,
	-1, 184,
	43, 601,
	242, 601,
	269, 608,
	270, 608,
	468, 601,
	-2, 636,
	-1, 224,
	645, 1955,
	-2, 511,
	-1, 526,
	645, 2075,
	-2, 392,
	-1, 584,
	645, 2134,
	-2, 390,
	-1, 585,
	645, 2135,
	-2, 391,
	-1, 586,
	645, 2136,
	-2, 393,
	-1, 720,
	321, 176,
	440, 176,
	441, 176,
	-2, 1860,
	-1, 787,
	83, 1646,
	-2, 2011,
	-1, 788,
	83, 1664,
	-2, 1982,
	-1, 792,
	83, 1665,
	-2, 2010,
	-1, 825,
	83, 1573,
	-2, 2209,
	-1, 826,
	83, 1574,
	-2, 2208,
	-1, 827,
	83, 1575,
	-2, 2198,
	-1, 828,
	83, 2170,
	-2, 2191,
	-1, 829,
	83, 2171,
	-2, 2192,
	-1, 830,
	83, 2172,
	-2, 2200,
	-1, 831,
	83, 2173,
	-2, 2180,
	-1, 832,
	83, 2174,
	-2, 2189,
	-1, 833,
	83, 2175,
	-2, 2201,
	-1, 834,
	83, 2176,
	-2, 2202,
	-1, 835,
	83, 2177,
	-2, 2207,
	-1, 836,
	83, 2178,
	-2, 2212,
	-1, 837,
	83, 2179,
	-2, 2213,
	-1, 838,
	83, 1642,
	-2, 2049,
	-1, 839,
	83, 1643,
	-2, 1844,
	-1, 840,
	83, 1644,
	-2, 2058,
	-1, 841,
	83, 1645,
	-2, 1853,
	-1, 843,
	83, 1648,
	-2, 1861,
	-1, 844,
	83, 1649,
	-2, 2082,
	-1, 846,
	83, 1652,
	-2, 1880,
	-1, 848,
	83, 1654,
	-2, 2094,
	-1, 849,
	83, 1655,
	-2, 2093,
	-1, 850,
	83, 1656,
	-2, 1924,
	-1, 851,
	83, 1657,
	-2, 2006,
	-1, 854,
	83, 1660,
	-2, 2105,
	-1, 856,
	83, 1662,
	-2, 2108,
	-1, 857,
	83, 1663,
	-2, 2110,
	-1, 858,
	83, 1666,
	-2, 2118,
	-1, 859,
	83, 1667,
	-2, 1991,
	-1, 860,
	83, 1668,
	-2, 2036,
	-1, 861,
	83, 1669,
	-2, 2001,
	-1, 862,
	83, 1670,
	-2, 2026,
	-1, 873,
	83, 1551,
	-2, 2203,
	-1, 874,
	83, 1552,
	-2, 2204,
	-1, 875,
	83, 1553,
	-2, 2205,
	-1, 974,
	463, 636,
	464, 636,
	-2, 602,
	-1, 1024,
	125, 1844,
	136, 1844,
	156, 1844,
	-2, 1818,
	-1, 1141,
	22, 805,
	-2, 754,
	-1, 1247,
	11, 778,
	22, 778,
	-2, 1429,
	-1, 1330,
	22, 805,
	-2, 754,
	-1, 1676,
	83, 1717,
	-2, 2008,
	-1, 1677,
	83, 1718,
	-2, 2009,
	-1, 1850,
	84, 960,
	-2, 966,
	-1, 2301,
	108, 1127,
	152, 1127,
	191, 1127,
	194, 1127,
	282, 1127,
	-2, 1120,
	-1, 2457,
	11, 778,
	22, 778,
	-2, 901,
	-1, 2490,
	84, 1804,
	157, 1804,
	-2, 1993,
	-1, 2491,
	84, 1804,
	157, 1804,
	-2, 1992,
	-1, 2492,
	84, 1780,
	157, 1780,
	-2, 1979,
	-1, 2493,
	84, 1781,
	157, 1781,
	-2, 1984,
	-1, 2494,
	84, 1782,
	157, 1782,
	-2, 1912,
	-1, 2495,
	84, 1783,
	157, 1783,
	-2, 1906,
	-1, 2496,
	84, 1784,
	157, 1784,
	-2, 1834,
	-1, 2497,
	84, 1785,
	157, 1785,
	-2, 1981,
	-1, 2498,
	84, 1786,
	157, 1786,
	-2, 1910,
	-1, 2499,
	84, 1787,
	157, 1787,
	-2, 1905,
	-1, 2500,
	84, 1788,
	157, 1788,
	-2, 1894,
	-1, 2501,
	84, 1804,
	157, 1804,
	-2, 1895,
	-1, 2502,
	84, 1804,
	157, 1804,
	-2, 1896,
	-1, 2504,
	84, 1793,
	157, 1793,
	-2, 2026,
	-1, 2505,
	84, 1770,
	157, 1770,
	-2, 2011,
	-1, 2506,
	84, 1802,
	157, 1802,
	-2, 1982,
	-1, 2507,
	84, 1802,
	157, 1802,
	-2, 2010,
	-1, 2508,
	84, 1802,
	157, 1802,
	-2, 1862,
	-1, 2509,
	84, 1800,
	157, 1800,
	-2, 2001,
	-1, 2510,
	84, 1797,
	157, 1797,
	-2, 1885,
	-1, 2511,
	83, 1751,
	84, 1751,
	157, 1751,
	398, 1751,
	399, 1751,
	400, 1751,
	-2, 1833,
	-1, 2512,
	83, 1752,
	84, 1752,
	157, 1752,
	398, 1752,
	399, 1752,
	400, 1752,
	-2, 1835,
	-1, 2513,
	83, 1753,
	84, 1753,
	157, 1753,
	398, 1753,
	399, 1753,
	400, 1753,
	-2, 2054,
	-1, 2514,
	83, 1755,
	84, 1755,
	157, 1755,
	398, 1755,
	399, 1755,
	400, 1755,
	-2, 1983,
	-1, 2515,
	83, 1757,
	84, 1757,
	157, 1757,
	398, 1757,
	399, 1757,
	400, 1757,
	-2, 1964,
	-1, 2516,
	83, 1759,
	84, 1759,
	157, 1759,
	398, 1759,
	399, 1759,
	400, 1759,
	-2, 1911,
	-1, 2517,
	83, 1761,
	84, 1761,
	157, 1761,
	398, 1761,
	399, 1761,
	400, 1761,
	-2, 1890,
	-1, 2518,
	83, 1762,
	84, 1762,
	157, 1762,
	398, 1762,
	399, 1762,
	400, 1762,
	-2, 1891,
	-1, 2519,
	83, 1764,
	84, 1764,
	157, 1764,
	398, 1764,
	399, 1764,
	400, 1764,
	-2, 1832,
	-1, 2520,
	84, 1807,
	157, 1807,
	398, 1807,
	399, 1807,
	400, 1807,
	-2, 1867,
	-1, 2521,
	84, 1807,
	157, 1807,
	398, 1807,
	399, 1807,
	400, 1807,
	-2, 1881,
	-1, 2522,
	84, 1810,
	157, 1810,
	398, 1810,
	399, 1810,
	400, 1810,
	-2, 1863,
	-1, 2523,
	84, 1810,
	157, 1810,
	398, 1810,
	399, 1810,
	400, 1810,
	-2, 1927,
	-1, 2524,
	84, 1807,
	157, 1807,
	398, 1807,
	399, 1807,
	400, 1807,
	-2, 1948,
	-1, 2741,
	108, 1127,
	152, 1127,
	191, 1127,
	194, 1127,
	282, 1127,
	-2, 1121,
	-1, 2759,
	81, 698,
	157, 698,
	-2, 1305,
	-1, 3175,
	194, 1127,
	306, 1392,
	-2, 1364,
	-1, 3356,
	108, 1127,
	152, 1127,
	191, 1127,
	194, 1127,
	-2, 1245,
	-1, 3358,
	108, 1127,
	152, 1127,
	191, 1127,
	194, 1127,
	-2, 1245,
	-1, 3370,
	81, 698,
	157, 698,
	-2, 1305,
	-1, 3391,
	194, 1127,
	306, 1392,
	-2, 1365,
	-1, 3540,
	108, 1127,
	152, 1127,
	191, 1127,
	194, 1127,
	-2, 1246,
	-1, 3568,
	84, 1207,
	157, 1207,
	-2, 1127,
	-1, 3709,
	84, 1207,
	157, 1207,
	-2, 1127,
	-1, 3866,
	84, 1211,
	157, 1211,
	-2, 1127,
	-1, 3914,
	84, 1212,
	157, 1212,
	-2, 1127,
}

const yyPrivate = 57344

const yyLast = 51502

var yyAct = [...]int{
	754, 730, 3961, 756, 3934, 2789, 213, 3954, 3870, 1656,
	1936, 3376, 3472, 3772, 3877, 3876, 3869, 3709, 3161, 3826,
	3795, 739, 3194, 3753, 3266, 3596, 3687, 3405, 2783, 3744,
	3773, 3267, 3657, 1283, 3708, 1425, 3528, 2701, 732, 1652,
	784, 3626, 1023, 2786, 3678, 3338, 621, 3476, 1716, 3754,
	1431, 3756, 1883, 3467, 3343, 1492, 1142, 3170, 3549, 1703,
	639, 2762, 645, 645, 3392, 1659, 2348, 728, 645, 662,
	671, 1136, 3537, 671, 3132, 3118, 3092, 3121, 3510, 3264,
	2898, 3359, 2899, 2878, 2031, 3542, 2028, 3328, 1721, 2812,
	2045, 2897, 3172, 65, 3190, 2894, 3179, 3361, 2961, 2451,
	3308, 2143, 2614, 198, 2068, 1995, 2101, 3252, 2486, 2921,
	3232, 2730, 3099, 683, 3103, 3097, 1581, 3093, 2351, 3178,
	679, 2579, 1361, 1896, 3095, 1485, 3094, 3141, 2312, 3090,
	2742, 722, 133, 2256, 2255, 2280, 1718, 1569, 3067, 3008,
	1132, 2139, 2126, 2934, 2558, 36, 727, 2110, 2109, 2102,
	2540, 1813, 1558, 2074, 2944, 2488, 2452, 1565, 1570, 2024,
	947, 1573, 2439, 2719, 2714, 2814, 2434, 2138, 1394, 2794,
	2349, 1926, 6, 2754, 2311, 2301, 1434, 209, 8, 2003,
	1017, 1859, 1650, 2484, 37, 1717, 1401, 2173, 2140, 621,
	1080, 1998, 208, 7, 638, 731, 1501, 1532, 1470, 1465,
	2292, 1601, 2150, 721, 1895, 2344, 2651, 1655, 1710, 1641,
	1996, 1414, 740, 213, 1690, 213, 1155, 1071, 1072, 2108,
	1584, 2105, 1539, 2090, 645, 15, 620, 983, 676, 27,
	729, 2064, 1435, 1649, 1016, 1855, 1469, 2459, 1858, 946,
	2435, 644, 644, 1834, 654, 16, 877, 652, 723, 657,
	1523, 1397, 1722, 668, 1580, 1410, 1467, 685, 199, 686,
	14, 670, 108, 24, 33, 1426, 17, 23, 923, 10,
	1531, 929, 1284, 1328, 944, 682, 953, 879, 191, 880,
	969, 195, 2147, 3763, 3675, 2686, 1032, 2461, 1068, 2978,
	680, 2686, 2686, 3373, 666, 3148, 2977, 937, 667, 938,
	2157, 1215, 1216, 1217, 1214, 1215, 1216, 1217, 1214, 1215,
	1216, 1217, 1214, 2650, 663, 1137, 1067, 641, 1069, 3503,
	3346, 1138, 2602, 1826, 2543, 1029, 2541, 1546, 3259, 665,
	1064, 2546, 2544, 664, 674, 197, 918, 1542, 1031, 1063,
	640, 2254, 1347, 723, 650, 1064, 950, 951, 1064, 1003,
	932, 3734, 928, 899, 897, 2260, 3077, 993, 2264, 1827,
	1137, 1350, 3060, 1593, 3057, 3062, 3059, 3946, 1448, 1820,
	1062, 1343, 1544, 3465, 2957, 8, 2955, 1050, 2079, 3739,
	646, 2678, 2676, 3633, 1592, 3627, 1215, 1216, 1217, 1214,
	7, 1215, 1216, 1217, 1214, 3468, 3265, 2123, 1278, 3758,
	2104, 878, 3037, 652, 2096, 2389, 3967, 3752, 909, 196,
	61, 187, 158, 196, 61, 187, 158, 3694, 3943, 3641,
	196, 889, 1213, 2680, 2302, 3515, 196, 61, 187, 158,
	196, 61, 187, 158, 3902, 3852, 2596, 3482, 1356, 196,
	995, 196, 2748, 994, 3511, 196, 3360, 2303, 1579, 1051,
	196, 3750, 898, 896, 3662, 3806, 196, 196, 196, 3639,
	2632, 3695, 1177, 1588, 1838, 196, 61, 187, 158, 1027,
	1509, 1028, 1835, 1153, 1599, 1355, 1353, 1610, 2588, 192,
	934, 979, 927, 192, 2144, 899, 897, 132, 1033, 954,
	2746, 931, 930, 1585, 998, 996, 192, 997, 2980, 1357,
	192, 3035, 1622, 1369, 1596, 2969, 132, 681, 912, 192,
	1386, 192, 919, 2155, 1444, 1587, 956, 1445, 1829, 2892,
	192, 1045, 1040, 1035, 1039, 1043, 1598, 192, 192, 1150,
	890, 2296, 926, 2703, 894, 192, 2478, 1212, 1642, 3664,
	2749, 1646, 2465, 2927, 3061, 2464, 3058, 2479, 2466, 1048,
	1471, 936, 1473, 1038, 2007, 868, 925, 867, 869, 870,
	924, 871, 872, 2928, 2929, 1645, 911, 2008, 2009, 1840,
	1841, 2704, 917, 2559, 2716, 1192, 1432, 1433, 1193, 1910,
	992, 978, 976, 1430, 2717, 1004, 3492, 1429, 1432, 1433,
	3880, 3881, 3761, 3165, 915, 3849, 1422, 2243, 1658, 3163,
	1210, 1026, 1205, 975, 1046, 1447, 1195, 1000, 1025, 2041,
	3761, 3840, 3760, 1049, 3759, 949, 3845, 1545, 1543, 3760,
	3839, 3759, 3838, 3901, 3938, 3939, 955, 988, 1756, 3742,
	2681, 2962, 935, 2715, 3769, 1036, 2583, 1368, 1662, 3745,
	3746, 3747, 3748, 645, 645, 157, 1631, 194, 3828, 1185,
	984, 1647, 1187, 2025, 645, 1146, 3268, 3831, 916, 1047,
	3828, 2963, 1158, 2964, 3630, 2381, 3268, 184, 1147, 1158,
	2159, 1002, 2833, 671, 671, 1644, 645, 3281, 3854, 3855,
	1188, 2722, 2015, 1637, 3329, 2151, 985, 989, 1190, 2019,
	3114, 3850, 3851, 3112, 3520, 3336, 2424, 2998, 3104, 1037,
	2291, 1197, 3666, 3667, 1198, 935, 972, 2087, 970, 974,
	992, 3847, 2705, 2706, 971, 968, 967, 3417, 973, 958,
	959, 957, 960, 961, 962, 963, 3491, 990, 2996, 991,
	1552, 1551, 1200, 2593, 3493, 933, 1208, 1209, 1207, 1255,
	986, 987, 183, 717, 2387, 2679, 719, 3879, 1001, 3109,
	3110, 718, 1191, 1180, 1032, 3466, 1346, 1661, 1660, 2956,
	2427, 2428, 1181, 3312, 2884, 3111, 3108, 2426, 1446, 2156,
	3762, 3674, 3284, 2699, 922, 1074, 1044, 982, 3002, 2685,
	1138, 3671, 1138, 981, 2432, 3517, 1146, 1139, 1183, 1458,
	1370, 1145, 1643, 1029, 1172, 1420, 3432, 2481, 977, 2134,
	1186, 1189, 1138, 1202, 637, 3193, 1031, 3167, 3909, 3623,
	3142, 2700, 1041, 3429, 1196, 1042, 1203, 1204, 3119, 3191,
	3192, 2261, 644, 1135, 1287, 1828, 1182, 1032, 1594, 1194,
	3130, 1152, 892, 1144, 2979, 669, 3788, 3699, 2976, 669,
	3691, 2146, 2178, 668, 668, 1064, 3483, 1138, 1064, 2145,
	1249, 1064, 1064, 1201, 2158, 1168, 669, 1064, 3783, 1064,
	1160, 1159, 3693, 2039, 2040, 2145, 1029, 1160, 1159, 2755,
	893, 2145, 2880, 2419, 910, 908, 980, 673, 1199, 1031,
	3106, 672, 952, 948, 666, 666, 3853, 999, 667, 667,
	2542, 669, 2890, 2298, 1349, 1547, 1351, 62, 2162, 2164,
	2165, 62, 3422, 1184, 663, 663, 3068, 3774, 1149, 1151,
	3790, 3377, 1366, 639, 3796, 1052, 1034, 2788, 62, 665,
	665, 878, 1288, 664, 664, 1141, 3640, 3162, 1140, 1161,
	1028, 3120, 3384, 1326, 1165, 1166, 1331, 1169, 2784, 2785,
	159, 2788, 2677, 2354, 159, 2276, 947, 1409, 3516, 1632,
	193, 159, 1633, 62, 1256, 3661, 1171, 159, 3196, 2597,
	1134, 159, 3319, 3321, 3081, 1251, 1252, 1253, 1254, 3665,
	159, 2422, 159, 1432, 1433, 3768, 159, 3433, 1836, 1432,
	1433, 159, 3587, 2481, 937, 3973, 938, 159, 159, 159,
	3576, 2026, 2399, 3120, 2721, 1830, 159, 3700, 2398, 645,
	3692, 3479, 1460, 1163, 1428, 3115, 645, 3957, 2367, 621,
	621, 895, 3105, 2999, 2347, 2370, 2354, 2357, 3668, 621,
	621, 1421, 3582, 1496, 1496, 1407, 645, 993, 2420, 2421,
	3846, 3320, 1363, 1364, 2728, 3649, 3168, 3650, 1373, 1374,
	1375, 1376, 1377, 3649, 1379, 3650, 1481, 671, 1524, 639,
	1385, 2725, 2726, 3644, 1535, 1535, 1480, 2834, 724, 2835,
	2836, 1170, 1494, 1494, 3521, 213, 2724, 1424, 1423, 1299,
	1300, 3128, 2369, 1406, 621, 1405, 2016, 1638, 3797, 1498,
	3713, 2353, 3107, 2018, 1503, 3679, 2355, 1668, 1671, 1672,
	3171, 3652, 2734, 2737, 2738, 2739, 2735, 2736, 1669, 3652,
	3597, 3598, 3599, 3603, 3601, 3602, 3600, 1367, 3191, 3192,
	995, 1133, 3056, 994, 2390, 3362, 1246, 2368, 2347, 3463,
	2923, 2925, 3651, 1362, 681, 1459, 1577, 2939, 2940, 3825,
	3651, 1582, 1468, 3187, 1177, 3868, 3271, 3072, 1591, 1403,
	2356, 2589, 2163, 2364, 2470, 3958, 1490, 1491, 2385, 2358,
	3195, 1378, 2148, 1330, 2353, 2347, 2352, 2014, 2350, 2355,
	1993, 3322, 1332, 1620, 2691, 1832, 3223, 3001, 3188, 1384,
	2342, 1371, 1383, 1382, 1416, 1417, 993, 1496, 1455, 1496,
	1146, 1381, 1005, 2357, 3589, 1466, 1372, 675, 2831, 1475,
	1477, 2160, 2161, 1411, 1415, 1415, 1415, 1600, 3309, 1488,
	1489, 3129, 1400, 3010, 3009, 1502, 1391, 939, 2696, 1408,
	3712, 2271, 2270, 2356, 1844, 2269, 1418, 1553, 1411, 1411,
	1393, 1176, 2174, 1360, 1437, 1438, 1032, 1440, 1441, 2275,
	1442, 1358, 1359, 1032, 1556, 1843, 1559, 1560, 936, 3501,
	3578, 1449, 1450, 1525, 3577, 2862, 3074, 1496, 1561, 1562,
	2268, 1842, 1436, 900, 1548, 1439, 3583, 3584, 2411, 995,
	1567, 1568, 994, 901, 1146, 1720, 941, 942, 943, 1065,
	1066, 1479, 3550, 1402, 1070, 1590, 3974, 3955, 3956, 1769,
	1572, 2212, 2760, 1576, 2211, 1575, 1704, 1453, 1454, 2924,
	1456, 1457, 3147, 1461, 1462, 1463, 1678, 1679, 1680, 1681,
	1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1522, 1516,
	1504, 650, 1701, 1702, 3867, 2358, 1657, 1586, 3835, 1213,
	1654, 2449, 1402, 1537, 1597, 1536, 1511, 1512, 1513, 1514,
	1515, 1670, 1517, 1518, 1519, 1520, 1521, 668, 1615, 1616,
	1527, 1528, 1529, 1530, 2067, 1146, 3645, 3229, 2481, 1630,
	3646, 1831, 2363, 2294, 3645, 993, 2361, 1213, 3755, 1754,
	3225, 1778, 1811, 1635, 1847, 1848, 3272, 1673, 2761, 1524,
	3969, 3189, 1639, 1177, 1856, 1496, 1861, 1862, 666, 1864,
	1460, 645, 667, 2561, 1651, 3325, 645, 2692, 1833, 1496,
	1759, 1760, 1761, 947, 1628, 1006, 1884, 1640, 663, 2384,
	3283, 2248, 1609, 1775, 3981, 1496, 1776, 2588, 1603, 3963,
	1625, 1460, 2450, 665, 1814, 904, 662, 664, 1608, 2853,
	2854, 1611, 2761, 1789, 1790, 1624, 1768, 1629, 1627, 3952,
	1619, 1626, 3200, 1648, 1623, 1143, 1909, 1653, 995, 1618,
	3198, 994, 1810, 2153, 3916, 1916, 1916, 2450, 1460, 1175,
	1460, 1460, 3888, 1692, 645, 645, 2283, 1983, 1856, 1987,
	3882, 3229, 1496, 1990, 1991, 3864, 903, 3816, 2005, 2293,
	906, 905, 1143, 1699, 1700, 3066, 1055, 1060, 1061, 2284,
	2285, 1822, 3964, 621, 2065, 1496, 882, 883, 884, 885,
	1913, 1863, 1852, 1853, 1854, 2863, 2865, 2866, 2867, 2864,
	3791, 3064, 3917, 1865, 1867, 1868, 1869, 1870, 882, 883,
	884, 885, 645, 1856, 1496, 2450, 2050, 3917, 645, 645,
	645, 679, 679, 1751, 1752, 3889, 1755, 2942, 2060, 2061,
	2062, 2063, 1817, 2188, 1770, 2069, 1174, 1177, 3865, 2042,
	2188, 1938, 213, 2852, 3779, 213, 213, 1777, 213, 1779,
	1985, 1780, 1781, 1782, 1783, 2708, 1215, 1216, 1217, 1214,
	1866, 2682, 2578, 2566, 1507, 1871, 3732, 2144, 2006, 1918,
	2340, 1919, 2253, 2153, 1812, 2247, 2246, 2034, 2035, 2219,
	3731, 1213, 1860, 3726, 1886, 2135, 2354, 2357, 1769, 1769,
	2112, 1897, 3725, 1899, 1900, 2020, 1876, 1818, 2037, 1769,
	1769, 2011, 3033, 2013, 3724, 1901, 2128, 1906, 2052, 2053,
	2054, 1992, 1890, 1175, 2032, 2033, 1392, 3780, 1327, 1851,
	1707, 1908, 1482, 3723, 1911, 1912, 2027, 3965, 2049, 1887,
	1888, 1902, 1881, 1922, 1923, 887, 2122, 1884, 1411, 3733,
	1885, 1496, 2142, 1907, 3373, 2078, 2946, 1880, 2081, 2082,
	3703, 2084, 1415, 2316, 1920, 1921, 2188, 887, 1893, 1894,
	1898, 1892, 2763, 2114, 1415, 2188, 2591, 2590, 2327, 1860,
	1057, 1058, 1059, 2582, 2334, 1903, 1904, 2188, 2622, 3702,
	3677, 1032, 3438, 2207, 1032, 1915, 1917, 3386, 2192, 2136,
	3352, 2046, 1032, 1984, 3301, 1914, 2188, 2046, 2046, 2046,
	1989, 3297, 2133, 2118, 3208, 1994, 1124, 1120, 1121, 1122,
	1123, 2010, 2627, 2012, 2626, 2625, 2623, 2021, 2918, 2358,
	1029, 1651, 2657, 2153, 2353, 2347, 2352, 2649, 2350, 2355,
	2604, 1029, 2072, 1031, 2058, 2107, 2586, 1605, 1264, 2187,
	1215, 1216, 1217, 1214, 1031, 2574, 2107, 2048, 2047, 2055,
	2056, 2568, 2153, 2188, 2044, 2481, 1215, 1216, 1217, 1214,
	3387, 2075, 2563, 3353, 2555, 2171, 2172, 3302, 2073, 1215,
	1216, 1217, 1214, 2553, 3298, 1586, 3335, 3209, 2551, 2549,
	1162, 1130, 2624, 2356, 1218, 1230, 2184, 1032, 2092, 1125,
	2315, 2450, 1248, 2249, 2226, 1213, 3613, 668, 3143, 2225,
	1213, 1258, 2326, 1213, 3784, 2124, 2210, 2051, 3436, 2316,
	2167, 2113, 2201, 2200, 1246, 2186, 2199, 2189, 2564, 2121,
	2119, 2152, 1612, 2036, 2569, 3152, 1029, 1267, 2258, 2259,
	2132, 2262, 2993, 902, 2265, 2564, 3975, 2556, 666, 1031,
	1758, 1757, 667, 3942, 2382, 3764, 2554, 3551, 3785, 2137,
	722, 2550, 2550, 645, 645, 645, 2190, 2541, 663, 3365,
	1758, 1757, 2131, 2316, 3363, 3676, 2248, 1213, 645, 645,
	645, 645, 1213, 665, 1443, 3637, 3144, 664, 2130, 1213,
	1698, 2313, 3580, 1484, 3579, 1213, 1213, 2166, 2175, 1213,
	2188, 3552, 2319, 1460, 2153, 1613, 1695, 1697, 1694, 1412,
	1696, 2220, 2221, 3366, 2223, 3565, 1398, 1692, 3364, 2168,
	1399, 2230, 1233, 1234, 1235, 1236, 1237, 1230, 2180, 1460,
	3145, 3524, 3345, 2628, 2629, 3230, 2169, 2170, 3221, 3215,
	3210, 1784, 1785, 1786, 1787, 3123, 2376, 1791, 1792, 1793,
	1794, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 2887, 1795, 3257, 757, 767, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1230, 758, 1486, 759, 763, 766, 762,
	760, 761, 1788, 2886, 2732, 1398, 1487, 907, 2687, 1399,
	2601, 2383, 2567, 2331, 1483, 2472, 2117, 2333, 2116, 2335,
	2611, 2115, 1388, 645, 1916, 1387, 1148, 2535, 1711, 2076,
	2181, 2454, 2454, 2005, 2454, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1219, 2242, 2244, 2245, 1540, 1413, 2076, 764,
	2250, 1711, 2948, 621, 621, 1215, 1216, 1217, 1214, 1217,
	1214, 1146, 2287, 2288, 2289, 1846, 3260, 1496, 645, 3026,
	3837, 1214, 2336, 1215, 1216, 1217, 1214, 2304, 2305, 2306,
	2307, 765, 645, 2277, 2346, 3592, 2345, 3591, 1146, 2525,
	639, 2965, 2823, 2295, 2821, 2800, 1535, 2798, 2005, 1287,
	3571, 2530, 1266, 2532, 3525, 3526, 2476, 213, 3972, 2323,
	2321, 2322, 3518, 3948, 2329, 1265, 2670, 2330, 2671, 3947,
	2324, 2325, 2339, 3892, 3863, 1773, 1032, 2320, 2467, 3025,
	2468, 2456, 3333, 2460, 1215, 1216, 1217, 1214, 2458, 2731,
	1774, 3862, 1534, 1534, 3339, 2545, 2874, 2571, 2872, 2473,
	2474, 1215, 1216, 1217, 1214, 2332, 1215, 1216, 1217, 1214,
	3258, 3786, 2702, 3012, 2584, 1029, 2359, 2360, 2142, 2365,
	3519, 3971, 2483, 3728, 2870, 1496, 1415, 1496, 1031, 1496,
	1215, 1216, 1217, 1214, 1146, 3716, 2859, 3706, 2328, 2613,
	3334, 2203, 2603, 2580, 2581, 3696, 3628, 1288, 1215, 1216,
	1217, 1214, 1466, 2529, 2873, 3554, 2871, 2537, 3553, 3378,
	2536, 3367, 1215, 1216, 1217, 1214, 2594, 3332, 1496, 1146,
	2429, 1541, 2433, 2635, 2489, 3873, 3211, 3344, 1215, 1216,
	1217, 1214, 2869, 1475, 1477, 2462, 1540, 3113, 2642, 1215,
	1216, 1217, 1214, 1496, 2858, 2989, 2960, 1502, 3497, 2959,
	2857, 2856, 1215, 1216, 1217, 1214, 2855, 1494, 2202, 2847,
	2841, 2046, 2840, 3098, 2477, 2839, 2838, 1215, 1216, 1217,
	1214, 2683, 2557, 2630, 2480, 1215, 1216, 1217, 1214, 2469,
	2252, 2527, 1494, 2641, 2526, 1215, 1216, 1217, 1214, 2095,
	2534, 2689, 2690, 2528, 2094, 2693, 2093, 2089, 2643, 2088,
	2043, 3485, 1663, 1664, 1665, 1666, 1667, 2646, 2647, 3484,
	1839, 1837, 2644, 1146, 1606, 1345, 1128, 1146, 2619, 3968,
	2598, 3669, 3670, 2600, 1496, 3966, 3473, 1460, 1215, 1216,
	1217, 1214, 717, 1987, 3940, 719, 1215, 1216, 1217, 1214,
	718, 2759, 2633, 3908, 1708, 3907, 2595, 2765, 1712, 1713,
	1714, 1715, 3904, 2609, 2576, 1478, 2587, 2592, 1753, 3843,
	3842, 2585, 3658, 2674, 3823, 2775, 1763, 3771, 3529, 2615,
	3749, 2615, 3740, 1127, 3720, 1146, 3715, 1215, 1216, 1217,
	1214, 3714, 1651, 2797, 3426, 3673, 3660, 2605, 2606, 3922,
	1146, 1146, 1146, 1916, 3659, 3629, 1146, 3573, 2807, 2808,
	2809, 2810, 1146, 2817, 2631, 2818, 2819, 2621, 2820, 3533,
	2822, 1215, 1216, 1217, 1214, 3289, 3522, 2743, 1815, 3504,
	3815, 2817, 3502, 3499, 2744, 3496, 3495, 3471, 1032, 3469,
	3446, 3029, 3443, 2454, 3440, 2608, 2790, 2879, 2776, 3331,
	3330, 3327, 1215, 1216, 1217, 1214, 3028, 2875, 3317, 2709,
	2729, 3803, 3310, 2489, 3294, 1457, 1938, 621, 1215, 1216,
	1217, 1214, 2766, 1987, 3292, 3287, 3218, 1146, 2005, 2005,
	2005, 2005, 3217, 1215, 1216, 1217, 1214, 3212, 3206, 3205,
	1146, 2005, 3124, 3085, 2454, 3084, 2711, 3080, 2713, 3078,
	2881, 1889, 2791, 3076, 3073, 2756, 769, 134, 3071, 2795,
	2710, 1496, 134, 2795, 2796, 2727, 3027, 2802, 2257, 3003,
	2750, 2792, 645, 645, 3000, 2758, 1905, 2764, 2958, 2747,
	2757, 2932, 8, 2668, 2778, 2868, 2792, 2803, 2804, 2860,
	2850, 1860, 2806, 1215, 1216, 1217, 1214, 7, 2813, 2774,
	2768, 2777, 2780, 2848, 2844, 2771, 2843, 2842, 2697, 2793,
	1215, 1216, 1217, 1214, 2799, 2667, 2695, 2688, 2684, 2805,
	2914, 2577, 651, 2666, 2272, 134, 2267, 2266, 213, 2652,
	2653, 824, 823, 213, 1815, 2658, 2263, 2665, 2098, 1815,
	1815, 2091, 1215, 1216, 1217, 1214, 2837, 1845, 1825, 2849,
	1215, 1216, 1217, 1214, 1824, 1769, 1607, 1769, 2664, 1510,
	2975, 1396, 2767, 2900, 1215, 1216, 1217, 1214, 1354, 2195,
	1352, 2772, 2773, 2988, 1295, 1291, 2900, 1290, 2882, 1496,
	1131, 891, 2995, 2888, 3799, 1215, 1216, 1217, 1214, 2077,
	3654, 196, 2080, 187, 158, 2083, 3653, 2885, 2085, 2388,
	2917, 2913, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 3642,
	2916, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408,
	2409, 2410, 2933, 2412, 2413, 2414, 2415, 2416, 2930, 2417,
	3638, 2949, 2915, 3498, 1560, 2943, 2953, 1814, 2901, 2902,
	2903, 2904, 2974, 3480, 1561, 1562, 3358, 1032, 3357, 1030,
	3356, 2936, 2937, 2127, 134, 1567, 1568, 3324, 1032, 3306,
	3304, 192, 2972, 1215, 1216, 1217, 1214, 3303, 3300, 134,
	1572, 134, 2982, 1576, 3299, 1575, 3293, 3291, 3273, 2947,
	2951, 3263, 2950, 3075, 3262, 3248, 2663, 2997, 3247, 3153,
	3088, 3079, 3063, 2992, 3031, 3082, 3083, 3022, 3014, 3013,
	3007, 2966, 2971, 1146, 2968, 2973, 2926, 2941, 2707, 3101,
	2983, 2985, 2984, 1215, 1216, 1217, 1214, 2552, 2548, 3117,
	2991, 2547, 2231, 2224, 645, 2218, 2217, 3004, 2216, 2215,
	2185, 2213, 2209, 2208, 2206, 2197, 3133, 1146, 2970, 3891,
	645, 2194, 1146, 1146, 3005, 2193, 3024, 3011, 2097, 2981,
	2662, 2005, 2313, 3017, 3151, 3019, 2177, 1808, 3020, 3021,
	2182, 3065, 1807, 1806, 1772, 3015, 3016, 1771, 2191, 1762,
	1508, 1506, 1285, 2376, 3018, 3798, 3127, 1215, 1216, 1217,
	1214, 3735, 3722, 3717, 3607, 3177, 3590, 3180, 196, 3180,
	3180, 3586, 3564, 3548, 1146, 1238, 1239, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1230, 2198, 1215, 1216, 1217, 1214,
	3070, 3456, 3201, 2205, 3069, 3454, 3424, 2743, 3423, 3420,
	1496, 1496, 3419, 3197, 3385, 3164, 3166, 3382, 3380, 3347,
	1032, 3023, 1032, 3155, 3086, 2222, 1555, 1032, 2183, 2792,
	2227, 2228, 2229, 1566, 1557, 2232, 2233, 2234, 2235, 2236,
	2237, 2238, 2239, 2240, 2241, 3087, 3149, 1571, 192, 1494,
	1494, 1574, 3126, 1032, 2661, 1563, 3135, 645, 1395, 1029,
	2876, 3138, 3139, 2792, 3101, 3202, 3203, 2660, 2792, 2792,
	3150, 3176, 1031, 1460, 2801, 3185, 1987, 1987, 3146, 2752,
	2751, 1215, 1216, 1217, 1214, 3159, 2346, 2745, 2345, 2712,
	2669, 2562, 2471, 3125, 1215, 1216, 1217, 1214, 3181, 3182,
	2418, 3186, 2659, 3183, 1215, 1216, 1217, 1214, 2314, 3137,
	2286, 2251, 1693, 3136, 192, 3199, 2057, 1850, 3140, 1821,
	2792, 1636, 1589, 1146, 1564, 1344, 1329, 2635, 3175, 1215,
	1216, 1217, 1214, 1325, 3154, 1324, 3261, 2718, 2656, 3156,
	3157, 1323, 3038, 3039, 3160, 1322, 1321, 3207, 3040, 3041,
	3042, 3043, 1320, 3044, 3045, 3046, 3047, 3048, 3049, 3050,
	3051, 3052, 3053, 1319, 1318, 1215, 1216, 1217, 1214, 3813,
	2655, 3226, 3227, 3920, 2654, 1317, 3214, 1316, 3213, 1315,
	1314, 3220, 645, 3219, 1313, 1312, 1311, 1310, 1309, 1308,
	1307, 3216, 1306, 1305, 3237, 1304, 3224, 1215, 1216, 1217,
	1214, 1215, 1216, 1217, 1214, 1303, 3158, 1302, 1301, 1298,
	3241, 1228, 1238, 1239, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1230, 3244, 3245, 3246, 1297, 1296, 1294, 1293, 2829,
	2830, 3250, 1292, 1289, 1282, 3256, 2046, 1281, 1279, 1278,
	1277, 1276, 1275, 1274, 2845, 2846, 1273, 3878, 2648, 1272,
	1815, 1271, 1815, 1270, 2069, 3314, 3274, 3236, 3316, 2489,
	2638, 1269, 1268, 3276, 1263, 3228, 1262, 3275, 1261, 1260,
	2883, 1815, 1815, 1259, 3280, 1215, 1216, 1217, 1214, 1179,
	1129, 3240, 3707, 3811, 3279, 3233, 3234, 1215, 1216, 1217,
	1214, 3295, 3809, 3421, 2318, 3285, 2300, 1167, 2733, 3318,
	645, 1987, 2482, 2100, 1534, 134, 134, 1030, 1178, 3239,
	3238, 3351, 1229, 1228, 1238, 1239, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1230, 2907, 2910, 3458, 2454, 2005, 3370,
	2911, 2214, 2906, 2905, 3459, 3307, 1229, 1228, 1238, 1239,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1230, 2615, 118,
	3311, 64, 3388, 63, 2570, 1146, 2573, 2908, 3313, 2634,
	3836, 3282, 2909, 1032, 3177, 3751, 3569, 2575, 1146, 2565,
	1032, 2610, 2912, 1389, 2446, 2447, 1878, 1879, 3122, 1146,
	1247, 3435, 3173, 3457, 3174, 1496, 1215, 1216, 1217, 1214,
	3340, 3277, 3278, 3372, 2987, 2386, 3342, 3431, 1215, 1216,
	1217, 1214, 1706, 3251, 645, 1976, 1987, 1873, 1874, 1875,
	1146, 3379, 1549, 3381, 2560, 647, 2599, 648, 1602, 649,
	2612, 1583, 3418, 2618, 1494, 2273, 3368, 2580, 2581, 1215,
	1216, 1217, 1214, 3369, 2636, 2637, 2059, 3375, 2825, 213,
	3437, 3411, 2639, 2640, 1173, 2826, 2827, 2828, 3447, 3096,
	3089, 2779, 1146, 2753, 3323, 2338, 2309, 1882, 2645, 3427,
	3425, 3326, 1849, 3430, 3931, 3450, 1758, 1757, 3434, 3719,
	3460, 3204, 2430, 3439, 1340, 1341, 1338, 1339, 3445, 2046,
	3441, 2425, 3442, 3444, 1336, 1337, 1663, 1815, 1334, 1335,
	1988, 3389, 3451, 3500, 3448, 3452, 1452, 3449, 1451, 1206,
	3243, 2935, 3507, 2274, 3428, 3478, 1146, 2441, 2445, 2446,
	2447, 2442, 2129, 2443, 2448, 2813, 3371, 2444, 1404, 1380,
	1427, 3898, 3896, 3856, 3833, 3374, 3832, 1333, 1146, 1496,
	1496, 3830, 3474, 3775, 3133, 3736, 3475, 3505, 3506, 3621,
	3620, 3559, 3464, 3470, 3296, 3270, 2900, 3541, 3269, 3541,
	3254, 3462, 2371, 2341, 1604, 3253, 2945, 1402, 3924, 3923,
	3923, 1146, 3558, 1146, 3315, 2769, 2770, 2990, 1494, 1704,
	3561, 2694, 3563, 3535, 3536, 2302, 3530, 2196, 1348, 1164,
	1496, 3924, 3513, 2046, 3531, 3514, 3512, 3588, 2900, 3532,
	3249, 1143, 1419, 3494, 200, 3, 3523, 72, 645, 2,
	1146, 1146, 3944, 3545, 1146, 1146, 3945, 1, 3534, 2675,
	1819, 3546, 3372, 1342, 3557, 882, 883, 884, 885, 1704,
	1143, 886, 2114, 881, 2436, 3567, 1472, 2463, 3604, 3609,
	1032, 2038, 1500, 3566, 1823, 1884, 3570, 3618, 3418, 3574,
	888, 2919, 2792, 3572, 2920, 3242, 3624, 3625, 3594, 3595,
	2922, 2698, 3605, 3606, 2149, 2889, 2423, 3411, 3509, 1496,
	1742, 2441, 2445, 2446, 2447, 2442, 3615, 2443, 2448, 2290,
	3116, 2444, 1390, 940, 1764, 1505, 1617, 3610, 1054, 651,
	3614, 1157, 3655, 1614, 1156, 1154, 1709, 3616, 771, 2103,
	2877, 2851, 3648, 3617, 3930, 3960, 3890, 1657, 1494, 1657,
	3933, 1634, 755, 3824, 3741, 3894, 3743, 3634, 3635, 3631,
	2154, 134, 1211, 2967, 3636, 965, 812, 782, 1280, 1595,
	3643, 3538, 3647, 3036, 947, 3034, 1056, 781, 3337, 3688,
	2723, 3682, 3622, 2938, 3690, 3555, 3556, 1053, 966, 2086,
	3738, 3632, 1550, 1554, 2337, 1146, 3698, 3794, 3568, 3672,
	3169, 2787, 1578, 3789, 3705, 3383, 3490, 3488, 3489, 3711,
	687, 2017, 619, 1014, 3608, 3683, 2099, 688, 3478, 2317,
	3848, 3685, 3721, 3684, 920, 2299, 921, 3593, 913, 134,
	2952, 2741, 2954, 3701, 2740, 3486, 134, 3487, 1146, 1674,
	1220, 1691, 3697, 1496, 3054, 3055, 1257, 726, 2179, 134,
	3562, 1815, 2720, 3406, 2931, 71, 1815, 70, 69, 3718,
	68, 134, 221, 1032, 773, 220, 3656, 2127, 3527, 3820,
	3935, 752, 751, 750, 749, 748, 1738, 747, 2440, 2438,
	2437, 2000, 1494, 1735, 1999, 2066, 3727, 1737, 1734, 1736,
	1740, 1741, 3131, 3767, 2816, 1739, 3757, 2811, 3729, 1927,
	1925, 1464, 3006, 3737, 1229, 1228, 1238, 1239, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1230, 2366, 2373, 1924, 3875,
	3286, 3481, 3776, 3804, 3805, 3585, 2861, 3477, 1872, 3765,
	3030, 1657, 3560, 2362, 1944, 2832, 1941, 1940, 2824, 3581,
	3575, 1972, 3770, 3686, 3540, 3390, 3778, 3391, 3397, 2308,
	3793, 1079, 1075, 1146, 3680, 1077, 1078, 1076, 2620, 3222,
	2343, 1496, 3091, 3787, 3818, 2282, 3821, 3808, 3810, 3812,
	3814, 2281, 2279, 2278, 3792, 1365, 3766, 3844, 3508, 3822,
	2487, 2485, 3801, 1126, 3235, 3231, 1229, 1228, 1238, 1239,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1230, 2111, 2125,
	1494, 3807, 2986, 3829, 3827, 2001, 1997, 2891, 1496, 2431,
	3663, 3688, 1877, 914, 2297, 41, 3817, 115, 105, 175,
	56, 174, 55, 3348, 3349, 3350, 3841, 3866, 113, 3354,
	3355, 172, 54, 3874, 3857, 100, 99, 3859, 3032, 1745,
	1746, 1747, 1748, 1749, 1750, 1743, 1744, 1494, 112, 170,
	3860, 3861, 53, 205, 204, 207, 206, 203, 2538, 2539,
	202, 1538, 201, 3858, 3834, 3883, 3544, 3884, 876, 3885,
	44, 3886, 43, 3897, 3887, 3899, 3900, 3895, 176, 42,
	106, 3893, 57, 40, 39, 38, 34, 1146, 13, 3757,
	3184, 3903, 1229, 1228, 1238, 1239, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1230, 12, 35, 3912, 3711, 22, 21,
	1621, 20, 26, 32, 3914, 3915, 3913, 31, 127, 126,
	3929, 3919, 3937, 3921, 30, 3936, 3918, 3925, 3926, 3927,
	3928, 125, 124, 123, 122, 121, 120, 29, 19, 48,
	3949, 3941, 1146, 47, 46, 9, 116, 111, 109, 28,
	110, 3950, 107, 103, 3951, 3793, 3953, 196, 61, 187,
	158, 101, 3959, 3962, 2004, 83, 82, 81, 96, 95,
	94, 93, 92, 91, 89, 188, 90, 964, 80, 1973,
	79, 78, 179, 77, 1934, 76, 189, 3970, 98, 104,
	102, 87, 97, 88, 86, 3937, 3977, 85, 3936, 3976,
	84, 196, 61, 187, 158, 132, 3962, 3978, 75, 74,
	73, 156, 3982, 155, 1976, 1943, 154, 153, 152, 188,
	119, 150, 151, 3910, 1977, 1978, 179, 192, 2607, 149,
	189, 148, 147, 146, 145, 144, 49, 50, 134, 51,
	52, 134, 134, 166, 134, 165, 167, 169, 171, 132,
	1942, 168, 1229, 1228, 1238, 1239, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1230, 119, 173, 1950, 163, 161, 164,
	162, 192, 160, 66, 11, 114, 18, 25, 1657, 4,
	0, 0, 0, 0, 1030, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 1030, 0, 0, 3395, 0,
	0, 0, 0, 0, 140, 141, 0, 142, 143, 134,
	0, 0, 0, 0, 0, 3288, 0, 0, 0, 0,
	0, 0, 3290, 0, 0, 0, 0, 0, 3611, 0,
	0, 0, 3612, 0, 1966, 0, 0, 3407, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 141,
	3398, 142, 143, 3305, 0, 0, 0, 0, 0, 0,
	0, 3393, 0, 0, 0, 0, 3415, 3416, 0, 0,
	0, 0, 3394, 0, 0, 0, 157, 185, 194, 186,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1247, 0, 0, 0, 0, 0, 0, 0, 184, 178,
	177, 0, 0, 0, 0, 67, 1933, 1935, 1932, 3399,
	1929, 0, 0, 0, 0, 1954, 0, 0, 0, 0,
	157, 185, 194, 186, 117, 0, 1960, 0, 0, 0,
	0, 0, 0, 0, 1945, 0, 1928, 0, 0, 0,
	0, 0, 184, 178, 177, 0, 1948, 1982, 0, 67,
	1949, 1951, 1953, 0, 1955, 1956, 1957, 1961, 1962, 1963,
	1965, 1968, 1969, 1970, 0, 0, 180, 181, 182, 0,
	0, 1958, 1967, 1959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1937, 1229, 1228, 1238, 1239, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1230, 0, 0, 0, 190,
	0, 0, 0, 0, 3414, 1815, 2352, 1974, 0, 3730,
	180, 181, 182, 0, 0, 0, 0, 0, 0, 1815,
	128, 0, 3453, 0, 183, 3455, 129, 0, 0, 0,
	0, 3403, 0, 0, 1930, 1931, 0, 0, 0, 0,
	0, 0, 3461, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 1971, 3400, 3404, 3402, 3401, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 183, 1947,
	129, 0, 0, 0, 0, 0, 1946, 0, 0, 3777,
	0, 0, 0, 130, 3781, 3782, 0, 0, 0, 0,
	0, 0, 0, 3409, 3410, 0, 60, 0, 0, 0,
	1964, 0, 0, 1973, 0, 0, 0, 0, 1934, 1952,
	0, 0, 0, 0, 0, 3802, 0, 0, 0, 0,
	0, 0, 1980, 1979, 0, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 2176, 0, 1976, 1943,
	60, 3417, 0, 0, 0, 62, 0, 0, 1977, 1978,
	0, 0, 0, 3396, 0, 0, 0, 0, 0, 3408,
	1229, 1228, 1238, 1239, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1230, 0, 0, 1942, 1939, 0, 0, 0, 0,
	138, 193, 1241, 139, 1245, 0, 0, 0, 159, 62,
	1950, 0, 0, 58, 0, 0, 0, 0, 0, 2457,
	1242, 1244, 1240, 0, 1243, 1229, 1228, 1238, 1239, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1230, 1975, 0, 0,
	1981, 0, 0, 0, 138, 193, 0, 139, 0, 0,
	0, 0, 159, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 3905, 3906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1966, 131,
	45, 0, 0, 0, 2004, 0, 59, 0, 0, 0,
	5, 0, 0, 134, 0, 0, 1098, 0, 0, 0,
	135, 136, 0, 0, 137, 0, 0, 0, 0, 3413,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 45, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 136, 0, 0, 137, 0,
	1933, 2782, 1932, 0, 2781, 0, 0, 0, 0, 1954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3412, 0, 0, 0, 0,
	1948, 1982, 0, 0, 1949, 1951, 1953, 0, 1955, 1956,
	1957, 1961, 1962, 1963, 1965, 1968, 1969, 1970, 0, 0,
	0, 0, 0, 0, 0, 1958, 1967, 1959, 1083, 0,
	0, 0, 1073, 0, 0, 0, 1098, 1937, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 1110,
	1112, 1114, 1116, 1117, 1119, 0, 1124, 1120, 1121, 1122,
	1123, 1974, 1101, 1102, 1103, 1104, 1081, 1082, 1107, 0,
	1084, 1267, 1086, 1087, 1088, 1089, 1085, 1090, 1091, 1092,
	1093, 1094, 1097, 1099, 1095, 1096, 1105, 0, 1930, 1931,
	0, 0, 0, 0, 1109, 1111, 1113, 1115, 1118, 0,
	0, 0, 0, 0, 0, 0, 1971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1947, 0, 0, 0, 0, 0, 0,
	1946, 134, 1100, 0, 0, 0, 3800, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 1964, 0, 0, 0, 1083, 0,
	0, 0, 0, 1952, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1980, 1979, 1106, 1110,
	1112, 1114, 1116, 1117, 1119, 0, 1124, 1120, 1121, 1122,
	1123, 0, 1101, 1102, 1103, 1104, 1081, 1082, 1107, 0,
	1084, 1742, 1086, 1087, 1088, 1089, 1085, 1090, 1091, 1092,
	1093, 1094, 1097, 1099, 1095, 1096, 1105, 3871, 0, 0,
	0, 0, 0, 0, 1109, 1111, 1113, 1115, 1118, 1939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 2004, 2004, 2004, 2004, 0, 0,
	0, 1975, 1083, 0, 1981, 0, 0, 2004, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3871, 0, 0,
	0, 0, 1106, 1110, 1112, 1114, 1116, 1117, 1119, 0,
	1124, 1120, 1121, 1122, 1123, 0, 1101, 1102, 1103, 1104,
	1081, 1082, 1107, 0, 1084, 0, 1086, 1087, 1088, 1089,
	1085, 1090, 1091, 1092, 1093, 1094, 1097, 1099, 1095, 1096,
	1105, 0, 0, 0, 0, 0, 3871, 0, 1109, 1111,
	1113, 1115, 1118, 699, 698, 705, 695, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 0, 704, 708,
	0, 0, 689, 0, 134, 0, 0, 1738, 0, 134,
	0, 0, 713, 0, 1735, 0, 1100, 0, 1737, 1734,
	1736, 1740, 1741, 0, 0, 0, 1739, 0, 0, 0,
	134, 0, 0, 0, 3980, 0, 699, 698, 705, 695,
	0, 134, 0, 2616, 2617, 0, 1973, 0, 702, 703,
	0, 704, 708, 196, 0, 689, 717, 1108, 0, 719,
	0, 0, 0, 0, 718, 713, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3539, 0, 0, 0, 0,
	0, 1976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 719, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 0, 192, 699, 698, 705, 695, 1215, 1216,
	1217, 1214, 0, 1950, 0, 0, 702, 703, 0, 704,
	708, 0, 0, 689, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 0, 0, 0, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1745, 1746, 1747, 1748, 1749, 1750, 1743, 1744, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1966, 690, 692, 691, 0, 0, 1742, 0, 0,
	0, 0, 697, 1030, 0, 134, 0, 0, 0, 0,
	134, 0, 0, 0, 701, 0, 0, 2004, 0, 0,
	0, 716, 0, 0, 0, 0, 0, 0, 694, 0,
	0, 0, 684, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 690, 692, 691, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	0, 0, 1954, 0, 716, 0, 0, 0, 0, 0,
	0, 694, 0, 1960, 0, 0, 0, 0, 0, 0,
	0, 1108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1948, 1982, 0, 0, 1949, 1951, 1953,
	0, 1955, 1956, 1957, 1961, 1962, 1963, 1965, 1968, 1969,
	1970, 0, 0, 0, 0, 0, 0, 0, 1958, 1967,
	1959, 0, 0, 690, 692, 691, 0, 0, 0, 0,
	696, 700, 706, 697, 707, 709, 0, 0, 710, 711,
	712, 0, 0, 714, 715, 701, 0, 0, 0, 0,
	0, 0, 716, 1738, 1974, 0, 0, 0, 0, 694,
	1735, 0, 0, 0, 1737, 1734, 1736, 1740, 1741, 0,
	0, 0, 1739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 696, 700, 706, 0, 707, 709, 0,
	0, 710, 711, 712, 0, 0, 714, 715, 0, 1971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1947, 0, 0, 0,
	0, 0, 0, 1946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1964, 0, 0,
	0, 0, 0, 0, 0, 0, 1952, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 696, 700, 706, 0, 707, 709, 0, 0, 710,
	711, 712, 0, 0, 714, 715, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 693,
	0, 0, 0, 0, 0, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1745, 1746, 1747, 1748,
	1749, 1750, 1743, 1744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3543, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 789, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 2004, 0, 0, 741, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 780, 546, 497, 415, 370, 564, 563, 0,
	0, 847, 855, 0, 0, 0, 0, 0, 0, 0,
	693, 0, 0, 0, 733, 0, 0, 770, 824, 823,
	757, 767, 0, 0, 299, 219, 492, 612, 494, 493,
	758, 0, 759, 763, 766, 762, 760, 761, 0, 839,
	0, 0, 0, 0, 0, 0, 725, 737, 0, 742,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 735, 134, 0, 0, 0, 790,
	0, 736, 0, 0, 785, 764, 768, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 765, 788, 792,
	320, 861, 786, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 862,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	783, 0, 609, 134, 448, 0, 0, 845, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 787, 0,
	406, 388, 858, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 1766, 1765, 1767, 460,
	354, 355, 0, 333, 281, 282, 628, 843, 384, 574,
	607, 608, 499, 0, 857, 838, 840, 841, 844, 848,
	849, 850, 851, 852, 854, 856, 860, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 859, 534,
	511, 537, 452, 514, 513, 0, 134, 548, 791, 549,
	550, 374, 375, 376, 377, 846, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 868, 842, 867, 869, 870, 866,
	871, 872, 853, 746, 0, 798, 864, 863, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 753, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 831, 805, 806, 807, 743, 808, 802, 803,
	744, 804, 832, 796, 828, 829, 772, 799, 809, 827,
	810, 830, 833, 834, 873, 874, 816, 800, 247, 875,
	813, 835, 826, 825, 811, 797, 836, 837, 779, 774,
	814, 815, 801, 819, 820, 821, 745, 793, 794, 795,
	817, 818, 775, 776, 777, 778, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 822, 617, 419, 0, 618, 789, 629, 495,
	496, 630, 606, 0, 738, 0, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 326, 1816, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 780, 546, 497, 415, 370, 564,
	563, 0, 0, 847, 855, 0, 0, 0, 0, 0,
	0, 0, 0, 2029, 0, 0, 733, 0, 0, 770,
	824, 823, 757, 767, 0, 0, 299, 219, 492, 612,
	494, 493, 758, 0, 759, 763, 766, 762, 760, 761,
	0, 839, 0, 0, 0, 0, 0, 0, 725, 737,
	0, 742, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 735, 0, 0, 0,
	0, 790, 0, 736, 0, 0, 2030, 764, 768, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 765,
	788, 792, 320, 861, 786, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 862, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 783, 0, 609, 0, 448, 0, 0, 845,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	787, 0, 406, 388, 858, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 843,
	384, 574, 607, 608, 499, 0, 857, 838, 840, 841,
	844, 848, 849, 850, 851, 852, 854, 856, 860, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	859, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	791, 549, 550, 374, 375, 376, 377, 846, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 868, 842, 867, 869,
	870, 866, 871, 872, 853, 746, 0, 798, 864, 863,
	865, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 753, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 831, 805, 806, 807, 743, 808,
	802, 803, 744, 804, 832, 796, 828, 829, 772, 799,
	809, 827, 810, 830, 833, 834, 873, 874, 816, 800,
	247, 875, 813, 835, 826, 825, 811, 797, 836, 837,
	779, 774, 814, 815, 801, 819, 820, 821, 745, 793,
	794, 795, 817, 818, 775, 776, 777, 778, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 822, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 0, 738, 196, 789, 0,
	0, 0, 0, 0, 0, 0, 0, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 1250, 546, 497, 415, 370,
	564, 563, 0, 0, 847, 855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	770, 824, 823, 757, 767, 0, 0, 299, 219, 492,
	612, 494, 493, 758, 0, 759, 763, 766, 762, 760,
	761, 0, 839, 0, 0, 0, 0, 0, 0, 725,
	737, 0, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 735, 0, 0,
	0, 0, 790, 0, 736, 0, 0, 785, 764, 768,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	765, 788, 792, 320, 861, 786, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 862, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 783, 0, 609, 0, 448, 0, 0,
	845, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 787, 0, 406, 388, 858, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	843, 384, 574, 607, 608, 499, 0, 857, 838, 840,
	841, 844, 848, 849, 850, 851, 852, 854, 856, 860,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 859, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 791, 549, 550, 374, 375, 376, 377, 846, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 868, 842, 867,
	869, 870, 866, 871, 872, 853, 746, 0, 798, 864,
	863, 865, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 753, 283, 505, 357, 159, 398,
	331, 570, 571, 0, 0, 831, 805, 806, 807, 743,
	808, 802, 803, 744, 804, 832, 796, 828, 829, 772,
	799, 809, 827, 810, 830, 833, 834, 873, 874, 816,
	800, 247, 875, 813, 835, 826, 825, 811, 797, 836,
	837, 779, 774, 814, 815, 801, 819, 820, 821, 745,
	793, 794, 795, 817, 818, 775, 776, 777, 778, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 822, 617, 419, 0, 618,
	789, 629, 495, 496, 630, 606, 0, 738, 0, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 326, 3979, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 780, 546, 497,
	415, 370, 564, 563, 0, 0, 847, 855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 770, 824, 823, 757, 767, 0, 0, 299,
	219, 492, 612, 494, 493, 758, 0, 759, 763, 766,
	762, 760, 761, 0, 839, 0, 0, 0, 0, 0,
	0, 725, 737, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 735,
	0, 0, 0, 0, 790, 0, 736, 0, 0, 785,
	764, 768, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 765, 788, 792, 320, 861, 786, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 862, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 783, 0, 609, 0, 448,
	0, 0, 845, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 787, 0, 406, 388, 858, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 843, 384, 574, 607, 608, 499, 0, 857,
	838, 840, 841, 844, 848, 849, 850, 851, 852, 854,
	856, 860, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 859, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 791, 549, 550, 374, 375, 376, 377,
	846, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 868,
	842, 867, 869, 870, 866, 871, 872, 853, 746, 0,
	798, 864, 863, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 753, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 831, 805, 806,
	807, 743, 808, 802, 803, 744, 804, 832, 796, 828,
	829, 772, 799, 809, 827, 810, 830, 833, 834, 873,
	874, 816, 800, 247, 875, 813, 835, 826, 825, 811,
	797, 836, 837, 779, 774, 814, 815, 801, 819, 820,
	821, 745, 793, 794, 795, 817, 818, 775, 776, 777,
	778, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 822, 617, 419,
	0, 618, 789, 629, 495, 496, 630, 606, 0, 738,
	0, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 780,
	546, 497, 415, 370, 564, 563, 0, 0, 847, 855,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 770, 824, 823, 757, 767, 0,
	0, 299, 219, 492, 612, 494, 493, 758, 0, 759,
	763, 766, 762, 760, 761, 0, 839, 0, 0, 0,
	0, 0, 0, 725, 737, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	734, 735, 0, 0, 0, 0, 790, 0, 736, 0,
	0, 785, 764, 768, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 765, 788, 792, 320, 861, 786,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 862, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 783, 0, 609,
	0, 448, 0, 0, 845, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 787, 0, 406, 388, 858,
	3872, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 843, 384, 574, 607, 608, 499,
	0, 857, 838, 840, 841, 844, 848, 849, 850, 851,
	852, 854, 856, 860, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 859, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 791, 549, 550, 374, 375,
	376, 377, 846, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 868, 842, 867, 869, 870, 866, 871, 872, 853,
	746, 0, 798, 864, 863, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 753, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 831,
	805, 806, 807, 743, 808, 802, 803, 744, 804, 832,
	796, 828, 829, 772, 799, 809, 827, 810, 830, 833,
	834, 873, 874, 816, 800, 247, 875, 813, 835, 826,
	825, 811, 797, 836, 837, 779, 774, 814, 815, 801,
	819, 820, 821, 745, 793, 794, 795, 817, 818, 775,
	776, 777, 778, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 822,
	617, 419, 0, 618, 789, 629, 495, 496, 630, 606,
	0, 738, 0, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	326, 1816, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 780, 546, 497, 415, 370, 564, 563, 0, 0,
	847, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 770, 824, 823, 757,
	767, 0, 0, 299, 219, 492, 612, 494, 493, 758,
	0, 759, 763, 766, 762, 760, 761, 0, 839, 0,
	0, 0, 0, 0, 0, 725, 737, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 735, 0, 0, 0, 0, 790, 0,
	736, 0, 0, 785, 764, 768, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 765, 788, 792, 320,
	861, 786, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 862, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 783,
	0, 609, 0, 448, 0, 0, 845, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 787, 0, 406,
	388, 858, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 843, 384, 574, 607,
	608, 499, 0, 857, 838, 840, 841, 844, 848, 849,
	850, 851, 852, 854, 856, 860, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 859, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 791, 549, 550,
	374, 375, 376, 377, 846, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 868, 842, 867, 869, 870, 866, 871,
	872, 853, 746, 0, 798, 864, 863, 865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	753, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 831, 805, 806, 807, 743, 808, 802, 803, 744,
	804, 832, 796, 828, 829, 772, 799, 809, 827, 810,
	830, 833, 834, 873, 874, 816, 800, 247, 875, 813,
	835, 826, 825, 811, 797, 836, 837, 779, 774, 814,
	815, 801, 819, 820, 821, 745, 793, 794, 795, 817,
	818, 775, 776, 777, 778, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 822, 617, 419, 0, 618, 789, 629, 495, 496,
	630, 606, 0, 738, 0, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 780, 546, 497, 415, 370, 564, 563,
	0, 0, 847, 855, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 733, 0, 0, 770, 824,
	823, 757, 767, 0, 0, 299, 219, 492, 612, 494,
	493, 758, 0, 759, 763, 766, 762, 760, 761, 0,
	839, 0, 0, 0, 0, 0, 0, 725, 737, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 735, 1533, 0, 0, 0,
	790, 0, 736, 0, 0, 785, 764, 768, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 765, 788,
	792, 320, 861, 786, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	862, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 783, 0, 609, 0, 448, 0, 0, 845, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 787,
	0, 406, 388, 858, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 843, 384,
	574, 607, 608, 499, 0, 857, 838, 840, 841, 844,
	848, 849, 850, 851, 852, 854, 856, 860, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 859,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 791,
	549, 550, 374, 375, 376, 377, 846, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 868, 842, 867, 869, 870,
	866, 871, 872, 853, 746, 0, 798, 864, 863, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 753, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 831, 805, 806, 807, 743, 808, 802,
	803, 744, 804, 832, 796, 828, 829, 772, 799, 809,
	827, 810, 830, 833, 834, 873, 874, 816, 800, 247,
	875, 813, 835, 826, 825, 811, 797, 836, 837, 779,
	774, 814, 815, 801, 819, 820, 821, 745, 793, 794,
	795, 817, 818, 775, 776, 777, 778, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 822, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 789, 738, 0, 2204, 0, 0,
	0, 0, 0, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 780, 546, 497, 415, 370, 564, 563, 0, 0,
	847, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 770, 824, 823, 757,
	767, 0, 0, 299, 219, 492, 612, 494, 493, 758,
	0, 759, 763, 766, 762, 760, 761, 0, 839, 0,
	0, 0, 0, 0, 0, 725, 737, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 735, 0, 0, 0, 0, 790, 0,
	736, 0, 0, 785, 764, 768, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 765, 788, 792, 320,
	861, 786, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 862, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 783,
	0, 609, 0, 448, 0, 0, 845, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 787, 0, 406,
	388, 858, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 843, 384, 574, 607,
	608, 499, 0, 857, 838, 840, 841, 844, 848, 849,
	850, 851, 852, 854, 856, 860, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 859, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 791, 549, 550,
	374, 375, 376, 377, 846, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 868, 842, 867, 869, 870, 866, 871,
	872, 853, 746, 0, 798, 864, 863, 865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	753, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 831, 805, 806, 807, 743, 808, 802, 803, 744,
	804, 832, 796, 828, 829, 772, 799, 809, 827, 810,
	830, 833, 834, 873, 874, 816, 800, 247, 875, 813,
	835, 826, 825, 811, 797, 836, 837, 779, 774, 814,
	815, 801, 819, 820, 821, 745, 793, 794, 795, 817,
	818, 775, 776, 777, 778, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 822, 617, 419, 0, 618, 789, 629, 495, 496,
	630, 606, 0, 738, 0, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 780, 546, 497, 415, 370, 564, 563,
	0, 0, 847, 855, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 733, 0, 0, 770, 824,
	823, 757, 767, 0, 0, 299, 219, 492, 612, 494,
	493, 758, 0, 759, 763, 766, 762, 760, 761, 0,
	839, 0, 0, 0, 0, 0, 0, 725, 737, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 735, 1809, 0, 0, 0,
	790, 0, 736, 0, 0, 785, 764, 768, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 765, 788,
	792, 320, 861, 786, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	862, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 783, 0, 609, 0, 448, 0, 0, 845, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 787,
	0, 406, 388, 858, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 843, 384,
	574, 607, 608, 499, 0, 857, 838, 840, 841, 844,
	848, 849, 850, 851, 852, 854, 856, 860, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 859,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 791,
	549, 550, 374, 375, 376, 377, 846, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 868, 842, 867, 869, 870,
	866, 871, 872, 853, 746, 0, 798, 864, 863, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 753, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 831, 805, 806, 807, 743, 808, 802,
	803, 744, 804, 832, 796, 828, 829, 772, 799, 809,
	827, 810, 830, 833, 834, 873, 874, 816, 800, 247,
	875, 813, 835, 826, 825, 811, 797, 836, 837, 779,
	774, 814, 815, 801, 819, 820, 821, 745, 793, 794,
	795, 817, 818, 775, 776, 777, 778, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 822, 617, 419, 0, 618, 789, 629,
	495, 496, 630, 606, 0, 738, 0, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 780, 546, 497, 415, 370,
	564, 563, 0, 0, 847, 855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	770, 824, 823, 757, 767, 0, 0, 299, 219, 492,
	612, 494, 493, 758, 0, 759, 763, 766, 762, 760,
	761, 0, 839, 0, 0, 0, 0, 0, 0, 725,
	737, 0, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 735, 0, 0,
	0, 0, 790, 0, 736, 0, 0, 785, 764, 768,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	765, 788, 792, 320, 861, 786, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 862, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 783, 0, 609, 0, 448, 0, 0,
	845, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 787, 0, 406, 388, 858, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	843, 384, 574, 607, 608, 499, 0, 857, 838, 840,
	841, 844, 848, 849, 850, 851, 852, 854, 856, 860,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 859, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 791, 549, 550, 374, 375, 376, 377, 846, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 868, 842, 867,
	869, 870, 866, 871, 872, 853, 746, 0, 798, 864,
	863, 865, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 753, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 831, 805, 806, 807, 743,
	808, 802, 803, 744, 804, 832, 796, 828, 829, 772,
	799, 809, 827, 810, 830, 833, 834, 873, 874, 816,
	800, 247, 875, 813, 835, 826, 825, 811, 797, 836,
	837, 779, 774, 814, 815, 801, 819, 820, 821, 745,
	793, 794, 795, 817, 818, 775, 776, 777, 778, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 822, 617, 419, 0, 618,
	789, 629, 495, 496, 630, 606, 0, 738, 0, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 780, 546, 497,
	415, 370, 564, 563, 0, 0, 847, 855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 770, 824, 823, 757, 767, 0, 0, 299,
	219, 492, 612, 494, 493, 2672, 0, 2673, 763, 766,
	762, 760, 761, 0, 839, 0, 0, 0, 0, 0,
	0, 725, 737, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 735,
	0, 0, 0, 0, 790, 0, 736, 0, 0, 785,
	764, 768, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 765, 788, 792, 320, 861, 786, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 862, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 783, 0, 609, 0, 448,
	0, 0, 845, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 787, 0, 406, 388, 858, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 843, 384, 574, 607, 608, 499, 0, 857,
	838, 840, 841, 844, 848, 849, 850, 851, 852, 854,
	856, 860, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 859, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 791, 549, 550, 374, 375, 376, 377,
	846, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 868,
	842, 867, 869, 870, 866, 871, 872, 853, 746, 0,
	798, 864, 863, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 753, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 831, 805, 806,
	807, 743, 808, 802, 803, 744, 804, 832, 796, 828,
	829, 772, 799, 809, 827, 810, 830, 833, 834, 873,
	874, 816, 800, 247, 875, 813, 835, 826, 825, 811,
	797, 836, 837, 779, 774, 814, 815, 801, 819, 820,
	821, 745, 793, 794, 795, 817, 818, 775, 776, 777,
	778, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 822, 617, 419,
	0, 618, 789, 629, 495, 496, 630, 606, 0, 738,
	0, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	1675, 0, 0, 0, 741, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 780,
	546, 497, 415, 370, 564, 563, 0, 0, 847, 855,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 770, 824, 823, 757, 767, 0,
	0, 299, 219, 492, 612, 494, 493, 758, 0, 759,
	763, 766, 762, 760, 761, 0, 839, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	734, 735, 0, 0, 0, 0, 790, 0, 736, 0,
	0, 785, 764, 768, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 765, 788, 792, 320, 861, 786,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 862, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 783, 0, 609,
	0, 448, 0, 0, 845, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 787, 0, 406, 388, 858,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 1676, 1677, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 843, 384, 574, 607, 608, 499,
	0, 857, 838, 840, 841, 844, 848, 849, 850, 851,
	852, 854, 856, 860, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 859, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 791, 549, 550, 374, 375,
	376, 377, 846, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 868, 842, 867, 869, 870, 866, 871, 872, 853,
	746, 0, 798, 864, 863, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 753, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 831,
	805, 806, 807, 743, 808, 802, 803, 744, 804, 832,
	796, 828, 829, 772, 799, 809, 827, 810, 830, 833,
	834, 873, 874, 816, 800, 247, 875, 813, 835, 826,
	825, 811, 797, 836, 837, 779, 774, 814, 815, 801,
	819, 820, 821, 745, 793, 794, 795, 817, 818, 775,
	776, 777, 778, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 822,
	617, 419, 0, 618, 789, 629, 495, 496, 630, 606,
	0, 738, 0, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 780, 546, 497, 415, 370, 564, 563, 0, 0,
	847, 855, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 770, 824, 823, 757,
	767, 0, 0, 299, 219, 492, 612, 494, 493, 758,
	0, 759, 763, 766, 762, 760, 761, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 735, 0, 0, 0, 0, 790, 0,
	736, 0, 0, 785, 764, 768, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 765, 788, 792, 320,
	861, 786, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 862, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 783,
	0, 609, 0, 448, 0, 0, 845, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 787, 0, 406,
	388, 858, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 843, 384, 574, 607,
	608, 499, 0, 857, 838, 840, 841, 844, 848, 849,
	850, 851, 852, 854, 856, 860, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 859, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 791, 549, 550,
	374, 375, 376, 377, 846, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 868, 842, 867, 869, 870, 866, 871,
	872, 853, 746, 0, 798, 864, 863, 865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	753, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 831, 805, 806, 807, 743, 808, 802, 803, 744,
	804, 832, 796, 828, 829, 772, 799, 809, 827, 810,
	830, 833, 834, 873, 874, 816, 800, 247, 875, 813,
	835, 826, 825, 811, 797, 836, 837, 779, 774, 814,
	815, 801, 819, 820, 821, 745, 793, 794, 795, 817,
	818, 775, 776, 777, 778, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 822, 617, 419, 0, 618, 789, 629, 495, 496,
	630, 606, 0, 738, 0, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 780, 546, 497, 415, 370, 564, 563,
	0, 0, 847, 855, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 770, 824,
	823, 757, 767, 0, 0, 299, 219, 492, 612, 494,
	493, 758, 0, 759, 763, 766, 762, 760, 761, 0,
	839, 0, 0, 0, 0, 0, 0, 725, 737, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 735, 0, 0, 0, 0,
	790, 0, 736, 0, 0, 785, 764, 768, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 765, 788,
	792, 320, 861, 786, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	862, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 783, 0, 609, 0, 448, 0, 0, 845, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 787,
	0, 406, 388, 858, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 843, 384,
	574, 607, 608, 499, 0, 857, 838, 840, 841, 844,
	848, 849, 850, 851, 852, 854, 856, 860, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 859,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 791,
	549, 550, 374, 375, 376, 377, 846, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 868, 842, 867, 869, 870,
	866, 871, 872, 853, 746, 0, 798, 864, 863, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 753, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 831, 805, 806, 807, 743, 808, 802,
	803, 744, 804, 832, 796, 828, 829, 772, 799, 809,
	827, 810, 830, 833, 834, 873, 874, 816, 800, 247,
	875, 813, 835, 826, 825, 811, 797, 836, 837, 779,
	774, 814, 815, 801, 819, 820, 821, 745, 793, 794,
	795, 817, 818, 775, 776, 777, 778, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 822, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 0, 738, 196, 61, 187, 158,
	0, 0, 0, 0, 0, 0, 386, 0, 510, 543,
	532, 616, 498, 0, 188, 0, 0, 0, 0, 0,
	0, 179, 0, 326, 0, 189, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 132, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 157, 185, 194, 186, 117,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 211,
	0, 0, 0, 420, 0, 0, 353, 184, 178, 177,
	464, 0, 406, 388, 223, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 584, 585, 586, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 443, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 214, 556, 559, 489, 224,
	0, 553, 568, 526, 567, 225, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 130, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 222, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 229,
	294, 431, 230, 0, 283, 505, 357, 159, 398, 331,
	570, 571, 58, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 226, 45,
	212, 215, 217, 216, 0, 59, 554, 566, 600, 5,
	610, 611, 613, 615, 614, 617, 419, 196, 618, 135,
	227, 495, 496, 228, 606, 0, 0, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 132, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 2354, 2357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 2358, 448, 0, 0,
	0, 2353, 0, 2352, 420, 2350, 2355, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	2356, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 159, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1286, 0, 0, 218,
	0, 0, 757, 767, 0, 0, 299, 219, 492, 612,
	494, 493, 758, 0, 759, 763, 766, 762, 760, 761,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 765,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 196, 61, 187, 158, 0,
	0, 0, 0, 0, 0, 386, 655, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 661,
	0, 0, 0, 0, 0, 660, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 659, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 632, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 656, 658, 304, 471,
	399, 669, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 159, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 2511, 2514, 2515, 2516, 2517, 2518,
	2519, 0, 2524, 2520, 2521, 2522, 2523, 0, 2506, 2507,
	2508, 2509, 1081, 2490, 2512, 0, 2491, 382, 2492, 2493,
	2494, 2495, 1085, 2496, 2497, 2498, 2499, 2500, 2503, 2504,
	2501, 2502, 2510, 394, 360, 395, 343, 372, 371, 373,
	1109, 1111, 1113, 1115, 1118, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 2505, 0,
	406, 388, 632, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 628, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 0, 283, 2513, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 618, 0, 629, 495,
	496, 630, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 2354,
	2357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 2358, 448, 0, 0, 0, 2353, 0, 2352,
	420, 2350, 2355, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 2356, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 2375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 2374, 448, 0, 0, 0, 2380, 2377, 2379, 420,
	0, 2378, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 2372, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 2375, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	2374, 448, 0, 0, 0, 2380, 2377, 2379, 420, 0,
	2378, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 2070, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 2071, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 1215, 1216,
	1217, 1214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 196, 618, 0, 629, 495, 496, 630, 606, 0,
	0, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 132,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 2120, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 159, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 196, 618, 0, 629, 495, 496, 630, 606,
	0, 0, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	132, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 2106, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 159, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 1013,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 1020, 1021, 0, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1024, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	1007, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 995,
	446, 293, 994, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 1011,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 1012, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 1015, 549, 550, 374, 375,
	376, 377, 337, 575, 1010, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 1022, 1008, 1018, 1009, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 1019, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 196, 618, 0, 629, 495, 496, 630, 606,
	0, 0, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	132, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2002, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 159, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 1020, 1021, 0, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1024, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 995,
	446, 293, 994, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 1022, 2022, 1018, 2023, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 1019, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 2893,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 2896, 0, 0, 2895, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 618, 0, 629, 495, 496, 630, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 1499, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 1497, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 0, 448,
	0, 0, 0, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 464, 0, 406, 388, 632, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 618, 0, 629, 495, 496, 630, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 1493, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 1497, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3932, 0,
	218, 824, 0, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 1497, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 632, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 2419, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 337, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 945,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	1497, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1705, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 632, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 628, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 618, 0, 629, 495,
	496, 630, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 2453, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 2455,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 0, 448, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 2070, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 2071, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 3100, 3102, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 2475, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 1497, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 618, 0, 629, 495, 496, 630, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 643, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 0, 448,
	0, 642, 0, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 464, 0, 406, 388, 632, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 618, 0, 629, 495, 496, 630, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 824, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3911, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 3689, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 3819,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 632, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 337, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1719, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 632, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 628, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 618, 0, 629, 495,
	496, 630, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3704, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 0, 448, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 3619, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 3134, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 618, 0, 629, 495, 496, 630, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2002,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 0, 448,
	0, 0, 0, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 464, 0, 406, 388, 632, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 618, 0, 629, 495, 496, 630, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 3341, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 1497, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 632, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 337, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	2455, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 632, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 628, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 618, 0, 629, 495,
	496, 630, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 2815, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 0, 448, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 2572, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 618, 0, 629, 495, 496, 630, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 2531, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 0, 448,
	0, 0, 0, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 464, 0, 406, 388, 632, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 618, 2310, 629, 495, 496, 630, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 1857, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 1986, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 1497, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 632, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 1891, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 337, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 1526, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 632, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 628, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 618, 0, 629, 495,
	496, 630, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 0, 448, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 653,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 945, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 618, 0, 629, 495, 496, 630, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 1476, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 0, 448,
	0, 0, 0, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 464, 0, 406, 388, 632, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 618, 0, 629, 495, 496, 630, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 1474, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 720, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 677, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 678, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 1973, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 1976, 618, 0,
	629, 495, 496, 630, 606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3710,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1950,
	0, 1976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1966, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3681, 0, 0,
	0, 1966, 0, 0, 0, 0, 0, 0, 0, 0,
	1950, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1948,
	1982, 0, 0, 1949, 1951, 1953, 0, 1955, 1956, 1957,
	1961, 1962, 1963, 1965, 1968, 1969, 1970, 0, 1966, 0,
	0, 0, 1954, 0, 1958, 1967, 1959, 0, 0, 0,
	0, 0, 0, 1960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1948, 1982, 0, 0, 1949, 1951, 1953,
	1974, 1955, 1956, 1957, 1961, 1962, 1963, 1965, 1968, 1969,
	1970, 0, 0, 0, 0, 0, 0, 0, 1958, 1967,
	1959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1954,
	0, 0, 0, 0, 0, 1971, 0, 0, 0, 0,
	1960, 0, 0, 0, 1974, 0, 0, 0, 0, 0,
	0, 0, 1947, 0, 0, 0, 0, 0, 0, 1946,
	1948, 1982, 0, 0, 1949, 1951, 1953, 0, 1955, 1956,
	1957, 1961, 1962, 1963, 1965, 1968, 1969, 1970, 0, 0,
	0, 0, 0, 1964, 0, 1958, 1967, 1959, 0, 1971,
	0, 0, 1952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1947, 0, 0, 0,
	0, 0, 0, 1946, 0, 0, 0, 0, 0, 0,
	0, 1974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1964, 0, 0,
	0, 0, 0, 0, 0, 0, 1952, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1947, 0, 0, 0, 0, 0, 0,
	1946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3547, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1964, 0, 0, 0, 0, 0,
	0, 0, 0, 1952, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3547,
}

var yyPact = [...]int{
	3914, -1000, -1000, -1000, -307, 14313, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47757, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 451, 47757,
	-301, 29806, 45900, -1000, -1000, 2588, -1000, 46519, 16182, 47757,
	559, 555, 47757, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 947, -1000, 50233,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 878, 4970,
	49614, 11194, -205, -1000, 1502, -15, 2502, 517, -181, -182,
	1088, 1101, 1301, 1301, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 241, 1037, 47138,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 249, 254, 942, 1037, 21138, 150,
	143, 1502, 445, -47, 282, -1000, 1444, 3958, 217, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11194, 11194, 14313, -357, 14313, 11194, 47757, 47757, -1000, -1000,
	-1000, -1000, -301, 46519, 878, 4970, 11194, 2502, 517, -181,
	-182, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -47, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 143, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4515,
	-1000, 1633, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2254, 3017, 1625,
	2501, 848, 45900, 47757, -1000, 159, 848, -1000, -1000, -1000,
	1502, 3429, -1000, 47757, 47757, 232, 1871, -1000, 452, 396,
	426, 362, 1624, -1000, -1000, -1000, -1000, -1000, -1000, 724,
	3382, -1000, 47757, 47757, 3036, 47757, -1000, 2216, 790, -1000,
	5023, 3228, 1456, 977, 3048, -1000, -1000, 3016, -1000, 375,
	409, 335, 461, 450, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 359, -1000, 3292, -1000, -1000, 355, -1000, -1000, 350,
	-1000, -1000, -1000, 142, -1000, -1000, -1000, -1000, -1000, -1000,
	47, -1000, -1000, 1162, 1932, 11194, 1880, -1000, 4337, 1662,
	-1000, -1000, -1000, 6834, 13060, 13060, 13060, 13060, 47757, -1000,
	-1000, 2851, 11194, 3010, 3006, 3005, 3003, -1000, -1000, -1000,
	-1000, -1000, -1000, 3001, 1582, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1983, -1000, -1000, -1000, 13682, -1000,
	2999, 2998, 2990, 2988, 2986, 2983, 2980, 2979, 2978, 2977,
	2976, 2975, 2974, 2971, 2699, 15553, 2970, 2498, 2496, 2969,
	2965, 2964, 2495, 2963, 2962, 2946, 2699, 2699, 2945, 2944,
	2942, 2932, 2930, 2929, 2927, 2926, 2925, 2924, 2923, 2922,
	2921, 2917, 2916, 2914, 2912, 2901, 2900, 2889, 2883, 2882,
	2878, 2872, 2870, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1461, -1000, 2863, 3400,
	2785, -1000, 3276, 3272, 3264, 3262, -253, 2862, 2186, -1000,
	-1000, 118, 3381, 47757, -272, 47757, 2491, -62, 2489, -63,
	-1000, -45, -1000, -1000, 1063, -1000, 1053, -1000, 877, 877,
	877, 47757, 47757, 260, 928, 877, 877, 877, 877, 877,
	909, 877, 3315, 941, 933, 932, 929, 877, 9, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1870, 1867, 3134, 1034,
	-1000, -1000, -1000, -1000, 1459, 47757, -1000, 2795, 2482, 1773,
	1773, 3359, 3359, 3314, 806, 804, 756, 1773, 638, -1000,
	1882, 1882, 1882, 1882, 1773, 553, 798, 3318, 3318, 125,
	1882, 119, 1773, 1773, 119, 1773, 1773, -1000, 1842, 274,
	-260, -1000, -1000, -1000, -1000, 1882, 1882, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3287, 3285, 878, 878, 47757, 878,
	261, 47757, 878, 878, 878, 47757, 887, 69, 48995, 48376,
	2239, 2216, 785, 775, 1465, 1859, -1000, 1840, 47757, 47757,
	1840, 1840, 24235, 23616, -1000, 47757, -1000, 3400, 2785, 2697,
	1480, 2696, 2785, -68, 2480, 878, 878, 878, 878, 878,
	314, 878, 878, 878, 878, 878, 47757, 47757, 45281, 878,
	878, 878, 878, 9322, 9322, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14313, 2087, 2071, 215, 0, -294,
	280, -1000, -1000, 47757, 3191, 332, -1000, -1000, -1000, 2763,
	-1000, 2771, 2771, 2771, 2771, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2771, 2771, 2792, 2861, -1000,
	-1000, 2770, 2770, 2770, 2763, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2784, 2784, 2788, 2788, 2784, 47757, -96, -1000, -1000, 11194,
	47757, 3202, 432, 2859, 848, -1000, -1000, 47757, 196, 443,
	3400, 3199, 3318, 3353, -1000, -1000, 1581, 2185, 2477, -1000,
	362, -1000, 400, 362, 1738, -1000, 1233, -1000, -1000, -1000,
	-1000, -1000, 47757, 47, 413, -1000, -1000, 2454, 2858, -1000,
	651, 1292, 1380, -1000, 298, 5111, 38472, 2216, 38472, 47757,
	-1000, -1000, -1000, -1000, -1000, -1000, 140, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 317, -1000, 11194, 11194, 11194, 11194, 11194, -1000, 983,
	12438, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13060, 13060,
	13060, 13060, 13060, 13060, 13060, 13060, 13060, 13060, 13060, 13060,
	2849, 1763, 13060, 13060, 13060, 13060, 26711, 1480, 3138, 1463,
	315, 1662, 1662, 1662, 1662, 11194, -1000, 1902, 1932, 11194,
	11194, 11194, 11194, 32901, 47757, -1000, -1000, 5017, 11194, 11194,
	4651, 11194, 3254, 11194, 11194, 11194, 2695, 5581, 47757, 11194,
	-1000, 2693, 2690, -1000, -1000, 2011, 11194, -1000, -1000, 11194,
	-1000, -1000, 11194, 13060, 11194, -1000, 11194, 11194, 11194, -1000,
	-1000, 3290, 3254, 3254, 3254, 1828, 11194, 11194, 3254, 3254,
	3254, 1808, 3254, 3254, 3254, 3254, 3254, 3254, 3254, 3254,
	3254, 3254, 2689, 2688, 2683, 10572, 3318, -205, -1000, 8700,
	3199, 3318, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -256, 2856, 47757, 2475, 2469, -320, 192, 501,
	47757, 1148, 440, 2182, -74, 2181, 85, 1085, 1066, 1046,
	-1000, 2468, 1920, 47757, 47757, 3247, -1000, 2854, 47757, 877,
	877, 877, -1000, 43424, 38472, 47757, 47757, 2216, 47757, 47757,
	47757, 877, 877, 877, 877, 47757, -1000, 3174, 38472, 3140,
	887, -1000, 47757, 1459, 3242, 47757, 440, 3359, 13060, 13060,
	-1000, -1000, 11194, -1000, 44662, 1882, 1773, 1773, -1000, -1000,
	47757, -1000, -1000, -1000, 1882, 47757, 1882, 1882, 3359, 1882,
	-1000, -1000, -1000, 1773, 1773, -1000, -1000, 11194, -1000, -1000,
	1882, 1882, -1000, -1000, 3359, 47757, 121, 3359, 3359, 113,
	-1000, -1000, -1000, 1773, 47757, 47757, 877, 47757, -1000, 47757,
	47757, -1000, -1000, 47757, 47757, 3943, 47757, 43424, 44043, 3279,
	-1000, 38472, 47757, 47757, 1454, -1000, 916, 35996, -1000, 1411,
	-1000, 72, -1000, 83, 69, 1840, 69, 1840, 913, -1000,
	650, 657, 22378, 564, 38472, 6203, -1000, -1000, 1840, 1840,
	6203, 6203, 1671, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1441, -1000, 380, 3318, -1000, -1000, -1000, -1000, -1000, 2171,
	440, 47757, 43424, 38472, 2216, 47757, 878, 47757, 47757, 47757,
	47757, 47757, -1000, 2853, 1578, -1000, 3220, 47757, 47757, 47757,
	47757, 1327, -1000, -1000, 19277, 1576, 1327, -1000, 1897, -1000,
	11194, 14313, -239, 11194, 14313, 14313, 11194, 14313, -1000, 11194,
	307, -1000, -1000, -1000, -1000, 2170, -1000, 2168, -1000, -1000,
	-1000, -1000, -1000, 2462, 2462, -1000, 2167, -1000, -1000, -1000,
	-1000, 2165, -1000, -1000, 2160, -1000, -1000, -1000, -1000, -146,
	2674, 1162, -1000, 2459, 3043, -206, -1000, 20519, 47757, 47757,
	432, -322, 1866, 1863, 1861, -1000, -206, -1000, 19898, 47757,
	3318, -1000, -210, 3199, 11194, 47757, -1000, 3308, -1000, -1000,
	362, -1000, 417, 433, -1000, -1000, -1000, -1000, -1000, -1000,
	1546, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 446, -49, -50, 1428, -1000, 47757, -1000, -1000, 298,
	38472, 40329, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 327,
	-1000, -1000, 195, -1000, 908, 267, 1737, -1000, -1000, 268,
	211, 236, 967, 1932, -1000, 1916, 1916, 1927, -1000, 794,
	-1000, -1000, -1000, -1000, 2851, -1000, -1000, -1000, 2665, 2892,
	-1000, 1768, 1768, 1636, 1636, 1636, 1636, 1636, 1814, 1814,
	-1000, -1000, -1000, 6834, 2849, 13060, 13060, 13060, 13060, 964,
	964, 4116, 4292, -1000, -1000, -1000, -1000, 11194, 198, 1879,
	-1000, 11194, 2813, 1629, 2705, 1658, 1733, -1000, 2763, 11194,
	1532, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2671, 2667, 2562, 3380, 2661, 11194, -1000, -1000, 1732,
	1729, 1728, -1000, 2144, 9950, -1000, -1000, -1000, 2660, 1527,
	2659, -1000, -1000, -1000, 2658, 1722, 1200, 2657, 2994, 2655,
	2654, 2652, 2651, 1422, 11194, 11194, 11194, 11194, 2649, 1715,
	1710, 11194, 11194, 11194, 11194, 2648, 11194, 11194, 11194, 11194,
	11194, 11194, 11194, 11194, 11194, 11194, 144, 144, 144, 1419,
	1418, -1000, -1000, 1709, -1000, 1932, -1000, -1000, 3199, -1000,
	2848, 2151, 1415, -1000, -1000, -298, 2389, 47757, 47757, 188,
	47757, 2457, -275, 47757, -1000, -1000, 2448, -1000, 2447, -1000,
	-1000, -1000, 1083, 1045, 1042, 2445, 3209, 3299, 921, 47757,
	1321, 2847, 47757, 47757, 47757, 296, -1000, -1000, 1312, -1000,
	267, 37, 572, 1216, 3035, 3378, -97, 47757, 47757, 47757,
	47757, 3241, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42805, -1000, 2845, 1706, -1000, -1000, -1000, 1662, 1662, 1932,
	3033, 47757, 47757, 3359, 3359, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1882, 3359, 3359, 1645, 1773, 1882, -1000, -1000,
	1882, -322, -1000, 1882, -1000, -322, 1518, -322, 47757, -1000,
	-1000, -1000, 3240, 2795, 1413, -1000, -1000, -1000, 3352, 907,
	870, 870, 1108, 766, 3351, 18039, -1000, 1719, 1247, 904,
	3172, 365, -1000, 1719, -143, 851, 1719, 1719, 1719, 1719,
	1719, 1719, 1719, 718, 712, 1719, 1719, 1719, 1719, 1719,
	1719, 1719, 1719, 1719, 1719, 1719, 1096, 1719, 1719, 1719,
	1719, 1719, -1000, 1719, 2837, 547, -1000, -1000, -1000, -1000,
	-1000, -1000, 753, 663, 292, 3270, 408, -1000, 401, 1312,
	3261, 431, 47757, 47757, 3413, 1290, -1000, -1000, -1000, -1000,
	27330, 27330, 21759, 27330, -1000, 204, 69, 59, -1000, -1000,
	1411, 6203, 1411, 6203, 2150, -1000, -1000, 900, -1000, -1000,
	1216, -1000, 47757, 47757, -1000, -1000, 2829, 1860, -1000, -1000,
	15553, -1000, 6203, 6203, -1000, -1000, 29187, 47757, -1000, 46,
	-1000, 63, 3199, -1000, -1000, 1191, -1000, -1000, 1410, 1216,
	3042, 47757, 1191, 1191, 1191, -1000, -1000, 16801, 47757, 47757,
	-1000, -1000, -1000, -1000, 3359, 9322, -1000, 35996, -1000, -1000,
	42186, -1000, 41567, 3359, 1875, -1000, 14313, 2057, 203, -1000,
	275, -297, 210, 1993, 209, 1932, -1000, -1000, 2647, 2644,
	1695, -1000, 1694, 2643, 1689, 1680, 2143, -1000, 110, -1000,
	3194, 1226, -1000, 2828, -1000, 1678, 3128, -1000, 1406, -1000,
	1857, 1667, -1000, -1000, -1000, 11194, 40948, 11194, 1226, 1661,
	3126, 1406, 3199, 2442, -1000, 1405, -1000, 2126, 1517, 200,
	-1000, -1000, -1000, 47757, 878, 2454, 1652, 40329, 1250, -1000,
	897, 1511, 1510, -1000, 38472, 351, 38472, -1000, 38472, -1000,
	-1000, 415, -1000, 47757, 3197, -1000, -1000, -1000, 2389, 1855,
	-321, 47757, -1000, -1000, -1000, -1000, -1000, 1646, -1000, 964,
	964, 4116, 3884, -1000, 13060, -1000, 13060, 3107, -1000, 1868,
	-1000, 11194, 2039, 4645, 11194, 4645, 1525, 25473, 32901, -81,
	3210, 3095, 47757, -1000, -1000, 11194, 11194, -1000, 2996, -1000,
	-1000, -1000, -1000, 11194, 11194, 2236, -1000, 47757, -1000, -1000,
	-1000, -1000, 25473, -1000, 13060, -1000, -1000, -1000, -1000, 11194,
	1424, 1424, 2984, 1643, 144, 144, 144, 2910, 2906, 2874,
	1638, 144, 2838, 2803, 2790, 2676, 2612, 2484, 2463, 2449,
	2441, 2409, -1000, 2827, -1000, -1000, 1987, 11816, 8700, -1000,
	-1000, 319, 1404, 2142, 2439, 135, -1000, 1853, -1000, 2438,
	47757, 47757, 1147, -1000, 47757, 3374, -1000, 2437, -1000, -1000,
	-1000, 1038, 2429, -1000, 458, 2033, 218, 323, 2634, 1398,
	-1000, -1000, 47757, -1000, -1000, -1000, 16801, 2795, 2826, 2795,
	168, 1719, 639, 38472, 763, -1000, 47757, 2013, 1849, 3038,
	754, 3184, 47757, 2824, 407, 2817, 2816, 3238, 541, 4759,
	47757, 1265, -1000, 1506, 3958, -1000, 47757, -1000, 2216, -1000,
	1773, -1000, -1000, 3359, -1000, -1000, 11194, 11194, 3359, 1773,
	1773, -1000, 1882, -1000, 47757, -1000, -322, 541, 4759, 3236,
	4367, 630, 2323, -1000, 47757, -1000, -1000, -1000, 834, -1000,
	1073, 877, 47757, 1957, 1073, 1955, 2811, -1000, -1000, 47757,
	47757, 47757, 47757, -1000, -1000, 47757, -1000, 47757, 47757, 47757,
	47757, 47757, 39710, -1000, 47757, 47757, -1000, 47757, 1954, 47757,
	1952, 3217, -1000, 1719, 1719, 994, -1000, -1000, 631, -1000,
	39710, 2137, 2136, 2133, 2131, 2428, 2427, 2425, 1719, 1719,
	2130, 2424, 39091, 2411, 1374, 2127, 2122, 2121, 2115, 2410,
	1204, -1000, 2406, 2103, 2077, 2075, 47757, 2797, 2318, 545,
	-1000, -1000, 2033, 168, 1719, 405, 47757, 1848, 1826, 639,
	571, 25, 22997, -1000, -1000, -1000, 47757, 35996, 35996, 35996,
	35996, -1000, 3085, 3084, 3076, -1000, 3109, 3077, 3124, 47757,
	35996, 2795, -1000, 39091, -1000, -1000, -1000, 1480, 1634, 3259,
	1044, 11194, -1000, -1000, 60, 76, -1000, -1000, -1000, -1000,
	38472, 2402, 564, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3297, 47757, 47757, 826, 2633, 1370, -1000, -1000, -1000, 4759,
	2771, 2771, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2771, 2771, 2792, -1000, -1000, 2770, 2770, 2770, 2763,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2784, 2784, 2788, 2788, 2784, -1000, -1000, 3357, -1000, 1358,
	-1000, -1000, 1490, -1000, 3357, 1904, -312, 14313, 1878, 1734,
	-1000, 11194, 14313, 11194, -241, 387, -244, -1000, -1000, -1000,
	2399, -1000, -1000, -1000, 2120, -1000, 2117, -1000, 184, 219,
	1951, -206, 8700, 444, 47757, -206, 47757, 8700, -1000, 47757,
	194, -348, -355, 190, 437, -206, 3297, 110, 11194, 3170,
	-1000, -1000, 47757, 2116, -1000, -1000, -1000, 3370, 38472, 2216,
	1688, 37853, -1000, 345, -1000, 321, 608, 2395, -1000, 927,
	134, 2390, 2389, -1000, -1000, -1000, -1000, 13060, 1662, -1000,
	-1000, -1000, 1932, 11194, 2626, -1000, 1026, 1026, 2098, 2625,
	2624, -1000, 2771, 2771, -1000, 2763, 2770, 2763, 1026, 1026,
	2623, -1000, 2758, -1000, 3210, -1000, 2015, 2392, -1000, 2332,
	2317, 11194, -1000, 2620, 3724, 1445, -2, -175, 144, 144,
	-1000, -1000, -1000, -1000, 144, 144, 144, 144, -1000, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 849,
	-84, -264, -86, -265, -1000, 2618, 1344, -1000, -1000, -1000,
	-1000, -1000, 4651, 1318, 590, 590, 2389, 2379, -1000, 893,
	2375, 1079, 47757, 2374, -277, -1000, -1000, 2370, -1000, -1000,
	47757, 2368, -1000, 656, 47757, 47757, 2366, 2364, 1321, 4759,
	2616, 3235, 17420, 3234, 2140, -1000, -1000, -1000, 28568, 605,
	-1000, -1000, -1000, 725, 341, 2108, 591, -1000, 47757, 578,
	3146, 1810, 2363, 47757, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3184, -1000, 919, 499, 34758, 14934, -1000, 428, 47757,
	-1000, 17420, 17420, 428, 480, 1777, -1000, 848, 1211, 139,
	35996, 47757, -1000, 35377, 2615, -1000, 1216, 3359, -1000, 1932,
	1932, -322, 3359, 3359, 1773, -1000, -1000, 480, -1000, 428,
	-1000, 1477, 18658, 615, 516, 510, -1000, 697, -1000, -1000,
	827, 3157, 4759, -1000, 47757, -1000, 47757, -1000, 47757, 47757,
	877, 11194, 3157, 47757, 889, -1000, 1137, 483, 463, 843,
	843, 1283, -1000, 3210, -1000, -1000, 1275, -1000, -1000, -1000,
	-1000, 47757, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25473,
	25473, 3260, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2360, 2359, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 47757, 1620, -1000, 1805,
	2097, 2358, 2140, 28568, 1804, 1840, 2353, 2347, 605, 2013,
	1803, 926, 47757, -1000, 1203, 47757, 47757, -1000, 1304, -1000,
	1800, 3025, 2997, 3025, -1000, -1000, -1000, -1000, -1000, 3062,
	-1000, 3061, -1000, -1000, 1304, -1000, -1000, -1000, -1000, -1000,
	1044, -1000, 3296, 1073, 1073, 1073, 2614, -1000, -1000, -1000,
	1250, 2611, -1000, -1000, -1000, 3395, -1000, -1000, -1000, -1000,
	-1000, -1000, 16801, 3182, 3355, 3349, 37234, 3355, -1000, -312,
	1831, -1000, 2010, 206, 1914, 47757, -1000, -1000, -1000, 2610,
	2607, -212, 224, 3347, 3344, 1121, -1000, 2604, 1244, -206,
	-1000, -1000, 1226, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-206, -1000, 1226, -1000, 184, -1000, -1000, 3166, -1000, -1000,
	2216, -1000, 305, -1000, -1000, -1000, -1000, -1000, -1000, 250,
	-1000, 47757, -1000, 1243, 128, -1000, 1932, -1000, -1000, -1000,
	-1000, -1000, 4645, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2346, -1000, -1000, 11194, -1000, -1000, -1000,
	2301, -1000, -1000, 11194, 2603, 2345, 2602, 2335, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3400, -1000, 3343, 1617, 2600, 2594,
	1610, 2593, 2586, -1000, 11194, 2585, 4651, 1010, 2333, 1010,
	-1000, -1000, 410, 27949, 47757, 3367, -1000, 47757, 2329, -1000,
	-1000, 2033, 654, 723, -1000, -1000, -1000, -1000, 923, 428,
	2583, 1228, -1000, -1000, -1000, -1000, 428, -1000, 2322, 266,
	-1000, -1000, -1000, -1000, 2321, 2320, 2088, -1000, -1000, 2061,
	1621, 285, -1000, -1000, -1000, -1000, -1000, -1000, 2021, 47757,
	36615, 2104, 1797, -323, -1000, 2756, -1000, 1719, 1719, 1719,
	47757, 1606, -1000, 1719, 1719, 2576, -1000, -1000, 2574, 2572,
	-98, 853, 1765, 1760, -1000, 2082, 27330, 35996, 35377, 1255,
	-1000, 1488, -1000, -1000, -1000, -1000, -1000, -1000, 3359, 853,
	-1000, 598, 2080, 13060, 2755, 13060, 2754, 622, 2751, 1603,
	-1000, 47757, -1000, -1000, 47757, 4027, 2749, -1000, 2746, 3032,
	586, 2745, 2743, 47757, 2270, -1000, 3157, 47757, 772, 3176,
	-1000, -1000, -1000, 447, -1000, -1000, 670, -1000, 47757, -1000,
	47757, -1000, 1656, -1000, 25473, -1000, -1000, 1598, -1000, 2318,
	2315, 4651, -1000, -1000, 266, 2313, 6203, -1000, -1000, -1000,
	3146, 2311, 2021, 47757, -1000, 47757, 1203, 1203, 3400, 47757,
	8700, -1000, -1000, 11194, 2742, -1000, 11194, -1000, -1000, -1000,
	-1000, -1000, 2738, 3135, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1865, -1000, 11194, 11194, -1000, -1000, 873, 14313, -245,
	383, -1000, -1000, -1000, -214, 2310, -1000, -1000, 3342, 2308,
	2207, 47757, -1000, -1000, 1226, 1226, -212, -1000, -1000, 1216,
	-1000, -1000, 1068, 722, -1000, 2569, 302, -1000, 2195, -1000,
	2187, 144, -1000, 144, -1000, 278, 11194, -1000, 2307, -1000,
	-1000, -1000, 2306, -1000, -1000, 2134, -1000, 2559, -1000, 2304,
	-1000, -1000, 47757, -1000, -1000, 1072, 2303, -324, 2300, 2033,
	2033, 47757, 4759, -100, -98, 17420, -100, -1000, -1000, 404,
	-1000, -1000, 429, -1000, -1000, 2041, 653, -1000, -1000, 2297,
	640, -1000, 1203, -1000, 1796, 1969, 2249, 32901, 25473, 26711,
	2290, -1000, -1000, 34758, 1865, 1865, 5040, 317, 50957, -1000,
	2720, 1111, 1748, -1000, 2079, -1000, 2076, -1000, 3359, 1255,
	137, -1000, -1000, 1681, -1000, 1111, 2323, 3340, -1000, 3618,
	47757, 3536, 47757, 2719, 1780, 13060, -1000, 827, 3125, -1000,
	-1000, 4027, -1000, -1000, 1966, 13060, -1000, -1000, 2278, 26711,
	949, 1759, 1757, 981, 2718, -1000, 676, 3392, -1000, -1000,
	-1000, 990, 2713, -1000, 1947, 1945, -1000, 47757, -1000, 32901,
	32901, 762, 762, 32901, 32901, 2711, 843, -1000, -1000, 13060,
	-1000, -1000, 1719, -1000, -1000, -1000, 1719, 1644, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2104, -1000, -1000, 1191, -1000,
	3318, -1000, -1000, 1932, 47757, 1932, 34139, -1000, 3339, 3338,
	-1000, 1932, 265, -1000, -312, 47757, 47757, -225, 2067, -1000,
	2276, 220, -1000, -1000, 1190, -214, -228, 113, 25473, 1750,
	-1000, 2556, 384, -126, -1000, -1000, -1000, -1000, 2535, -1000,
	936, -1000, -1000, -1000, 1162, 2522, 2516, -1000, -1000, -1000,
	-1000, 47757, -1000, 2243, -1000, 2275, 2267, 647, -89, -1000,
	-1000, 479, -1000, -1000, -1000, 613, 2202, -1000, -1000, 425,
	-1000, -1000, -1000, 2021, 2266, -1000, -1000, 127, -1000, 1740,
	1596, -1000, -1000, -1000, -1000, -1000, -1000, 822, -1000, 428,
	50880, -1000, 1247, 26092, -1000, 1068, 822, 547, 31663, 671,
	318, -1000, 2066, -1000, -1000, 3400, -1000, 668, -1000, 606,
	-1000, 1595, -1000, 1566, 33520, 2058, 3018, -1000, 50826, 945,
	-1000, -1000, 4116, -1000, -1000, -1000, -1000, -1000, -1000, 2262,
	2257, -1000, -1000, -1000, -1000, -1000, 2056, 2710, 62, 3258,
	2255, -1000, -1000, 2709, 1539, 1520, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1508, 1499, 32901, -1000, -1000,
	4116, 2044, 25473, 1719, -1000, -1000, 1496, 1482, -1000, -1000,
	-1000, -1000, -1000, -284, -1000, -1000, -1000, 2708, -1000, -1000,
	3334, -225, -233, 2253, 182, 197, -1000, 2251, -1000, -92,
	3120, -139, -1000, -1000, 944, -207, 160, 158, 138, -1000,
	-1000, -1000, 11194, -1000, -1000, -1000, 126, -1000, 1720, -1000,
	-1000, 2033, 47757, 669, -1000, -1000, -1000, -1000, 207, -1000,
	-1000, -1000, -1000, -1000, -1000, 2249, 2248, -1000, 592, 3332,
	-1000, 50957, -1000, 1719, -1000, 592, 1460, -1000, 1719, 1719,
	-1000, 529, -1000, 1705, -1000, 2032, -1000, 3318, -1000, 507,
	-1000, 596, -1000, -1000, -1000, 1416, -1000, -1000, -1000, 50826,
	601, -1000, 812, 2702, -1000, -1000, 2510, 11194, 2699, 1719,
	2337, -85, 32901, 3031, 3022, 2908, 2309, 1383, -1000, -1000,
	25473, -1000, -1000, 32282, -1000, 47757, 2207, -1000, -1000, 2245,
	-1000, 884, 214, 197, -1000, 3330, 213, 3325, 3323, 1161,
	3115, -1000, -1000, 1926, -1000, 167, 165, 156, -1000, -1000,
	-1000, -1000, -1000, 2243, 2241, 2240, 581, -1000, 328, -1000,
	-1000, -1000, 342, -1000, 3322, 630, -1000, 25473, -1000, -1000,
	31663, 1865, 1865, -1000, -1000, 2012, -1000, -1000, -1000, -1000,
	1995, -1000, -1000, -1000, 1381, -1000, 47757, 1052, 8078, -1000,
	2111, -1000, 47757, -1000, 2987, -1000, 286, 1376, 342, 762,
	342, 762, 342, 762, 342, 762, 333, -1000, -1000, -1000,
	1368, -1000, -1000, -1000, 2666, 1994, 224, 202, 3321, -1000,
	2207, 3320, 2207, 2207, -1000, 172, -110, 944, -1000, -1000,
	-1000, -1000, -1000, -1000, 2233, -1000, -1000, -1000, -1000, 1719,
	1719, 2226, 2224, 473, -1000, -1000, 31044, 615, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 601, 50957, -1000, 8078, 1360,
	-1000, 1932, -1000, 843, -1000, -1000, 2913, 2279, 3363, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 47757,
	3253, 24854, 177, -1000, -1000, -1000, 2215, -1000, 2207, -1000,
	-1000, 1718, -127, -1000, -262, 1990, 1984, -1000, -1000, 47757,
	-1000, 47757, 598, -1000, 50957, 1345, -1000, 8078, -1000, -1000,
	3386, -1000, 3364, 976, 976, 342, 342, 342, 342, -1000,
	-1000, 47757, -1000, 1325, -1000, -1000, -1000, 1471, -1000, -1000,
	-1000, -1000, 2206, -140, -1000, -1000, 2200, -1000, -1000, -1000,
	1286, 2323, -1000, -1000, -1000, -1000, -1000, 2037, 682, -1000,
	1119, -1000, 1711, -1000, 30425, 47757, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 47757, 7456, -1000, 1248, -1000, -1000,
	1932, 47757, -1000,
}

var yyPgo = [...]int{
	0, 172, 3414, 258, 192, 4049, 103, 269, 260, 245,
	266, 4047, 4046, 4045, 4044, 3173, 3171, 4043, 4042, 4040,
	4039, 4038, 4037, 4035, 4021, 4018, 4017, 4016, 4015, 4013,
	4010, 4009, 4007, 4006, 4005, 4004, 4003, 4002, 4001, 3999,
	3992, 3991, 3988, 3987, 3986, 3983, 3981, 263, 3980, 3979,
	3978, 3970, 3967, 3964, 3963, 3962, 3961, 3960, 3959, 3958,
	3955, 3953, 3951, 3950, 3948, 3947, 3946, 3944, 3943, 3942,
	3941, 3940, 3939, 3938, 3937, 3936, 3935, 3931, 3923, 262,
	3922, 3920, 229, 3919, 3169, 3918, 3917, 3916, 3915, 3914,
	3913, 3909, 3908, 249, 3907, 3906, 3905, 3904, 3903, 3902,
	3901, 3894, 3889, 3888, 3887, 3883, 264, 3882, 3881, 3880,
	3879, 267, 3878, 225, 3875, 177, 145, 3874, 3858, 3856,
	3855, 3854, 3853, 3852, 3850, 3849, 3848, 3842, 3840, 3838,
	246, 201, 65, 3836, 47, 3834, 3832, 222, 3831, 153,
	3830, 150, 3829, 3828, 3827, 3826, 3825, 3824, 3823, 3822,
	3819, 3818, 3806, 3805, 3802, 3801, 3798, 3792, 3791, 3790,
	3789, 3788, 3787, 3785, 3784, 45, 3783, 271, 3782, 78,
	3780, 175, 3779, 75, 3777, 184, 132, 278, 2466, 281,
	270, 197, 174, 105, 3776, 317, 3775, 210, 237, 191,
	121, 3772, 142, 3769, 273, 56, 35, 265, 147, 52,
	168, 140, 3768, 221, 95, 110, 3755, 3754, 143, 3753,
	250, 183, 3751, 108, 3750, 3748, 3747, 3746, 3745, 203,
	194, 3743, 3742, 135, 3741, 3735, 71, 129, 3732, 76,
	126, 170, 124, 3730, 179, 128, 90, 3729, 117, 102,
	3728, 155, 3727, 3726, 3725, 3722, 190, 3721, 3719, 139,
	64, 3718, 3717, 3715, 72, 3714, 81, 3713, 55, 3711,
	59, 3710, 3709, 3708, 3707, 3706, 3705, 3704, 3703, 3698,
	3697, 3696, 3695, 53, 3694, 3693, 3691, 3690, 7, 15,
	14, 3689, 27, 3688, 171, 3687, 3686, 166, 3671, 199,
	3670, 3669, 92, 89, 3667, 94, 165, 3664, 10, 26,
	74, 3662, 3655, 231, 186, 107, 154, 3654, 279, 3651,
	3650, 3649, 162, 3648, 628, 3647, 3645, 3644, 3643, 3642,
	3641, 136, 3640, 1, 223, 41, 3639, 133, 134, 3638,
	36, 32, 3636, 42, 123, 204, 138, 100, 3635, 3634,
	3632, 665, 205, 99, 39, 0, 104, 228, 156, 3630,
	3628, 3627, 261, 3625, 244, 211, 240, 251, 280, 176,
	3624, 3623, 66, 3622, 163, 38, 51, 146, 67, 21,
	230, 3618, 1058, 8, 187, 3617, 214, 3616, 254, 16,
	116, 149, 3615, 3614, 33, 272, 3611, 3610, 3609, 130,
	3604, 3601, 122, 85, 3598, 3596, 3595, 3594, 48, 3592,
	185, 13, 3590, 113, 3589, 259, 3587, 207, 141, 182,
	181, 167, 233, 238, 82, 80, 3586, 1833, 159, 101,
	22, 3584, 234, 3583, 180, 125, 3582, 86, 3581, 257,
	275, 209, 3580, 188, 9, 44, 30, 28, 43, 11,
	313, 206, 3578, 3577, 23, 49, 3576, 50, 3575, 18,
	3573, 3572, 37, 3571, 57, 5, 3570, 3568, 17, 20,
	3567, 34, 212, 173, 127, 97, 58, 3566, 3564, 137,
	152, 3563, 157, 158, 161, 3562, 79, 3561, 3560, 3559,
	3558, 290, 3557, 268, 3554, 3553, 3552, 3550, 3548, 3547,
	3546, 3545, 3543, 220, 3539, 106, 40, 3538, 3537, 3536,
	3535, 84, 151, 3533, 3532, 3530, 3527, 29, 144, 3526,
	12, 3525, 24, 19, 31, 3524, 98, 3523, 3, 195,
	3522, 3521, 4, 3520, 3516, 2, 3515, 3514, 119, 3513,
	96, 25, 169, 118, 3511, 3510, 83, 219, 148, 3509,
	3508, 88, 252, 208, 3506, 93, 239, 274, 3505, 216,
	3504, 3503, 3501, 3498, 3496, 3494, 1207, 3493, 3492, 256,
	61, 91, 3490, 235, 112, 3489, 3476, 87, 164, 115,
	114, 54, 77, 3475, 111, 202, 3474, 200, 3471, 243,
	3470, 3465, 109, 3464, 3461, 3460, 3454, 196, 3452, 3451,
	198, 236, 3447, 3446, 277, 3443, 3441, 3433, 3430, 3429,
	3427, 3426, 3422, 3419, 3417, 255, 232, 3412,
}

//line mysql_sql.y:12521
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 600, 603, 603, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 121,
	121, 336, 336, 337, 337, 123, 332, 332, 331, 331,
	124, 125, 126, 579, 579, 127, 128, 157, 578, 578,
	159, 159, 159, 159, 159, 452, 122, 122, 122, 122,
	122, 163, 163, 163, 163, 163, 120, 585, 585, 585,
	586, 586, 117, 146, 145, 148, 148, 147, 147, 144,
	144, 140, 143, 143, 142, 142, 141, 136, 138, 138,
	137, 139, 139, 118, 106, 119, 527, 527, 526, 526,
	525, 525, 477, 477, 478, 478, 323, 323, 323, 524,
	524, 524, 523, 523, 522, 522, 521, 521, 519, 519,
	520, 518, 517, 517, 517, 515, 515, 515, 511, 511,
	513, 512, 512, 514, 506, 506, 509, 509, 507, 507,
	507, 507, 510, 505, 505, 505, 504, 504, 105, 105,
	105, 419, 419, 104, 104, 433, 433, 433, 433, 433,
	431, 431, 431, 431, 431, 431, 430, 430, 429, 429,
	434, 434, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 94, 94, 94, 94, 94, 94, 99,
	99, 99, 100, 591, 591, 590, 590, 592, 592, 592,
	592, 593, 593, 97, 97, 97, 98, 428, 428, 428,
	95, 96, 96, 418, 418, 423, 423, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	427, 427, 427, 425, 425, 424, 424, 426, 426, 88,
	88, 88, 91, 90, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 89, 89, 89, 89, 89, 89, 83,
	83, 83, 83, 83, 82, 82, 84, 84, 415, 415,
	414, 101, 101, 102, 588, 588, 587, 589, 589, 589,
	589, 103, 109, 109, 109, 109, 109, 109, 109, 109,
	108, 108, 111, 111, 110, 112, 93, 93, 93, 93,
	93, 93, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 552, 552, 552, 554, 554,
	350, 351, 604, 353, 349, 349, 349, 548, 548, 549,
	550, 551, 551, 551, 107, 14, 209, 209, 451, 451,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 81, 86, 86, 87, 288, 288, 289, 283, 283,
	290, 290, 162, 291, 291, 291, 296, 296, 297, 297,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 268, 268, 268, 263, 263, 263, 263, 264,
	264, 265, 265, 266, 266, 266, 266, 267, 267, 342,
	342, 292, 292, 292, 294, 294, 293, 287, 285, 285,
	285, 285, 285, 285, 285, 286, 286, 286, 286, 295,
	295, 79, 85, 85, 85, 85, 566, 566, 80, 577,
	577, 481, 481, 364, 364, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 487, 488, 360, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 54, 57,
	58, 161, 53, 53, 53, 404, 404, 52, 605, 605,
	335, 335, 67, 66, 56, 68, 69, 70, 71, 72,
	73, 51, 65, 65, 65, 65, 65, 65, 65, 65,
	76, 500, 500, 607, 607, 607, 74, 75, 480, 480,
	480, 64, 63, 62, 61, 60, 60, 50, 50, 49,
	49, 55, 152, 59, 153, 153, 357, 357, 357, 359,
	359, 355, 606, 606, 447, 447, 358, 358, 48, 48,
	48, 48, 77, 356, 356, 334, 354, 354, 354, 12,
	12, 10, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 26,
	27, 29, 412, 412, 409, 28, 20, 19, 19, 23,
	22, 18, 18, 21, 24, 25, 25, 9, 9, 9,
	9, 15, 15, 16, 182, 182, 235, 235, 560, 560,
	556, 556, 557, 557, 557, 558, 558, 559, 559, 113,
	494, 494, 494, 494, 494, 494, 8, 8, 204, 204,
	493, 493, 493, 493, 493, 493, 416, 416, 416, 537,
	537, 537, 538, 203, 203, 198, 198, 495, 495, 381,
	539, 539, 503, 503, 502, 502, 501, 501, 201, 201,
	202, 202, 185, 185, 131, 131, 508, 508, 508, 508,
	516, 516, 476, 476, 273, 273, 325, 325, 326, 326,
	175, 175, 176, 176, 176, 176, 176, 176, 594, 594,
	595, 596, 597, 597, 598, 598, 598, 599, 599, 599,
	599, 599, 545, 545, 547, 547, 546, 200, 200, 196,
	196, 197, 197, 197, 195, 195, 194, 193, 193, 192,
	190, 190, 190, 191, 191, 191, 208, 208, 178, 178,
	178, 177, 177, 177, 177, 177, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 179, 179,
	553, 553, 553, 482, 482, 482, 490, 490, 305, 305,
	306, 306, 486, 486, 304, 304, 180, 180, 181, 181,
	181, 181, 303, 303, 302, 183, 183, 189, 188, 188,
	184, 184, 184, 184, 313, 313, 312, 312, 312, 312,
	116, 129, 129, 130, 207, 207, 311, 310, 310, 310,
	310, 206, 206, 205, 205, 199, 199, 187, 187, 187,
	187, 309, 186, 307, 584, 584, 583, 583, 582, 580,
	580, 580, 581, 581, 581, 581, 529, 529, 529, 529,
	529, 343, 343, 343, 348, 348, 346, 346, 346, 346,
	346, 352, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 39, 218, 219, 40, 220, 220,
	221, 221, 222, 222, 223, 224, 225, 225, 225, 225,
	38, 210, 210, 211, 211, 212, 212, 213, 214, 214,
	214, 217, 215, 216, 216, 602, 602, 601, 37, 37,
	30, 166, 166, 167, 167, 167, 169, 169, 269, 269,
	269, 168, 168, 170, 170, 170, 561, 563, 563, 565,
	564, 564, 564, 567, 567, 567, 567, 567, 568, 568,
	568, 568, 569, 569, 31, 149, 149, 173, 173, 154,
	572, 572, 572, 571, 571, 573, 573, 574, 574, 329,
	329, 330, 330, 164, 165, 165, 156, 151, 172, 172,
	172, 172, 172, 174, 174, 237, 237, 150, 155, 158,
	160, 562, 570, 570, 570, 413, 413, 410, 411, 411,
	408, 407, 407, 407, 576, 576, 575, 575, 575, 344,
	344, 32, 403, 403, 405, 406, 406, 406, 397, 397,
	397, 397, 36, 401, 401, 402, 402, 402, 402, 402,
	402, 402, 398, 398, 400, 400, 396, 396, 396, 396,
	396, 396, 396, 35, 171, 171, 395, 395, 392, 392,
	390, 390, 391, 391, 389, 389, 389, 393, 393, 43,
	78, 44, 45, 46, 42, 394, 394, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 133, 132, 132,
	132, 132, 132, 135, 135, 328, 328, 327, 327, 134,
	270, 270, 41, 248, 248, 468, 468, 463, 463, 463,
	463, 463, 484, 484, 484, 464, 464, 464, 465, 465,
	465, 467, 467, 467, 466, 466, 466, 466, 466, 483,
	483, 485, 485, 485, 435, 435, 436, 436, 436, 439,
	439, 455, 455, 456, 456, 454, 454, 461, 461, 460,
	460, 459, 459, 458, 458, 457, 457, 457, 457, 450,
	450, 449, 449, 437, 437, 437, 437, 437, 438, 438,
	438, 448, 448, 453, 453, 301, 301, 300, 300, 256,
	256, 257, 257, 299, 299, 254, 254, 255, 255, 255,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 535, 535, 536, 259,
	259, 271, 271, 271, 271, 271, 271, 258, 258, 260,
	260, 236, 236, 234, 234, 226, 226, 226, 226, 226,
	227, 227, 228, 228, 229, 229, 229, 233, 233, 232,
	232, 232, 232, 230, 230, 231, 231, 231, 231, 231,
	231, 421, 421, 532, 532, 533, 533, 528, 528, 528,
	531, 531, 531, 531, 531, 531, 531, 534, 534, 534,
	530, 530, 238, 322, 322, 322, 345, 345, 345, 345,
	347, 321, 321, 321, 253, 253, 252, 252, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	420, 420, 361, 361, 362, 362, 282, 281, 281, 281,
	281, 281, 279, 280, 278, 278, 278, 278, 278, 275,
	275, 274, 274, 274, 276, 276, 276, 276, 276, 399,
	399, 272, 272, 262, 262, 262, 261, 261, 261, 462,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	277, 319, 319, 319, 320, 320, 320, 320, 320, 320,
	320, 320, 371, 371, 377, 377, 544, 544, 543, 239,
	239, 239, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 249, 249, 249, 444, 444, 444, 444, 445, 445,
	445, 445, 446, 446, 446, 442, 442, 443, 443, 382,
	383, 383, 491, 491, 492, 492, 440, 440, 441, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 499, 499, 499, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	555, 555, 555, 540, 540, 540, 541, 541, 541, 541,
	541, 541, 541, 541, 541, 541, 541, 541, 542, 542,
	542, 542, 542, 542, 542, 542, 542, 542, 542, 542,
	542, 542, 542, 542, 542, 317, 317, 317, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 384, 384, 385, 385,
	496, 496, 496, 496, 496, 496, 497, 497, 498, 498,
	498, 498, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
	489, 369, 314, 314, 314, 386, 378, 378, 379, 379,
	380, 380, 372, 372, 372, 372, 372, 372, 373, 373,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 374, 374, 376, 376, 388, 388, 388, 387,
	387, 387, 387, 387, 387, 387, 251, 251, 251, 251,
	366, 366, 366, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 241, 241, 241, 241, 245,
	245, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 246, 246, 246, 246, 246,
	244, 244, 244, 244, 244, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 114, 115, 115, 243, 324, 324,
	469, 469, 472, 472, 470, 470, 471, 473, 473, 473,
	474, 474, 474, 475, 475, 475, 479, 479, 333, 333,
	333, 341, 341, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 5, 1, 3, 3, 1, 2, 2, 2,
	1, 2, 2, 3, 4, 4, 6, 1, 1, 1,
	2, 4, 6, 1, 4, 1, 3, 3, 4, 4,
	4, 4, 3, 3, 2, 4, 4, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 2, 2, 0, 1, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 3, 4, 4, 1, 2, 9, 7, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 2, 4, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	5, 3, 4, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 1,
	1, 7, 7, 7, 8, 8, 0, 4, 7, 0,
	3, 0, 2, 0, 1, 1, 1, 1, 4, 2,
	2, 3, 3, 4, 5, 3, 4, 4, 2, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	3, 3, 2, 5, 5, 0, 2, 7, 0, 1,
	0, 1, 5, 5, 3, 3, 2, 4, 4, 4,
	4, 4, 1, 1, 1, 3, 3, 1, 1, 1,
	6, 0, 1, 1, 1, 1, 5, 5, 0, 1,
	1, 3, 3, 3, 4, 7, 7, 5, 4, 7,
	8, 3, 3, 2, 3, 4, 0, 2, 2, 0,
	2, 2, 1, 1, 1, 1, 0, 1, 5, 5,
	6, 4, 3, 1, 3, 1, 1, 3, 5, 2,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 1, 3, 1, 4, 6, 6, 4, 4,
	4, 4, 4, 3, 6, 3, 5, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 5, 5, 1, 3,
	2, 1, 5, 4, 4, 2, 0, 5, 4, 0,
	1, 3, 3, 1, 3, 1, 3, 1, 3, 4,
	0, 1, 0, 1, 1, 3, 1, 1, 0, 4,
	1, 3, 2, 1, 0, 8, 0, 4, 7, 4,
	0, 2, 0, 2, 0, 2, 0, 4, 1, 3,
	1, 1, 6, 4, 5, 7, 4, 5, 0, 1,
	3, 8, 0, 6, 0, 4, 6, 1, 1, 1,
	1, 1, 2, 3, 1, 3, 6, 0, 3, 0,
	1, 2, 4, 4, 0, 1, 3, 1, 3, 3,
	0, 1, 1, 0, 2, 2, 0, 2, 3, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 7, 7,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 2,
	0, 4, 0, 2, 0, 2, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 3, 1, 1, 1,
	4, 4, 4, 3, 2, 2, 2, 3, 2, 3,
	4, 1, 3, 4, 0, 2, 1, 1, 2, 2,
	2, 0, 1, 2, 4, 1, 3, 1, 3, 2,
	3, 1, 4, 3, 0, 1, 1, 2, 5, 2,
	2, 2, 0, 2, 3, 3, 0, 1, 3, 1,
	3, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 3,
	0, 1, 1, 3, 1, 3, 0, 1, 1, 1,
	14, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 0, 1, 2, 9, 9,
	7, 1, 2, 3, 3, 3, 0, 4, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 4,
	1, 1, 1, 3, 3, 4, 3, 3, 0, 1,
	1, 1, 0, 2, 7, 8, 10, 2, 2, 8,
	0, 3, 3, 0, 3, 0, 3, 0, 5, 1,
	3, 0, 3, 3, 0, 2, 9, 8, 0, 2,
	2, 3, 3, 0, 2, 0, 2, 4, 4, 4,
	4, 1, 0, 2, 2, 1, 3, 2, 1, 3,
	2, 1, 3, 2, 0, 1, 3, 4, 3, 1,
	1, 4, 1, 3, 1, 1, 1, 1, 0, 1,
	1, 1, 11, 0, 2, 3, 3, 2, 2, 3,
	1, 1, 1, 3, 3, 4, 0, 2, 2, 2,
	2, 2, 2, 6, 0, 4, 1, 1, 0, 3,
	0, 1, 1, 2, 4, 4, 4, 0, 1, 8,
	2, 4, 4, 4, 9, 0, 2, 11, 9, 11,
	8, 6, 9, 7, 10, 7, 6, 2, 2, 9,
	4, 5, 3, 0, 4, 1, 3, 0, 3, 6,
	0, 2, 10, 0, 2, 0, 2, 0, 3, 2,
	4, 3, 0, 2, 1, 0, 2, 3, 0, 2,
	3, 0, 2, 1, 0, 3, 2, 4, 3, 0,
	1, 0, 1, 1, 0, 6, 0, 3, 5, 0,
	4, 0, 3, 1, 3, 4, 5, 0, 3, 1,
	3, 2, 3, 1, 2, 0, 4, 6, 5, 0,
	2, 0, 2, 4, 5, 4, 5, 1, 5, 6,
	5, 0, 3, 0, 1, 1, 3, 3, 3, 0,
	4, 1, 3, 3, 3, 0, 1, 1, 3, 2,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 5, 4, 5, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 5, 5, 5, 5,
	0, 1, 1, 3, 1, 1, 1, 1, 1, 7,
	9, 7, 9, 2, 1, 7, 9, 7, 9, 8,
	5, 0, 1, 0, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 3, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 3, 3, 2, 2,
	1, 5, 6, 4, 1, 1, 1, 5, 4, 1,
	1, 2, 0, 1, 1, 2, 5, 0, 1, 1,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 2, 2, 2, 0, 4, 7, 3, 3, 0,
	3, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 3, 5, 2, 2,
	2, 2, 4, 1, 1, 2, 5, 6, 8, 6,
	6, 6, 1, 1, 1, 1, 1, 1, 3, 9,
	1, 4, 4, 4, 7, 9, 7, 7, 7, 9,
	7, 7, 0, 2, 0, 1, 1, 2, 4, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 5, 0, 1, 3,
	0, 1, 0, 2, 0, 2, 0, 1, 6, 8,
	8, 6, 6, 5, 5, 5, 6, 6, 6, 6,
	5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 1, 1, 1, 4, 4, 6, 8, 6, 4,
	5, 4, 4, 4, 3, 4, 6, 6, 7, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 8, 4, 2,
	3, 2, 4, 2, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 4, 4, 4, 0, 1, 2, 3,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 0, 1, 1, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 1, 1,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 3, 4, 4, 5, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 4, 1, 2, 3, 5, 1, 1, 3,
	0, 1, 0, 3, 0, 3, 3, 0, 3, 5,
	0, 3, 5, 0, 1, 1, 0, 1, 1, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -600, -603, -2, -5, 626, -1, -4, -115, -88,
	-7, -14, -117, -118, -8, -113, -9, -10, -12, -92,
	-108, -110, -112, -111, -47, -11, -107, -82, -83, -94,
	-101, -104, -105, -106, -119, -114, -116, -175, -120, -121,
	-122, -163, -125, -127, -128, 616, -89, -90, -91, -33,
	-32, -31, -30, -149, -154, -157, -159, -123, 549, 622,
	452, 14, 501, -15, -16, -545, -17, 261, -349, -350,
	-351, -353, -604, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -152,
	-153, -77, -57, -78, -58, -161, -124, -80, -79, -85,
	-81, -86, -151, -156, -13, -162, -87, 236, -84, 76,
	-95, -96, -97, -98, -99, -100, -102, -103, 376, 382,
	439, 615, 61, -176, -178, 636, 637, 640, 536, 539,
	160, 161, 163, 164, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 232, 16, 544,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-150, -25, -155, -23, -158, -160, -126, 256, 255, 38,
	322, 323, 324, 380, 254, 233, 235, 15, 31, 42,
	355, -177, 83, 537, 234, -179, 13, 642, -6, -3,
	-2, -136, -140, -144, -147, -148, -145, -146, -4, -115,
	118, 246, 617, -345, 372, 618, 620, 619, 86, 94,
	-338, -340, 452, 261, 376, 382, 615, 637, 640, 536,
	539, 551, 552, 553, 554, 555, 556, 557, 558, 560,
	561, 562, 563, 564, 565, 566, 576, 577, 567, 568,
	569, 570, 571, 572, 573, 574, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	504, 601, 602, 603, 604, 532, 559, 595, 596, 597,
	598, 353, 354, 541, 273, 297, 407, 303, 310, 160,
	179, 173, 202, 193, 537, 168, 277, 315, 278, 93,
	163, 487, 108, 464, 436, 166, 292, 294, 296, 533,
	534, 366, 299, 531, 298, 300, 302, 535, 279, 356,
	189, 184, 291, 275, 182, 280, 40, 281, 207, 282,
	283, 546, 460, 352, 466, 307, 52, 434, 183, 461,
	295, 463, 211, 215, 478, 479, 177, 178, 468, 481,
	206, 209, 210, 253, 349, 350, 43, 543, 265, 482,
	213, 205, 200, 490, 311, 309, 204, 176, 199, 276,
	65, 217, 216, 218, 430, 431, 432, 433, 284, 285,
	370, 477, 196, 185, 357, 169, 23, 485, 260, 465,
	383, 286, 304, 312, 212, 214, 267, 272, 545, 438,
	271, 308, 483, 181, 264, 293, 259, 486, 170, 385,
	287, 164, 301, 480, 489, 64, 398, 175, 167, 633,
	250, 161, 269, 274, 288, 289, 290, 530, 314, 313,
	305, 538, 197, 266, 203, 187, 174, 198, 162, 268,
	488, 399, 613, 355, 417, 195, 192, 270, 243, 484,
	467, 165, 421, 400, 190, 316, 608, 609, 610, 371,
	348, 317, 318, 188, 257, 458, 459, 321, 427, 339,
	401, 437, 408, 402, 224, 225, 325, 470, 472, 208,
	611, 328, 329, 330, 462, 331, 332, 333, 334, 375,
	56, 58, 95, 98, 97, 638, 639, 63, 29, 361,
	364, 396, 403, 341, 614, 542, 338, 342, 343, 365,
	25, 419, 387, 423, 422, 48, 49, 50, 53, 54,
	55, 57, 59, 60, 51, 529, 380, 393, 491, 45,
	47, 390, 27, 367, 418, 440, 337, 420, 451, 46,
	449, 450, 471, 26, 369, 368, 62, 44, 426, 428,
	429, 319, 335, 378, 623, 492, 373, 389, 392, 374,
	340, 363, 394, 67, 66, 386, 624, 381, 379, 336,
	547, 548, 344, 575, 358, 435, 526, 525, 524, 523,
	522, 521, 520, 519, 322, 323, 324, 404, 405, 406,
	416, 409, 410, 411, 412, 413, 414, 415, 454, 455,
	625, 473, 475, 476, 474, 238, 641, 359, 360, 241,
	627, 628, 96, 629, 631, 630, 28, 632, 635, -426,
	-424, -345, 537, 615, 382, 536, 539, 376, 355, 637,
	640, 380, 261, 322, 323, 324, 452, 353, -220, -345,
	641, -185, 245, 39, -234, -345, -185, -84, -16, -15,
	-177, -178, -234, 240, -354, 24, 434, -93, 435, 236,
	83, 77, -345, -9, -106, -8, -113, -82, -175, 439,
	-352, -345, 322, 322, -352, 240, -347, 271, 415, -345,
	-481, 246, -430, -403, 272, -429, -405, -432, -406, 32,
	232, 234, 233, 549, 268, 16, 380, 242, 14, 13,
	381, 254, 25, 26, 28, 15, 382, 384, 29, 385,
	388, 389, 390, 42, 393, 394, 261, 86, 94, 89,
	279, -219, -345, -380, -372, 115, -375, -367, -368, -370,
	-323, -519, -365, 83, 142, 143, 150, 116, 643, -369,
	-462, 36, 118, 555, 559, 595, 502, -315, -316, -317,
	-318, -319, -320, 540, -345, -520, -518, 89, 99, 101,
	105, 106, 104, 102, 154, 186, 103, 90, 155, -178,
	86, -540, 565, -339, 588, 601, 602, 603, 604, 587,
	61, -489, -498, 239, -496, 153, 191, 257, 187, 14,
	148, 427, 188, 596, 597, 598, 562, 584, 504, 566,
	576, 591, 557, 558, 560, 552, 553, 554, 556, 567,
	569, 583, -499, 579, 589, 590, 575, 599, 600, 592,
	593, 594, 631, 88, 87, 582, 581, 568, 563, 564,
	570, 551, 561, 571, 572, 580, 585, 586, 364, 108,
	365, 366, 494, 356, 367, 246, 434, 70, 368, 369,
	370, 371, 372, 501, 373, 71, 374, 363, 261, 417,
	375, 190, 208, 506, 505, 507, 498, 495, 493, 496,
	497, 499, 500, 573, 574, 578, -129, -130, 606, -594,
	-308, -595, 6, 7, 8, 9, -596, 155, -585, 436,
	545, 89, 315, 353, 17, 494, 634, 535, 634, 535,
	165, 162, -417, 165, 114, 170, 169, -417, 634, 167,
	633, 325, 267, -394, -166, 353, 417, 331, 95, 271,
	-397, -395, 533, -483, 319, 315, 291, 241, 111, -167,
	251, 250, 109, 494, 239, 391, 310, 56, 58, -556,
	-557, 229, 230, 231, -547, 527, -546, -345, 634, 366,
	97, 98, 633, 27, 240, 377, 267, 472, 470, 471,
	473, 474, 475, 476, -65, -500, -480, 467, 466, -358,
	459, 465, 457, 469, 460, 354, 333, 549, 332, 232,
	627, 534, 528, -333, 401, 437, 491, 492, 378, 438,
	478, 480, 461, 108, 194, 191, 241, 243, 240, 633,
	353, 494, 417, 95, 331, 240, -556, 162, 478, 480,
	436, 271, 415, 41, -423, 427, -422, -424, 479, 490,
	87, 88, 477, -333, 108, 458, 458, -594, -308, -176,
	-178, -116, -545, 535, 634, 241, 353, 417, 271, 242,
	240, 530, 533, 243, 494, 239, 322, 377, 267, 331,
	95, 167, 633, -482, -553, 32, -490, 226, 227, 228,
	33, 34, -1, 122, 642, -372, -372, -6, 645, -6,
	-372, -345, -345, 157, -241, -245, -242, -244, -243, -247,
	-246, 191, 192, 153, 195, 201, 197, 198, 199, 200,
	202, 203, 204, 205, 206, 209, 210, 207, 31, 208,
	257, 187, 188, 189, 190, 211, 173, 193, 542, 219,
	174, 220, 175, 221, 176, 222, 177, 178, 223, 179,
	182, 183, 184, 185, 181, 156, -209, 89, 32, 83,
	156, 89, -201, 263, -185, -234, -226, 156, 643, -201,
	-594, -194, -195, 11, -234, -321, -345, 436, 125, -93,
	77, -93, 435, 77, -548, -549, -550, -552, 236, 435,
	434, -111, 156, 279, 17, -352, -352, 81, -234, -405,
	271, -430, -403, 36, 80, 157, 244, 157, 80, 83,
	378, 353, 417, 379, 494, 240, 391, 243, 271, 392,
	353, 417, 240, 243, 494, 271, 353, 240, 243, 417,
	271, 392, 353, 457, 458, 243, 27, 383, 386, 387,
	458, -504, 490, 157, 114, 111, 112, 113, -372, 132,
	-387, 125, 126, 127, 128, 129, 130, 131, 139, 138,
	149, 142, 143, 144, 145, 146, 147, 148, 140, 141,
	135, 115, 133, 137, 134, 117, 152, -178, -372, -380,
	61, -370, -370, -370, -370, -345, -462, -377, -372, 83,
	83, 83, 83, 83, 156, 102, 89, -372, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	-497, 83, 83, -384, -385, 83, 83, -365, -321, 83,
	89, 89, 83, 83, 83, 89, 83, 83, 83, -385,
	-385, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, -195, 157, -194, 83,
	-194, -195, -179, -178, 32, 33, 32, 33, 32, 33,
	32, 33, -597, 624, 83, 99, 638, 224, 17, -345,
	633, -345, 89, 538, 89, 538, 483, 544, 168, 169,
	170, -392, 246, -392, -392, -218, -345, -220, 377, 243,
	530, 243, -167, -392, -392, -392, -392, -392, 242, -392,
	24, 240, 240, 240, 240, -392, 501, 125, 125, 59,
	-558, 172, 157, -547, -200, 83, 89, -357, 133, 137,
	-357, -304, 18, -304, 24, 269, 269, 269, -357, 309,
	-605, -606, 17, 135, -355, -606, -355, -355, -357, -607,
	242, 468, 43, 270, 269, -196, -197, 22, -196, 462,
	458, -447, 463, 464, -359, -606, -358, -357, -357, -358,
	-357, -357, -357, 32, 240, 243, 494, 331, 628, -605,
	-605, 31, 31, -481, -481, -234, -481, -481, 528, -334,
	-345, -481, -481, -481, -288, -289, -234, -559, 245, -591,
	-590, 481, -593, 483, 162, -424, 162, -424, 86, -405,
	271, 271, 157, 125, 24, -425, 125, 136, -424, -424,
	-425, -425, -258, 41, -344, 153, -345, 89, -258, 41,
	-588, -587, -234, -195, -179, -178, 84, 84, 84, 538,
	89, -481, -481, -481, -481, -481, -483, -481, -481, -481,
	-481, -481, -352, -210, -345, -220, 246, -481, -481, -481,
	-481, -180, -181, 144, -372, -345, -180, -3, -138, -137,
	119, 120, 122, 618, 372, 617, 621, 615, -424, 41,
	-475, 399, 398, -469, -471, 83, -470, 83, -470, -470,
	-470, -470, -470, 83, 83, -472, 83, -472, -472, -469,
	-473, 83, -473, -474, 83, -474, -473, -345, -451, 544,
	-378, -380, -345, 39, -493, 61, -175, 83, 31, 83,
	-201, -345, 188, 167, 632, -494, 61, -175, 83, 31,
	-195, -131, 39, -197, 21, 156, 99, 89, -111, -93,
	77, -111, 84, 157, -551, 105, 106, -554, 206, 197,
	-345, -109, 89, -7, -8, -9, -10, -47, -82, -79,
	-175, 233, 536, 539, -521, -519, 83, 32, 426, 80,
	17, -431, 240, 494, 377, 267, 243, 353, -429, -412,
	-409, -407, -344, -405, -408, -407, -434, -321, 458, -132,
	441, 440, 321, -372, -372, -372, -372, -372, 104, 115,
	348, 105, 106, -367, -388, 32, 317, 318, -368, -368,
	-368, -368, -368, -368, -368, -368, -368, -368, -368, -368,
	-376, -386, -462, 83, 135, 133, 137, 134, 117, -370,
	-370, -368, -368, -260, -344, 153, 84, 157, -372, -544,
	-543, 119, -372, -372, -372, -372, -398, -400, -321, 83,
	-345, -541, -542, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 368, 363, 369, 367, 356, 375,
	370, 371, 190, 525, 526, 519, 520, 521, 522, 523,
	524, -378, -378, -372, -541, -378, -314, 33, 32, -380,
	-380, -380, 84, -372, -555, 346, 345, 347, -198, -345,
	-378, 84, 84, 84, 99, -380, -380, -378, -368, -378,
	-378, -378, -378, -542, -314, -314, -314, -314, 144, -380,
	-380, -314, -314, -314, -314, 144, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, 84, 84, 84, 144,
	-380, -196, -130, -502, -501, -372, 41, -131, -197, -598,
	625, 83, -321, -586, 89, 89, 643, 167, 633, 17,
	494, -345, 17, 240, -579, 32, 538, 99, 538, 99,
	484, 485, 166, 169, 168, 89, 115, -345, -345, 35,
	83, -210, -392, -392, -392, -563, -345, 90, -413, -410,
	-407, -345, -345, -403, -345, -334, -234, -392, -392, -392,
	-392, -234, -269, 53, 54, 55, -407, -168, 56, 57,
	-559, -546, 35, -199, -345, -579, -304, -370, -370, -372,
	-407, 271, -605, -357, -357, -335, -334, -359, -354, -359,
	-359, -304, -355, -357, -357, -372, -359, -355, -304, -345,
	458, -304, -304, -447, -357, -356, -345, -356, -392, -334,
	-335, -335, -234, -234, -283, -290, -284, -291, 263, 237,
	361, 362, 235, 233, 11, 234, -298, 310, -393, 502,
	-264, -265, 77, 42, -267, 261, 403, 396, 273, 277,
	93, 278, 436, 279, 242, 281, 282, 283, 298, 300,
	253, 284, 285, 286, 427, 287, 161, 299, 288, 289,
	290, 379, -259, 6, 334, 544, 41, 51, 52, 450,
	449, 547, 274, -345, -563, -561, 31, -345, 31, -413,
	-345, -345, 157, 244, -188, -183, -187, -184, -189, -307,
	-309, -186, 83, -234, -178, -345, 157, 482, 484, 485,
	-591, -425, -591, -425, 244, 32, 426, -428, 426, 32,
	-403, -422, 478, 480, -418, 89, 427, -408, -427, 80,
	153, -501, -425, -425, -427, -427, 152, 157, -589, 483,
	484, 229, -196, 99, -579, -236, -234, -563, -412, -403,
	-345, -481, -236, -236, -236, -347, -347, 83, 156, 36,
	-345, -345, -345, -345, -303, 157, -302, 17, -346, -345,
	35, 89, 156, -303, -139, -137, 121, -372, -6, 617,
	-372, -6, -6, -372, -6, -372, -479, 400, 99, 99,
	-324, 89, -324, 99, 99, 99, 550, 84, 89, -416,
	80, -495, -381, -539, 606, -203, 84, -198, -537, -538,
	-198, -202, -345, -493, -226, 125, 125, 125, -495, -203,
	84, -537, -196, 607, -131, -193, -192, -372, -345, 24,
	-111, -93, -549, 156, 353, 157, -199, -431, -411, -408,
	-433, 144, -345, -419, 157, 544, 646, 87, 244, -576,
	-575, 418, 84, 157, -505, 245, 501, 89, 643, 434,
	224, 225, 104, 348, 105, 106, -462, -380, -376, -370,
	-370, -368, -368, -374, 258, -374, 114, -372, 644, -371,
	-543, 121, -372, 35, 157, 35, 157, 81, 157, 84,
	-469, -372, 156, 84, 84, 17, 17, 84, -372, 84,
	84, 84, 84, 17, 17, -372, 84, 156, 84, 84,
	84, 84, 81, 84, 157, 84, 84, 84, 84, 157,
	-380, -380, -372, -380, 84, 84, 84, -372, -372, -372,
	-380, 84, -372, -372, -372, -372, -372, -372, -372, -372,
	-372, -372, -441, 453, -441, -441, 157, 157, 157, 84,
	-131, 83, 99, 157, 639, -328, -327, 89, -345, -345,
	167, 633, -345, 89, 633, -345, 89, 89, 167, 170,
	170, 169, 89, 36, 24, 308, 24, -219, -221, -222,
	-223, -224, -225, 135, 158, 159, 83, -234, -234, -234,
	-565, 404, -577, 157, 41, -575, 494, -164, 321, -396,
	81, -171, 17, 544, -234, -234, -234, -234, -248, 35,
	17, -182, -235, -345, 83, 84, 157, -404, 81, -345,
	-335, -304, -304, -359, -304, -304, 157, 23, -357, -359,
	-359, -226, -355, -226, 156, -226, -334, -468, 35, -200,
	157, 21, 263, -233, -342, -230, -232, 248, -362, -231,
	251, -533, 249, 247, 109, 252, 306, 110, 242, -342,
	-342, 248, -268, 244, 35, -342, -286, 242, 351, 306,
	249, 21, 263, -285, 242, 110, -345, 248, 252, 249,
	247, -341, 125, -333, 152, 244, 43, 379, -341, 548,
	263, -341, -341, -341, -341, -341, -341, -341, 280, 280,
	-341, -341, -341, -341, -341, -341, -341, -341, -341, -341,
	-341, 162, -341, -341, -341, -341, -341, -341, 83, 326,
	275, 276, 308, -566, 404, 31, 359, 359, 360, -577,
	31, -172, 353, -289, -287, -356, 31, -310, -311, -312,
	-313, 68, 72, 74, 78, 69, 70, 71, 75, 31,
	157, -343, -348, 35, -345, 89, -343, -178, -183, -188,
	-343, 83, -590, -592, 486, 483, 489, -427, -427, 99,
	244, 83, 125, -427, -427, 41, -344, -587, 490, 484,
	-131, 157, 80, -236, -211, -212, -213, -214, -241, -321,
	192, 195, 197, 198, 199, 200, 202, 203, 204, 205,
	206, 209, 210, 207, 208, 257, 187, 188, 189, 190,
	211, 173, 193, 542, 174, 175, 176, 177, 178, 179,
	182, 183, 184, 185, 181, -345, -220, -304, -181, -183,
	-345, 89, -345, 144, -304, 122, -6, 120, -143, -142,
	-141, 123, 615, 621, 122, 122, 122, 84, 84, 84,
	157, 84, 84, 84, 157, 84, 157, 99, -508, 463,
	40, 157, 83, 84, 157, 61, 157, 125, 84, 157,
	-372, -345, 89, -372, 84, 61, -131, 89, 157, -190,
	37, 38, 156, 436, -345, -519, 84, -433, 157, 244,
	156, 156, -409, 382, -344, -411, 21, 544, -321, 39,
	-328, 125, 643, -345, 84, -374, -374, 114, -370, -367,
	84, 122, -372, 120, -239, -241, 398, 399, -372, -239,
	-240, -246, 153, 191, 257, 190, 189, 187, 398, 399,
	-258, -400, 541, -190, 84, -345, -372, -372, 84, -372,
	-372, 17, -345, -258, -368, -372, -195, -195, 84, 84,
	-440, -441, -440, -440, 84, 84, 84, 84, -440, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 83,
	99, 101, 99, 101, -501, -599, 63, 623, 62, 426,
	104, 311, 157, 99, 89, 644, 157, 125, 89, -345,
	-345, 17, 240, -345, 17, 89, 170, 89, -578, 315,
	353, -452, 99, 315, 353, 494, 390, 84, 157, -321,
	-211, -200, 83, -200, -568, 465, 406, 416, -341, -364,
	-363, 355, 42, -487, 427, 412, 413, -410, 271, -334,
	-574, 96, 125, 80, 338, 342, 343, 339, 340, 341,
	-390, -391, -389, -393, -561, 83, 83, -175, 35, 133,
	-171, 83, 83, 35, -463, 328, -241, -234, -182, -345,
	17, 157, -560, 156, -1, -345, -403, -357, -304, -372,
	-372, -304, -357, -357, -359, -345, -226, -463, -241, 35,
	-284, 237, 234, -437, 308, 309, -438, -453, 311, -455,
	83, -238, -321, -231, -532, -533, -392, -345, 110, -532,
	110, 83, -238, -321, -321, -287, -321, -345, -345, -345,
	-345, -294, -293, -321, -296, 32, -297, -345, -345, -345,
	-345, 110, -345, 110, -263, 41, 48, 49, 50, -341,
	-341, 194, -266, 41, 426, 428, 429, -296, 99, 99,
	99, 99, 89, 89, 89, -341, -341, 99, 89, -348,
	89, -534, 169, 45, 46, 99, 99, 99, 99, 41,
	89, -271, 41, 291, 295, 292, 293, 294, 89, 99,
	41, 99, 41, 99, 41, -345, 83, -535, -536, 89,
	327, -452, -568, -341, 359, -424, 125, 125, -364, -573,
	321, -174, 494, 32, -204, 237, 234, -561, -415, -414,
	-321, -187, -187, -187, -187, 68, 68, 68, 68, 73,
	68, 73, 68, -312, -415, -189, -200, -348, 84, -584,
	-583, -582, -580, 76, 245, 77, -378, 483, 487, 488,
	-411, -360, 89, -418, -208, 24, -234, -234, -485, 301,
	302, 84, 157, -241, -306, 19, 156, -306, 118, -6,
	-139, -141, -372, -6, -372, 617, 372, 618, 89, 99,
	99, -516, 447, 442, 444, 110, -381, -503, -502, 61,
	-175, -198, -495, -538, -501, -345, 644, 644, 644, 644,
	61, -175, -495, -208, -508, -192, -191, 44, -345, 99,
	17, -408, -403, 144, 144, -345, 383, -419, 89, 405,
	89, 240, 644, 89, -328, -367, -372, 84, -249, 178,
	177, -249, 35, 84, 84, -470, -470, -469, -472, -469,
	-249, -249, 84, 83, -190, 84, 24, 84, 84, 84,
	-372, 84, 84, 157, -491, 503, -492, 577, -440, -440,
	-440, -440, -440, -440, -440, -440, -440, -440, -440, -440,
	-440, -440, -440, -440, -383, -382, 263, 448, 630, 630,
	448, 630, 630, 84, 157, -541, 157, -336, 316, -336,
	-327, 89, 244, 89, 167, -345, 89, 633, 89, -345,
	89, 308, -345, -345, 89, 89, -223, -241, 84, 35,
	-227, -228, -229, -238, -230, -232, 35, -569, 93, -564,
	89, -345, 90, -570, 93, 407, 155, 357, 41, 408,
	409, 424, 352, 99, 99, 414, -562, -345, -173, 240,
	353, -572, 52, 125, 89, -234, -389, -333, 152, 282,
	331, -301, -300, -345, 89, -227, -175, -234, -227, -227,
	-175, -464, 330, 21, 99, 143, -201, 81, 156, -183,
	-235, -345, 144, 84, -304, -226, -304, -304, -357, -464,
	-175, -449, 312, 83, -447, 83, -447, 110, 339, -456,
	-454, 263, -292, 45, 47, -241, -530, -345, -528, -530,
	-345, -528, -528, -392, -372, -292, -238, 244, 31, 234,
	-295, 336, 337, 342, -420, 307, 115, -420, 157, -190,
	157, -345, -258, -258, 31, 89, 89, -236, 84, 157,
	125, 99, 89, -569, -564, 125, -425, 89, 89, -570,
	-574, 125, -237, 240, -334, 157, -204, -204, -304, 157,
	125, -206, -205, 80, 81, -207, 80, -205, 68, 68,
	-304, -582, -581, 24, -533, -533, -533, 84, 84, 15,
	-213, 41, -305, 20, 21, 144, -305, 122, 120, 122,
	122, -345, 84, 84, -476, 608, -512, -514, 442, 21,
	21, 15, 245, 84, -495, -495, -516, 45, 46, -403,
	-419, 427, -234, 157, 644, -239, -277, 89, -372, 84,
	-372, 84, 89, 84, 89, -195, 21, 84, 157, 84,
	84, 84, 157, 84, 84, -372, 84, -541, -337, 188,
	89, -337, 353, -346, -345, 17, -345, 89, -452, 308,
	308, 240, 238, -175, 84, 157, -175, 89, -567, 418,
	89, 89, 99, 41, 99, 155, 410, -488, -165, 93,
	-236, 32, -204, -571, 93, 125, 643, 83, -341, -341,
	-341, -345, 84, 157, -341, -341, 84, 84, 84, -256,
	544, -465, 262, 99, 143, 99, 143, 99, -343, -183,
	-345, -304, -560, 156, -304, -465, -439, 313, 99, -368,
	83, -368, 83, -448, 310, 83, 84, 157, -345, -321,
	-253, -252, -250, 104, 115, 41, 396, -251, 93, 152,
	296, 299, 298, 274, 297, -282, -361, 80, 402, 336,
	337, -393, 608, 532, 247, 109, 110, 384, -362, 83,
	83, 81, 316, 83, 83, -530, 84, -292, -321, 41,
	-295, 41, 349, 307, -293, -345, 152, -258, 84, -536,
	89, -541, -567, 89, -427, -572, 89, -165, -236, -561,
	-195, -414, -501, -372, 83, -372, 83, 68, 11, 19,
	-365, -372, -380, 246, -6, 618, 372, -273, 609, 89,
	21, 89, -510, 89, -415, -476, -134, -270, -333, 279,
	84, -276, 135, 544, 84, 84, -440, -440, -443, -442,
	-446, 448, 308, 456, -380, 89, 89, 84, 84, 89,
	-345, 167, 89, 643, 89, -452, -452, -345, -215, -241,
	-169, 544, -256, -229, -169, 21, 544, 356, 41, 99,
	41, 411, 89, -173, 125, 105, 106, -329, -330, 89,
	-398, -258, -260, 89, -300, -365, -365, -254, -175, 35,
	-255, -298, -393, 544, -133, -132, -254, 544, 83, -466,
	161, 99, 143, 99, 99, -304, -304, -466, -455, 21,
	84, -434, 84, -434, 83, 125, -368, -454, -457, 61,
	-250, 104, -368, 89, -260, -261, 41, 295, 291, 125,
	125, -262, 41, 275, 276, -272, 83, 306, 15, 194,
	83, 110, 110, -234, -398, -398, -531, 338, 339, 340,
	344, 342, 343, 341, -531, -398, -398, 83, -421, -420,
	-368, -341, -341, 152, -571, -196, -199, -529, -345, 247,
	21, 21, -486, 544, -345, -345, -325, 610, 99, 89,
	444, -273, -477, 611, -506, -447, -258, 125, 84, 75,
	542, 545, 84, -445, 117, 410, 414, -366, -369, 99,
	101, 186, 155, 84, 84, -345, -332, -331, 89, 89,
	89, 308, 543, -170, 60, 490, 89, 90, 405, 89,
	90, 356, -165, 89, 644, 157, 125, 84, -435, 263,
	-175, 157, -298, -333, -134, -435, -257, -299, -345, 89,
	-484, 169, 329, 544, 99, 143, 99, -195, -467, 169,
	329, -438, 84, 84, 84, -434, 99, 84, -461, -458,
	83, -298, 265, 135, 89, 89, 99, 83, -496, 31,
	89, -399, 83, 84, 84, 84, 84, -398, 99, -258,
	-341, 84, 84, 157, 635, 83, 21, -325, -478, 612,
	89, -515, 447, -509, -507, 442, 443, 444, 445, 89,
	543, 65, 546, -444, -445, 414, -366, -369, 606, 454,
	454, 454, 644, 157, 125, -452, -217, -345, 306, 427,
	-330, 89, -401, -436, 315, 21, -298, -341, -436, 84,
	157, -341, -341, 329, 99, 143, 99, -196, 329, -450,
	314, 84, -461, -298, -460, -459, 313, 266, 83, 84,
	-372, -384, -341, 84, -275, -274, 540, -398, -401, 81,
	-401, 81, -401, 81, -401, 81, 84, -258, -345, 247,
	-326, -345, -510, 89, -517, 245, -513, -514, 446, -507,
	21, 444, 21, 21, -135, 157, 65, 114, 455, 455,
	455, -331, 89, 89, -216, 35, 449, 383, -402, 253,
	349, 350, 93, 544, 336, 337, 21, -437, -258, -299,
	-365, -365, 99, 99, 84, 157, -345, 262, 83, -379,
	-373, -372, 262, 84, -345, -281, -279, -280, 80, 461,
	304, 305, 84, -531, -531, -531, -531, -282, 84, 157,
	-524, 83, 99, -512, -511, -513, 21, -510, 21, -510,
	-510, 451, 544, -444, 89, -341, -341, 89, 89, 335,
	-321, 83, -449, -459, -458, -379, 84, 157, -420, -280,
	80, -279, 80, 16, 15, -401, -401, -401, -401, -345,
	-527, 31, 84, -523, -522, -322, -518, -345, 447, 448,
	89, -510, 125, 545, -602, -601, 629, 99, 99, -345,
	-434, -439, 84, -373, -278, 301, 302, 31, 169, -278,
	-526, -525, -323, 84, 157, 156, 89, 546, 89, 84,
	-455, 104, 41, 303, 157, 125, -522, -345, -525, 41,
	-372, 156, -345,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 309, 310, 311, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 0, 0,
	0, 0, 0, 687, 688, 0, 651, 0, 0, 0,
	0, 0, 0, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 0, 334, 330,
	253, 254, 255, 256, 257, 258, 341, 342, 511, 0,
	0, 0, 0, 770, -2, 97, 0, 0, 0, 0,
	323, 0, 314, 314, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, -2, 700, 0,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 394, 395, 396,
	390, 391, 393, 392, -2, 0, 0, 700, 0, 0,
	0, 778, 0, 0, 0, 821, 843, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1356, 1357,
	1358, 1359, 2148, 2118, -2, 1889, 1866, 2042, 2043, 1943,
	1954, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,
	2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198,
	2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208,
	2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218,
	2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228,
	2229, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
	1862, 1863, 1864, 1865, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, -2, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2119,
	2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
	2130, 2131, 2132, 2133, -2, -2, -2, 2137, 2138, 2139,
	2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2149, 2150,
	2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160,
	2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 0,
	307, 305, 1836, 1866, 1889, 1943, 1954, 1955, 1990, 2042,
	2043, 2075, 2118, 2134, 2135, 2136, 2148, 0, 0, 958,
	0, 748, 0, 0, 753, 1305, 748, 335, 689, 690,
	778, 804, 649, 0, 372, 0, 1880, 376, 2125, 0,
	0, 0, 646, 366, 367, 368, 369, 370, 371, 0,
	0, 931, 0, 0, 362, 0, 329, 1945, 2147, 1360,
	0, 0, 0, 0, 0, 196, 1082, 198, 1084, 202,
	210, 0, 0, 0, 215, 216, 219, 220, 221, 222,
	223, 0, 227, 0, 229, 232, 0, 234, 235, 0,
	238, 239, 240, 0, 250, 251, 252, 1085, 1086, 1087,
	-2, 125, 956, 1794, 1680, 0, 1687, 1700, 1711, 1442,
	1443, 1444, 1445, 0, 0, 0, 0, 0, 0, 1453,
	1454, 0, 1484, 2184, 2225, 2226, 0, 1462, 1463, 1464,
	1465, 1466, 1467, 0, 136, 148, 149, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 0, 1741, 1742, 1743, 1651, 1429,
	1356, 0, 2193, 0, 2215, 2220, 2221, 2222, 2223, 2214,
	0, 0, 1636, 0, 1626, 0, 0, -2, -2, 0,
	0, 2015, -2, 2227, 2228, 2229, 2190, 2211, 2219, 2194,
	2195, 2218, 2186, 2187, 2188, 2181, 2182, 2183, 2185, 2197,
	2199, 2210, 0, 2206, 2216, 2217, 2123, 0, 0, 0,
	0, 0, 2165, 150, 151, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1647, -2, -2, 1650, -2, 1653, -2, -2,
	-2, -2, 1658, 1659, -2, 1661, -2, -2, -2, -2,
	-2, -2, -2, 1638, 1639, 1640, 1641, 1630, 1631, 1632,
	1633, 1634, 1635, -2, -2, -2, 804, 881, 0, 804,
	0, 779, 826, 829, 832, 835, 782, 0, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 325, 313, 315, 0, 319, 0, 312, 1118, 1118,
	1118, 0, 0, 0, 0, 1118, 1118, 1118, 1118, 1118,
	0, 1118, 0, 0, 0, 0, 0, 1118, 0, 991,
	1089, 1090, 1091, 1116, 1117, 1190, 0, 0, 0, 705,
	701, 702, 703, 704, 792, 0, 794, 797, 0, 626,
	626, 854, 854, 572, 0, 0, 0, 626, 0, 586,
	578, 0, 0, 0, 626, 0, 0, 799, 799, 0,
	629, 636, 626, 626, -2, 626, 626, 623, 626, 0,
	0, 1130, 592, 593, 594, 578, 578, 597, 598, 599,
	609, 610, 637, 1818, 0, 0, 511, 511, 0, 511,
	511, 0, 511, 511, 511, 0, 707, 1985, 1887, 1960,
	1846, 1945, 2147, 0, 280, 2015, 285, 0, 1888, 1907,
	0, 0, 1925, 0, -2, 0, 351, 804, 0, 0,
	778, 0, 0, 0, 0, 511, 511, 511, 511, 511,
	1189, 511, 511, 511, 511, 511, 0, 0, 0, 511,
	511, 511, 511, 0, 0, 844, 845, 840, 841, 842,
	846, 847, 5, 6, 19, 0, 0, 0, 0, 0,
	0, 104, 103, 0, 1795, 1813, 1746, 1747, 1748, 1800,
	1750, 1804, 1804, 1804, 1804, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1804, 1804, 0, 0, 1793,
	1770, 1802, 1802, 1802, 1800, 1797, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1807, 1807, 1810, 1810, 1807, 0, 408, 406, 407, 1676,
	0, 0, 0, 0, 748, 752, 1303, 0, 0, 0,
	804, -2, 0, 0, 650, 373, 1361, 0, 0, 377,
	0, 378, 0, 0, 0, 397, 0, 400, 385, 386,
	387, 381, 0, 176, 0, 364, 365, 0, 0, 331,
	0, 0, 0, 512, 0, 0, 0, 0, 0, 0,
	207, 203, 211, 214, 224, 231, 0, 243, 245, 248,
	204, 212, 217, 218, 225, 246, 205, 208, 209, 213,
	247, 249, 206, 226, 230, 244, 228, 233, 236, 237,
	242, 0, 177, 0, 0, 0, 0, 0, 1686, 0,
	0, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1680, 0,
	0, 1448, 1449, 1450, 1451, 0, 1455, 0, 1485, 0,
	0, 0, 0, 0, 0, 1740, 1744, 0, 1676, 1676,
	0, 1676, 1672, 0, 0, 0, 0, 0, 0, 1676,
	1609, 0, 0, 1611, 1627, 0, 0, 1613, 1614, 0,
	1617, 1618, 1676, 0, 1676, 1622, 1676, 1676, 1676, 1605,
	1606, 0, 1672, 1672, 1672, 1672, 0, 0, 1672, 1672,
	1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
	1672, 1672, 0, 0, 0, 0, 799, 0, 805, 0,
	-2, 0, 823, 825, 827, 828, 830, 831, 833, 834,
	836, 837, 784, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 0,
	322, 0, 0, 0, 0, 0, 955, 0, 0, 1118,
	1118, 1118, 992, 0, 0, 0, 0, 0, 0, 0,
	0, 1118, 1118, 1118, 1118, 0, 1136, 0, 0, 0,
	707, 706, 0, 793, 0, 0, 0, 854, 0, 0,
	569, 570, 0, 571, 0, 578, 626, 626, 584, 585,
	580, 579, 632, 633, 629, 0, 629, 629, 854, 0,
	603, 604, 605, 626, 626, 611, 800, 0, 612, 613,
	629, 0, 634, 635, 854, 0, 0, 854, 854, 0,
	621, 622, 624, 626, 0, 0, 1118, 0, 642, 580,
	580, 1819, 1820, 0, 0, 1127, 0, 0, 0, 0,
	645, 0, 0, 0, 424, 425, 0, 0, 708, 259,
	263, 0, 266, 0, 1985, 0, 1985, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 303, 304, 0, 0,
	0, 0, 294, 297, 1297, 1298, 1079, 1080, 298, 299,
	343, 344, 0, 799, 822, 824, 818, 819, 820, 0,
	0, 0, 0, 0, 0, 0, 511, 0, 0, 0,
	0, 0, 683, 0, 971, 685, 0, 0, 0, 0,
	0, 862, 856, 858, 926, 136, 862, 8, 121, 118,
	0, 19, 0, 0, 19, 19, 0, 19, 308, 0,
	1816, 1814, 1815, 1749, 1801, 0, 1775, 0, 1776, 1777,
	1778, 1789, 1790, 0, 0, 1771, 0, 1772, 1773, 1774,
	1765, 0, 1766, 1767, 0, 1768, 1769, 306, 405, 0,
	0, 1677, 959, 0, 726, 740, 721, 0, 729, 0,
	0, 1305, 0, 0, 0, 709, 740, 711, 0, 729,
	799, 776, 0, 754, 0, 0, 374, 0, 382, 379,
	0, 383, 0, 0, 399, 401, 402, 403, 388, 389,
	647, 360, 361, 352, 353, 354, 355, 356, 357, 358,
	359, 0, 0, 0, 363, 146, 0, 332, 333, 0,
	0, 0, 190, 191, 192, 193, 194, 195, 197, 181,
	672, 674, 1071, 1083, 0, 1074, 0, 200, 241, 173,
	0, 0, 0, 1681, 1682, 1683, 1684, 1685, 1690, 0,
	1692, 1694, 1696, 1698, 0, 1716, -2, -2, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
	1701, 1714, 1715, 0, 0, 0, 0, 0, 0, 1712,
	1712, 1707, 0, 1468, 1299, 1300, 1446, 0, 0, 1482,
	1486, 0, 0, 0, 0, 0, 0, 1102, 1800, 0,
	137, 1671, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
	1604, 0, 0, 1680, 0, 0, 0, 1673, 1674, 0,
	0, 0, 1564, 0, 0, 1570, 1571, 1572, 0, 735,
	0, 1637, 1610, 1628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 882, 0, 744, 746, 747, 773, 754, 780,
	0, 0, 0, 96, 101, 0, 1157, 0, 0, 0,
	0, 0, 0, 0, 71, 73, 0, 1131, 0, 1133,
	326, 327, 0, 0, 321, 0, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 1007, 1008, 509, 1065,
	0, 0, 0, 1081, 1106, 1114, 0, 0, 0, 0,
	0, 1163, 993, 998, 999, 1000, 994, 995, 1001, 1002,
	0, 795, 0, 0, 895, 70, 568, 627, 628, 855,
	575, 1945, 580, 854, 854, 587, 581, 588, 631, 589,
	590, 591, 629, 854, 854, 801, 626, 629, 614, 630,
	629, 1305, 618, 0, 625, 1305, 643, 1305, 0, 641,
	595, 596, 1165, 797, 422, 423, 428, 430, 0, 479,
	479, 479, 462, 479, 0, 0, 450, 1821, 0, 0,
	0, 0, 459, 1821, 0, 0, 1821, 1821, 1821, 1821,
	1821, 1821, 1821, 0, 0, 1821, 1821, 1821, 1821, 1821,
	1821, 1821, 1821, 1821, 1821, 1821, 0, 1821, 1821, 1821,
	1821, 1821, 1282, 1821, 0, 478, 1128, 469, 470, 471,
	472, 477, 0, 0, 506, 0, 0, 1006, 0, 509,
	0, 1048, 0, 0, 867, 0, 868, 869, 865, 897,
	921, 921, 0, 921, 901, 1305, 0, 0, 271, 272,
	260, 0, 261, 0, 0, 274, 275, 0, 277, 278,
	279, 286, 1887, 1960, 281, 283, 0, 0, 287, 300,
	301, 302, 0, 0, 292, 293, 0, 0, 346, 347,
	349, 0, 754, 1132, 72, 669, 1301, 670, 671, 675,
	0, 0, 678, 679, 680, 681, 682, 973, 0, 0,
	1057, 1058, 1059, 1060, 854, 0, 863, 0, 859, 927,
	0, 929, 0, 854, 0, 119, 19, 0, 112, 109,
	0, 0, 0, 0, 0, 1796, 1745, 1817, 0, 0,
	0, 1798, 0, 0, 0, 0, 0, 102, 756, 716,
	0, 720, 737, 0, 741, 0, 0, 733, 725, 730,
	0, 0, 750, 717, 1304, 0, 0, 0, 710, 0,
	0, 715, 754, 0, 777, 806, 807, 810, 1362, 0,
	384, 380, 398, 0, 511, 0, 0, 0, 184, 1068,
	0, 185, 189, 179, 0, 0, 0, 1073, 0, 1070,
	1075, 0, 199, 0, 0, 174, 175, 1148, 1157, 0,
	0, 0, 1691, 1693, 1695, 1697, 1699, 0, 1702, 1712,
	1712, 1708, 0, 1703, 0, 1705, 0, 1681, 1452, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	810, 0, 0, 1554, 1555, 0, 0, 1559, 0, 1561,
	1562, 1563, 1565, 0, 0, 0, 1569, 0, 1608, 1629,
	1612, 1615, 0, 1619, 0, 1621, 1623, 1624, 1625, 0,
	804, 804, 0, 0, 1526, 1526, 1526, 0, 0, 0,
	0, 1526, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 1472, 1473, 0, 0, 0, 883,
	774, 0, 0, 0, 0, 0, 1155, 0, 86, 0,
	0, 0, 0, 91, 0, 0, 74, 75, 328, 316,
	318, 0, 0, 1119, 0, 0, 0, 0, 0, 961,
	962, 964, 0, 967, 968, 969, 973, 797, 0, 797,
	1018, 1821, 513, 0, 0, 1067, 0, 1037, 0, 0,
	0, -2, 0, 0, 1114, 0, 0, 0, 1167, 0,
	0, 0, 694, 698, 23, 798, 0, 573, 0, 574,
	626, 582, 583, 854, 606, 607, 0, 0, 854, 626,
	626, 617, 629, 638, 0, 639, 1305, 1167, 0, 0,
	1127, 1233, 1201, 440, 0, 1317, 1318, 480, 0, 1324,
	1333, 1118, 1394, 0, 1333, 0, 0, 1335, 1336, 0,
	0, 0, 0, 463, 464, 0, 449, 0, 0, 0,
	0, 0, 0, 448, 0, 0, 490, 0, 0, 0,
	0, 0, 1822, 1821, 1821, 0, 457, 458, 0, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 1821, 1821,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	1289, 1290, 0, 1018, 1821, 0, 0, 0, 0, 513,
	1035, 1053, 0, 426, 427, 487, 0, 0, 0, 0,
	0, 887, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 797, 922, 0, 924, 925, 899, -2, 0, 867,
	904, 1676, 264, 265, 0, 0, 270, 288, 290, 262,
	0, 0, 0, 289, 291, 295, 296, 345, 348, 350,
	816, 0, 0, 1191, 0, 974, 975, 977, 978, 0,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1871, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 972, 686, 850, 857, 864,
	928, 930, 137, 860, 850, 0, 122, 19, 121, 113,
	114, 0, 19, 0, 0, 0, 0, 1806, 1805, 1791,
	0, 1792, 1803, 1808, 0, 1811, 0, 409, 760, 0,
	0, 740, 742, 0, 0, 740, 0, 0, 749, 0,
	0, 0, 0, 0, 0, 740, 816, 756, 0, 813,
	811, 812, 0, 0, 648, 147, 404, 0, 0, 0,
	0, 0, 673, 0, 1072, 181, 0, 0, 201, 0,
	0, 0, 1157, 1152, 1675, 1704, 1706, 0, 1713, 1709,
	1447, 1456, 1483, 0, 0, 1489, 1501, 1501, 0, 0,
	0, 1492, 1804, 1804, 1495, 1800, 1802, 1800, 1501, 1501,
	0, 1103, 0, 1104, 810, 138, 0, 0, 1560, 0,
	0, 0, 736, 0, 0, 0, 1522, 1524, 1526, 1526,
	1533, 1527, 1534, 1535, 1526, 1526, 1526, 1526, 1540, 1526,
	1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1520,
	0, 0, 1734, 1735, 745, 0, 0, 787, 788, 789,
	790, 791, 0, 0, 61, 61, 1157, 0, 95, 87,
	0, 0, 0, 0, 0, 76, 320, 0, 77, 78,
	0, 0, 85, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 1310, 0, 1022, 1019, 1020, 1021, 0, 1062,
	514, 515, 516, 517, 0, 0, 0, 1066, 0, 0,
	1030, 0, 0, 0, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, -2, 1122, 0, 0, 0, 1310, 1141, 0, 0,
	1146, 1310, 1310, 0, 1175, 0, 1164, 748, 0, -2,
	0, 0, 696, 0, 0, 896, 576, 854, 600, 802,
	803, 1305, 854, 854, 626, 644, 640, 1175, 1166, 0,
	429, 479, 0, 1221, 0, 0, 1227, 0, 1234, 433,
	0, 481, 0, 1323, 1350, 1334, 1350, 1395, 1350, 1350,
	1118, 0, 481, 0, 0, 451, 0, 0, 0, 0,
	0, 447, 484, 810, 434, 436, 437, 438, 488, 489,
	491, 0, 493, 494, 453, 465, 466, 467, 468, 0,
	0, 0, 460, 473, 474, 475, 476, 435, 1250, 1251,
	1252, 1255, 1256, 1257, 1258, 0, 0, 1261, 1262, 1263,
	1264, 1265, 1347, 1348, 1349, 1266, 1267, 1268, 1269, 1270,
	1271, 1272, 1291, 1292, 1293, 1294, 1295, 1296, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 0, 0, 1286, 0,
	0, 0, 1022, 0, 0, 0, 0, 0, 1062, 1037,
	0, 1055, 0, 1049, 1050, 0, 0, 718, 854, 338,
	0, 891, 884, 0, 873, 888, 889, 890, 876, 0,
	878, 0, 874, 875, 854, 866, 898, 923, 900, 903,
	905, 906, 912, 0, 0, 0, 0, 267, 268, 269,
	276, 0, 533, 282, 772, 0, 1302, 676, 677, 1192,
	1193, 684, 0, 979, 848, 0, 0, 848, 117, 120,
	0, 115, 0, 0, 0, 0, 107, 105, 1799, 0,
	0, 762, 161, 0, 0, 0, 738, 0, 743, 740,
	724, 734, 723, 731, 732, 751, 1306, 1307, 1308, 1309,
	740, 714, 713, 775, 760, 808, 809, 0, 1363, 375,
	0, 1069, 181, 186, 187, 188, 182, 180, 1076, 0,
	1078, 0, 1150, 0, 0, 1710, 1488, 1457, 1490, 1502,
	1503, 1491, 0, 1459, 1460, 1493, 1494, 1496, 1497, 1498,
	1499, 1500, 1461, 0, 1105, 1556, 0, 1558, 1566, 1567,
	0, 1616, 1620, 0, 0, 0, 0, 0, 1531, 1532,
	1536, 1537, 1538, 1539, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 804, 1521, 0, 0, 0, 0,
	0, 0, 0, 785, 0, 0, 0, 63, 0, 63,
	1156, 1158, 0, 926, 0, 0, 92, 0, 0, 79,
	80, 0, 0, 0, 954, 957, 963, 965, 0, 0,
	0, 1311, 1312, 1314, 1315, 1316, 0, 990, 0, 0,
	1010, 1011, 1012, 1024, 0, 0, 0, 519, 520, 0,
	0, 0, 532, 528, 529, 530, 510, 1061, 1044, 0,
	0, 1033, 0, 0, 1043, 0, 1123, 1821, 1821, 1821,
	0, 0, 1235, 1821, 1821, 0, 1143, 1145, 0, 0,
	1239, 1178, 0, 0, 1169, 0, 921, 0, 0, 854,
	695, 698, 699, 796, 577, 615, 619, 616, 854, 1178,
	421, 1199, 0, 0, 0, 0, 0, 1231, 0, 0,
	1203, 0, 452, 482, 0, -2, 0, 1351, 0, 1337,
	1351, 0, 0, 1350, 0, 441, 481, 0, 0, 0,
	495, 499, 500, 0, 497, 1390, 0, 498, 0, 486,
	0, 492, 1253, 1254, 0, 1259, 1260, 0, 1284, 0,
	0, 0, 432, 501, 0, 0, 0, 502, 503, 508,
	1030, 0, 1044, 0, 1054, 0, 1051, 1052, 804, 0,
	0, 870, 892, 0, 0, 871, 0, 872, 877, 879,
	337, 907, 0, 0, 909, 910, 911, 902, 284, 817,
	976, 0, 838, 0, 0, 861, 839, 0, 19, 0,
	0, 110, 1809, 1812, 764, 0, 761, 162, 0, 0,
	0, 0, 728, 739, 722, 712, 762, 814, 815, 183,
	178, 1077, 1160, 0, 1151, 0, 1414, 1470, 0, 1568,
	0, 1526, 1523, 1526, 1525, 1517, 0, 1474, 0, 1476,
	1477, 1478, 0, 1480, 1481, 0, 783, 0, 59, 0,
	62, 60, 0, 94, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 1239, 0, 996, 1023, 1009, 0,
	1063, 1064, 0, 521, 522, 0, 525, 531, 1025, 0,
	0, 1027, 1028, 1029, 0, 0, 1041, 0, 0, 0,
	0, 1115, 1129, 0, 0, 0, -2, 0, -2, 1140,
	0, 1184, 0, 1176, 0, 1168, 0, 1171, 854, 854,
	-2, 692, 697, 0, 620, 1184, 1201, 0, 1222, 0,
	0, 0, 0, 0, 0, 0, 1202, 0, 1215, 483,
	1352, -2, 1366, 1368, 0, 1128, 1371, 1372, 0, 0,
	0, 0, 0, 0, 1421, 1380, 0, 0, 1384, 1385,
	1386, 0, 0, 1389, 0, 1728, 1729, 0, 1393, 0,
	0, 0, 0, 0, 0, 0, 1331, 442, 443, 0,
	445, 446, 1821, 1391, 485, 439, 1821, 455, 1283, 1287,
	1288, 1285, 507, 504, 505, 1033, 1036, 1047, 1056, 719,
	799, 339, 340, 893, 0, 885, 916, 913, 0, 0,
	980, 849, 852, 111, 116, 0, 0, 766, 0, 763,
	0, 757, 759, 172, 727, 764, 132, 164, 0, 0,
	1458, 0, 0, 0, 1557, 1607, 1529, 1530, 0, 1518,
	0, 1512, 1513, 1514, 1519, 0, 0, 786, 781, 64,
	90, 0, 93, 68, 81, 0, 0, 0, 0, 982,
	989, 1003, 1134, 1313, 988, 0, 0, 518, 523, 0,
	526, 527, 1045, 1044, 0, 1031, 1032, 0, 1039, 0,
	0, 1124, 1125, 1126, 1236, 1237, 1238, 1194, 1142, 0,
	-2, 1247, 0, 0, 1138, 1160, 1194, 0, 0, 1172,
	0, 1179, 0, 1177, 1170, 804, 693, 1181, 431, 1233,
	1223, 0, 1225, 0, 0, 0, 0, 1204, -2, 0,
	1367, 1369, 1370, 1373, 1374, 1375, 1426, 1427, 1428, 0,
	0, 1378, 1423, 1424, 1425, 1379, 0, 0, 0, 0,
	0, 1726, 1727, 1419, 0, 0, 1338, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1339, 0, 0, 0, 1330, 1332,
	444, 0, 0, 1821, 1046, 336, 0, 0, 917, 919,
	914, 915, 851, 0, 106, 108, 123, 0, 765, 163,
	0, 766, 134, 0, 155, 0, 1161, 0, 1469, 0,
	0, 0, 1528, 1515, 0, 0, 0, 0, 0, 1730,
	1731, 1732, 0, 1475, 1479, 89, 0, 66, 0, 82,
	83, 0, 0, 0, 1004, 1005, 1013, 1014, 0, 1016,
	1017, 524, 1026, 1034, 1038, 1041, 0, 1093, 1196, 0,
	1144, 1127, 1249, 1821, 1147, 1196, 0, 1241, 1821, 1821,
	1162, 0, 1174, 0, 1186, 0, 1180, 799, 420, 0,
	1183, 1219, 1224, 1226, 1228, 0, 1232, 1230, 1205, -2,
	0, 1213, 0, 0, 1376, 1377, 0, 0, 1626, 1821,
	0, 1409, 0, 1093, 1093, 1093, 1093, 0, 496, 454,
	0, 894, 908, 0, 853, 0, 0, 755, 124, 0,
	133, 152, 0, 165, 166, 0, 0, 0, 0, 1153,
	0, 1417, 1418, 0, 1504, 0, 0, 0, 1508, 1509,
	1510, 1511, 65, 68, 0, 0, 0, 981, 0, 1015,
	1040, 1042, 1092, 1137, 0, 1233, 1248, 0, 1139, 1240,
	0, 0, 0, 1173, 1185, 0, 1188, 691, 1182, 1200,
	0, 1229, 1206, 1214, 0, 1209, 0, 0, 0, 1422,
	0, 1383, 0, 1388, 1397, 1410, 0, 0, 1319, 0,
	1321, 0, 1325, 0, 1327, 0, 0, 456, 918, 920,
	0, 768, 758, 135, 139, 0, 161, 158, 0, 167,
	0, 0, 0, 0, 1149, 0, 1415, 0, 1505, 1506,
	1507, 67, 69, 84, 0, 983, 984, 997, 1094, 1821,
	1821, 0, 0, 0, 1100, 1101, 0, 1221, 1253, 1242,
	1243, 1244, 1187, 1220, 1208, 0, -2, 1216, 0, 0,
	1678, 1688, 1689, 1381, 1387, 1396, 1398, 1399, 0, 1411,
	1412, 1413, 1420, 1093, 1093, 1093, 1093, 1329, 767, 0,
	126, 0, 0, 156, 157, 159, 0, 168, 0, 170,
	171, 0, 0, 1516, 985, 0, 0, 1097, 1098, 0,
	1197, 0, 1199, 1210, -2, 0, 1218, 0, 1382, 1400,
	0, 1401, 0, 0, 0, 1320, 1322, 1326, 1328, 769,
	1159, 0, 140, 0, 142, 144, 145, 1353, 153, 154,
	160, 169, 0, 0, 970, 986, 0, 1095, 1096, 1099,
	0, 1201, 1217, 1679, 1402, 1404, 1405, 0, 0, 1403,
	127, 128, 0, 141, 0, 0, 1154, 1416, 987, 1198,
	1195, 1406, 1408, 1407, 0, 0, 143, 1354, 129, 130,
	131, 0, 1355,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 645, 642,
	126, 125, 127, 3, 646, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 643, 138, 644, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:835
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:842
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:848
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:856
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:866
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:881
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:885
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:896
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:900
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:933
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:947
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:958
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:970
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:974
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:979
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:983
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:989
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1003
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1007
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1011
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1015
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1022
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1031
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1046
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1053
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1062
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1071
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1080
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1090
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1100
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1112
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1122
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1132
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1143
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1154
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1168
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1176
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1184
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1201
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1211
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1223
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1231
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1250
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1260
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1270
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1290
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1296
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1303
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1311
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1317
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1326
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1336
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1344
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1352
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1360
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1370
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1378
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1388
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1395
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1414
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1418
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1424
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1428
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1434
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1443
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1453
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1457
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1463
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1472
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1476
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1482
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1503
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1517
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1524
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1528
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1534
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1538
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1544
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1551
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1559
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1563
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1575
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1579
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1593
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1597
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1602
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1609
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1617
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1623
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1632
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1643
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1647
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1653
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1657
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1663
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1667
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1673
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1697
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1716
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1720
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1724
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1729
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1733
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1742
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1752
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1759
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1764
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1771
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1776
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1780
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1808
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1812
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1818
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1826
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1846
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1865
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1890
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1894
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1898
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1903
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1907
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1913
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1926
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1937
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1950
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1954
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1964
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1977
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1990
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1996
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2002
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2010
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2020
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2030
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2034
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2038
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2042
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2046
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2050
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2057
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2061
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2067
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2074
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2083
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2087
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2093
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2097
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2101
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2105
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2109
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2113
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2117
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2121
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2125
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2129
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2133
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2137
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2141
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2145
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2149
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2153
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2157
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2161
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2165
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2177
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2181
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2185
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2193
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2197
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2201
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2205
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2209
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2213
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2217
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2229
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2233
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2237
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2241
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2245
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2249
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2253
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2257
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2261
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2265
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2269
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2273
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2307
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2314
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2321
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2330
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2348
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2352
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2358
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2365
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2373
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2377
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2381
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2391
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2395
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2401
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2408
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2415
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2424
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2454
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2458
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2462
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2468
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2478
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2485
		{
			yyVAL.str = yyDollar[3].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2491
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2495
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2501
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2527
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2535
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2543
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2566
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2589
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2596
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2603
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2611
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2618
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2625
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2634
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2638
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2642
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2648
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2652
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2658
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2662
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2668
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2672
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2683
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2689
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2694
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2698
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2702
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2706
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2710
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2722
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2726
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2732
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2736
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2740
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2749
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2754
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2760
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2773
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2786
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2799
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2812
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2828
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2835
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2846
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2857
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2861
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2867
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2877
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2883
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2887
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2893
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2899
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2903
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2907
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2911
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2917
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2930
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2936
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2940
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2946
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2950
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2956
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2962
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2973
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2979
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2983
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2987
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2991
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2995
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3007
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3015
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3025
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3037
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3041
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3049
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3057
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3096
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3100
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3106
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3112
		{
			yyVAL.str = yyDollar[1].str
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3117
		{
			yyVAL.str = "true"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3118
		{
			yyVAL.str = "false"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3119
		{
			yyVAL.str = yyDollar[1].str
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3124
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3130
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3139
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3146
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3154
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3158
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3183
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3206
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3216
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3223
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3232
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3240
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3244
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3250
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3261
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3265
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3271
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3275
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3299
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3309
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3319
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3335
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3353
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3357
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3363
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3367
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3373
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3379
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3387
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3397
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3405
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3415
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3425
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3435
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3442
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3446
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3450
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3454
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3458
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3465
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3471
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3475
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3479
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3483
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3487
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3491
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3495
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3499
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3504
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3535
		{
			yyVAL.str = ""
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3539
		{
			yyVAL.str = string("COLUMN")
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3544
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3550
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3556
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3564
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3568
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3574
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3582
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3589
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3595
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3601
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3607
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3613
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3620
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3627
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3635
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3641
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3653
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3659
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3667
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3671
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3678
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3696
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3711
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3726
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3741
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3754
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3760
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3771
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3788
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3796
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3800
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3805
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3809
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3825
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3829
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3833
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3837
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3844
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3848
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3852
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3856
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3863
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3867
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3874
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3878
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3882
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3886
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3893
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3900
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3906
		{
			yyVAL.item = nil
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3911
		{
			yyVAL.item = nil
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3956
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3981
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3989
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3993
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3997
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4008
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4012
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4018
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4023
		{
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4027
		{
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4032
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4042
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4052
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4060
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4066
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4072
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4078
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4090
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4096
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4105
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4109
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4113
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4117
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4121
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4125
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4129
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4133
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4139
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4148
		{
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4150
		{
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4159
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4169
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4178
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4182
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4186
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4192
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4204
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4210
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4219
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4230
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4242
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4250
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4256
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4268
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4282
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4288
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4294
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4301
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4305
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4310
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4314
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4318
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4323
		{
			yyVAL.str = ""
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4327
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4333
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4348
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4352
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4358
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4366
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4373
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4381
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4387
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4393
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4398
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4406
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4412
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4417
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4423
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4429
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4433
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4461
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4469
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4477
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4485
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4489
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4495
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4508
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4516
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4525
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4531
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4539
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4547
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4555
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4561
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4569
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4575
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4583
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4589
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4599
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4604
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4611
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4627
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4640
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4651
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4655
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4661
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4667
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4676
		{
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4678
		{
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4681
		{
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4690
		{
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4694
		{
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4699
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4708
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4715
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4721
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4729
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4736
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4743
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4763
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4771
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4781
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4785
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4791
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4798
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4804
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4812
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4819
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4826
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4845
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4849
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4853
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4858
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4862
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4866
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4872
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4881
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4885
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4891
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4895
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4901
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4905
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4911
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4916
		{
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4920
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4927
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4931
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4938
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4943
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4947
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4953
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4957
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4963
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4967
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4972
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4976
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4989
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5000
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5011
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5033
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5056
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5064
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5073
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5077
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5090
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5094
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5099
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5103
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5110
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5115
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5122
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5128
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5132
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5136
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5140
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5144
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5148
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5153
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5157
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5163
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5173
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5188
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5192
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5206
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5210
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5216
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5225
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5229
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5233
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5237
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5241
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5247
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5254
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5263
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5267
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5273
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5281
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5285
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5290
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5294
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5300
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5304
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5308
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5313
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5317
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5323
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5329
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5333
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5339
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5344
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5348
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5352
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5357
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5361
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5365
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5370
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5374
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5382
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5386
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5390
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5404
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5408
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5418
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5428
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5438
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5450
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5458
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5466
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5475
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5483
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5491
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5499
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5507
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5515
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5523
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5531
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5539
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5549
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5560
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5574
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5578
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5582
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5587
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5591
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5595
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5604
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5608
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5617
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprs: yyDollar[3].exprsUnion(),
				RollUp:       yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5625
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5629
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5634
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5638
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5644
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5648
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5654
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5658
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5662
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5666
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5671
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5679
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5685
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5693
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5701
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5711
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5717
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5726
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5735
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5744
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5754
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5758
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5768
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5772
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5776
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5780
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 880:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5786
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5796
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5800
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5806
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5812
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5816
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5822
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5828
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5832
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5836
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5840
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5846
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5850
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5856
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5860
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5866
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5870
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5876
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5880
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5890
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5903
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5909
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5915
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5929
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5940
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5947
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5951
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5957
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5967
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5971
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5975
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5980
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5984
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5988
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5992
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5997
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6001
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6005
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6009
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6013
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6018
		{
			yyVAL.str = ""
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6022
		{
			yyVAL.str = yyDollar[1].str
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6026
		{
			yyVAL.str = yyDollar[2].str
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6032
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6036
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6041
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6045
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6049
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6053
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6057
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6063
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 954:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6105
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6118
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6124
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 957:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6130
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6143
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6148
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6155
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6162
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6166
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6172
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6178
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6183
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6187
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6191
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6195
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6202
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6235
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6240
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6247
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6254
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6258
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6264
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6270
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6274
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6278
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6284
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6290
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6296
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6300
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6306
		{
			yyVAL.str = ""
		}
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6313
		{
			yyVAL.str = yyDollar[2].str
		}
	case 988:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6319
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6334
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6351
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6368
		{
			yyVAL.str = yyDollar[1].str
		}
	case 992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6372
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6378
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 994:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6382
		{
			yyVAL.str = "DEFINER = "
		}
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6386
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6391
		{
			yyVAL.str = ""
		}
	case 997:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6395
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6409
		{
			yyVAL.str = ""
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6417
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6423
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6428
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6434
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6447
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6452
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6457
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6463
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6470
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6477
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6484
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6491
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6499
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6505
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6512
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6519
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6527
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6533
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6542
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6559
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6575
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6594
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6600
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6609
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6627
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6633
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6640
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6648
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6654
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6662
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6668
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6676
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6682
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6691
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6695
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6700
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6704
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6711
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6716
		{
			yyVAL.str = ""
		}
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6720
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1046:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6726
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6739
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6750
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6754
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6760
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6766
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6772
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6779
		{
			yyVAL.str = ""
		}
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6783
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6788
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6792
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6798
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6806
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6814
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6822
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6830
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6835
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6847
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6858
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6967
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6971
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6977
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6990
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6994
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7000
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7013
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7017
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7021
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7026
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7030
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7036
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7043
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7049
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7058
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7065
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7076
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7080
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7086
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7095
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7099
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7103
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7108
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7112
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7116
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7120
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7126
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7157
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7161
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7187
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7193
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7205
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7211
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7217
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7223
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7229
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7237
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7241
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7247
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7261
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7275
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7279
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7283
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7287
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7291
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7295
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7299
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7305
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7320
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7324
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7335
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7339
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7344
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7348
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7354
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7358
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7364
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7373
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7382
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7388
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7392
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7398
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7409
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7415
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7433
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7451
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7469
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7485
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7489
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7498
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7510
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7519
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7531
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7541
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7551
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7562
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7572
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7583
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7591
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7602
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7609
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7619
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7632
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7640
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7649
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7658
		{
			yyVAL.str = ""
		}
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7662
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7668
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7672
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7677
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7681
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7688
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7700
		{
			yyVAL.str = ""
		}
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7704
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1162:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7710
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7731
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7745
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7749
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7753
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7759
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7763
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7770
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7777
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7784
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7791
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7795
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7799
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7803
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7807
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7814
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7821
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7825
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7832
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7839
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7843
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7849
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7855
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7859
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7866
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7873
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7880
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7887
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7891
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7896
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7900
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7904
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7909
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7913
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7926
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7930
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7938
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7946
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7950
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7962
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7966
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7972
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7976
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7982
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7995
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8009
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8013
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8019
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8023
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8029
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8038
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8049
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8053
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8058
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8062
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8068
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8073
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8081
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8085
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8095
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8099
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8110
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8118
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8126
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8134
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8145
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8154
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8164
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8174
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8178
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8183
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8187
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8193
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8197
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8203
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8212
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8222
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8226
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8232
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8236
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8242
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8251
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8261
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8265
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8271
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8275
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8279
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8285
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8289
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8293
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8297
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8301
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8305
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8309
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8314
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8318
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8322
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8326
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8330
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8334
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8338
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8342
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8346
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8350
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8354
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8358
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8362
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8368
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8374
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8378
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8382
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8386
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8390
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8396
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8402
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8408
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8414
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8420
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8426
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8430
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8434
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8438
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8443
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8454
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8458
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8464
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8475
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8479
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8485
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8489
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8493
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8497
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8501
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8505
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8519
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8523
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8532
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8538
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8546
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8550
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8557
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8566
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8574
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8582
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8589
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8593
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8599
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8603
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8607
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8613
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8617
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8623
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8636
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8649
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8688
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8728
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8742
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8748
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8761
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8774
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8787
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8800
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8815
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8825
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8831
		{
			yyVAL.str = ""
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8835
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8845
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8851
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8857
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8878
		{
			yyVAL.str = ""
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8882
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8888
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8894
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8898
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8903
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8911
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8915
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8919
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8923
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8929
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8935
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8939
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8944
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8951
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8955
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8961
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8965
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8971
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8975
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8979
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8983
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8987
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8991
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8996
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9000
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9004
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9008
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9012
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9016
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9020
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9024
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9028
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9032
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9046
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9050
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9054
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9058
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9062
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9066
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9072
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9076
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9081
		{
			yyVAL.str = ""
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9085
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9091
		{
			yyVAL.str = ""
		}
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9095
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9101
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9118
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9125
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9132
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9139
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9146
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9155
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9161
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9167
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9171
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9175
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9179
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9183
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9188
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9195
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9199
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9203
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9208
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9212
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9216
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9220
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9224
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9229
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9233
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9238
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9242
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9258
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9264
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9268
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9272
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9276
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9280
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9284
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9288
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9292
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9296
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9300
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9304
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9308
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9312
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9318
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9322
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9326
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9330
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9334
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9338
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9342
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9346
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9350
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9354
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9396
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9400
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9404
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9409
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9417
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9421
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9425
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9429
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9433
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9443
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9447
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9451
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9455
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9459
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9463
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9467
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9471
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9484
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1471:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9490
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9499
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9508
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9519
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9529
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9539
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9548
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9558
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9568
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9578
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9587
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9597
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9601
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9606
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9610
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9616
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9620
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9626
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9635
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9647
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9664
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9681
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9694
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9707
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9719
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9733
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9748
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9763
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9780
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9795
		{
		}
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9802
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9806
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9810
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9816
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9820
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9824
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9828
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9834
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9838
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9842
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9848
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9856
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9866
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9870
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9877
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9882
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9886
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9891
		{
			yyVAL.str = ","
		}
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9895
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9900
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9904
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1526:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9909
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9916
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9942
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9954
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9966
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9977
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9988
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9999
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10009
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10019
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10030
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10041
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10052
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10063
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10074
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10085
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10096
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10107
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10118
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10129
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10140
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10151
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10162
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10173
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10191
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10200
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10209
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10218
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10227
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10238
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10247
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10257
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10266
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10275
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10284
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10293
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10305
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10316
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10329
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10341
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10364
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10400
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10413
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10426
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10438
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10447
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10455
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10463
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10476
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10485
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10496
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10507
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10516
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10528
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10538
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10548
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10557
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10568
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10577
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10587
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10596
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10605
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10619
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10625
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10629
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10648
		{
		}
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10650
		{
		}
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10691
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10703
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10707
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10711
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10717
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10722
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10726
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10732
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10736
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10742
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10746
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10753
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10757
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10761
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10770
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10774
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10778
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10783
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10787
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10793
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10797
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10801
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10805
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10809
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10813
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10817
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10821
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10825
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10829
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10837
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10841
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10845
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10849
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10853
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10857
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10861
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10865
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10869
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10873
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10879
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10883
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10889
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10893
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10900
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10904
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10908
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10914
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10918
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10922
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10926
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10930
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10934
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10938
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10944
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10948
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10952
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10956
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10962
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10975
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10980
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10986
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10990
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11003
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11008
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11012
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11016
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11020
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11024
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11031
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11035
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11039
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11043
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11050
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11061
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11066
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11072
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11084
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11096
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11108
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11121
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11134
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11147
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11160
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11173
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11186
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11199
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11212
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11225
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11238
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11253
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11280
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11322
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11358
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11394
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11411
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11423
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11443
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11463
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11483
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11499
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11512
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11525
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11538
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11551
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11563
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11575
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11587
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11599
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11611
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11623
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11635
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11647
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11659
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11671
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11684
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11697
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11710
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11723
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11738
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11746
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11755
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11765
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11788
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11793
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11799
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11806
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11810
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11815
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11819
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11825
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11831
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11838
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11845
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11854
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11861
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11868
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11877
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11881
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11885
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11891
		{
		}
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11893
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11903
		{
			yyVAL.str = ""
		}
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11907
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
