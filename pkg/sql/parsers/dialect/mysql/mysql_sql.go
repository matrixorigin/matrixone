// Code generated by goyacc -o mysql_sql.go -c mysql mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const DISTINCTROW = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const SUBQUERY_AS_EXPR = 57394
const LOWER_THAN_STRING = 57395
const ID = 57396
const AT_ID = 57397
const AT_AT_ID = 57398
const STRING = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const INTEGRAL = 57404
const HEX = 57405
const BIT_LITERAL = 57406
const FLOAT = 57407
const HEXNUM = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const LOWER_THAN_CHARSET = 57412
const CHARSET = 57413
const UNIQUE = 57414
const KEY = 57415
const OR = 57416
const PIPE_CONCAT = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const ASSIGNMENT = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const BEGIN = 57445
const START = 57446
const TRANSACTION = 57447
const COMMIT = 57448
const ROLLBACK = 57449
const WORK = 57450
const CONSISTENT = 57451
const SNAPSHOT = 57452
const CHAIN = 57453
const NO = 57454
const RELEASE = 57455
const BIT = 57456
const TINYINT = 57457
const SMALLINT = 57458
const MEDIUMINT = 57459
const INT = 57460
const INTEGER = 57461
const BIGINT = 57462
const INTNUM = 57463
const REAL = 57464
const DOUBLE = 57465
const FLOAT_TYPE = 57466
const DECIMAL = 57467
const NUMERIC = 57468
const DECIMAL_VALUE = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const TEXT = 57480
const TINYTEXT = 57481
const MEDIUMTEXT = 57482
const LONGTEXT = 57483
const BLOB = 57484
const TINYBLOB = 57485
const MEDIUMBLOB = 57486
const LONGBLOB = 57487
const JSON = 57488
const ENUM = 57489
const GEOMETRY = 57490
const POINT = 57491
const LINESTRING = 57492
const POLYGON = 57493
const GEOMETRYCOLLECTION = 57494
const MULTIPOINT = 57495
const MULTILINESTRING = 57496
const MULTIPOLYGON = 57497
const INT1 = 57498
const INT2 = 57499
const INT3 = 57500
const INT4 = 57501
const INT8 = 57502
const SQL_SMALL_RESULT = 57503
const SQL_BIG_RESULT = 57504
const SQL_BUFFER_RESULT = 57505
const CREATE = 57506
const ALTER = 57507
const DROP = 57508
const RENAME = 57509
const ANALYZE = 57510
const ADD = 57511
const SCHEMA = 57512
const TABLE = 57513
const INDEX = 57514
const VIEW = 57515
const TO = 57516
const IGNORE = 57517
const IF = 57518
const PRIMARY = 57519
const COLUMN = 57520
const CONSTRAINT = 57521
const SPATIAL = 57522
const FULLTEXT = 57523
const FOREIGN = 57524
const KEY_BLOCK_SIZE = 57525
const SHOW = 57526
const DESCRIBE = 57527
const EXPLAIN = 57528
const DATE = 57529
const ESCAPE = 57530
const REPAIR = 57531
const OPTIMIZE = 57532
const TRUNCATE = 57533
const MAXVALUE = 57534
const PARTITION = 57535
const REORGANIZE = 57536
const LESS = 57537
const THAN = 57538
const PROCEDURE = 57539
const TRIGGER = 57540
const STATUS = 57541
const VARIABLES = 57542
const ROLE = 57543
const PROXY = 57544
const AVG_ROW_LENGTH = 57545
const STORAGE = 57546
const DISK = 57547
const MEMORY = 57548
const CHECKSUM = 57549
const COMPRESSION = 57550
const DATA = 57551
const DIRECTORY = 57552
const DELAY_KEY_WRITE = 57553
const ENCRYPTION = 57554
const ENGINE = 57555
const MAX_ROWS = 57556
const MIN_ROWS = 57557
const PACK_KEYS = 57558
const ROW_FORMAT = 57559
const STATS_AUTO_RECALC = 57560
const STATS_PERSISTENT = 57561
const STATS_SAMPLE_PAGES = 57562
const DYNAMIC = 57563
const COMPRESSED = 57564
const REDUNDANT = 57565
const COMPACT = 57566
const FIXED = 57567
const COLUMN_FORMAT = 57568
const AUTO_RANDOM = 57569
const RESTRICT = 57570
const CASCADE = 57571
const ACTION = 57572
const PARTIAL = 57573
const SIMPLE = 57574
const CHECK = 57575
const ENFORCED = 57576
const RANGE = 57577
const LIST = 57578
const ALGORITHM = 57579
const LINEAR = 57580
const PARTITIONS = 57581
const SUBPARTITION = 57582
const SUBPARTITIONS = 57583
const TYPE = 57584
const ANY = 57585
const SOME = 57586
const PREPARE = 57587
const DEALLOCATE = 57588
const PROPERTIES = 57589
const PARSER = 57590
const VISIBLE = 57591
const INVISIBLE = 57592
const BTREE = 57593
const HASH = 57594
const RTREE = 57595
const BSI = 57596
const ZONEMAP = 57597
const LEADING = 57598
const BOTH = 57599
const TRAILING = 57600
const UNKNOWN = 57601
const EXPIRE = 57602
const ACCOUNT = 57603
const UNLOCK = 57604
const DAY = 57605
const NEVER = 57606
const SECOND = 57607
const ASCII = 57608
const COALESCE = 57609
const COLLATION = 57610
const HOUR = 57611
const MICROSECOND = 57612
const MINUTE = 57613
const MONTH = 57614
const QUARTER = 57615
const REPEAT = 57616
const REVERSE = 57617
const ROW_COUNT = 57618
const WEEK = 57619
const REVOKE = 57620
const FUNCTION = 57621
const PRIVILEGES = 57622
const TABLESPACE = 57623
const EXECUTE = 57624
const SUPER = 57625
const GRANT = 57626
const OPTION = 57627
const REFERENCES = 57628
const REPLICATION = 57629
const SLAVE = 57630
const CLIENT = 57631
const USAGE = 57632
const RELOAD = 57633
const FILE = 57634
const TEMPORARY = 57635
const ROUTINE = 57636
const EVENT = 57637
const SHUTDOWN = 57638
const NULLX = 57639
const AUTO_INCREMENT = 57640
const APPROXNUM = 57641
const SIGNED = 57642
const UNSIGNED = 57643
const ZEROFILL = 57644
const USER = 57645
const IDENTIFIED = 57646
const CIPHER = 57647
const ISSUER = 57648
const X509 = 57649
const SUBJECT = 57650
const SAN = 57651
const REQUIRE = 57652
const SSL = 57653
const NONE = 57654
const PASSWORD = 57655
const MAX_QUERIES_PER_HOUR = 57656
const MAX_UPDATES_PER_HOUR = 57657
const MAX_CONNECTIONS_PER_HOUR = 57658
const MAX_USER_CONNECTIONS = 57659
const FORMAT = 57660
const VERBOSE = 57661
const CONNECTION = 57662
const LOAD = 57663
const INFILE = 57664
const TERMINATED = 57665
const OPTIONALLY = 57666
const ENCLOSED = 57667
const ESCAPED = 57668
const STARTING = 57669
const LINES = 57670
const DATABASES = 57671
const TABLES = 57672
const EXTENDED = 57673
const FULL = 57674
const PROCESSLIST = 57675
const FIELDS = 57676
const COLUMNS = 57677
const OPEN = 57678
const ERRORS = 57679
const WARNINGS = 57680
const INDEXES = 57681
const SCHEMAS = 57682
const NAMES = 57683
const GLOBAL = 57684
const SESSION = 57685
const ISOLATION = 57686
const LEVEL = 57687
const READ = 57688
const WRITE = 57689
const ONLY = 57690
const REPEATABLE = 57691
const COMMITTED = 57692
const UNCOMMITTED = 57693
const SERIALIZABLE = 57694
const LOCAL = 57695
const EXCEPT = 57696
const CURRENT_TIMESTAMP = 57697
const DATABASE = 57698
const CURRENT_TIME = 57699
const LOCALTIME = 57700
const LOCALTIMESTAMP = 57701
const UTC_DATE = 57702
const UTC_TIME = 57703
const UTC_TIMESTAMP = 57704
const REPLACE = 57705
const CONVERT = 57706
const SEPARATOR = 57707
const CURRENT_DATE = 57708
const CURRENT_USER = 57709
const CURRENT_ROLE = 57710
const SECOND_MICROSECOND = 57711
const MINUTE_MICROSECOND = 57712
const MINUTE_SECOND = 57713
const HOUR_MICROSECOND = 57714
const HOUR_SECOND = 57715
const HOUR_MINUTE = 57716
const DAY_MICROSECOND = 57717
const DAY_SECOND = 57718
const DAY_MINUTE = 57719
const DAY_HOUR = 57720
const YEAR_MONTH = 57721
const SQL_TSI_HOUR = 57722
const SQL_TSI_DAY = 57723
const SQL_TSI_WEEK = 57724
const SQL_TSI_MONTH = 57725
const SQL_TSI_QUARTER = 57726
const SQL_TSI_YEAR = 57727
const SQL_TSI_SECOND = 57728
const SQL_TSI_MINUTE = 57729
const RECURSIVE = 57730
const CONFIG = 57731
const MATCH = 57732
const AGAINST = 57733
const BOOLEAN = 57734
const LANGUAGE = 57735
const WITH = 57736
const QUERY = 57737
const EXPANSION = 57738
const ADDDATE = 57739
const BIT_AND = 57740
const BIT_OR = 57741
const BIT_XOR = 57742
const CAST = 57743
const COUNT = 57744
const APPROX_COUNT_DISTINCT = 57745
const APPROX_PERCENTILE = 57746
const CURDATE = 57747
const CURTIME = 57748
const DATE_ADD = 57749
const DATE_SUB = 57750
const EXTRACT = 57751
const GROUP_CONCAT = 57752
const MAX = 57753
const MID = 57754
const MIN = 57755
const NOW = 57756
const POSITION = 57757
const SESSION_USER = 57758
const STD = 57759
const STDDEV = 57760
const STDDEV_POP = 57761
const STDDEV_SAMP = 57762
const SUBDATE = 57763
const SUBSTR = 57764
const SUBSTRING = 57765
const SUM = 57766
const SYSDATE = 57767
const SYSTEM_USER = 57768
const TRANSLATE = 57769
const TRIM = 57770
const VARIANCE = 57771
const VAR_POP = 57772
const VAR_SAMP = 57773
const AVG = 57774
const ROW = 57775
const OUTFILE = 57776
const HEADER = 57777
const MAX_FILE_SIZE = 57778
const FORCE_QUOTE = 57779
const UNUSED = 57780

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6596

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 59,
	17, 380,
	-2, 361,
	-1, 64,
	189, 530,
	-2, 566,
	-1, 77,
	216, 267,
	217, 267,
	-2, 288,
	-1, 338,
	58, 1345,
	457, 1345,
	-2, 97,
	-1, 357,
	58, 691,
	457, 691,
	-2, 528,
	-1, 358,
	58, 521,
	457, 521,
	-2, 529,
	-1, 364,
	17, 381,
	-2, 344,
	-1, 423,
	89, 1224,
	100, 1224,
	119, 1224,
	-2, 1052,
	-1, 600,
	17, 381,
	-2, 344,
	-1, 623,
	53, 1374,
	-2, 1381,
	-1, 631,
	53, 1375,
	-2, 1389,
	-1, 633,
	53, 1371,
	-2, 1391,
	-1, 634,
	53, 1372,
	-2, 1392,
	-1, 639,
	53, 1373,
	-2, 1398,
	-1, 640,
	53, 1376,
	-2, 1399,
	-1, 641,
	53, 1377,
	-2, 1400,
	-1, 642,
	53, 817,
	-2, 1401,
	-1, 643,
	53, 818,
	-2, 1402,
	-1, 644,
	53, 819,
	-2, 1403,
	-1, 646,
	53, 1378,
	-2, 1405,
	-1, 647,
	53, 836,
	-2, 1406,
	-1, 648,
	53, 835,
	-2, 1407,
	-1, 651,
	53, 1379,
	-2, 1410,
	-1, 652,
	53, 1380,
	-2, 1411,
	-1, 658,
	53, 898,
	-2, 1224,
	-1, 659,
	53, 907,
	-2, 1250,
	-1, 660,
	53, 911,
	-2, 1289,
	-1, 661,
	53, 922,
	-2, 1350,
	-1, 662,
	53, 924,
	-2, 1360,
	-1, 663,
	53, 912,
	-2, 1365,
	-1, 664,
	53, 920,
	-2, 1369,
	-1, 665,
	53, 901,
	-2, 1370,
	-1, 825,
	1, 556,
	55, 556,
	456, 556,
	-2, 563,
	-1, 954,
	17, 380,
	-2, 749,
	-1, 1000,
	119, 1062,
	-2, 1060,
	-1, 1002,
	119, 470,
	-2, 1057,
	-1, 1003,
	119, 471,
	-2, 1058,
	-1, 1199,
	1, 557,
	55, 557,
	456, 557,
	-2, 563,
	-1, 1258,
	53, 965,
	-2, 1367,
	-1, 1259,
	53, 966,
	-2, 1368,
	-1, 1655,
	74, 563,
	115, 563,
	149, 563,
	152, 563,
	-2, 603,
	-1, 1657,
	250, 716,
	-2, 697,
	-1, 1778,
	74, 563,
	115, 563,
	149, 563,
	152, 563,
	-2, 604,
	-1, 1806,
	250, 716,
	-2, 698,
	-1, 2197,
	54, 578,
	55, 578,
	-2, 563,
	-1, 2201,
	54, 578,
	55, 578,
	-2, 563,
	-1, 2213,
	54, 582,
	55, 582,
	-2, 563,
	-1, 2216,
	54, 583,
	55, 583,
	-2, 563,
}

const yyPrivate = 57344

const yyLast = 22000

var yyAct = [...]int{
	815, 1261, 2203, 2201, 2200, 2208, 2174, 668, 2148, 666,
	804, 1850, 2038, 686, 2119, 2163, 1818, 2100, 2014, 2101,
	1774, 2017, 1992, 552, 312, 1186, 881, 95, 1649, 587,
	306, 1947, 1849, 490, 1840, 1920, 2002, 1434, 421, 325,
	1848, 1732, 1839, 1262, 1738, 98, 1735, 95, 327, 1716,
	1539, 537, 1527, 1741, 622, 612, 359, 359, 1543, 1567,
	1807, 864, 1745, 1576, 1411, 1555, 94, 1702, 1548, 697,
	59, 1594, 1192, 982, 749, 1544, 313, 1583, 313, 310,
	22, 1593, 667, 1479, 422, 542, 320, 595, 888, 997,
	440, 1000, 991, 992, 95, 983, 1345, 3, 799, 59,
	1441, 677, 857, 58, 1331, 1249, 309, 15, 307, 6,
	1405, 308, 5, 1200, 817, 800, 381, 1782, 1260, 365,
	669, 364, 774, 1275, 615, 525, 861, 1168, 833, 329,
	834, 1159, 832, 453, 464, 299, 1263, 492, 883, 890,
	302, 439, 921, 596, 791, 413, 331, 579, 91, 330,
	478, 1865, 1770, 1175, 504, 428, 430, 1648, 812, 985,
	366, 59, 321, 437, 563, 2066, 614, 88, 90, 1171,
	1528, 22, 1406, 414, 1387, 2055, 311, 565, 535, 90,
	851, 26, 46, 27, 1394, 559, 361, 90, 524, 450,
	429, 1397, 377, 2088, 802, 400, 90, 836, 15, 807,
	6, 434, 433, 5, 424, 90, 426, 846, 847, 318,
	519, 746, 553, 554, 743, 86, 90, 2123, 26, 46,
	27, 2086, 515, 1504, 551, 566, 86, 550, 553, 554,
	1945, 432, 1531, 765, 745, 2026, 386, 1532, 90, 1533,
	26, 46, 27, 86, 2029, 425, 1868, 2104, 2105, 1650,
	334, 334, 86, 1948, 1949, 1950, 1951, 811, 1373, 458,
	1577, 467, 1171, 86, 1556, 1557, 1558, 1559, 510, 401,
	1414, 1412, 1409, 1413, 1415, 436, 1408, 1407, 1414, 1412,
	1580, 1413, 1415, 1173, 858, 86, 1919, 1827, 1826, 506,
	517, 518, 1823, 1767, 1935, 516, 511, 1645, 792, 95,
	457, 2065, 505, 1727, 379, 1595, 2090, 2114, 317, 1723,
	1726, 456, 1579, 1560, 376, 375, 1417, 1418, 1419, 1420,
	95, 1252, 1253, 1254, 794, 1925, 2193, 2209, 1606, 1603,
	1604, 1605, 1250, 431, 1600, 371, 1599, 1598, 1596, 1447,
	1253, 1254, 2003, 2004, 2005, 2007, 2006, 467, 2103, 2128,
	494, 2036, 2037, 2085, 2040, 2040, 2135, 2063, 2016, 474,
	2184, 1914, 1883, 313, 1882, 363, 2046, 2068, 2069, 575,
	560, 495, 1395, 59, 59, 430, 508, 1909, 514, 2092,
	2093, 549, 548, 2210, 513, 455, 435, 2204, 509, 512,
	2175, 1480, 1871, 1597, 452, 536, 497, 538, 507, 1724,
	564, 2024, 1391, 1222, 1179, 1552, 793, 501, 819, 429,
	359, 469, 468, 1432, 540, 1646, 422, 422, 422, 319,
	405, 359, 359, 539, 1218, 541, 569, 374, 1743, 1742,
	496, 1220, 1219, 567, 568, 849, 530, 370, 850, 440,
	1217, 848, 618, 618, 460, 461, 402, 403, 1977, 2188,
	2152, 592, 1534, 1444, 1385, 748, 1384, 1905, 1372, 1520,
	1366, 1212, 2166, 1184, 1152, 902, 751, 544, 594, 407,
	406, 763, 872, 470, 556, 557, 457, 95, 95, 95,
	95, 454, 313, 939, 543, 617, 617, 775, 788, 580,
	378, 553, 554, 1522, 472, 598, 2170, 469, 468, 2091,
	581, 359, 359, 457, 359, 2161, 1601, 1602, 1627, 527,
	1568, 545, 2067, 1170, 805, 2050, 494, 895, 1553, 553,
	554, 59, 359, 359, 1368, 789, 1528, 1251, 2015, 1224,
	1157, 744, 59, 459, 529, 1194, 84, 495, 359, 574,
	359, 59, 825, 1521, 521, 1446, 95, 599, 601, 426,
	600, 769, 1174, 503, 859, 1414, 1412, 1722, 1413, 1415,
	841, 2167, 1725, 1169, 359, 824, 585, 586, 462, 1388,
	1910, 1911, 814, 89, 1346, 818, 359, 422, 768, 359,
	766, 404, 839, 767, 89, 829, 1403, 820, 425, 582,
	583, 584, 89, 597, 771, 873, 604, 605, 606, 607,
	608, 89, 611, 754, 334, 359, 359, 880, 95, 741,
	89, 440, 842, 609, 889, 589, 589, 826, 899, 828,
	809, 89, 427, 865, 555, 822, 827, 558, 1916, 865,
	865, 837, 838, 884, 830, 831, 821, 787, 810, 776,
	777, 778, 779, 89, 443, 448, 449, 882, 803, 795,
	392, 1265, 1264, 813, 885, 1549, 1552, 1978, 1980, 1981,
	1982, 1979, 843, 903, 408, 808, 1907, 758, 759, 823,
	1906, 1915, 578, 956, 1338, 392, 1706, 2164, 2165, 1701,
	546, 835, 1900, 896, 897, 898, 895, 875, 1336, 1337,
	1335, 1423, 1629, 1346, 860, 1485, 334, 1988, 806, 896,
	897, 898, 895, 878, 1273, 855, 942, 943, 944, 945,
	946, 939, 870, 871, 1274, 955, 1877, 898, 895, 2199,
	1775, 874, 856, 963, 2180, 394, 876, 2145, 393, 2129,
	867, 868, 869, 1987, 334, 879, 2183, 2075, 1270, 2022,
	965, 954, 577, 2021, 2213, 877, 989, 989, 994, 1994,
	394, 762, 886, 393, 1972, 957, 958, 959, 960, 761,
	940, 941, 942, 943, 944, 945, 946, 939, 547, 1553,
	334, 1971, 1454, 889, 1546, 429, 1002, 2182, 1547, 1550,
	961, 937, 947, 948, 940, 941, 942, 943, 944, 945,
	946, 939, 979, 929, 996, 1760, 1986, 1003, 1984, 1974,
	334, 1970, 445, 446, 447, 1424, 906, 907, 908, 909,
	910, 911, 912, 904, 2169, 430, 1967, 1961, 1467, 1958,
	95, 95, 1957, 1866, 1859, 59, 896, 897, 898, 895,
	1551, 1759, 1985, 1858, 1983, 1973, 306, 1488, 1183, 988,
	1487, 2124, 1857, 1214, 1167, 1856, 973, 1855, 1155, 429,
	1852, 2113, 359, 896, 897, 898, 895, 1712, 884, 1189,
	1191, 1154, 1466, 896, 897, 898, 895, 1711, 1710, 995,
	1709, 426, 2096, 359, 1182, 1516, 752, 2181, 1993, 885,
	1450, 981, 2191, 2057, 896, 897, 898, 895, 2044, 1001,
	2043, 1151, 618, 1975, 95, 1968, 1150, 896, 897, 898,
	895, 1245, 1964, 1247, 1203, 1204, 1205, 314, 315, 316,
	1164, 865, 865, 865, 1963, 1962, 1215, 1616, 1206, 1921,
	1902, 1271, 1272, 938, 937, 947, 948, 940, 941, 942,
	943, 944, 945, 946, 939, 617, 1178, 1187, 1188, 1241,
	1242, 1243, 1244, 1201, 1867, 1490, 979, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1435,
	1255, 1268, 1340, 1341, 1773, 1237, 2072, 1208, 835, 1210,
	1211, 1209, 1207, 2158, 1310, 2097, 1355, 1771, 2071, 1719,
	1240, 1221, 2020, 896, 897, 898, 895, 1357, 1565, 896,
	897, 898, 895, 1564, 1225, 1226, 1227, 896, 897, 898,
	895, 1230, 1810, 1231, 896, 897, 898, 895, 1347, 1563,
	1350, 896, 897, 898, 895, 1562, 1238, 1678, 1181, 938,
	937, 947, 948, 940, 941, 942, 943, 944, 945, 946,
	939, 1180, 712, 711, 1339, 975, 936, 1813, 935, 753,
	368, 1494, 328, 1808, 1450, 1493, 334, 2051, 1821, 1822,
	367, 1333, 1266, 1267, 1809, 1269, 1360, 1938, 2156, 1450,
	2218, 1305, 1306, 1307, 1308, 1309, 1937, 1229, 1315, 1316,
	1317, 1318, 947, 948, 940, 941, 942, 943, 944, 945,
	946, 939, 1936, 1371, 1761, 1349, 1351, 1352, 1814, 1348,
	603, 2212, 2211, 1177, 2194, 1356, 1758, 1358, 1757, 360,
	2190, 2189, 1731, 1666, 938, 937, 947, 948, 940, 941,
	942, 943, 944, 945, 946, 939, 1655, 1359, 1685, 1689,
	1691, 1693, 1695, 1696, 1698, 1637, 1606, 1603, 1604, 1605,
	1177, 2178, 1680, 1681, 1682, 1683, 1664, 1665, 1686, 1582,
	1667, 1581, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
	1676, 1677, 1684, 1374, 1177, 2177, 1497, 457, 1495, 1943,
	1688, 1690, 1692, 1694, 1697, 2151, 2150, 1820, 775, 1545,
	1932, 2111, 359, 1930, 1492, 359, 1932, 2106, 457, 1491,
	359, 896, 897, 898, 895, 1400, 1860, 1233, 2094, 1390,
	1489, 1679, 2083, 2082, 1816, 896, 897, 898, 895, 1932,
	2061, 1379, 1932, 2060, 1380, 1932, 2059, 1382, 896, 897,
	898, 895, 1459, 1429, 1932, 2058, 1815, 1817, 1456, 1753,
	2049, 2048, 1449, 359, 1999, 2000, 1398, 1399, 1431, 818,
	950, 1354, 953, 95, 95, 1999, 1998, 1440, 1942, 1941,
	1422, 896, 897, 898, 895, 1402, 951, 952, 949, 1353,
	938, 937, 947, 948, 940, 941, 942, 943, 944, 945,
	946, 939, 1940, 1939, 1932, 1931, 790, 1752, 1236, 1640,
	750, 1455, 1437, 1438, 1375, 1377, 1823, 426, 1392, 1378,
	602, 1425, 1450, 1621, 1450, 1607, 1361, 1386, 1811, 896,
	897, 898, 895, 1656, 1426, 1171, 1427, 1450, 1458, 893,
	1401, 1450, 1457, 1638, 59, 2214, 1751, 1451, 1236, 1376,
	1452, 1453, 1156, 1421, 22, 1635, 520, 1201, 1370, 1369,
	499, 1433, 1364, 1363, 1236, 1235, 1430, 1436, 896, 897,
	898, 895, 1439, 1177, 1176, 1443, 1474, 896, 897, 898,
	895, 15, 891, 6, 1428, 501, 5, 1477, 1478, 1461,
	1462, 1463, 1464, 1465, 1626, 1469, 1445, 500, 1448, 1470,
	1471, 1472, 1473, 756, 755, 989, 498, 1508, 989, 1389,
	499, 1511, 1367, 1343, 1233, 1185, 896, 897, 898, 895,
	1153, 610, 889, 576, 359, 1620, 2160, 1482, 359, 359,
	1486, 2154, 359, 2136, 2133, 90, 1687, 1514, 1619, 1166,
	501, 2131, 2074, 1498, 954, 457, 865, 896, 897, 898,
	895, 2012, 865, 1997, 1995, 1990, 1542, 95, 1515, 1476,
	896, 897, 898, 895, 1503, 1618, 1952, 1924, 1734, 1617,
	1510, 1928, 1927, 59, 1926, 1923, 1913, 1333, 429, 1507,
	1475, 1484, 86, 1505, 95, 1587, 1898, 896, 897, 898,
	895, 896, 897, 898, 895, 397, 1566, 1500, 1506, 1739,
	1509, 1499, 1512, 1613, 1513, 1517, 1834, 1833, 1736, 613,
	1518, 1746, 1749, 1714, 1707, 1561, 1165, 1334, 86, 1404,
	1381, 1362, 1519, 1569, 1570, 896, 897, 898, 895, 359,
	1526, 1234, 1223, 1216, 1589, 359, 1197, 392, 1612, 473,
	980, 1571, 1572, 978, 1608, 977, 1634, 976, 974, 922,
	971, 1614, 1615, 970, 1573, 968, 1611, 967, 1631, 966,
	896, 897, 898, 895, 1633, 359, 1623, 964, 934, 1628,
	1586, 933, 932, 931, 1632, 1587, 1625, 95, 896, 897,
	898, 895, 1610, 930, 928, 927, 1700, 938, 937, 947,
	948, 940, 941, 942, 943, 944, 945, 946, 939, 926,
	1622, 925, 924, 1624, 896, 897, 898, 895, 359, 1630,
	359, 1609, 394, 923, 920, 393, 1654, 1636, 1639, 919,
	918, 917, 1523, 1525, 1592, 916, 915, 1730, 914, 913,
	772, 747, 502, 896, 897, 898, 895, 1715, 2141, 1644,
	1704, 1160, 1161, 2139, 391, 59, 896, 897, 898, 895,
	1591, 2102, 395, 1416, 1663, 1653, 1703, 1705, 1703, 1699,
	1708, 1232, 781, 1163, 522, 1713, 2198, 1590, 1729, 780,
	1365, 784, 896, 897, 898, 895, 785, 2116, 562, 1721,
	1737, 1342, 1740, 359, 359, 561, 1202, 95, 1720, 896,
	897, 898, 895, 1529, 782, 526, 1744, 457, 1779, 783,
	1754, 1187, 1188, 896, 897, 898, 895, 1747, 1542, 1750,
	1642, 1536, 786, 1756, 484, 485, 1869, 1643, 1755, 1195,
	845, 1535, 865, 589, 887, 488, 1768, 1265, 1264, 589,
	532, 533, 480, 483, 484, 485, 481, 1766, 482, 486,
	1763, 750, 1841, 1843, 1828, 1841, 1841, 1804, 1831, 1832,
	1776, 1829, 1830, 1149, 528, 457, 1824, 2155, 2079, 1641,
	2077, 2031, 1835, 2030, 2028, 1838, 1836, 1837, 475, 480,
	483, 484, 485, 481, 1955, 482, 486, 1842, 480, 483,
	484, 485, 481, 1953, 482, 486, 1772, 1844, 1845, 1728,
	1652, 1847, 1651, 1585, 531, 368, 367, 1584, 1846, 1442,
	750, 2142, 589, 1460, 1717, 367, 1854, 2143, 2142, 388,
	1383, 390, 400, 471, 298, 2143, 387, 385, 384, 396,
	389, 1873, 398, 399, 487, 382, 32, 1, 1311, 534,
	760, 442, 1863, 466, 757, 465, 463, 85, 1344, 1276,
	698, 984, 990, 1991, 1861, 2115, 2147, 2073, 2118, 770,
	685, 2023, 1530, 1944, 2025, 359, 1946, 1396, 1862, 1393,
	1901, 1876, 523, 1501, 95, 1502, 710, 701, 969, 380,
	703, 742, 444, 700, 1853, 1578, 369, 1764, 1765, 441,
	1874, 1875, 383, 1878, 1879, 1880, 1881, 1843, 1918, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1917, 1903, 1824, 1647, 1899, 1825, 1748,
	1922, 1733, 2207, 2197, 2173, 1956, 2153, 1481, 2039, 2192,
	2084, 1929, 2134, 2127, 2035, 1870, 332, 852, 570, 411,
	2013, 773, 1933, 1554, 1410, 1934, 1193, 1989, 938, 937,
	947, 948, 940, 941, 942, 943, 944, 945, 946, 939,
	1172, 494, 801, 333, 2064, 1996, 372, 1196, 373, 1199,
	1969, 1198, 1256, 905, 457, 1332, 972, 457, 457, 457,
	962, 620, 495, 457, 1483, 676, 1959, 1960, 670, 59,
	1575, 1574, 1965, 1966, 1819, 840, 31, 30, 29, 1954,
	489, 894, 998, 2033, 699, 97, 1213, 999, 2032, 2019,
	359, 359, 2008, 1864, 2001, 2018, 2120, 2009, 2010, 2011,
	684, 683, 1762, 682, 2034, 681, 479, 477, 2027, 476,
	324, 323, 892, 2099, 2098, 2053, 2054, 1769, 1912, 2041,
	2042, 95, 1976, 1908, 1904, 2045, 1778, 1777, 457, 1805,
	1806, 1812, 1662, 1658, 1660, 1661, 1659, 1657, 1540, 1717,
	1541, 1538, 1537, 457, 1162, 1158, 986, 2047, 938, 937,
	947, 948, 940, 941, 942, 943, 944, 945, 946, 939,
	882, 993, 451, 816, 92, 322, 1239, 11, 2056, 2052,
	10, 764, 9, 14, 21, 20, 2070, 19, 54, 2078,
	53, 2080, 2081, 2062, 2076, 1496, 52, 51, 18, 8,
	2087, 2089, 50, 49, 48, 17, 16, 44, 42, 41,
	40, 39, 2095, 38, 37, 2122, 36, 43, 35, 34,
	2107, 2108, 2109, 2110, 2126, 33, 12, 63, 2121, 62,
	61, 60, 23, 24, 25, 70, 2130, 69, 2132, 66,
	2125, 68, 938, 937, 947, 948, 940, 941, 942, 943,
	944, 945, 946, 939, 67, 65, 2137, 28, 13, 2140,
	2138, 7, 4, 2, 2149, 2112, 0, 0, 2144, 0,
	0, 0, 457, 0, 457, 0, 0, 0, 0, 2146,
	0, 0, 2157, 805, 2159, 805, 2162, 0, 0, 0,
	0, 0, 2122, 2172, 589, 589, 0, 0, 0, 2168,
	0, 457, 0, 0, 0, 2121, 2171, 0, 2176, 0,
	0, 2179, 805, 0, 0, 0, 0, 2149, 2185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2195,
	0, 0, 0, 0, 0, 0, 0, 2196, 0, 0,
	0, 0, 0, 0, 2206, 0, 2205, 0, 0, 0,
	0, 0, 0, 0, 2187, 0, 2217, 2216, 2215, 2206,
	1112, 1099, 0, 1061, 1114, 1035, 1050, 1122, 1051, 1052,
	1086, 1014, 1070, 222, 1048, 1006, 1038, 1039, 1008, 1045,
	1009, 1036, 1063, 166, 1034, 1102, 1073, 192, 1120, 0,
	0, 252, 206, 0, 0, 1066, 1104, 1068, 1091, 1060,
	1087, 1022, 1080, 1115, 1049, 1084, 1116, 0, 0, 0,
	0, 0, 314, 315, 316, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 1083, 1109, 1047, 0, 151,
	1113, 1067, 1085, 0, 0, 1007, 1081, 0, 1012, 1015,
	1121, 1107, 1042, 1043, 0, 0, 0, 0, 0, 0,
	0, 1064, 1069, 1088, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1040, 0, 1077, 0, 0, 0,
	1017, 1013, 0, 1062, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 0,
	1111, 296, 160, 287, 1016, 279, 144, 1148, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 1132, 1133,
	1134, 1135, 1136, 1144, 1145, 0, 1021, 0, 1041, 1089,
	0, 1005, 1097, 1105, 1059, 281, 1108, 1056, 1055, 1139,
	0, 1138, 256, 1140, 1141, 191, 1103, 1037, 1046, 297,
	1044, 242, 224, 1110, 1076, 229, 240, 194, 267, 233,
	272, 258, 280, 236, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 1137, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 0,
	1147, 293, 173, 1004, 276, 0, 220, 1100, 1010, 1020,
	1018, 1053, 1078, 1079, 216, 292, 1093, 1096, 1094, 1123,
	245, 0, 0, 0, 0, 0, 185, 226, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1011, 0, 253, 274, 286, 277, 1054, 1028, 1065, 285,
	1031, 1029, 1092, 1030, 1082, 1125, 210, 211, 212, 213,
	177, 0, 153, 1074, 1058, 1126, 1127, 1128, 1129, 1130,
	1131, 1033, 1106, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 1098, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 1027, 1032, 1026,
	1071, 1072, 1117, 1118, 1119, 1090, 1019, 1101, 1023, 1025,
	1024, 938, 937, 947, 948, 940, 941, 942, 943, 944,
	945, 946, 939, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 1075, 135, 0, 193, 1124, 235, 171, 706,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 678, 0, 0, 0, 166,
	0, 0, 0, 192, 0, 0, 0, 252, 206, 0,
	0, 0, 0, 720, 726, 1142, 1143, 289, 290, 291,
	275, 0, 0, 0, 671, 0, 0, 0, 621, 712,
	711, 687, 0, 0, 0, 148, 688, 0, 695, 689,
	693, 692, 690, 691, 0, 658, 0, 0, 0, 0,
	0, 0, 619, 675, 0, 679, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 673, 0, 0,
	0, 0, 707, 0, 674, 0, 0, 709, 0, 696,
	0, 140, 257, 271, 149, 248, 284, 154, 255, 145,
	221, 244, 142, 269, 254, 203, 186, 187, 141, 0,
	239, 164, 178, 161, 219, 694, 705, 664, 160, 662,
	704, 279, 144, 0, 278, 218, 266, 270, 204, 198,
	143, 268, 202, 197, 190, 168, 182, 231, 196, 232,
	183, 208, 207, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 702, 0,
	0, 281, 0, 0, 719, 0, 0, 0, 256, 0,
	0, 191, 0, 0, 0, 665, 0, 242, 224, 729,
	0, 229, 240, 194, 267, 233, 272, 258, 280, 236,
	234, 136, 259, 163, 205, 146, 147, 159, 165, 167,
	169, 170, 214, 215, 227, 247, 260, 261, 262, 162,
	155, 241, 156, 180, 157, 137, 249, 158, 138, 228,
	265, 0, 176, 237, 201, 139, 200, 230, 264, 263,
	288, 294, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1313, 1312, 1314, 293, 173, 0,
	276, 717, 220, 728, 713, 714, 715, 718, 721, 722,
	660, 663, 723, 725, 727, 730, 245, 0, 0, 0,
	0, 0, 185, 226, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 274,
	286, 661, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 708, 210, 211, 212, 213, 659, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	179, 0, 181, 152, 225, 175, 283, 188, 0, 217,
	184, 250, 189, 195, 238, 282, 223, 243, 150, 273,
	251, 199, 174, 736, 716, 735, 737, 738, 734, 739,
	740, 724, 680, 0, 732, 731, 733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 193, 0, 235, 171, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	114, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 0, 0, 289, 290, 291, 275, 90, 0, 706,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 678, 0, 0, 0, 166,
	0, 0, 0, 192, 0, 0, 0, 252, 206, 0,
	0, 0, 0, 720, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 0, 0, 0, 621, 712,
	711, 687, 0, 0, 0, 148, 688, 0, 695, 689,
	693, 692, 690, 691, 0, 658, 0, 0, 0, 0,
	0, 0, 619, 675, 0, 679, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 673, 0, 0,
	0, 0, 707, 0, 674, 0, 0, 709, 0, 696,
	0, 140, 257, 271, 149, 248, 284, 154, 255, 145,
	221, 244, 142, 269, 254, 203, 186, 187, 141, 0,
	239, 164, 178, 161, 219, 694, 705, 664, 160, 662,
	704, 279, 144, 0, 278, 218, 266, 270, 204, 198,
	143, 268, 202, 197, 190, 168, 182, 231, 196, 232,
	183, 208, 207, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 702, 0,
	0, 281, 0, 0, 719, 0, 0, 0, 256, 0,
	0, 191, 0, 0, 0, 665, 0, 242, 224, 729,
	0, 229, 240, 194, 267, 233, 272, 258, 280, 236,
	234, 136, 259, 163, 205, 146, 147, 159, 165, 167,
	169, 170, 214, 215, 227, 247, 260, 261, 262, 162,
	155, 241, 156, 180, 157, 137, 249, 158, 138, 228,
	265, 0, 176, 237, 201, 139, 200, 230, 264, 263,
	288, 294, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 173, 0,
	276, 717, 220, 728, 713, 714, 715, 718, 721, 722,
	660, 663, 723, 725, 727, 730, 245, 0, 0, 0,
	0, 0, 185, 226, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 274,
	286, 661, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 708, 210, 211, 212, 213, 659, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	179, 0, 181, 152, 225, 175, 283, 188, 0, 217,
	184, 250, 189, 195, 238, 282, 223, 243, 150, 273,
	251, 199, 174, 736, 716, 735, 737, 738, 734, 739,
	740, 724, 680, 0, 732, 731, 733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 193, 89, 235, 171, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	114, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 706, 0, 289, 290, 291, 275, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 678, 0, 0,
	0, 166, 866, 0, 0, 192, 0, 0, 0, 252,
	206, 0, 0, 0, 0, 720, 726, 0, 0, 0,
	0, 0, 0, 862, 0, 0, 671, 0, 0, 0,
	621, 712, 711, 687, 0, 0, 0, 148, 688, 0,
	695, 689, 693, 692, 690, 691, 0, 658, 0, 0,
	0, 0, 0, 0, 619, 675, 0, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 672, 673,
	0, 0, 0, 0, 707, 0, 674, 0, 0, 863,
	0, 696, 0, 140, 257, 271, 149, 248, 284, 154,
	255, 145, 221, 244, 142, 269, 254, 203, 186, 187,
	141, 0, 239, 164, 178, 161, 219, 694, 705, 664,
	160, 662, 704, 279, 144, 0, 278, 218, 266, 270,
	204, 198, 143, 268, 202, 197, 190, 168, 182, 231,
	196, 232, 183, 208, 207, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 0, 0, 281, 0, 0, 719, 0, 0, 0,
	256, 0, 0, 191, 0, 0, 0, 665, 0, 242,
	224, 729, 0, 229, 240, 194, 267, 233, 272, 258,
	280, 236, 234, 136, 259, 163, 205, 146, 147, 159,
	165, 167, 169, 170, 214, 215, 227, 247, 260, 261,
	262, 162, 155, 241, 156, 180, 157, 137, 249, 158,
	138, 228, 265, 0, 176, 237, 201, 139, 200, 230,
	264, 263, 288, 294, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	173, 0, 276, 717, 220, 728, 713, 714, 715, 718,
	721, 722, 660, 663, 723, 725, 727, 730, 245, 0,
	0, 0, 0, 0, 185, 226, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 274, 286, 661, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 708, 210, 211, 212, 213, 659, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 179, 0, 181, 152, 225, 175, 283, 188,
	0, 217, 184, 250, 189, 195, 238, 282, 223, 243,
	150, 273, 251, 199, 174, 736, 716, 735, 737, 738,
	734, 739, 740, 724, 680, 0, 732, 731, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 193, 0, 235, 171, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 114, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 706, 0, 289, 290, 291, 275, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 678,
	0, 0, 0, 166, 2186, 0, 0, 192, 0, 0,
	0, 252, 206, 0, 0, 0, 0, 720, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	0, 0, 621, 712, 711, 687, 0, 0, 0, 148,
	688, 0, 695, 689, 693, 692, 690, 691, 0, 658,
	0, 0, 0, 0, 0, 0, 619, 675, 0, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	672, 673, 0, 0, 0, 0, 707, 0, 674, 0,
	0, 709, 0, 696, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 694,
	705, 664, 160, 662, 704, 279, 144, 0, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 281, 0, 0, 719, 0,
	0, 0, 256, 0, 0, 191, 0, 0, 0, 665,
	0, 242, 224, 729, 0, 229, 240, 194, 267, 233,
	272, 258, 280, 236, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 0, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 717, 220, 728, 713, 714,
	715, 718, 721, 722, 660, 663, 723, 725, 727, 730,
	245, 0, 0, 0, 0, 0, 185, 226, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 274, 286, 661, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 708, 210, 211, 212, 213,
	659, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 736, 716, 735,
	737, 738, 734, 739, 740, 724, 680, 0, 732, 731,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 0, 235, 171, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 114, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 706, 0, 289, 290, 291,
	275, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 678, 0, 0, 0, 166, 866, 0, 0, 192,
	0, 0, 0, 252, 206, 0, 0, 0, 0, 720,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 0, 0, 0, 621, 712, 711, 687, 0, 0,
	0, 148, 688, 0, 695, 689, 693, 692, 690, 691,
	0, 658, 0, 0, 0, 0, 0, 0, 619, 675,
	0, 679, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 673, 0, 0, 0, 0, 707, 0,
	674, 0, 0, 709, 0, 696, 0, 140, 257, 271,
	149, 248, 284, 154, 255, 145, 221, 244, 142, 269,
	254, 203, 186, 187, 141, 0, 239, 164, 178, 161,
	219, 694, 705, 664, 160, 662, 704, 279, 144, 0,
	278, 218, 266, 270, 204, 198, 143, 268, 202, 197,
	190, 168, 182, 231, 196, 232, 183, 208, 207, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 702, 0, 0, 281, 0, 0,
	719, 0, 0, 0, 256, 0, 0, 191, 0, 0,
	0, 665, 0, 242, 224, 729, 0, 229, 240, 194,
	267, 233, 272, 258, 280, 236, 234, 136, 259, 163,
	205, 146, 147, 159, 165, 167, 169, 170, 214, 215,
	227, 247, 260, 261, 262, 162, 155, 241, 156, 180,
	157, 137, 249, 158, 138, 228, 265, 0, 176, 237,
	201, 139, 200, 230, 264, 263, 288, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 173, 0, 276, 717, 220, 728,
	713, 714, 715, 718, 721, 722, 660, 663, 723, 725,
	727, 730, 245, 0, 0, 0, 0, 0, 185, 226,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 274, 286, 661, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 708, 210, 211,
	212, 213, 659, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 179, 0, 181, 152,
	225, 175, 283, 188, 0, 217, 184, 250, 189, 195,
	238, 282, 223, 243, 150, 273, 251, 199, 174, 736,
	716, 735, 737, 738, 734, 739, 740, 724, 680, 0,
	732, 731, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 193, 0, 235,
	171, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 114, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 0, 0, 289,
	290, 291, 275, 706, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 678,
	0, 0, 0, 166, 0, 0, 0, 192, 0, 0,
	0, 252, 206, 0, 0, 0, 0, 720, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 671, 0,
	0, 0, 621, 712, 711, 687, 0, 0, 0, 148,
	688, 0, 695, 689, 693, 692, 690, 691, 0, 658,
	0, 0, 0, 0, 0, 0, 619, 675, 0, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	672, 673, 0, 0, 0, 0, 707, 0, 674, 0,
	0, 709, 0, 696, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 694,
	705, 664, 160, 662, 704, 279, 144, 0, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 281, 0, 0, 719, 0,
	0, 0, 256, 0, 0, 191, 0, 0, 0, 665,
	0, 242, 224, 729, 0, 229, 240, 194, 267, 233,
	272, 258, 280, 236, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 0, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 717, 220, 728, 713, 714,
	715, 718, 721, 722, 660, 663, 723, 725, 727, 730,
	245, 0, 0, 0, 0, 0, 185, 226, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 274, 286, 661, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 708, 210, 211, 212, 213,
	659, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 736, 716, 735,
	737, 738, 734, 739, 740, 724, 680, 0, 732, 731,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 0, 235, 171, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 114, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 706, 0, 289, 290, 291,
	275, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 678, 0, 0, 0, 166, 0, 0, 0, 192,
	0, 0, 0, 252, 206, 0, 0, 0, 0, 720,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 0, 0, 0, 621, 712, 711, 687, 0, 0,
	0, 148, 688, 0, 695, 689, 693, 692, 690, 691,
	0, 658, 0, 0, 0, 0, 0, 0, 619, 675,
	0, 679, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 673, 616, 0, 0, 0, 707, 0,
	674, 0, 0, 709, 0, 696, 0, 140, 257, 271,
	149, 248, 284, 154, 255, 145, 221, 244, 142, 269,
	254, 203, 186, 187, 141, 0, 239, 164, 178, 161,
	219, 694, 705, 664, 160, 662, 704, 279, 144, 0,
	278, 218, 266, 270, 204, 198, 143, 268, 202, 197,
	190, 168, 182, 231, 196, 232, 183, 208, 207, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 702, 0, 0, 281, 0, 0,
	719, 0, 0, 0, 256, 0, 0, 191, 0, 0,
	0, 665, 0, 242, 224, 729, 0, 229, 240, 194,
	267, 233, 272, 258, 280, 236, 234, 136, 259, 163,
	205, 146, 147, 159, 165, 167, 169, 170, 214, 215,
	227, 247, 260, 261, 262, 162, 155, 241, 156, 180,
	157, 137, 249, 158, 138, 228, 265, 0, 176, 237,
	201, 139, 200, 230, 264, 263, 288, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 173, 0, 276, 717, 220, 728,
	713, 714, 715, 718, 721, 722, 660, 663, 723, 725,
	727, 730, 245, 0, 0, 0, 0, 0, 185, 226,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 274, 286, 661, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 708, 210, 211,
	212, 213, 659, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 179, 0, 181, 152,
	225, 175, 283, 188, 0, 217, 184, 250, 189, 195,
	238, 282, 223, 243, 150, 273, 251, 199, 174, 736,
	716, 735, 737, 738, 734, 739, 740, 724, 680, 0,
	732, 731, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 193, 0, 235,
	171, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 114, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 706, 0, 289,
	290, 291, 275, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 678, 0, 0, 0, 166, 0, 0,
	0, 192, 0, 0, 0, 252, 206, 0, 0, 0,
	0, 720, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 0, 0, 0, 621, 712, 711, 687,
	0, 0, 0, 148, 688, 0, 695, 689, 693, 692,
	690, 691, 0, 658, 0, 0, 0, 0, 0, 0,
	619, 675, 0, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 673, 0, 0, 0, 0,
	707, 0, 674, 0, 0, 709, 0, 696, 0, 140,
	257, 271, 149, 248, 284, 154, 255, 145, 221, 244,
	142, 269, 254, 203, 186, 187, 141, 0, 239, 164,
	178, 161, 219, 694, 705, 664, 160, 662, 704, 279,
	144, 0, 278, 218, 266, 270, 204, 198, 143, 268,
	202, 197, 190, 168, 182, 231, 196, 232, 183, 208,
	207, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 702, 0, 0, 281,
	0, 0, 719, 0, 0, 0, 256, 0, 0, 191,
	0, 0, 0, 665, 0, 242, 224, 729, 0, 229,
	240, 194, 267, 233, 272, 258, 280, 236, 234, 136,
	259, 163, 205, 146, 147, 159, 165, 167, 169, 170,
	214, 215, 227, 247, 260, 261, 262, 162, 155, 241,
	156, 180, 157, 137, 249, 158, 138, 228, 265, 0,
	176, 237, 201, 139, 200, 230, 264, 263, 288, 294,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 173, 0, 276, 717,
	220, 728, 713, 714, 715, 718, 721, 722, 660, 663,
	723, 725, 727, 730, 245, 0, 0, 0, 0, 0,
	185, 226, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 274, 286, 661,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 708,
	210, 211, 212, 213, 659, 0, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 179, 0,
	181, 152, 225, 175, 283, 188, 0, 217, 184, 250,
	189, 195, 238, 282, 223, 243, 150, 273, 251, 199,
	174, 736, 716, 735, 737, 738, 734, 739, 740, 724,
	680, 0, 732, 731, 733, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 193,
	0, 235, 171, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 114, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 706,
	0, 289, 290, 291, 275, 0, 0, 0, 0, 222,
	0, 1257, 0, 0, 0, 678, 0, 0, 0, 166,
	0, 0, 0, 192, 0, 0, 0, 252, 206, 0,
	0, 0, 0, 720, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 0, 0, 0, 621, 712,
	711, 687, 0, 0, 0, 148, 688, 0, 695, 689,
	693, 692, 690, 691, 0, 658, 0, 0, 0, 0,
	0, 0, 0, 675, 0, 679, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 673, 0, 0,
	0, 0, 707, 0, 674, 0, 0, 709, 0, 696,
	0, 140, 257, 271, 149, 248, 284, 154, 255, 145,
	221, 244, 142, 269, 254, 203, 186, 187, 141, 0,
	239, 164, 178, 161, 219, 694, 705, 664, 160, 662,
	704, 279, 144, 0, 278, 218, 266, 270, 204, 198,
	143, 268, 202, 197, 190, 168, 182, 231, 196, 232,
	183, 208, 207, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 702, 0,
	0, 281, 0, 0, 719, 0, 0, 0, 256, 0,
	0, 191, 0, 0, 0, 665, 0, 242, 224, 729,
	0, 229, 240, 194, 267, 233, 272, 258, 280, 236,
	234, 136, 259, 163, 205, 146, 147, 159, 165, 167,
	169, 170, 214, 215, 227, 247, 260, 261, 262, 162,
	155, 241, 156, 180, 157, 137, 249, 158, 138, 228,
	265, 0, 176, 237, 201, 139, 200, 230, 264, 263,
	288, 1258, 1259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 173, 0,
	276, 717, 220, 728, 713, 714, 715, 718, 721, 722,
	660, 663, 723, 725, 727, 730, 245, 0, 0, 0,
	0, 0, 185, 226, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 274,
	286, 661, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 708, 210, 211, 212, 213, 659, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	179, 0, 181, 152, 225, 175, 283, 188, 0, 217,
	184, 250, 189, 195, 238, 282, 223, 243, 150, 273,
	251, 199, 174, 736, 716, 735, 737, 738, 734, 739,
	740, 724, 680, 0, 732, 731, 733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 193, 0, 235, 171, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	114, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 706, 0, 289, 290, 291, 275, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 678, 0, 0,
	0, 166, 0, 0, 0, 192, 0, 0, 0, 252,
	206, 0, 0, 0, 0, 720, 726, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 0, 0, 0,
	621, 712, 711, 687, 0, 0, 0, 148, 688, 0,
	695, 689, 693, 692, 690, 691, 0, 658, 0, 0,
	0, 0, 0, 0, 0, 675, 0, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 672, 673,
	0, 0, 0, 0, 707, 0, 674, 0, 0, 709,
	0, 696, 0, 140, 257, 271, 149, 248, 284, 154,
	255, 145, 221, 244, 142, 269, 254, 203, 186, 187,
	141, 0, 239, 164, 178, 161, 219, 694, 705, 664,
	160, 662, 704, 279, 144, 0, 278, 218, 266, 270,
	204, 198, 143, 268, 202, 197, 190, 168, 182, 231,
	196, 232, 183, 208, 207, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 0, 0, 281, 0, 0, 719, 0, 0, 0,
	256, 0, 0, 191, 0, 0, 0, 665, 0, 242,
	224, 729, 0, 229, 240, 194, 267, 233, 272, 258,
	280, 236, 234, 136, 259, 163, 205, 146, 147, 159,
	165, 167, 169, 170, 214, 215, 227, 247, 260, 261,
	262, 162, 155, 241, 156, 180, 157, 137, 249, 158,
	138, 228, 265, 0, 176, 237, 201, 139, 200, 230,
	264, 263, 288, 294, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	173, 0, 276, 717, 220, 728, 713, 714, 715, 718,
	721, 722, 660, 663, 723, 725, 727, 730, 245, 0,
	0, 0, 0, 0, 185, 226, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 274, 286, 661, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 708, 210, 211, 212, 213, 659, 0,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 179, 0, 181, 152, 225, 175, 283, 188,
	0, 217, 184, 250, 189, 195, 238, 282, 223, 243,
	150, 273, 251, 199, 174, 736, 716, 735, 737, 738,
	734, 739, 740, 724, 680, 0, 732, 731, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 193, 0, 235, 171, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 114, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 706, 0, 289, 290, 291, 275, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 678,
	0, 0, 0, 166, 0, 0, 0, 192, 0, 0,
	0, 252, 206, 0, 0, 0, 0, 720, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 621, 712, 711, 687, 0, 0, 0, 148,
	688, 0, 695, 689, 693, 692, 690, 691, 0, 658,
	0, 0, 0, 0, 0, 0, 619, 675, 0, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	672, 673, 0, 0, 0, 0, 707, 0, 674, 0,
	0, 709, 0, 696, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 694,
	705, 664, 160, 662, 704, 279, 144, 0, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 281, 0, 0, 719, 0,
	0, 0, 256, 0, 0, 191, 0, 0, 0, 665,
	0, 242, 224, 729, 0, 229, 240, 194, 267, 233,
	272, 258, 280, 236, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 0, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 717, 220, 728, 713, 714,
	715, 718, 721, 722, 660, 663, 723, 725, 727, 730,
	245, 0, 0, 0, 0, 0, 185, 226, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 274, 286, 661, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 708, 210, 211, 212, 213,
	659, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 736, 716, 735,
	737, 738, 734, 739, 740, 724, 680, 0, 732, 731,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 0, 235, 171, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 114, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 0, 0, 289, 290, 291,
	275, 344, 0, 343, 347, 339, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 354, 192, 0, 0,
	0, 252, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 0, 358, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 0,
	0, 296, 160, 287, 0, 279, 144, 0, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 336, 340, 0,
	0, 0, 0, 0, 342, 281, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 191, 346, 0, 0, 297,
	0, 242, 224, 0, 0, 229, 240, 194, 267, 233,
	338, 258, 280, 236, 362, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 1296, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 216, 292, 0, 0, 0, 0,
	245, 0, 0, 0, 341, 345, 348, 226, 349, 350,
	0, 0, 351, 352, 353, 0, 0, 355, 356, 0,
	0, 0, 253, 274, 286, 277, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	177, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1292, 0, 1289,
	0, 0, 0, 1291, 1288, 1290, 1294, 1295, 0, 0,
	0, 1293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 0, 235, 171, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 0, 0, 289, 290, 291,
	275, 344, 0, 343, 347, 339, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 354, 192, 0, 0,
	0, 252, 206, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1299, 1300, 1301, 1302, 1303, 1304,
	1297, 1298, 357, 0, 0, 358, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 344, 0, 343, 347, 339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 0,
	0, 0, 0, 0, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 0,
	0, 296, 160, 287, 0, 279, 144, 0, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 336, 340, 0,
	0, 0, 0, 0, 342, 281, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 191, 346, 0, 0, 297,
	0, 242, 224, 0, 0, 229, 240, 194, 267, 233,
	338, 258, 280, 236, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 0, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 337, 336, 340,
	0, 0, 0, 0, 0, 342, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 0, 220, 346, 0, 0,
	0, 0, 0, 0, 216, 292, 0, 0, 0, 0,
	245, 796, 0, 0, 341, 345, 348, 226, 349, 350,
	0, 0, 351, 352, 353, 0, 0, 355, 356, 0,
	0, 0, 253, 274, 286, 277, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	177, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 341, 345, 797, 0, 349,
	798, 0, 0, 351, 352, 353, 0, 0, 355, 356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 0, 235, 171, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 0, 0, 289, 290, 291,
	275, 90, 0, 26, 46, 27, 0, 0, 0, 0,
	0, 0, 0, 222, 300, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 192, 0, 0,
	0, 252, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 305, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 257, 271, 149, 248,
	284, 154, 255, 145, 221, 244, 142, 269, 254, 203,
	186, 187, 141, 0, 239, 164, 178, 161, 219, 0,
	0, 296, 160, 287, 0, 279, 144, 0, 278, 218,
	266, 270, 204, 198, 143, 268, 202, 197, 190, 168,
	182, 231, 196, 232, 183, 208, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 191, 0, 0, 0, 297,
	0, 242, 224, 0, 0, 229, 240, 194, 267, 233,
	272, 258, 280, 236, 234, 136, 259, 163, 205, 146,
	147, 159, 165, 167, 169, 170, 214, 215, 227, 247,
	260, 261, 262, 162, 155, 241, 156, 180, 157, 137,
	249, 158, 138, 228, 265, 0, 176, 237, 201, 139,
	200, 230, 264, 263, 288, 294, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 173, 0, 276, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 216, 292, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 185, 226, 0, 246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 274, 286, 277, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	301, 303, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 179, 0, 181, 152, 225, 175,
	283, 188, 0, 217, 184, 250, 189, 195, 238, 282,
	223, 243, 150, 273, 251, 199, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 193, 89, 235, 171, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 222, 0, 289, 290, 291,
	275, 0, 0, 0, 0, 166, 0, 0, 0, 192,
	0, 0, 0, 252, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 1549, 1552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 257, 271,
	149, 248, 284, 154, 255, 145, 221, 244, 142, 269,
	254, 203, 186, 187, 141, 0, 239, 164, 178, 161,
	219, 0, 0, 296, 160, 287, 0, 279, 144, 0,
	278, 218, 266, 270, 204, 198, 143, 268, 202, 197,
	190, 168, 182, 231, 196, 232, 183, 208, 207, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1553, 281, 0, 0,
	0, 1546, 0, 1545, 256, 1547, 1550, 191, 0, 0,
	0, 297, 0, 242, 224, 0, 0, 229, 240, 194,
	267, 233, 272, 258, 280, 236, 234, 136, 259, 163,
	205, 146, 147, 159, 165, 167, 169, 170, 214, 215,
	227, 247, 260, 261, 262, 162, 155, 241, 156, 180,
	157, 137, 249, 158, 138, 228, 265, 1551, 176, 237,
	201, 139, 200, 230, 264, 263, 288, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 173, 0, 276, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 216, 292, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 185, 226,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 274, 286, 277, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 177, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 179, 0, 181, 152,
	225, 175, 283, 188, 0, 217, 184, 250, 189, 195,
	238, 282, 223, 243, 150, 273, 251, 199, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 193, 0, 235,
	171, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 0, 222, 289,
	290, 291, 275, 900, 0, 0, 0, 0, 166, 0,
	0, 0, 192, 0, 0, 0, 252, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	901, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 896, 897, 898,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 257, 271, 149, 248, 284, 154, 255, 145, 221,
	244, 142, 269, 254, 203, 186, 187, 141, 0, 239,
	164, 178, 161, 219, 0, 0, 296, 160, 287, 0,
	279, 144, 0, 278, 218, 266, 270, 204, 198, 143,
	268, 202, 197, 190, 168, 182, 231, 196, 232, 183,
	208, 207, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	191, 0, 0, 0, 297, 0, 242, 224, 0, 0,
	229, 240, 194, 267, 233, 272, 258, 280, 236, 234,
	136, 259, 163, 205, 146, 147, 159, 165, 167, 169,
	170, 214, 215, 227, 247, 260, 261, 262, 162, 155,
	241, 156, 180, 157, 137, 249, 158, 138, 228, 265,
	0, 176, 237, 201, 139, 200, 230, 264, 263, 288,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 173, 0, 276,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 216,
	292, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 185, 226, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 274, 286,
	277, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 177, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 179,
	0, 181, 152, 225, 175, 283, 188, 0, 217, 184,
	250, 189, 195, 238, 282, 223, 243, 150, 273, 251,
	199, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	193, 0, 235, 171, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	222, 0, 289, 290, 291, 275, 0, 0, 0, 0,
	166, 410, 0, 0, 192, 0, 0, 0, 252, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	418, 419, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 257, 271, 149, 248, 284, 154, 255,
	145, 221, 244, 142, 269, 254, 203, 186, 187, 141,
	0, 239, 164, 178, 161, 219, 0, 0, 296, 160,
	287, 394, 279, 144, 393, 278, 218, 266, 270, 204,
	198, 143, 268, 202, 197, 190, 168, 182, 231, 196,
	232, 183, 208, 207, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 191, 0, 0, 0, 297, 0, 242, 224,
	0, 0, 229, 240, 194, 267, 233, 272, 258, 280,
	409, 234, 136, 259, 163, 205, 146, 147, 159, 165,
	167, 169, 170, 214, 215, 227, 247, 260, 261, 262,
	162, 155, 241, 156, 180, 157, 137, 249, 158, 138,
	228, 265, 0, 176, 237, 201, 139, 200, 230, 264,
	263, 288, 294, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 173,
	0, 276, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 216, 292, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 185, 226, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	274, 286, 277, 0, 0, 0, 285, 0, 0, 0,
	0, 0, 412, 210, 211, 212, 213, 177, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 179, 0, 181, 152, 225, 175, 283, 188, 0,
	420, 415, 416, 189, 195, 238, 282, 223, 243, 150,
	273, 251, 417, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 193, 0, 235, 171, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 90, 0, 289, 290, 291, 275, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 192, 0,
	0, 0, 252, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 987, 0, 96, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 257, 271, 149,
	248, 284, 154, 255, 145, 221, 244, 142, 269, 254,
	203, 186, 187, 141, 0, 239, 164, 178, 161, 219,
	0, 0, 296, 160, 287, 0, 279, 144, 0, 278,
	218, 266, 270, 204, 198, 143, 268, 202, 197, 190,
	168, 182, 231, 196, 232, 183, 208, 207, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 191, 0, 0, 0,
	297, 0, 242, 224, 0, 0, 229, 240, 194, 267,
	233, 272, 258, 280, 236, 234, 136, 259, 163, 205,
	146, 147, 159, 165, 167, 169, 170, 214, 215, 227,
	247, 260, 261, 262, 162, 155, 241, 156, 180, 157,
	137, 249, 158, 138, 228, 265, 0, 176, 237, 201,
	139, 200, 230, 264, 263, 288, 294, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 173, 0, 276, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 216, 292, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 185, 226, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 274, 286, 277, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 177, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 179, 0, 181, 152, 225,
	175, 283, 188, 0, 217, 184, 250, 189, 195, 238,
	282, 223, 243, 150, 273, 251, 199, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 193, 89, 235, 171,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 222, 0, 289, 290,
	291, 275, 0, 0, 0, 0, 166, 0, 0, 0,
	192, 0, 0, 0, 252, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 418, 419, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 0, 0, 296, 160, 287, 394, 279, 144,
	393, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 191, 0,
	0, 0, 297, 0, 242, 224, 0, 0, 229, 240,
	194, 267, 233, 272, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 0, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 216, 292, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 185,
	226, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 274, 286, 277, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 177, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 420, 415, 416, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 417, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 0,
	235, 171, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 0, 0,
	289, 290, 291, 275, 222, 0, 571, 0, 0, 0,
	0, 0, 0, 0, 166, 572, 0, 0, 192, 0,
	0, 0, 252, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 0, 358, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 257, 271, 149,
	248, 284, 154, 255, 145, 221, 244, 142, 269, 254,
	203, 186, 187, 141, 0, 239, 164, 178, 161, 219,
	0, 0, 296, 160, 287, 0, 279, 144, 0, 278,
	218, 266, 270, 204, 198, 143, 268, 202, 197, 190,
	168, 182, 231, 196, 232, 183, 208, 207, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 191, 0, 0, 0,
	297, 0, 242, 224, 0, 0, 229, 240, 194, 267,
	233, 272, 258, 280, 236, 234, 136, 259, 163, 205,
	146, 147, 159, 165, 167, 169, 170, 214, 215, 227,
	247, 260, 261, 262, 162, 155, 241, 156, 180, 157,
	137, 249, 158, 138, 228, 265, 0, 176, 237, 201,
	139, 200, 230, 264, 263, 288, 294, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 173, 0, 276, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 216, 292, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 185, 226, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 274, 286, 277, 0, 0, 0,
	285, 0, 0, 0, 0, 573, 0, 210, 211, 212,
	213, 177, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 179, 0, 181, 152, 225,
	175, 283, 188, 0, 217, 184, 250, 189, 195, 238,
	282, 223, 243, 150, 273, 251, 199, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 193, 0, 235, 171,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 0, 0, 289, 290,
	291, 275, 222, 0, 854, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 192, 0, 0, 0,
	252, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 0, 0, 358, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 257, 271, 149, 248, 284,
	154, 255, 145, 221, 244, 142, 269, 254, 203, 186,
	187, 141, 0, 239, 164, 178, 161, 219, 0, 0,
	296, 160, 287, 0, 279, 144, 0, 278, 218, 266,
	270, 204, 198, 143, 268, 202, 197, 190, 168, 182,
	231, 196, 232, 183, 208, 207, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 191, 0, 0, 0, 297, 0,
	242, 224, 0, 0, 229, 240, 194, 267, 233, 272,
	258, 280, 236, 234, 136, 259, 163, 205, 146, 147,
	159, 165, 167, 169, 170, 214, 215, 227, 247, 260,
	261, 262, 162, 155, 241, 156, 180, 157, 137, 249,
	158, 138, 228, 265, 0, 176, 237, 201, 139, 200,
	230, 264, 263, 288, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 173, 0, 276, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 216, 292, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 185, 226, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 274, 286, 277, 0, 0, 0, 285, 0,
	0, 0, 0, 853, 0, 210, 211, 212, 213, 177,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 179, 0, 181, 152, 225, 175, 283,
	188, 0, 217, 184, 250, 189, 195, 238, 282, 223,
	243, 150, 273, 251, 199, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 193, 0, 235, 171, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 222, 0, 289, 290, 291, 275,
	0, 0, 0, 0, 166, 593, 0, 0, 192, 0,
	0, 0, 252, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 591, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 0, 140, 257, 271, 149,
	248, 284, 154, 255, 145, 221, 244, 142, 269, 254,
	203, 186, 187, 141, 0, 239, 164, 178, 161, 219,
	0, 0, 296, 160, 287, 0, 279, 144, 0, 278,
	218, 266, 270, 204, 198, 143, 268, 202, 197, 190,
	168, 182, 231, 196, 232, 183, 208, 207, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 191, 0, 0, 0,
	297, 0, 242, 224, 0, 0, 229, 240, 194, 267,
	233, 272, 258, 280, 236, 234, 136, 259, 163, 205,
	146, 147, 159, 165, 167, 169, 170, 214, 215, 227,
	247, 260, 261, 262, 162, 155, 241, 156, 180, 157,
	137, 249, 158, 138, 228, 265, 0, 176, 237, 201,
	139, 200, 230, 264, 263, 288, 294, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 173, 0, 276, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 216, 292, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 185, 226, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 274, 286, 277, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 177, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 179, 0, 181, 152, 225,
	175, 283, 188, 0, 217, 184, 250, 189, 195, 238,
	282, 223, 243, 150, 273, 251, 199, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 193, 0, 235, 171,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 222, 0, 289, 290,
	291, 275, 0, 0, 0, 0, 166, 588, 0, 0,
	192, 0, 0, 0, 252, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 591, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 0, 0, 296, 160, 287, 0, 279, 144,
	0, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 191, 0,
	0, 0, 297, 0, 242, 224, 0, 0, 229, 240,
	194, 267, 233, 272, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 0, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 216, 292, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 185,
	226, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 274, 286, 277, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 177, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 0,
	235, 171, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 222, 0,
	289, 290, 291, 275, 0, 0, 0, 0, 166, 0,
	0, 0, 192, 0, 0, 0, 252, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2117, 0, 96, 712, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 257, 271, 149, 248, 284, 154, 255, 145, 221,
	244, 142, 269, 254, 203, 186, 187, 141, 0, 239,
	164, 178, 161, 219, 0, 0, 296, 160, 287, 0,
	279, 144, 0, 278, 218, 266, 270, 204, 198, 143,
	268, 202, 197, 190, 168, 182, 231, 196, 232, 183,
	208, 207, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	191, 0, 0, 0, 297, 0, 242, 224, 0, 0,
	229, 240, 194, 267, 233, 272, 258, 280, 236, 234,
	136, 259, 163, 205, 146, 147, 159, 165, 167, 169,
	170, 214, 215, 227, 247, 260, 261, 262, 162, 155,
	241, 156, 180, 157, 137, 249, 158, 138, 228, 265,
	0, 176, 237, 201, 139, 200, 230, 264, 263, 288,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 173, 0, 276,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 216,
	292, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 185, 226, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 274, 286,
	277, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 177, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 179,
	0, 181, 152, 225, 175, 283, 188, 0, 217, 184,
	250, 189, 195, 238, 282, 223, 243, 150, 273, 251,
	199, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	193, 0, 235, 171, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	222, 0, 289, 290, 291, 275, 0, 0, 0, 0,
	166, 0, 0, 0, 192, 0, 0, 0, 252, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 591, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 140, 257, 271, 149, 248, 284, 154, 255,
	145, 221, 244, 142, 269, 254, 203, 186, 187, 141,
	0, 239, 164, 178, 161, 219, 0, 0, 296, 160,
	287, 0, 279, 144, 0, 278, 218, 266, 270, 204,
	198, 143, 268, 202, 197, 190, 168, 182, 231, 196,
	232, 183, 208, 207, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 191, 0, 0, 0, 297, 0, 242, 224,
	0, 0, 229, 240, 194, 267, 233, 272, 258, 280,
	236, 234, 136, 259, 163, 205, 146, 147, 159, 165,
	167, 169, 170, 214, 215, 227, 247, 260, 261, 262,
	162, 155, 241, 156, 180, 157, 137, 249, 158, 138,
	228, 265, 0, 176, 237, 201, 139, 200, 230, 264,
	263, 288, 294, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 173,
	0, 276, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 216, 292, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 185, 226, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	274, 286, 277, 0, 0, 0, 285, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 177, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 179, 0, 181, 152, 225, 175, 283, 188, 0,
	217, 184, 250, 189, 195, 238, 282, 223, 243, 150,
	273, 251, 199, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 193, 0, 235, 171, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 222, 0, 289, 290, 291, 275, 0, 0,
	0, 0, 166, 0, 0, 0, 192, 0, 0, 0,
	252, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 591, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1718, 0, 0, 0, 140, 257, 271, 149, 248, 284,
	154, 255, 145, 221, 244, 142, 269, 254, 203, 186,
	187, 141, 0, 239, 164, 178, 161, 219, 0, 0,
	296, 160, 287, 0, 279, 144, 0, 278, 218, 266,
	270, 204, 198, 143, 268, 202, 197, 190, 168, 182,
	231, 196, 232, 183, 208, 207, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 191, 0, 0, 0, 297, 0,
	242, 224, 0, 0, 229, 240, 194, 267, 233, 272,
	258, 280, 236, 234, 136, 259, 163, 205, 146, 147,
	159, 165, 167, 169, 170, 214, 215, 227, 247, 260,
	261, 262, 162, 155, 241, 156, 180, 157, 137, 249,
	158, 138, 228, 265, 0, 176, 237, 201, 139, 200,
	230, 264, 263, 288, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 173, 0, 276, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 216, 292, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 185, 226, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 274, 286, 277, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 177,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 179, 0, 181, 152, 225, 175, 283,
	188, 0, 217, 184, 250, 189, 195, 238, 282, 223,
	243, 150, 273, 251, 199, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 193, 0, 235, 171, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 222, 0, 289, 290, 291, 275,
	0, 0, 0, 0, 166, 0, 0, 0, 192, 0,
	0, 0, 252, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 591, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 257, 271, 149,
	248, 284, 154, 255, 145, 221, 244, 142, 269, 254,
	203, 186, 187, 141, 0, 239, 164, 178, 161, 219,
	0, 0, 296, 160, 287, 0, 279, 144, 0, 278,
	218, 266, 270, 204, 198, 143, 268, 202, 197, 190,
	168, 182, 231, 196, 232, 183, 208, 207, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 191, 0, 0, 0,
	297, 0, 242, 224, 0, 0, 229, 240, 194, 267,
	233, 272, 258, 280, 236, 234, 136, 259, 163, 205,
	146, 147, 159, 165, 167, 169, 170, 214, 215, 227,
	247, 260, 261, 262, 162, 155, 241, 156, 180, 157,
	137, 249, 158, 138, 228, 265, 0, 176, 237, 201,
	139, 200, 230, 264, 263, 288, 294, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 173, 0, 276, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 216, 292, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 185, 226, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 274, 286, 277, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 1524, 210, 211, 212,
	213, 177, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 179, 0, 181, 152, 225,
	175, 283, 188, 0, 217, 184, 250, 189, 195, 238,
	282, 223, 243, 150, 273, 251, 199, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 193, 0, 235, 171,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 222, 0, 289, 290,
	291, 275, 0, 0, 0, 0, 166, 1228, 0, 0,
	192, 0, 0, 0, 252, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 591, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 0, 0, 296, 160, 287, 0, 279, 144,
	0, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 191, 0,
	0, 0, 297, 0, 242, 224, 0, 0, 229, 240,
	194, 267, 233, 272, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 0, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 216, 292, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 185,
	226, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 274, 286, 277, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 177, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 0,
	235, 171, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 222, 0,
	289, 290, 291, 275, 0, 0, 0, 0, 166, 0,
	0, 0, 192, 0, 0, 0, 252, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 712, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 257, 271, 149, 248, 284, 154, 255, 145, 221,
	244, 142, 269, 254, 203, 186, 187, 141, 0, 239,
	164, 178, 161, 219, 0, 0, 296, 160, 287, 0,
	279, 144, 0, 278, 218, 266, 270, 204, 198, 143,
	268, 202, 197, 190, 168, 182, 231, 196, 232, 183,
	208, 207, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	191, 0, 0, 0, 297, 0, 242, 224, 0, 0,
	229, 240, 194, 267, 233, 272, 258, 280, 236, 234,
	136, 259, 163, 205, 146, 147, 159, 165, 167, 169,
	170, 214, 215, 227, 247, 260, 261, 262, 162, 155,
	241, 156, 180, 157, 137, 249, 158, 138, 228, 265,
	0, 176, 237, 201, 139, 200, 230, 264, 263, 288,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 173, 0, 276,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 216,
	292, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 185, 226, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 274, 286,
	277, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 177, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 179,
	0, 181, 152, 225, 175, 283, 188, 0, 217, 184,
	250, 189, 195, 238, 282, 223, 243, 150, 273, 251,
	199, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	193, 0, 235, 171, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	222, 0, 289, 290, 291, 275, 0, 0, 0, 0,
	166, 0, 0, 0, 192, 0, 0, 0, 252, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1851, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 257, 271, 149, 248, 284, 154, 255,
	145, 221, 244, 142, 269, 254, 203, 186, 187, 141,
	0, 239, 164, 178, 161, 219, 0, 0, 296, 160,
	287, 0, 279, 144, 0, 278, 218, 266, 270, 204,
	198, 143, 268, 202, 197, 190, 168, 182, 231, 196,
	232, 183, 208, 207, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 191, 0, 0, 0, 297, 0, 242, 224,
	0, 0, 229, 240, 194, 267, 233, 272, 258, 280,
	236, 234, 136, 259, 163, 205, 146, 147, 159, 165,
	167, 169, 170, 214, 215, 227, 247, 260, 261, 262,
	162, 155, 241, 156, 180, 157, 137, 249, 158, 138,
	228, 265, 0, 176, 237, 201, 139, 200, 230, 264,
	263, 288, 294, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 173,
	0, 276, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 216, 292, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 185, 226, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	274, 286, 277, 0, 0, 0, 285, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 177, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 179, 0, 181, 152, 225, 175, 283, 188, 0,
	217, 184, 250, 189, 195, 238, 282, 223, 243, 150,
	273, 251, 199, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 193, 0, 235, 171, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 222, 0, 289, 290, 291, 275, 0, 0,
	0, 0, 166, 0, 0, 0, 192, 0, 0, 0,
	252, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 591, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 257, 271, 149, 248, 284,
	154, 255, 145, 221, 244, 142, 269, 254, 203, 186,
	187, 141, 0, 239, 164, 178, 161, 219, 0, 0,
	296, 160, 287, 0, 279, 144, 0, 278, 218, 266,
	270, 204, 198, 143, 268, 202, 197, 190, 168, 182,
	231, 196, 232, 183, 208, 207, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 191, 0, 0, 0, 297, 0,
	242, 224, 0, 0, 229, 240, 194, 267, 233, 272,
	258, 280, 236, 234, 136, 259, 163, 205, 146, 147,
	159, 165, 167, 169, 170, 214, 215, 227, 247, 260,
	261, 262, 162, 155, 241, 156, 180, 157, 137, 249,
	158, 138, 228, 265, 0, 176, 237, 201, 139, 200,
	230, 264, 263, 288, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 173, 0, 276, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 216, 292, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 185, 226, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 274, 286, 277, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 177,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 179, 0, 181, 152, 225, 175, 283,
	188, 0, 217, 184, 250, 189, 195, 238, 282, 223,
	243, 150, 273, 251, 199, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 193, 0, 235, 171, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 222, 0, 289, 290, 291, 275,
	0, 0, 0, 0, 166, 0, 0, 0, 192, 0,
	0, 0, 252, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 257, 271, 149,
	248, 284, 154, 255, 145, 221, 244, 142, 269, 254,
	203, 186, 187, 141, 0, 239, 164, 178, 161, 219,
	0, 0, 296, 160, 287, 0, 279, 144, 0, 278,
	218, 266, 270, 204, 198, 143, 268, 202, 197, 190,
	168, 182, 231, 196, 232, 183, 208, 207, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 191, 0, 0, 0,
	297, 0, 242, 224, 0, 0, 229, 240, 194, 267,
	233, 272, 258, 280, 236, 234, 136, 259, 163, 205,
	146, 147, 159, 165, 167, 169, 170, 214, 215, 227,
	247, 260, 261, 262, 162, 155, 241, 156, 180, 157,
	137, 249, 158, 138, 228, 265, 0, 176, 237, 201,
	139, 200, 230, 264, 263, 288, 294, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 173, 0, 276, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 216, 292, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 185, 226, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 274, 286, 277, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 177, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 179, 0, 181, 152, 225,
	175, 283, 188, 0, 217, 184, 250, 189, 195, 238,
	282, 223, 243, 150, 273, 251, 199, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 193, 0, 235, 171,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 222, 0, 289, 290,
	291, 275, 0, 0, 0, 0, 166, 0, 0, 0,
	192, 0, 0, 0, 252, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 0, 0, 296, 160, 287, 0, 279, 144,
	0, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 191, 0,
	0, 0, 297, 0, 242, 224, 0, 0, 229, 240,
	194, 267, 233, 272, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 0, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 216, 292, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 185,
	226, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 274, 286, 277, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 177, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 0,
	235, 171, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 222, 0,
	289, 290, 291, 275, 0, 0, 0, 0, 166, 0,
	0, 0, 192, 0, 0, 0, 252, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 257, 271, 149, 248, 284, 154, 255, 145, 221,
	244, 142, 269, 254, 203, 186, 187, 141, 0, 239,
	164, 178, 161, 219, 0, 0, 296, 160, 287, 0,
	279, 144, 0, 278, 218, 266, 270, 204, 198, 143,
	268, 202, 197, 190, 168, 182, 231, 196, 232, 183,
	208, 207, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	191, 0, 0, 0, 297, 0, 242, 224, 0, 0,
	229, 240, 194, 267, 233, 272, 258, 280, 236, 234,
	136, 259, 163, 205, 146, 147, 159, 165, 167, 169,
	170, 214, 215, 227, 247, 260, 261, 262, 162, 155,
	241, 156, 180, 157, 137, 249, 158, 138, 228, 265,
	0, 176, 237, 201, 139, 200, 230, 264, 263, 288,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 173, 0, 276,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 216,
	292, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 185, 226, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 274, 286,
	277, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 177, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 179,
	0, 181, 152, 225, 175, 283, 188, 0, 217, 184,
	250, 189, 195, 238, 282, 223, 243, 150, 273, 251,
	199, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	193, 0, 235, 171, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	222, 0, 289, 290, 291, 275, 0, 0, 0, 0,
	166, 0, 0, 0, 192, 0, 0, 0, 252, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 1246, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 257, 271, 149, 248, 284, 154, 255,
	145, 221, 244, 142, 269, 254, 203, 186, 187, 141,
	0, 239, 164, 178, 161, 219, 0, 0, 296, 160,
	287, 0, 279, 144, 0, 278, 218, 266, 270, 204,
	198, 143, 268, 202, 197, 190, 168, 182, 231, 196,
	232, 183, 208, 207, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 191, 0, 0, 0, 297, 0, 242, 224,
	0, 0, 229, 240, 194, 267, 233, 272, 258, 280,
	236, 234, 136, 259, 163, 205, 146, 147, 159, 165,
	167, 169, 170, 214, 215, 227, 247, 260, 261, 262,
	162, 155, 241, 156, 180, 157, 137, 249, 158, 138,
	228, 265, 0, 176, 237, 201, 139, 200, 230, 264,
	263, 288, 294, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 173,
	0, 276, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 216, 292, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 185, 226, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	274, 286, 277, 0, 0, 0, 285, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 177, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 179, 0, 181, 152, 225, 175, 283, 188, 0,
	217, 184, 250, 189, 195, 238, 282, 223, 243, 150,
	273, 251, 199, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 193, 0, 235, 171, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 222, 0, 289, 290, 291, 275, 0, 0,
	0, 0, 166, 0, 0, 0, 192, 0, 0, 0,
	252, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 0, 0, 358, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 257, 271, 149, 248, 284,
	154, 255, 145, 221, 244, 142, 269, 254, 203, 186,
	187, 141, 0, 239, 164, 178, 161, 219, 0, 0,
	296, 160, 287, 0, 279, 144, 0, 278, 218, 266,
	270, 204, 198, 143, 268, 202, 197, 190, 168, 182,
	231, 196, 232, 183, 208, 207, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 191, 0, 0, 0, 297, 0,
	242, 224, 0, 0, 229, 240, 194, 267, 233, 272,
	258, 280, 236, 234, 136, 259, 163, 205, 146, 147,
	159, 165, 167, 169, 170, 214, 215, 227, 247, 260,
	261, 262, 162, 155, 241, 156, 180, 157, 137, 249,
	158, 138, 228, 265, 0, 176, 237, 201, 139, 200,
	230, 264, 263, 288, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 173, 0, 276, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 216, 292, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 185, 226, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 274, 286, 277, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 177,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 179, 0, 181, 152, 225, 175, 283,
	188, 0, 217, 184, 250, 189, 195, 238, 282, 223,
	243, 150, 273, 251, 199, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 193, 0, 235, 171, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 222, 0, 289, 290, 291, 275,
	0, 0, 0, 0, 166, 0, 0, 0, 192, 0,
	0, 0, 252, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 257, 271, 149,
	248, 284, 154, 255, 145, 221, 244, 142, 269, 254,
	203, 186, 187, 141, 0, 239, 164, 178, 161, 219,
	0, 0, 296, 160, 287, 0, 279, 144, 0, 278,
	218, 266, 270, 204, 198, 143, 268, 202, 197, 190,
	168, 182, 231, 196, 232, 183, 208, 207, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 1190,
	0, 0, 0, 256, 0, 0, 191, 0, 0, 0,
	297, 0, 242, 224, 0, 0, 229, 240, 194, 267,
	233, 272, 258, 280, 236, 234, 136, 259, 163, 205,
	146, 147, 159, 165, 167, 169, 170, 214, 215, 227,
	247, 260, 261, 262, 162, 155, 241, 156, 180, 157,
	137, 249, 158, 138, 228, 265, 0, 176, 237, 201,
	139, 200, 230, 264, 263, 288, 294, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 173, 0, 276, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 216, 292, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 185, 226, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 274, 286, 277, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 177, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 179, 0, 181, 152, 225,
	175, 283, 188, 0, 217, 184, 250, 189, 195, 238,
	282, 223, 243, 150, 273, 251, 199, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 193, 0, 235, 171,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 222, 0, 289, 290,
	291, 275, 0, 0, 0, 0, 166, 0, 0, 0,
	192, 0, 0, 0, 252, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 591, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 257,
	271, 149, 248, 284, 154, 255, 145, 221, 244, 142,
	269, 254, 203, 186, 187, 141, 0, 239, 164, 178,
	161, 219, 0, 0, 296, 160, 287, 0, 279, 144,
	0, 278, 218, 266, 270, 204, 198, 143, 268, 202,
	197, 190, 168, 182, 231, 196, 232, 183, 208, 207,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 191, 0,
	0, 0, 297, 0, 242, 224, 0, 0, 229, 240,
	194, 267, 233, 272, 258, 280, 236, 234, 136, 259,
	163, 205, 146, 147, 159, 165, 167, 169, 170, 214,
	215, 227, 247, 260, 261, 262, 162, 155, 241, 156,
	180, 157, 137, 249, 158, 138, 228, 265, 0, 176,
	237, 201, 139, 200, 230, 264, 263, 288, 294, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 173, 0, 276, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 216, 292, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 185,
	226, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 274, 286, 844, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 177, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 179, 0, 181,
	152, 225, 175, 283, 188, 0, 217, 184, 250, 189,
	195, 238, 282, 223, 243, 150, 273, 251, 199, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 193, 0,
	235, 171, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 222, 0,
	289, 290, 291, 275, 0, 0, 0, 0, 166, 0,
	0, 0, 192, 0, 0, 0, 252, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 257, 271, 149, 248, 284, 154, 255, 145, 221,
	244, 142, 269, 254, 203, 186, 187, 141, 0, 239,
	164, 178, 161, 219, 0, 0, 296, 160, 287, 0,
	279, 144, 0, 278, 218, 266, 270, 204, 198, 143,
	268, 202, 197, 190, 168, 182, 231, 196, 232, 183,
	208, 207, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	191, 0, 0, 0, 297, 0, 242, 224, 0, 0,
	229, 240, 194, 267, 233, 272, 258, 280, 236, 234,
	136, 259, 163, 205, 146, 147, 159, 165, 167, 169,
	170, 214, 215, 227, 247, 260, 261, 262, 162, 155,
	241, 156, 180, 157, 137, 249, 158, 138, 228, 265,
	0, 176, 237, 201, 139, 200, 230, 264, 263, 288,
	294, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 173, 0, 276,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 216,
	292, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 185, 226, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 274, 286,
	277, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 177, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 179,
	0, 181, 152, 225, 175, 283, 188, 0, 217, 184,
	250, 189, 195, 238, 282, 223, 243, 150, 273, 251,
	199, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 438, 0, 0, 135, 0,
	193, 0, 235, 171, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	222, 0, 289, 290, 291, 275, 0, 0, 0, 93,
	166, 0, 0, 0, 192, 0, 0, 0, 252, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 257, 271, 149, 248, 284, 154, 255,
	145, 221, 244, 142, 269, 254, 203, 186, 187, 141,
	0, 239, 164, 178, 161, 219, 0, 0, 296, 160,
	287, 0, 279, 144, 0, 278, 218, 266, 270, 204,
	198, 143, 268, 202, 197, 190, 168, 182, 231, 196,
	232, 183, 208, 207, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 191, 0, 0, 0, 297, 0, 242, 224,
	0, 0, 229, 240, 194, 267, 233, 272, 258, 280,
	236, 234, 136, 259, 163, 205, 146, 147, 159, 165,
	167, 169, 170, 214, 215, 227, 247, 260, 261, 262,
	162, 155, 241, 156, 180, 157, 137, 249, 158, 138,
	228, 265, 0, 176, 237, 201, 139, 200, 230, 264,
	263, 288, 294, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 173,
	0, 276, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 216, 292, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 185, 226, 0, 246, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 253,
	274, 286, 277, 0, 0, 0, 285, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 177, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 179, 0, 181, 152, 225, 175, 283, 188, 0,
	217, 184, 250, 189, 195, 238, 282, 223, 243, 150,
	273, 251, 199, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 193, 0, 235, 171, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 222, 0, 289, 290, 291, 275, 0, 0,
	0, 0, 166, 0, 0, 0, 192, 0, 0, 0,
	252, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 257, 271, 149, 248, 284,
	154, 255, 145, 221, 244, 142, 269, 254, 203, 186,
	187, 141, 0, 239, 164, 178, 161, 219, 0, 0,
	296, 160, 287, 0, 279, 144, 0, 278, 218, 266,
	270, 204, 198, 143, 268, 202, 197, 190, 168, 182,
	231, 196, 232, 183, 208, 207, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 191, 0, 0, 0, 297, 0,
	242, 224, 0, 0, 229, 240, 194, 267, 233, 272,
	258, 280, 236, 234, 136, 259, 163, 205, 146, 147,
	159, 165, 167, 169, 170, 214, 215, 227, 247, 260,
	261, 262, 162, 155, 241, 156, 180, 157, 137, 249,
	158, 138, 228, 265, 0, 176, 237, 201, 139, 200,
	230, 264, 263, 288, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 173, 0, 276, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 216, 292, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 185, 226, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 274, 286, 277, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 177,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 179, 0, 181, 152, 225, 175, 283,
	188, 0, 217, 184, 250, 189, 195, 238, 282, 223,
	243, 150, 273, 251, 199, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 193, 0, 235, 171, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 0, 222, 289, 290, 291, 275,
	491, 0, 0, 0, 0, 166, 0, 0, 0, 192,
	0, 0, 0, 252, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 493, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 257, 271,
	149, 248, 284, 154, 255, 145, 221, 244, 142, 269,
	254, 203, 186, 187, 141, 0, 239, 164, 178, 161,
	219, 0, 0, 296, 160, 287, 0, 279, 144, 0,
	278, 218, 266, 270, 204, 198, 143, 268, 202, 197,
	190, 168, 182, 231, 196, 232, 183, 208, 207, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 191, 0, 0,
	0, 297, 0, 242, 224, 0, 0, 229, 240, 194,
	267, 233, 272, 258, 280, 236, 234, 136, 259, 163,
	205, 146, 147, 159, 165, 167, 169, 170, 214, 215,
	227, 247, 260, 261, 262, 162, 155, 241, 156, 180,
	157, 137, 249, 158, 138, 228, 265, 0, 176, 237,
	201, 139, 200, 230, 264, 263, 288, 294, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 173, 0, 276, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 216, 292, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 185, 226,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 274, 286, 277, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 177, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 179, 0, 181, 152,
	225, 175, 283, 188, 0, 217, 184, 250, 189, 195,
	238, 282, 223, 243, 150, 273, 251, 199, 174, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 192, 0, 0, 0,
	252, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 193, 0, 235,
	171, 314, 315, 316, 493, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 291, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 140, 257, 271, 149, 248, 284,
	154, 255, 145, 221, 244, 142, 269, 254, 203, 186,
	187, 141, 0, 239, 164, 178, 161, 219, 0, 0,
	296, 160, 287, 0, 279, 144, 0, 278, 218, 266,
	270, 204, 198, 143, 268, 202, 197, 190, 168, 182,
	231, 196, 232, 183, 208, 207, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 191, 0, 0, 0, 297, 0,
	242, 224, 0, 0, 229, 240, 194, 267, 233, 272,
	258, 280, 236, 234, 136, 259, 163, 205, 146, 147,
	159, 165, 167, 169, 170, 214, 215, 227, 247, 260,
	261, 262, 162, 155, 241, 156, 180, 157, 137, 249,
	158, 138, 228, 265, 0, 176, 237, 201, 139, 200,
	230, 264, 263, 288, 294, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 173, 0, 276, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 216, 292, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 185, 226, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 274, 286, 277, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 177,
	0, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 179, 0, 181, 152, 225, 175, 283,
	188, 0, 217, 184, 250, 189, 195, 238, 282, 223,
	243, 150, 273, 251, 199, 174, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 192, 0, 0, 0, 252, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 193, 0, 235, 171, 314, 315,
	316, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 290, 291, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 257, 271, 149, 248, 284, 154, 255, 145,
	221, 244, 142, 269, 254, 203, 186, 187, 141, 0,
	239, 164, 178, 161, 219, 0, 0, 296, 160, 287,
	0, 279, 144, 0, 278, 218, 266, 270, 204, 198,
	143, 268, 202, 197, 190, 168, 182, 231, 196, 232,
	183, 208, 207, 209, 0, 0, 0, 0, 0, 0,
	896, 897, 898, 895, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 191, 0, 0, 0, 297, 0, 242, 224, 0,
	0, 229, 240, 194, 267, 233, 272, 258, 280, 236,
	234, 136, 259, 163, 205, 146, 147, 159, 165, 167,
	169, 170, 214, 215, 227, 247, 260, 261, 262, 162,
	155, 241, 156, 180, 157, 137, 249, 158, 138, 228,
	265, 1296, 176, 237, 201, 139, 200, 230, 264, 263,
	288, 294, 295, 0, 90, 0, 26, 46, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 173, 0,
	276, 0, 220, 0, 73, 0, 0, 0, 83, 0,
	216, 292, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 185, 226, 0, 246, 47, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 253, 274,
	286, 277, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 177, 0, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	179, 1802, 181, 152, 225, 175, 283, 188, 0, 217,
	184, 250, 189, 195, 238, 282, 223, 243, 150, 273,
	251, 199, 174, 0, 1802, 1202, 0, 0, 79, 80,
	0, 81, 82, 1292, 0, 1289, 0, 0, 0, 1291,
	1288, 1290, 1294, 1295, 0, 0, 0, 1293, 1202, 2202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	1784, 193, 0, 235, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 1872, 0, 0, 0, 1802, 0, 0,
	0, 0, 0, 1784, 0, 0, 0, 0, 0, 64,
	78, 87, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 1202, 0, 289, 290, 291, 275, 0, 0, 77,
	72, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1784, 0, 0, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1299, 1300, 1301, 1302, 1303, 1304, 1297, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1788, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1792, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 0, 76, 1788, 56,
	0, 0, 0, 0, 0, 0, 1781, 0, 0, 1792,
	1783, 1785, 1787, 0, 1789, 1790, 1791, 1793, 1794, 1795,
	1797, 1798, 1799, 1800, 0, 0, 0, 0, 0, 1781,
	0, 0, 0, 1783, 1785, 1787, 57, 1789, 1790, 1791,
	1793, 1794, 1795, 1797, 1798, 1799, 1800, 0, 0, 0,
	1803, 1788, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1792, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1803, 0, 0, 0, 0, 0, 0,
	0, 0, 1781, 0, 1801, 0, 1783, 1785, 1787, 0,
	1789, 1790, 1791, 1793, 1794, 1795, 1797, 1798, 1799, 1800,
	0, 1780, 0, 0, 0, 0, 0, 1801, 0, 89,
	0, 0, 0, 0, 0, 0, 1796, 0, 0, 0,
	0, 0, 0, 1786, 1780, 0, 1803, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1796,
	0, 0, 0, 0, 0, 0, 1786, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1801, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1780, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1796, 0, 0, 0, 0, 0, 0, 1786,
}

var yyPact = [...]int{
	21498, -1000, -308, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 19662, 1763, -1000, 8405,
	21241, 46, 21241, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 231, 16638, 20094, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7955, 7505, 139, -1000, 1750,
	-1000, -1000, -1000, -1000, 117, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1423, -51, 321,
	325, 340, 340, 9702, 1750, 1389, 199, 13, -1000, 19230,
	624, 21498, 184, 20094, -1000, 362, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16638, 20094,
	-78, 444, -1000, 210, 232, 162, 354, -1000, -1000, -1000,
	-1000, 1762, -1000, -1000, -1000, -1000, -1000, 21241, 1448, 20094,
	1698, -1000, -1000, -1000, 1662, 20527, 199, -1000, 1316, 1346,
	-1000, -1000, 1539, -1000, 96, 5, -22, 78, -1000, -1000,
	166, -1000, -1000, -1000, -1000, -1000, 32, -1000, -7, -1000,
	-15, -1000, -1000, -1000, -137, -1000, -1000, -1000, -1000, -1000,
	1266, 353, 1574, -182, 1628, 1697, 1389, 1738, 1670, -10,
	204, 204, 225, 204, -1000, -1000, -1000, -1000, -1000, -1000,
	387, 387, 669, 165, -1000, -1000, -123, -154, 387, 387,
	-154, -3, -1000, 1615, 1608, -1000, -1000, -1000, -1000, -1000,
	-1000, 207, -1000, -186, -1000, 305, -1000, 296, -1000, 11016,
	151, 1329, 653, -1000, 400, 20094, 20094, 20094, 400, 400,
	12318, 11886, 349, -1000, 1697, 1389, -1000, 1750, 1750, 1225,
	1035, 207, 207, 207, 207, 207, 21241, 1327, 20094, -1000,
	1416, 5287, 5287, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 181, 1538, -1000, 20094, 1689, -1000, 347, 811, 979,
	-1000, -1000, 210, 1309, -1000, 596, -1000, -1000, -1000, -1000,
	20094, 173, -1000, 974, 1537, 20094, 16638, 16638, 16638, 16638,
	-1000, 1589, 1582, -1000, 1614, 1591, 1632, 20094, -1000, -1000,
	-1000, 20884, -1000, -1000, -1000, -1000, 1211, 1750, 110, 8036,
	15774, 17934, 20094, 15774, -1000, -1000, -1000, -1000, -1000, -148,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	110, 15774, 15774, -82, -1000, -1000, -293, 1628, 5729, -1000,
	-1000, 5729, -1000, -1000, 218, 204, -1000, 15774, 544, 17934,
	850, 20094, 1748, 6613, 1748, 20094, -1000, -1000, 387, 387,
	-1000, 669, 669, -1000, -1000, -150, 1748, 1748, -139, 20094,
	204, -1000, -1000, 18798, 1656, -157, 315, 306, 310, -1000,
	-1000, -191, -1000, -1000, 1291, 11454, 10578, 224, 15774, 3513,
	-1000, -1000, 400, 400, 400, 3513, 3513, 357, -1000, -1000,
	-1000, -1000, -1000, -1000, 20094, 1628, -1000, -1000, -1000, 1697,
	1628, 1697, -1000, -1000, 15774, 17934, 20094, 20094, 21241, -1000,
	20094, 1327, 1661, 20094, 1288, -1000, -1000, 9270, 346, 5729,
	717, 1536, -1000, -1000, 1535, 1533, 1532, 1528, 1527, 1526,
	1521, -1000, 1456, -1000, -1000, 1520, 1509, 1508, 1506, -1000,
	-1000, -1000, -1000, -1000, -1000, 1492, -1000, -1000, -1000, 1491,
	1456, -1000, -1000, 1490, 1480, 1479, 1478, 1475, -1000, -1000,
	-1000, -1000, -1000, -1000, 978, 976, 1149, -1000, -1000, -1000,
	-1000, 3071, 6613, 6613, 6613, 6613, -1000, -1000, 1425, 5729,
	1474, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7055, -1000, 1466, 1464,
	1462, 1460, 1457, 1456, 1455, 975, 1454, 1452, 1450, 6613,
	1447, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1288, -1000, -291, -1000, 10146, 20094, 20094, -1000, 1741,
	5729, 2215, -1000, 1694, -1000, 210, 76, -1000, -1000, -1000,
	-1000, -1000, -1000, 345, -1000, -1000, -1000, -1000, -1000, -1000,
	1326, -1000, 20094, 1258, -1000, 441, 1551, 1573, 1551, -1000,
	-1000, -1000, -1000, 1436, -1000, 1359, -1000, -1000, 1416, -1000,
	-1000, 456, -1000, -1000, -1000, -1000, -1000, -7, -15, 1241,
	-1000, -38, 95, -1000, 1279, -1000, -1000, -1000, 456, 1241,
	213, 971, 958, -1000, 820, 344, 1321, -1000, 912, 18366,
	20094, 208, 1655, 1291, 1445, 1617, -1000, -1000, -1000, 1748,
	1748, 1748, 387, 21241, 669, 20094, 669, -1000, -1000, 669,
	-1000, 342, 20094, 208, 1440, -1000, -1000, -1000, 313, 294,
	302, 17934, 212, -1000, -1000, 1291, -1000, -1000, -1000, 1439,
	440, -1000, -1000, 6613, -1000, 622, -1000, 3513, 3513, 3513,
	-1000, -1000, 14478, -1000, -1000, 1628, -1000, 1628, 1241, 1291,
	1571, 1320, -1000, -1000, -1000, -1000, -1000, 1438, 1270, -1000,
	1748, 5287, -1000, 16638, -1000, 5729, 5729, 5729, 5729, -1000,
	17502, -1000, 17070, -1000, 251, 6171, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5729, 1667, 1667, 1667, 5729, 631, 5729,
	5729, -1000, 649, 7607, 1667, 1667, 1667, 1667, 1667, -1000,
	2621, 1667, 1667, 1667, 1667, -1000, -1000, 6613, 6613, 6613,
	6613, 6613, 6613, 6613, 6613, 6613, 6613, 6613, 6613, 1424,
	591, 6613, 6613, 6613, 1035, 1586, 1319, -1000, -1000, -1000,
	-1000, -1000, 489, 622, 5729, 21343, 5729, 5729, 5729, -1000,
	1194, 1176, -1000, -1000, 5729, -1000, 5729, 6613, 5729, -1000,
	1667, 1748, 1232, -1000, 1428, -1000, 1268, 1597, -1000, 341,
	1318, -1000, 435, 1264, -1000, 1697, 622, -1000, 339, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -79,
	-1000, -1000, 20094, 974, 1254, 1741, 20094, 5729, -1000, -1000,
	5729, 1427, -1000, 5729, -1000, -1000, -1000, -1000, 1759, 337,
	335, 15774, -1000, 158, 15774, -1000, -1000, 20094, 211, 15774,
	-8, -160, 5729, 5729, 20094, 5729, -1000, -1000, -1000, 1416,
	505, 1426, -239, -1000, -52, -1000, 1563, 48, -1000, 1617,
	-1000, 576, -1000, -1000, -1000, -1000, 1748, -1000, 387, -1000,
	387, 669, 20094, -1000, -1000, -239, 1173, -1000, -1000, -1000,
	283, 1291, 15774, 899, 224, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 20094, 20094, 21498, -1000, 20094, 1746, -1000, 1281,
	1652, -1000, 638, 638, 437, -1000, -1000, 334, -1000, -1000,
	269, -1000, -1000, -1000, -1000, -1000, 1425, -1000, -1000, -1000,
	1167, 826, 622, 5729, -1000, -1000, 5729, 5729, 749, 5729,
	1163, 1247, 1243, -1000, 1157, 1752, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5729, 5729, 5729, 5729, 5729,
	807, 4845, -1000, -1000, -1000, 5729, 5729, 5729, 5729, 969,
	679, -1000, 599, 599, 371, 371, 371, 371, 371, 655,
	655, -1000, -1000, -1000, 3071, 1424, 6613, 6613, 6613, 186,
	2500, 1797, -1000, 5729, 608, -1000, 5729, 786, -1000, 1135,
	934, 1124, 1119, -1000, -1000, 990, 1103, 2001, 1101, 5729,
	1746, -291, 4397, 190, 20094, -291, 20094, 20094, 4397, -1000,
	20094, -1000, 2215, 810, -1000, -1000, -1000, 1697, -1000, 622,
	622, 20094, 622, 15774, 352, 436, -1000, 14046, 15774, -1000,
	-1000, 15774, 115, 1626, -1000, -1000, -113, -103, 622, 622,
	333, -1000, 1658, 1647, 8837, -1000, -67, -1000, -1000, -1000,
	233, -1000, 955, 949, 933, 928, 20094, -1000, -1000, -1000,
	-1000, -1000, 421, 421, 421, -1000, 1748, 1748, 387, -1000,
	-18, -41, -1000, 1241, 1086, -1000, -1000, -1000, -1000, 1084,
	-1000, 1743, 1737, 16638, 16206, -1000, -1000, -1000, -1000, -1000,
	5729, 1572, 1555, 1529, 189, 1230, -1000, -1000, -1000, -1000,
	5729, 1516, 1487, 1461, 1443, 1408, -1000, 5729, 5729, 906,
	1374, 1370, 1343, 1330, 1228, -1000, 186, 2500, 1446, -1000,
	6613, 6613, 1299, 420, -1000, 5729, 606, 189, 13182, -1000,
	5729, -1000, -1000, -1000, 13182, -1000, 6613, -1000, 1260, 1743,
	-1000, 1070, 1249, -1000, -291, -1000, -1000, 1232, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1214, 1241,
	-1000, -1000, -1000, -1000, 15774, 1654, 208, -1000, -4, 227,
	-295, -91, 1736, 1734, 20094, 199, 20094, 1061, 1239, -1000,
	-1000, -1000, 987, 580, -1000, 20094, 603, 329, 204, 329,
	600, 1421, -1000, -1000, -67, -1000, 805, 803, 802, 792,
	-44, -1000, -1000, -1000, -1000, -1000, 1420, 13182, -1000, 13614,
	919, -1000, -1000, 1748, -1000, -18, -1000, 278, 281, 26,
	1733, -1000, -1000, -1000, 5729, 5729, 1652, -1000, -1000, 622,
	-1000, -1000, -1000, 1047, -1000, 1375, 1415, -1000, 1375, 1406,
	1375, 293, 293, 1418, 1418, 1419, 1418, -1000, 1251, -1000,
	-1000, -1000, -1000, -1000, 1212, 1164, 5729, -1000, -1000, -1000,
	-1000, -1000, -1000, 6613, -1000, -1000, -1000, -1000, 622, 5729,
	1043, 1041, 776, 1029, 1917, -1000, -1000, -1000, 4397, 1232,
	-1000, -1000, 15774, 15774, -241, -9, 20094, -301, 917, -1000,
	1730, 904, 660, -1000, 1416, 21662, 8837, 973, -30, -1000,
	-1000, -1000, 1375, -1000, 1415, 1415, 1375, 1375, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1414, 1413, -1000,
	1375, 1406, 1406, 1375, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20094, 20094, -1000, 20094, 20094, 204, 5729, -1000, -1000,
	-1000, -1000, -1000, -1000, 15342, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 785, -1000, -1000, -1000, 899, 622,
	826, -1000, -1000, -1000, 782, -1000, 780, -1000, -1000, 777,
	-1000, -1000, -1000, -1000, -1000, -1000, 768, -1000, -1000, 759,
	-1000, -1000, -1000, -1000, 1131, -1000, 622, -1000, -1000, -1000,
	5729, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -139, -303,
	758, -1000, 884, -96, -1000, -1000, 1653, 182, 21609, -1000,
	421, 421, 601, 421, 421, 421, 421, 137, 135, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 1393, -1000, -1000, 973, -1000, -1000, 612,
	6613, -1000, -1000, 860, 13614, 428, 348, 1383, -1000, 111,
	595, 552, -1000, 20094, -1000, -33, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 859, 859, -1000, -1000, -1000, -1000, 1382,
	1376, 66, 1381, -1000, 1379, 1378, 20094, 1118, 1210, -1000,
	1375, 5729, 14, -1000, -1000, 1027, 1011, 1002, 1208, 1184,
	-1000, 1104, -115, -87, -1000, 1373, -1000, -1000, 1727, 199,
	-1000, 1718, 21662, -1000, 757, 754, 421, 421, 752, 855,
	854, 842, 421, 421, 751, 835, 20884, 736, 706, 689,
	770, 833, 419, 769, 767, 668, 20094, 1362, 818, -1000,
	-1000, 2500, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 684, 1361, -1000, -1000, 1360, -1000, -1000,
	1181, -1000, 1170, 15342, 74, 74, 15342, 15342, 15342, 1358,
	277, -1000, 15342, 1636, 927, -1000, -1000, -1000, -1000, -1000,
	678, -1000, 674, -1000, 209, -109, -87, -1000, 1708, -98,
	1707, 1705, 20094, 660, -1000, 99, -1000, -1000, -1000, 13182,
	13182, -1000, -1000, -1000, -1000, 830, 828, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 145,
	20094, 1166, -1000, 426, 992, 5729, -232, 15342, -1000, 823,
	-1000, 1160, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1151,
	1148, 1145, 15342, -1000, -1000, -1000, 106, 101, -1000, -1000,
	1636, 923, 911, 1349, 672, -91, 1704, -1000, 660, 1702,
	660, 660, 1138, -1000, -1000, 97, 168, 140, -1000, 230,
	-1000, -1000, -1000, -1000, -1000, -1000, 157, 1133, -1000, 818,
	812, -1000, 920, 1561, -1000, -1, 1122, -1000, -1000, -1000,
	-1000, -1000, 1116, -1000, -1000, 421, 791, 42, -1000, -1000,
	-1000, -1000, -1000, 1607, 12750, -128, -1000, 781, -1000, 660,
	-1000, -1000, -1000, 20094, 92, 664, 6613, 1348, 6613, 1341,
	102, 1340, -1000, -1000, -1000, -1000, -1000, 277, -1000, -1000,
	1553, 1548, 1758, -1000, -1000, -1000, -1000, 101, 101, 101,
	101, -11, 662, -1000, 850, -1000, 20094, -1000, 1111, -1000,
	-1000, -1000, 331, -1000, -1000, -1000, -1000, 1338, 1701, -1000,
	1003, 20094, 918, 20094, 1333, 416, 6613, -1000, -1000, 1766,
	-1000, 1751, 432, 432, -1000, -1000, -1000, 760, -1000, 407,
	-1000, 14910, 20094, -1000, 180, 100, -1000, 1100, -1000, 1076,
	20094, 659, 822, -1000, -1000, -1000, 707, 113, -1000, 20094,
	3955, -1000, 330, 1046, -1000, 825, 68, -1000, -1000, 1039,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 622, 20094, -1000,
	180, 1593, -1000, 654, -1000, -1000, -1000, 21586, 175, -1000,
	-1000, 21586, 70, -1000, 170, -1000, -1000, 1037, -1000, 687,
	1252, -1000, 70, 21662, 5729, -1000, 21662, 1005, -1000,
}

var yyPgo = [...]int{
	0, 97, 2123, 2122, 111, 108, 2121, 2118, 2117, 2115,
	2114, 2101, 2099, 2097, 2095, 2094, 2093, 2092, 2091, 2090,
	2089, 2087, 2086, 2085, 2079, 2078, 2077, 2076, 2074, 2073,
	2071, 2070, 2069, 2068, 2067, 106, 2066, 2065, 2064, 2063,
	2062, 2059, 140, 2058, 2057, 2056, 2050, 2048, 2047, 2045,
	2044, 2043, 2042, 2041, 2040, 2037, 125, 79, 103, 536,
	69, 167, 166, 124, 2036, 86, 162, 2035, 2034, 25,
	114, 2033, 121, 119, 87, 143, 93, 88, 55, 2032,
	2031, 2016, 131, 2015, 2014, 2012, 2011, 50, 2010, 75,
	39, 26, 2008, 81, 2007, 2006, 2005, 2004, 2003, 71,
	2002, 53, 60, 2001, 2000, 1999, 1997, 1996, 29, 1995,
	49, 1994, 1993, 1992, 1988, 1987, 1986, 1985, 15, 17,
	19, 1984, 1983, 16, 2, 1982, 139, 74, 77, 100,
	1981, 160, 1980, 1979, 1977, 150, 1976, 136, 1975, 1973,
	1971, 1970, 11, 1966, 35, 1963, 1958, 1957, 38, 1956,
	1955, 1954, 91, 45, 59, 89, 1952, 1951, 1950, 137,
	24, 194, 0, 138, 33, 1948, 1947, 1946, 176, 135,
	130, 1945, 85, 236, 132, 37, 1944, 58, 63, 1941,
	1940, 1938, 105, 54, 9, 1935, 82, 1934, 43, 83,
	1931, 104, 1930, 118, 1, 95, 1926, 142, 1925, 1923,
	1922, 113, 1921, 1919, 51, 117, 1918, 1917, 1916, 40,
	1915, 32, 21, 1914, 129, 146, 1913, 1912, 1910, 115,
	98, 72, 1896, 1894, 64, 1893, 110, 65, 122, 1891,
	581, 102, 52, 18, 1890, 145, 1889, 173, 147, 126,
	1888, 1887, 149, 1042, 144, 1886, 127, 10, 1885, 1884,
	12, 1883, 23, 1882, 1880, 1879, 1878, 6, 1876, 1874,
	1873, 3, 5, 1872, 4, 101, 41, 46, 1871, 44,
	62, 1869, 1868, 1866, 1848, 1842, 164, 1839, 1836, 1835,
	1834, 1833, 1832, 1831, 73, 1830, 1828, 1827, 1826, 61,
	1825, 1823, 1822, 1819, 1818, 31, 1817, 1816, 20, 1814,
	28, 1813, 1812, 1811, 13, 120, 1810, 1809, 14, 1808,
	1807, 7, 8, 1806, 1805, 42, 34, 36, 67, 68,
	1803, 22, 1802, 92, 1801, 1800, 123, 1799, 96, 1798,
	1797, 141, 163, 1796, 134, 1795, 1794, 1793, 1791, 1790,
	1789, 1788, 1787, 1786, 1785, 128, 1784,
}

//line mysql_sql.y:6596
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 342, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 50, 314, 314, 313, 313, 312,
	312, 311, 311, 311, 310, 310, 310, 309, 309, 308,
	308, 307, 307, 305, 305, 306, 304, 303, 303, 301,
	301, 299, 299, 300, 300, 294, 294, 297, 297, 295,
	295, 295, 295, 298, 293, 293, 293, 292, 292, 49,
	49, 49, 232, 232, 48, 48, 246, 246, 246, 246,
	246, 244, 244, 244, 244, 243, 243, 242, 242, 247,
	247, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 43, 43, 43, 43, 46, 47,
	240, 240, 240, 240, 240, 241, 241, 241, 44, 45,
	45, 231, 231, 236, 236, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 239, 239, 239,
	238, 238, 237, 237, 37, 37, 37, 40, 39, 230,
	230, 230, 230, 230, 230, 230, 230, 38, 38, 38,
	38, 38, 38, 36, 36, 35, 229, 229, 228, 53,
	53, 53, 53, 52, 52, 55, 55, 54, 42, 42,
	42, 42, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 337, 337, 337, 339, 339, 166, 167, 343, 165,
	165, 165, 333, 333, 334, 335, 336, 336, 336, 51,
	7, 34, 34, 276, 276, 179, 179, 180, 180, 178,
	178, 178, 178, 178, 178, 279, 280, 175, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 26,
	26, 33, 344, 344, 344, 31, 32, 275, 275, 275,
	30, 29, 28, 27, 27, 25, 25, 24, 24, 172,
	172, 174, 174, 170, 345, 345, 252, 252, 173, 173,
	23, 23, 171, 171, 149, 169, 169, 169, 6, 8,
	8, 8, 8, 8, 8, 14, 13, 11, 10, 9,
	12, 5, 4, 283, 283, 283, 283, 283, 283, 322,
	322, 322, 323, 81, 81, 76, 76, 284, 284, 195,
	324, 324, 291, 291, 290, 290, 289, 289, 79, 79,
	80, 80, 68, 68, 56, 56, 296, 296, 296, 296,
	302, 302, 273, 273, 115, 115, 145, 145, 146, 146,
	57, 57, 58, 58, 58, 58, 58, 58, 330, 330,
	332, 332, 331, 78, 78, 74, 74, 75, 75, 75,
	73, 73, 72, 71, 71, 70, 69, 69, 69, 60,
	60, 59, 59, 59, 59, 59, 131, 131, 131, 61,
	61, 338, 338, 338, 277, 277, 277, 282, 282, 128,
	128, 129, 129, 127, 127, 62, 62, 63, 63, 63,
	63, 126, 126, 125, 64, 64, 65, 65, 67, 67,
	67, 67, 136, 136, 135, 135, 135, 135, 84, 84,
	134, 133, 133, 133, 83, 83, 82, 82, 77, 77,
	66, 66, 132, 346, 346, 130, 158, 158, 158, 164,
	164, 157, 157, 157, 157, 157, 168, 168, 163, 163,
	159, 159, 160, 160, 160, 3, 3, 3, 17, 17,
	17, 17, 21, 21, 340, 340, 15, 226, 226, 225,
	225, 227, 227, 227, 227, 221, 221, 222, 222, 222,
	222, 223, 223, 223, 224, 224, 224, 224, 220, 220,
	219, 217, 217, 217, 218, 218, 218, 218, 218, 218,
	161, 161, 16, 214, 214, 215, 215, 215, 216, 216,
	208, 208, 208, 208, 20, 212, 212, 213, 213, 213,
	213, 213, 209, 209, 211, 211, 207, 207, 207, 207,
	207, 19, 206, 206, 204, 204, 202, 202, 203, 203,
	201, 201, 201, 205, 205, 18, 278, 278, 248, 248,
	251, 251, 258, 258, 259, 259, 257, 257, 264, 264,
	263, 263, 262, 262, 261, 261, 260, 260, 255, 255,
	254, 254, 249, 249, 249, 249, 249, 250, 250, 253,
	253, 256, 256, 106, 106, 107, 107, 107, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 320, 320, 321,
	109, 109, 109, 113, 113, 113, 113, 113, 113, 108,
	108, 110, 110, 91, 91, 90, 90, 85, 85, 86,
	86, 87, 87, 88, 88, 89, 89, 89, 89, 89,
	89, 234, 234, 318, 318, 319, 319, 315, 315, 315,
	317, 317, 317, 317, 317, 316, 316, 92, 143, 143,
	143, 162, 162, 162, 142, 142, 142, 105, 105, 104,
	104, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 233, 233, 176, 176, 177, 177,
	123, 121, 121, 122, 122, 122, 122, 119, 120, 118,
	118, 118, 118, 118, 117, 117, 116, 116, 116, 210,
	210, 114, 114, 112, 112, 112, 111, 111, 111, 265,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 187, 187, 192, 192, 329, 329, 328,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 101,
	101, 101, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 288, 288, 288,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 341, 341, 341, 325, 325, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 140, 140, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 196, 196, 197, 197, 285, 285, 285, 285, 285,
	285, 286, 286, 287, 287, 287, 287, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 185, 137, 137, 137, 198,
	193, 193, 194, 194, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 190, 190, 190, 190, 190, 182,
	182, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	189, 189, 191, 191, 200, 200, 200, 199, 199, 199,
	199, 199, 199, 199, 103, 103, 103, 103, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 94, 94, 94,
	94, 98, 98, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 99, 99, 99,
	99, 97, 97, 97, 97, 97, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 96, 144, 144, 266, 266, 269, 269, 267, 267,
	268, 270, 270, 270, 271, 271, 271, 272, 272, 272,
	274, 274, 148, 148, 148, 154, 154, 147, 147, 155,
	155, 156, 156, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 14, 0, 2, 1, 3, 3,
	3, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 9,
	4, 7, 0, 3, 7, 4, 1, 3, 3, 3,
	1, 0, 1, 1, 1, 1, 3, 1, 4, 1,
	3, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 6,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 0,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 7, 1, 3, 3, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 1, 1, 6,
	1, 7, 9, 0, 2, 0, 1, 1, 2, 2,
	2, 1, 4, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 5, 1, 1, 1, 5, 5, 0, 1, 1,
	2, 2, 3, 6, 7, 4, 4, 7, 8, 0,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 1,
	4, 5, 1, 3, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 6, 4, 4,
	3, 6, 4, 2, 1, 5, 4, 4, 2, 0,
	1, 3, 3, 1, 3, 1, 3, 1, 3, 4,
	0, 1, 0, 1, 1, 3, 1, 1, 0, 4,
	1, 3, 2, 1, 0, 8, 0, 4, 7, 4,
	0, 2, 0, 2, 0, 2, 0, 4, 1, 3,
	1, 1, 4, 3, 4, 5, 4, 5, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 2, 0, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 2, 7,
	7, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 4, 4,
	4, 3, 2, 2, 2, 3, 2, 3, 0, 2,
	1, 1, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 4, 3, 0, 1, 2, 0, 1, 2, 1,
	1, 0, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 8, 11, 0, 1, 6, 0, 2, 1,
	2, 2, 2, 2, 2, 0, 1, 2, 2, 2,
	2, 1, 3, 2, 2, 2, 2, 2, 1, 3,
	2, 1, 3, 2, 0, 3, 3, 5, 5, 4,
	1, 1, 4, 1, 3, 1, 3, 2, 1, 1,
	0, 1, 1, 1, 11, 0, 2, 3, 2, 3,
	1, 1, 1, 3, 3, 4, 0, 2, 2, 2,
	2, 5, 1, 1, 0, 3, 0, 1, 1, 2,
	4, 4, 4, 0, 1, 10, 0, 1, 0, 6,
	0, 4, 0, 3, 1, 3, 4, 5, 0, 3,
	1, 3, 2, 3, 1, 2, 0, 6, 0, 2,
	0, 2, 4, 5, 4, 5, 1, 6, 5, 0,
	3, 0, 1, 0, 1, 1, 3, 2, 3, 3,
	4, 4, 3, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 5, 4, 1, 3, 3,
	0, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 0, 1, 1,
	3, 1, 1, 2, 1, 7, 7, 7, 7, 8,
	5, 0, 1, 0, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 0, 1, 3, 1, 3,
	5, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 2,
	2, 1, 5, 6, 1, 2, 0, 1, 1, 2,
	5, 0, 1, 1, 1, 2, 2, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 2, 2, 0,
	3, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 3, 5, 2, 2,
	2, 2, 1, 1, 2, 5, 6, 6, 6, 1,
	1, 1, 1, 0, 2, 0, 1, 1, 2, 4,
	1, 2, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 1, 5, 4, 4, 5, 5, 5, 5, 4,
	5, 5, 5, 5, 5, 5, 5, 1, 1, 1,
	4, 4, 6, 8, 6, 4, 5, 5, 4, 6,
	6, 7, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	3, 2, 4, 6, 2, 2, 4, 6, 4, 2,
	2, 0, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	0, 1, 1, 3, 3, 3, 3, 3, 2, 3,
	4, 3, 4, 1, 3, 4, 3, 4, 1, 1,
	1, 3, 4, 4, 5, 3, 4, 5, 6, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 1, 1, 3, 0, 1, 0, 3, 0, 3,
	3, 0, 3, 5, 0, 3, 5, 0, 1, 1,
	0, 1, 1, 2, 2, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -342, -2, -1, -3, -4, -5, -6, -41, -52,
	-54, -55, -22, -7, -51, -35, -36, -37, -43, -48,
	-49, -50, -57, -17, -16, -15, 8, 10, -8, -165,
	-166, -167, -343, -23, -24, -25, -27, -28, -29, -30,
	-31, -32, -33, -26, -34, 185, 9, 48, -38, -39,
	-40, -44, -45, -46, -47, 295, 301, 338, -58, -60,
	-18, -19, -20, -21, 181, -9, -12, -10, -11, -13,
	-14, 203, 202, 26, 262, 263, 299, 201, 182, 120,
	121, 123, 124, 30, -59, -330, 53, 183, -61, 411,
	6, 456, -68, 27, -90, -162, 57, -150, -153, 414,
	415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
	425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 449, 408, 220, 244, 247, 254,
	120, 137, 131, 159, 151, 128, 224, 225, 64, 123,
	367, 74, 352, 337, 126, 239, 241, 243, 246, 226,
	147, 142, 238, 222, 140, 227, 28, 228, 164, 229,
	230, 413, 348, 277, 371, 354, 251, 335, 141, 349,
	242, 351, 165, 169, 359, 301, 135, 136, 356, 361,
	163, 200, 32, 410, 212, 362, 167, 162, 158, 370,
	255, 253, 161, 134, 157, 223, 37, 171, 170, 172,
	331, 332, 333, 334, 231, 232, 289, 358, 154, 143,
	281, 129, 18, 365, 207, 353, 302, 233, 248, 210,
	256, 166, 168, 214, 219, 412, 218, 252, 363, 139,
	211, 240, 206, 366, 130, 295, 304, 234, 124, 245,
	360, 369, 36, 317, 133, 127, 197, 121, 216, 221,
	235, 236, 237, 258, 257, 249, 155, 213, 160, 132,
	156, 122, 215, 368, 318, 455, 279, 320, 153, 150,
	217, 190, 364, 355, 125, 324, 319, 148, 259, 452,
	453, 454, 290, 276, 260, 261, 146, 204, 11, -169,
	19, 335, -42, 336, 185, 53, -162, -5, -4, -35,
	-57, -168, -160, -153, 57, 58, 59, 262, -168, 188,
	-65, -66, -67, -130, -132, -90, 53, -162, -243, -214,
	-242, -215, -245, -216, -161, 20, 182, 181, 215, 10,
	183, 299, 189, 8, 6, 300, 201, 9, 301, 303,
	304, 307, 308, 309, 31, 312, 313, 57, 60, -162,
	-243, -214, 219, 226, -72, -73, -131, 15, 5, -278,
	320, 218, -208, -206, 310, 198, 197, 75, 373, 187,
	406, -148, -344, -275, 355, 354, -173, 353, 346, 357,
	348, 181, 74, 152, 149, 189, 356, 32, 359, 360,
	349, 320, 125, 122, -230, 80, 130, 129, -230, 218,
	29, -236, 330, -235, -237, 359, 360, 370, 58, 59,
	358, -148, -162, 74, -73, -131, -72, -59, -60, -58,
	-60, 320, 218, 189, 188, 373, 262, -332, 405, -331,
	-162, -277, -338, 20, -282, 178, 179, 180, 21, 22,
	-1, -79, 210, -90, 119, -65, -142, -162, 337, 89,
	-42, -42, 336, -333, -334, -335, -337, 185, 336, 335,
	119, 11, -168, 51, -90, 30, -133, -134, -135, -136,
	40, 44, 46, 41, 42, 43, 47, -346, 23, -158,
	-164, 23, -159, 60, -160, -153, -58, -60, 50, 54,
	11, 54, 53, 457, 58, 297, 311, 320, 298, 310,
	190, 218, 311, 218, 346, 190, 302, 305, 306, 347,
	50, 191, 50, -292, 370, -56, 27, -75, 17, -61,
	-60, 16, 20, 21, -340, 188, 405, -204, 193, -204,
	189, -204, -172, 97, -172, -345, 11, 99, 217, 216,
	350, 347, -252, 351, 352, -173, -172, -172, -173, 188,
	373, 30, 30, -276, 193, 363, 411, 128, 129, 130,
	-240, 20, 29, 329, -214, 218, 54, 89, 19, -238,
	89, 100, -237, -237, -237, -238, -238, -108, 29, -161,
	116, 60, -108, 29, 119, -74, -75, -61, -60, -73,
	-72, -73, 55, 55, -276, -276, -276, -276, -276, -168,
	54, -332, -78, 53, -62, -63, 107, -188, -162, 81,
	-190, 57, -183, 414, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 425, 426, 427, 428, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 449, 74, 335,
	289, 320, 148, 290, 146, 204, -184, -186, -311, -305,
	-181, 53, 105, 106, 113, 82, -185, -265, 24, 84,
	381, -138, -139, -140, -141, -306, -304, 60, 65, 68,
	71, 72, 70, 69, 144, 67, 118, -60, -325, -151,
	-281, -287, 187, -285, 149, 145, 8, 111, 330, 116,
	-288, 59, 58, 283, 284, 285, 373, 280, 286, 193,
	42, 287, 288, 291, 380, 292, 43, 293, 282, 208,
	294, 384, 383, 385, 377, 374, 372, 375, 376, 378,
	379, -62, -283, 33, -57, 53, 30, 53, -162, -127,
	12, 119, 65, 60, -42, 55, 54, -336, 71, 72,
	-339, 163, 155, -162, -53, 60, -5, -4, -35, -57,
	-307, -305, 53, -229, -228, -142, -66, -66, -66, -66,
	40, 40, 40, 45, 40, 45, 40, -135, -162, -164,
	55, -244, 188, 296, 214, -242, 215, 301, 304, -220,
	-219, -217, -161, -215, -247, -142, -161, 347, -244, -220,
	-219, 339, 451, -56, -188, -162, -71, -70, -188, 190,
	-204, -220, 81, -214, -160, -162, -127, -186, -127, -90,
	-172, -172, -174, -345, -170, -345, 347, -127, -127, -252,
	-171, -162, -204, -220, 320, 24, 364, 365, 126, 129,
	128, 371, -241, 329, 20, -214, -235, -231, 60, 330,
	-219, -239, 50, 116, -289, -188, 29, -238, -238, -238,
	-239, -239, 115, -162, -56, -74, -56, -75, -220, -214,
	-162, -91, -90, -163, -160, -153, -331, 23, -77, -162,
	-126, 54, -125, 11, -157, 80, 77, 78, 79, -162,
	23, 60, 119, -188, 96, -199, 89, 90, 91, 92,
	93, 94, 95, 53, 53, 53, 53, 53, 53, 53,
	53, -197, 53, 53, 53, 53, 53, 53, 53, -197,
	53, 53, 53, 53, 53, 60, 60, 102, 101, 112,
	105, 106, 107, 108, 109, 110, 111, 103, 104, 99,
	81, 97, 98, 83, -60, -188, -194, -186, -186, -186,
	-186, -265, -192, -188, 53, -188, 53, 53, 53, -286,
	53, 53, -196, -197, 53, 60, 53, 53, 53, -186,
	53, -126, -284, -195, -324, 450, -81, 55, -76, -162,
	-322, -323, -76, -80, -162, -73, -188, -155, -156, -147,
	-152, -159, -160, -153, 278, 186, 20, 80, 23, 25,
	283, 315, 83, 116, 16, 84, 149, 115, 285, 381,
	284, 181, 46, 383, 385, 384, 374, 372, 322, 326,
	328, 325, 373, 346, 29, 10, 26, 202, 21, 22,
	109, 183, 87, 88, 205, 24, 203, 72, 19, 49,
	11, 13, 14, 286, 321, 193, 192, 99, 339, 189,
	44, 8, 118, 27, 96, 323, 40, 76, 42, 97,
	17, 375, 376, 31, 338, 407, 209, 111, 287, 288,
	47, 81, 329, 70, 50, 77, 15, 45, 98, 184,
	380, 43, 327, 291, 293, 405, 292, 187, 357, 6,
	282, 382, 30, 201, 41, 188, 347, 86, 191, 71,
	208, 145, 5, 75, 9, 48, 51, 377, 378, 379,
	33, 85, 12, 294, 411, 330, 340, 341, 342, 343,
	344, 345, 173, 174, 175, 176, 177, 250, 196, 194,
	198, 199, 450, 451, 178, 179, 273, 275, 152, 19,
	-42, -334, 119, 54, -77, -127, 54, 89, -83, -82,
	50, 51, -84, 50, -82, 40, 40, -78, -246, 107,
	57, 54, -218, 321, 457, 58, 55, 54, -246, 191,
	60, 60, 54, 18, 119, 54, -69, 25, 26, -90,
	193, -90, -221, -222, 327, 24, -207, 51, -202, -203,
	-201, -205, 29, -127, -127, -127, -172, -163, -174, -169,
	-174, -170, 119, -149, -162, -221, 53, 127, 130, 130,
	129, -214, 191, 53, 89, -239, -239, -239, 29, -161,
	-56, -56, 50, 54, 53, 55, 54, -127, -63, -64,
	-65, -188, -188, -188, -188, -162, 60, -162, 107, -182,
	81, 276, 70, 71, 72, -183, -200, 20, 260, 261,
	-193, -194, -188, -137, 21, 20, -137, -137, -188, -137,
	107, -194, -194, 55, 65, -326, -327, 386, 387, 388,
	389, 390, 391, 392, 393, 394, 395, 396, 287, 282,
	288, 286, 280, 294, 289, 290, 148, 403, 404, 397,
	398, 399, 400, 401, 402, -137, -137, -137, -137, -137,
	-188, -341, 274, 273, 275, -137, -137, -137, -137, -184,
	-184, -184, -184, -184, -184, -184, -184, -184, -184, -184,
	-184, -191, -198, -265, 53, 99, 97, 98, 83, -186,
	-184, -184, 55, 54, -329, -328, 85, -188, -326, -193,
	-188, -193, -193, 55, 55, -194, -193, -184, -193, -137,
	-127, 54, 53, 55, 54, 33, 119, 54, 89, 55,
	54, -74, 119, 337, -162, -305, 55, -73, -228, -188,
	-188, 53, -188, 11, 119, 119, -219, 16, 411, -161,
	-142, 191, -220, -293, 192, 380, -296, 351, -188, -188,
	-162, -70, -78, 81, 53, -226, 411, 329, 328, 324,
	-223, -224, 323, 325, 322, 326, 50, 268, 269, 270,
	271, -201, -148, 115, 229, -127, -172, -172, -174, -162,
	-226, 55, 130, -220, -175, 60, -231, -90, -90, -1,
	-162, -129, 13, 54, 119, -182, 276, 70, -265, 55,
	54, -188, -188, -188, 23, -194, 55, 55, 55, 55,
	11, -188, -188, -188, -188, -188, 55, 11, 11, -188,
	-188, -188, -188, -188, -194, -191, -186, -184, -184, -189,
	205, 80, -188, -187, -328, 87, -188, 54, 51, 55,
	11, 55, 55, 55, 51, 55, 54, 55, -188, -129,
	-195, -291, -290, -289, 33, -57, -76, -284, -162, -323,
	-289, -162, -155, -152, -160, -153, 65, -74, -77, -220,
	107, 107, 57, -161, 330, -161, -220, -232, 411, 27,
	-302, 345, 340, 342, 119, 23, 24, -85, -86, -87,
	-92, -88, -142, -177, -89, 196, 194, 198, -319, 75,
	199, 250, 76, 189, -225, -227, 331, 332, 333, 334,
	80, -224, 60, 60, 60, 60, -90, -154, 89, -154,
	-154, -127, -127, -172, -179, -180, -178, 278, -279, 330,
	321, 55, 55, -128, 14, 16, -65, -162, 107, -188,
	55, 55, 55, -93, -99, 116, 149, 204, 148, 147,
	145, 317, 318, 140, 141, 142, 139, 55, -188, 55,
	55, 55, 55, 55, -188, -188, 11, 55, 55, 55,
	55, 55, -189, 80, -186, -183, 55, 88, -188, 86,
	-93, -108, -188, -108, -184, 55, -128, 55, 54, -284,
	55, -161, 16, 23, -221, 301, 188, -273, 452, -300,
	340, 16, 16, -57, -90, 55, 54, -94, -98, -95,
	-97, -96, -100, -99, 149, 150, 116, 153, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 30, 204,
	145, 146, 147, 148, 165, 131, 151, 409, 173, 132,
	174, 133, 175, 134, 176, 135, 136, 177, 137, -89,
	-162, 76, -318, -319, -204, -318, 76, 53, -227, 65,
	65, 65, 65, -224, 53, -108, -110, -161, 116, 60,
	-127, -178, 279, 31, 118, 281, 29, 277, 16, -188,
	-194, 55, -266, -268, 53, -267, 53, -266, -269, 53,
	-266, -101, 136, 135, -101, -270, 53, -270, -271, 53,
	-270, 55, 55, 55, -188, -183, -188, 55, 55, 55,
	19, 55, 55, -289, -161, -161, -232, 302, -90, -115,
	453, 60, 16, 60, -298, 60, -78, -106, -107, -124,
	315, 220, -205, 224, 64, 225, 337, 226, 189, 228,
	229, 230, 200, 231, 232, 233, 330, 234, 235, 236,
	237, 298, 5, 264, -87, -105, -104, -102, 70, 81,
	29, 315, -103, 64, 115, 243, 221, 244, -123, -176,
	194, 75, 76, 303, -177, -272, 318, 317, -266, -267,
	-267, -266, -266, 53, 53, -266, -269, -269, -266, -315,
	-316, -162, -316, -162, -315, -315, -204, -188, -209, -211,
	-142, 53, 65, -280, -175, 65, 65, 65, 65, 65,
	55, -188, -294, -252, -145, 454, 65, 60, 342, 23,
	-248, 210, 54, -124, -154, -154, -148, 115, -154, -154,
	-154, -154, 227, 227, -154, -154, -154, -154, -154, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, 53, -102,
	70, -184, 60, -110, -111, 29, 242, 238, -112, 29,
	222, 223, -114, 53, 250, 76, 76, -90, -274, 319,
	-144, 60, -144, 53, 51, 259, 53, 53, 53, -316,
	55, 55, 54, -266, -188, 280, 55, 55, 55, 55,
	54, 55, 54, 55, -301, 345, -297, -295, 340, 341,
	342, 343, 53, 16, -57, 16, -124, 65, 65, -154,
	-154, 65, 60, 60, 60, -154, -154, 65, 60, -164,
	65, 65, 65, 65, 29, 60, -113, 29, 238, 242,
	239, 240, 241, 65, 29, 65, 29, 65, 29, -162,
	53, -320, -321, 60, 65, 53, -210, 53, 55, 54,
	55, -209, -317, 268, 269, 270, 272, 271, -317, -209,
	-209, -209, 53, -234, -233, 251, 81, -212, -211, -69,
	55, 65, 65, -303, 192, -299, 344, -295, 16, 342,
	16, 16, -146, -162, -298, -249, 252, 253, -250, -256,
	255, -108, -108, 60, 60, -109, 221, -91, 55, 54,
	89, 55, -188, -117, -116, 407, -209, 60, 55, 55,
	55, 55, -209, 251, -213, 200, 64, 411, 266, 267,
	-69, 55, 55, -310, 53, 65, -300, 16, -298, 16,
	-298, -298, 55, 54, -254, 256, 53, -252, 53, -252,
	76, 269, 222, 223, 55, -321, 60, 55, -121, -122,
	-119, -120, 50, 349, 248, 249, 55, -212, -212, -212,
	-212, 55, -154, 60, 265, -314, 30, 55, -309, -308,
	-143, -304, -162, 345, 60, -298, -162, -251, 257, 65,
	-184, 53, -184, 53, -253, 254, 53, -233, -120, 50,
	-119, 50, 10, 9, -123, 65, -160, -313, -312, -311,
	55, 54, 119, -258, 53, 16, 55, -247, 55, -247,
	53, 89, -184, -118, 245, 246, 30, 129, -118, 54,
	89, -308, -162, -259, -257, 210, -250, 55, 55, -247,
	65, 55, 70, 29, 247, -312, 29, -188, 119, 55,
	54, 57, -255, 258, 55, -162, -257, -260, 33, 65,
	-264, -261, 53, -124, 212, -264, -124, -263, -262, 257,
	213, 55, 54, 57, 53, -262, -261, -194, 55,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 475, 476, 477, 0, 0, 298, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 230, 0, 0, 184, 164, 165,
	166, 124, 125, 126, 127, 0, 0, 0, 360, -2,
	478, 479, 480, 481, -2, 299, 300, 301, 302, 303,
	304, 219, 220, 221, 216, 217, 218, -2, 0, 177,
	0, 169, 169, 0, 380, 0, 0, 0, 391, 0,
	404, 23, 338, 0, 343, 655, 691, 692, 693, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	1412, 1413, 1414, 1415, 1416, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 0, 202,
	0, 1250, 206, 0, 0, 0, 295, 198, 199, 200,
	201, 0, 466, 467, 472, 473, 474, 0, 195, 0,
	0, 426, 427, 450, 453, 456, 0, 183, 0, 0,
	85, 523, 87, 525, 0, 91, 93, 94, -2, 98,
	99, 100, 101, 102, 103, 104, 0, 106, 1258, 108,
	1319, 111, 112, 113, 0, 122, 123, -2, -2, 520,
	0, 0, 1307, 67, -2, 0, 0, 0, 396, 484,
	554, 554, 0, 554, 567, 531, 532, 533, 552, 553,
	279, 279, 0, 0, 270, 271, 0, 288, 279, 279,
	288, 0, 1052, 0, 0, 262, 263, 264, 268, 269,
	289, 233, 178, 179, 168, 0, 173, 0, 167, 1309,
	0, 138, 0, 143, 0, 1257, 1323, 1272, 0, 0,
	1290, 0, 162, -2, 375, 0, 381, 380, 380, 0,
	380, 233, 233, 233, 233, 233, 0, 368, 0, 370,
	373, 0, 0, 405, 406, 401, 402, 403, 407, 408,
	3, 0, 0, 342, 0, 413, 203, 694, 0, 0,
	207, 208, 0, 0, 222, 0, 225, 211, 212, 213,
	0, 0, 197, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 0, 440, 0, 0, 0, 0, 454, 455,
	457, 0, 459, 460, 470, 471, 0, 380, 81, 0,
	0, 0, 0, 0, 527, 92, 121, 95, 96, 0,
	116, 118, 120, 119, 105, 117, 107, 109, 110, 115,
	81, 0, 0, 0, 68, 363, 0, 344, 0, 393,
	395, 0, 397, 398, 0, 554, 485, 0, 0, 0,
	0, 0, 413, 0, 413, 0, 284, 285, 279, 279,
	272, 281, 0, 286, 287, 0, 413, 413, 0, 0,
	554, 1053, 1054, 0, 0, 0, 0, 171, 0, 176,
	128, 133, 131, 132, 134, 0, 0, 0, 0, 0,
	160, 161, 0, 0, 0, 0, 0, 151, 154, 649,
	650, 521, 155, 156, 0, 344, 376, 392, 394, 375,
	-2, 0, 389, 390, 0, 0, 0, 0, 0, 310,
	0, 369, 0, 0, 421, 415, 417, 461, 31, 0,
	943, 691, 948, -2, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, -2, 1390, -2, -2, 1393, 1394, 1395, 1397, -2,
	-2, -2, -2, -2, -2, 1404, -2, -2, -2, 1408,
	1409, -2, -2, 1412, 1413, 1414, 1415, 1416, -2, -2,
	-2, -2, -2, -2, -2, -2, 959, 762, 763, 764,
	765, 0, 0, 0, 0, 0, 772, 773, 0, 785,
	0, 779, 780, 781, 782, 43, 44, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 906, 749, 0, 0,
	0, 891, 0, 881, 0, 919, 0, 0, 0, 0,
	0, 45, 46, 897, 899, 900, 902, 903, 904, 905,
	908, 909, 910, 913, 914, 915, 916, 917, 918, 921,
	923, 893, 894, 895, 896, 885, 886, 887, 888, 889,
	890, 421, 312, 330, 314, 0, 319, 0, 656, 380,
	0, 0, 204, 0, 209, 0, 0, 224, 226, 227,
	228, 214, 215, 296, 193, 194, 189, 190, 191, 192,
	196, 41, 0, 413, 186, 0, 444, 438, 0, 431,
	442, 443, 434, 0, 436, 0, 432, 433, 373, 458,
	452, 0, 82, 83, 84, 86, 97, 0, 0, 75,
	508, 514, 511, 524, 0, 89, 526, 114, 0, 70,
	0, 0, 0, 364, 377, 31, 382, 383, 386, 0,
	0, 495, 0, 522, 546, -2, 259, 280, 260, 413,
	413, 413, 279, 0, 281, 0, 281, 275, 276, 0,
	290, 292, 0, 495, 1350, 234, 180, 181, 0, 0,
	175, 0, 0, 135, 136, 137, 144, 139, 141, 0,
	0, 145, 157, 158, 159, 336, 337, 0, 0, 0,
	149, 150, 0, 163, 362, 344, 366, 344, 305, 306,
	0, 308, 653, 309, 468, 469, 371, 0, 0, 448,
	413, 0, 422, 0, 418, 0, 0, 0, 0, 462,
	0, 464, 0, 938, 0, 0, 967, 968, 969, 970,
	971, 972, 973, 930, 926, 926, 926, 0, 926, 0,
	0, 866, 0, 0, 926, 926, 926, 926, 926, 867,
	0, 926, 926, 926, 926, 880, 874, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 932, 0, 768, 769, 770,
	771, 774, 0, 786, 0, 0, 930, 930, 930, 869,
	0, 0, 871, 882, 0, 875, 930, 0, 930, 879,
	926, 413, 313, 327, 0, 331, 0, 0, 323, 325,
	318, 320, 0, 0, 340, 375, 414, 695, 0, 1059,
	-2, 1061, -2, -2, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 0,
	210, 223, 0, 0, 0, 380, 0, 0, 428, 445,
	0, 0, 429, 0, 430, 435, 437, 451, 0, 76,
	80, 0, 510, 0, 0, 513, 88, 0, 0, 0,
	64, 346, 0, 0, 0, 0, 385, 387, 388, 373,
	0, 0, 487, 496, 0, 555, 0, 0, 551, -2,
	558, 0, 564, 261, 265, 266, 413, 282, 279, 283,
	279, 281, 0, 291, 294, 487, 0, 182, 170, 172,
	0, 130, 0, 0, 0, 146, 147, 148, 152, 153,
	365, 367, 0, 0, 23, 374, 0, 411, 416, 423,
	424, 934, 935, 936, 937, 463, 465, 32, 419, 939,
	0, 941, 944, 949, 950, 946, 0, 964, -2, -2,
	0, 931, 932, 0, 927, 928, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 0, 0, 0, 0, 0,
	0, 0, 832, 833, 834, 0, 0, 0, 0, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 951, 962, 963, 0, 0, 0, 0, 0, 960,
	955, 0, 766, 0, 783, 787, 0, 0, 925, 0,
	932, 0, 0, 892, 870, 0, 0, 0, 0, 0,
	411, 330, 332, 0, 0, 330, 0, 0, 0, 339,
	0, 311, 0, 0, 297, 42, 229, 375, 187, 188,
	446, 0, 439, 0, 0, 0, 509, 0, 0, 512,
	90, 0, 72, 0, 65, 66, 350, 0, 378, 379,
	32, 384, 0, 0, 657, 486, 0, 497, 498, 499,
	500, 501, 0, 0, 0, 0, 0, 547, 548, 549,
	550, 559, 1055, 1055, 1055, 273, 413, 413, 279, 293,
	235, 0, 174, 129, 0, 247, 140, 307, 654, 0,
	449, 409, 0, 0, 0, 940, 942, 945, 947, 820,
	0, 0, 0, 0, 0, 0, 809, 803, 804, 884,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 952, 960, 956, 0, 953,
	0, 0, 933, 0, 788, 0, 0, 0, 0, 821,
	0, 825, 868, 872, 0, 876, 0, 878, 0, 409,
	328, 0, 333, 334, 330, 317, 324, 316, 326, 321,
	322, 341, 696, 1060, 1057, 1058, 205, 185, 0, 74,
	77, 78, 79, 515, 0, 516, 495, 71, 0, 0,
	352, 53, 0, 0, 0, 0, 0, 0, 658, 659,
	661, 662, 0, 0, 664, 718, 0, 673, 554, 673,
	0, 0, 675, 676, 488, 489, 0, 0, 0, 0,
	0, 503, 504, 505, 506, 507, 0, 0, 1056, 0,
	0, 277, 274, 413, 231, 236, 237, 0, 241, 0,
	0, 142, 372, 399, 0, 0, 425, 33, 420, 933,
	805, 806, 807, 0, 790, 1034, 1038, 793, 1034, 1036,
	1034, 799, 799, 1041, 1041, 1044, 1041, 808, 0, 827,
	810, 811, 814, 812, 0, 0, 0, 826, 815, 816,
	802, 929, 954, 0, 961, 957, 767, 775, 784, 0,
	0, 0, 0, 0, 0, 813, 400, 329, 0, 315,
	447, 519, 0, 0, 72, 0, 0, 354, 0, 351,
	0, 0, 0, 482, 373, -2, 0, -2, 1047, 988,
	989, 990, 1034, 992, 1038, 1038, 1034, 1034, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 0, 0, 1011,
	1034, 1036, 1036, 1034, 1031, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 663,
	719, 685, 685, 674, 685, 685, 554, 0, 490, 491,
	492, 493, 494, 502, 0, 560, 561, 651, 652, 562,
	278, 238, 239, 240, 0, 243, 244, 246, 0, 410,
	412, 776, 791, 1035, 0, 792, 0, 794, 795, 0,
	796, 797, 800, 801, 798, 1007, 0, 1008, 1009, 0,
	1010, 824, 829, 830, 0, 958, 789, 777, 778, 822,
	0, 873, 877, 335, 517, 518, 69, 73, 55, 356,
	0, 353, 0, 347, 349, 63, 0, 568, -2, 605,
	1055, 1055, 0, 1055, 1055, 1055, 1055, 0, 0, 1055,
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
	1055, 1055, 1055, 0, 660, 687, -2, 699, 701, 0,
	0, 704, 705, 0, 0, 0, 0, 741, 711, 0,
	0, 976, 977, 0, 717, 1050, 1048, 1049, 991, 1016,
	1017, 1018, 1019, 0, 0, 1012, 1013, 1014, 1015, 0,
	677, 686, 0, 686, 0, 0, 685, 0, 0, 542,
	1034, 0, 0, 245, 232, 0, 0, 0, 0, 0,
	831, 0, 49, 0, 345, 0, 355, 54, 0, 0,
	565, 0, 563, 607, 0, 0, 1055, 1055, 0, 0,
	0, 0, 1055, 1055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 700,
	702, 703, 706, 707, 708, 746, 747, 748, 709, 743,
	744, 745, 710, 0, 0, 974, 975, 739, 987, 1051,
	0, 1032, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 535, 0, 386, 0, 242, 1040, 1039, 1037, 1042,
	0, 1045, 0, 823, 47, 51, 56, 57, 0, 0,
	0, 0, 0, 0, 483, 601, 606, 608, 609, 0,
	0, 612, 613, 614, 615, 0, 0, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 643, 644, 645,
	646, 647, 648, 628, 629, 630, 631, 632, 633, 640,
	0, 0, 637, 0, 0, 0, 734, 0, 1029, 0,
	1030, 0, 678, 680, 681, 682, 683, 684, 679, 0,
	0, 0, 0, 670, 672, 714, 0, 534, 543, 544,
	386, 0, 0, 34, 0, 53, 0, 58, 0, 0,
	0, 0, 0, 358, 348, 590, 0, 0, 596, 0,
	602, 610, 611, 616, 617, 634, 0, 0, 636, 0,
	0, 742, 0, 721, 735, 0, 0, 1033, 535, 535,
	535, 535, 0, 715, 536, 1055, 0, 0, 540, 541,
	545, 1043, 1046, 25, 0, 0, 50, 0, 59, 0,
	61, 62, 357, 0, 570, 0, 0, 0, 0, 0,
	599, 0, 641, 642, 635, 638, 639, 712, 720, 722,
	723, 724, 0, 736, 737, 738, 740, 665, 666, 667,
	668, 0, 0, 538, 0, 24, 0, 35, 0, 37,
	39, 40, 688, 48, 52, 60, 359, 572, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 713, 725, 0,
	726, 0, 0, 0, 669, 537, 539, 26, 27, 0,
	36, 0, 0, 569, 0, 601, 592, 0, 594, 0,
	0, 0, 0, 727, 729, 730, 0, 0, 728, 0,
	0, 38, 689, 0, 574, 0, 588, 593, 595, 0,
	600, 598, 731, 733, 732, 28, 29, 30, 0, 573,
	0, 586, 571, 0, 597, 690, 575, -2, 0, 589,
	576, -2, 0, 584, 0, 577, 585, 0, 580, 0,
	0, 579, 0, -2, 0, 581, -2, 0, 587,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 110, 102, 3,
	53, 55, 107, 105, 54, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 456,
	90, 89, 91, 3, 457, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:508
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:514
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:540
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:544
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:550
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:565
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:569
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:575
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:579
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:585
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:592
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:601
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:605
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:609
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:614
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:618
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:622
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:628
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:637
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:648
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:652
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:658
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:662
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:668
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:672
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:678
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:702
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:721
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:725
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:730
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:734
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:742
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:746
		{
			yyVAL.str = yyDollar[3].str
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:751
		{
			yyVAL.str = "\n"
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:755
		{
			yyVAL.str = yyDollar[3].str
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:760
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:764
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:788
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:792
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:798
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:804
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:822
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:839
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:862
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:866
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:870
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:875
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:879
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:885
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:903
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:913
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:917
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:927
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:937
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:947
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:953
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:959
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:966
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:974
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:982
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:986
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:990
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:994
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1000
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1004
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1010
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1017
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1026
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1030
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1036
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1040
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1044
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1048
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1052
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1056
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1060
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1064
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1068
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1072
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1076
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1080
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1176
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1198
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1202
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1206
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1216
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1220
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1226
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1232
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1236
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1243
		{
			yyVAL.str = yyDollar[3].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1249
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1253
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1267
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1276
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1284
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1292
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1315
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1345
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1352
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1360
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1367
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1374
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1383
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1387
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1391
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1397
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1401
		{
			yyVAL.str = yyDollar[1].str
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1408
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1419
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1425
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1430
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1434
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1438
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1442
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1446
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1450
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1454
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1458
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1468
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1472
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1476
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1481
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1486
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1492
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1496
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Update{
				Table:   yyDollar[2].tableExprUnion(),
				Exprs:   yyDollar[4].updateExprsUnion(),
				Where:   yyDollar[5].whereUnion(),
				OrderBy: yyDollar[6].orderByUnion(),
				Limit:   yyDollar[7].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1515
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1519
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1525
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1534
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1540
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1544
		{
			yyLOCAL = tree.NewPrepareStmtFromStr(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1550
		{
			yyLOCAL = tree.NewExecuteStmt(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1554
		{
			yyLOCAL = tree.NewExecuteStmtWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1560
		{
			yyLOCAL = tree.NewDeallocateStmt(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1569
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1575
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1580
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1585
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1589
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1593
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1597
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1605
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1613
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1623
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1655
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1659
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1665
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1671
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1676
		{
			yyVAL.str = "true"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1677
		{
			yyVAL.str = "false"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1678
		{
			yyVAL.str = yyDollar[1].str
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1683
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1693
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1704
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1717
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1721
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1726
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1730
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1736
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1740
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1746
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1750
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1754
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1758
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1762
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1766
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1772
		{
			yyVAL.item = nil
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1777
		{
			yyVAL.item = nil
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1799
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1803
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1809
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1823
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1833
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1842
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1846
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1850
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1856
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1862
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1868
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1874
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1884
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1900
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1906
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1918
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1931
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1935
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1940
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1944
		{
			yyVAL.str = yyDollar[2].str
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1950
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1963
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1967
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1973
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1977
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1983
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1987
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1996
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2000
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2004
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2021
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2030
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2039
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2049
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2055
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2061
		{
			yyLOCAL = tree.NewDeallocateStmt(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2067
		{
			yyLOCAL = &tree.Delete{
				Table:   yyDollar[3].tableExprUnion(),
				Where:   yyDollar[4].whereUnion(),
				OrderBy: yyDollar[5].orderByUnion(),
				Limit:   yyDollar[6].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2082
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2091
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2098
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2104
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2112
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2119
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2126
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2145
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2149
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2153
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2159
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2172
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2178
		{
			yyVAL.str = yyDollar[1].str
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2182
		{
			yyVAL.str = yyDollar[3].str
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2188
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2192
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2198
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2203
		{
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2207
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2218
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2225
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2230
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2234
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2244
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2250
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2254
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2259
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2263
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2276
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2283
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2290
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2308
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2327
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2333
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2340
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2344
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2357
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2361
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2366
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2370
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2377
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2382
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2389
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2399
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2403
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2407
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2411
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2415
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2421
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2428
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2437
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2441
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2447
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2455
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2459
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2464
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2468
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2478
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2487
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2491
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2497
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2503
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2507
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2518
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2522
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2526
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2537
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2543
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2557
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2567
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2577
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2589
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2597
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2605
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2644
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2648
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2652
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2661
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2665
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2670
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2674
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2679
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2683
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2689
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2693
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2699
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2703
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2707
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2711
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2716
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2724
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2730
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2738
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2742
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2752
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2761
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2771
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2780
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2790
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2794
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2804
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2808
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2812
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2816
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2826
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2832
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2838
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2842
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2846
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2856
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2862
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2866
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2872
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2876
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2882
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2886
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:2899
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2904
		{
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2905
		{
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:2909
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2921
		{
			yyVAL.str = ""
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2925
		{
			yyVAL.str = yyDollar[1].str
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2929
		{
			yyVAL.str = yyDollar[2].str
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2938
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2942
		{
			yyVAL.str = yyDollar[1].str
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2946
		{
			yyVAL.str = yyDollar[2].str
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2950
		{
			yyVAL.str = yyDollar[1].str
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2954
		{
			yyVAL.str = yyDollar[2].str
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2988
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2998
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3009
		{
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3014
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3024
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3028
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3034
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3038
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3044
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3048
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3052
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3056
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3062
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3069
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3074
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3079
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3084
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3090
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3094
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3098
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3104
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3108
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3112
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3116
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3122
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3126
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3132
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3145
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3149
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3153
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3158
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3162
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3169
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3175
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3183
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3190
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3202
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3211
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3215
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3221
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3225
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3229
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3238
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3242
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3246
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3250
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3256
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3275
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3279
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3301
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3305
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3309
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3313
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3317
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3323
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3327
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3333
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3338
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3343
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3347
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3351
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3355
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3359
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3365
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3379
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3383
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3388
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3392
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3398
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3402
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3408
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3412
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3416
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3421
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3425
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3431
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3443
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3447
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3452
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3456
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3466
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3470
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3479
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3483
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3489
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3493
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3499
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3508
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3518
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3522
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3528
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3532
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3538
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3545
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3554
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3558
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3563
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3567
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3572
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3576
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3586
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3590
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3601
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3609
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3617
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3625
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3636
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3646
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3656
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3660
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3665
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3669
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3674
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3678
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3684
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3688
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3692
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3698
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3702
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3706
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3710
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3714
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3718
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3722
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3726
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3730
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3734
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3738
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3742
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3746
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3750
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3754
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3758
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3762
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3766
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3770
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3774
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3778
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3782
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3786
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3790
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3794
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3798
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3802
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3806
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3810
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3817
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3821
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3827
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3832
		{
			yyVAL.str = ""
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3836
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3840
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3846
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3850
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3854
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3858
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3862
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3866
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3880
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3884
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3893
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3898
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3904
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3911
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3915
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3921
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3925
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3931
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3941
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3947
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3956
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3965
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3988
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3997
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4007
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4015
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4021
		{
			yyVAL.str = ""
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4025
		{
			yyVAL.str = yyDollar[1].str
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4035
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4041
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4047
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4061
		{
			yyVAL.str = ""
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4068
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4074
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4078
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4082
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4093
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4097
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4101
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4106
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4110
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4116
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4120
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4126
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4130
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4134
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4138
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4142
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4146
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4150
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4154
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4158
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4162
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4166
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4170
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4174
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4184
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4188
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4193
		{
			yyVAL.str = ""
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4197
		{
			yyVAL.str = yyDollar[1].str
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4203
		{
			yyVAL.str = ""
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4207
		{
			yyVAL.str = yyDollar[2].str
		}
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4213
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4224
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4234
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4241
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4248
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4255
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4264
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4270
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4276
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4280
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4284
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4288
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4292
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4297
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4304
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4308
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4312
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4321
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4326
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4330
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4346
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4352
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4356
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4360
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4364
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4368
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4372
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4376
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4380
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4384
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4388
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4392
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4396
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4400
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4406
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4410
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4414
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4418
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4422
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4426
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4430
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4434
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4438
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4442
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4446
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4450
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4455
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4463
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4467
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4471
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4480
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4484
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4488
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4492
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4497
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4501
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4506
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4510
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4516
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4520
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4526
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4536
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4549
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4562
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4574
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4588
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4603
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4618
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4635
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4650
		{
		}
	case 802:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4656
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4665
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4673
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4681
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4690
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4699
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4708
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4717
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4726
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4735
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4744
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4753
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4762
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4771
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4780
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4796
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4804
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4812
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4820
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4828
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4837
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4845
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4854
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4863
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4871
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4879
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4888
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4908
		{
			yyVAL.str = yyDollar[1].str
		}
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4944
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4956
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4970
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4978
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4985
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4992
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5004
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5012
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5023
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5032
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5041
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5049
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5059
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5067
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5075
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5085
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5089
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5095
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5099
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5118
		{
		}
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5120
		{
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5160
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5170
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5174
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5178
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5184
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5189
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5193
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5199
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5203
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5210
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5214
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5218
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5226
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5230
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5234
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5238
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5242
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5247
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5252
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5258
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5262
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5266
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5270
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5277
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5281
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5287
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5291
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5295
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5299
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5303
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5307
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5311
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5315
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5321
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5325
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5331
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5335
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5342
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5346
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5350
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5356
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5360
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5364
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5368
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5372
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5376
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5380
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5386
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5390
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5394
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5398
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5404
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5408
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5421
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5426
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5430
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5434
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5438
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5452
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5456
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5472
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5483
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5488
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5494
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5506
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5518
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5530
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5543
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5556
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5569
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5582
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5595
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5608
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5621
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5634
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5647
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5660
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5675
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5698
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5735
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5783
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5800
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5812
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5827
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5847
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5867
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5883
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5896
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5909
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5922
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5935
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5947
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5959
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5971
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5983
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5995
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6007
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6019
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6031
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6043
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6056
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6071
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6094
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6099
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6105
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6112
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6116
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6121
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6125
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6131
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6137
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6144
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6151
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6160
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6167
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6174
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6183
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6187
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6191
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6197
		{
		}
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6199
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6209
		{
			yyVAL.str = ""
		}
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6213
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
