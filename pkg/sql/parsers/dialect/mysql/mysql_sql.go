// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const UPGRADE = 57869
const RETRY = 57870
const ADDDATE = 57871
const BIT_AND = 57872
const BIT_OR = 57873
const BIT_XOR = 57874
const CAST = 57875
const COUNT = 57876
const APPROX_COUNT = 57877
const APPROX_COUNT_DISTINCT = 57878
const SERIAL_EXTRACT = 57879
const APPROX_PERCENTILE = 57880
const CURDATE = 57881
const CURTIME = 57882
const DATE_ADD = 57883
const DATE_SUB = 57884
const EXTRACT = 57885
const GROUP_CONCAT = 57886
const MAX = 57887
const MID = 57888
const MIN = 57889
const NOW = 57890
const POSITION = 57891
const SESSION_USER = 57892
const STD = 57893
const STDDEV = 57894
const MEDIAN = 57895
const CLUSTER_CENTERS = 57896
const KMEANS = 57897
const STDDEV_POP = 57898
const STDDEV_SAMP = 57899
const SUBDATE = 57900
const SUBSTR = 57901
const SUBSTRING = 57902
const SUM = 57903
const SYSDATE = 57904
const SYSTEM_USER = 57905
const TRANSLATE = 57906
const TRIM = 57907
const VARIANCE = 57908
const VAR_POP = 57909
const VAR_SAMP = 57910
const AVG = 57911
const RANK = 57912
const ROW_NUMBER = 57913
const DENSE_RANK = 57914
const BIT_CAST = 57915
const BITMAP_BIT_POSITION = 57916
const BITMAP_BUCKET_NUMBER = 57917
const BITMAP_COUNT = 57918
const BITMAP_CONSTRUCT_AGG = 57919
const BITMAP_OR_AGG = 57920
const NEXTVAL = 57921
const SETVAL = 57922
const CURRVAL = 57923
const LASTVAL = 57924
const ARROW = 57925
const ROW = 57926
const OUTFILE = 57927
const HEADER = 57928
const MAX_FILE_SIZE = 57929
const FORCE_QUOTE = 57930
const PARALLEL = 57931
const STRICT = 57932
const UNUSED = 57933
const BINDINGS = 57934
const DO = 57935
const DECLARE = 57936
const LOOP = 57937
const WHILE = 57938
const LEAVE = 57939
const ITERATE = 57940
const UNTIL = 57941
const CALL = 57942
const PREV = 57943
const SLIDING = 57944
const FILL = 57945
const SPBEGIN = 57946
const BACKEND = 57947
const SERVERS = 57948
const HANDLER = 57949
const PERCENT = 57950
const SAMPLE = 57951
const MO_TS = 57952
const KILL = 57953
const BACKUP = 57954
const FILESYSTEM = 57955
const PARALLELISM = 57956
const RESTORE = 57957
const QUERY_RESULT = 57958

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12158

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 124,
	11, 745,
	22, 745,
	-2, 738,
	-1, 145,
	238, 1146,
	240, 1045,
	-2, 1092,
	-1, 170,
	43, 568,
	240, 568,
	267, 575,
	268, 575,
	463, 568,
	-2, 605,
	-1, 212,
	637, 1904,
	-2, 481,
	-1, 513,
	637, 2023,
	-2, 365,
	-1, 571,
	637, 2082,
	-2, 363,
	-1, 572,
	637, 2083,
	-2, 364,
	-1, 573,
	637, 2084,
	-2, 366,
	-1, 705,
	319, 151,
	435, 151,
	436, 151,
	-2, 1809,
	-1, 771,
	82, 1596,
	-2, 1959,
	-1, 772,
	82, 1614,
	-2, 1930,
	-1, 776,
	82, 1615,
	-2, 1958,
	-1, 809,
	82, 1523,
	-2, 2155,
	-1, 810,
	82, 1524,
	-2, 2154,
	-1, 811,
	82, 1525,
	-2, 2144,
	-1, 812,
	82, 2116,
	-2, 2137,
	-1, 813,
	82, 2117,
	-2, 2138,
	-1, 814,
	82, 2118,
	-2, 2146,
	-1, 815,
	82, 2119,
	-2, 2126,
	-1, 816,
	82, 2120,
	-2, 2135,
	-1, 817,
	82, 2121,
	-2, 2147,
	-1, 818,
	82, 2122,
	-2, 2148,
	-1, 819,
	82, 2123,
	-2, 2153,
	-1, 820,
	82, 2124,
	-2, 2158,
	-1, 821,
	82, 2125,
	-2, 2159,
	-1, 822,
	82, 1592,
	-2, 1997,
	-1, 823,
	82, 1593,
	-2, 1793,
	-1, 824,
	82, 1594,
	-2, 2006,
	-1, 825,
	82, 1595,
	-2, 1802,
	-1, 827,
	82, 1598,
	-2, 1810,
	-1, 828,
	82, 1599,
	-2, 2030,
	-1, 830,
	82, 1602,
	-2, 1829,
	-1, 832,
	82, 1604,
	-2, 2042,
	-1, 833,
	82, 1605,
	-2, 2041,
	-1, 834,
	82, 1606,
	-2, 1873,
	-1, 835,
	82, 1607,
	-2, 1954,
	-1, 838,
	82, 1610,
	-2, 2053,
	-1, 840,
	82, 1612,
	-2, 2056,
	-1, 841,
	82, 1613,
	-2, 2058,
	-1, 842,
	82, 1616,
	-2, 2066,
	-1, 843,
	82, 1617,
	-2, 1939,
	-1, 844,
	82, 1618,
	-2, 1984,
	-1, 845,
	82, 1619,
	-2, 1949,
	-1, 846,
	82, 1620,
	-2, 1974,
	-1, 857,
	82, 1501,
	-2, 2149,
	-1, 858,
	82, 1502,
	-2, 2150,
	-1, 859,
	82, 1503,
	-2, 2151,
	-1, 948,
	458, 605,
	459, 605,
	-2, 569,
	-1, 996,
	124, 1793,
	135, 1793,
	155, 1793,
	-2, 1767,
	-1, 1112,
	22, 772,
	-2, 721,
	-1, 1218,
	11, 745,
	22, 745,
	-2, 1381,
	-1, 1300,
	22, 772,
	-2, 721,
	-1, 1633,
	82, 1667,
	-2, 1956,
	-1, 1634,
	82, 1668,
	-2, 1957,
	-1, 1791,
	83, 922,
	-2, 928,
	-1, 2226,
	107, 1084,
	151, 1084,
	190, 1084,
	193, 1084,
	280, 1084,
	-2, 1077,
	-1, 2379,
	11, 745,
	22, 745,
	-2, 865,
	-1, 2411,
	83, 1753,
	156, 1753,
	-2, 1941,
	-1, 2412,
	83, 1753,
	156, 1753,
	-2, 1940,
	-1, 2413,
	83, 1729,
	156, 1729,
	-2, 1927,
	-1, 2414,
	83, 1730,
	156, 1730,
	-2, 1932,
	-1, 2415,
	83, 1731,
	156, 1731,
	-2, 1861,
	-1, 2416,
	83, 1732,
	156, 1732,
	-2, 1855,
	-1, 2417,
	83, 1733,
	156, 1733,
	-2, 1783,
	-1, 2418,
	83, 1734,
	156, 1734,
	-2, 1929,
	-1, 2419,
	83, 1735,
	156, 1735,
	-2, 1859,
	-1, 2420,
	83, 1736,
	156, 1736,
	-2, 1854,
	-1, 2421,
	83, 1737,
	156, 1737,
	-2, 1843,
	-1, 2422,
	83, 1753,
	156, 1753,
	-2, 1844,
	-1, 2423,
	83, 1753,
	156, 1753,
	-2, 1845,
	-1, 2425,
	83, 1742,
	156, 1742,
	-2, 1974,
	-1, 2426,
	83, 1720,
	156, 1720,
	-2, 1959,
	-1, 2427,
	83, 1751,
	156, 1751,
	-2, 1930,
	-1, 2428,
	83, 1751,
	156, 1751,
	-2, 1958,
	-1, 2429,
	83, 1751,
	156, 1751,
	-2, 1811,
	-1, 2430,
	83, 1749,
	156, 1749,
	-2, 1949,
	-1, 2431,
	83, 1746,
	156, 1746,
	-2, 1834,
	-1, 2432,
	82, 1701,
	83, 1701,
	156, 1701,
	393, 1701,
	394, 1701,
	395, 1701,
	-2, 1782,
	-1, 2433,
	82, 1702,
	83, 1702,
	156, 1702,
	393, 1702,
	394, 1702,
	395, 1702,
	-2, 1784,
	-1, 2434,
	82, 1703,
	83, 1703,
	156, 1703,
	393, 1703,
	394, 1703,
	395, 1703,
	-2, 2002,
	-1, 2435,
	82, 1705,
	83, 1705,
	156, 1705,
	393, 1705,
	394, 1705,
	395, 1705,
	-2, 1931,
	-1, 2436,
	82, 1707,
	83, 1707,
	156, 1707,
	393, 1707,
	394, 1707,
	395, 1707,
	-2, 1913,
	-1, 2437,
	82, 1709,
	83, 1709,
	156, 1709,
	393, 1709,
	394, 1709,
	395, 1709,
	-2, 1860,
	-1, 2438,
	82, 1711,
	83, 1711,
	156, 1711,
	393, 1711,
	394, 1711,
	395, 1711,
	-2, 1839,
	-1, 2439,
	82, 1712,
	83, 1712,
	156, 1712,
	393, 1712,
	394, 1712,
	395, 1712,
	-2, 1840,
	-1, 2440,
	82, 1714,
	83, 1714,
	156, 1714,
	393, 1714,
	394, 1714,
	395, 1714,
	-2, 1781,
	-1, 2441,
	83, 1756,
	156, 1756,
	393, 1756,
	394, 1756,
	395, 1756,
	-2, 1816,
	-1, 2442,
	83, 1756,
	156, 1756,
	393, 1756,
	394, 1756,
	395, 1756,
	-2, 1830,
	-1, 2443,
	83, 1759,
	156, 1759,
	393, 1759,
	394, 1759,
	395, 1759,
	-2, 1812,
	-1, 2444,
	83, 1759,
	156, 1759,
	393, 1759,
	394, 1759,
	395, 1759,
	-2, 1876,
	-1, 2445,
	83, 1756,
	156, 1756,
	393, 1756,
	394, 1756,
	395, 1756,
	-2, 1897,
	-1, 2648,
	107, 1084,
	151, 1084,
	190, 1084,
	193, 1084,
	280, 1084,
	-2, 1078,
	-1, 2666,
	80, 665,
	156, 665,
	-2, 1261,
	-1, 3068,
	193, 1084,
	304, 1349,
	-2, 1321,
	-1, 3234,
	107, 1084,
	151, 1084,
	190, 1084,
	193, 1084,
	-2, 1202,
	-1, 3236,
	107, 1084,
	151, 1084,
	190, 1084,
	193, 1084,
	-2, 1202,
	-1, 3248,
	80, 665,
	156, 665,
	-2, 1261,
	-1, 3270,
	193, 1084,
	304, 1349,
	-2, 1322,
	-1, 3410,
	107, 1084,
	151, 1084,
	190, 1084,
	193, 1084,
	-2, 1203,
	-1, 3437,
	83, 1164,
	156, 1164,
	-2, 1084,
	-1, 3569,
	83, 1164,
	156, 1164,
	-2, 1084,
	-1, 3721,
	83, 1168,
	156, 1168,
	-2, 1084,
	-1, 3769,
	83, 1169,
	156, 1169,
	-2, 1084,
}

const yyPrivate = 57344

const yyLast = 48781

var yyAct = [...]int{
	738, 715, 3815, 740, 3789, 2696, 201, 1876, 3725, 3808,
	3255, 3731, 1613, 3626, 709, 3349, 3732, 3087, 3724, 3569,
	3054, 724, 3652, 3609, 3683, 717, 3156, 2500, 3465, 3547,
	3284, 3603, 3630, 2690, 3157, 1253, 1450, 3397, 1609, 3568,
	3398, 3395, 606, 1385, 3493, 768, 2693, 1113, 995, 3538,
	3344, 3353, 1527, 3271, 624, 3610, 630, 630, 3612, 1391,
	59, 3417, 630, 647, 656, 1824, 3221, 656, 1660, 3407,
	2669, 2274, 3063, 1107, 1616, 3024, 3379, 3237, 3412, 2985,
	713, 3154, 186, 37, 2802, 2803, 3013, 1969, 1966, 3209,
	2719, 2785, 3083, 2801, 3072, 3065, 3112, 3239, 3196, 2535,
	2864, 2081, 668, 1934, 3142, 2373, 2039, 2407, 1674, 2409,
	2824, 664, 1942, 3122, 2798, 1836, 2277, 2637, 2992, 1443,
	2996, 707, 3033, 1539, 2237, 2699, 2988, 1103, 2990, 123,
	2987, 2256, 2649, 1984, 2986, 2204, 1362, 3071, 2968, 2190,
	2189, 2354, 2911, 712, 2983, 2064, 653, 2479, 923, 2837,
	2048, 2047, 1523, 1766, 36, 2040, 2461, 1962, 2847, 1528,
	2012, 2076, 1531, 2374, 1937, 2362, 1356, 1935, 629, 629,
	2077, 2625, 2721, 2620, 637, 606, 2357, 2701, 6, 2275,
	2226, 1866, 197, 8, 196, 7, 1052, 2405, 1800, 1607,
	2236, 716, 2078, 989, 1490, 1459, 2661, 1429, 1424, 2111,
	623, 201, 2216, 201, 1374, 1043, 1044, 2270, 2088, 1835,
	706, 1667, 630, 1037, 1038, 1126, 1598, 2568, 1042, 957,
	714, 27, 2028, 1560, 2043, 1647, 15, 1542, 1325, 1497,
	16, 1796, 2002, 2046, 661, 605, 1606, 988, 1428, 1004,
	2381, 2358, 1799, 861, 1426, 708, 14, 922, 33, 1386,
	1516, 639, 1489, 642, 671, 2567, 1612, 1675, 100, 1394,
	1370, 1482, 670, 187, 899, 177, 23, 943, 183, 920,
	905, 24, 655, 725, 1254, 1298, 17, 10, 667, 1186,
	1187, 1188, 1185, 1039, 652, 1041, 2085, 2383, 1040, 651,
	863, 1552, 3532, 648, 1186, 1187, 1188, 1185, 1186, 1187,
	1188, 1185, 2603, 2603, 3425, 2603, 3251, 3040, 1001, 650,
	864, 649, 1551, 2881, 2880, 2095, 1108, 3224, 3149, 2257,
	2523, 2462, 2467, 2465, 637, 635, 2464, 1109, 1779, 1504,
	1500, 1035, 1036, 1003, 185, 625, 2188, 1317, 708, 659,
	626, 2961, 2958, 2963, 1036, 2960, 3800, 1036, 1408, 1773,
	1313, 2595, 2593, 3274, 1502, 1186, 1187, 1188, 1185, 3342,
	1108, 2860, 2858, 2017, 1034, 3598, 3500, 3494, 8, 3345,
	7, 3155, 2061, 3614, 2042, 1538, 1186, 1187, 1188, 1185,
	1248, 862, 2938, 2034, 184, 55, 173, 146, 2315, 3380,
	1320, 3286, 2597, 1148, 3706, 873, 3384, 631, 184, 55,
	173, 146, 3238, 2517, 3277, 2509, 2082, 184, 184, 184,
	184, 184, 55, 173, 146, 3272, 3554, 2228, 1537, 3520,
	3294, 3295, 184, 184, 1395, 1546, 3273, 2227, 1558, 3663,
	184, 1007, 1005, 184, 55, 173, 146, 184, 55, 173,
	146, 1469, 1468, 1467, 1006, 2655, 184, 55, 173, 146,
	184, 1321, 1331, 178, 2936, 1543, 2883, 122, 1555, 1581,
	3555, 1348, 1124, 3278, 174, 666, 2093, 178, 999, 2221,
	2872, 165, 2796, 1781, 976, 175, 1545, 178, 178, 1557,
	178, 3522, 2399, 852, 1183, 851, 853, 854, 1000, 855,
	856, 178, 2653, 2400, 122, 2831, 2832, 1569, 122, 178,
	1358, 1121, 178, 2830, 874, 1156, 178, 2387, 1158, 110,
	2386, 1979, 1430, 2388, 1432, 178, 1947, 1948, 1382, 178,
	1783, 1784, 1946, 2962, 2959, 2480, 1404, 2622, 1390, 1405,
	1392, 1393, 1389, 1392, 1393, 966, 1159, 2623, 1176, 3366,
	1850, 2307, 2656, 3735, 3736, 1615, 1599, 1181, 998, 1603,
	997, 3058, 3617, 3703, 3617, 3696, 3616, 3293, 1163, 2278,
	3615, 1164, 3616, 3695, 3756, 3615, 3694, 2177, 3158, 3699,
	3793, 3794, 3685, 1602, 3056, 3604, 3605, 3606, 3607, 3601,
	3158, 2865, 3685, 1330, 3282, 2866, 2621, 2867, 1619, 1166,
	2504, 1118, 128, 129, 3688, 130, 131, 3497, 2598, 1503,
	1501, 145, 1590, 182, 2097, 2740, 3279, 3283, 3281, 3280,
	1953, 1129, 3623, 3171, 3007, 1407, 1152, 1957, 972, 970,
	1963, 971, 1594, 170, 3389, 3210, 2089, 3005, 630, 630,
	1129, 3217, 911, 2348, 3708, 3709, 3296, 2215, 2628, 630,
	1117, 1154, 2997, 2901, 3288, 3289, 2025, 3704, 3705, 3524,
	3525, 1510, 1509, 1157, 1160, 2612, 3701, 1604, 656, 656,
	2899, 630, 2514, 145, 171, 182, 172, 108, 169, 1161,
	702, 1179, 1180, 704, 1178, 2313, 3365, 1151, 703, 1153,
	1601, 3343, 3002, 3003, 3367, 170, 164, 163, 2859, 3001,
	2789, 3296, 61, 2351, 2350, 3529, 3386, 3734, 3004, 3697,
	3518, 2610, 3200, 3275, 1618, 1617, 1004, 977, 2355, 3287,
	2596, 2072, 876, 1173, 1046, 1380, 2293, 622, 3311, 2094,
	2220, 3086, 2273, 2296, 1226, 1189, 3559, 653, 653, 973,
	3551, 3060, 1162, 1219, 3764, 1168, 1332, 2611, 1169, 3308,
	629, 1106, 1229, 3022, 1417, 1316, 3084, 3085, 877, 1174,
	1175, 1115, 1553, 166, 167, 168, 1155, 3034, 2662, 1110,
	3645, 1550, 1977, 1978, 3640, 1116, 1171, 1237, 1143, 658,
	1117, 657, 3531, 1139, 2794, 1001, 2083, 1406, 2223, 1004,
	2295, 3301, 3174, 2905, 176, 2602, 1109, 1109, 2083, 2083,
	3647, 2969, 975, 3631, 3256, 1257, 1109, 1600, 3653, 913,
	1003, 914, 2999, 3055, 118, 2882, 1131, 1130, 169, 1165,
	119, 1625, 1628, 1629, 2695, 1123, 2100, 2102, 2103, 654,
	2879, 3263, 1626, 2294, 2116, 1131, 1130, 2691, 2692, 2280,
	2695, 1036, 654, 1036, 1369, 1036, 1036, 3622, 2084, 3292,
	1109, 3707, 1220, 1036, 1036, 3512, 1167, 3513, 1001, 3312,
	3456, 3089, 3826, 3445, 654, 2463, 3356, 3553, 654, 2325,
	3811, 1134, 2096, 3507, 2324, 652, 652, 120, 2634, 974,
	651, 651, 2402, 1003, 648, 648, 1505, 665, 1319, 1439,
	54, 56, 3451, 3560, 1172, 2345, 2346, 3552, 1328, 624,
	650, 650, 649, 649, 56, 1258, 1438, 1120, 1122, 862,
	1141, 3515, 179, 180, 1367, 181, 3523, 2594, 1296, 1170,
	147, 1301, 1112, 1132, 3385, 3291, 56, 1140, 1384, 1383,
	56, 2518, 923, 1366, 147, 3008, 1111, 1392, 1393, 56,
	1136, 1137, 3514, 147, 147, 147, 147, 147, 1381, 1365,
	1222, 1223, 1224, 1225, 1142, 1782, 1000, 2627, 147, 147,
	1392, 1393, 2998, 3654, 1964, 2902, 147, 3061, 3573, 147,
	2769, 3526, 3723, 147, 179, 180, 2279, 181, 1105, 2273,
	3539, 2281, 147, 630, 3240, 1419, 147, 52, 3700, 630,
	967, 3064, 606, 606, 1333, 2741, 1388, 2742, 2743, 3390,
	1104, 606, 606, 2957, 2316, 1454, 1454, 3812, 630, 1954,
	1227, 3000, 1217, 2631, 2632, 3340, 1956, 2826, 2828, 3161,
	1326, 1595, 3512, 666, 3513, 2842, 2843, 3682, 2630, 1427,
	656, 1483, 624, 2290, 3020, 2282, 1493, 1493, 2280, 2283,
	3084, 3085, 1456, 1452, 1452, 3619, 3375, 201, 3080, 1148,
	1492, 1492, 3088, 121, 41, 2973, 606, 1461, 2510, 2391,
	53, 912, 1627, 2311, 5, 1269, 1270, 2101, 2086, 1932,
	1340, 125, 126, 969, 2283, 127, 968, 3203, 3515, 3466,
	3467, 3468, 3472, 3470, 3471, 3469, 2641, 2644, 2645, 2646,
	2642, 2643, 2606, 2904, 1346, 1415, 1345, 3572, 1344, 1329,
	1418, 1425, 1343, 978, 660, 3458, 967, 1535, 3081, 3514,
	2738, 3447, 1540, 967, 1511, 3446, 1353, 2112, 2608, 1549,
	1460, 3197, 1448, 1449, 3452, 3453, 1027, 1032, 1033, 915,
	1335, 1336, 1337, 1338, 1339, 1147, 1341, 2196, 3809, 3810,
	2913, 2912, 1347, 1302, 1579, 917, 918, 919, 1324, 1300,
	3722, 1376, 1377, 2098, 2099, 2760, 2761, 2310, 1454, 1786,
	1454, 1117, 3508, 3021, 2198, 2197, 3509, 1322, 1323, 1559,
	2284, 1334, 1787, 3376, 1004, 2279, 2273, 2278, 2974, 2276,
	2281, 1004, 1574, 1575, 2827, 1434, 1436, 2681, 2195, 969,
	2193, 2268, 968, 1780, 1446, 1447, 969, 1544, 1785, 968,
	878, 1355, 2337, 879, 1556, 2284, 3418, 3827, 3822, 1620,
	1621, 1622, 1623, 1624, 3817, 2207, 2218, 653, 2770, 2772,
	2773, 2774, 2771, 1396, 3692, 1363, 1399, 2667, 1454, 1589,
	1409, 1410, 1484, 3216, 2282, 3806, 1525, 1526, 2208, 2209,
	2289, 1184, 3771, 1548, 2287, 1673, 3039, 3162, 1437, 1506,
	3743, 1665, 3119, 1148, 2482, 1669, 1670, 1671, 1672, 1722,
	1596, 3115, 1530, 3206, 1706, 1534, 1661, 1533, 2146, 3737,
	3719, 2145, 1716, 3173, 1578, 2371, 2182, 2509, 2759, 1462,
	635, 2091, 1577, 882, 3673, 1114, 1614, 3818, 1475, 1494,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1481, 979, 3093, 1363, 1658, 1659, 3772, 3082,
	1495, 3648, 3636, 2607, 1514, 3772, 1517, 1518, 1029, 1030,
	1031, 1114, 2668, 3744, 1768, 1117, 3592, 1519, 1520, 3508,
	1611, 2217, 3591, 3611, 881, 3091, 1788, 1146, 884, 883,
	1592, 1483, 3535, 3720, 1184, 1630, 1797, 1454, 1802, 1803,
	1764, 1805, 1419, 630, 1731, 652, 2967, 3535, 630, 1707,
	651, 1454, 3586, 2372, 648, 923, 2668, 1587, 1825, 1371,
	1375, 1375, 1375, 1562, 3585, 1454, 1584, 1712, 1713, 1714,
	650, 1419, 649, 3584, 2091, 3637, 647, 1568, 1829, 2252,
	1728, 3583, 1583, 1729, 1371, 1371, 2965, 1767, 1567, 3593,
	2372, 1570, 3563, 2372, 1588, 2241, 1849, 3562, 2125, 1721,
	1742, 1743, 1845, 1610, 1608, 1856, 1856, 1586, 1419, 1605,
	1419, 1419, 1585, 1582, 630, 630, 2845, 1797, 1926, 1763,
	1184, 1454, 1929, 1930, 3534, 3535, 1361, 1944, 1186, 1187,
	1188, 1185, 1368, 3119, 1656, 1657, 3317, 3535, 2005, 1378,
	1775, 606, 1804, 1454, 3265, 3230, 3535, 1397, 1398, 2614,
	1400, 1401, 3189, 1402, 3535, 1807, 1297, 1806, 1768, 1853,
	1812, 2599, 1145, 1768, 1768, 2091, 1186, 1187, 1188, 1185,
	2091, 630, 1797, 1454, 2124, 1989, 3185, 630, 630, 630,
	664, 664, 3101, 2499, 2821, 1649, 2487, 1999, 2000, 2001,
	2574, 2566, 1597, 2007, 1878, 1826, 2402, 3535, 2082, 1945,
	201, 2266, 2187, 201, 201, 1980, 201, 2181, 2180, 2402,
	2153, 1924, 2251, 2015, 2525, 1841, 2018, 3266, 3231, 2021,
	2073, 1975, 2023, 1859, 1770, 3190, 1862, 1863, 2507, 1736,
	1931, 1848, 2495, 1354, 1851, 1852, 1664, 1972, 1973, 1146,
	1440, 1765, 1958, 2489, 3834, 3819, 1722, 1722, 2050, 3186,
	3251, 1771, 2280, 2283, 1950, 3102, 1952, 2372, 1722, 1722,
	1793, 1794, 1795, 1184, 1184, 2066, 1970, 1971, 866, 867,
	868, 869, 1808, 1809, 1810, 1811, 1988, 2003, 2065, 2849,
	1827, 1828, 2016, 1985, 1842, 2019, 2020, 1184, 2022, 1985,
	1985, 1985, 1792, 1801, 1825, 2484, 1847, 1821, 1454, 2080,
	2476, 2241, 1822, 2060, 3482, 2485, 1004, 1817, 2474, 1004,
	1991, 1992, 1993, 1965, 1704, 1705, 2490, 1708, 1004, 1860,
	1861, 1830, 2472, 2052, 2670, 1723, 1832, 1838, 2470, 2240,
	3315, 1148, 1544, 2512, 1837, 1858, 1839, 1840, 1730, 2511,
	1732, 2503, 1733, 1734, 1735, 1465, 1855, 1857, 1923, 2183,
	1846, 1186, 1187, 1188, 1185, 653, 2260, 2160, 2159, 2074,
	2144, 2135, 2056, 1928, 2134, 2133, 2090, 1933, 2485, 1571,
	2141, 2126, 1949, 2477, 1951, 1001, 2071, 1801, 1959, 2115,
	1217, 2475, 2010, 2120, 2284, 1997, 1564, 1001, 1234, 2279,
	2273, 2278, 1133, 2276, 2281, 2471, 2045, 2934, 1101, 1096,
	1003, 2471, 2241, 1986, 1186, 1187, 1188, 1185, 2045, 1987,
	1974, 1004, 1003, 1201, 1994, 1995, 871, 866, 867, 868,
	869, 1359, 2182, 3044, 2132, 1360, 2013, 2011, 2896, 1608,
	1184, 1184, 2139, 1184, 1184, 2109, 2110, 1184, 1184, 2091,
	3641, 3419, 1572, 3243, 3828, 2030, 3797, 1444, 2282, 880,
	2122, 2308, 1711, 1710, 2156, 1711, 1710, 3241, 1445, 2161,
	2162, 2163, 3533, 1372, 2166, 2167, 2168, 2169, 2170, 2171,
	2172, 2173, 2174, 2175, 2105, 1442, 2051, 3504, 3449, 3448,
	1001, 2192, 2057, 2194, 3642, 3420, 2062, 3244, 2070, 3434,
	1371, 707, 2059, 652, 630, 630, 630, 3391, 651, 1403,
	3223, 3242, 648, 3120, 1375, 1003, 3111, 3106, 3103, 630,
	630, 630, 630, 2075, 741, 751, 1375, 3050, 650, 3015,
	649, 2791, 2238, 2462, 742, 2069, 743, 747, 750, 746,
	744, 745, 2244, 1419, 2639, 3035, 2068, 1199, 1209, 1210,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1201, 1413, 1414,
	3147, 1416, 2604, 1420, 1421, 1422, 2522, 2113, 2488, 1419,
	2393, 2154, 2155, 1748, 2157, 871, 1741, 1833, 1834, 2055,
	2532, 2164, 2054, 2107, 2108, 1441, 2302, 2106, 2118, 748,
	1373, 885, 2053, 1350, 1843, 1844, 1470, 1471, 1472, 1473,
	1474, 2456, 1476, 1477, 1478, 1479, 1480, 1655, 1349, 1359,
	1486, 1487, 1488, 1360, 1854, 2104, 2211, 2212, 2213, 1119,
	2014, 749, 3036, 1652, 1654, 1651, 2543, 1653, 1668, 1668,
	2119, 2229, 2230, 2231, 2232, 1649, 1498, 2309, 2014, 2851,
	1188, 1185, 630, 1856, 1204, 1205, 1206, 1207, 1208, 1201,
	2376, 2376, 1944, 2376, 1095, 1091, 1092, 1093, 1094, 1789,
	2548, 3693, 2547, 2546, 2544, 1185, 3037, 1186, 1187, 1188,
	1185, 606, 606, 3461, 3460, 1768, 2868, 1768, 3150, 1117,
	2246, 2247, 2730, 2728, 2262, 1454, 630, 2176, 2178, 2179,
	2249, 2250, 2707, 2705, 3802, 1768, 1768, 2259, 3440, 2261,
	1236, 630, 3392, 3393, 1257, 2184, 2272, 1117, 2446, 624,
	2271, 2201, 1004, 1235, 1493, 3387, 1944, 3825, 3801, 2451,
	2219, 2453, 2587, 2397, 2588, 201, 3747, 3214, 1492, 2545,
	1209, 1210, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1201,
	2265, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1201, 2389,
	3718, 2390, 2245, 3717, 1425, 2380, 2378, 2781, 2382, 2779,
	1186, 1187, 1188, 1185, 3643, 2492, 3588, 3576, 2258, 2394,
	2395, 2466, 3388, 2777, 1186, 1187, 1188, 1185, 2491, 3824,
	2494, 1001, 2505, 3148, 3215, 2766, 2080, 3566, 2285, 2286,
	1726, 2291, 3556, 1454, 3495, 1454, 3422, 1454, 1460, 3421,
	3257, 3245, 1117, 3213, 1258, 1727, 1003, 2457, 3006, 2892,
	2524, 2863, 2248, 1985, 2780, 2862, 2778, 2254, 2764, 2450,
	2255, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1190, 2763,
	2776, 2762, 2410, 2515, 2404, 2754, 1454, 2552, 2748, 2747,
	2356, 2352, 2765, 2746, 2533, 2745, 2600, 2539, 2478, 2448,
	2501, 2502, 2559, 2384, 2553, 2554, 2186, 1454, 2455, 2033,
	2558, 2032, 2556, 2557, 1434, 1436, 2031, 2549, 2550, 2027,
	2697, 2026, 2551, 1983, 1452, 2927, 1982, 1981, 2562, 1565,
	1315, 2398, 1186, 1187, 1188, 1185, 2638, 1186, 1187, 1188,
	1185, 2534, 3222, 2560, 3113, 1452, 2458, 1186, 1187, 1188,
	1185, 2991, 3527, 3528, 2605, 1498, 1620, 1768, 2449, 2447,
	3821, 1099, 2563, 2564, 2401, 2915, 3820, 1117, 3350, 3795,
	3763, 1117, 3762, 1186, 1187, 1188, 1185, 2519, 1454, 3759,
	3680, 2635, 2636, 2540, 2926, 3625, 3396, 3608, 1926, 2561,
	2129, 2536, 3599, 2536, 3580, 3575, 2666, 2521, 1186, 1187,
	1188, 1185, 2672, 1186, 1187, 1188, 1185, 1499, 2516, 3574,
	3530, 1186, 1187, 1188, 1185, 3496, 702, 1098, 2530, 704,
	3442, 2683, 3403, 3373, 703, 2506, 2676, 2677, 2508, 3370,
	2591, 1117, 2513, 3369, 2137, 3348, 3346, 3325, 1375, 2704,
	1186, 1187, 1188, 1185, 2497, 3324, 1117, 1117, 1117, 1856,
	1004, 3321, 1117, 3319, 2714, 2715, 2716, 2717, 1117, 2724,
	2786, 2725, 2726, 3252, 2727, 2650, 2729, 2526, 2527, 3212,
	3211, 2542, 3208, 2654, 3198, 3182, 3180, 2724, 3108, 3099,
	3098, 2651, 3016, 1186, 1187, 1188, 1185, 2978, 2977, 2376,
	2972, 2191, 2615, 2529, 2906, 2903, 2410, 2861, 2835, 1608,
	2136, 2775, 2767, 2782, 2663, 1878, 2673, 2253, 2664, 2757,
	2755, 606, 2751, 1990, 3728, 2750, 1926, 2749, 2601, 3629,
	1117, 1944, 1944, 1944, 1944, 808, 807, 1186, 1187, 1188,
	1185, 2498, 1117, 1944, 2685, 2036, 2376, 3660, 2617, 2029,
	2619, 1186, 1187, 1188, 1185, 2675, 1186, 1187, 1188, 1185,
	2678, 1778, 1454, 2702, 1777, 1566, 1265, 2702, 2616, 1186,
	1187, 1188, 1185, 630, 630, 2698, 2633, 1261, 1260, 1102,
	2657, 875, 2710, 2711, 3656, 2569, 2570, 2713, 2671, 3517,
	2709, 2575, 8, 2720, 7, 2314, 2665, 3516, 2317, 2318,
	2319, 2320, 2321, 2322, 2323, 3505, 3372, 2326, 2327, 2328,
	2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2687, 2338,
	2339, 2340, 2341, 2342, 2700, 2343, 2817, 3357, 2706, 201,
	2684, 3236, 3235, 3234, 201, 2712, 3371, 3205, 3194, 3192,
	3191, 3188, 3359, 184, 1801, 173, 146, 2855, 3187, 2857,
	3181, 3179, 3163, 3153, 3152, 2804, 1722, 2123, 1722, 2744,
	3138, 2878, 2756, 1186, 1187, 1188, 1185, 2804, 1768, 1186,
	1187, 1188, 1185, 1768, 2891, 3358, 2703, 3137, 3045, 2981,
	1454, 2964, 2932, 2898, 2065, 2839, 2840, 2925, 2682, 2917,
	2846, 2787, 2916, 2910, 2792, 2844, 2613, 2473, 2805, 2806,
	2807, 2808, 1186, 1187, 1188, 1185, 2816, 2818, 2469, 2820,
	2819, 2852, 178, 3746, 2790, 1004, 2856, 2468, 2165, 2909,
	2158, 2836, 2152, 2833, 2151, 2150, 1004, 2149, 2147, 3305,
	2143, 2142, 1186, 1187, 1188, 1185, 2140, 3177, 2873, 2131,
	2128, 1767, 2127, 2931, 2035, 1761, 2877, 1760, 1759, 2884,
	1725, 1525, 1526, 1724, 1715, 1709, 1186, 1187, 1188, 1185,
	1466, 1464, 184, 2875, 1186, 1187, 1188, 1185, 1255, 2920,
	2930, 2922, 1530, 2885, 2929, 1534, 3655, 1533, 2975, 2121,
	3594, 3582, 2976, 2895, 2850, 3577, 1513, 2854, 2900, 1117,
	2853, 2928, 3476, 3459, 3455, 2994, 3433, 1186, 1187, 1188,
	1185, 1186, 1187, 1188, 1185, 3010, 2874, 2871, 2869, 2876,
	3416, 630, 3333, 3331, 3303, 2888, 2887, 2886, 1186, 1187,
	1188, 1185, 3302, 3025, 1117, 3299, 3777, 630, 3298, 1117,
	1117, 178, 3264, 1518, 2907, 3261, 3672, 2585, 1944, 2238,
	3259, 3043, 2908, 1519, 1520, 3225, 1524, 1515, 1529, 1532,
	2894, 2914, 753, 124, 1186, 1187, 1188, 1185, 124, 1521,
	2302, 1357, 2923, 2924, 1186, 1187, 1188, 1185, 2783, 3019,
	2921, 1695, 3070, 2584, 3073, 2708, 3073, 3073, 2966, 2659,
	2658, 1117, 2652, 2618, 1004, 2586, 1004, 2483, 2392, 2344,
	2239, 1004, 2210, 3077, 2185, 2980, 1650, 2650, 178, 3094,
	1186, 1187, 1188, 1185, 2583, 3090, 1996, 1454, 1454, 3028,
	1791, 2970, 636, 2971, 3032, 124, 2674, 1004, 3092, 1774,
	2979, 3057, 3059, 3017, 1593, 2679, 2680, 2624, 2582, 2829,
	1547, 1186, 1187, 1188, 1185, 1522, 1314, 1299, 1295, 3029,
	3053, 3041, 1294, 3095, 3096, 1452, 1452, 3011, 3012, 1293,
	1292, 3018, 1291, 1001, 630, 1186, 1187, 1188, 1185, 2994,
	1290, 1289, 3038, 3042, 2918, 2919, 3069, 1419, 3027, 1288,
	1926, 1926, 1287, 3030, 3031, 3078, 1286, 3052, 1003, 3068,
	3047, 3046, 1285, 1284, 1283, 2272, 3048, 3049, 1282, 2271,
	1281, 2939, 2940, 1280, 1279, 3670, 2581, 2941, 2942, 2943,
	2944, 1278, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952,
	2953, 2954, 1277, 3074, 3075, 3079, 1117, 1276, 1275, 1274,
	2552, 2736, 2737, 1186, 1187, 1188, 1185, 1273, 1272, 3151,
	1271, 1002, 1268, 1267, 1691, 2580, 2752, 2753, 124, 1266,
	1688, 2579, 1264, 1263, 1690, 1687, 1689, 1693, 1694, 1262,
	1259, 1252, 1692, 124, 1251, 124, 1249, 1248, 1247, 1246,
	2788, 1245, 1186, 1187, 1188, 1185, 1985, 1244, 1186, 1187,
	1188, 1185, 3567, 1243, 1242, 630, 1241, 3105, 1240, 1239,
	3107, 3110, 3114, 3109, 3116, 3117, 3104, 3100, 1238, 1233,
	1232, 3127, 1200, 1199, 1209, 1210, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1201, 3131, 1231, 3076, 1230, 1150, 3118,
	1100, 2148, 3176, 3134, 3135, 3136, 3123, 3124, 3668, 3178,
	1416, 3666, 3300, 3140, 3130, 3146, 1200, 1199, 1209, 1210,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1201, 2243, 3129,
	2225, 2410, 2578, 1138, 3775, 3201, 3733, 2577, 3126, 3164,
	3193, 2576, 2640, 2403, 2038, 1149, 3128, 2813, 3166, 2811,
	3165, 2573, 2814, 2810, 2812, 2809, 3169, 3170, 3431, 1186,
	1187, 1188, 1185, 3183, 1186, 1187, 1188, 1185, 1186, 1187,
	1188, 1185, 3438, 2496, 3335, 3175, 2486, 3172, 1186, 1187,
	1188, 1185, 3336, 3229, 1351, 2536, 1698, 1699, 1700, 1701,
	1702, 1703, 1696, 1697, 2815, 109, 2368, 2369, 3014, 2376,
	1944, 3248, 2890, 1004, 58, 57, 3310, 2359, 1819, 1820,
	1004, 2312, 1200, 1199, 1209, 1210, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1201, 3141, 3267, 3204, 1915, 1117, 3199,
	2481, 3334, 2572, 3207, 3167, 3168, 3195, 3070, 1814, 1815,
	1816, 1117, 1507, 2571, 2364, 2367, 2368, 2369, 2365, 2520,
	2366, 2370, 1117, 1561, 3314, 632, 2565, 1541, 1454, 1186,
	1187, 1188, 1185, 2555, 633, 634, 2501, 2502, 3219, 3220,
	1186, 1187, 1188, 1185, 3250, 3066, 1926, 3067, 2200, 1998,
	1117, 1144, 1768, 1186, 1187, 1188, 1185, 2531, 2989, 2982,
	1186, 1187, 1188, 1185, 3316, 1768, 1452, 3258, 3330, 3260,
	3297, 3332, 2686, 3247, 3246, 2660, 3786, 3290, 2264, 201,
	3254, 2234, 2732, 1823, 1186, 1187, 1188, 1185, 3338, 2733,
	2734, 2735, 1117, 1790, 1711, 1710, 3327, 3337, 1310, 1311,
	3579, 3304, 1308, 1309, 3309, 3306, 1306, 1307, 3249, 1304,
	1305, 3097, 3313, 3051, 1663, 2353, 2349, 1927, 3253, 1412,
	1411, 1177, 3133, 3268, 3318, 3320, 3322, 3323, 2838, 2199,
	2067, 3374, 1364, 1342, 1387, 3328, 3307, 1117, 3329, 3326,
	3753, 1186, 1187, 1188, 1185, 3751, 3711, 2720, 3690, 3689,
	3687, 3355, 3632, 3595, 3490, 3489, 1117, 1454, 1454, 3428,
	3347, 3341, 3025, 2364, 2367, 2368, 2369, 2365, 3184, 2366,
	2370, 3160, 3411, 3143, 3411, 2804, 3351, 3159, 3352, 3144,
	2297, 2267, 1563, 2848, 1363, 3779, 3778, 3778, 3405, 3406,
	1117, 3427, 1117, 3401, 3202, 1452, 1661, 2893, 3339, 2227,
	2130, 1318, 3430, 1135, 3432, 3779, 3457, 3139, 1114, 1454,
	188, 3, 1379, 3381, 3383, 66, 3382, 2804, 866, 867,
	868, 869, 2, 1114, 3798, 1004, 3402, 630, 3799, 1117,
	1117, 1, 2592, 1117, 1117, 3429, 3415, 3404, 3368, 1772,
	3414, 1312, 870, 3378, 865, 1431, 3426, 1661, 3408, 3250,
	2385, 1976, 2052, 3478, 3439, 1458, 124, 124, 1002, 1776,
	3473, 872, 1825, 2822, 3487, 2823, 3463, 3464, 3132, 3436,
	3474, 3475, 3297, 3491, 3492, 3435, 2825, 3443, 2609, 3290,
	2087, 3399, 2793, 2347, 2214, 3441, 1454, 3009, 1352, 1200,
	1199, 1209, 1210, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1201, 3484, 916, 1717, 1576, 1026, 1128, 3519, 1573, 1127,
	1125, 1666, 755, 3423, 3424, 1614, 3511, 1614, 2041, 3479,
	3483, 2784, 3503, 2758, 1452, 3486, 3785, 3485, 3814, 3745,
	3788, 1218, 1591, 3498, 739, 3681, 3600, 3749, 3602, 3462,
	3501, 2092, 1182, 2870, 3502, 3537, 939, 3548, 3542, 796,
	3506, 766, 1250, 3510, 3399, 3399, 1554, 2937, 3399, 3399,
	2935, 1028, 765, 3218, 1117, 3360, 2629, 3361, 2841, 3550,
	1025, 940, 2024, 3597, 3499, 3571, 3565, 1508, 1512, 2263,
	3558, 3651, 3536, 3437, 3062, 2694, 1536, 3646, 3262, 3364,
	3362, 3543, 3363, 3355, 672, 3545, 3544, 1955, 604, 986,
	1004, 3557, 3477, 2037, 673, 3561, 2242, 1117, 3702, 3581,
	896, 2224, 1454, 897, 889, 2648, 2647, 1631, 1191, 1648,
	2955, 2956, 1228, 3540, 711, 2117, 2626, 3285, 2834, 65,
	64, 63, 62, 3578, 2006, 209, 757, 208, 3394, 3677,
	3790, 737, 736, 735, 3587, 734, 733, 732, 3589, 3618,
	1452, 3621, 2363, 2361, 2360, 1939, 1938, 2004, 3023, 3613,
	1237, 2723, 2718, 1867, 1865, 1423, 1117, 2292, 2299, 1864,
	3730, 3661, 3662, 3596, 3454, 2768, 3354, 1303, 1813, 3633,
	2288, 1884, 2739, 1881, 1880, 2731, 3450, 3444, 1912, 1614,
	3546, 3226, 3227, 3228, 3628, 3410, 3269, 3232, 3233, 3270,
	3276, 2233, 1051, 1047, 3624, 1049, 3627, 3650, 3635, 1050,
	1048, 2541, 2269, 1117, 2984, 2933, 2206, 2205, 2203, 2202,
	1327, 1454, 3657, 3620, 3675, 3678, 3698, 3665, 3667, 3669,
	3671, 3644, 3399, 3377, 2408, 2406, 1097, 3125, 3121, 3649,
	927, 3679, 2049, 2063, 3658, 2889, 1940, 1936, 2795, 3521,
	3664, 1818, 890, 2222, 162, 51, 105, 3674, 160, 1452,
	50, 94, 93, 104, 3686, 1454, 3684, 158, 3548, 1200,
	1199, 1209, 1210, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1201, 49, 193, 192, 3721, 195, 194, 3710, 191, 2459,
	3729, 3399, 2460, 190, 3715, 3716, 3712, 3714, 1496, 189,
	3726, 3713, 3691, 1452, 3413, 860, 40, 39, 38, 925,
	926, 34, 13, 1463, 12, 35, 22, 636, 21, 1580,
	967, 20, 26, 32, 31, 3738, 117, 3739, 3758, 3740,
	116, 3741, 30, 3752, 3742, 3754, 3755, 115, 3399, 3750,
	3748, 114, 1117, 113, 112, 3613, 111, 3757, 29, 124,
	19, 44, 43, 42, 9, 107, 103, 101, 28, 3571,
	102, 99, 97, 3767, 95, 77, 76, 75, 3726, 90,
	89, 3769, 3770, 3768, 3776, 3784, 3773, 3792, 3774, 88,
	3791, 87, 3780, 3781, 3782, 3783, 86, 85, 83, 84,
	938, 74, 73, 72, 71, 3803, 70, 1117, 92, 3796,
	2528, 98, 96, 969, 81, 91, 968, 3650, 3805, 3804,
	82, 3807, 80, 79, 78, 69, 124, 3726, 3816, 3813,
	68, 67, 144, 124, 1200, 1199, 1209, 1210, 1202, 1203,
	1204, 1205, 1206, 1207, 1208, 1201, 124, 143, 142, 141,
	140, 3823, 138, 953, 139, 137, 136, 1069, 124, 3792,
	3830, 928, 3791, 3829, 135, 134, 133, 132, 45, 3816,
	3831, 46, 47, 48, 154, 3835, 153, 3765, 155, 157,
	159, 156, 161, 3833, 151, 149, 152, 150, 930, 148,
	60, 11, 106, 3480, 2114, 18, 25, 3481, 1737, 1738,
	1739, 1740, 4, 0, 1744, 1745, 1746, 1747, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1200, 1199,
	1209, 1210, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1201,
	0, 913, 1614, 914, 1200, 1199, 1209, 1210, 1202, 1203,
	1204, 1205, 1206, 1207, 1208, 1201, 0, 0, 0, 0,
	0, 952, 950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 0, 949, 0, 0, 0, 0, 1055, 0,
	0, 0, 0, 908, 924, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 929, 962, 0, 1077, 1081,
	1083, 1085, 1087, 1088, 1090, 0, 1095, 1091, 1092, 1093,
	1094, 0, 1072, 1073, 1074, 1075, 1053, 1054, 1078, 958,
	1056, 0, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1068, 1070, 1066, 1067, 1076, 0, 0, 0, 0,
	0, 886, 0, 1080, 1082, 1084, 1086, 1089, 0, 0,
	0, 0, 0, 0, 0, 959, 963, 0, 0, 0,
	0, 0, 0, 0, 3590, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 946, 0, 944, 948, 966,
	0, 1071, 0, 945, 942, 941, 0, 947, 932, 933,
	931, 934, 935, 936, 937, 0, 964, 0, 965, 0,
	1695, 0, 0, 0, 0, 0, 0, 0, 0, 960,
	961, 0, 910, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 0, 907, 906, 3634, 0, 0, 0, 0,
	3638, 3639, 0, 0, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 895, 0, 956, 0, 0, 1943,
	0, 0, 955, 0, 0, 0, 0, 0, 0, 0,
	0, 3659, 0, 0, 902, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 901, 0,
	0, 0, 900, 0, 0, 0, 0, 0, 887, 0,
	0, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2537,
	2538, 0, 124, 0, 891, 124, 124, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 954, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 911, 0, 1691, 0, 0, 0, 0, 1002, 1688,
	0, 124, 0, 1690, 1687, 1689, 1693, 1694, 0, 0,
	1002, 1692, 0, 0, 0, 3760, 3761, 892, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 184, 55,
	173, 146, 0, 0, 0, 0, 0, 0, 372, 0,
	497, 530, 519, 602, 485, 0, 174, 0, 0, 0,
	0, 0, 0, 165, 0, 312, 0, 175, 342, 534,
	516, 526, 517, 502, 503, 504, 511, 322, 505, 506,
	507, 477, 508, 478, 509, 510, 122, 533, 484, 403,
	356, 551, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 1079, 909, 0, 0, 178, 0, 0,
	206, 0, 0, 1218, 0, 0, 0, 285, 207, 479,
	598, 481, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 898, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1676, 1677, 1678, 1679, 1680, 1681,
	1682, 1683, 1684, 1685, 1686, 1698, 1699, 1700, 1701, 1702,
	1703, 1696, 1697, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 408, 425, 286, 399, 438,
	291, 406, 281, 371, 395, 0, 0, 277, 423, 405,
	353, 332, 333, 276, 0, 390, 310, 324, 307, 369,
	0, 422, 450, 306, 441, 0, 433, 279, 0, 432,
	368, 419, 424, 354, 348, 278, 421, 352, 347, 336,
	314, 466, 337, 338, 328, 380, 346, 381, 329, 358,
	357, 359, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 145, 171, 182, 172, 108,
	0, 592, 0, 0, 595, 0, 435, 0, 0, 199,
	0, 0, 0, 407, 0, 0, 339, 170, 164, 163,
	451, 0, 393, 374, 211, 0, 0, 391, 344, 420,
	382, 426, 409, 434, 387, 383, 270, 410, 309, 355,
	282, 284, 304, 311, 313, 315, 316, 364, 365, 377,
	398, 411, 412, 413, 308, 292, 392, 293, 326, 294,
	271, 300, 298, 301, 400, 302, 273, 378, 417, 0,
	321, 388, 351, 274, 350, 379, 416, 415, 283, 442,
	448, 449, 538, 0, 454, 571, 572, 573, 463, 468,
	469, 470, 472, 473, 474, 475, 539, 556, 523, 493,
	456, 547, 490, 494, 495, 559, 0, 0, 0, 447,
	340, 341, 0, 319, 267, 268, 430, 305, 370, 561,
	594, 486, 0, 548, 487, 496, 297, 520, 532, 531,
	366, 446, 202, 543, 546, 476, 212, 0, 540, 555,
	513, 554, 213, 376, 2379, 397, 552, 499, 0, 544,
	518, 0, 545, 514, 549, 0, 488, 0, 404, 428,
	440, 457, 460, 489, 574, 575, 576, 272, 459, 578,
	579, 580, 581, 582, 583, 584, 577, 431, 521, 498,
	524, 439, 501, 500, 0, 0, 535, 455, 536, 537,
	360, 361, 362, 363, 323, 562, 290, 458, 386, 120,
	522, 0, 0, 0, 0, 0, 0, 0, 1943, 527,
	528, 525, 210, 0, 585, 586, 0, 124, 452, 453,
	318, 325, 471, 327, 289, 375, 320, 437, 334, 0,
	464, 529, 465, 588, 591, 589, 590, 367, 330, 331,
	401, 335, 345, 389, 436, 373, 394, 287, 427, 402,
	349, 515, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	569, 568, 567, 566, 565, 564, 563, 0, 0, 512,
	414, 299, 261, 295, 296, 303, 385, 280, 418, 396,
	0, 269, 492, 343, 147, 384, 317, 557, 558, 52,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 262,
	225, 226, 227, 228, 229, 230, 231, 234, 235, 236,
	237, 238, 239, 240, 241, 560, 232, 233, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 0, 0, 1069, 263, 264, 265, 266, 0,
	0, 257, 258, 259, 260, 0, 0, 0, 443, 444,
	445, 467, 0, 429, 491, 214, 41, 200, 203, 205,
	204, 0, 53, 541, 553, 587, 5, 596, 597, 599,
	601, 600, 603, 125, 215, 482, 483, 216, 593, 184,
	55, 173, 146, 1913, 0, 0, 0, 0, 1874, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 175, 0,
	0, 0, 124, 0, 0, 0, 0, 0, 1915, 1883,
	0, 0, 124, 0, 0, 0, 0, 122, 1916, 1917,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 0, 1882, 1055, 0, 0, 0, 1045,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1890,
	0, 0, 0, 0, 0, 1077, 1081, 1083, 1085, 1087,
	1088, 1090, 0, 1095, 1091, 1092, 1093, 1094, 0, 1072,
	1073, 1074, 1075, 1053, 1054, 1078, 0, 1056, 0, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1068, 1070,
	1066, 1067, 1076, 0, 0, 0, 0, 0, 0, 0,
	1080, 1082, 1084, 1086, 1089, 128, 129, 0, 130, 131,
	0, 0, 0, 0, 0, 0, 0, 1906, 0, 0,
	0, 0, 0, 1943, 1943, 1943, 1943, 0, 0, 0,
	1023, 0, 0, 0, 0, 1943, 0, 0, 1071, 0,
	0, 0, 0, 684, 683, 690, 680, 0, 0, 0,
	0, 0, 0, 0, 0, 687, 688, 0, 689, 693,
	0, 0, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 0, 0, 145, 171, 182, 172,
	108, 0, 0, 0, 0, 0, 0, 0, 1873, 1875,
	1872, 0, 1869, 0, 0, 0, 0, 1894, 170, 164,
	163, 0, 1024, 0, 0, 61, 0, 0, 1900, 0,
	0, 0, 0, 0, 0, 0, 1885, 0, 1868, 0,
	0, 124, 0, 0, 0, 0, 124, 0, 1888, 1922,
	0, 0, 1889, 1891, 1893, 0, 1895, 1896, 1897, 1901,
	1902, 1903, 1905, 1908, 1909, 1910, 0, 124, 0, 0,
	0, 0, 0, 1898, 1907, 1899, 0, 1913, 124, 0,
	0, 0, 1874, 0, 0, 1877, 166, 167, 168, 0,
	0, 0, 0, 1018, 1013, 1008, 1012, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1914, 0, 0,
	0, 0, 1915, 1883, 0, 0, 0, 176, 0, 0,
	0, 1021, 1916, 1917, 0, 1011, 0, 0, 0, 0,
	0, 0, 0, 1870, 1871, 0, 0, 118, 0, 0,
	0, 169, 0, 119, 0, 0, 0, 0, 1882, 0,
	0, 1911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1890, 0, 0, 0, 0, 1887, 0,
	0, 0, 0, 0, 0, 1886, 1019, 0, 0, 0,
	675, 677, 676, 1022, 0, 0, 0, 0, 0, 0,
	682, 684, 683, 690, 680, 0, 0, 0, 0, 1904,
	120, 0, 686, 687, 688, 1009, 689, 693, 1892, 701,
	674, 0, 0, 54, 0, 0, 679, 0, 0, 0,
	698, 1919, 1918, 0, 0, 0, 0, 0, 1020, 0,
	0, 1906, 0, 0, 0, 0, 1002, 0, 124, 0,
	1079, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	1943, 0, 0, 0, 0, 0, 0, 1212, 0, 1216,
	0, 0, 56, 702, 0, 0, 704, 0, 1010, 124,
	0, 703, 0, 0, 1879, 1213, 1215, 1211, 0, 1214,
	1200, 1199, 1209, 1210, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1201, 0, 0, 0, 0, 0, 179, 180, 0,
	181, 0, 1873, 2689, 1872, 147, 2688, 0, 0, 0,
	52, 1894, 0, 0, 0, 0, 1921, 0, 0, 1920,
	0, 0, 1900, 0, 0, 681, 685, 691, 0, 692,
	694, 0, 0, 695, 696, 697, 0, 0, 699, 700,
	0, 0, 1888, 1922, 0, 1017, 1889, 1891, 1893, 0,
	1895, 1896, 1897, 1901, 1902, 1903, 1905, 1908, 1909, 1910,
	0, 0, 0, 0, 0, 0, 0, 1898, 1907, 1899,
	0, 0, 0, 0, 0, 0, 121, 41, 0, 1877,
	0, 1014, 0, 53, 1015, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 126, 0, 0, 127, 0,
	0, 1914, 0, 0, 0, 0, 0, 0, 675, 677,
	676, 0, 0, 0, 0, 0, 0, 0, 682, 0,
	0, 0, 0, 0, 0, 0, 0, 1870, 1871, 0,
	686, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	0, 0, 0, 0, 679, 1911, 0, 0, 669, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1887, 0, 0, 0, 0, 0, 0, 1886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1904, 678, 0, 0, 0, 0, 0,
	0, 0, 1892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1919, 1918, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 681, 685, 691, 0, 692, 694, 0,
	0, 695, 696, 697, 0, 124, 699, 700, 1879, 0,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1921, 0, 0, 1920, 773, 0, 0, 0, 0, 0,
	0, 0, 1943, 372, 0, 497, 530, 519, 602, 485,
	0, 0, 0, 0, 0, 0, 726, 0, 0, 0,
	312, 0, 0, 342, 534, 516, 526, 517, 502, 503,
	504, 511, 322, 505, 506, 507, 477, 508, 478, 509,
	510, 764, 533, 484, 403, 356, 551, 550, 0, 0,
	831, 839, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 754, 808, 807, 741, 751,
	0, 0, 285, 207, 479, 598, 481, 480, 742, 0,
	743, 747, 750, 746, 744, 745, 0, 823, 0, 0,
	0, 0, 0, 0, 710, 722, 0, 727, 0, 0,
	0, 0, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 719, 720, 0, 0, 0, 0, 774, 0, 721,
	0, 0, 769, 748, 752, 0, 0, 0, 0, 275,
	408, 425, 286, 399, 438, 291, 406, 281, 371, 395,
	0, 0, 277, 423, 405, 353, 332, 333, 276, 0,
	390, 310, 324, 307, 369, 749, 772, 776, 306, 845,
	770, 433, 279, 0, 432, 368, 419, 424, 354, 348,
	278, 421, 352, 347, 336, 314, 846, 337, 338, 328,
	380, 346, 381, 329, 358, 357, 359, 124, 0, 0,
	0, 0, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 767, 0, 595,
	0, 435, 0, 0, 829, 0, 0, 0, 407, 0,
	0, 339, 0, 0, 0, 771, 0, 393, 374, 842,
	0, 0, 391, 344, 420, 382, 426, 409, 434, 387,
	383, 270, 410, 309, 355, 282, 284, 304, 311, 313,
	315, 316, 364, 365, 377, 398, 411, 412, 413, 308,
	292, 392, 293, 326, 294, 271, 300, 298, 301, 400,
	302, 273, 378, 417, 0, 321, 388, 351, 274, 350,
	379, 416, 415, 283, 442, 448, 449, 538, 0, 454,
	618, 619, 620, 463, 468, 469, 470, 472, 473, 474,
	475, 539, 556, 523, 493, 456, 547, 490, 494, 495,
	559, 1719, 1718, 1720, 447, 340, 341, 0, 319, 267,
	268, 613, 827, 370, 561, 594, 486, 0, 841, 822,
	824, 825, 828, 832, 833, 834, 835, 836, 838, 840,
	844, 612, 0, 540, 555, 616, 554, 609, 376, 0,
	397, 552, 499, 0, 544, 518, 0, 545, 514, 549,
	0, 488, 124, 404, 428, 440, 457, 460, 489, 574,
	575, 576, 272, 459, 578, 579, 580, 581, 582, 583,
	584, 577, 843, 521, 498, 524, 439, 501, 500, 0,
	0, 535, 775, 536, 537, 360, 361, 362, 363, 830,
	562, 290, 458, 386, 0, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 527, 528, 525, 621, 0, 585,
	586, 0, 0, 452, 453, 318, 325, 471, 327, 289,
	375, 320, 437, 334, 0, 464, 529, 465, 588, 591,
	589, 590, 367, 330, 331, 401, 335, 345, 389, 436,
	373, 394, 287, 427, 402, 349, 515, 542, 852, 826,
	851, 853, 854, 850, 855, 856, 837, 731, 0, 782,
	848, 847, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 570, 569, 568, 567, 566, 565,
	564, 563, 0, 0, 512, 414, 299, 261, 295, 296,
	303, 610, 607, 418, 611, 0, 269, 492, 343, 0,
	384, 317, 557, 558, 0, 0, 815, 789, 790, 791,
	728, 792, 786, 787, 729, 788, 816, 780, 812, 813,
	756, 783, 793, 811, 794, 814, 817, 818, 857, 858,
	800, 784, 233, 859, 797, 819, 810, 809, 795, 781,
	820, 821, 763, 758, 798, 799, 785, 803, 804, 805,
	730, 777, 778, 779, 801, 802, 759, 760, 761, 762,
	0, 0, 0, 443, 444, 445, 467, 0, 429, 491,
	608, 0, 0, 0, 0, 0, 0, 0, 541, 553,
	587, 0, 596, 597, 599, 601, 806, 603, 773, 614,
	482, 483, 615, 593, 0, 723, 0, 372, 0, 497,
	530, 519, 602, 485, 0, 0, 0, 0, 0, 0,
	726, 0, 0, 0, 312, 1769, 0, 342, 534, 516,
	526, 517, 502, 503, 504, 511, 322, 505, 506, 507,
	477, 508, 478, 509, 510, 764, 533, 484, 403, 356,
	551, 550, 0, 0, 831, 839, 0, 0, 0, 0,
	0, 0, 0, 1967, 0, 0, 718, 0, 0, 754,
	808, 807, 741, 751, 0, 0, 285, 207, 479, 598,
	481, 480, 742, 0, 743, 747, 750, 746, 744, 745,
	0, 823, 0, 0, 0, 0, 0, 0, 710, 722,
	0, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 719, 720, 0, 0, 0,
	0, 774, 0, 721, 0, 0, 1968, 748, 752, 0,
	0, 0, 0, 275, 408, 425, 286, 399, 438, 291,
	406, 281, 371, 395, 0, 0, 277, 423, 405, 353,
	332, 333, 276, 0, 390, 310, 324, 307, 369, 749,
	772, 776, 306, 845, 770, 433, 279, 0, 432, 368,
	419, 424, 354, 348, 278, 421, 352, 347, 336, 314,
	846, 337, 338, 328, 380, 346, 381, 329, 358, 357,
	359, 0, 0, 0, 0, 0, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 767, 0, 595, 0, 435, 0, 0, 829, 0,
	0, 0, 407, 0, 0, 339, 0, 0, 0, 771,
	0, 393, 374, 842, 0, 0, 391, 344, 420, 382,
	426, 409, 434, 387, 383, 270, 410, 309, 355, 282,
	284, 304, 311, 313, 315, 316, 364, 365, 377, 398,
	411, 412, 413, 308, 292, 392, 293, 326, 294, 271,
	300, 298, 301, 400, 302, 273, 378, 417, 0, 321,
	388, 351, 274, 350, 379, 416, 415, 283, 442, 448,
	449, 538, 0, 454, 618, 619, 620, 463, 468, 469,
	470, 472, 473, 474, 475, 539, 556, 523, 493, 456,
	547, 490, 494, 495, 559, 0, 0, 0, 447, 340,
	341, 0, 319, 267, 268, 613, 827, 370, 561, 594,
	486, 0, 841, 822, 824, 825, 828, 832, 833, 834,
	835, 836, 838, 840, 844, 612, 0, 540, 555, 616,
	554, 609, 376, 0, 397, 552, 499, 0, 544, 518,
	0, 545, 514, 549, 0, 488, 0, 404, 428, 440,
	457, 460, 489, 574, 575, 576, 272, 459, 578, 579,
	580, 581, 582, 583, 584, 577, 843, 521, 498, 524,
	439, 501, 500, 0, 0, 535, 775, 536, 537, 360,
	361, 362, 363, 830, 562, 290, 458, 386, 0, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 528,
	525, 621, 0, 585, 586, 0, 0, 452, 453, 318,
	325, 471, 327, 289, 375, 320, 437, 334, 0, 464,
	529, 465, 588, 591, 589, 590, 367, 330, 331, 401,
	335, 345, 389, 436, 373, 394, 287, 427, 402, 349,
	515, 542, 852, 826, 851, 853, 854, 850, 855, 856,
	837, 731, 0, 782, 848, 847, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 569,
	568, 567, 566, 565, 564, 563, 0, 0, 512, 414,
	299, 261, 295, 296, 303, 610, 607, 418, 611, 0,
	269, 492, 343, 0, 384, 317, 557, 558, 0, 0,
	815, 789, 790, 791, 728, 792, 786, 787, 729, 788,
	816, 780, 812, 813, 756, 783, 793, 811, 794, 814,
	817, 818, 857, 858, 800, 784, 233, 859, 797, 819,
	810, 809, 795, 781, 820, 821, 763, 758, 798, 799,
	785, 803, 804, 805, 730, 777, 778, 779, 801, 802,
	759, 760, 761, 762, 0, 0, 0, 443, 444, 445,
	467, 0, 429, 491, 608, 0, 0, 0, 0, 0,
	0, 0, 541, 553, 587, 0, 596, 597, 599, 601,
	806, 603, 0, 614, 482, 483, 615, 593, 0, 723,
	184, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	372, 0, 497, 530, 519, 602, 485, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 312, 0, 0,
	342, 534, 516, 526, 517, 502, 503, 504, 511, 322,
	505, 506, 507, 477, 508, 478, 509, 510, 1221, 533,
	484, 403, 356, 551, 550, 0, 0, 831, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 754, 808, 807, 741, 751, 0, 0, 285,
	207, 479, 598, 481, 480, 742, 0, 743, 747, 750,
	746, 744, 745, 0, 823, 0, 0, 0, 0, 0,
	0, 710, 722, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 720,
	0, 0, 0, 0, 774, 0, 721, 0, 0, 769,
	748, 752, 0, 0, 0, 0, 275, 408, 425, 286,
	399, 438, 291, 406, 281, 371, 395, 0, 0, 277,
	423, 405, 353, 332, 333, 276, 0, 390, 310, 324,
	307, 369, 749, 772, 776, 306, 845, 770, 433, 279,
	0, 432, 368, 419, 424, 354, 348, 278, 421, 352,
	347, 336, 314, 846, 337, 338, 328, 380, 346, 381,
	329, 358, 357, 359, 0, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 767, 0, 595, 0, 435, 0,
	0, 829, 0, 0, 0, 407, 0, 0, 339, 0,
	0, 0, 771, 0, 393, 374, 842, 0, 0, 391,
	344, 420, 382, 426, 409, 434, 387, 383, 270, 410,
	309, 355, 282, 284, 304, 311, 313, 315, 316, 364,
	365, 377, 398, 411, 412, 413, 308, 292, 392, 293,
	326, 294, 271, 300, 298, 301, 400, 302, 273, 378,
	417, 0, 321, 388, 351, 274, 350, 379, 416, 415,
	283, 442, 448, 449, 538, 0, 454, 618, 619, 620,
	463, 468, 469, 470, 472, 473, 474, 475, 539, 556,
	523, 493, 456, 547, 490, 494, 495, 559, 0, 0,
	0, 447, 340, 341, 0, 319, 267, 268, 613, 827,
	370, 561, 594, 486, 0, 841, 822, 824, 825, 828,
	832, 833, 834, 835, 836, 838, 840, 844, 612, 0,
	540, 555, 616, 554, 609, 376, 0, 397, 552, 499,
	0, 544, 518, 0, 545, 514, 549, 0, 488, 0,
	404, 428, 440, 457, 460, 489, 574, 575, 576, 272,
	459, 578, 579, 580, 581, 582, 583, 584, 577, 843,
	521, 498, 524, 439, 501, 500, 0, 0, 535, 775,
	536, 537, 360, 361, 362, 363, 830, 562, 290, 458,
	386, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 525, 621, 0, 585, 586, 0, 0,
	452, 453, 318, 325, 471, 327, 289, 375, 320, 437,
	334, 0, 464, 529, 465, 588, 591, 589, 590, 367,
	330, 331, 401, 335, 345, 389, 436, 373, 394, 287,
	427, 402, 349, 515, 542, 852, 826, 851, 853, 854,
	850, 855, 856, 837, 731, 0, 782, 848, 847, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 569, 568, 567, 566, 565, 564, 563, 0,
	0, 512, 414, 299, 261, 295, 296, 303, 610, 607,
	418, 611, 0, 269, 492, 343, 147, 384, 317, 557,
	558, 0, 0, 815, 789, 790, 791, 728, 792, 786,
	787, 729, 788, 816, 780, 812, 813, 756, 783, 793,
	811, 794, 814, 817, 818, 857, 858, 800, 784, 233,
	859, 797, 819, 810, 809, 795, 781, 820, 821, 763,
	758, 798, 799, 785, 803, 804, 805, 730, 777, 778,
	779, 801, 802, 759, 760, 761, 762, 0, 0, 0,
	443, 444, 445, 467, 0, 429, 491, 608, 0, 0,
	0, 0, 0, 0, 0, 541, 553, 587, 0, 596,
	597, 599, 601, 806, 603, 773, 614, 482, 483, 615,
	593, 0, 723, 0, 372, 0, 497, 530, 519, 602,
	485, 0, 0, 0, 0, 0, 0, 726, 0, 0,
	0, 312, 3832, 0, 342, 534, 516, 526, 517, 502,
	503, 504, 511, 322, 505, 506, 507, 477, 508, 478,
	509, 510, 764, 533, 484, 403, 356, 551, 550, 0,
	0, 831, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 754, 808, 807, 741,
	751, 0, 0, 285, 207, 479, 598, 481, 480, 742,
	0, 743, 747, 750, 746, 744, 745, 0, 823, 0,
	0, 0, 0, 0, 0, 710, 722, 0, 727, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 719, 720, 0, 0, 0, 0, 774, 0,
	721, 0, 0, 769, 748, 752, 0, 0, 0, 0,
	275, 408, 425, 286, 399, 438, 291, 406, 281, 371,
	395, 0, 0, 277, 423, 405, 353, 332, 333, 276,
	0, 390, 310, 324, 307, 369, 749, 772, 776, 306,
	845, 770, 433, 279, 0, 432, 368, 419, 424, 354,
	348, 278, 421, 352, 347, 336, 314, 846, 337, 338,
	328, 380, 346, 381, 329, 358, 357, 359, 0, 0,
	0, 0, 0, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 767, 0,
	595, 0, 435, 0, 0, 829, 0, 0, 0, 407,
	0, 0, 339, 0, 0, 0, 771, 0, 393, 374,
	842, 0, 0, 391, 344, 420, 382, 426, 409, 434,
	387, 383, 270, 410, 309, 355, 282, 284, 304, 311,
	313, 315, 316, 364, 365, 377, 398, 411, 412, 413,
	308, 292, 392, 293, 326, 294, 271, 300, 298, 301,
	400, 302, 273, 378, 417, 0, 321, 388, 351, 274,
	350, 379, 416, 415, 283, 442, 448, 449, 538, 0,
	454, 618, 619, 620, 463, 468, 469, 470, 472, 473,
	474, 475, 539, 556, 523, 493, 456, 547, 490, 494,
	495, 559, 0, 0, 0, 447, 340, 341, 0, 319,
	267, 268, 613, 827, 370, 561, 594, 486, 0, 841,
	822, 824, 825, 828, 832, 833, 834, 835, 836, 838,
	840, 844, 612, 0, 540, 555, 616, 554, 609, 376,
	0, 397, 552, 499, 0, 544, 518, 0, 545, 514,
	549, 0, 488, 0, 404, 428, 440, 457, 460, 489,
	574, 575, 576, 272, 459, 578, 579, 580, 581, 582,
	583, 584, 577, 843, 521, 498, 524, 439, 501, 500,
	0, 0, 535, 775, 536, 537, 360, 361, 362, 363,
	830, 562, 290, 458, 386, 0, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 527, 528, 525, 621, 0,
	585, 586, 0, 0, 452, 453, 318, 325, 471, 327,
	289, 375, 320, 437, 334, 0, 464, 529, 465, 588,
	591, 589, 590, 367, 330, 331, 401, 335, 345, 389,
	436, 373, 394, 287, 427, 402, 349, 515, 542, 852,
	826, 851, 853, 854, 850, 855, 856, 837, 731, 0,
	782, 848, 847, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 569, 568, 567, 566,
	565, 564, 563, 0, 0, 512, 414, 299, 261, 295,
	296, 303, 610, 607, 418, 611, 0, 269, 492, 343,
	0, 384, 317, 557, 558, 0, 0, 815, 789, 790,
	791, 728, 792, 786, 787, 729, 788, 816, 780, 812,
	813, 756, 783, 793, 811, 794, 814, 817, 818, 857,
	858, 800, 784, 233, 859, 797, 819, 810, 809, 795,
	781, 820, 821, 763, 758, 798, 799, 785, 803, 804,
	805, 730, 777, 778, 779, 801, 802, 759, 760, 761,
	762, 0, 0, 0, 443, 444, 445, 467, 0, 429,
	491, 608, 0, 0, 0, 0, 0, 0, 0, 541,
	553, 587, 0, 596, 597, 599, 601, 806, 603, 773,
	614, 482, 483, 615, 593, 0, 723, 0, 372, 0,
	497, 530, 519, 602, 485, 0, 0, 0, 0, 0,
	0, 726, 0, 0, 0, 312, 0, 0, 342, 534,
	516, 526, 517, 502, 503, 504, 511, 322, 505, 506,
	507, 477, 508, 478, 509, 510, 764, 533, 484, 403,
	356, 551, 550, 0, 0, 831, 839, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	754, 808, 807, 741, 751, 0, 0, 285, 207, 479,
	598, 481, 480, 742, 0, 743, 747, 750, 746, 744,
	745, 0, 823, 0, 0, 0, 0, 0, 0, 710,
	722, 0, 727, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 719, 720, 0, 0,
	0, 0, 774, 0, 721, 0, 0, 769, 748, 752,
	0, 0, 0, 0, 275, 408, 425, 286, 399, 438,
	291, 406, 281, 371, 395, 0, 0, 277, 423, 405,
	353, 332, 333, 276, 0, 390, 310, 324, 307, 369,
	749, 772, 776, 306, 845, 770, 433, 279, 0, 432,
	368, 419, 424, 354, 348, 278, 421, 352, 347, 336,
	314, 846, 337, 338, 328, 380, 346, 381, 329, 358,
	357, 359, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 767, 0, 595, 0, 435, 0, 0, 829,
	0, 0, 0, 407, 0, 0, 339, 0, 0, 0,
	771, 0, 393, 374, 842, 3727, 0, 391, 344, 420,
	382, 426, 409, 434, 387, 383, 270, 410, 309, 355,
	282, 284, 304, 311, 313, 315, 316, 364, 365, 377,
	398, 411, 412, 413, 308, 292, 392, 293, 326, 294,
	271, 300, 298, 301, 400, 302, 273, 378, 417, 0,
	321, 388, 351, 274, 350, 379, 416, 415, 283, 442,
	448, 449, 538, 0, 454, 618, 619, 620, 463, 468,
	469, 470, 472, 473, 474, 475, 539, 556, 523, 493,
	456, 547, 490, 494, 495, 559, 0, 0, 0, 447,
	340, 341, 0, 319, 267, 268, 613, 827, 370, 561,
	594, 486, 0, 841, 822, 824, 825, 828, 832, 833,
	834, 835, 836, 838, 840, 844, 612, 0, 540, 555,
	616, 554, 609, 376, 0, 397, 552, 499, 0, 544,
	518, 0, 545, 514, 549, 0, 488, 0, 404, 428,
	440, 457, 460, 489, 574, 575, 576, 272, 459, 578,
	579, 580, 581, 582, 583, 584, 577, 843, 521, 498,
	524, 439, 501, 500, 0, 0, 535, 775, 536, 537,
	360, 361, 362, 363, 830, 562, 290, 458, 386, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	528, 525, 621, 0, 585, 586, 0, 0, 452, 453,
	318, 325, 471, 327, 289, 375, 320, 437, 334, 0,
	464, 529, 465, 588, 591, 589, 590, 367, 330, 331,
	401, 335, 345, 389, 436, 373, 394, 287, 427, 402,
	349, 515, 542, 852, 826, 851, 853, 854, 850, 855,
	856, 837, 731, 0, 782, 848, 847, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	569, 568, 567, 566, 565, 564, 563, 0, 0, 512,
	414, 299, 261, 295, 296, 303, 610, 607, 418, 611,
	0, 269, 492, 343, 0, 384, 317, 557, 558, 0,
	0, 815, 789, 790, 791, 728, 792, 786, 787, 729,
	788, 816, 780, 812, 813, 756, 783, 793, 811, 794,
	814, 817, 818, 857, 858, 800, 784, 233, 859, 797,
	819, 810, 809, 795, 781, 820, 821, 763, 758, 798,
	799, 785, 803, 804, 805, 730, 777, 778, 779, 801,
	802, 759, 760, 761, 762, 0, 0, 0, 443, 444,
	445, 467, 0, 429, 491, 608, 0, 0, 0, 0,
	0, 0, 0, 541, 553, 587, 0, 596, 597, 599,
	601, 806, 603, 773, 614, 482, 483, 615, 593, 0,
	723, 0, 372, 0, 497, 530, 519, 602, 485, 0,
	0, 0, 0, 0, 0, 726, 0, 0, 0, 312,
	1769, 0, 342, 534, 516, 526, 517, 502, 503, 504,
	511, 322, 505, 506, 507, 477, 508, 478, 509, 510,
	764, 533, 484, 403, 356, 551, 550, 0, 0, 831,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 754, 808, 807, 741, 751, 0,
	0, 285, 207, 479, 598, 481, 480, 742, 0, 743,
	747, 750, 746, 744, 745, 0, 823, 0, 0, 0,
	0, 0, 0, 710, 722, 0, 727, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 720, 0, 0, 0, 0, 774, 0, 721, 0,
	0, 769, 748, 752, 0, 0, 0, 0, 275, 408,
	425, 286, 399, 438, 291, 406, 281, 371, 395, 0,
	0, 277, 423, 405, 353, 332, 333, 276, 0, 390,
	310, 324, 307, 369, 749, 772, 776, 306, 845, 770,
	433, 279, 0, 432, 368, 419, 424, 354, 348, 278,
	421, 352, 347, 336, 314, 846, 337, 338, 328, 380,
	346, 381, 329, 358, 357, 359, 0, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 767, 0, 595, 0,
	435, 0, 0, 829, 0, 0, 0, 407, 0, 0,
	339, 0, 0, 0, 771, 0, 393, 374, 842, 0,
	0, 391, 344, 420, 382, 426, 409, 434, 387, 383,
	270, 410, 309, 355, 282, 284, 304, 311, 313, 315,
	316, 364, 365, 377, 398, 411, 412, 413, 308, 292,
	392, 293, 326, 294, 271, 300, 298, 301, 400, 302,
	273, 378, 417, 0, 321, 388, 351, 274, 350, 379,
	416, 415, 283, 442, 448, 449, 538, 0, 454, 618,
	619, 620, 463, 468, 469, 470, 472, 473, 474, 475,
	539, 556, 523, 493, 456, 547, 490, 494, 495, 559,
	0, 0, 0, 447, 340, 341, 0, 319, 267, 268,
	613, 827, 370, 561, 594, 486, 0, 841, 822, 824,
	825, 828, 832, 833, 834, 835, 836, 838, 840, 844,
	612, 0, 540, 555, 616, 554, 609, 376, 0, 397,
	552, 499, 0, 544, 518, 0, 545, 514, 549, 0,
	488, 0, 404, 428, 440, 457, 460, 489, 574, 575,
	576, 272, 459, 578, 579, 580, 581, 582, 583, 584,
	577, 843, 521, 498, 524, 439, 501, 500, 0, 0,
	535, 775, 536, 537, 360, 361, 362, 363, 830, 562,
	290, 458, 386, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 528, 525, 621, 0, 585, 586,
	0, 0, 452, 453, 318, 325, 471, 327, 289, 375,
	320, 437, 334, 0, 464, 529, 465, 588, 591, 589,
	590, 367, 330, 331, 401, 335, 345, 389, 436, 373,
	394, 287, 427, 402, 349, 515, 542, 852, 826, 851,
	853, 854, 850, 855, 856, 837, 731, 0, 782, 848,
	847, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570, 569, 568, 567, 566, 565, 564,
	563, 0, 0, 512, 414, 299, 261, 295, 296, 303,
	610, 607, 418, 611, 0, 269, 492, 343, 0, 384,
	317, 557, 558, 0, 0, 815, 789, 790, 791, 728,
	792, 786, 787, 729, 788, 816, 780, 812, 813, 756,
	783, 793, 811, 794, 814, 817, 818, 857, 858, 800,
	784, 233, 859, 797, 819, 810, 809, 795, 781, 820,
	821, 763, 758, 798, 799, 785, 803, 804, 805, 730,
	777, 778, 779, 801, 802, 759, 760, 761, 762, 0,
	0, 0, 443, 444, 445, 467, 0, 429, 491, 608,
	0, 0, 0, 0, 0, 0, 0, 541, 553, 587,
	0, 596, 597, 599, 601, 806, 603, 773, 614, 482,
	483, 615, 593, 0, 723, 0, 372, 0, 497, 530,
	519, 602, 485, 0, 0, 0, 0, 0, 0, 726,
	0, 0, 0, 312, 0, 0, 342, 534, 516, 526,
	517, 502, 503, 504, 511, 322, 505, 506, 507, 477,
	508, 478, 509, 510, 764, 533, 484, 403, 356, 551,
	550, 0, 0, 831, 839, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 718, 0, 0, 754, 808,
	807, 741, 751, 0, 0, 285, 207, 479, 598, 481,
	480, 742, 0, 743, 747, 750, 746, 744, 745, 0,
	823, 0, 0, 0, 0, 0, 0, 710, 722, 0,
	727, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 719, 720, 1491, 0, 0, 0,
	774, 0, 721, 0, 0, 769, 748, 752, 0, 0,
	0, 0, 275, 408, 425, 286, 399, 438, 291, 406,
	281, 371, 395, 0, 0, 277, 423, 405, 353, 332,
	333, 276, 0, 390, 310, 324, 307, 369, 749, 772,
	776, 306, 845, 770, 433, 279, 0, 432, 368, 419,
	424, 354, 348, 278, 421, 352, 347, 336, 314, 846,
	337, 338, 328, 380, 346, 381, 329, 358, 357, 359,
	0, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	767, 0, 595, 0, 435, 0, 0, 829, 0, 0,
	0, 407, 0, 0, 339, 0, 0, 0, 771, 0,
	393, 374, 842, 0, 0, 391, 344, 420, 382, 426,
	409, 434, 387, 383, 270, 410, 309, 355, 282, 284,
	304, 311, 313, 315, 316, 364, 365, 377, 398, 411,
	412, 413, 308, 292, 392, 293, 326, 294, 271, 300,
	298, 301, 400, 302, 273, 378, 417, 0, 321, 388,
	351, 274, 350, 379, 416, 415, 283, 442, 448, 449,
	538, 0, 454, 618, 619, 620, 463, 468, 469, 470,
	472, 473, 474, 475, 539, 556, 523, 493, 456, 547,
	490, 494, 495, 559, 0, 0, 0, 447, 340, 341,
	0, 319, 267, 268, 613, 827, 370, 561, 594, 486,
	0, 841, 822, 824, 825, 828, 832, 833, 834, 835,
	836, 838, 840, 844, 612, 0, 540, 555, 616, 554,
	609, 376, 0, 397, 552, 499, 0, 544, 518, 0,
	545, 514, 549, 0, 488, 0, 404, 428, 440, 457,
	460, 489, 574, 575, 576, 272, 459, 578, 579, 580,
	581, 582, 583, 584, 577, 843, 521, 498, 524, 439,
	501, 500, 0, 0, 535, 775, 536, 537, 360, 361,
	362, 363, 830, 562, 290, 458, 386, 0, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 528, 525,
	621, 0, 585, 586, 0, 0, 452, 453, 318, 325,
	471, 327, 289, 375, 320, 437, 334, 0, 464, 529,
	465, 588, 591, 589, 590, 367, 330, 331, 401, 335,
	345, 389, 436, 373, 394, 287, 427, 402, 349, 515,
	542, 852, 826, 851, 853, 854, 850, 855, 856, 837,
	731, 0, 782, 848, 847, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 569, 568,
	567, 566, 565, 564, 563, 0, 0, 512, 414, 299,
	261, 295, 296, 303, 610, 607, 418, 611, 0, 269,
	492, 343, 0, 384, 317, 557, 558, 0, 0, 815,
	789, 790, 791, 728, 792, 786, 787, 729, 788, 816,
	780, 812, 813, 756, 783, 793, 811, 794, 814, 817,
	818, 857, 858, 800, 784, 233, 859, 797, 819, 810,
	809, 795, 781, 820, 821, 763, 758, 798, 799, 785,
	803, 804, 805, 730, 777, 778, 779, 801, 802, 759,
	760, 761, 762, 0, 0, 0, 443, 444, 445, 467,
	0, 429, 491, 608, 0, 0, 0, 0, 0, 0,
	0, 541, 553, 587, 0, 596, 597, 599, 601, 806,
	603, 0, 614, 482, 483, 615, 593, 773, 723, 0,
	2138, 0, 0, 0, 0, 0, 372, 0, 497, 530,
	519, 602, 485, 0, 0, 0, 0, 0, 0, 726,
	0, 0, 0, 312, 0, 0, 342, 534, 516, 526,
	517, 502, 503, 504, 511, 322, 505, 506, 507, 477,
	508, 478, 509, 510, 764, 533, 484, 403, 356, 551,
	550, 0, 0, 831, 839, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 718, 0, 0, 754, 808,
	807, 741, 751, 0, 0, 285, 207, 479, 598, 481,
	480, 742, 0, 743, 747, 750, 746, 744, 745, 0,
	823, 0, 0, 0, 0, 0, 0, 710, 722, 0,
	727, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 719, 720, 0, 0, 0, 0,
	774, 0, 721, 0, 0, 769, 748, 752, 0, 0,
	0, 0, 275, 408, 425, 286, 399, 438, 291, 406,
	281, 371, 395, 0, 0, 277, 423, 405, 353, 332,
	333, 276, 0, 390, 310, 324, 307, 369, 749, 772,
	776, 306, 845, 770, 433, 279, 0, 432, 368, 419,
	424, 354, 348, 278, 421, 352, 347, 336, 314, 846,
	337, 338, 328, 380, 346, 381, 329, 358, 357, 359,
	0, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	767, 0, 595, 0, 435, 0, 0, 829, 0, 0,
	0, 407, 0, 0, 339, 0, 0, 0, 771, 0,
	393, 374, 842, 0, 0, 391, 344, 420, 382, 426,
	409, 434, 387, 383, 270, 410, 309, 355, 282, 284,
	304, 311, 313, 315, 316, 364, 365, 377, 398, 411,
	412, 413, 308, 292, 392, 293, 326, 294, 271, 300,
	298, 301, 400, 302, 273, 378, 417, 0, 321, 388,
	351, 274, 350, 379, 416, 415, 283, 442, 448, 449,
	538, 0, 454, 618, 619, 620, 463, 468, 469, 470,
	472, 473, 474, 475, 539, 556, 523, 493, 456, 547,
	490, 494, 495, 559, 0, 0, 0, 447, 340, 341,
	0, 319, 267, 268, 613, 827, 370, 561, 594, 486,
	0, 841, 822, 824, 825, 828, 832, 833, 834, 835,
	836, 838, 840, 844, 612, 0, 540, 555, 616, 554,
	609, 376, 0, 397, 552, 499, 0, 544, 518, 0,
	545, 514, 549, 0, 488, 0, 404, 428, 440, 457,
	460, 489, 574, 575, 576, 272, 459, 578, 579, 580,
	581, 582, 583, 584, 577, 843, 521, 498, 524, 439,
	501, 500, 0, 0, 535, 775, 536, 537, 360, 361,
	362, 363, 830, 562, 290, 458, 386, 0, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 528, 525,
	621, 0, 585, 586, 0, 0, 452, 453, 318, 325,
	471, 327, 289, 375, 320, 437, 334, 0, 464, 529,
	465, 588, 591, 589, 590, 367, 330, 331, 401, 335,
	345, 389, 436, 373, 394, 287, 427, 402, 349, 515,
	542, 852, 826, 851, 853, 854, 850, 855, 856, 837,
	731, 0, 782, 848, 847, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 569, 568,
	567, 566, 565, 564, 563, 0, 0, 512, 414, 299,
	261, 295, 296, 303, 610, 607, 418, 611, 0, 269,
	492, 343, 0, 384, 317, 557, 558, 0, 0, 815,
	789, 790, 791, 728, 792, 786, 787, 729, 788, 816,
	780, 812, 813, 756, 783, 793, 811, 794, 814, 817,
	818, 857, 858, 800, 784, 233, 859, 797, 819, 810,
	809, 795, 781, 820, 821, 763, 758, 798, 799, 785,
	803, 804, 805, 730, 777, 778, 779, 801, 802, 759,
	760, 761, 762, 0, 0, 0, 443, 444, 445, 467,
	0, 429, 491, 608, 0, 0, 0, 0, 0, 0,
	0, 541, 553, 587, 0, 596, 597, 599, 601, 806,
	603, 773, 614, 482, 483, 615, 593, 0, 723, 0,
	372, 0, 497, 530, 519, 602, 485, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 312, 0, 0,
	342, 534, 516, 526, 517, 502, 503, 504, 511, 322,
	505, 506, 507, 477, 508, 478, 509, 510, 764, 533,
	484, 403, 356, 551, 550, 0, 0, 831, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 754, 808, 807, 741, 751, 0, 0, 285,
	207, 479, 598, 481, 480, 742, 0, 743, 747, 750,
	746, 744, 745, 0, 823, 0, 0, 0, 0, 0,
	0, 710, 722, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 720,
	1762, 0, 0, 0, 774, 0, 721, 0, 0, 769,
	748, 752, 0, 0, 0, 0, 275, 408, 425, 286,
	399, 438, 291, 406, 281, 371, 395, 0, 0, 277,
	423, 405, 353, 332, 333, 276, 0, 390, 310, 324,
	307, 369, 749, 772, 776, 306, 845, 770, 433, 279,
	0, 432, 368, 419, 424, 354, 348, 278, 421, 352,
	347, 336, 314, 846, 337, 338, 328, 380, 346, 381,
	329, 358, 357, 359, 0, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 767, 0, 595, 0, 435, 0,
	0, 829, 0, 0, 0, 407, 0, 0, 339, 0,
	0, 0, 771, 0, 393, 374, 842, 0, 0, 391,
	344, 420, 382, 426, 409, 434, 387, 383, 270, 410,
	309, 355, 282, 284, 304, 311, 313, 315, 316, 364,
	365, 377, 398, 411, 412, 413, 308, 292, 392, 293,
	326, 294, 271, 300, 298, 301, 400, 302, 273, 378,
	417, 0, 321, 388, 351, 274, 350, 379, 416, 415,
	283, 442, 448, 449, 538, 0, 454, 618, 619, 620,
	463, 468, 469, 470, 472, 473, 474, 475, 539, 556,
	523, 493, 456, 547, 490, 494, 495, 559, 0, 0,
	0, 447, 340, 341, 0, 319, 267, 268, 613, 827,
	370, 561, 594, 486, 0, 841, 822, 824, 825, 828,
	832, 833, 834, 835, 836, 838, 840, 844, 612, 0,
	540, 555, 616, 554, 609, 376, 0, 397, 552, 499,
	0, 544, 518, 0, 545, 514, 549, 0, 488, 0,
	404, 428, 440, 457, 460, 489, 574, 575, 576, 272,
	459, 578, 579, 580, 581, 582, 583, 584, 577, 843,
	521, 498, 524, 439, 501, 500, 0, 0, 535, 775,
	536, 537, 360, 361, 362, 363, 830, 562, 290, 458,
	386, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 525, 621, 0, 585, 586, 0, 0,
	452, 453, 318, 325, 471, 327, 289, 375, 320, 437,
	334, 0, 464, 529, 465, 588, 591, 589, 590, 367,
	330, 331, 401, 335, 345, 389, 436, 373, 394, 287,
	427, 402, 349, 515, 542, 852, 826, 851, 853, 854,
	850, 855, 856, 837, 731, 0, 782, 848, 847, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 569, 568, 567, 566, 565, 564, 563, 0,
	0, 512, 414, 299, 261, 295, 296, 303, 610, 607,
	418, 611, 0, 269, 492, 343, 0, 384, 317, 557,
	558, 0, 0, 815, 789, 790, 791, 728, 792, 786,
	787, 729, 788, 816, 780, 812, 813, 756, 783, 793,
	811, 794, 814, 817, 818, 857, 858, 800, 784, 233,
	859, 797, 819, 810, 809, 795, 781, 820, 821, 763,
	758, 798, 799, 785, 803, 804, 805, 730, 777, 778,
	779, 801, 802, 759, 760, 761, 762, 0, 0, 0,
	443, 444, 445, 467, 0, 429, 491, 608, 0, 0,
	0, 0, 0, 0, 0, 541, 553, 587, 0, 596,
	597, 599, 601, 806, 603, 773, 614, 482, 483, 615,
	593, 0, 723, 0, 372, 0, 497, 530, 519, 602,
	485, 0, 0, 0, 0, 0, 0, 726, 0, 0,
	0, 312, 0, 0, 342, 534, 516, 526, 517, 502,
	503, 504, 511, 322, 505, 506, 507, 477, 508, 478,
	509, 510, 764, 533, 484, 403, 356, 551, 550, 0,
	0, 831, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 754, 808, 807, 741,
	751, 0, 0, 285, 207, 479, 598, 481, 480, 742,
	0, 743, 747, 750, 746, 744, 745, 0, 823, 0,
	0, 0, 0, 0, 0, 710, 722, 0, 727, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 719, 720, 0, 0, 0, 0, 774, 0,
	721, 0, 0, 769, 748, 752, 0, 0, 0, 0,
	275, 408, 425, 286, 399, 438, 291, 406, 281, 371,
	395, 0, 0, 277, 423, 405, 353, 332, 333, 276,
	0, 390, 310, 324, 307, 369, 749, 772, 776, 306,
	845, 770, 433, 279, 0, 432, 368, 419, 424, 354,
	348, 278, 421, 352, 347, 336, 314, 846, 337, 338,
	328, 380, 346, 381, 329, 358, 357, 359, 0, 0,
	0, 0, 0, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 767, 0,
	595, 0, 435, 0, 0, 829, 0, 0, 0, 407,
	0, 0, 339, 0, 0, 0, 771, 0, 393, 374,
	842, 0, 0, 391, 344, 420, 382, 426, 409, 434,
	387, 383, 270, 410, 309, 355, 282, 284, 304, 311,
	313, 315, 316, 364, 365, 377, 398, 411, 412, 413,
	308, 292, 392, 293, 326, 294, 271, 300, 298, 301,
	400, 302, 273, 378, 417, 0, 321, 388, 351, 274,
	350, 379, 416, 415, 283, 442, 448, 449, 538, 0,
	454, 618, 619, 620, 463, 468, 469, 470, 472, 473,
	474, 475, 539, 556, 523, 493, 456, 547, 490, 494,
	495, 559, 0, 0, 0, 447, 340, 341, 0, 319,
	267, 268, 613, 827, 370, 561, 594, 486, 0, 841,
	822, 824, 825, 828, 832, 833, 834, 835, 836, 838,
	840, 844, 612, 0, 540, 555, 616, 554, 609, 376,
	0, 397, 552, 499, 0, 544, 518, 0, 545, 514,
	549, 0, 488, 0, 404, 428, 440, 457, 460, 489,
	574, 575, 576, 272, 459, 578, 579, 580, 581, 582,
	583, 584, 577, 843, 521, 498, 524, 439, 501, 500,
	0, 0, 535, 775, 536, 537, 360, 361, 362, 363,
	830, 562, 290, 458, 386, 0, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 527, 528, 525, 621, 0,
	585, 586, 0, 0, 452, 453, 318, 325, 471, 327,
	289, 375, 320, 437, 334, 0, 464, 529, 465, 588,
	591, 589, 590, 367, 330, 331, 401, 335, 345, 389,
	436, 373, 394, 287, 427, 402, 349, 515, 542, 852,
	826, 851, 853, 854, 850, 855, 856, 837, 731, 0,
	782, 848, 847, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 569, 568, 567, 566,
	565, 564, 563, 0, 0, 512, 414, 299, 261, 295,
	296, 303, 610, 607, 418, 611, 0, 269, 492, 343,
	0, 384, 317, 557, 558, 0, 0, 815, 789, 790,
	791, 728, 792, 786, 787, 729, 788, 816, 780, 812,
	813, 756, 783, 793, 811, 794, 814, 817, 818, 857,
	858, 800, 784, 233, 859, 797, 819, 810, 809, 795,
	781, 820, 821, 763, 758, 798, 799, 785, 803, 804,
	805, 730, 777, 778, 779, 801, 802, 759, 760, 761,
	762, 0, 0, 0, 443, 444, 445, 467, 0, 429,
	491, 608, 0, 0, 0, 0, 0, 0, 0, 541,
	553, 587, 0, 596, 597, 599, 601, 806, 603, 773,
	614, 482, 483, 615, 593, 0, 723, 0, 372, 0,
	497, 530, 519, 602, 485, 0, 0, 0, 0, 0,
	0, 726, 0, 0, 0, 312, 0, 0, 342, 534,
	516, 526, 517, 502, 503, 504, 511, 322, 505, 506,
	507, 477, 508, 478, 509, 510, 764, 533, 484, 403,
	356, 551, 550, 0, 0, 831, 839, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	754, 808, 807, 741, 751, 0, 0, 285, 207, 479,
	598, 481, 480, 2589, 0, 2590, 747, 750, 746, 744,
	745, 0, 823, 0, 0, 0, 0, 0, 0, 710,
	722, 0, 727, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 719, 720, 0, 0,
	0, 0, 774, 0, 721, 0, 0, 769, 748, 752,
	0, 0, 0, 0, 275, 408, 425, 286, 399, 438,
	291, 406, 281, 371, 395, 0, 0, 277, 423, 405,
	353, 332, 333, 276, 0, 390, 310, 324, 307, 369,
	749, 772, 776, 306, 845, 770, 433, 279, 0, 432,
	368, 419, 424, 354, 348, 278, 421, 352, 347, 336,
	314, 846, 337, 338, 328, 380, 346, 381, 329, 358,
	357, 359, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 767, 0, 595, 0, 435, 0, 0, 829,
	0, 0, 0, 407, 0, 0, 339, 0, 0, 0,
	771, 0, 393, 374, 842, 0, 0, 391, 344, 420,
	382, 426, 409, 434, 387, 383, 270, 410, 309, 355,
	282, 284, 304, 311, 313, 315, 316, 364, 365, 377,
	398, 411, 412, 413, 308, 292, 392, 293, 326, 294,
	271, 300, 298, 301, 400, 302, 273, 378, 417, 0,
	321, 388, 351, 274, 350, 379, 416, 415, 283, 442,
	448, 449, 538, 0, 454, 618, 619, 620, 463, 468,
	469, 470, 472, 473, 474, 475, 539, 556, 523, 493,
	456, 547, 490, 494, 495, 559, 0, 0, 0, 447,
	340, 341, 0, 319, 267, 268, 613, 827, 370, 561,
	594, 486, 0, 841, 822, 824, 825, 828, 832, 833,
	834, 835, 836, 838, 840, 844, 612, 0, 540, 555,
	616, 554, 609, 376, 0, 397, 552, 499, 0, 544,
	518, 0, 545, 514, 549, 0, 488, 0, 404, 428,
	440, 457, 460, 489, 574, 575, 576, 272, 459, 578,
	579, 580, 581, 582, 583, 584, 577, 843, 521, 498,
	524, 439, 501, 500, 0, 0, 535, 775, 536, 537,
	360, 361, 362, 363, 830, 562, 290, 458, 386, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	528, 525, 621, 0, 585, 586, 0, 0, 452, 453,
	318, 325, 471, 327, 289, 375, 320, 437, 334, 0,
	464, 529, 465, 588, 591, 589, 590, 367, 330, 331,
	401, 335, 345, 389, 436, 373, 394, 287, 427, 402,
	349, 515, 542, 852, 826, 851, 853, 854, 850, 855,
	856, 837, 731, 0, 782, 848, 847, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	569, 568, 567, 566, 565, 564, 563, 0, 0, 512,
	414, 299, 261, 295, 296, 303, 610, 607, 418, 611,
	0, 269, 492, 343, 0, 384, 317, 557, 558, 0,
	0, 815, 789, 790, 791, 728, 792, 786, 787, 729,
	788, 816, 780, 812, 813, 756, 783, 793, 811, 794,
	814, 817, 818, 857, 858, 800, 784, 233, 859, 797,
	819, 810, 809, 795, 781, 820, 821, 763, 758, 798,
	799, 785, 803, 804, 805, 730, 777, 778, 779, 801,
	802, 759, 760, 761, 762, 0, 0, 0, 443, 444,
	445, 467, 0, 429, 491, 608, 0, 0, 0, 0,
	0, 0, 0, 541, 553, 587, 0, 596, 597, 599,
	601, 806, 603, 773, 614, 482, 483, 615, 593, 0,
	723, 0, 372, 0, 497, 530, 519, 602, 485, 0,
	0, 1632, 0, 0, 0, 726, 0, 0, 0, 312,
	0, 0, 342, 534, 516, 526, 517, 502, 503, 504,
	511, 322, 505, 506, 507, 477, 508, 478, 509, 510,
	764, 533, 484, 403, 356, 551, 550, 0, 0, 831,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 754, 808, 807, 741, 751, 0,
	0, 285, 207, 479, 598, 481, 480, 742, 0, 743,
	747, 750, 746, 744, 745, 0, 823, 0, 0, 0,
	0, 0, 0, 0, 722, 0, 727, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 720, 0, 0, 0, 0, 774, 0, 721, 0,
	0, 769, 748, 752, 0, 0, 0, 0, 275, 408,
	425, 286, 399, 438, 291, 406, 281, 371, 395, 0,
	0, 277, 423, 405, 353, 332, 333, 276, 0, 390,
	310, 324, 307, 369, 749, 772, 776, 306, 845, 770,
	433, 279, 0, 432, 368, 419, 424, 354, 348, 278,
	421, 352, 347, 336, 314, 846, 337, 338, 328, 380,
	346, 381, 329, 358, 357, 359, 0, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 767, 0, 595, 0,
	435, 0, 0, 829, 0, 0, 0, 407, 0, 0,
	339, 0, 0, 0, 771, 0, 393, 374, 842, 0,
	0, 391, 344, 420, 382, 426, 409, 434, 387, 383,
	270, 410, 309, 355, 282, 284, 304, 311, 313, 315,
	316, 364, 365, 377, 398, 411, 412, 413, 308, 292,
	392, 293, 326, 294, 271, 300, 298, 301, 400, 302,
	273, 378, 417, 0, 321, 388, 351, 274, 350, 379,
	416, 415, 283, 442, 1633, 1634, 538, 0, 454, 618,
	619, 620, 463, 468, 469, 470, 472, 473, 474, 475,
	539, 556, 523, 493, 456, 547, 490, 494, 495, 559,
	0, 0, 0, 447, 340, 341, 0, 319, 267, 268,
	613, 827, 370, 561, 594, 486, 0, 841, 822, 824,
	825, 828, 832, 833, 834, 835, 836, 838, 840, 844,
	612, 0, 540, 555, 616, 554, 609, 376, 0, 397,
	552, 499, 0, 544, 518, 0, 545, 514, 549, 0,
	488, 0, 404, 428, 440, 457, 460, 489, 574, 575,
	576, 272, 459, 578, 579, 580, 581, 582, 583, 584,
	577, 843, 521, 498, 524, 439, 501, 500, 0, 0,
	535, 775, 536, 537, 360, 361, 362, 363, 830, 562,
	290, 458, 386, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 528, 525, 621, 0, 585, 586,
	0, 0, 452, 453, 318, 325, 471, 327, 289, 375,
	320, 437, 334, 0, 464, 529, 465, 588, 591, 589,
	590, 367, 330, 331, 401, 335, 345, 389, 436, 373,
	394, 287, 427, 402, 349, 515, 542, 852, 826, 851,
	853, 854, 850, 855, 856, 837, 731, 0, 782, 848,
	847, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570, 569, 568, 567, 566, 565, 564,
	563, 0, 0, 512, 414, 299, 261, 295, 296, 303,
	610, 607, 418, 611, 0, 269, 492, 343, 0, 384,
	317, 557, 558, 0, 0, 815, 789, 790, 791, 728,
	792, 786, 787, 729, 788, 816, 780, 812, 813, 756,
	783, 793, 811, 794, 814, 817, 818, 857, 858, 800,
	784, 233, 859, 797, 819, 810, 809, 795, 781, 820,
	821, 763, 758, 798, 799, 785, 803, 804, 805, 730,
	777, 778, 779, 801, 802, 759, 760, 761, 762, 0,
	0, 0, 443, 444, 445, 467, 0, 429, 491, 608,
	0, 0, 0, 0, 0, 0, 0, 541, 553, 587,
	0, 596, 597, 599, 601, 806, 603, 773, 614, 482,
	483, 615, 593, 0, 723, 0, 372, 0, 497, 530,
	519, 602, 485, 0, 0, 0, 0, 0, 0, 726,
	0, 0, 0, 312, 0, 0, 342, 534, 516, 526,
	517, 502, 503, 504, 511, 322, 505, 506, 507, 477,
	508, 478, 509, 510, 764, 533, 484, 403, 356, 551,
	550, 0, 0, 831, 839, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 718, 0, 0, 754, 808,
	807, 741, 751, 0, 0, 285, 207, 479, 598, 481,
	480, 742, 0, 743, 747, 750, 746, 744, 745, 0,
	823, 0, 0, 0, 0, 0, 0, 0, 722, 0,
	727, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 719, 720, 0, 0, 0, 0,
	774, 0, 721, 0, 0, 769, 748, 752, 0, 0,
	0, 0, 275, 408, 425, 286, 399, 438, 291, 406,
	281, 371, 395, 0, 0, 277, 423, 405, 353, 332,
	333, 276, 0, 390, 310, 324, 307, 369, 749, 772,
	776, 306, 845, 770, 433, 279, 0, 432, 368, 419,
	424, 354, 348, 278, 421, 352, 347, 336, 314, 846,
	337, 338, 328, 380, 346, 381, 329, 358, 357, 359,
	0, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	767, 0, 595, 0, 435, 0, 0, 829, 0, 0,
	0, 407, 0, 0, 339, 0, 0, 0, 771, 0,
	393, 374, 842, 0, 0, 391, 344, 420, 382, 426,
	409, 434, 387, 383, 270, 410, 309, 355, 282, 284,
	304, 311, 313, 315, 316, 364, 365, 377, 398, 411,
	412, 413, 308, 292, 392, 293, 326, 294, 271, 300,
	298, 301, 400, 302, 273, 378, 417, 0, 321, 388,
	351, 274, 350, 379, 416, 415, 283, 442, 448, 449,
	538, 0, 454, 618, 619, 620, 463, 468, 469, 470,
	472, 473, 474, 475, 539, 556, 523, 493, 456, 547,
	490, 494, 495, 559, 0, 0, 0, 447, 340, 341,
	0, 319, 267, 268, 613, 827, 370, 561, 594, 486,
	0, 841, 822, 824, 825, 828, 832, 833, 834, 835,
	836, 838, 840, 844, 612, 0, 540, 555, 616, 554,
	609, 376, 0, 397, 552, 499, 0, 544, 518, 0,
	545, 514, 549, 0, 488, 0, 404, 428, 440, 457,
	460, 489, 574, 575, 576, 272, 459, 578, 579, 580,
	581, 582, 583, 584, 577, 843, 521, 498, 524, 439,
	501, 500, 0, 0, 535, 775, 536, 537, 360, 361,
	362, 363, 830, 562, 290, 458, 386, 0, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 528, 525,
	621, 0, 585, 586, 0, 0, 452, 453, 318, 325,
	471, 327, 289, 375, 320, 437, 334, 0, 464, 529,
	465, 588, 591, 589, 590, 367, 330, 331, 401, 335,
	345, 389, 436, 373, 394, 287, 427, 402, 349, 515,
	542, 852, 826, 851, 853, 854, 850, 855, 856, 837,
	731, 0, 782, 848, 847, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 569, 568,
	567, 566, 565, 564, 563, 0, 0, 512, 414, 299,
	261, 295, 296, 303, 610, 607, 418, 611, 0, 269,
	492, 343, 0, 384, 317, 557, 558, 0, 0, 815,
	789, 790, 791, 728, 792, 786, 787, 729, 788, 816,
	780, 812, 813, 756, 783, 793, 811, 794, 814, 817,
	818, 857, 858, 800, 784, 233, 859, 797, 819, 810,
	809, 795, 781, 820, 821, 763, 758, 798, 799, 785,
	803, 804, 805, 730, 777, 778, 779, 801, 802, 759,
	760, 761, 762, 0, 0, 0, 443, 444, 445, 467,
	0, 429, 491, 608, 0, 0, 0, 0, 0, 0,
	0, 541, 553, 587, 0, 596, 597, 599, 601, 806,
	603, 773, 614, 482, 483, 615, 593, 0, 723, 0,
	372, 0, 497, 530, 519, 602, 485, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 312, 0, 0,
	342, 534, 516, 526, 517, 502, 503, 504, 511, 322,
	505, 506, 507, 477, 508, 478, 509, 510, 764, 533,
	484, 403, 356, 551, 550, 0, 0, 831, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 754, 808, 807, 741, 751, 0, 0, 285,
	207, 479, 598, 481, 480, 742, 0, 743, 747, 750,
	746, 744, 745, 0, 823, 0, 0, 0, 0, 0,
	0, 710, 722, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 720,
	0, 0, 0, 0, 774, 0, 721, 0, 0, 769,
	748, 752, 0, 0, 0, 0, 275, 408, 425, 286,
	399, 438, 291, 406, 281, 371, 395, 0, 0, 277,
	423, 405, 353, 332, 333, 276, 0, 390, 310, 324,
	307, 369, 749, 772, 776, 306, 845, 770, 433, 279,
	0, 432, 368, 419, 424, 354, 348, 278, 421, 352,
	347, 336, 314, 846, 337, 338, 328, 380, 346, 381,
	329, 358, 357, 359, 0, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 767, 0, 595, 0, 435, 0,
	0, 829, 0, 0, 0, 407, 0, 0, 339, 0,
	0, 0, 771, 0, 393, 374, 842, 0, 0, 391,
	344, 420, 382, 426, 409, 434, 387, 383, 270, 410,
	309, 355, 282, 284, 304, 311, 313, 315, 316, 364,
	365, 377, 398, 411, 412, 413, 308, 292, 392, 293,
	326, 294, 271, 300, 298, 301, 400, 302, 273, 378,
	417, 0, 321, 388, 351, 274, 350, 379, 416, 415,
	283, 442, 448, 449, 538, 0, 454, 618, 619, 620,
	463, 468, 469, 470, 472, 473, 474, 475, 539, 556,
	523, 493, 456, 547, 490, 494, 495, 559, 0, 0,
	0, 447, 340, 341, 0, 319, 267, 268, 613, 827,
	370, 561, 594, 486, 0, 841, 822, 824, 825, 828,
	832, 833, 834, 835, 836, 838, 840, 844, 612, 0,
	540, 555, 616, 554, 609, 376, 0, 397, 552, 499,
	0, 544, 518, 0, 545, 514, 549, 0, 488, 0,
	404, 428, 440, 457, 460, 489, 574, 575, 576, 272,
	459, 578, 579, 580, 581, 582, 583, 584, 577, 843,
	521, 498, 524, 439, 501, 500, 0, 0, 535, 775,
	536, 537, 360, 361, 362, 363, 830, 562, 290, 458,
	386, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 525, 621, 0, 585, 586, 0, 0,
	452, 453, 318, 325, 471, 327, 289, 375, 320, 437,
	334, 0, 464, 529, 465, 588, 591, 589, 590, 367,
	330, 331, 401, 335, 345, 389, 436, 373, 394, 287,
	427, 402, 349, 515, 542, 852, 826, 851, 853, 854,
	850, 855, 856, 837, 731, 0, 782, 848, 847, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 569, 568, 567, 566, 565, 564, 563, 0,
	0, 512, 414, 299, 261, 295, 296, 303, 610, 607,
	418, 611, 0, 269, 492, 343, 0, 384, 317, 557,
	558, 0, 0, 815, 789, 790, 791, 728, 792, 786,
	787, 729, 788, 816, 780, 812, 813, 756, 783, 793,
	811, 794, 814, 817, 818, 857, 858, 800, 784, 233,
	859, 797, 819, 810, 809, 795, 781, 820, 821, 763,
	758, 798, 799, 785, 803, 804, 805, 730, 777, 778,
	779, 801, 802, 759, 760, 761, 762, 0, 0, 0,
	443, 444, 445, 467, 0, 429, 491, 608, 0, 0,
	0, 0, 0, 0, 0, 541, 553, 587, 0, 596,
	597, 599, 601, 806, 603, 184, 614, 482, 483, 615,
	593, 0, 723, 0, 0, 372, 0, 497, 530, 519,
	602, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 342, 534, 516, 526, 517,
	502, 503, 504, 511, 322, 505, 506, 507, 477, 508,
	478, 509, 510, 122, 533, 484, 403, 356, 551, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 285, 207, 479, 598, 481, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	2280, 2283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 408, 425, 286, 399, 438, 291, 406, 281,
	371, 395, 0, 0, 277, 423, 405, 353, 332, 333,
	276, 0, 390, 310, 324, 307, 369, 0, 422, 450,
	306, 441, 0, 433, 279, 0, 432, 368, 419, 424,
	354, 348, 278, 421, 352, 347, 336, 314, 466, 337,
	338, 328, 380, 346, 381, 329, 358, 357, 359, 0,
	0, 0, 0, 0, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	0, 595, 2284, 435, 0, 0, 0, 2279, 0, 2278,
	407, 2276, 2281, 339, 0, 0, 0, 451, 0, 393,
	374, 617, 0, 0, 391, 344, 420, 382, 426, 409,
	434, 387, 383, 270, 410, 309, 355, 282, 284, 304,
	311, 313, 315, 316, 364, 365, 377, 398, 411, 412,
	413, 308, 292, 392, 293, 326, 294, 271, 300, 298,
	301, 400, 302, 273, 378, 417, 2282, 321, 388, 351,
	274, 350, 379, 416, 415, 283, 442, 448, 449, 538,
	0, 454, 618, 619, 620, 463, 468, 469, 470, 472,
	473, 474, 475, 539, 556, 523, 493, 456, 547, 490,
	494, 495, 559, 0, 0, 0, 447, 340, 341, 0,
	319, 267, 268, 613, 305, 370, 561, 594, 486, 0,
	548, 487, 496, 297, 520, 532, 531, 366, 446, 0,
	543, 546, 476, 612, 0, 540, 555, 616, 554, 609,
	376, 0, 397, 552, 499, 0, 544, 518, 0, 545,
	514, 549, 0, 488, 0, 404, 428, 440, 457, 460,
	489, 574, 575, 576, 272, 459, 578, 579, 580, 581,
	582, 583, 584, 577, 431, 521, 498, 524, 439, 501,
	500, 0, 0, 535, 455, 536, 537, 360, 361, 362,
	363, 323, 562, 290, 458, 386, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 527, 528, 525, 621,
	0, 585, 586, 0, 0, 452, 453, 318, 325, 471,
	327, 289, 375, 320, 437, 334, 0, 464, 529, 465,
	588, 591, 589, 590, 367, 330, 331, 401, 335, 345,
	389, 436, 373, 394, 287, 427, 402, 349, 515, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 570, 569, 568, 567,
	566, 565, 564, 563, 0, 0, 512, 414, 299, 261,
	295, 296, 303, 610, 607, 418, 611, 0, 269, 492,
	343, 147, 384, 317, 557, 558, 0, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 262, 225, 226, 227,
	228, 229, 230, 231, 234, 235, 236, 237, 238, 239,
	240, 241, 560, 232, 233, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 0,
	0, 0, 263, 264, 265, 266, 0, 0, 257, 258,
	259, 260, 0, 0, 0, 443, 444, 445, 467, 0,
	429, 491, 608, 0, 0, 0, 0, 0, 0, 0,
	541, 553, 587, 0, 596, 597, 599, 601, 600, 603,
	0, 614, 482, 483, 615, 593, 372, 0, 497, 530,
	519, 602, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 342, 534, 516, 526,
	517, 502, 503, 504, 511, 322, 505, 506, 507, 477,
	508, 478, 509, 510, 0, 533, 484, 403, 356, 551,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1256, 0, 0, 206, 0,
	0, 741, 751, 0, 0, 285, 207, 479, 598, 481,
	480, 742, 0, 743, 747, 750, 746, 744, 745, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 0, 275, 408, 425, 286, 399, 438, 291, 406,
	281, 371, 395, 0, 0, 277, 423, 405, 353, 332,
	333, 276, 0, 390, 310, 324, 307, 369, 749, 422,
	450, 306, 441, 0, 433, 279, 0, 432, 368, 419,
	424, 354, 348, 278, 421, 352, 347, 336, 314, 466,
	337, 338, 328, 380, 346, 381, 329, 358, 357, 359,
	0, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 595, 0, 435, 0, 0, 0, 0, 0,
	0, 407, 0, 0, 339, 0, 0, 0, 451, 0,
	393, 374, 617, 0, 0, 391, 344, 420, 382, 426,
	409, 434, 387, 383, 270, 410, 309, 355, 282, 284,
	304, 311, 313, 315, 316, 364, 365, 377, 398, 411,
	412, 413, 308, 292, 392, 293, 326, 294, 271, 300,
	298, 301, 400, 302, 273, 378, 417, 0, 321, 388,
	351, 274, 350, 379, 416, 415, 283, 442, 448, 449,
	538, 0, 454, 618, 619, 620, 463, 468, 469, 470,
	472, 473, 474, 475, 539, 556, 523, 493, 456, 547,
	490, 494, 495, 559, 0, 0, 0, 447, 340, 341,
	0, 319, 267, 268, 613, 305, 370, 561, 594, 486,
	0, 548, 487, 496, 297, 520, 532, 531, 366, 446,
	0, 543, 546, 476, 612, 0, 540, 555, 616, 554,
	609, 376, 0, 397, 552, 499, 0, 544, 518, 0,
	545, 514, 549, 0, 488, 0, 404, 428, 440, 457,
	460, 489, 574, 575, 576, 272, 459, 578, 579, 580,
	581, 582, 583, 584, 577, 431, 521, 498, 524, 439,
	501, 500, 0, 0, 535, 455, 536, 537, 360, 361,
	362, 363, 323, 562, 290, 458, 386, 0, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 528, 525,
	621, 0, 585, 586, 0, 0, 452, 453, 318, 325,
	471, 327, 289, 375, 320, 437, 334, 0, 464, 529,
	465, 588, 591, 589, 590, 367, 330, 331, 401, 335,
	345, 389, 436, 373, 394, 287, 427, 402, 349, 515,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 569, 568,
	567, 566, 565, 564, 563, 0, 0, 512, 414, 299,
	261, 295, 296, 303, 610, 607, 418, 611, 0, 269,
	492, 343, 0, 384, 317, 557, 558, 0, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 262, 225, 226,
	227, 228, 229, 230, 231, 234, 235, 236, 237, 238,
	239, 240, 241, 560, 232, 233, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	0, 0, 0, 263, 264, 265, 266, 0, 0, 257,
	258, 259, 260, 0, 0, 0, 443, 444, 445, 467,
	0, 429, 491, 608, 0, 0, 0, 0, 0, 0,
	0, 541, 553, 587, 0, 596, 597, 599, 601, 600,
	603, 0, 614, 482, 483, 615, 593, 184, 55, 173,
	146, 0, 0, 0, 0, 0, 0, 372, 640, 497,
	530, 519, 602, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 342, 534, 516,
	526, 517, 502, 503, 504, 511, 322, 505, 506, 507,
	477, 508, 478, 509, 510, 0, 533, 484, 403, 356,
	551, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 646, 0, 0, 0, 0, 645, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 285, 207, 479, 598,
	481, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 408, 425, 286, 399, 438, 291,
	406, 281, 371, 395, 0, 0, 277, 423, 405, 353,
	332, 333, 276, 0, 390, 310, 324, 307, 369, 0,
	422, 450, 306, 441, 0, 433, 279, 0, 432, 368,
	419, 424, 354, 348, 278, 421, 352, 347, 336, 314,
	466, 337, 338, 328, 380, 346, 381, 329, 358, 357,
	359, 0, 0, 0, 0, 0, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 644, 0,
	592, 0, 0, 595, 0, 435, 0, 0, 0, 0,
	0, 0, 407, 0, 0, 339, 0, 0, 0, 451,
	0, 393, 374, 617, 0, 0, 391, 344, 420, 382,
	426, 409, 434, 387, 383, 270, 410, 309, 355, 282,
	284, 304, 311, 313, 315, 316, 364, 365, 377, 398,
	411, 412, 413, 308, 292, 392, 293, 326, 294, 271,
	300, 298, 301, 400, 302, 273, 378, 417, 0, 321,
	388, 351, 274, 350, 379, 416, 415, 283, 442, 448,
	449, 538, 0, 454, 618, 619, 620, 463, 468, 469,
	470, 472, 473, 474, 475, 539, 556, 523, 493, 456,
	547, 490, 494, 495, 559, 0, 0, 0, 447, 340,
	341, 0, 319, 267, 268, 613, 305, 370, 561, 594,
	486, 0, 548, 487, 496, 297, 520, 532, 531, 366,
	446, 0, 543, 546, 476, 612, 0, 540, 555, 616,
	554, 609, 376, 0, 397, 552, 499, 0, 544, 518,
	0, 545, 514, 549, 0, 488, 0, 404, 428, 440,
	457, 460, 489, 574, 575, 576, 272, 459, 578, 579,
	580, 581, 582, 583, 584, 577, 431, 521, 498, 524,
	439, 501, 500, 0, 0, 535, 455, 536, 537, 360,
	361, 362, 363, 641, 643, 290, 458, 386, 654, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 528,
	525, 621, 0, 585, 586, 0, 0, 452, 453, 318,
	325, 471, 327, 289, 375, 320, 437, 334, 0, 464,
	529, 465, 588, 591, 589, 590, 367, 330, 331, 401,
	335, 345, 389, 436, 373, 394, 287, 427, 402, 349,
	515, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 569,
	568, 567, 566, 565, 564, 563, 0, 0, 512, 414,
	299, 261, 295, 296, 303, 610, 607, 418, 611, 0,
	269, 492, 343, 147, 384, 317, 557, 558, 0, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 262, 225,
	226, 227, 228, 229, 230, 231, 234, 235, 236, 237,
	238, 239, 240, 241, 560, 232, 233, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 0, 0, 0, 263, 264, 265, 266, 0, 0,
	257, 258, 259, 260, 0, 0, 0, 443, 444, 445,
	467, 0, 429, 491, 608, 0, 0, 0, 0, 0,
	0, 0, 541, 553, 587, 0, 596, 597, 599, 601,
	600, 603, 0, 614, 482, 483, 615, 593, 372, 0,
	497, 530, 519, 602, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 342, 534,
	516, 526, 517, 502, 503, 504, 511, 322, 505, 506,
	507, 477, 508, 478, 509, 510, 0, 533, 484, 403,
	356, 551, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 285, 207, 479,
	598, 481, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 2280, 2283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 408, 425, 286, 399, 438,
	291, 406, 281, 371, 395, 0, 0, 277, 423, 405,
	353, 332, 333, 276, 0, 390, 310, 324, 307, 369,
	0, 422, 450, 306, 441, 0, 433, 279, 0, 432,
	368, 419, 424, 354, 348, 278, 421, 352, 347, 336,
	314, 466, 337, 338, 328, 380, 346, 381, 329, 358,
	357, 359, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 595, 2284, 435, 0, 0, 0,
	2279, 0, 2278, 407, 2276, 2281, 339, 0, 0, 0,
	451, 0, 393, 374, 617, 0, 0, 391, 344, 420,
	382, 426, 409, 434, 387, 383, 270, 410, 309, 355,
	282, 284, 304, 311, 313, 315, 316, 364, 365, 377,
	398, 411, 412, 413, 308, 292, 392, 293, 326, 294,
	271, 300, 298, 301, 400, 302, 273, 378, 417, 2282,
	321, 388, 351, 274, 350, 379, 416, 415, 283, 442,
	448, 449, 538, 0, 454, 618, 619, 620, 463, 468,
	469, 470, 472, 473, 474, 475, 539, 556, 523, 493,
	456, 547, 490, 494, 495, 559, 0, 0, 0, 447,
	340, 341, 0, 319, 267, 268, 613, 305, 370, 561,
	594, 486, 0, 548, 487, 496, 297, 520, 532, 531,
	366, 446, 0, 543, 546, 476, 612, 0, 540, 555,
	616, 554, 609, 376, 0, 397, 552, 499, 0, 544,
	518, 0, 545, 514, 549, 0, 488, 0, 404, 428,
	440, 457, 460, 489, 574, 575, 576, 272, 459, 578,
	579, 580, 581, 582, 583, 584, 577, 431, 521, 498,
	524, 439, 501, 500, 0, 0, 535, 455, 536, 537,
	360, 361, 362, 363, 323, 562, 290, 458, 386, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	528, 525, 621, 0, 585, 586, 0, 0, 452, 453,
	318, 325, 471, 327, 289, 375, 320, 437, 334, 0,
	464, 529, 465, 588, 591, 589, 590, 367, 330, 331,
	401, 335, 345, 389, 436, 373, 394, 287, 427, 402,
	349, 515, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	569, 568, 567, 566, 565, 564, 563, 0, 0, 512,
	414, 299, 261, 295, 296, 303, 610, 607, 418, 611,
	0, 269, 492, 343, 0, 384, 317, 557, 558, 0,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 262,
	225, 226, 227, 228, 229, 230, 231, 234, 235, 236,
	237, 238, 239, 240, 241, 560, 232, 233, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 0, 0, 0, 263, 264, 265, 266, 0,
	0, 257, 258, 259, 260, 0, 0, 0, 443, 444,
	445, 467, 0, 429, 491, 608, 0, 0, 0, 0,
	0, 0, 0, 541, 553, 587, 0, 596, 597, 599,
	601, 600, 603, 0, 614, 482, 483, 615, 593, 372,
	0, 497, 530, 519, 602, 485, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 342,
	534, 516, 526, 517, 502, 503, 504, 511, 322, 505,
	506, 507, 477, 508, 478, 509, 510, 0, 533, 484,
	403, 356, 551, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 285, 207,
	479, 598, 481, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 0, 275, 408, 425, 286, 399,
	438, 291, 406, 281, 371, 395, 0, 0, 2432, 2435,
	2436, 2437, 2438, 2439, 2440, 0, 2445, 2441, 2442, 2443,
	2444, 0, 2427, 2428, 2429, 2430, 1053, 2411, 2433, 0,
	2412, 368, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420,
	2421, 2424, 2425, 2422, 2423, 2431, 380, 346, 381, 329,
	358, 357, 359, 1080, 1082, 1084, 1086, 1089, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 595, 0, 435, 0, 0,
	0, 0, 0, 0, 407, 0, 0, 339, 0, 0,
	0, 2426, 0, 393, 374, 617, 0, 0, 391, 344,
	420, 382, 426, 409, 434, 387, 383, 270, 410, 309,
	355, 282, 284, 304, 311, 313, 315, 316, 364, 365,
	377, 398, 411, 412, 413, 308, 292, 392, 293, 326,
	294, 271, 300, 298, 301, 400, 302, 273, 378, 417,
	0, 321, 388, 351, 274, 350, 379, 416, 415, 283,
	442, 448, 449, 538, 0, 454, 618, 619, 620, 463,
	468, 469, 470, 472, 473, 474, 475, 539, 556, 523,
	493, 456, 547, 490, 494, 495, 559, 0, 0, 0,
	447, 340, 341, 0, 319, 267, 268, 613, 305, 370,
	561, 594, 486, 0, 548, 487, 496, 297, 520, 532,
	531, 366, 446, 0, 543, 546, 476, 612, 0, 540,
	555, 616, 554, 609, 376, 0, 397, 552, 499, 0,
	544, 518, 0, 545, 514, 549, 0, 488, 0, 404,
	428, 440, 457, 460, 489, 574, 575, 576, 272, 459,
	578, 579, 580, 581, 582, 583, 584, 577, 431, 521,
	498, 524, 439, 501, 500, 0, 0, 535, 455, 536,
	537, 360, 361, 362, 363, 323, 562, 290, 458, 386,
	0, 522, 0, 0, 0, 0, 0, 0, 0, 0,
	527, 528, 525, 621, 0, 585, 586, 0, 0, 452,
	453, 318, 325, 471, 327, 289, 375, 320, 437, 334,
	0, 464, 529, 465, 588, 591, 589, 590, 367, 330,
	331, 401, 335, 345, 389, 436, 373, 394, 287, 427,
	402, 349, 515, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	570, 569, 568, 567, 566, 565, 564, 563, 0, 0,
	512, 414, 299, 261, 295, 296, 303, 610, 607, 418,
	611, 0, 269, 2434, 343, 0, 384, 317, 557, 558,
	0, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	262, 225, 226, 227, 228, 229, 230, 231, 234, 235,
	236, 237, 238, 239, 240, 241, 560, 232, 233, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 0, 0, 0, 263, 264, 265, 266,
	0, 0, 257, 258, 259, 260, 0, 0, 0, 443,
	444, 445, 467, 0, 429, 491, 608, 0, 0, 0,
	0, 0, 0, 0, 541, 553, 587, 0, 596, 597,
	599, 601, 600, 603, 0, 614, 482, 483, 615, 593,
	372, 0, 497, 530, 519, 602, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	342, 534, 516, 526, 517, 502, 503, 504, 511, 322,
	505, 506, 507, 477, 508, 478, 509, 510, 0, 533,
	484, 403, 356, 551, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 285,
	207, 479, 598, 481, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 0, 2301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 408, 425, 286,
	399, 438, 291, 406, 281, 371, 395, 0, 0, 277,
	423, 405, 353, 332, 333, 276, 0, 390, 310, 324,
	307, 369, 0, 422, 450, 306, 441, 0, 433, 279,
	0, 432, 368, 419, 424, 354, 348, 278, 421, 352,
	347, 336, 314, 466, 337, 338, 328, 380, 346, 381,
	329, 358, 357, 359, 0, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 595, 2300, 435, 0,
	0, 0, 2306, 2303, 2305, 407, 0, 2304, 339, 0,
	0, 0, 451, 0, 393, 374, 617, 0, 2298, 391,
	344, 420, 382, 426, 409, 434, 387, 383, 270, 410,
	309, 355, 282, 284, 304, 311, 313, 315, 316, 364,
	365, 377, 398, 411, 412, 413, 308, 292, 392, 293,
	326, 294, 271, 300, 298, 301, 400, 302, 273, 378,
	417, 0, 321, 388, 351, 274, 350, 379, 416, 415,
	283, 442, 448, 449, 538, 0, 454, 618, 619, 620,
	463, 468, 469, 470, 472, 473, 474, 475, 539, 556,
	523, 493, 456, 547, 490, 494, 495, 559, 0, 0,
	0, 447, 340, 341, 0, 319, 267, 268, 613, 305,
	370, 561, 594, 486, 0, 548, 487, 496, 297, 520,
	532, 531, 366, 446, 0, 543, 546, 476, 612, 0,
	540, 555, 616, 554, 609, 376, 0, 397, 552, 499,
	0, 544, 518, 0, 545, 514, 549, 0, 488, 0,
	404, 428, 440, 457, 460, 489, 574, 575, 576, 272,
	459, 578, 579, 580, 581, 582, 583, 584, 577, 431,
	521, 498, 524, 439, 501, 500, 0, 0, 535, 455,
	536, 537, 360, 361, 362, 363, 323, 562, 290, 458,
	386, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 525, 621, 0, 585, 586, 0, 0,
	452, 453, 318, 325, 471, 327, 289, 375, 320, 437,
	334, 0, 464, 529, 465, 588, 591, 589, 590, 367,
	330, 331, 401, 335, 345, 389, 436, 373, 394, 287,
	427, 402, 349, 515, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 569, 568, 567, 566, 565, 564, 563, 0,
	0, 512, 414, 299, 261, 295, 296, 303, 610, 607,
	418, 611, 0, 269, 492, 343, 0, 384, 317, 557,
	558, 0, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 262, 225, 226, 227, 228, 229, 230, 231, 234,
	235, 236, 237, 238, 239, 240, 241, 560, 232, 233,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 0, 0, 0, 263, 264, 265,
	266, 0, 0, 257, 258, 259, 260, 0, 0, 0,
	443, 444, 445, 467, 0, 429, 491, 608, 0, 0,
	0, 0, 0, 0, 0, 541, 553, 587, 0, 596,
	597, 599, 601, 600, 603, 0, 614, 482, 483, 615,
	593, 372, 0, 497, 530, 519, 602, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 342, 534, 516, 526, 517, 502, 503, 504, 511,
	322, 505, 506, 507, 477, 508, 478, 509, 510, 0,
	533, 484, 403, 356, 551, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	285, 207, 479, 598, 481, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 2301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 408, 425,
	286, 399, 438, 291, 406, 281, 371, 395, 0, 0,
	277, 423, 405, 353, 332, 333, 276, 0, 390, 310,
	324, 307, 369, 0, 422, 450, 306, 441, 0, 433,
	279, 0, 432, 368, 419, 424, 354, 348, 278, 421,
	352, 347, 336, 314, 466, 337, 338, 328, 380, 346,
	381, 329, 358, 357, 359, 0, 0, 0, 0, 0,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 595, 2300, 435,
	0, 0, 0, 2306, 2303, 2305, 407, 0, 2304, 339,
	0, 0, 0, 451, 0, 393, 374, 617, 0, 0,
	391, 344, 420, 382, 426, 409, 434, 387, 383, 270,
	410, 309, 355, 282, 284, 304, 311, 313, 315, 316,
	364, 365, 377, 398, 411, 412, 413, 308, 292, 392,
	293, 326, 294, 271, 300, 298, 301, 400, 302, 273,
	378, 417, 0, 321, 388, 351, 274, 350, 379, 416,
	415, 283, 442, 448, 449, 538, 0, 454, 618, 619,
	620, 463, 468, 469, 470, 472, 473, 474, 475, 539,
	556, 523, 493, 456, 547, 490, 494, 495, 559, 0,
	0, 0, 447, 340, 341, 0, 319, 267, 268, 613,
	305, 370, 561, 594, 486, 0, 548, 487, 496, 297,
	520, 532, 531, 366, 446, 0, 543, 546, 476, 612,
	0, 540, 555, 616, 554, 609, 376, 0, 397, 552,
	499, 0, 544, 518, 0, 545, 514, 549, 0, 488,
	0, 404, 428, 440, 457, 460, 489, 574, 575, 576,
	272, 459, 578, 579, 580, 581, 582, 583, 584, 577,
	431, 521, 498, 524, 439, 501, 500, 0, 0, 535,
	455, 536, 537, 360, 361, 362, 363, 323, 562, 290,
	458, 386, 0, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 527, 528, 525, 621, 0, 585, 586, 0,
	0, 452, 453, 318, 325, 471, 327, 289, 375, 320,
	437, 334, 0, 464, 529, 465, 588, 591, 589, 590,
	367, 330, 331, 401, 335, 345, 389, 436, 373, 394,
	287, 427, 402, 349, 515, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 570, 569, 568, 567, 566, 565, 564, 563,
	0, 0, 512, 414, 299, 261, 295, 296, 303, 610,
	607, 418, 611, 0, 269, 492, 343, 0, 384, 317,
	557, 558, 0, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 262, 225, 226, 227, 228, 229, 230, 231,
	234, 235, 236, 237, 238, 239, 240, 241, 560, 232,
	233, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 0, 0, 0, 263, 264,
	265, 266, 0, 0, 257, 258, 259, 260, 0, 0,
	0, 443, 444, 445, 467, 0, 429, 491, 608, 0,
	0, 0, 0, 0, 0, 0, 541, 553, 587, 0,
	596, 597, 599, 601, 600, 603, 0, 614, 482, 483,
	615, 593, 372, 0, 497, 530, 519, 602, 485, 0,
	0, 0, 0, 0, 2008, 0, 0, 0, 0, 312,
	0, 0, 342, 534, 516, 526, 517, 502, 503, 504,
	511, 322, 505, 506, 507, 477, 508, 478, 509, 510,
	0, 533, 484, 403, 356, 551, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 2009, 0, 0,
	0, 285, 207, 479, 598, 481, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 0, 1186,
	1187, 1188, 1185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 408,
	425, 286, 399, 438, 291, 406, 281, 371, 395, 0,
	0, 277, 423, 405, 353, 332, 333, 276, 0, 390,
	310, 324, 307, 369, 0, 422, 450, 306, 441, 0,
	433, 279, 0, 432, 368, 419, 424, 354, 348, 278,
	421, 352, 347, 336, 314, 466, 337, 338, 328, 380,
	346, 381, 329, 358, 357, 359, 0, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 595, 0,
	435, 0, 0, 0, 0, 0, 0, 407, 0, 0,
	339, 0, 0, 0, 451, 0, 393, 374, 617, 0,
	0, 391, 344, 420, 382, 426, 409, 434, 387, 383,
	270, 410, 309, 355, 282, 284, 304, 311, 313, 315,
	316, 364, 365, 377, 398, 411, 412, 413, 308, 292,
	392, 293, 326, 294, 271, 300, 298, 301, 400, 302,
	273, 378, 417, 0, 321, 388, 351, 274, 350, 379,
	416, 415, 283, 442, 448, 449, 538, 0, 454, 618,
	619, 620, 463, 468, 469, 470, 472, 473, 474, 475,
	539, 556, 523, 493, 456, 547, 490, 494, 495, 559,
	0, 0, 0, 447, 340, 341, 0, 319, 267, 268,
	613, 305, 370, 561, 594, 486, 0, 548, 487, 496,
	297, 520, 532, 531, 366, 446, 0, 543, 546, 476,
	612, 0, 540, 555, 616, 554, 609, 376, 0, 397,
	552, 499, 0, 544, 518, 0, 545, 514, 549, 0,
	488, 0, 404, 428, 440, 457, 460, 489, 574, 575,
	576, 272, 459, 578, 579, 580, 581, 582, 583, 584,
	577, 431, 521, 498, 524, 439, 501, 500, 0, 0,
	535, 455, 536, 537, 360, 361, 362, 363, 323, 562,
	290, 458, 386, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 528, 525, 621, 0, 585, 586,
	0, 0, 452, 453, 318, 325, 471, 327, 289, 375,
	320, 437, 334, 0, 464, 529, 465, 588, 591, 589,
	590, 367, 330, 331, 401, 335, 345, 389, 436, 373,
	394, 287, 427, 402, 349, 515, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570, 569, 568, 567, 566, 565, 564,
	563, 0, 0, 512, 414, 299, 261, 295, 296, 303,
	610, 607, 418, 611, 0, 269, 492, 343, 0, 384,
	317, 557, 558, 0, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 262, 225, 226, 227, 228, 229, 230,
	231, 234, 235, 236, 237, 238, 239, 240, 241, 560,
	232, 233, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 0, 0, 0, 263,
	264, 265, 266, 0, 0, 257, 258, 259, 260, 0,
	0, 0, 443, 444, 445, 467, 0, 429, 491, 608,
	0, 0, 0, 0, 0, 0, 0, 541, 553, 587,
	0, 596, 597, 599, 601, 600, 603, 184, 614, 482,
	483, 615, 593, 0, 0, 0, 0, 372, 0, 497,
	530, 519, 602, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 342, 534, 516,
	526, 517, 502, 503, 504, 511, 322, 505, 506, 507,
	477, 508, 478, 509, 510, 122, 533, 484, 403, 356,
	551, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 2058, 0, 206,
	0, 0, 0, 0, 0, 0, 285, 207, 479, 598,
	481, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 408, 425, 286, 399, 438, 291,
	406, 281, 371, 395, 0, 0, 277, 423, 405, 353,
	332, 333, 276, 0, 390, 310, 324, 307, 369, 0,
	422, 450, 306, 441, 0, 433, 279, 0, 432, 368,
	419, 424, 354, 348, 278, 421, 352, 347, 336, 314,
	466, 337, 338, 328, 380, 346, 381, 329, 358, 357,
	359, 0, 0, 0, 0, 0, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 595, 0, 435, 0, 0, 0, 0,
	0, 0, 407, 0, 0, 339, 0, 0, 0, 451,
	0, 393, 374, 617, 0, 0, 391, 344, 420, 382,
	426, 409, 434, 387, 383, 270, 410, 309, 355, 282,
	284, 304, 311, 313, 315, 316, 364, 365, 377, 398,
	411, 412, 413, 308, 292, 392, 293, 326, 294, 271,
	300, 298, 301, 400, 302, 273, 378, 417, 0, 321,
	388, 351, 274, 350, 379, 416, 415, 283, 442, 448,
	449, 538, 0, 454, 618, 619, 620, 463, 468, 469,
	470, 472, 473, 474, 475, 539, 556, 523, 493, 456,
	547, 490, 494, 495, 559, 0, 0, 0, 447, 340,
	341, 0, 319, 267, 268, 613, 305, 370, 561, 594,
	486, 0, 548, 487, 496, 297, 520, 532, 531, 366,
	446, 0, 543, 546, 476, 612, 0, 540, 555, 616,
	554, 609, 376, 0, 397, 552, 499, 0, 544, 518,
	0, 545, 514, 549, 0, 488, 0, 404, 428, 440,
	457, 460, 489, 574, 575, 576, 272, 459, 578, 579,
	580, 581, 582, 583, 584, 577, 431, 521, 498, 524,
	439, 501, 500, 0, 0, 535, 455, 536, 537, 360,
	361, 362, 363, 323, 562, 290, 458, 386, 0, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 528,
	525, 621, 0, 585, 586, 0, 0, 452, 453, 318,
	325, 471, 327, 289, 375, 320, 437, 334, 0, 464,
	529, 465, 588, 591, 589, 590, 367, 330, 331, 401,
	335, 345, 389, 436, 373, 394, 287, 427, 402, 349,
	515, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 569,
	568, 567, 566, 565, 564, 563, 0, 0, 512, 414,
	299, 261, 295, 296, 303, 610, 607, 418, 611, 0,
	269, 492, 343, 147, 384, 317, 557, 558, 0, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 262, 225,
	226, 227, 228, 229, 230, 231, 234, 235, 236, 237,
	238, 239, 240, 241, 560, 232, 233, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 0, 0, 0, 263, 264, 265, 266, 0, 0,
	257, 258, 259, 260, 0, 0, 0, 443, 444, 445,
	467, 0, 429, 491, 608, 0, 0, 0, 0, 0,
	0, 0, 541, 553, 587, 0, 596, 597, 599, 601,
	600, 603, 184, 614, 482, 483, 615, 593, 0, 0,
	0, 0, 372, 0, 497, 530, 519, 602, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 342, 534, 516, 526, 517, 502, 503, 504,
	511, 322, 505, 506, 507, 477, 508, 478, 509, 510,
	122, 533, 484, 403, 356, 551, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 2044, 0, 206, 0, 0, 0, 0, 0,
	0, 285, 207, 479, 598, 481, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 408,
	425, 286, 399, 438, 291, 406, 281, 371, 395, 0,
	0, 277, 423, 405, 353, 332, 333, 276, 0, 390,
	310, 324, 307, 369, 0, 422, 450, 306, 441, 0,
	433, 279, 0, 432, 368, 419, 424, 354, 348, 278,
	421, 352, 347, 336, 314, 466, 337, 338, 328, 380,
	346, 381, 329, 358, 357, 359, 0, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 595, 0,
	435, 0, 0, 0, 0, 0, 0, 407, 0, 0,
	339, 0, 0, 0, 451, 0, 393, 374, 617, 0,
	0, 391, 344, 420, 382, 426, 409, 434, 387, 383,
	270, 410, 309, 355, 282, 284, 304, 311, 313, 315,
	316, 364, 365, 377, 398, 411, 412, 413, 308, 292,
	392, 293, 326, 294, 271, 300, 298, 301, 400, 302,
	273, 378, 417, 0, 321, 388, 351, 274, 350, 379,
	416, 415, 283, 442, 448, 449, 538, 0, 454, 618,
	619, 620, 463, 468, 469, 470, 472, 473, 474, 475,
	539, 556, 523, 493, 456, 547, 490, 494, 495, 559,
	0, 0, 0, 447, 340, 341, 0, 319, 267, 268,
	613, 305, 370, 561, 594, 486, 0, 548, 487, 496,
	297, 520, 532, 531, 366, 446, 0, 543, 546, 476,
	612, 0, 540, 555, 616, 554, 609, 376, 0, 397,
	552, 499, 0, 544, 518, 0, 545, 514, 549, 0,
	488, 0, 404, 428, 440, 457, 460, 489, 574, 575,
	576, 272, 459, 578, 579, 580, 581, 582, 583, 584,
	577, 431, 521, 498, 524, 439, 501, 500, 0, 0,
	535, 455, 536, 537, 360, 361, 362, 363, 323, 562,
	290, 458, 386, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 528, 525, 621, 0, 585, 586,
	0, 0, 452, 453, 318, 325, 471, 327, 289, 375,
	320, 437, 334, 0, 464, 529, 465, 588, 591, 589,
	590, 367, 330, 331, 401, 335, 345, 389, 436, 373,
	394, 287, 427, 402, 349, 515, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570, 569, 568, 567, 566, 565, 564,
	563, 0, 0, 512, 414, 299, 261, 295, 296, 303,
	610, 607, 418, 611, 0, 269, 492, 343, 147, 384,
	317, 557, 558, 0, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 262, 225, 226, 227, 228, 229, 230,
	231, 234, 235, 236, 237, 238, 239, 240, 241, 560,
	232, 233, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 0, 0, 0, 263,
	264, 265, 266, 0, 0, 257, 258, 259, 260, 0,
	0, 0, 443, 444, 445, 467, 0, 429, 491, 608,
	0, 0, 0, 0, 0, 0, 0, 541, 553, 587,
	0, 596, 597, 599, 601, 600, 603, 0, 614, 482,
	483, 615, 593, 372, 0, 497, 530, 519, 602, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 985, 0, 342, 534, 516, 526, 517, 502, 503,
	504, 511, 322, 505, 506, 507, 477, 508, 478, 509,
	510, 0, 533, 484, 403, 356, 551, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 992, 993, 0, 0,
	0, 0, 285, 207, 479, 598, 481, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 996, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 275,
	408, 980, 286, 399, 438, 291, 406, 281, 371, 395,
	0, 0, 277, 423, 405, 353, 332, 333, 276, 0,
	390, 310, 324, 307, 369, 0, 422, 450, 306, 441,
	969, 433, 279, 968, 432, 368, 419, 424, 354, 348,
	278, 421, 352, 347, 336, 314, 466, 337, 338, 328,
	380, 346, 381, 329, 358, 357, 359, 0, 0, 0,
	0, 0, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 0, 0, 595,
	0, 435, 0, 0, 0, 0, 0, 0, 407, 0,
	0, 339, 0, 0, 0, 451, 0, 393, 374, 617,
	0, 0, 391, 344, 420, 382, 426, 409, 434, 983,
	383, 270, 410, 309, 355, 282, 284, 304, 311, 313,
	315, 316, 364, 365, 377, 398, 411, 412, 413, 308,
	292, 392, 293, 326, 294, 271, 300, 298, 301, 400,
	302, 273, 378, 417, 0, 321, 388, 351, 274, 350,
	379, 416, 415, 283, 442, 448, 449, 538, 0, 454,
	618, 619, 620, 463, 468, 469, 470, 472, 473, 474,
	475, 539, 556, 523, 493, 456, 547, 490, 494, 495,
	559, 0, 0, 0, 447, 340, 341, 0, 319, 267,
	268, 613, 305, 370, 561, 594, 486, 0, 548, 487,
	496, 297, 520, 532, 531, 366, 446, 0, 543, 546,
	476, 612, 0, 540, 555, 616, 554, 609, 376, 0,
	397, 552, 499, 0, 544, 518, 0, 545, 514, 549,
	0, 488, 0, 404, 428, 440, 457, 460, 489, 574,
	575, 576, 272, 459, 578, 579, 580, 581, 582, 583,
	984, 577, 431, 521, 498, 524, 439, 501, 500, 0,
	0, 535, 987, 536, 537, 360, 361, 362, 363, 323,
	562, 290, 458, 386, 0, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 527, 528, 525, 621, 0, 585,
	586, 0, 0, 452, 453, 318, 325, 471, 327, 289,
	375, 320, 437, 334, 0, 464, 529, 465, 588, 591,
	589, 590, 994, 981, 990, 982, 335, 345, 389, 436,
	373, 394, 287, 427, 402, 991, 515, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 570, 569, 568, 567, 566, 565,
	564, 563, 0, 0, 512, 414, 299, 261, 295, 296,
	303, 610, 607, 418, 611, 0, 269, 492, 343, 0,
	384, 317, 557, 558, 0, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 262, 225, 226, 227, 228, 229,
	230, 231, 234, 235, 236, 237, 238, 239, 240, 241,
	560, 232, 233, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 0, 0, 0,
	263, 264, 265, 266, 0, 0, 257, 258, 259, 260,
	0, 0, 0, 443, 444, 445, 467, 0, 429, 491,
	608, 0, 0, 0, 0, 0, 0, 0, 541, 553,
	587, 0, 596, 597, 599, 601, 600, 603, 184, 614,
	482, 483, 615, 593, 0, 0, 0, 0, 372, 0,
	497, 530, 519, 602, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 342, 534,
	516, 526, 517, 502, 503, 504, 511, 322, 505, 506,
	507, 477, 508, 478, 509, 510, 122, 533, 484, 403,
	356, 551, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1941, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 285, 207, 479,
	598, 481, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 408, 425, 286, 399, 438,
	291, 406, 281, 371, 395, 0, 0, 277, 423, 405,
	353, 332, 333, 276, 0, 390, 310, 324, 307, 369,
	0, 422, 450, 306, 441, 0, 433, 279, 0, 432,
	368, 419, 424, 354, 348, 278, 421, 352, 347, 336,
	314, 466, 337, 338, 328, 380, 346, 381, 329, 358,
	357, 359, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 595, 0, 435, 0, 0, 0,
	0, 0, 0, 407, 0, 0, 339, 0, 0, 0,
	451, 0, 393, 374, 617, 0, 0, 391, 344, 420,
	382, 426, 409, 434, 387, 383, 270, 410, 309, 355,
	282, 284, 304, 311, 313, 315, 316, 364, 365, 377,
	398, 411, 412, 413, 308, 292, 392, 293, 326, 294,
	271, 300, 298, 301, 400, 302, 273, 378, 417, 0,
	321, 388, 351, 274, 350, 379, 416, 415, 283, 442,
	448, 449, 538, 0, 454, 618, 619, 620, 463, 468,
	469, 470, 472, 473, 474, 475, 539, 556, 523, 493,
	456, 547, 490, 494, 495, 559, 0, 0, 0, 447,
	340, 341, 0, 319, 267, 268, 613, 305, 370, 561,
	594, 486, 0, 548, 487, 496, 297, 520, 532, 531,
	366, 446, 0, 543, 546, 476, 612, 0, 540, 555,
	616, 554, 609, 376, 0, 397, 552, 499, 0, 544,
	518, 0, 545, 514, 549, 0, 488, 0, 404, 428,
	440, 457, 460, 489, 574, 575, 576, 272, 459, 578,
	579, 580, 581, 582, 583, 584, 577, 431, 521, 498,
	524, 439, 501, 500, 0, 0, 535, 455, 536, 537,
	360, 361, 362, 363, 323, 562, 290, 458, 386, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	528, 525, 621, 0, 585, 586, 0, 0, 452, 453,
	318, 325, 471, 327, 289, 375, 320, 437, 334, 0,
	464, 529, 465, 588, 591, 589, 590, 367, 330, 331,
	401, 335, 345, 389, 436, 373, 394, 287, 427, 402,
	349, 515, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	569, 568, 567, 566, 565, 564, 563, 0, 0, 512,
	414, 299, 261, 295, 296, 303, 610, 607, 418, 611,
	0, 269, 492, 343, 147, 384, 317, 557, 558, 0,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 262,
	225, 226, 227, 228, 229, 230, 231, 234, 235, 236,
	237, 238, 239, 240, 241, 560, 232, 233, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 0, 0, 0, 263, 264, 265, 266, 0,
	0, 257, 258, 259, 260, 0, 0, 0, 443, 444,
	445, 467, 0, 429, 491, 608, 0, 0, 0, 0,
	0, 0, 0, 541, 553, 587, 0, 596, 597, 599,
	601, 600, 603, 0, 614, 482, 483, 615, 593, 372,
	0, 497, 530, 519, 602, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 342,
	534, 516, 526, 517, 502, 503, 504, 511, 322, 505,
	506, 507, 477, 508, 478, 509, 510, 0, 533, 484,
	403, 356, 551, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 992, 993, 0, 0, 0, 0, 285, 207,
	479, 598, 481, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 408, 425, 286, 399,
	438, 291, 406, 281, 371, 395, 0, 0, 277, 423,
	405, 353, 332, 333, 276, 0, 390, 310, 324, 307,
	369, 0, 422, 450, 306, 441, 969, 433, 279, 968,
	432, 368, 419, 424, 354, 348, 278, 421, 352, 347,
	336, 314, 466, 337, 338, 328, 380, 346, 381, 329,
	358, 357, 359, 0, 0, 0, 0, 0, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 595, 0, 435, 0, 0,
	0, 0, 0, 0, 407, 0, 0, 339, 0, 0,
	0, 451, 0, 393, 374, 617, 0, 0, 391, 344,
	420, 382, 426, 409, 434, 387, 383, 270, 410, 309,
	355, 282, 284, 304, 311, 313, 315, 316, 364, 365,
	377, 398, 411, 412, 413, 308, 292, 392, 293, 326,
	294, 271, 300, 298, 301, 400, 302, 273, 378, 417,
	0, 321, 388, 351, 274, 350, 379, 416, 415, 283,
	442, 448, 449, 538, 0, 454, 618, 619, 620, 463,
	468, 469, 470, 472, 473, 474, 475, 539, 556, 523,
	493, 456, 547, 490, 494, 495, 559, 0, 0, 0,
	447, 340, 341, 0, 319, 267, 268, 613, 305, 370,
	561, 594, 486, 0, 548, 487, 496, 297, 520, 532,
	531, 366, 446, 0, 543, 546, 476, 612, 0, 540,
	555, 616, 554, 609, 376, 0, 397, 552, 499, 0,
	544, 518, 0, 545, 514, 549, 0, 488, 0, 404,
	428, 440, 457, 460, 489, 574, 575, 576, 272, 459,
	578, 579, 580, 581, 582, 583, 584, 577, 431, 521,
	498, 524, 439, 501, 500, 0, 0, 535, 455, 536,
	537, 360, 361, 362, 363, 323, 562, 290, 458, 386,
	0, 522, 0, 0, 0, 0, 0, 0, 0, 0,
	527, 528, 525, 621, 0, 585, 586, 0, 0, 452,
	453, 318, 325, 471, 327, 289, 375, 320, 437, 334,
	0, 464, 529, 465, 588, 591, 589, 590, 994, 1960,
	990, 1961, 335, 345, 389, 436, 373, 394, 287, 427,
	402, 991, 515, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	570, 569, 568, 567, 566, 565, 564, 563, 0, 0,
	512, 414, 299, 261, 295, 296, 303, 610, 607, 418,
	611, 0, 269, 492, 343, 0, 384, 317, 557, 558,
	0, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	262, 225, 226, 227, 228, 229, 230, 231, 234, 235,
	236, 237, 238, 239, 240, 241, 560, 232, 233, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 0, 0, 0, 263, 264, 265, 266,
	0, 0, 257, 258, 259, 260, 0, 0, 0, 443,
	444, 445, 467, 0, 429, 491, 608, 0, 0, 0,
	0, 0, 0, 0, 541, 553, 587, 0, 596, 597,
	599, 601, 600, 603, 0, 614, 482, 483, 615, 593,
	372, 0, 497, 530, 519, 602, 485, 0, 0, 2797,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	342, 534, 516, 526, 517, 502, 503, 504, 511, 322,
	505, 506, 507, 477, 508, 478, 509, 510, 0, 533,
	484, 403, 356, 551, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 285,
	207, 479, 598, 481, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 408, 425, 286,
	399, 438, 291, 406, 281, 371, 395, 0, 0, 277,
	423, 405, 353, 332, 333, 276, 0, 390, 310, 324,
	307, 369, 0, 422, 450, 306, 441, 0, 433, 279,
	0, 432, 368, 419, 424, 354, 348, 278, 421, 352,
	347, 336, 314, 466, 337, 338, 328, 380, 346, 381,
	329, 358, 357, 359, 0, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 2800,
	0, 0, 2799, 592, 0, 0, 595, 0, 435, 0,
	0, 0, 0, 0, 0, 407, 0, 0, 339, 0,
	0, 0, 451, 0, 393, 374, 617, 0, 0, 391,
	344, 420, 382, 426, 409, 434, 387, 383, 270, 410,
	309, 355, 282, 284, 304, 311, 313, 315, 316, 364,
	365, 377, 398, 411, 412, 413, 308, 292, 392, 293,
	326, 294, 271, 300, 298, 301, 400, 302, 273, 378,
	417, 0, 321, 388, 351, 274, 350, 379, 416, 415,
	283, 442, 448, 449, 538, 0, 454, 618, 619, 620,
	463, 468, 469, 470, 472, 473, 474, 475, 539, 556,
	523, 493, 456, 547, 490, 494, 495, 559, 0, 0,
	0, 447, 340, 341, 0, 319, 267, 268, 613, 305,
	370, 561, 594, 486, 0, 548, 487, 496, 297, 520,
	532, 531, 366, 446, 0, 543, 546, 476, 612, 0,
	540, 555, 616, 554, 609, 376, 0, 397, 552, 499,
	0, 544, 518, 0, 545, 514, 549, 0, 488, 0,
	404, 428, 440, 457, 460, 489, 574, 575, 576, 272,
	459, 578, 579, 580, 581, 582, 583, 584, 577, 431,
	521, 498, 524, 439, 501, 500, 0, 0, 535, 455,
	536, 537, 360, 361, 362, 363, 323, 562, 290, 458,
	386, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 525, 621, 0, 585, 586, 0, 0,
	452, 453, 318, 325, 471, 327, 289, 375, 320, 437,
	334, 0, 464, 529, 465, 588, 591, 589, 590, 367,
	330, 331, 401, 335, 345, 389, 436, 373, 394, 287,
	427, 402, 349, 515, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 569, 568, 567, 566, 565, 564, 563, 0,
	0, 512, 414, 299, 261, 295, 296, 303, 610, 607,
	418, 611, 0, 269, 492, 343, 0, 384, 317, 557,
	558, 0, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 262, 225, 226, 227, 228, 229, 230, 231, 234,
	235, 236, 237, 238, 239, 240, 241, 560, 232, 233,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 0, 0, 0, 263, 264, 265,
	266, 0, 0, 257, 258, 259, 260, 0, 0, 0,
	443, 444, 445, 467, 0, 429, 491, 608, 0, 0,
	0, 0, 0, 0, 0, 541, 553, 587, 0, 596,
	597, 599, 601, 600, 603, 0, 614, 482, 483, 615,
	593, 372, 0, 497, 530, 519, 602, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 1457,
	0, 342, 534, 516, 526, 517, 502, 503, 504, 511,
	322, 505, 506, 507, 477, 508, 478, 509, 510, 0,
	533, 484, 403, 356, 551, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 1455, 0, 0, 0,
	285, 207, 479, 598, 481, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 275, 408, 425,
	286, 399, 438, 291, 406, 281, 371, 395, 0, 0,
	277, 423, 405, 353, 332, 333, 276, 0, 390, 310,
	324, 307, 369, 0, 422, 450, 306, 441, 0, 433,
	279, 0, 432, 368, 419, 424, 354, 348, 278, 421,
	352, 347, 336, 314, 466, 337, 338, 328, 380, 346,
	381, 329, 358, 357, 359, 0, 0, 0, 0, 0,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 595, 0, 435,
	0, 0, 0, 0, 0, 0, 407, 0, 0, 339,
	0, 0, 0, 451, 0, 393, 374, 617, 0, 0,
	391, 344, 420, 382, 426, 409, 434, 387, 383, 270,
	410, 309, 355, 282, 284, 304, 311, 313, 315, 316,
	364, 365, 377, 398, 411, 412, 413, 308, 292, 392,
	293, 326, 294, 271, 300, 298, 301, 400, 302, 273,
	378, 417, 0, 321, 388, 351, 274, 350, 379, 416,
	415, 283, 442, 448, 449, 538, 0, 454, 618, 619,
	620, 463, 468, 469, 470, 472, 473, 474, 475, 539,
	556, 523, 493, 456, 547, 490, 494, 495, 559, 0,
	0, 0, 447, 340, 341, 0, 319, 267, 268, 613,
	305, 370, 561, 594, 486, 0, 548, 487, 496, 297,
	520, 532, 531, 366, 446, 0, 543, 546, 476, 612,
	0, 540, 555, 616, 554, 609, 376, 0, 397, 552,
	499, 0, 544, 518, 0, 545, 514, 549, 0, 488,
	0, 404, 428, 440, 457, 460, 489, 574, 575, 576,
	272, 459, 578, 579, 580, 581, 582, 583, 584, 577,
	431, 521, 498, 524, 439, 501, 500, 0, 0, 535,
	455, 536, 537, 360, 361, 362, 363, 323, 562, 290,
	458, 386, 0, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 527, 528, 525, 621, 0, 585, 586, 0,
	0, 452, 453, 318, 325, 471, 327, 289, 375, 320,
	437, 334, 0, 464, 529, 465, 588, 591, 589, 590,
	367, 330, 331, 401, 335, 345, 389, 436, 373, 394,
	287, 427, 402, 349, 515, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 570, 569, 568, 567, 566, 565, 564, 563,
	0, 0, 512, 414, 299, 261, 295, 296, 303, 610,
	607, 418, 611, 0, 269, 492, 343, 0, 384, 317,
	557, 558, 0, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 262, 225, 226, 227, 228, 229, 230, 231,
	234, 235, 236, 237, 238, 239, 240, 241, 560, 232,
	233, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 0, 0, 0, 263, 264,
	265, 266, 0, 0, 257, 258, 259, 260, 0, 0,
	0, 443, 444, 445, 467, 0, 429, 491, 608, 0,
	0, 0, 0, 0, 0, 0, 541, 553, 587, 0,
	596, 597, 599, 601, 600, 603, 0, 614, 482, 483,
	615, 593, 372, 0, 497, 530, 519, 602, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	1451, 0, 342, 534, 516, 526, 517, 502, 503, 504,
	511, 322, 505, 506, 507, 477, 508, 478, 509, 510,
	0, 533, 484, 403, 356, 551, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 1455, 0, 0,
	0, 285, 207, 479, 598, 481, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 0, 0, 0, 275, 408,
	425, 286, 399, 438, 291, 406, 281, 371, 395, 0,
	0, 277, 423, 405, 353, 332, 333, 276, 0, 390,
	310, 324, 307, 369, 0, 422, 450, 306, 441, 0,
	433, 279, 0, 432, 368, 419, 424, 354, 348, 278,
	421, 352, 347, 336, 314, 466, 337, 338, 328, 380,
	346, 381, 329, 358, 357, 359, 0, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 595, 0,
	435, 0, 0, 0, 0, 0, 0, 407, 0, 0,
	339, 0, 0, 0, 451, 0, 393, 374, 617, 0,
	0, 391, 344, 420, 382, 426, 409, 434, 387, 383,
	270, 410, 309, 355, 282, 284, 304, 311, 313, 315,
	316, 364, 365, 377, 398, 411, 412, 413, 308, 292,
	392, 293, 326, 294, 271, 300, 298, 301, 400, 302,
	273, 378, 417, 0, 321, 388, 351, 274, 350, 379,
	416, 415, 283, 442, 448, 449, 538, 0, 454, 618,
	619, 620, 463, 468, 469, 470, 472, 473, 474, 475,
	539, 556, 523, 493, 456, 547, 490, 494, 495, 559,
	0, 0, 0, 447, 340, 341, 0, 319, 267, 268,
	613, 305, 370, 561, 594, 486, 0, 548, 487, 496,
	297, 520, 532, 531, 366, 446, 0, 543, 546, 476,
	612, 0, 540, 555, 616, 554, 609, 376, 0, 397,
	552, 499, 0, 544, 518, 0, 545, 514, 549, 0,
	488, 0, 404, 428, 440, 457, 460, 489, 574, 575,
	576, 272, 459, 578, 579, 580, 581, 582, 583, 584,
	577, 431, 521, 498, 524, 439, 501, 500, 0, 0,
	535, 455, 536, 537, 360, 361, 362, 363, 323, 562,
	290, 458, 386, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 528, 525, 621, 0, 585, 586,
	0, 0, 452, 453, 318, 325, 471, 327, 289, 375,
	320, 437, 334, 0, 464, 529, 465, 588, 591, 589,
	590, 367, 330, 331, 401, 335, 345, 389, 436, 373,
	394, 287, 427, 402, 349, 515, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570, 569, 568, 567, 566, 565, 564,
	563, 0, 0, 512, 414, 299, 261, 295, 296, 303,
	610, 607, 418, 611, 0, 269, 492, 343, 0, 384,
	317, 557, 558, 0, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 262, 225, 226, 227, 228, 229, 230,
	231, 234, 235, 236, 237, 238, 239, 240, 241, 560,
	232, 233, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 0, 0, 0, 263,
	264, 265, 266, 0, 0, 257, 258, 259, 260, 0,
	0, 0, 443, 444, 445, 467, 0, 429, 491, 608,
	0, 0, 0, 0, 0, 0, 0, 541, 553, 587,
	0, 596, 597, 599, 601, 600, 603, 0, 614, 482,
	483, 615, 593, 372, 0, 497, 530, 519, 602, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 342, 534, 516, 526, 517, 502, 503,
	504, 511, 322, 505, 506, 507, 477, 508, 478, 509,
	510, 0, 533, 484, 403, 356, 551, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3787, 0, 206, 808, 0, 0, 0,
	0, 0, 285, 207, 479, 598, 481, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 275,
	408, 425, 286, 399, 438, 291, 406, 281, 371, 395,
	0, 0, 277, 423, 405, 353, 332, 333, 276, 0,
	390, 310, 324, 307, 369, 0, 422, 450, 306, 441,
	0, 433, 279, 0, 432, 368, 419, 424, 354, 348,
	278, 421, 352, 347, 336, 314, 466, 337, 338, 328,
	380, 346, 381, 329, 358, 357, 359, 0, 0, 0,
	0, 0, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 0, 0, 595,
	0, 435, 0, 0, 0, 0, 0, 0, 407, 0,
	0, 339, 0, 0, 0, 451, 0, 393, 374, 617,
	0, 0, 391, 344, 420, 382, 426, 409, 434, 387,
	383, 270, 410, 309, 355, 282, 284, 304, 311, 313,
	315, 316, 364, 365, 377, 398, 411, 412, 413, 308,
	292, 392, 293, 326, 294, 271, 300, 298, 301, 400,
	302, 273, 378, 417, 0, 321, 388, 351, 274, 350,
	379, 416, 415, 283, 442, 448, 449, 538, 0, 454,
	618, 619, 620, 463, 468, 469, 470, 472, 473, 474,
	475, 539, 556, 523, 493, 456, 547, 490, 494, 495,
	559, 0, 0, 0, 447, 340, 341, 0, 319, 267,
	268, 613, 305, 370, 561, 594, 486, 0, 548, 487,
	496, 297, 520, 532, 531, 366, 446, 0, 543, 546,
	476, 612, 0, 540, 555, 616, 554, 609, 376, 0,
	397, 552, 499, 0, 544, 518, 0, 545, 514, 549,
	0, 488, 0, 404, 428, 440, 457, 460, 489, 574,
	575, 576, 272, 459, 578, 579, 580, 581, 582, 583,
	584, 577, 431, 521, 498, 524, 439, 501, 500, 0,
	0, 535, 455, 536, 537, 360, 361, 362, 363, 323,
	562, 290, 458, 386, 0, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 527, 528, 525, 621, 0, 585,
	586, 0, 0, 452, 453, 318, 325, 471, 327, 289,
	375, 320, 437, 334, 0, 464, 529, 465, 588, 591,
	589, 590, 367, 330, 331, 401, 335, 345, 389, 436,
	373, 394, 287, 427, 402, 349, 515, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 570, 569, 568, 567, 566, 565,
	564, 563, 0, 0, 512, 414, 299, 261, 295, 296,
	303, 610, 607, 418, 611, 0, 269, 492, 343, 0,
	384, 317, 557, 558, 0, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 262, 225, 226, 227, 228, 229,
	230, 231, 234, 235, 236, 237, 238, 239, 240, 241,
	560, 232, 233, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 0, 0, 0,
	263, 264, 265, 266, 0, 0, 257, 258, 259, 260,
	0, 0, 0, 443, 444, 445, 467, 0, 429, 491,
	608, 0, 0, 0, 0, 0, 0, 0, 541, 553,
	587, 0, 596, 597, 599, 601, 600, 603, 0, 614,
	482, 483, 615, 593, 372, 0, 497, 530, 519, 602,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 342, 534, 516, 526, 517, 502,
	503, 504, 511, 322, 505, 506, 507, 477, 508, 478,
	509, 510, 0, 533, 484, 403, 356, 551, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 1455,
	0, 0, 0, 285, 207, 479, 598, 481, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 0, 0, 0, 0, 0,
	275, 408, 425, 286, 399, 438, 291, 406, 281, 371,
	395, 0, 0, 277, 423, 405, 353, 332, 333, 276,
	0, 390, 310, 324, 307, 369, 0, 422, 450, 306,
	441, 0, 433, 279, 0, 432, 368, 419, 424, 354,
	348, 278, 421, 352, 347, 336, 314, 466, 337, 338,
	328, 380, 346, 381, 329, 358, 357, 359, 0, 0,
	0, 0, 0, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 0, 0,
	595, 0, 435, 0, 0, 0, 0, 0, 0, 407,
	0, 0, 339, 0, 0, 0, 451, 0, 393, 374,
	617, 0, 0, 391, 344, 420, 382, 426, 409, 434,
	387, 383, 270, 410, 309, 355, 282, 284, 304, 311,
	313, 315, 316, 364, 365, 377, 398, 411, 412, 413,
	308, 292, 392, 293, 326, 294, 271, 300, 298, 301,
	400, 302, 273, 378, 417, 0, 321, 388, 351, 274,
	350, 379, 416, 415, 283, 442, 448, 449, 538, 0,
	454, 618, 619, 620, 463, 468, 469, 470, 472, 473,
	474, 475, 539, 556, 523, 493, 456, 547, 490, 494,
	495, 559, 0, 0, 0, 447, 340, 341, 0, 319,
	267, 268, 613, 305, 370, 561, 594, 486, 0, 548,
	487, 496, 297, 520, 532, 531, 366, 446, 0, 543,
	546, 476, 612, 0, 540, 555, 616, 554, 609, 376,
	0, 397, 552, 499, 0, 544, 518, 0, 545, 514,
	549, 0, 488, 0, 404, 428, 440, 457, 460, 489,
	574, 575, 576, 272, 459, 578, 579, 580, 581, 582,
	583, 584, 577, 431, 521, 498, 524, 439, 501, 500,
	0, 0, 535, 455, 536, 537, 360, 361, 362, 363,
	323, 562, 290, 458, 386, 0, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 527, 528, 525, 621, 0,
	585, 586, 0, 0, 452, 453, 318, 325, 471, 327,
	289, 375, 320, 437, 334, 0, 464, 529, 465, 588,
	591, 589, 590, 367, 330, 331, 401, 335, 345, 389,
	436, 373, 394, 287, 427, 402, 349, 515, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 569, 568, 567, 566,
	565, 564, 563, 0, 0, 512, 414, 299, 261, 295,
	296, 303, 610, 607, 418, 611, 0, 269, 492, 343,
	0, 384, 317, 557, 558, 0, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 262, 225, 226, 227, 228,
	229, 230, 231, 234, 235, 236, 237, 238, 239, 240,
	241, 560, 232, 233, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 0, 0,
	0, 263, 264, 265, 266, 0, 0, 257, 258, 259,
	260, 0, 0, 0, 443, 444, 445, 467, 0, 429,
	491, 608, 0, 0, 0, 0, 0, 0, 0, 541,
	553, 587, 0, 596, 597, 599, 601, 600, 603, 0,
	614, 482, 483, 615, 593, 372, 0, 497, 530, 519,
	602, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 342, 534, 516, 526, 517,
	502, 503, 504, 511, 322, 505, 506, 507, 477, 508,
	478, 509, 510, 0, 533, 484, 403, 356, 551, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	1455, 0, 0, 0, 285, 207, 479, 598, 481, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1662, 0, 0, 0, 0, 0,
	0, 275, 408, 425, 286, 399, 438, 291, 406, 281,
	371, 395, 0, 0, 277, 423, 405, 353, 332, 333,
	276, 0, 390, 310, 324, 307, 369, 0, 422, 450,
	306, 441, 0, 433, 279, 0, 432, 368, 419, 424,
	354, 348, 278, 421, 352, 347, 336, 314, 466, 337,
	338, 328, 380, 346, 381, 329, 358, 357, 359, 0,
	0, 0, 0, 0, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	0, 595, 0, 435, 0, 0, 0, 0, 0, 0,
	407, 0, 0, 339, 0, 0, 0, 451, 0, 393,
	374, 617, 0, 0, 391, 344, 420, 382, 426, 409,
	434, 387, 383, 270, 410, 309, 355, 282, 284, 304,
	311, 313, 315, 316, 364, 365, 377, 398, 411, 412,
	413, 308, 292, 392, 293, 326, 294, 271, 300, 298,
	301, 400, 302, 273, 378, 417, 0, 321, 388, 351,
	274, 350, 379, 416, 415, 283, 442, 448, 449, 538,
	0, 454, 618, 619, 620, 463, 468, 469, 470, 472,
	473, 474, 475, 539, 556, 523, 493, 456, 547, 490,
	494, 495, 559, 0, 0, 0, 447, 340, 341, 0,
	319, 267, 268, 613, 305, 370, 561, 594, 486, 0,
	548, 487, 496, 297, 520, 532, 531, 366, 446, 0,
	543, 546, 476, 612, 0, 540, 555, 616, 554, 609,
	376, 0, 397, 552, 499, 0, 544, 518, 0, 545,
	514, 549, 0, 488, 0, 404, 428, 440, 457, 460,
	489, 574, 575, 576, 272, 459, 578, 579, 580, 581,
	582, 583, 584, 577, 431, 521, 498, 524, 439, 501,
	500, 0, 0, 535, 455, 536, 537, 360, 361, 362,
	363, 323, 562, 290, 458, 386, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 527, 528, 525, 621,
	0, 585, 586, 0, 0, 452, 453, 318, 325, 471,
	327, 289, 375, 320, 437, 334, 0, 464, 529, 465,
	588, 591, 589, 590, 367, 330, 331, 401, 335, 345,
	389, 436, 373, 394, 287, 427, 402, 349, 515, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 570, 569, 568, 567,
	566, 565, 564, 563, 0, 0, 512, 414, 299, 261,
	295, 296, 303, 610, 607, 418, 611, 0, 269, 492,
	343, 0, 384, 317, 557, 558, 0, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 262, 225, 226, 227,
	228, 229, 230, 231, 234, 235, 236, 237, 238, 239,
	240, 241, 560, 232, 233, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 0,
	0, 0, 263, 264, 265, 266, 0, 0, 257, 258,
	259, 260, 0, 0, 0, 443, 444, 445, 467, 0,
	429, 491, 608, 0, 0, 0, 0, 0, 0, 0,
	541, 553, 587, 0, 596, 597, 599, 601, 600, 603,
	0, 614, 482, 483, 615, 593, 372, 0, 497, 530,
	519, 602, 485, 0, 0, 0, 0, 0, 2375, 0,
	0, 0, 0, 312, 0, 0, 342, 534, 516, 526,
	517, 502, 503, 504, 511, 322, 505, 506, 507, 477,
	508, 478, 509, 510, 0, 533, 484, 403, 356, 551,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 2377, 0, 0, 0, 285, 207, 479, 598, 481,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 408, 425, 286, 399, 438, 291, 406,
	281, 371, 395, 0, 0, 277, 423, 405, 353, 332,
	333, 276, 0, 390, 310, 324, 307, 369, 0, 422,
	450, 306, 441, 0, 433, 279, 0, 432, 368, 419,
	424, 354, 348, 278, 421, 352, 347, 336, 314, 466,
	337, 338, 328, 380, 346, 381, 329, 358, 357, 359,
	0, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 595, 0, 435, 0, 0, 0, 0, 0,
	0, 407, 0, 0, 339, 0, 0, 0, 451, 0,
	393, 374, 617, 0, 0, 391, 344, 420, 382, 426,
	409, 434, 387, 383, 270, 410, 309, 355, 282, 284,
	304, 311, 313, 315, 316, 364, 365, 377, 398, 411,
	412, 413, 308, 292, 392, 293, 326, 294, 271, 300,
	298, 301, 400, 302, 273, 378, 417, 0, 321, 388,
	351, 274, 350, 379, 416, 415, 283, 442, 448, 449,
	538, 0, 454, 618, 619, 620, 463, 468, 469, 470,
	472, 473, 474, 475, 539, 556, 523, 493, 456, 547,
	490, 494, 495, 559, 0, 0, 0, 447, 340, 341,
	0, 319, 267, 268, 613, 305, 370, 561, 594, 486,
	0, 548, 487, 496, 297, 520, 532, 531, 366, 446,
	0, 543, 546, 476, 612, 0, 540, 555, 616, 554,
	609, 376, 0, 397, 552, 499, 0, 544, 518, 0,
	545, 514, 549, 0, 488, 0, 404, 428, 440, 457,
	460, 489, 574, 575, 576, 272, 459, 578, 579, 580,
	581, 582, 583, 584, 577, 431, 521, 498, 524, 439,
	501, 500, 0, 0, 535, 455, 536, 537, 360, 361,
	362, 363, 323, 562, 290, 458, 386, 0, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 528, 525,
	621, 0, 585, 586, 0, 0, 452, 453, 318, 325,
	471, 327, 289, 375, 320, 437, 334, 0, 464, 529,
	465, 588, 591, 589, 590, 367, 330, 331, 401, 335,
	345, 389, 436, 373, 394, 287, 427, 402, 349, 515,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 569, 568,
	567, 566, 565, 564, 563, 0, 0, 512, 414, 299,
	261, 295, 296, 303, 610, 607, 418, 611, 0, 269,
	492, 343, 0, 384, 317, 557, 558, 0, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 262, 225, 226,
	227, 228, 229, 230, 231, 234, 235, 236, 237, 238,
	239, 240, 241, 560, 232, 233, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	0, 0, 0, 263, 264, 265, 266, 0, 0, 257,
	258, 259, 260, 0, 0, 0, 443, 444, 445, 467,
	0, 429, 491, 608, 0, 0, 0, 0, 0, 0,
	0, 541, 553, 587, 0, 596, 597, 599, 601, 600,
	603, 0, 614, 482, 483, 615, 593, 372, 0, 497,
	530, 519, 602, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 342, 534, 516,
	526, 517, 502, 503, 504, 511, 322, 505, 506, 507,
	477, 508, 478, 509, 510, 0, 533, 484, 403, 356,
	551, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 2993, 2995, 0, 0, 285, 207, 479, 598,
	481, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 408, 425, 286, 399, 438, 291,
	406, 281, 371, 395, 0, 0, 277, 423, 405, 353,
	332, 333, 276, 0, 390, 310, 324, 307, 369, 0,
	422, 450, 306, 441, 0, 433, 279, 0, 432, 368,
	419, 424, 354, 348, 278, 421, 352, 347, 336, 314,
	466, 337, 338, 328, 380, 346, 381, 329, 358, 357,
	359, 0, 0, 0, 0, 0, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 595, 0, 435, 0, 0, 0, 0,
	0, 0, 407, 0, 0, 339, 0, 0, 0, 451,
	0, 393, 374, 617, 0, 0, 391, 344, 420, 382,
	426, 409, 434, 387, 383, 270, 410, 309, 355, 282,
	284, 304, 311, 313, 315, 316, 364, 365, 377, 398,
	411, 412, 413, 308, 292, 392, 293, 326, 294, 271,
	300, 298, 301, 400, 302, 273, 378, 417, 0, 321,
	388, 351, 274, 350, 379, 416, 415, 283, 442, 448,
	449, 538, 0, 454, 618, 619, 620, 463, 468, 469,
	470, 472, 473, 474, 475, 539, 556, 523, 493, 456,
	547, 490, 494, 495, 559, 0, 0, 0, 447, 340,
	341, 0, 319, 267, 268, 613, 305, 370, 561, 594,
	486, 0, 548, 487, 496, 297, 520, 532, 531, 366,
	446, 0, 543, 546, 476, 612, 0, 540, 555, 616,
	554, 609, 376, 0, 397, 552, 499, 0, 544, 518,
	0, 545, 514, 549, 0, 488, 0, 404, 428, 440,
	457, 460, 489, 574, 575, 576, 272, 459, 578, 579,
	580, 581, 582, 583, 584, 577, 431, 521, 498, 524,
	439, 501, 500, 0, 0, 535, 455, 536, 537, 360,
	361, 362, 363, 323, 562, 290, 458, 386, 0, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 528,
	525, 621, 0, 585, 586, 0, 0, 452, 453, 318,
	325, 471, 327, 289, 375, 320, 437, 334, 0, 464,
	529, 465, 588, 591, 589, 590, 367, 330, 331, 401,
	335, 345, 389, 436, 373, 394, 287, 427, 402, 349,
	515, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 569,
	568, 567, 566, 565, 564, 563, 0, 0, 512, 414,
	299, 261, 295, 296, 303, 610, 607, 418, 611, 0,
	269, 492, 343, 0, 384, 317, 557, 558, 0, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 262, 225,
	226, 227, 228, 229, 230, 231, 234, 235, 236, 237,
	238, 239, 240, 241, 560, 232, 233, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 0, 0, 0, 263, 264, 265, 266, 0, 0,
	257, 258, 259, 260, 0, 0, 0, 443, 444, 445,
	467, 0, 429, 491, 608, 0, 0, 0, 0, 0,
	0, 0, 541, 553, 587, 0, 596, 597, 599, 601,
	600, 603, 0, 614, 482, 483, 615, 593, 372, 0,
	497, 530, 519, 602, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 2396, 0, 342, 534,
	516, 526, 517, 502, 503, 504, 511, 322, 505, 506,
	507, 477, 508, 478, 509, 510, 0, 533, 484, 403,
	356, 551, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 1455, 0, 0, 0, 285, 207, 479,
	598, 481, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 408, 425, 286, 399, 438,
	291, 406, 281, 371, 395, 0, 0, 277, 423, 405,
	353, 332, 333, 276, 0, 390, 310, 324, 307, 369,
	0, 422, 450, 306, 441, 0, 433, 279, 0, 432,
	368, 419, 424, 354, 348, 278, 421, 352, 347, 336,
	314, 466, 337, 338, 328, 380, 346, 381, 329, 358,
	357, 359, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 595, 0, 435, 0, 0, 0,
	0, 0, 0, 407, 0, 0, 339, 0, 0, 0,
	451, 0, 393, 374, 617, 0, 0, 391, 344, 420,
	382, 426, 409, 434, 387, 383, 270, 410, 309, 355,
	282, 284, 304, 311, 313, 315, 316, 364, 365, 377,
	398, 411, 412, 413, 308, 292, 392, 293, 326, 294,
	271, 300, 298, 301, 400, 302, 273, 378, 417, 0,
	321, 388, 351, 274, 350, 379, 416, 415, 283, 442,
	448, 449, 538, 0, 454, 618, 619, 620, 463, 468,
	469, 470, 472, 473, 474, 475, 539, 556, 523, 493,
	456, 547, 490, 494, 495, 559, 0, 0, 0, 447,
	340, 341, 0, 319, 267, 268, 613, 305, 370, 561,
	594, 486, 0, 548, 487, 496, 297, 520, 532, 531,
	366, 446, 0, 543, 546, 476, 612, 0, 540, 555,
	616, 554, 609, 376, 0, 397, 552, 499, 0, 544,
	518, 0, 545, 514, 549, 0, 488, 0, 404, 428,
	440, 457, 460, 489, 574, 575, 576, 272, 459, 578,
	579, 580, 581, 582, 583, 584, 577, 431, 521, 498,
	524, 439, 501, 500, 0, 0, 535, 455, 536, 537,
	360, 361, 362, 363, 323, 562, 290, 458, 386, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	528, 525, 621, 0, 585, 586, 0, 0, 452, 453,
	318, 325, 471, 327, 289, 375, 320, 437, 334, 0,
	464, 529, 465, 588, 591, 589, 590, 367, 330, 331,
	401, 335, 345, 389, 436, 373, 394, 287, 427, 402,
	349, 515, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	569, 568, 567, 566, 565, 564, 563, 0, 0, 512,
	414, 299, 261, 295, 296, 303, 610, 607, 418, 611,
	0, 269, 492, 343, 0, 384, 317, 557, 558, 0,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 262,
	225, 226, 227, 228, 229, 230, 231, 234, 235, 236,
	237, 238, 239, 240, 241, 560, 232, 233, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 0, 0, 0, 263, 264, 265, 266, 0,
	0, 257, 258, 259, 260, 0, 0, 0, 443, 444,
	445, 467, 0, 429, 491, 608, 0, 0, 0, 0,
	0, 0, 0, 541, 553, 587, 0, 596, 597, 599,
	601, 600, 603, 0, 614, 482, 483, 615, 593, 372,
	0, 497, 530, 519, 602, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 312, 0, 0, 342,
	534, 516, 526, 517, 502, 503, 504, 511, 322, 505,
	506, 507, 477, 508, 478, 509, 510, 0, 533, 484,
	403, 356, 551, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 285, 207,
	479, 598, 481, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 408, 425, 286, 399,
	438, 291, 406, 281, 371, 395, 0, 0, 277, 423,
	405, 353, 332, 333, 276, 0, 390, 310, 324, 307,
	369, 0, 422, 450, 306, 441, 0, 433, 279, 0,
	432, 368, 419, 424, 354, 348, 278, 421, 352, 347,
	336, 314, 466, 337, 338, 328, 380, 346, 381, 329,
	358, 357, 359, 0, 0, 0, 0, 0, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 595, 0, 435, 0, 627,
	0, 0, 0, 0, 407, 0, 0, 339, 0, 0,
	0, 451, 0, 393, 374, 617, 0, 0, 391, 344,
	420, 382, 426, 409, 434, 387, 383, 270, 410, 309,
	355, 282, 284, 304, 311, 313, 315, 316, 364, 365,
	377, 398, 411, 412, 413, 308, 292, 392, 293, 326,
	294, 271, 300, 298, 301, 400, 302, 273, 378, 417,
	0, 321, 388, 351, 274, 350, 379, 416, 415, 283,
	442, 448, 449, 538, 0, 454, 618, 619, 620, 463,
	468, 469, 470, 472, 473, 474, 475, 539, 556, 523,
	493, 456, 547, 490, 494, 495, 559, 0, 0, 0,
	447, 340, 341, 0, 319, 267, 268, 613, 305, 370,
	561, 594, 486, 0, 548, 487, 496, 297, 520, 532,
	531, 366, 446, 0, 543, 546, 476, 612, 0, 540,
	555, 616, 554, 609, 376, 0, 397, 552, 499, 0,
	544, 518, 0, 545, 514, 549, 0, 488, 0, 404,
	428, 440, 457, 460, 489, 574, 575, 576, 272, 459,
	578, 579, 580, 581, 582, 583, 584, 577, 431, 521,
	498, 524, 439, 501, 500, 0, 0, 535, 455, 536,
	537, 360, 361, 362, 363, 323, 562, 290, 458, 386,
	0, 522, 0, 0, 0, 0, 0, 0, 0, 0,
	527, 528, 525, 621, 0, 585, 586, 0, 0, 452,
	453, 318, 325, 471, 327, 289, 375, 320, 437, 334,
	0, 464, 529, 465, 588, 591, 589, 590, 367, 330,
	331, 401, 335, 345, 389, 436, 373, 394, 287, 427,
	402, 349, 515, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	570, 569, 568, 567, 566, 565, 564, 563, 0, 0,
	512, 414, 299, 261, 295, 296, 303, 610, 607, 418,
	611, 0, 269, 492, 343, 0, 384, 317, 557, 558,
	0, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	262, 225, 226, 227, 228, 229, 230, 231, 234, 235,
	236, 237, 238, 239, 240, 241, 560, 232, 233, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 0, 0, 0, 263, 264, 265, 266,
	0, 0, 257, 258, 259, 260, 0, 0, 0, 443,
	444, 445, 467, 0, 429, 491, 608, 0, 0, 0,
	0, 0, 0, 0, 541, 553, 587, 0, 596, 597,
	599, 601, 600, 603, 0, 614, 482, 483, 615, 593,
	372, 0, 497, 530, 519, 602, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	342, 534, 516, 526, 517, 502, 503, 504, 511, 322,
	505, 506, 507, 477, 508, 478, 509, 510, 0, 533,
	484, 403, 356, 551, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 808, 0, 0, 0, 0, 0, 285,
	207, 479, 598, 481, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 408, 425, 286,
	399, 438, 291, 406, 281, 371, 395, 0, 0, 277,
	423, 405, 353, 332, 333, 276, 0, 390, 310, 324,
	307, 369, 0, 422, 450, 306, 441, 0, 433, 279,
	0, 432, 368, 419, 424, 354, 348, 278, 421, 352,
	347, 336, 314, 466, 337, 338, 328, 380, 346, 381,
	329, 358, 357, 359, 0, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 595, 0, 435, 0,
	0, 0, 0, 0, 0, 407, 0, 0, 339, 0,
	0, 0, 451, 0, 393, 374, 617, 0, 0, 391,
	344, 420, 382, 426, 409, 434, 387, 383, 270, 410,
	309, 355, 282, 284, 304, 311, 313, 315, 316, 364,
	365, 377, 398, 411, 412, 413, 308, 292, 392, 293,
	326, 294, 271, 300, 298, 301, 400, 302, 273, 378,
	417, 0, 321, 388, 351, 274, 350, 379, 416, 415,
	283, 442, 448, 449, 538, 0, 454, 618, 619, 620,
	463, 468, 469, 470, 472, 473, 474, 475, 539, 556,
	523, 493, 456, 547, 490, 494, 495, 559, 0, 0,
	0, 447, 340, 341, 0, 319, 267, 268, 613, 305,
	370, 561, 594, 486, 0, 548, 487, 496, 297, 520,
	532, 531, 366, 446, 0, 543, 546, 476, 612, 0,
	540, 555, 616, 554, 609, 376, 0, 397, 552, 499,
	0, 544, 518, 0, 545, 514, 549, 0, 488, 0,
	404, 428, 440, 457, 460, 489, 574, 575, 576, 272,
	459, 578, 579, 580, 581, 582, 583, 584, 577, 431,
	521, 498, 524, 439, 501, 500, 0, 0, 535, 455,
	536, 537, 360, 361, 362, 363, 323, 562, 290, 458,
	386, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 525, 621, 0, 585, 586, 0, 0,
	452, 453, 318, 325, 471, 327, 289, 375, 320, 437,
	334, 0, 464, 529, 465, 588, 591, 589, 590, 367,
	330, 331, 401, 335, 345, 389, 436, 373, 394, 287,
	427, 402, 349, 515, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 569, 568, 567, 566, 565, 564, 563, 0,
	0, 512, 414, 299, 261, 295, 296, 303, 610, 607,
	418, 611, 0, 269, 492, 343, 0, 384, 317, 557,
	558, 0, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 262, 225, 226, 227, 228, 229, 230, 231, 234,
	235, 236, 237, 238, 239, 240, 241, 560, 232, 233,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 0, 0, 0, 263, 264, 265,
	266, 0, 0, 257, 258, 259, 260, 0, 0, 0,
	443, 444, 445, 467, 0, 429, 491, 608, 0, 0,
	0, 0, 0, 0, 0, 541, 553, 587, 0, 596,
	597, 599, 601, 600, 603, 0, 614, 482, 483, 615,
	593, 372, 0, 497, 530, 519, 602, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 342, 534, 516, 526, 517, 502, 503, 504, 511,
	322, 505, 506, 507, 477, 508, 478, 509, 510, 0,
	533, 484, 403, 356, 551, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3766, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	285, 207, 479, 598, 481, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 408, 425,
	286, 399, 438, 291, 406, 281, 371, 395, 0, 0,
	277, 423, 405, 353, 332, 333, 276, 0, 390, 310,
	324, 307, 369, 0, 422, 450, 306, 441, 0, 433,
	279, 0, 432, 368, 419, 424, 354, 348, 278, 421,
	352, 347, 336, 314, 466, 337, 338, 328, 380, 346,
	381, 329, 358, 357, 359, 0, 0, 0, 0, 0,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 595, 0, 435,
	0, 0, 0, 0, 0, 0, 407, 0, 0, 339,
	0, 0, 0, 451, 0, 393, 374, 617, 0, 0,
	391, 344, 420, 382, 426, 409, 434, 387, 383, 270,
	410, 309, 355, 282, 284, 304, 311, 313, 315, 316,
	364, 365, 377, 398, 411, 412, 413, 308, 292, 392,
	293, 326, 294, 271, 300, 298, 301, 400, 302, 273,
	378, 417, 0, 321, 388, 351, 274, 350, 379, 416,
	415, 283, 442, 448, 449, 538, 0, 454, 618, 619,
	620, 463, 468, 469, 470, 472, 473, 474, 475, 539,
	556, 523, 493, 456, 547, 490, 494, 495, 559, 0,
	0, 0, 447, 340, 341, 0, 319, 267, 268, 613,
	305, 370, 561, 594, 486, 0, 548, 487, 496, 297,
	520, 532, 531, 366, 446, 0, 543, 546, 476, 612,
	0, 540, 555, 616, 554, 609, 376, 0, 397, 552,
	499, 0, 544, 518, 0, 545, 514, 549, 0, 488,
	0, 404, 428, 440, 457, 460, 489, 574, 575, 576,
	272, 459, 578, 579, 580, 581, 582, 583, 584, 577,
	431, 521, 498, 524, 439, 501, 500, 0, 0, 535,
	455, 536, 537, 360, 361, 362, 363, 323, 562, 290,
	458, 386, 0, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 527, 528, 525, 621, 0, 585, 586, 0,
	0, 452, 453, 318, 325, 471, 327, 289, 375, 320,
	437, 334, 0, 464, 529, 465, 588, 591, 589, 590,
	367, 330, 331, 401, 335, 345, 389, 436, 373, 394,
	287, 427, 402, 349, 515, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 570, 569, 568, 567, 566, 565, 564, 563,
	0, 0, 512, 414, 299, 261, 295, 296, 303, 610,
	607, 418, 611, 0, 269, 492, 343, 0, 384, 317,
	557, 558, 0, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 262, 225, 226, 227, 228, 229, 230, 231,
	234, 235, 236, 237, 238, 239, 240, 241, 560, 232,
	233, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 0, 0, 0, 263, 264,
	265, 266, 0, 0, 257, 258, 259, 260, 0, 0,
	0, 443, 444, 445, 467, 0, 429, 491, 608, 0,
	0, 0, 0, 0, 0, 0, 541, 553, 587, 0,
	596, 597, 599, 601, 600, 603, 0, 614, 482, 483,
	615, 593, 372, 0, 497, 530, 519, 602, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 342, 534, 516, 526, 517, 502, 503, 504,
	511, 322, 505, 506, 507, 477, 508, 478, 509, 510,
	0, 533, 484, 403, 356, 551, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 3549, 0, 0,
	0, 285, 207, 479, 598, 481, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 408,
	425, 286, 399, 438, 291, 406, 281, 371, 395, 0,
	0, 277, 423, 405, 353, 332, 333, 276, 0, 390,
	310, 324, 307, 369, 0, 422, 450, 306, 441, 0,
	433, 279, 0, 432, 368, 419, 424, 354, 348, 278,
	421, 352, 347, 336, 314, 466, 337, 338, 328, 380,
	346, 381, 329, 358, 357, 359, 0, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 595, 0,
	435, 0, 0, 0, 0, 0, 0, 407, 0, 0,
	339, 0, 0, 0, 451, 0, 393, 374, 617, 0,
	0, 391, 344, 420, 382, 426, 409, 434, 387, 383,
	270, 410, 309, 355, 282, 284, 304, 311, 313, 315,
	316, 364, 365, 377, 398, 411, 412, 413, 308, 292,
	392, 293, 326, 294, 271, 300, 298, 301, 400, 302,
	273, 378, 417, 0, 321, 388, 351, 274, 350, 379,
	416, 415, 283, 442, 448, 449, 538, 0, 454, 618,
	619, 620, 463, 468, 469, 470, 472, 473, 474, 475,
	539, 556, 523, 493, 456, 547, 490, 494, 495, 559,
	0, 0, 0, 447, 340, 341, 0, 319, 267, 268,
	613, 305, 370, 561, 594, 486, 0, 548, 487, 496,
	297, 520, 532, 531, 366, 446, 0, 543, 546, 476,
	612, 0, 540, 555, 616, 554, 609, 376, 0, 397,
	552, 499, 0, 544, 518, 0, 545, 514, 549, 0,
	488, 0, 404, 428, 440, 457, 460, 489, 574, 575,
	576, 272, 459, 578, 579, 580, 581, 582, 583, 584,
	577, 431, 521, 498, 524, 439, 501, 500, 0, 0,
	535, 455, 536, 537, 360, 361, 362, 363, 323, 562,
	290, 458, 386, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 528, 525, 621, 0, 585, 586,
	0, 0, 452, 453, 318, 325, 471, 327, 289, 375,
	320, 437, 334, 0, 464, 529, 465, 588, 591, 589,
	590, 367, 330, 331, 401, 335, 345, 389, 436, 373,
	394, 287, 427, 402, 349, 515, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570, 569, 568, 567, 566, 565, 564,
	563, 0, 0, 512, 414, 299, 261, 295, 296, 303,
	610, 607, 418, 611, 0, 269, 492, 343, 0, 384,
	317, 557, 558, 0, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 262, 225, 226, 227, 228, 229, 230,
	231, 234, 235, 236, 237, 238, 239, 240, 241, 560,
	232, 233, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 0, 0, 0, 263,
	264, 265, 266, 0, 0, 257, 258, 259, 260, 0,
	0, 0, 443, 444, 445, 467, 0, 429, 491, 608,
	0, 0, 0, 0, 0, 0, 0, 541, 553, 587,
	0, 596, 597, 599, 601, 600, 603, 0, 614, 482,
	483, 615, 593, 372, 0, 497, 530, 519, 602, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 342, 534, 516, 526, 517, 502, 503,
	504, 511, 322, 505, 506, 507, 477, 508, 478, 509,
	510, 0, 533, 484, 403, 356, 551, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 285, 207, 479, 598, 481, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 275,
	408, 425, 286, 399, 438, 291, 406, 281, 371, 395,
	0, 0, 277, 423, 405, 353, 332, 333, 276, 0,
	390, 310, 324, 307, 369, 0, 422, 450, 306, 441,
	0, 433, 279, 0, 432, 368, 419, 424, 354, 348,
	278, 421, 352, 347, 336, 314, 466, 337, 338, 328,
	380, 346, 381, 329, 358, 357, 359, 0, 0, 0,
	0, 0, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 0, 0, 595,
	0, 435, 0, 0, 0, 3676, 0, 0, 407, 0,
	0, 339, 0, 0, 0, 451, 0, 393, 374, 617,
	0, 0, 391, 344, 420, 382, 426, 409, 434, 387,
	383, 270, 410, 309, 355, 282, 284, 304, 311, 313,
	315, 316, 364, 365, 377, 398, 411, 412, 413, 308,
	292, 392, 293, 326, 294, 271, 300, 298, 301, 400,
	302, 273, 378, 417, 0, 321, 388, 351, 274, 350,
	379, 416, 415, 283, 442, 448, 449, 538, 0, 454,
	618, 619, 620, 463, 468, 469, 470, 472, 473, 474,
	475, 539, 556, 523, 493, 456, 547, 490, 494, 495,
	559, 0, 0, 0, 447, 340, 341, 0, 319, 267,
	268, 613, 305, 370, 561, 594, 486, 0, 548, 487,
	496, 297, 520, 532, 531, 366, 446, 0, 543, 546,
	476, 612, 0, 540, 555, 616, 554, 609, 376, 0,
	397, 552, 499, 0, 544, 518, 0, 545, 514, 549,
	0, 488, 0, 404, 428, 440, 457, 460, 489, 574,
	575, 576, 272, 459, 578, 579, 580, 581, 582, 583,
	584, 577, 431, 521, 498, 524, 439, 501, 500, 0,
	0, 535, 455, 536, 537, 360, 361, 362, 363, 323,
	562, 290, 458, 386, 0, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 527, 528, 525, 621, 0, 585,
	586, 0, 0, 452, 453, 318, 325, 471, 327, 289,
	375, 320, 437, 334, 0, 464, 529, 465, 588, 591,
	589, 590, 367, 330, 331, 401, 335, 345, 389, 436,
	373, 394, 287, 427, 402, 349, 515, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 570, 569, 568, 567, 566, 565,
	564, 563, 0, 0, 512, 414, 299, 261, 295, 296,
	303, 610, 607, 418, 611, 0, 269, 492, 343, 0,
	384, 317, 557, 558, 0, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 262, 225, 226, 227, 228, 229,
	230, 231, 234, 235, 236, 237, 238, 239, 240, 241,
	560, 232, 233, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 0, 0, 0,
	263, 264, 265, 266, 0, 0, 257, 258, 259, 260,
	0, 0, 0, 443, 444, 445, 467, 0, 429, 491,
	608, 0, 0, 0, 0, 0, 0, 0, 541, 553,
	587, 0, 596, 597, 599, 601, 600, 603, 0, 614,
	482, 483, 615, 593, 372, 0, 497, 530, 519, 602,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 342, 534, 516, 526, 517, 502,
	503, 504, 511, 322, 505, 506, 507, 477, 508, 478,
	509, 510, 0, 533, 484, 403, 356, 551, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3400, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 285, 207, 479, 598, 481, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 408, 425, 286, 399, 438, 291, 406, 281, 371,
	395, 0, 0, 277, 423, 405, 353, 332, 333, 276,
	0, 390, 310, 324, 307, 369, 0, 422, 450, 306,
	441, 0, 433, 279, 0, 432, 368, 419, 424, 354,
	348, 278, 421, 352, 347, 336, 314, 466, 337, 338,
	328, 380, 346, 381, 329, 358, 357, 359, 0, 0,
	0, 0, 0, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 0, 0,
	595, 0, 435, 0, 0, 0, 0, 0, 0, 407,
	0, 0, 339, 0, 0, 0, 451, 0, 393, 374,
	617, 0, 0, 391, 344, 420, 382, 426, 409, 434,
	387, 383, 270, 410, 309, 355, 282, 284, 304, 311,
	313, 315, 316, 364, 365, 377, 398, 411, 412, 413,
	308, 292, 392, 293, 326, 294, 271, 300, 298, 301,
	400, 302, 273, 378, 417, 0, 321, 388, 351, 274,
	350, 379, 416, 415, 283, 442, 448, 449, 538, 0,
	454, 618, 619, 620, 463, 468, 469, 470, 472, 473,
	474, 475, 539, 556, 523, 493, 456, 547, 490, 494,
	495, 559, 0, 0, 0, 447, 340, 341, 0, 319,
	267, 268, 613, 305, 370, 561, 594, 486, 0, 548,
	487, 496, 297, 520, 532, 531, 366, 446, 0, 543,
	546, 476, 612, 0, 540, 555, 616, 554, 609, 376,
	0, 397, 552, 499, 0, 544, 518, 0, 545, 514,
	549, 0, 488, 0, 404, 428, 440, 457, 460, 489,
	574, 575, 576, 272, 459, 578, 579, 580, 581, 582,
	583, 584, 577, 431, 521, 498, 524, 439, 501, 500,
	0, 0, 535, 455, 536, 537, 360, 361, 362, 363,
	323, 562, 290, 458, 386, 0, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 527, 528, 525, 621, 0,
	585, 586, 0, 0, 452, 453, 318, 325, 471, 327,
	289, 375, 320, 437, 334, 0, 464, 529, 465, 588,
	591, 589, 590, 367, 330, 331, 401, 335, 345, 389,
	436, 373, 394, 287, 427, 402, 349, 515, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 569, 568, 567, 566,
	565, 564, 563, 0, 0, 512, 414, 299, 261, 295,
	296, 303, 610, 607, 418, 611, 0, 269, 492, 343,
	0, 384, 317, 557, 558, 0, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 262, 225, 226, 227, 228,
	229, 230, 231, 234, 235, 236, 237, 238, 239, 240,
	241, 560, 232, 233, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 0, 0,
	0, 263, 264, 265, 266, 0, 0, 257, 258, 259,
	260, 0, 0, 0, 443, 444, 445, 467, 0, 429,
	491, 608, 0, 0, 0, 0, 0, 0, 0, 541,
	553, 587, 0, 596, 597, 599, 601, 600, 603, 0,
	614, 482, 483, 615, 593, 372, 0, 497, 530, 519,
	602, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 342, 534, 516, 526, 517,
	502, 503, 504, 511, 322, 505, 506, 507, 477, 508,
	478, 509, 510, 0, 533, 484, 403, 356, 551, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3564, 0, 206, 0, 0,
	0, 0, 0, 0, 285, 207, 479, 598, 481, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 408, 425, 286, 399, 438, 291, 406, 281,
	371, 395, 0, 0, 277, 423, 405, 353, 332, 333,
	276, 0, 390, 310, 324, 307, 369, 0, 422, 450,
	306, 441, 0, 433, 279, 0, 432, 368, 419, 424,
	354, 348, 278, 421, 352, 347, 336, 314, 466, 337,
	338, 328, 380, 346, 381, 329, 358, 357, 359, 0,
	0, 0, 0, 0, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	0, 595, 0, 435, 0, 0, 0, 0, 0, 0,
	407, 0, 0, 339, 0, 0, 0, 451, 0, 393,
	374, 617, 0, 0, 391, 344, 420, 382, 426, 409,
	434, 387, 383, 270, 410, 309, 355, 282, 284, 304,
	311, 313, 315, 316, 364, 365, 377, 398, 411, 412,
	413, 308, 292, 392, 293, 326, 294, 271, 300, 298,
	301, 400, 302, 273, 378, 417, 0, 321, 388, 351,
	274, 350, 379, 416, 415, 283, 442, 448, 449, 538,
	0, 454, 618, 619, 620, 463, 468, 469, 470, 472,
	473, 474, 475, 539, 556, 523, 493, 456, 547, 490,
	494, 495, 559, 0, 0, 0, 447, 340, 341, 0,
	319, 267, 268, 613, 305, 370, 561, 594, 486, 0,
	548, 487, 496, 297, 520, 532, 531, 366, 446, 0,
	543, 546, 476, 612, 0, 540, 555, 616, 554, 609,
	376, 0, 397, 552, 499, 0, 544, 518, 0, 545,
	514, 549, 0, 488, 0, 404, 428, 440, 457, 460,
	489, 574, 575, 576, 272, 459, 578, 579, 580, 581,
	582, 583, 584, 577, 431, 521, 498, 524, 439, 501,
	500, 0, 0, 535, 455, 536, 537, 360, 361, 362,
	363, 323, 562, 290, 458, 386, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 527, 528, 525, 621,
	0, 585, 586, 0, 0, 452, 453, 318, 325, 471,
	327, 289, 375, 320, 437, 334, 0, 464, 529, 465,
	588, 591, 589, 590, 367, 330, 331, 401, 335, 345,
	389, 436, 373, 394, 287, 427, 402, 349, 515, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 570, 569, 568, 567,
	566, 565, 564, 563, 0, 0, 512, 414, 299, 261,
	295, 296, 303, 610, 607, 418, 611, 0, 269, 492,
	343, 0, 384, 317, 557, 558, 0, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 262, 225, 226, 227,
	228, 229, 230, 231, 234, 235, 236, 237, 238, 239,
	240, 241, 560, 232, 233, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 0,
	0, 0, 263, 264, 265, 266, 0, 0, 257, 258,
	259, 260, 0, 0, 0, 443, 444, 445, 467, 0,
	429, 491, 608, 0, 0, 0, 0, 0, 0, 0,
	541, 553, 587, 0, 596, 597, 599, 601, 600, 603,
	0, 614, 482, 483, 615, 593, 372, 0, 497, 530,
	519, 602, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 342, 534, 516, 526,
	517, 502, 503, 504, 511, 322, 505, 506, 507, 477,
	508, 478, 509, 510, 0, 533, 484, 403, 356, 551,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 285, 207, 479, 598, 481,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 408, 425, 286, 399, 438, 291, 406,
	281, 371, 395, 0, 0, 277, 423, 405, 353, 332,
	333, 276, 0, 390, 310, 324, 307, 369, 0, 422,
	450, 306, 441, 0, 433, 279, 0, 432, 368, 419,
	424, 354, 348, 278, 421, 352, 347, 336, 314, 466,
	337, 338, 328, 380, 346, 381, 329, 358, 357, 359,
	0, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 595, 0, 435, 0, 0, 0, 3488, 0,
	0, 407, 0, 0, 339, 0, 0, 0, 451, 0,
	393, 374, 617, 0, 0, 391, 344, 420, 382, 426,
	409, 434, 387, 383, 270, 410, 309, 355, 282, 284,
	304, 311, 313, 315, 316, 364, 365, 377, 398, 411,
	412, 413, 308, 292, 392, 293, 326, 294, 271, 300,
	298, 301, 400, 302, 273, 378, 417, 0, 321, 388,
	351, 274, 350, 379, 416, 415, 283, 442, 448, 449,
	538, 0, 454, 618, 619, 620, 463, 468, 469, 470,
	472, 473, 474, 475, 539, 556, 523, 493, 456, 547,
	490, 494, 495, 559, 0, 0, 0, 447, 340, 341,
	0, 319, 267, 268, 613, 305, 370, 561, 594, 486,
	0, 548, 487, 496, 297, 520, 532, 531, 366, 446,
	0, 543, 546, 476, 612, 0, 540, 555, 616, 554,
	609, 376, 0, 397, 552, 499, 0, 544, 518, 0,
	545, 514, 549, 0, 488, 0, 404, 428, 440, 457,
	460, 489, 574, 575, 576, 272, 459, 578, 579, 580,
	581, 582, 583, 584, 577, 431, 521, 498, 524, 439,
	501, 500, 0, 0, 535, 455, 536, 537, 360, 361,
	362, 363, 323, 562, 290, 458, 386, 0, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 528, 525,
	621, 0, 585, 586, 0, 0, 452, 453, 318, 325,
	471, 327, 289, 375, 320, 437, 334, 0, 464, 529,
	465, 588, 591, 589, 590, 367, 330, 331, 401, 335,
	345, 389, 436, 373, 394, 287, 427, 402, 349, 515,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 569, 568,
	567, 566, 565, 564, 563, 0, 0, 512, 414, 299,
	261, 295, 296, 303, 610, 607, 418, 611, 0, 269,
	492, 343, 0, 384, 317, 557, 558, 0, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 262, 225, 226,
	227, 228, 229, 230, 231, 234, 235, 236, 237, 238,
	239, 240, 241, 560, 232, 233, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	0, 0, 0, 263, 264, 265, 266, 0, 0, 257,
	258, 259, 260, 0, 0, 0, 443, 444, 445, 467,
	0, 429, 491, 608, 0, 0, 0, 0, 0, 0,
	0, 541, 553, 587, 0, 596, 597, 599, 601, 600,
	603, 0, 614, 482, 483, 615, 593, 372, 0, 497,
	530, 519, 602, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 342, 534, 516,
	526, 517, 502, 503, 504, 511, 322, 505, 506, 507,
	477, 508, 478, 509, 510, 0, 533, 484, 403, 356,
	551, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 3026, 0, 0, 0, 285, 207, 479, 598,
	481, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 408, 425, 286, 399, 438, 291,
	406, 281, 371, 395, 0, 0, 277, 423, 405, 353,
	332, 333, 276, 0, 390, 310, 324, 307, 369, 0,
	422, 450, 306, 441, 0, 433, 279, 0, 432, 368,
	419, 424, 354, 348, 278, 421, 352, 347, 336, 314,
	466, 337, 338, 328, 380, 346, 381, 329, 358, 357,
	359, 0, 0, 0, 0, 0, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 595, 0, 435, 0, 0, 0, 0,
	0, 0, 407, 0, 0, 339, 0, 0, 0, 451,
	0, 393, 374, 617, 0, 0, 391, 344, 420, 382,
	426, 409, 434, 387, 383, 270, 410, 309, 355, 282,
	284, 304, 311, 313, 315, 316, 364, 365, 377, 398,
	411, 412, 413, 308, 292, 392, 293, 326, 294, 271,
	300, 298, 301, 400, 302, 273, 378, 417, 0, 321,
	388, 351, 274, 350, 379, 416, 415, 283, 442, 448,
	449, 538, 0, 454, 618, 619, 620, 463, 468, 469,
	470, 472, 473, 474, 475, 539, 556, 523, 493, 456,
	547, 490, 494, 495, 559, 0, 0, 0, 447, 340,
	341, 0, 319, 267, 268, 613, 305, 370, 561, 594,
	486, 0, 548, 487, 496, 297, 520, 532, 531, 366,
	446, 0, 543, 546, 476, 612, 0, 540, 555, 616,
	554, 609, 376, 0, 397, 552, 499, 0, 544, 518,
	0, 545, 514, 549, 0, 488, 0, 404, 428, 440,
	457, 460, 489, 574, 575, 576, 272, 459, 578, 579,
	580, 581, 582, 583, 584, 577, 431, 521, 498, 524,
	439, 501, 500, 0, 0, 535, 455, 536, 537, 360,
	361, 362, 363, 323, 562, 290, 458, 386, 0, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 528,
	525, 621, 0, 585, 586, 0, 0, 452, 453, 318,
	325, 471, 327, 289, 375, 320, 437, 334, 0, 464,
	529, 465, 588, 591, 589, 590, 367, 330, 331, 401,
	335, 345, 389, 436, 373, 394, 287, 427, 402, 349,
	515, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 569,
	568, 567, 566, 565, 564, 563, 0, 0, 512, 414,
	299, 261, 295, 296, 303, 610, 607, 418, 611, 0,
	269, 492, 343, 0, 384, 317, 557, 558, 0, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 262, 225,
	226, 227, 228, 229, 230, 231, 234, 235, 236, 237,
	238, 239, 240, 241, 560, 232, 233, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 0, 0, 0, 263, 264, 265, 266, 0, 0,
	257, 258, 259, 260, 0, 0, 0, 443, 444, 445,
	467, 0, 429, 491, 608, 0, 0, 0, 0, 0,
	0, 0, 541, 553, 587, 0, 596, 597, 599, 601,
	600, 603, 0, 614, 482, 483, 615, 593, 372, 0,
	497, 530, 519, 602, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 342, 534,
	516, 526, 517, 502, 503, 504, 511, 322, 505, 506,
	507, 477, 508, 478, 509, 510, 0, 533, 484, 403,
	356, 551, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 285, 207, 479,
	598, 481, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 408, 425, 286, 399, 438,
	291, 406, 281, 371, 395, 0, 0, 277, 423, 405,
	353, 332, 333, 276, 0, 390, 310, 324, 307, 369,
	0, 422, 450, 306, 441, 0, 433, 279, 0, 432,
	368, 419, 424, 354, 348, 278, 421, 352, 347, 336,
	314, 466, 337, 338, 328, 380, 346, 381, 329, 358,
	357, 359, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 595, 0, 435, 0, 0, 0,
	0, 0, 0, 407, 0, 0, 339, 0, 0, 0,
	451, 0, 393, 374, 617, 0, 0, 391, 344, 420,
	382, 426, 409, 434, 387, 383, 270, 410, 309, 355,
	282, 284, 304, 311, 313, 315, 316, 364, 365, 377,
	398, 411, 412, 413, 308, 292, 392, 293, 326, 294,
	271, 300, 298, 301, 400, 302, 273, 378, 417, 0,
	321, 388, 351, 274, 350, 379, 416, 415, 283, 442,
	448, 449, 538, 0, 454, 618, 619, 620, 463, 468,
	469, 470, 472, 473, 474, 475, 539, 556, 523, 493,
	456, 547, 490, 494, 495, 559, 0, 0, 0, 447,
	340, 341, 0, 319, 267, 268, 613, 305, 370, 561,
	594, 486, 0, 548, 487, 496, 297, 520, 532, 531,
	366, 446, 0, 543, 546, 476, 612, 0, 540, 555,
	616, 554, 609, 376, 0, 397, 552, 499, 0, 544,
	518, 0, 545, 514, 549, 0, 488, 0, 404, 428,
	440, 457, 460, 489, 574, 575, 576, 272, 459, 578,
	579, 580, 581, 582, 583, 584, 577, 431, 521, 498,
	524, 439, 501, 500, 0, 0, 535, 455, 536, 537,
	360, 361, 362, 363, 323, 562, 290, 458, 386, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	528, 525, 621, 0, 585, 586, 0, 0, 452, 453,
	318, 325, 471, 327, 289, 375, 320, 437, 334, 0,
	464, 529, 465, 588, 591, 589, 590, 367, 330, 331,
	401, 335, 345, 389, 436, 373, 394, 287, 427, 402,
	349, 515, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	569, 568, 567, 566, 565, 564, 563, 0, 0, 512,
	414, 299, 261, 295, 296, 303, 610, 607, 418, 611,
	0, 269, 492, 343, 0, 384, 317, 557, 558, 0,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 262,
	225, 226, 227, 228, 229, 230, 231, 234, 235, 236,
	237, 238, 239, 240, 241, 560, 232, 233, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 0, 0, 0, 263, 264, 265, 266, 0,
	0, 257, 258, 259, 260, 0, 0, 0, 443, 444,
	445, 467, 0, 429, 491, 608, 0, 0, 0, 0,
	0, 0, 0, 541, 553, 587, 0, 596, 597, 599,
	601, 600, 603, 0, 614, 482, 483, 615, 593, 372,
	0, 497, 530, 519, 602, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 342,
	534, 516, 526, 517, 502, 503, 504, 511, 322, 505,
	506, 507, 477, 508, 478, 509, 510, 0, 533, 484,
	403, 356, 551, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1941, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 285, 207,
	479, 598, 481, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 408, 425, 286, 399,
	438, 291, 406, 281, 371, 395, 0, 0, 277, 423,
	405, 353, 332, 333, 276, 0, 390, 310, 324, 307,
	369, 0, 422, 450, 306, 441, 0, 433, 279, 0,
	432, 368, 419, 424, 354, 348, 278, 421, 352, 347,
	336, 314, 466, 337, 338, 328, 380, 346, 381, 329,
	358, 357, 359, 0, 0, 0, 0, 0, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 595, 0, 435, 0, 0,
	0, 0, 0, 0, 407, 0, 0, 339, 0, 0,
	0, 451, 0, 393, 374, 617, 0, 0, 391, 344,
	420, 382, 426, 409, 434, 387, 383, 270, 410, 309,
	355, 282, 284, 304, 311, 313, 315, 316, 364, 365,
	377, 398, 411, 412, 413, 308, 292, 392, 293, 326,
	294, 271, 300, 298, 301, 400, 302, 273, 378, 417,
	0, 321, 388, 351, 274, 350, 379, 416, 415, 283,
	442, 448, 449, 538, 0, 454, 618, 619, 620, 463,
	468, 469, 470, 472, 473, 474, 475, 539, 556, 523,
	493, 456, 547, 490, 494, 495, 559, 0, 0, 0,
	447, 340, 341, 0, 319, 267, 268, 613, 305, 370,
	561, 594, 486, 0, 548, 487, 496, 297, 520, 532,
	531, 366, 446, 0, 543, 546, 476, 612, 0, 540,
	555, 616, 554, 609, 376, 0, 397, 552, 499, 0,
	544, 518, 0, 545, 514, 549, 0, 488, 0, 404,
	428, 440, 457, 460, 489, 574, 575, 576, 272, 459,
	578, 579, 580, 581, 582, 583, 584, 577, 431, 521,
	498, 524, 439, 501, 500, 0, 0, 535, 455, 536,
	537, 360, 361, 362, 363, 323, 562, 290, 458, 386,
	0, 522, 0, 0, 0, 0, 0, 0, 0, 0,
	527, 528, 525, 621, 0, 585, 586, 0, 0, 452,
	453, 318, 325, 471, 327, 289, 375, 320, 437, 334,
	0, 464, 529, 465, 588, 591, 589, 590, 367, 330,
	331, 401, 335, 345, 389, 436, 373, 394, 287, 427,
	402, 349, 515, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	570, 569, 568, 567, 566, 565, 564, 563, 0, 0,
	512, 414, 299, 261, 295, 296, 303, 610, 607, 418,
	611, 0, 269, 492, 343, 0, 384, 317, 557, 558,
	0, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	262, 225, 226, 227, 228, 229, 230, 231, 234, 235,
	236, 237, 238, 239, 240, 241, 560, 232, 233, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 0, 0, 0, 263, 264, 265, 266,
	0, 0, 257, 258, 259, 260, 0, 0, 0, 443,
	444, 445, 467, 0, 429, 491, 608, 0, 0, 0,
	0, 0, 0, 0, 541, 553, 587, 0, 596, 597,
	599, 601, 600, 603, 0, 614, 482, 483, 615, 593,
	372, 0, 497, 530, 519, 602, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	342, 534, 516, 526, 517, 502, 503, 504, 511, 322,
	505, 506, 507, 477, 508, 478, 509, 510, 0, 533,
	484, 403, 356, 551, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 285,
	207, 479, 598, 481, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 408, 425, 286,
	399, 438, 291, 406, 281, 371, 395, 0, 0, 277,
	423, 405, 353, 332, 333, 276, 0, 390, 310, 324,
	307, 369, 0, 422, 450, 306, 441, 0, 433, 279,
	0, 432, 368, 419, 424, 354, 348, 278, 421, 352,
	347, 336, 314, 466, 337, 338, 328, 380, 346, 381,
	329, 358, 357, 359, 0, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 595, 0, 435, 0,
	0, 0, 0, 0, 0, 407, 0, 0, 339, 0,
	0, 0, 451, 0, 393, 374, 617, 0, 0, 391,
	344, 420, 382, 426, 409, 434, 387, 383, 270, 410,
	309, 355, 282, 284, 304, 311, 313, 315, 316, 364,
	365, 377, 398, 411, 412, 413, 308, 292, 392, 293,
	326, 294, 271, 300, 298, 301, 400, 302, 273, 378,
	417, 0, 321, 388, 351, 274, 350, 379, 416, 415,
	283, 442, 448, 449, 538, 0, 454, 618, 619, 620,
	463, 468, 469, 470, 472, 473, 474, 475, 539, 556,
	523, 493, 456, 547, 490, 494, 495, 559, 0, 0,
	0, 447, 340, 341, 0, 319, 267, 268, 613, 305,
	370, 561, 594, 486, 0, 548, 487, 496, 297, 520,
	532, 531, 366, 446, 0, 543, 546, 476, 612, 0,
	540, 555, 616, 554, 609, 376, 0, 397, 552, 499,
	0, 544, 518, 0, 545, 514, 549, 0, 488, 0,
	404, 428, 440, 457, 460, 489, 574, 575, 576, 272,
	459, 578, 579, 580, 581, 582, 583, 584, 577, 431,
	521, 498, 524, 439, 501, 500, 0, 0, 535, 455,
	536, 537, 360, 361, 362, 363, 323, 562, 290, 458,
	386, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 525, 621, 0, 585, 586, 0, 0,
	452, 453, 318, 325, 471, 327, 289, 375, 320, 437,
	334, 0, 464, 529, 465, 588, 591, 589, 590, 367,
	330, 331, 401, 335, 345, 389, 436, 373, 394, 287,
	427, 402, 349, 515, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 569, 568, 567, 566, 565, 564, 563, 0,
	0, 512, 414, 299, 261, 295, 296, 303, 610, 607,
	418, 611, 0, 269, 492, 343, 0, 384, 317, 557,
	558, 0, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 262, 225, 226, 227, 228, 229, 230, 231, 234,
	235, 236, 237, 238, 239, 240, 241, 560, 232, 233,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 0, 0, 0, 263, 264, 265,
	266, 0, 0, 257, 258, 259, 260, 0, 0, 0,
	443, 444, 445, 467, 0, 429, 491, 608, 0, 0,
	0, 0, 0, 0, 0, 541, 553, 587, 0, 596,
	597, 599, 601, 600, 603, 0, 614, 482, 483, 615,
	593, 372, 0, 497, 530, 519, 602, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 342, 534, 516, 526, 517, 502, 503, 504, 511,
	322, 505, 506, 507, 477, 508, 478, 509, 510, 0,
	533, 484, 403, 356, 551, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	285, 207, 479, 598, 481, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2897, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 408, 425,
	286, 399, 438, 291, 406, 281, 371, 395, 0, 0,
	277, 423, 405, 353, 332, 333, 276, 0, 390, 310,
	324, 307, 369, 0, 422, 450, 306, 441, 0, 433,
	279, 0, 432, 368, 419, 424, 354, 348, 278, 421,
	352, 347, 336, 314, 466, 337, 338, 328, 380, 346,
	381, 329, 358, 357, 359, 0, 0, 0, 0, 0,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 595, 0, 435,
	0, 0, 0, 0, 0, 0, 407, 0, 0, 339,
	0, 0, 0, 451, 0, 393, 374, 617, 0, 0,
	391, 344, 420, 382, 426, 409, 434, 387, 383, 270,
	410, 309, 355, 282, 284, 304, 311, 313, 315, 316,
	364, 365, 377, 398, 411, 412, 413, 308, 292, 392,
	293, 326, 294, 271, 300, 298, 301, 400, 302, 273,
	378, 417, 0, 321, 388, 351, 274, 350, 379, 416,
	415, 283, 442, 448, 449, 538, 0, 454, 618, 619,
	620, 463, 468, 469, 470, 472, 473, 474, 475, 539,
	556, 523, 493, 456, 547, 490, 494, 495, 559, 0,
	0, 0, 447, 340, 341, 0, 319, 267, 268, 613,
	305, 370, 561, 594, 486, 0, 548, 487, 496, 297,
	520, 532, 531, 366, 446, 0, 543, 546, 476, 612,
	0, 540, 555, 616, 554, 609, 376, 0, 397, 552,
	499, 0, 544, 518, 0, 545, 514, 549, 0, 488,
	0, 404, 428, 440, 457, 460, 489, 574, 575, 576,
	272, 459, 578, 579, 580, 581, 582, 583, 584, 577,
	431, 521, 498, 524, 439, 501, 500, 0, 0, 535,
	455, 536, 537, 360, 361, 362, 363, 323, 562, 290,
	458, 386, 0, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 527, 528, 525, 621, 0, 585, 586, 0,
	0, 452, 453, 318, 325, 471, 327, 289, 375, 320,
	437, 334, 0, 464, 529, 465, 588, 591, 589, 590,
	367, 330, 331, 401, 335, 345, 389, 436, 373, 394,
	287, 427, 402, 349, 515, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 570, 569, 568, 567, 566, 565, 564, 563,
	0, 0, 512, 414, 299, 261, 295, 296, 303, 610,
	607, 418, 611, 0, 269, 492, 343, 0, 384, 317,
	557, 558, 0, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 262, 225, 226, 227, 228, 229, 230, 231,
	234, 235, 236, 237, 238, 239, 240, 241, 560, 232,
	233, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 0, 0, 0, 263, 264,
	265, 266, 0, 0, 257, 258, 259, 260, 0, 0,
	0, 443, 444, 445, 467, 0, 429, 491, 608, 0,
	0, 0, 0, 0, 0, 0, 541, 553, 587, 0,
	596, 597, 599, 601, 600, 603, 0, 614, 482, 483,
	615, 593, 372, 0, 497, 530, 519, 602, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 342, 534, 516, 526, 517, 502, 503, 504,
	511, 322, 505, 506, 507, 477, 508, 478, 509, 510,
	0, 533, 484, 403, 356, 551, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 1455, 0, 0,
	0, 285, 207, 479, 598, 481, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 408,
	425, 286, 399, 438, 291, 406, 281, 371, 395, 0,
	0, 277, 423, 405, 353, 332, 333, 276, 0, 390,
	310, 324, 307, 369, 0, 422, 450, 306, 441, 0,
	433, 279, 0, 432, 368, 419, 424, 354, 348, 278,
	421, 352, 347, 336, 314, 466, 337, 338, 328, 380,
	346, 381, 329, 358, 357, 359, 0, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 595, 0,
	435, 0, 0, 0, 0, 0, 0, 407, 0, 0,
	339, 0, 0, 0, 451, 0, 393, 374, 617, 0,
	0, 391, 344, 420, 382, 426, 409, 434, 387, 383,
	270, 410, 309, 355, 282, 284, 304, 311, 313, 315,
	316, 364, 365, 377, 398, 411, 412, 413, 308, 292,
	392, 293, 326, 294, 271, 300, 298, 301, 400, 302,
	273, 378, 417, 0, 321, 388, 351, 274, 350, 379,
	416, 415, 283, 442, 448, 449, 538, 0, 454, 618,
	619, 620, 463, 468, 469, 470, 472, 473, 474, 475,
	539, 556, 523, 493, 456, 547, 490, 494, 495, 559,
	0, 0, 0, 447, 340, 341, 0, 319, 267, 268,
	613, 305, 370, 561, 594, 486, 0, 548, 487, 496,
	297, 520, 532, 531, 366, 446, 0, 543, 546, 476,
	612, 0, 540, 555, 616, 554, 609, 376, 0, 397,
	552, 499, 0, 544, 518, 0, 545, 514, 549, 0,
	488, 0, 404, 428, 440, 457, 460, 489, 574, 575,
	576, 272, 459, 578, 579, 580, 581, 582, 583, 584,
	577, 431, 521, 498, 524, 439, 501, 500, 0, 0,
	535, 455, 536, 537, 360, 361, 362, 363, 323, 562,
	290, 458, 386, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 528, 525, 621, 0, 585, 586,
	0, 0, 452, 453, 318, 325, 471, 327, 289, 375,
	320, 437, 334, 0, 464, 529, 465, 588, 591, 589,
	590, 367, 330, 331, 401, 335, 345, 389, 436, 373,
	394, 287, 427, 402, 349, 515, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570, 569, 568, 567, 566, 565, 564,
	563, 0, 0, 512, 414, 299, 261, 295, 296, 303,
	610, 607, 418, 611, 0, 269, 492, 343, 0, 384,
	317, 557, 558, 0, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 262, 225, 226, 227, 228, 229, 230,
	231, 234, 235, 236, 237, 238, 239, 240, 241, 560,
	232, 233, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 0, 0, 0, 263,
	264, 265, 266, 0, 0, 257, 258, 259, 260, 0,
	0, 0, 443, 444, 445, 467, 0, 429, 491, 608,
	0, 0, 0, 0, 0, 0, 0, 541, 553, 587,
	0, 596, 597, 599, 601, 600, 603, 0, 614, 482,
	483, 615, 593, 372, 0, 497, 530, 519, 602, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 342, 534, 516, 526, 517, 502, 503,
	504, 511, 322, 505, 506, 507, 477, 508, 478, 509,
	510, 0, 533, 484, 403, 356, 551, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 2377, 0,
	0, 0, 285, 207, 479, 598, 481, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 275,
	408, 425, 286, 399, 438, 291, 406, 281, 371, 395,
	0, 0, 277, 423, 405, 353, 332, 333, 276, 0,
	390, 310, 324, 307, 369, 0, 422, 450, 306, 441,
	0, 433, 279, 0, 432, 368, 419, 424, 354, 348,
	278, 421, 352, 347, 336, 314, 466, 337, 338, 328,
	380, 346, 381, 329, 358, 357, 359, 0, 0, 0,
	0, 0, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 0, 0, 595,
	0, 435, 0, 0, 0, 0, 0, 0, 407, 0,
	0, 339, 0, 0, 0, 451, 0, 393, 374, 617,
	0, 0, 391, 344, 420, 382, 426, 409, 434, 387,
	383, 270, 410, 309, 355, 282, 284, 304, 311, 313,
	315, 316, 364, 365, 377, 398, 411, 412, 413, 308,
	292, 392, 293, 326, 294, 271, 300, 298, 301, 400,
	302, 273, 378, 417, 0, 321, 388, 351, 274, 350,
	379, 416, 415, 283, 442, 448, 449, 538, 0, 454,
	618, 619, 620, 463, 468, 469, 470, 472, 473, 474,
	475, 539, 556, 523, 493, 456, 547, 490, 494, 495,
	559, 0, 0, 0, 447, 340, 341, 0, 319, 267,
	268, 613, 305, 370, 561, 594, 486, 0, 548, 487,
	496, 297, 520, 532, 531, 366, 446, 0, 543, 546,
	476, 612, 0, 540, 555, 616, 554, 609, 376, 0,
	397, 552, 499, 0, 544, 518, 0, 545, 514, 549,
	0, 488, 0, 404, 428, 440, 457, 460, 489, 574,
	575, 576, 272, 459, 578, 579, 580, 581, 582, 583,
	584, 577, 431, 521, 498, 524, 439, 501, 500, 0,
	0, 535, 455, 536, 537, 360, 361, 362, 363, 323,
	562, 290, 458, 386, 0, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 527, 528, 525, 621, 0, 585,
	586, 0, 0, 452, 453, 318, 325, 471, 327, 289,
	375, 320, 437, 334, 0, 464, 529, 465, 588, 591,
	589, 590, 367, 330, 331, 401, 335, 345, 389, 436,
	373, 394, 287, 427, 402, 349, 515, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 570, 569, 568, 567, 566, 565,
	564, 563, 0, 0, 512, 414, 299, 261, 295, 296,
	303, 610, 607, 418, 611, 0, 269, 492, 343, 0,
	384, 317, 557, 558, 0, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 262, 225, 226, 227, 228, 229,
	230, 231, 234, 235, 236, 237, 238, 239, 240, 241,
	560, 232, 233, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 0, 0, 0,
	263, 264, 265, 266, 0, 0, 257, 258, 259, 260,
	0, 0, 0, 443, 444, 445, 467, 0, 429, 491,
	608, 0, 0, 0, 0, 0, 0, 0, 541, 553,
	587, 0, 596, 597, 599, 601, 600, 603, 0, 614,
	482, 483, 615, 593, 372, 0, 497, 530, 519, 602,
	485, 0, 0, 2722, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 342, 534, 516, 526, 517, 502,
	503, 504, 511, 322, 505, 506, 507, 477, 508, 478,
	509, 510, 0, 533, 484, 403, 356, 551, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 285, 207, 479, 598, 481, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 408, 425, 286, 399, 438, 291, 406, 281, 371,
	395, 0, 0, 277, 423, 405, 353, 332, 333, 276,
	0, 390, 310, 324, 307, 369, 0, 422, 450, 306,
	441, 0, 433, 279, 0, 432, 368, 419, 424, 354,
	348, 278, 421, 352, 347, 336, 314, 466, 337, 338,
	328, 380, 346, 381, 329, 358, 357, 359, 0, 0,
	0, 0, 0, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 0, 0,
	595, 0, 435, 0, 0, 0, 0, 0, 0, 407,
	0, 0, 339, 0, 0, 0, 451, 0, 393, 374,
	617, 0, 0, 391, 344, 420, 382, 426, 409, 434,
	387, 383, 270, 410, 309, 355, 282, 284, 304, 311,
	313, 315, 316, 364, 365, 377, 398, 411, 412, 413,
	308, 292, 392, 293, 326, 294, 271, 300, 298, 301,
	400, 302, 273, 378, 417, 0, 321, 388, 351, 274,
	350, 379, 416, 415, 283, 442, 448, 449, 538, 0,
	454, 618, 619, 620, 463, 468, 469, 470, 472, 473,
	474, 475, 539, 556, 523, 493, 456, 547, 490, 494,
	495, 559, 0, 0, 0, 447, 340, 341, 0, 319,
	267, 268, 613, 305, 370, 561, 594, 486, 0, 548,
	487, 496, 297, 520, 532, 531, 366, 446, 0, 543,
	546, 476, 612, 0, 540, 555, 616, 554, 609, 376,
	0, 397, 552, 499, 0, 544, 518, 0, 545, 514,
	549, 0, 488, 0, 404, 428, 440, 457, 460, 489,
	574, 575, 576, 272, 459, 578, 579, 580, 581, 582,
	583, 584, 577, 431, 521, 498, 524, 439, 501, 500,
	0, 0, 535, 455, 536, 537, 360, 361, 362, 363,
	323, 562, 290, 458, 386, 0, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 527, 528, 525, 621, 0,
	585, 586, 0, 0, 452, 453, 318, 325, 471, 327,
	289, 375, 320, 437, 334, 0, 464, 529, 465, 588,
	591, 589, 590, 367, 330, 331, 401, 335, 345, 389,
	436, 373, 394, 287, 427, 402, 349, 515, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 569, 568, 567, 566,
	565, 564, 563, 0, 0, 512, 414, 299, 261, 295,
	296, 303, 610, 607, 418, 611, 0, 269, 492, 343,
	0, 384, 317, 557, 558, 0, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 262, 225, 226, 227, 228,
	229, 230, 231, 234, 235, 236, 237, 238, 239, 240,
	241, 560, 232, 233, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 0, 0,
	0, 263, 264, 265, 266, 0, 0, 257, 258, 259,
	260, 0, 0, 0, 443, 444, 445, 467, 0, 429,
	491, 608, 0, 0, 0, 0, 0, 0, 0, 541,
	553, 587, 0, 596, 597, 599, 601, 600, 603, 0,
	614, 482, 483, 615, 593, 372, 0, 497, 530, 519,
	602, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 342, 534, 516, 526, 517,
	502, 503, 504, 511, 322, 505, 506, 507, 477, 508,
	478, 509, 510, 0, 533, 484, 403, 356, 551, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 285, 207, 479, 598, 481, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 408, 425, 286, 399, 438, 291, 406, 281,
	371, 395, 0, 0, 277, 423, 405, 353, 332, 333,
	276, 0, 390, 310, 324, 307, 369, 0, 422, 450,
	306, 441, 0, 433, 279, 0, 432, 368, 419, 424,
	354, 348, 278, 421, 352, 347, 336, 314, 466, 337,
	338, 328, 380, 346, 381, 329, 358, 357, 359, 0,
	0, 0, 0, 0, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	0, 595, 0, 435, 0, 0, 0, 0, 0, 0,
	407, 0, 0, 339, 0, 0, 0, 451, 0, 393,
	374, 617, 0, 0, 391, 344, 420, 382, 426, 409,
	434, 387, 383, 270, 410, 309, 355, 282, 284, 304,
	311, 313, 315, 316, 364, 365, 377, 398, 411, 412,
	413, 308, 292, 392, 293, 326, 294, 271, 300, 298,
	301, 400, 302, 273, 378, 417, 0, 321, 388, 351,
	274, 350, 379, 416, 415, 283, 442, 448, 449, 538,
	0, 454, 618, 619, 620, 463, 468, 469, 470, 472,
	473, 474, 475, 539, 556, 523, 493, 456, 547, 490,
	494, 495, 559, 0, 0, 0, 447, 340, 341, 0,
	319, 267, 268, 613, 305, 370, 561, 594, 486, 0,
	548, 487, 496, 297, 520, 532, 531, 366, 446, 0,
	543, 546, 476, 612, 0, 540, 555, 616, 554, 609,
	376, 0, 397, 552, 499, 0, 544, 518, 0, 545,
	514, 549, 0, 488, 0, 404, 428, 440, 457, 460,
	489, 574, 575, 576, 272, 459, 578, 579, 580, 581,
	582, 583, 584, 577, 431, 521, 498, 524, 439, 501,
	500, 0, 0, 535, 455, 536, 537, 360, 361, 362,
	363, 323, 562, 290, 458, 386, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 527, 528, 525, 621,
	0, 585, 586, 0, 0, 452, 453, 318, 325, 471,
	327, 289, 375, 320, 437, 334, 0, 464, 529, 465,
	588, 591, 589, 590, 367, 330, 331, 401, 335, 345,
	389, 436, 373, 394, 287, 427, 402, 349, 515, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 570, 569, 568, 567,
	566, 565, 564, 563, 0, 0, 512, 414, 299, 261,
	295, 296, 303, 610, 607, 418, 611, 0, 269, 492,
	343, 0, 384, 317, 557, 558, 0, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 262, 225, 226, 227,
	228, 229, 230, 231, 234, 235, 236, 237, 238, 239,
	240, 241, 560, 232, 233, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 0,
	0, 0, 263, 264, 265, 266, 0, 0, 257, 258,
	259, 260, 0, 0, 0, 443, 444, 445, 467, 0,
	429, 491, 608, 0, 0, 0, 0, 0, 0, 0,
	541, 553, 587, 0, 596, 597, 599, 601, 600, 603,
	0, 614, 482, 483, 615, 593, 372, 0, 497, 530,
	519, 602, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 342, 534, 516, 526,
	517, 502, 503, 504, 511, 322, 505, 506, 507, 477,
	508, 478, 509, 510, 0, 533, 484, 403, 356, 551,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 2493, 0, 0, 0, 285, 207, 479, 598, 481,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 408, 425, 286, 399, 438, 291, 406,
	281, 371, 395, 0, 0, 277, 423, 405, 353, 332,
	333, 276, 0, 390, 310, 324, 307, 369, 0, 422,
	450, 306, 441, 0, 433, 279, 0, 432, 368, 419,
	424, 354, 348, 278, 421, 352, 347, 336, 314, 466,
	337, 338, 328, 380, 346, 381, 329, 358, 357, 359,
	0, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 595, 0, 435, 0, 0, 0, 0, 0,
	0, 407, 0, 0, 339, 0, 0, 0, 451, 0,
	393, 374, 617, 0, 0, 391, 344, 420, 382, 426,
	409, 434, 387, 383, 270, 410, 309, 355, 282, 284,
	304, 311, 313, 315, 316, 364, 365, 377, 398, 411,
	412, 413, 308, 292, 392, 293, 326, 294, 271, 300,
	298, 301, 400, 302, 273, 378, 417, 0, 321, 388,
	351, 274, 350, 379, 416, 415, 283, 442, 448, 449,
	538, 0, 454, 618, 619, 620, 463, 468, 469, 470,
	472, 473, 474, 475, 539, 556, 523, 493, 456, 547,
	490, 494, 495, 559, 0, 0, 0, 447, 340, 341,
	0, 319, 267, 268, 613, 305, 370, 561, 594, 486,
	0, 548, 487, 496, 297, 520, 532, 531, 366, 446,
	0, 543, 546, 476, 612, 0, 540, 555, 616, 554,
	609, 376, 0, 397, 552, 499, 0, 544, 518, 0,
	545, 514, 549, 0, 488, 0, 404, 428, 440, 457,
	460, 489, 574, 575, 576, 272, 459, 578, 579, 580,
	581, 582, 583, 584, 577, 431, 521, 498, 524, 439,
	501, 500, 0, 0, 535, 455, 536, 537, 360, 361,
	362, 363, 323, 562, 290, 458, 386, 0, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 528, 525,
	621, 0, 585, 586, 0, 0, 452, 453, 318, 325,
	471, 327, 289, 375, 320, 437, 334, 0, 464, 529,
	465, 588, 591, 589, 590, 367, 330, 331, 401, 335,
	345, 389, 436, 373, 394, 287, 427, 402, 349, 515,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 569, 568,
	567, 566, 565, 564, 563, 0, 0, 512, 414, 299,
	261, 295, 296, 303, 610, 607, 418, 611, 0, 269,
	492, 343, 0, 384, 317, 557, 558, 0, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 262, 225, 226,
	227, 228, 229, 230, 231, 234, 235, 236, 237, 238,
	239, 240, 241, 560, 232, 233, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	0, 0, 0, 263, 264, 265, 266, 0, 0, 257,
	258, 259, 260, 0, 0, 0, 443, 444, 445, 467,
	0, 429, 491, 608, 0, 0, 0, 0, 0, 0,
	0, 541, 553, 587, 0, 596, 597, 599, 601, 600,
	603, 0, 614, 482, 483, 615, 593, 372, 0, 497,
	530, 519, 602, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 342, 534, 516,
	526, 517, 502, 503, 504, 511, 322, 505, 506, 507,
	477, 508, 478, 509, 510, 0, 533, 484, 403, 356,
	551, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 285, 207, 479, 598,
	481, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 408, 425, 286, 399, 438, 291,
	406, 281, 371, 395, 0, 0, 277, 423, 405, 353,
	332, 333, 276, 0, 390, 310, 324, 307, 369, 0,
	422, 450, 306, 441, 0, 433, 279, 0, 432, 368,
	419, 424, 354, 348, 278, 421, 352, 347, 336, 314,
	466, 337, 338, 328, 380, 346, 381, 329, 358, 357,
	359, 0, 0, 0, 0, 0, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 595, 0, 435, 0, 0, 0, 0,
	0, 0, 407, 0, 0, 339, 0, 0, 0, 451,
	0, 393, 374, 617, 0, 0, 391, 344, 420, 382,
	426, 409, 434, 387, 383, 270, 410, 309, 355, 282,
	284, 304, 311, 313, 315, 316, 364, 365, 377, 398,
	411, 412, 413, 308, 292, 392, 293, 326, 294, 271,
	300, 298, 301, 400, 302, 273, 378, 417, 0, 321,
	388, 351, 274, 350, 379, 416, 415, 283, 442, 448,
	449, 538, 0, 454, 618, 619, 620, 463, 468, 469,
	470, 472, 473, 474, 475, 539, 556, 523, 493, 456,
	547, 490, 494, 495, 559, 0, 0, 0, 447, 340,
	341, 0, 319, 267, 268, 613, 305, 370, 561, 594,
	486, 0, 548, 487, 496, 297, 520, 532, 531, 366,
	446, 0, 543, 546, 476, 612, 0, 540, 555, 616,
	554, 609, 376, 0, 397, 552, 499, 0, 544, 518,
	0, 545, 514, 549, 0, 488, 0, 404, 428, 440,
	457, 460, 489, 574, 575, 576, 272, 459, 578, 579,
	580, 581, 582, 583, 584, 577, 431, 521, 498, 524,
	439, 501, 500, 0, 0, 535, 455, 536, 537, 360,
	361, 362, 363, 323, 562, 290, 458, 386, 0, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 528,
	525, 621, 0, 585, 586, 0, 0, 452, 453, 318,
	325, 471, 327, 289, 375, 320, 437, 334, 0, 464,
	529, 465, 588, 591, 589, 590, 367, 330, 331, 401,
	335, 345, 389, 436, 373, 394, 287, 427, 402, 349,
	515, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 569,
	568, 567, 566, 565, 564, 563, 0, 0, 512, 414,
	299, 261, 295, 296, 303, 610, 607, 418, 611, 0,
	269, 492, 343, 0, 384, 317, 557, 558, 0, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 262, 225,
	226, 227, 228, 229, 230, 231, 234, 235, 236, 237,
	238, 239, 240, 241, 560, 232, 233, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 0, 0, 0, 263, 264, 265, 266, 0, 0,
	257, 258, 259, 260, 0, 0, 0, 443, 444, 445,
	467, 0, 429, 491, 608, 0, 0, 0, 0, 0,
	0, 0, 541, 553, 587, 0, 596, 597, 599, 601,
	600, 603, 0, 614, 482, 483, 615, 593, 372, 0,
	497, 530, 519, 602, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 342, 534,
	516, 526, 517, 502, 503, 504, 511, 322, 505, 506,
	507, 477, 508, 478, 509, 510, 0, 533, 484, 403,
	356, 551, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 2452, 0, 0, 0, 285, 207, 479,
	598, 481, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 408, 425, 286, 399, 438,
	291, 406, 281, 371, 395, 0, 0, 277, 423, 405,
	353, 332, 333, 276, 0, 390, 310, 324, 307, 369,
	0, 422, 450, 306, 441, 0, 433, 279, 0, 432,
	368, 419, 424, 354, 348, 278, 421, 352, 347, 336,
	314, 466, 337, 338, 328, 380, 346, 381, 329, 358,
	357, 359, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 595, 0, 435, 0, 0, 0,
	0, 0, 0, 407, 0, 0, 339, 0, 0, 0,
	451, 0, 393, 374, 617, 0, 0, 391, 344, 420,
	382, 426, 409, 434, 387, 383, 270, 410, 309, 355,
	282, 284, 304, 311, 313, 315, 316, 364, 365, 377,
	398, 411, 412, 413, 308, 292, 392, 293, 326, 294,
	271, 300, 298, 301, 400, 302, 273, 378, 417, 0,
	321, 388, 351, 274, 350, 379, 416, 415, 283, 442,
	448, 449, 538, 0, 454, 618, 619, 620, 463, 468,
	469, 470, 472, 473, 474, 475, 539, 556, 523, 493,
	456, 547, 490, 494, 495, 559, 0, 0, 0, 447,
	340, 341, 0, 319, 267, 268, 613, 305, 370, 561,
	594, 486, 0, 548, 487, 496, 297, 520, 532, 531,
	366, 446, 0, 543, 546, 476, 612, 0, 540, 555,
	616, 554, 609, 376, 0, 397, 552, 499, 0, 544,
	518, 0, 545, 514, 549, 0, 488, 0, 404, 428,
	440, 457, 460, 489, 574, 575, 576, 272, 459, 578,
	579, 580, 581, 582, 583, 584, 577, 431, 521, 498,
	524, 439, 501, 500, 0, 0, 535, 455, 536, 537,
	360, 361, 362, 363, 323, 562, 290, 458, 386, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	528, 525, 621, 0, 585, 586, 0, 0, 452, 453,
	318, 325, 471, 327, 289, 375, 320, 437, 334, 0,
	464, 529, 465, 588, 591, 589, 590, 367, 330, 331,
	401, 335, 345, 389, 436, 373, 394, 287, 427, 402,
	349, 515, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	569, 568, 567, 566, 565, 564, 563, 0, 0, 512,
	414, 299, 261, 295, 296, 303, 610, 607, 418, 611,
	0, 269, 492, 343, 0, 384, 317, 557, 558, 0,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 262,
	225, 226, 227, 228, 229, 230, 231, 234, 235, 236,
	237, 238, 239, 240, 241, 560, 232, 233, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 0, 0, 0, 263, 264, 265, 266, 0,
	0, 257, 258, 259, 260, 0, 0, 0, 443, 444,
	445, 467, 0, 429, 491, 608, 0, 0, 0, 0,
	0, 0, 0, 541, 553, 587, 0, 596, 597, 599,
	601, 600, 603, 2235, 614, 482, 483, 615, 593, 372,
	0, 497, 530, 519, 602, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 342,
	534, 516, 526, 517, 502, 503, 504, 511, 322, 505,
	506, 507, 477, 508, 478, 509, 510, 0, 533, 484,
	403, 356, 551, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 285, 207,
	479, 598, 481, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 408, 425, 286, 399,
	438, 291, 406, 281, 371, 395, 0, 0, 277, 423,
	405, 353, 332, 333, 276, 0, 390, 310, 324, 307,
	369, 0, 422, 450, 306, 441, 0, 433, 279, 0,
	432, 368, 419, 424, 354, 348, 278, 421, 352, 347,
	336, 314, 466, 337, 338, 328, 380, 346, 381, 329,
	358, 357, 359, 0, 0, 0, 0, 0, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 595, 0, 435, 0, 0,
	0, 0, 0, 0, 407, 0, 0, 339, 0, 0,
	0, 451, 0, 393, 374, 617, 0, 0, 391, 344,
	420, 382, 426, 409, 434, 387, 383, 270, 410, 309,
	355, 282, 284, 304, 311, 313, 315, 316, 364, 365,
	377, 398, 411, 412, 413, 308, 292, 392, 293, 326,
	294, 271, 300, 298, 301, 400, 302, 273, 378, 417,
	0, 321, 388, 351, 274, 350, 379, 416, 415, 283,
	442, 448, 449, 538, 0, 454, 618, 619, 620, 463,
	468, 469, 470, 472, 473, 474, 475, 539, 556, 523,
	493, 456, 547, 490, 494, 495, 559, 0, 0, 0,
	447, 340, 341, 0, 319, 267, 268, 613, 305, 370,
	561, 594, 486, 0, 548, 487, 496, 297, 520, 532,
	531, 366, 446, 0, 543, 546, 476, 612, 0, 540,
	555, 616, 554, 609, 376, 0, 397, 552, 499, 0,
	544, 518, 0, 545, 514, 549, 0, 488, 0, 404,
	428, 440, 457, 460, 489, 574, 575, 576, 272, 459,
	578, 579, 580, 581, 582, 583, 584, 577, 431, 521,
	498, 524, 439, 501, 500, 0, 0, 535, 455, 536,
	537, 360, 361, 362, 363, 323, 562, 290, 458, 386,
	0, 522, 0, 0, 0, 0, 0, 0, 0, 0,
	527, 528, 525, 621, 0, 585, 586, 0, 0, 452,
	453, 318, 325, 471, 327, 289, 375, 320, 437, 334,
	0, 464, 529, 465, 588, 591, 589, 590, 367, 330,
	331, 401, 335, 345, 389, 436, 373, 394, 287, 427,
	402, 349, 515, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	570, 569, 568, 567, 566, 565, 564, 563, 0, 0,
	512, 414, 299, 261, 295, 296, 303, 610, 607, 418,
	611, 0, 269, 492, 343, 0, 384, 317, 557, 558,
	0, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	262, 225, 226, 227, 228, 229, 230, 231, 234, 235,
	236, 237, 238, 239, 240, 241, 560, 232, 233, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 0, 0, 0, 263, 264, 265, 266,
	0, 0, 257, 258, 259, 260, 0, 0, 0, 443,
	444, 445, 467, 0, 429, 491, 608, 0, 0, 0,
	0, 0, 0, 0, 541, 553, 587, 0, 596, 597,
	599, 601, 600, 603, 0, 614, 482, 483, 615, 593,
	372, 0, 497, 530, 519, 602, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	342, 534, 516, 526, 517, 502, 503, 504, 511, 322,
	505, 506, 507, 477, 508, 478, 509, 510, 0, 533,
	484, 403, 356, 551, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 1798, 0, 0, 285,
	207, 479, 598, 481, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 408, 425, 286,
	399, 438, 291, 406, 281, 371, 395, 0, 0, 277,
	423, 405, 353, 332, 333, 276, 0, 390, 310, 324,
	307, 369, 0, 422, 450, 306, 441, 0, 433, 279,
	0, 432, 368, 419, 424, 354, 348, 278, 421, 352,
	347, 336, 314, 466, 337, 338, 328, 380, 346, 381,
	329, 358, 357, 359, 0, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 595, 0, 435, 0,
	0, 0, 0, 0, 0, 407, 0, 0, 339, 0,
	0, 0, 451, 0, 393, 374, 617, 0, 0, 391,
	344, 420, 382, 426, 409, 434, 387, 383, 270, 410,
	309, 355, 282, 284, 304, 311, 313, 315, 316, 364,
	365, 377, 398, 411, 412, 413, 308, 292, 392, 293,
	326, 294, 271, 300, 298, 301, 400, 302, 273, 378,
	417, 0, 321, 388, 351, 274, 350, 379, 416, 415,
	283, 442, 448, 449, 538, 0, 454, 618, 619, 620,
	463, 468, 469, 470, 472, 473, 474, 475, 539, 556,
	523, 493, 456, 547, 490, 494, 495, 559, 0, 0,
	0, 447, 340, 341, 0, 319, 267, 268, 613, 305,
	370, 561, 594, 486, 0, 548, 487, 496, 297, 520,
	532, 531, 366, 446, 0, 543, 546, 476, 612, 0,
	540, 555, 616, 554, 609, 376, 0, 397, 552, 499,
	0, 544, 518, 0, 545, 514, 549, 0, 488, 0,
	404, 428, 440, 457, 460, 489, 574, 575, 576, 272,
	459, 578, 579, 580, 581, 582, 583, 584, 577, 431,
	521, 498, 524, 439, 501, 500, 0, 0, 535, 455,
	536, 537, 360, 361, 362, 363, 323, 562, 290, 458,
	386, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 525, 621, 0, 585, 586, 0, 0,
	452, 453, 318, 325, 471, 327, 289, 375, 320, 437,
	334, 0, 464, 529, 465, 588, 591, 589, 590, 367,
	330, 331, 401, 335, 345, 389, 436, 373, 394, 287,
	427, 402, 349, 515, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 569, 568, 567, 566, 565, 564, 563, 0,
	0, 512, 414, 299, 261, 295, 296, 303, 610, 607,
	418, 611, 0, 269, 492, 343, 0, 384, 317, 557,
	558, 0, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 262, 225, 226, 227, 228, 229, 230, 231, 234,
	235, 236, 237, 238, 239, 240, 241, 560, 232, 233,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 0, 0, 0, 263, 264, 265,
	266, 0, 0, 257, 258, 259, 260, 0, 0, 0,
	443, 444, 445, 467, 0, 429, 491, 608, 0, 0,
	0, 0, 0, 0, 0, 541, 553, 587, 0, 596,
	597, 599, 601, 600, 603, 0, 614, 482, 483, 615,
	593, 372, 0, 497, 530, 519, 602, 485, 0, 1925,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 342, 534, 516, 526, 517, 502, 503, 504, 511,
	322, 505, 506, 507, 477, 508, 478, 509, 510, 0,
	533, 484, 403, 356, 551, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	285, 207, 479, 598, 481, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 408, 425,
	286, 399, 438, 291, 406, 281, 371, 395, 0, 0,
	277, 423, 405, 353, 332, 333, 276, 0, 390, 310,
	324, 307, 369, 0, 422, 450, 306, 441, 0, 433,
	279, 0, 432, 368, 419, 424, 354, 348, 278, 421,
	352, 347, 336, 314, 466, 337, 338, 328, 380, 346,
	381, 329, 358, 357, 359, 0, 0, 0, 0, 0,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 595, 0, 435,
	0, 0, 0, 0, 0, 0, 407, 0, 0, 339,
	0, 0, 0, 451, 0, 393, 374, 617, 0, 0,
	391, 344, 420, 382, 426, 409, 434, 387, 383, 270,
	410, 309, 355, 282, 284, 304, 311, 313, 315, 316,
	364, 365, 377, 398, 411, 412, 413, 308, 292, 392,
	293, 326, 294, 271, 300, 298, 301, 400, 302, 273,
	378, 417, 0, 321, 388, 351, 274, 350, 379, 416,
	415, 283, 442, 448, 449, 538, 0, 454, 618, 619,
	620, 463, 468, 469, 470, 472, 473, 474, 475, 539,
	556, 523, 493, 456, 547, 490, 494, 495, 559, 0,
	0, 0, 447, 340, 341, 0, 319, 267, 268, 613,
	305, 370, 561, 594, 486, 0, 548, 487, 496, 297,
	520, 532, 531, 366, 446, 0, 543, 546, 476, 612,
	0, 540, 555, 616, 554, 609, 376, 0, 397, 552,
	499, 0, 544, 518, 0, 545, 514, 549, 0, 488,
	0, 404, 428, 440, 457, 460, 489, 574, 575, 576,
	272, 459, 578, 579, 580, 581, 582, 583, 584, 577,
	431, 521, 498, 524, 439, 501, 500, 0, 0, 535,
	455, 536, 537, 360, 361, 362, 363, 323, 562, 290,
	458, 386, 0, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 527, 528, 525, 621, 0, 585, 586, 0,
	0, 452, 453, 318, 325, 471, 327, 289, 375, 320,
	437, 334, 0, 464, 529, 465, 588, 591, 589, 590,
	367, 330, 331, 401, 335, 345, 389, 436, 373, 394,
	287, 427, 402, 349, 515, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 570, 569, 568, 567, 566, 565, 564, 563,
	0, 0, 512, 414, 299, 261, 295, 296, 303, 610,
	607, 418, 611, 0, 269, 492, 343, 0, 384, 317,
	557, 558, 0, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 262, 225, 226, 227, 228, 229, 230, 231,
	234, 235, 236, 237, 238, 239, 240, 241, 560, 232,
	233, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 0, 0, 0, 263, 264,
	265, 266, 0, 0, 257, 258, 259, 260, 0, 0,
	0, 443, 444, 445, 467, 0, 429, 491, 608, 0,
	0, 0, 0, 0, 0, 0, 541, 553, 587, 0,
	596, 597, 599, 601, 600, 603, 0, 614, 482, 483,
	615, 593, 372, 0, 497, 530, 519, 602, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 342, 534, 516, 526, 517, 502, 503, 504,
	511, 322, 505, 506, 507, 477, 508, 478, 509, 510,
	0, 533, 484, 403, 356, 551, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 1455, 0, 0,
	0, 285, 207, 479, 598, 481, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 408,
	425, 286, 399, 438, 291, 406, 281, 371, 395, 0,
	0, 277, 423, 405, 353, 332, 333, 276, 0, 390,
	310, 324, 307, 369, 0, 422, 450, 306, 441, 0,
	433, 279, 0, 432, 368, 419, 424, 354, 348, 278,
	421, 352, 347, 336, 314, 466, 337, 338, 328, 380,
	346, 381, 329, 358, 357, 359, 0, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 595, 0,
	435, 0, 0, 0, 0, 0, 0, 407, 0, 0,
	339, 0, 0, 0, 451, 0, 393, 374, 617, 0,
	0, 391, 344, 420, 382, 426, 409, 434, 1831, 383,
	270, 410, 309, 355, 282, 284, 304, 311, 313, 315,
	316, 364, 365, 377, 398, 411, 412, 413, 308, 292,
	392, 293, 326, 294, 271, 300, 298, 301, 400, 302,
	273, 378, 417, 0, 321, 388, 351, 274, 350, 379,
	416, 415, 283, 442, 448, 449, 538, 0, 454, 618,
	619, 620, 463, 468, 469, 470, 472, 473, 474, 475,
	539, 556, 523, 493, 456, 547, 490, 494, 495, 559,
	0, 0, 0, 447, 340, 341, 0, 319, 267, 268,
	613, 305, 370, 561, 594, 486, 0, 548, 487, 496,
	297, 520, 532, 531, 366, 446, 0, 543, 546, 476,
	612, 0, 540, 555, 616, 554, 609, 376, 0, 397,
	552, 499, 0, 544, 518, 0, 545, 514, 549, 0,
	488, 0, 404, 428, 440, 457, 460, 489, 574, 575,
	576, 272, 459, 578, 579, 580, 581, 582, 583, 584,
	577, 431, 521, 498, 524, 439, 501, 500, 0, 0,
	535, 455, 536, 537, 360, 361, 362, 363, 323, 562,
	290, 458, 386, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 528, 525, 621, 0, 585, 586,
	0, 0, 452, 453, 318, 325, 471, 327, 289, 375,
	320, 437, 334, 0, 464, 529, 465, 588, 591, 589,
	590, 367, 330, 331, 401, 335, 345, 389, 436, 373,
	394, 287, 427, 402, 349, 515, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570, 569, 568, 567, 566, 565, 564,
	563, 0, 0, 512, 414, 299, 261, 295, 296, 303,
	610, 607, 418, 611, 0, 269, 492, 343, 0, 384,
	317, 557, 558, 0, 0, 217, 218, 219, 220, 221,
	222, 223, 224, 262, 225, 226, 227, 228, 229, 230,
	231, 234, 235, 236, 237, 238, 239, 240, 241, 560,
	232, 233, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 0, 0, 0, 263,
	264, 265, 266, 0, 0, 257, 258, 259, 260, 0,
	0, 0, 443, 444, 445, 467, 0, 429, 491, 608,
	0, 0, 0, 0, 0, 0, 0, 541, 553, 587,
	0, 596, 597, 599, 601, 600, 603, 0, 614, 482,
	483, 615, 593, 372, 0, 497, 530, 519, 602, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 342, 534, 516, 526, 517, 502, 503,
	504, 511, 322, 505, 506, 507, 477, 508, 478, 509,
	510, 0, 533, 484, 403, 356, 551, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 285, 207, 479, 598, 481, 480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 275,
	408, 425, 286, 399, 438, 291, 406, 281, 371, 395,
	0, 0, 277, 423, 405, 353, 332, 333, 276, 0,
	390, 310, 324, 307, 369, 0, 422, 450, 306, 441,
	0, 433, 279, 0, 432, 368, 419, 424, 354, 348,
	278, 421, 352, 347, 336, 314, 466, 337, 338, 328,
	380, 346, 381, 329, 358, 357, 359, 0, 0, 0,
	0, 0, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 0, 0, 595,
	0, 435, 0, 0, 1485, 0, 0, 0, 407, 0,
	0, 339, 0, 0, 0, 451, 0, 393, 374, 617,
	0, 0, 391, 344, 420, 382, 426, 409, 434, 387,
	383, 270, 410, 309, 355, 282, 284, 304, 311, 313,
	315, 316, 364, 365, 377, 398, 411, 412, 413, 308,
	292, 392, 293, 326, 294, 271, 300, 298, 301, 400,
	302, 273, 378, 417, 0, 321, 388, 351, 274, 350,
	379, 416, 415, 283, 442, 448, 449, 538, 0, 454,
	618, 619, 620, 463, 468, 469, 470, 472, 473, 474,
	475, 539, 556, 523, 493, 456, 547, 490, 494, 495,
	559, 0, 0, 0, 447, 340, 341, 0, 319, 267,
	268, 613, 305, 370, 561, 594, 486, 0, 548, 487,
	496, 297, 520, 532, 531, 366, 446, 0, 543, 546,
	476, 612, 0, 540, 555, 616, 554, 609, 376, 0,
	397, 552, 499, 0, 544, 518, 0, 545, 514, 549,
	0, 488, 0, 404, 428, 440, 457, 460, 489, 574,
	575, 576, 272, 459, 578, 579, 580, 581, 582, 583,
	584, 577, 431, 521, 498, 524, 439, 501, 500, 0,
	0, 535, 455, 536, 537, 360, 361, 362, 363, 323,
	562, 290, 458, 386, 0, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 527, 528, 525, 621, 0, 585,
	586, 0, 0, 452, 453, 318, 325, 471, 327, 289,
	375, 320, 437, 334, 0, 464, 529, 465, 588, 591,
	589, 590, 367, 330, 331, 401, 335, 345, 389, 436,
	373, 394, 287, 427, 402, 349, 515, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 570, 569, 568, 567, 566, 565,
	564, 563, 0, 0, 512, 414, 299, 261, 295, 296,
	303, 610, 607, 418, 611, 0, 269, 492, 343, 0,
	384, 317, 557, 558, 0, 0, 217, 218, 219, 220,
	221, 222, 223, 224, 262, 225, 226, 227, 228, 229,
	230, 231, 234, 235, 236, 237, 238, 239, 240, 241,
	560, 232, 233, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 0, 0, 0,
	263, 264, 265, 266, 0, 0, 257, 258, 259, 260,
	0, 0, 0, 443, 444, 445, 467, 0, 429, 491,
	608, 0, 0, 0, 0, 0, 0, 0, 541, 553,
	587, 0, 596, 597, 599, 601, 600, 603, 0, 614,
	482, 483, 615, 593, 372, 0, 497, 530, 519, 602,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 312, 0, 0, 342, 534, 516, 526, 517, 502,
	503, 504, 511, 322, 505, 506, 507, 477, 508, 478,
	509, 510, 0, 533, 484, 403, 356, 551, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 285, 207, 479, 598, 481, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 408, 425, 286, 399, 438, 291, 406, 281, 371,
	395, 0, 0, 277, 423, 405, 353, 332, 333, 276,
	0, 390, 310, 324, 307, 369, 0, 422, 450, 306,
	441, 0, 433, 279, 0, 432, 368, 419, 424, 354,
	348, 278, 421, 352, 347, 336, 314, 466, 337, 338,
	328, 380, 346, 381, 329, 358, 357, 359, 0, 0,
	0, 0, 0, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 0, 0,
	595, 0, 435, 0, 0, 0, 0, 0, 0, 407,
	0, 0, 339, 0, 0, 0, 451, 0, 393, 374,
	617, 0, 0, 391, 344, 420, 382, 426, 409, 434,
	387, 383, 270, 410, 309, 355, 282, 284, 304, 311,
	313, 315, 316, 364, 365, 377, 398, 411, 412, 413,
	308, 292, 392, 293, 326, 294, 271, 300, 298, 301,
	400, 302, 273, 378, 417, 0, 321, 388, 351, 274,
	350, 379, 416, 415, 283, 442, 448, 449, 538, 0,
	454, 618, 619, 620, 463, 468, 469, 470, 472, 473,
	474, 475, 539, 556, 523, 493, 456, 547, 490, 494,
	495, 559, 0, 0, 0, 447, 340, 341, 0, 319,
	267, 268, 613, 305, 370, 561, 594, 486, 0, 548,
	487, 496, 297, 520, 532, 531, 366, 446, 0, 543,
	546, 476, 612, 0, 540, 555, 616, 554, 609, 376,
	0, 397, 552, 499, 0, 544, 518, 0, 545, 514,
	549, 0, 488, 0, 404, 428, 440, 457, 460, 489,
	574, 575, 576, 272, 459, 578, 579, 580, 581, 582,
	583, 584, 577, 431, 521, 498, 524, 439, 501, 500,
	0, 0, 535, 455, 536, 537, 360, 361, 362, 363,
	323, 562, 290, 458, 386, 0, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 527, 528, 525, 621, 0,
	585, 586, 0, 0, 452, 453, 318, 325, 471, 327,
	289, 375, 320, 437, 334, 0, 464, 529, 465, 588,
	591, 589, 590, 367, 330, 331, 401, 335, 345, 389,
	436, 373, 394, 287, 427, 402, 349, 515, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 569, 568, 567, 566,
	565, 564, 563, 0, 0, 512, 414, 299, 261, 295,
	296, 303, 610, 607, 418, 611, 0, 269, 492, 343,
	0, 384, 317, 557, 558, 0, 0, 217, 218, 219,
	220, 221, 222, 223, 224, 262, 225, 226, 227, 228,
	229, 230, 231, 234, 235, 236, 237, 238, 239, 240,
	241, 560, 232, 233, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 0, 0,
	0, 263, 264, 265, 266, 0, 0, 257, 258, 259,
	260, 0, 0, 0, 443, 444, 445, 467, 0, 429,
	491, 608, 0, 0, 0, 0, 0, 0, 0, 541,
	553, 587, 0, 596, 597, 599, 601, 600, 603, 0,
	614, 482, 483, 615, 593, 372, 0, 497, 530, 519,
	602, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 342, 534, 516, 526, 517,
	502, 503, 504, 511, 322, 505, 506, 507, 477, 508,
	478, 509, 510, 0, 533, 484, 403, 356, 551, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 285, 207, 479, 598, 481, 480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 408, 425, 286, 399, 438, 291, 406, 281,
	371, 395, 0, 0, 277, 423, 405, 353, 332, 333,
	276, 0, 390, 310, 324, 307, 369, 0, 422, 450,
	306, 441, 0, 433, 279, 0, 432, 368, 419, 424,
	354, 348, 278, 421, 352, 347, 336, 314, 466, 337,
	338, 328, 380, 346, 381, 329, 358, 357, 359, 0,
	0, 0, 0, 0, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	638, 595, 0, 435, 0, 0, 0, 0, 0, 0,
	407, 0, 0, 339, 0, 0, 0, 451, 0, 393,
	374, 617, 0, 0, 391, 344, 420, 382, 426, 409,
	434, 387, 383, 270, 410, 309, 355, 282, 284, 304,
	311, 313, 315, 316, 364, 365, 377, 398, 411, 412,
	413, 308, 292, 392, 293, 326, 294, 271, 300, 298,
	301, 400, 302, 273, 378, 417, 0, 321, 388, 351,
	274, 350, 379, 416, 415, 283, 442, 448, 449, 538,
	0, 454, 618, 619, 620, 463, 468, 469, 470, 472,
	473, 474, 475, 539, 556, 523, 493, 456, 547, 490,
	494, 495, 559, 0, 0, 0, 447, 340, 341, 0,
	319, 267, 268, 613, 305, 370, 561, 594, 486, 0,
	548, 487, 496, 297, 520, 532, 531, 366, 446, 0,
	543, 546, 476, 612, 0, 540, 555, 616, 554, 609,
	376, 0, 397, 552, 499, 0, 544, 518, 0, 545,
	514, 549, 0, 488, 0, 404, 428, 440, 457, 460,
	489, 574, 575, 576, 272, 459, 578, 579, 580, 581,
	582, 583, 584, 577, 431, 521, 498, 524, 439, 501,
	500, 0, 0, 535, 455, 536, 537, 360, 361, 362,
	363, 323, 562, 290, 458, 386, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 527, 528, 525, 621,
	0, 585, 586, 0, 0, 452, 453, 318, 325, 471,
	327, 289, 375, 320, 437, 334, 0, 464, 529, 465,
	588, 591, 589, 590, 367, 330, 331, 401, 335, 345,
	389, 436, 373, 394, 287, 427, 402, 349, 515, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 570, 569, 568, 567,
	566, 565, 564, 563, 0, 0, 512, 414, 299, 261,
	295, 296, 303, 610, 607, 418, 611, 0, 269, 492,
	343, 0, 384, 317, 557, 558, 0, 0, 217, 218,
	219, 220, 221, 222, 223, 224, 262, 225, 226, 227,
	228, 229, 230, 231, 234, 235, 236, 237, 238, 239,
	240, 241, 560, 232, 233, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 0,
	0, 0, 263, 264, 265, 266, 0, 0, 257, 258,
	259, 260, 0, 0, 0, 443, 444, 445, 467, 0,
	429, 491, 608, 0, 0, 0, 0, 0, 0, 0,
	541, 553, 587, 0, 596, 597, 599, 601, 600, 603,
	0, 614, 482, 483, 615, 593, 372, 0, 497, 530,
	519, 602, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 342, 534, 516, 526,
	517, 502, 503, 504, 511, 322, 505, 506, 507, 477,
	508, 478, 509, 510, 0, 533, 484, 403, 356, 551,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 285, 207, 479, 598, 481,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 275, 408, 425, 286, 399, 438, 291, 406,
	281, 371, 395, 0, 0, 277, 423, 405, 353, 332,
	333, 276, 0, 390, 310, 324, 307, 369, 0, 422,
	450, 306, 441, 0, 433, 279, 0, 432, 368, 419,
	424, 354, 348, 278, 421, 352, 347, 336, 314, 466,
	337, 338, 328, 380, 346, 381, 329, 358, 357, 359,
	0, 0, 0, 0, 0, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 595, 0, 435, 0, 0, 0, 0, 0,
	0, 407, 0, 0, 339, 0, 0, 0, 451, 0,
	393, 374, 617, 0, 0, 391, 344, 420, 382, 426,
	409, 434, 387, 383, 270, 410, 309, 355, 282, 284,
	304, 311, 313, 315, 316, 364, 365, 377, 398, 411,
	412, 413, 308, 292, 392, 293, 326, 294, 271, 300,
	298, 301, 400, 302, 273, 378, 417, 0, 321, 388,
	351, 274, 350, 379, 416, 415, 283, 442, 448, 449,
	538, 0, 454, 618, 619, 620, 463, 468, 469, 470,
	472, 473, 474, 475, 539, 556, 523, 493, 456, 547,
	490, 494, 495, 559, 0, 0, 0, 447, 340, 341,
	0, 319, 267, 268, 613, 305, 370, 561, 594, 486,
	0, 548, 487, 496, 297, 520, 532, 531, 366, 446,
	0, 543, 546, 476, 612, 0, 540, 555, 616, 554,
	609, 376, 0, 397, 552, 499, 0, 544, 518, 0,
	545, 514, 549, 0, 488, 0, 404, 428, 440, 457,
	460, 489, 574, 575, 576, 272, 459, 578, 579, 580,
	581, 582, 583, 584, 577, 431, 521, 498, 524, 439,
	501, 500, 0, 0, 535, 455, 536, 537, 360, 361,
	362, 363, 323, 562, 290, 458, 386, 0, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 528, 525,
	621, 0, 585, 586, 0, 0, 452, 453, 318, 325,
	471, 327, 289, 375, 320, 437, 334, 0, 464, 529,
	465, 588, 591, 589, 590, 367, 330, 331, 401, 335,
	345, 389, 436, 373, 394, 287, 427, 402, 349, 515,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 569, 568,
	567, 566, 565, 564, 563, 921, 0, 512, 414, 299,
	261, 295, 296, 303, 610, 607, 418, 611, 0, 269,
	492, 343, 0, 384, 317, 557, 558, 0, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 262, 225, 226,
	227, 228, 229, 230, 231, 234, 235, 236, 237, 238,
	239, 240, 241, 560, 232, 233, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	0, 0, 0, 263, 264, 265, 266, 0, 0, 257,
	258, 259, 260, 0, 0, 0, 443, 444, 445, 467,
	0, 429, 491, 608, 0, 0, 0, 0, 0, 0,
	0, 541, 553, 587, 0, 596, 597, 599, 601, 600,
	603, 0, 614, 482, 483, 615, 593, 372, 0, 497,
	530, 519, 602, 485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 342, 534, 516,
	526, 517, 502, 503, 504, 511, 322, 505, 506, 507,
	477, 508, 478, 509, 510, 0, 533, 484, 403, 356,
	551, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 285, 207, 479, 598,
	481, 480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 275, 408, 425, 286, 399, 438, 291,
	406, 281, 371, 395, 0, 0, 277, 423, 405, 353,
	332, 333, 276, 0, 390, 310, 324, 307, 369, 0,
	422, 450, 306, 441, 0, 433, 279, 0, 432, 368,
	419, 424, 354, 348, 278, 421, 352, 347, 336, 314,
	466, 337, 338, 328, 380, 346, 381, 329, 358, 357,
	359, 0, 0, 0, 0, 0, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 0, 0, 595, 0, 435, 0, 0, 0, 0,
	0, 0, 407, 0, 0, 339, 0, 0, 0, 451,
	0, 393, 374, 617, 0, 0, 391, 344, 420, 382,
	426, 409, 434, 387, 383, 270, 410, 309, 355, 282,
	284, 304, 311, 313, 315, 316, 364, 365, 377, 398,
	411, 412, 413, 308, 292, 392, 293, 326, 294, 271,
	300, 298, 301, 400, 302, 273, 378, 417, 0, 321,
	388, 351, 274, 350, 379, 416, 415, 283, 442, 448,
	449, 538, 0, 454, 618, 619, 620, 463, 468, 469,
	470, 472, 473, 474, 475, 539, 556, 523, 493, 456,
	547, 490, 494, 495, 559, 0, 0, 0, 447, 340,
	341, 0, 319, 267, 268, 613, 305, 370, 561, 594,
	486, 0, 548, 487, 496, 297, 520, 532, 531, 366,
	446, 0, 543, 546, 476, 612, 0, 540, 555, 616,
	554, 609, 376, 0, 397, 552, 499, 0, 544, 518,
	0, 545, 514, 549, 0, 488, 0, 404, 428, 440,
	457, 460, 489, 574, 575, 576, 272, 459, 578, 579,
	580, 581, 582, 583, 584, 577, 431, 521, 498, 524,
	439, 501, 500, 0, 0, 535, 455, 536, 537, 360,
	361, 362, 363, 323, 562, 290, 458, 386, 0, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 528,
	525, 621, 0, 585, 586, 0, 0, 452, 453, 318,
	325, 471, 327, 289, 375, 320, 437, 334, 0, 464,
	529, 465, 588, 591, 589, 590, 367, 330, 331, 401,
	335, 345, 389, 436, 373, 394, 287, 427, 402, 349,
	515, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 569,
	568, 567, 566, 565, 564, 563, 0, 0, 512, 414,
	299, 261, 295, 296, 303, 610, 607, 418, 611, 0,
	269, 492, 343, 0, 384, 317, 557, 558, 0, 0,
	217, 218, 219, 220, 221, 222, 223, 224, 262, 225,
	226, 227, 228, 229, 230, 231, 234, 235, 236, 237,
	238, 239, 240, 241, 560, 232, 233, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 0, 0, 0, 263, 264, 265, 266, 0, 0,
	257, 258, 259, 260, 0, 0, 0, 443, 444, 445,
	467, 0, 429, 491, 608, 0, 0, 0, 0, 0,
	0, 0, 541, 553, 587, 0, 596, 597, 599, 601,
	600, 603, 0, 614, 482, 483, 615, 593, 372, 0,
	497, 530, 519, 602, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 342, 534,
	516, 526, 517, 502, 503, 504, 511, 322, 505, 506,
	507, 477, 508, 478, 509, 510, 0, 533, 484, 403,
	356, 551, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 285, 207, 479,
	598, 481, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 275, 408, 1435, 286, 399, 438,
	291, 406, 281, 371, 395, 0, 0, 277, 423, 405,
	353, 332, 333, 276, 0, 390, 310, 324, 307, 369,
	0, 422, 450, 306, 441, 0, 433, 279, 0, 432,
	368, 419, 424, 354, 348, 278, 421, 352, 347, 336,
	314, 466, 337, 338, 328, 380, 346, 381, 329, 358,
	357, 359, 0, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 595, 0, 435, 0, 0, 0,
	0, 0, 0, 407, 0, 0, 339, 0, 0, 0,
	451, 0, 393, 374, 617, 0, 0, 391, 344, 420,
	382, 426, 409, 434, 387, 383, 270, 410, 309, 355,
	282, 284, 304, 311, 313, 315, 316, 364, 365, 377,
	398, 411, 412, 413, 308, 292, 392, 293, 326, 294,
	271, 300, 298, 301, 400, 302, 273, 378, 417, 0,
	321, 388, 351, 274, 350, 379, 416, 415, 283, 442,
	448, 449, 538, 0, 454, 618, 619, 620, 463, 468,
	469, 470, 472, 473, 474, 475, 539, 556, 523, 493,
	456, 547, 490, 494, 495, 559, 0, 0, 0, 447,
	340, 341, 0, 319, 267, 268, 613, 305, 370, 561,
	594, 486, 0, 548, 487, 496, 297, 520, 532, 531,
	366, 446, 0, 543, 546, 476, 612, 0, 540, 555,
	616, 554, 609, 376, 0, 397, 552, 499, 0, 544,
	518, 0, 545, 514, 549, 0, 488, 0, 404, 428,
	440, 457, 460, 489, 574, 575, 576, 272, 459, 578,
	579, 580, 581, 582, 583, 584, 577, 431, 521, 498,
	524, 439, 501, 500, 0, 0, 535, 455, 536, 537,
	360, 361, 362, 363, 323, 562, 290, 458, 386, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	528, 525, 621, 0, 585, 586, 0, 0, 452, 453,
	318, 325, 471, 327, 289, 375, 320, 437, 334, 0,
	464, 529, 465, 588, 591, 589, 590, 367, 330, 331,
	401, 335, 345, 389, 436, 373, 394, 287, 427, 402,
	349, 515, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	569, 568, 567, 566, 565, 564, 563, 0, 0, 512,
	414, 299, 261, 295, 296, 303, 610, 607, 418, 611,
	0, 269, 492, 343, 0, 384, 317, 557, 558, 0,
	0, 217, 218, 219, 220, 221, 222, 223, 224, 262,
	225, 226, 227, 228, 229, 230, 231, 234, 235, 236,
	237, 238, 239, 240, 241, 560, 232, 233, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 0, 0, 0, 263, 264, 265, 266, 0,
	0, 257, 258, 259, 260, 0, 0, 0, 443, 444,
	445, 467, 0, 429, 491, 608, 0, 0, 0, 0,
	0, 0, 0, 541, 553, 587, 0, 596, 597, 599,
	601, 600, 603, 0, 614, 482, 483, 615, 593, 372,
	0, 497, 530, 519, 602, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 342,
	534, 516, 526, 517, 502, 503, 504, 511, 322, 505,
	506, 507, 477, 508, 478, 509, 510, 0, 533, 484,
	403, 356, 551, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 285, 207,
	479, 598, 481, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 408, 1433, 286, 399,
	438, 291, 406, 281, 371, 395, 0, 0, 277, 423,
	405, 353, 332, 333, 276, 0, 390, 310, 324, 307,
	369, 0, 422, 450, 306, 441, 0, 433, 279, 0,
	432, 368, 419, 424, 354, 348, 278, 421, 352, 347,
	336, 314, 466, 337, 338, 328, 380, 346, 381, 329,
	358, 357, 359, 0, 0, 0, 0, 0, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 0, 0, 595, 0, 435, 0, 0,
	0, 0, 0, 0, 407, 0, 0, 339, 0, 0,
	0, 451, 0, 393, 374, 617, 0, 0, 391, 344,
	420, 382, 426, 409, 434, 387, 383, 270, 410, 309,
	355, 282, 284, 304, 311, 313, 315, 316, 364, 365,
	377, 398, 411, 412, 413, 308, 292, 392, 293, 326,
	294, 271, 300, 298, 301, 400, 302, 273, 378, 417,
	0, 321, 388, 351, 274, 350, 379, 416, 415, 283,
	442, 448, 449, 538, 0, 454, 618, 619, 620, 463,
	468, 469, 470, 472, 473, 474, 475, 539, 556, 523,
	493, 456, 547, 490, 494, 495, 559, 0, 0, 0,
	447, 340, 341, 0, 319, 267, 268, 613, 305, 370,
	561, 594, 486, 0, 548, 487, 496, 297, 520, 532,
	531, 366, 446, 0, 543, 546, 476, 612, 0, 540,
	555, 616, 554, 609, 376, 0, 397, 552, 499, 0,
	544, 518, 0, 545, 514, 549, 0, 488, 0, 404,
	428, 440, 457, 460, 489, 574, 575, 576, 272, 459,
	578, 579, 580, 581, 582, 583, 584, 577, 431, 521,
	498, 524, 439, 501, 500, 0, 0, 535, 455, 536,
	537, 360, 361, 362, 363, 323, 562, 290, 458, 386,
	0, 522, 0, 0, 0, 0, 0, 0, 0, 0,
	527, 528, 525, 621, 0, 585, 586, 0, 0, 452,
	453, 318, 325, 471, 327, 289, 375, 320, 437, 334,
	0, 464, 529, 465, 588, 591, 589, 590, 367, 330,
	331, 401, 335, 345, 389, 436, 373, 394, 287, 427,
	402, 349, 515, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	570, 569, 568, 567, 566, 565, 564, 563, 0, 0,
	512, 414, 299, 261, 295, 296, 303, 610, 607, 418,
	611, 0, 269, 492, 343, 0, 384, 317, 557, 558,
	0, 0, 217, 218, 219, 220, 221, 222, 223, 224,
	262, 225, 226, 227, 228, 229, 230, 231, 234, 235,
	236, 237, 238, 239, 240, 241, 560, 232, 233, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 0, 0, 0, 263, 264, 265, 266,
	0, 0, 257, 258, 259, 260, 0, 0, 0, 443,
	444, 445, 467, 0, 429, 491, 608, 0, 0, 0,
	0, 0, 0, 0, 541, 553, 587, 0, 596, 597,
	599, 601, 600, 603, 0, 614, 482, 483, 615, 593,
	372, 0, 497, 530, 519, 602, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	342, 534, 516, 526, 517, 502, 503, 504, 511, 322,
	505, 506, 507, 477, 508, 478, 509, 510, 0, 533,
	484, 403, 356, 551, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 285,
	207, 479, 598, 481, 480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 408, 425, 286,
	399, 438, 291, 406, 281, 371, 395, 0, 0, 277,
	423, 405, 353, 332, 333, 276, 0, 390, 310, 324,
	307, 369, 0, 422, 450, 306, 441, 0, 433, 279,
	0, 432, 368, 419, 424, 354, 348, 278, 421, 352,
	347, 336, 314, 466, 337, 338, 328, 380, 346, 381,
	329, 358, 357, 359, 0, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 595, 0, 435, 0,
	0, 0, 0, 0, 0, 407, 0, 0, 339, 0,
	0, 0, 451, 0, 393, 374, 617, 0, 0, 391,
	344, 420, 382, 426, 409, 434, 387, 383, 270, 410,
	309, 355, 282, 284, 705, 311, 313, 315, 316, 364,
	365, 377, 398, 411, 412, 413, 308, 292, 392, 293,
	326, 294, 271, 300, 298, 301, 400, 302, 273, 378,
	417, 0, 321, 388, 351, 274, 350, 379, 416, 415,
	283, 442, 448, 449, 538, 0, 454, 618, 619, 620,
	463, 468, 469, 470, 472, 473, 474, 475, 539, 556,
	523, 493, 456, 547, 490, 494, 495, 559, 0, 0,
	0, 447, 340, 341, 0, 319, 267, 268, 613, 305,
	370, 561, 594, 486, 0, 548, 487, 496, 297, 520,
	532, 531, 366, 446, 0, 543, 546, 476, 612, 0,
	540, 555, 616, 554, 609, 376, 0, 397, 552, 499,
	0, 544, 518, 0, 545, 514, 549, 0, 488, 0,
	404, 428, 440, 457, 460, 489, 574, 575, 576, 272,
	459, 578, 579, 580, 581, 582, 583, 584, 577, 431,
	521, 498, 524, 439, 501, 500, 0, 0, 535, 455,
	536, 537, 360, 361, 362, 363, 323, 562, 290, 458,
	386, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 525, 621, 0, 585, 586, 0, 0,
	452, 453, 318, 325, 471, 327, 289, 375, 320, 437,
	334, 0, 464, 529, 465, 588, 591, 589, 590, 367,
	330, 331, 401, 335, 345, 389, 436, 373, 394, 287,
	427, 402, 349, 515, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 569, 568, 567, 566, 565, 564, 563, 0,
	0, 512, 414, 299, 261, 295, 296, 303, 610, 607,
	418, 611, 0, 269, 492, 343, 0, 384, 317, 557,
	558, 0, 0, 217, 218, 219, 220, 221, 222, 223,
	224, 262, 225, 226, 227, 228, 229, 230, 231, 234,
	235, 236, 237, 238, 239, 240, 241, 560, 232, 233,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 0, 0, 0, 263, 264, 265,
	266, 0, 0, 257, 258, 259, 260, 0, 0, 0,
	443, 444, 445, 467, 0, 429, 491, 608, 0, 0,
	0, 0, 0, 0, 0, 541, 553, 587, 0, 596,
	597, 599, 601, 600, 603, 0, 614, 482, 483, 615,
	593, 372, 0, 497, 530, 519, 602, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 342, 534, 516, 526, 517, 502, 503, 504, 511,
	322, 505, 506, 507, 477, 508, 478, 509, 510, 0,
	533, 484, 403, 356, 551, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	285, 207, 479, 598, 481, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 408, 425,
	286, 399, 438, 291, 406, 281, 371, 395, 0, 0,
	277, 423, 405, 353, 332, 333, 276, 0, 390, 310,
	324, 307, 369, 0, 422, 450, 306, 441, 0, 433,
	279, 0, 432, 368, 419, 424, 354, 348, 278, 421,
	352, 347, 336, 314, 466, 337, 338, 328, 380, 346,
	381, 329, 358, 357, 359, 0, 0, 0, 0, 0,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 0, 0, 595, 0, 435,
	0, 0, 0, 0, 0, 0, 407, 0, 0, 339,
	0, 0, 0, 451, 0, 393, 374, 617, 0, 0,
	391, 344, 420, 382, 426, 409, 434, 662, 383, 270,
	410, 309, 355, 282, 284, 304, 311, 313, 315, 316,
	364, 365, 377, 398, 411, 412, 413, 308, 292, 392,
	293, 326, 294, 271, 300, 298, 301, 400, 302, 273,
	378, 417, 0, 321, 388, 351, 274, 350, 379, 416,
	415, 283, 442, 448, 449, 538, 0, 454, 618, 619,
	620, 463, 468, 469, 470, 472, 473, 474, 475, 539,
	556, 523, 493, 456, 547, 490, 494, 495, 559, 0,
	0, 0, 447, 340, 341, 0, 319, 267, 268, 613,
	305, 370, 561, 594, 486, 0, 548, 487, 496, 297,
	520, 532, 531, 366, 446, 0, 543, 546, 476, 612,
	0, 540, 555, 616, 554, 609, 376, 0, 397, 552,
	499, 0, 544, 518, 0, 545, 514, 549, 0, 488,
	0, 404, 428, 440, 457, 460, 489, 574, 575, 576,
	272, 459, 578, 579, 580, 581, 582, 583, 663, 577,
	431, 521, 498, 524, 439, 501, 500, 0, 0, 535,
	455, 536, 537, 360, 361, 362, 363, 323, 562, 290,
	458, 386, 0, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 527, 528, 525, 621, 0, 585, 586, 0,
	0, 452, 453, 318, 325, 471, 327, 289, 375, 320,
	437, 334, 0, 464, 529, 465, 588, 591, 589, 590,
	367, 330, 331, 401, 335, 345, 389, 436, 373, 394,
	287, 427, 402, 349, 515, 542, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 570, 569, 568, 567, 566, 565, 564, 563,
	0, 0, 512, 414, 299, 261, 295, 296, 303, 610,
	607, 418, 611, 0, 269, 492, 343, 0, 384, 317,
	557, 558, 0, 0, 217, 218, 219, 220, 221, 222,
	223, 224, 262, 225, 226, 227, 228, 229, 230, 231,
	234, 235, 236, 237, 238, 239, 240, 241, 560, 232,
	233, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 0, 0, 0, 263, 264,
	265, 266, 0, 0, 257, 258, 259, 260, 0, 0,
	0, 443, 444, 445, 467, 0, 429, 491, 608, 0,
	0, 0, 1055, 0, 0, 0, 541, 553, 587, 0,
	596, 597, 599, 601, 600, 603, 0, 614, 482, 483,
	615, 593, 1077, 1081, 1083, 1085, 1087, 1088, 1090, 0,
	1095, 1091, 1092, 1093, 1094, 0, 1072, 1073, 1074, 1075,
	1053, 1054, 1078, 0, 1056, 0, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1068, 1070, 1066, 1067, 1076,
	684, 683, 690, 680, 0, 0, 0, 1080, 1082, 1084,
	1086, 1089, 687, 688, 1913, 689, 693, 0, 0, 674,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3409, 0, 1071, 0, 0, 0, 1915,
	0, 0, 0, 0, 0, 1186, 1187, 1188, 1185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 704, 0, 0, 0, 0,
	703, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1695, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1913, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1906, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1915,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 675, 677, 676,
	3570, 0, 0, 0, 0, 0, 0, 682, 0, 0,
	1890, 0, 0, 0, 0, 0, 0, 0, 0, 686,
	0, 0, 0, 0, 0, 0, 701, 0, 1894, 0,
	0, 0, 0, 679, 0, 0, 0, 0, 0, 1900,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1888,
	1922, 0, 0, 1889, 1891, 1893, 0, 1895, 1896, 1897,
	1901, 1902, 1903, 1905, 1908, 1909, 1910, 1691, 1906, 0,
	0, 0, 0, 1688, 1898, 1907, 1899, 1690, 1687, 1689,
	1693, 1694, 0, 0, 0, 1692, 0, 1913, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1914, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1915, 0, 0, 1913, 0, 0, 0, 0,
	0, 0, 681, 685, 691, 0, 692, 694, 0, 0,
	695, 696, 697, 0, 0, 699, 700, 0, 1894, 0,
	0, 0, 1911, 0, 0, 0, 0, 0, 0, 1900,
	1915, 0, 0, 0, 0, 0, 0, 0, 0, 1887,
	0, 0, 0, 1890, 0, 0, 1886, 0, 0, 1888,
	1922, 0, 0, 1889, 1891, 1893, 0, 1895, 1896, 1897,
	1901, 1902, 1903, 1905, 1908, 1909, 1910, 0, 0, 0,
	1904, 0, 0, 0, 1898, 1907, 1899, 0, 0, 1892,
	0, 1890, 0, 0, 0, 0, 0, 0, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1698,
	1699, 1700, 1701, 1702, 1703, 1696, 1697, 3541, 1914, 0,
	0, 1906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1906,
	0, 0, 1911, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1887,
	0, 678, 0, 0, 0, 0, 1886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 1894, 0, 0, 0, 0, 0, 0, 0, 0,
	1904, 0, 1900, 0, 0, 0, 0, 0, 0, 1892,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1888, 1922, 0, 0, 1889, 1891, 1893, 1894,
	1895, 1896, 1897, 1901, 1902, 1903, 1905, 1908, 1909, 1910,
	1900, 0, 0, 0, 0, 0, 0, 1898, 1907, 1899,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1888, 1922, 0, 0, 1889, 1891, 1893, 0, 1895, 1896,
	1897, 1901, 1902, 1903, 1905, 1908, 1909, 1910, 0, 0,
	0, 1914, 0, 0, 0, 1898, 1907, 1899, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1914,
	0, 0, 0, 0, 0, 1911, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1887, 0, 0, 0, 0, 0, 0, 1886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1911, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1904, 0, 0, 0, 0, 0, 0,
	1887, 0, 1892, 0, 0, 0, 0, 1886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1904, 0, 0, 0, 0, 0, 0, 0, 0,
	1892,
}

var yyPact = [...]int{
	433, -1000, -1000, -1000, -300, 4245, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44884, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 368, 44884, -298, 27776, 43051, -1000, -1000, 2460,
	-1000, 43662, 15544, 44884, 451, 449, 44884, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 856, -1000,
	47328, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 769, 5278,
	46717, 11241, -220, -1000, 1711, -36, 2323, 399, 1026, 1032,
	1160, 1160, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3835, 908, 44273, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3583, 380, 855, 908, 20440, 97, 95, 1711, 437, -98,
	-86, -99, 4956, -1000, 1084, 4866, 210, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11241, 11241,
	4245, -349, 4245, 11241, 44884, 44884, -1000, -1000, -1000, -1000,
	-298, 43662, 769, 5278, 11241, 2323, 399, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-86, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -98, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -99, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	95, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4803, -1000, 1544, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2169, 2858, 1543, 2321, 729, 43051, 44884, -1000,
	161, 729, -1000, -1000, -1000, 1711, 3282, -1000, 44884, 44884,
	160, 1785, -1000, 424, 385, 396, 293, 1537, -1000, -1000,
	-1000, -1000, -1000, -1000, 584, 3256, -1000, 44884, 44884, 2893,
	44884, -1000, 2171, 631, -1000, 47987, 3085, 1383, 883, 2906,
	-1000, -1000, 2856, -1000, 304, 267, 320, 497, 364, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 297, -1000, 3164, -1000,
	-1000, 296, -1000, -1000, 290, -1000, -1000, -1000, 94, -1000,
	-1000, -1000, -1000, -1000, -1000, -1, -1000, -1000, 1075, 2289,
	11241, 1987, -1000, 5243, 1529, -1000, -1000, -1000, 6937, 13083,
	13083, 13083, 13083, 44884, -1000, -1000, 2646, 11241, 2855, 2853,
	2838, 2837, -1000, -1000, -1000, -1000, -1000, -1000, 1533, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1902, -1000,
	-1000, -1000, 13697, -1000, 2836, 2827, 2826, 2824, 2822, 2821,
	2815, 2809, 2807, 2806, 2805, 2804, 2802, 2799, 2516, 14923,
	2798, 2320, 2319, 2797, 2791, 2790, 2308, 2787, 2781, 2780,
	2516, 2516, 2778, 2776, 2775, 2767, 2766, 2765, 2760, 2749,
	2742, 2741, 2738, 2736, 2732, 2731, 2730, 2724, 2720, 2717,
	2709, 2708, 2700, 2698, 2697, 2690, 2686, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1300, -1000, 2685, 3267, 2579, -1000, 3147, 3144, 3140, 3136,
	-269, 2684, 2072, -1000, -1000, 115, 3254, 44884, -1000, -88,
	-1000, -1000, 990, -1000, 969, -1000, 766, 44884, 44884, 211,
	743, 766, 766, 766, 766, 766, 820, 766, 3179, 854,
	850, 848, 846, 766, -35, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1774, 1759, 2965, 935, -1000, -1000, -1000, -1000,
	1377, 44884, -1000, 2609, 1589, 1589, 3236, 3178, 672, 656,
	637, 1589, 527, -1000, 1746, 1746, 1746, 1746, 1589, 475,
	651, 3182, 3182, 75, 1746, 79, 1589, 1589, 79, 1589,
	1589, -1000, 1767, 288, -275, -1000, -1000, -1000, -1000, 1746,
	1746, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3159, 3158,
	769, 769, 44884, 221, 44884, 769, 769, 769, 44884, 776,
	36, 46106, 45495, 2171, 627, 610, 1384, 1751, -1000, 1623,
	44884, 44884, 1623, 1623, 23499, 22888, -1000, 44884, -1000, 3267,
	2579, 2508, 1562, 2507, 2579, -90, -91, -92, 769, 769,
	769, 769, 769, 246, 769, 769, 769, 769, 769, 44884,
	44884, 42440, 769, 769, 769, 9393, 9393, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4245, 2077, 2128, 209,
	-13, -287, 266, -1000, -1000, 44884, 3041, 258, -1000, -1000,
	-1000, 2534, -1000, 2595, 2595, 2595, 2595, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2595, 2595, 2607, 2683,
	-1000, -1000, 2594, 2594, 2594, 2534, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2596, 2596, 2597, 2597, 2596, 44884, -121, -1000, -1000,
	11241, 44884, 3058, 394, 2678, 729, -1000, -1000, 44884, 125,
	397, 3267, 3054, 3182, 3231, -1000, -1000, 1531, 2071, 2307,
	-1000, 293, -1000, 420, 293, 1586, -1000, 1068, -1000, -1000,
	-1000, -1000, -1000, 44884, -1, 371, -1000, -1000, 2279, 2672,
	-1000, 590, 1171, 1475, -1000, 308, 5050, 35719, 2171, 35719,
	44884, -1000, -1000, -1000, -1000, -1000, -1000, 92, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 269, -1000, 11241, 11241, 11241, 11241, 11241, -1000,
	708, 12469, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13083,
	13083, 13083, 13083, 13083, 13083, 13083, 13083, 13083, 13083, 13083,
	13083, 2644, 1781, 13083, 13083, 13083, 13083, 25332, 1562, 3101,
	1380, 298, 1529, 1529, 1529, 1529, 11241, -1000, 1801, 2289,
	11241, 11241, 11241, 11241, 44884, -1000, -1000, 47945, 11241, 11241,
	3871, 11241, 3132, 11241, 11241, 11241, 2501, 5700, 44884, 11241,
	-1000, 2500, 2497, -1000, -1000, 1997, 11241, -1000, -1000, 11241,
	-1000, -1000, 11241, 13083, 11241, -1000, 11241, 11241, 11241, -1000,
	-1000, 2512, 3132, 3132, 3132, 1723, 11241, 11241, 3132, 3132,
	3132, 1720, 3132, 3132, 3132, 3132, 3132, 3132, 3132, 3132,
	3132, 3132, 2495, 2494, 2492, 10627, 3182, -220, -1000, 8779,
	3054, 3182, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -271, 2667, 44884, 2306, 2303, -307, 1017, 456,
	41, 1023, 981, 995, -1000, 44884, 1835, 3128, -1000, 2658,
	44884, 766, 766, 766, -1000, 40607, 35719, 44884, 44884, 2171,
	44884, 44884, 44884, 766, 766, 766, 766, 44884, -1000, 3025,
	35719, 2992, 776, -1000, 44884, 1377, 3118, 44884, 3236, 13083,
	13083, -1000, -1000, 11241, 41829, 1746, 1589, 1589, -1000, -1000,
	44884, -1000, -1000, -1000, 1746, 44884, 1746, 1746, 3236, 1746,
	-1000, -1000, -1000, 1589, 1589, -1000, -1000, 11241, -1000, -1000,
	1746, 1746, -1000, -1000, 3236, 44884, 87, 3236, 3236, 72,
	-1000, -1000, -1000, 1589, 44884, 44884, 766, 44884, -1000, 44884,
	44884, -1000, -1000, 44884, 44884, 4877, 40607, 41218, 3156, -1000,
	35719, 44884, 44884, 1374, -1000, 817, 33886, -1000, 1343, -1000,
	45, -1000, 37, 36, 1623, 36, 1623, -1000, 578, 585,
	21666, 532, 35719, 6314, -1000, -1000, 1623, 1623, 6314, 6314,
	1559, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1365, -1000,
	284, 3182, -1000, -1000, -1000, -1000, -1000, 2069, 2068, 2065,
	44884, 40607, 35719, 2171, 44884, 769, 44884, 44884, 44884, 44884,
	44884, -1000, 2654, 1530, -1000, 3083, 44884, 44884, 44884, 1421,
	-1000, -1000, 18599, 1527, 1421, -1000, 1808, -1000, 11241, 4245,
	-249, 11241, 4245, 4245, 11241, 4245, -1000, 11241, 251, -1000,
	-1000, -1000, -1000, 2063, -1000, 2061, -1000, -1000, -1000, -1000,
	-1000, 2291, 2291, -1000, 2058, -1000, -1000, -1000, -1000, 2053,
	-1000, -1000, 2051, -1000, -1000, -1000, -1000, -162, 2491, 1075,
	-1000, 2287, 2905, -227, -1000, 19829, 44884, 44884, 394, -308,
	-1000, 1758, 1748, 1745, -1000, -227, -1000, 19214, 44884, 3182,
	-1000, -230, 3054, 11241, 44884, -1000, 3176, -1000, -1000, 293,
	-1000, 398, 377, -1000, -1000, -1000, -1000, -1000, -1000, 1521,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	362, 1364, -1000, 44884, -1000, -1000, 308, 35719, 37552, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 250, -1000, -1000, 200,
	-1000, 816, 213, 1583, -1000, -1000, 223, 227, 175, 921,
	2289, -1000, 1818, 1818, 1842, -1000, 713, -1000, -1000, -1000,
	-1000, 2646, -1000, -1000, -1000, 1881, 1699, -1000, 1791, 1791,
	1565, 1565, 1565, 1565, 1565, 1890, 1890, -1000, -1000, -1000,
	6937, 2644, 13083, 13083, 13083, 13083, 851, 851, 3757, 3741,
	-1000, -1000, -1000, -1000, 11241, 188, 1800, -1000, 11241, 2574,
	1594, 2452, 1318, 1516, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2489, 2487, 2213, 3253, 2486, 11241,
	-1000, -1000, 1582, 1581, 1578, -1000, 2257, 10013, -1000, -1000,
	-1000, 2483, 1515, 2478, -1000, -1000, -1000, 2477, 1577, 1178,
	2475, 2785, 2474, 2472, 2471, 2469, 1354, 11241, 11241, 11241,
	11241, 2467, 1575, 1574, 11241, 11241, 11241, 11241, 2465, 11241,
	11241, 11241, 11241, 11241, 11241, 11241, 11241, 11241, 11241, 119,
	119, 119, 1352, 1351, -1000, -1000, 1566, -1000, 2289, -1000,
	-1000, 3054, -1000, 2642, 2048, 1346, -1000, -1000, -295, 2243,
	44884, 1014, 44884, -1000, -1000, 1012, 958, 986, 3175, 3082,
	44884, 1071, 2640, 44884, 44884, 44884, 238, -1000, -1000, 1165,
	-1000, 213, 231, 459, 1087, 2890, 3252, -122, 44884, 44884,
	44884, 44884, 3116, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 39996, -1000, 2638, 1546, -1000, -1000, 1529, 1529, 2289,
	2888, 44884, 44884, 3236, 3236, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1746, 3236, 3236, 1356, 1589, 1746, -1000, -1000,
	1746, -316, -1000, 1746, -1000, -316, 1501, -316, 44884, -1000,
	-1000, -1000, 3113, 2609, 1345, -1000, -1000, -1000, 3230, 920,
	723, 723, 988, 476, 3229, 17377, -1000, 1627, 996, 811,
	3008, 301, -1000, 1627, -155, 733, 1627, 1627, 1627, 1627,
	1627, 1627, 1627, 586, 581, 1627, 1627, 1627, 1627, 1627,
	1627, 1627, 1627, 1627, 1627, 1627, 1031, 1627, 1627, 1627,
	1627, 1627, -1000, 1627, 2637, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 612, 234, 3155, 339, -1000, 338, 1165, 3154,
	359, 44884, 44884, 3016, 1234, -1000, -1000, -1000, -1000, 25943,
	25943, 21055, 25943, -1000, 205, 36, 29, -1000, -1000, 1343,
	6314, 1343, 6314, -1000, -1000, 807, -1000, -1000, 1087, -1000,
	44884, 44884, -1000, -1000, 2636, 1736, -1000, -1000, 14923, -1000,
	6314, 6314, -1000, -1000, 27165, 44884, -1000, -3, -1000, 14,
	3054, -1000, -1000, -1000, 1340, -1000, -1000, 1342, 1087, 2904,
	44884, 1340, 1340, 1340, -1000, -1000, 16766, 44884, 44884, -1000,
	-1000, -1000, 3236, 9393, -1000, 33886, -1000, -1000, 39385, -1000,
	38774, 3236, 1770, -1000, 4245, 2067, 199, -1000, 245, -290,
	202, 1940, 201, 2289, -1000, -1000, 2464, 2455, 1545, -1000,
	1539, 2444, 1525, 1517, 2040, -1000, 67, -1000, 3030, 1088,
	-1000, 2635, -1000, 1512, 2955, -1000, 1330, -1000, 1734, 1460,
	-1000, -1000, -1000, 11241, 38163, 11241, 1088, 1449, 2952, 1330,
	3054, 2283, -1000, 1327, -1000, 2103, 1486, 159, -1000, -1000,
	-1000, 44884, 769, 2279, 1445, 37552, 1111, -1000, 806, 1484,
	1478, -1000, 35719, 285, 35719, -1000, 35719, -1000, -1000, 382,
	-1000, 44884, 3050, -1000, -1000, -1000, 2243, 1732, -315, 44884,
	-1000, -1000, -1000, -1000, -1000, 1431, -1000, 851, 851, 3757,
	3657, -1000, 13083, -1000, 13083, 3044, -1000, 1749, -1000, 11241,
	2062, 3786, 11241, 3786, 1764, 24721, 44884, -1000, -1000, 11241,
	11241, -1000, 3020, -1000, -1000, -1000, -1000, 11241, 11241, 2133,
	-1000, 44884, -1000, -1000, -1000, -1000, 24721, -1000, 13083, -1000,
	-1000, -1000, -1000, 11241, 1264, 1264, 3013, 1408, 119, 119,
	119, 3000, 2989, 2908, 1407, 119, 2898, 2894, 2889, 2788,
	2782, 2743, 2675, 2651, 2620, 2584, -1000, 2633, -1000, -1000,
	1914, 11855, 8779, -1000, -1000, 289, 1305, 2038, 2270, 149,
	-1000, 1728, -1000, 44884, 1065, -1000, -1000, -1000, 939, 388,
	-1000, 270, 2443, 1293, -1000, -1000, 44884, -1000, -1000, -1000,
	16766, 2609, 2631, 2609, 126, 1627, 596, 35719, 599, -1000,
	44884, 44884, 2081, 1710, 2903, 742, 3026, 44884, 2630, 410,
	2628, 2627, 3110, 434, 47790, 44884, 1200, -1000, 1469, 4866,
	-1000, 44884, -1000, 2171, -1000, 1589, -1000, -1000, 3236, -1000,
	-1000, 11241, 11241, 3236, 1589, 1589, -1000, 1011, 1746, -1000,
	44884, -1000, -1000, 434, 47790, 3107, 5171, 521, 2078, -1000,
	44884, -1000, -1000, -1000, 721, -1000, 955, 766, 44884, 1874,
	955, 1873, 2623, -1000, -1000, 44884, 44884, 44884, 44884, -1000,
	-1000, 44884, -1000, 44884, 44884, 44884, 44884, 44884, 36941, -1000,
	44884, 44884, -1000, 44884, 1864, 44884, 1863, 3111, -1000, 1627,
	1627, 907, -1000, -1000, 564, -1000, 36941, 2037, 2035, 2031,
	2030, 2269, 2267, 2264, 1627, 1627, 2027, 2262, 36330, 2261,
	1100, 2023, 2021, 2010, 2034, 2254, 919, -1000, 2253, 2022,
	2008, 2006, 44884, 2616, 2212, -1000, -1000, 126, 1627, 335,
	44884, 1697, 596, 455, -17, 22277, -1000, -1000, -1000, 44884,
	33886, 33886, 33886, 33886, -1000, 2927, 2925, -1000, 2921, 2919,
	2966, 44884, 33886, 2609, -1000, 36330, -1000, -1000, -1000, 1562,
	1401, 3165, 931, 11241, -1000, -1000, 25, 13, -1000, -1000,
	-1000, 35719, 2250, 532, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3174, 44884, 44884, 716, 2442, 1260, -1000, -1000, -1000,
	47790, 2595, 2595, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2595, 2595, 2607, -1000, -1000, 2594, 2594, 2594,
	2534, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2596, 2596, 2597, 2597, 2596, -1000, -1000, 3234, -1000,
	1237, -1000, -1000, 1424, -1000, 3234, 1812, -302, 4245, 1790,
	1701, -1000, 11241, 4245, 11241, -250, 321, -252, -1000, -1000,
	-1000, 2249, -1000, -1000, -1000, 2007, -1000, 2003, -1000, 139,
	148, 1857, -227, 8779, 409, 44884, -227, 44884, 8779, -1000,
	44884, 184, -322, -323, 169, 395, -227, 3174, 67, 11241,
	2998, -1000, -1000, 44884, 2001, -1000, -1000, -1000, 3250, 35719,
	2171, 1585, 35108, -1000, 282, -1000, 249, 555, 2247, -1000,
	845, 147, 2246, 2243, -1000, -1000, -1000, -1000, 13083, 1529,
	-1000, -1000, -1000, 2289, 11241, 2440, -1000, 954, 954, 2170,
	2439, 2436, -1000, 2595, 2595, -1000, 2534, 2594, 2534, 954,
	954, 2434, -1000, 2141, 2538, -1000, 2521, 2517, 11241, -1000,
	2429, 3502, 1541, -44, -190, 119, 119, -1000, -1000, -1000,
	-1000, 119, 119, 119, 119, -1000, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 732, -101, -280, -102,
	-282, -1000, 2428, 1230, -1000, -1000, -1000, -1000, -1000, 3871,
	1190, 477, 477, 2243, 2242, 803, 1002, 44884, -1000, -1000,
	-1000, 44884, 2240, 2239, 1071, 47790, 2426, 3094, 16155, 3093,
	2099, -1000, -1000, -1000, 26554, 550, -1000, -1000, -1000, 648,
	279, 2000, 516, -1000, 44884, 359, 359, 2986, 1695, 2234,
	44884, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3026, -1000,
	873, 416, 32664, 14312, -1000, 417, 44884, -1000, 16155, 16155,
	417, 431, 1814, -1000, 729, 1156, 152, 33886, 44884, -1000,
	33275, 2425, -1000, 1087, 3236, -1000, 2289, 2289, -316, 3236,
	3236, 1693, 1589, -1000, 431, -1000, 417, -1000, 1444, 17988,
	493, 492, 469, -1000, 622, -1000, -1000, 720, 3070, 47790,
	-1000, 44884, -1000, 44884, -1000, 44884, 44884, 766, 11241, 3070,
	44884, 796, -1000, 1067, 414, 383, 737, 737, 1169, -1000,
	3069, -1000, -1000, 1138, -1000, -1000, -1000, -1000, 44884, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 24721, 24721, 3150, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2232, 2231, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 44884, 1399, -1000, 1684, 2099, 26554, 1683,
	1623, 2230, 550, 2081, 1682, 2092, 44884, -1000, 1095, 44884,
	44884, -1000, 1277, -1000, 1679, 2867, 2899, 2867, -1000, -1000,
	-1000, -1000, 2918, -1000, 2901, -1000, -1000, 1277, -1000, -1000,
	-1000, -1000, -1000, 931, -1000, 3168, 955, 955, 955, 2424,
	-1000, -1000, -1000, 1111, 2407, -1000, -1000, -1000, 3262, -1000,
	-1000, -1000, -1000, -1000, -1000, 16766, 3023, 3223, 3228, 34497,
	3223, -1000, -302, 1729, -1000, 1954, 197, 1847, 44884, -1000,
	-1000, -1000, 2401, 2400, -232, 143, 3226, 3220, 994, -1000,
	2399, 1110, -227, -1000, -1000, 1088, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -227, -1000, 1088, -1000, 139, -1000, -1000,
	3029, -1000, -1000, 2171, -1000, 237, -1000, -1000, -1000, -1000,
	-1000, -1000, 191, -1000, 44884, -1000, 1107, 146, -1000, 2289,
	-1000, -1000, -1000, -1000, -1000, 3786, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11241, -1000, -1000,
	-1000, 2484, -1000, -1000, 11241, 2398, 2228, 2397, 2227, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3267, -1000, 3217, 1393, 2395,
	2388, 1369, 2387, 2386, -1000, 11241, 2385, 3871, 924, 2226,
	924, -1000, -1000, 353, 44884, 3247, -1000, -1000, -1000, -1000,
	-1000, 831, 417, 2384, 1097, -1000, -1000, -1000, -1000, 417,
	-1000, 2224, 212, -1000, -1000, -1000, -1000, 2222, 2221, 1995,
	-1000, -1000, 1976, 1069, 226, -1000, -1000, -1000, -1000, -1000,
	-1000, 2092, 2092, 2090, 1676, -318, -1000, 2593, -1000, 1627,
	1627, 1627, 44884, 1362, -1000, 1627, 1627, 2380, -1000, -1000,
	2379, 2378, -137, 714, 1659, 1645, -1000, 1993, 25943, 33886,
	33275, 1197, -1000, 1395, -1000, -1000, -1000, -1000, -1000, -1000,
	2215, 3236, 714, -1000, 483, 1992, 13083, 2588, 13083, 2583,
	513, 2580, 1361, -1000, 44884, -1000, -1000, 44884, 312, 2576,
	-1000, 2573, 2872, 467, 2570, 2562, 44884, 2476, -1000, 3070,
	44884, 698, 3005, -1000, -1000, -1000, 373, -1000, -1000, 544,
	-1000, 44884, -1000, 44884, -1000, 1479, -1000, 24721, -1000, -1000,
	1353, -1000, 2212, 2205, -1000, 212, 2203, 6314, -1000, -1000,
	2986, 2197, -1000, 2189, -1000, 44884, 1095, 1095, 3267, 44884,
	8779, -1000, -1000, 11241, 2561, -1000, 11241, -1000, -1000, -1000,
	-1000, -1000, 2560, 3003, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1726, -1000, 11241, 11241, -1000, -1000, 761, 4245, -254,
	314, -1000, -1000, -1000, -235, 2188, -1000, -1000, 3209, 2187,
	2120, 44884, -1000, -1000, 1088, 1088, -232, -1000, -1000, 1087,
	-1000, -1000, 989, 579, -1000, 2374, 2422, -1000, 2389, 119,
	-1000, 119, -1000, 233, 11241, -1000, 2185, -1000, -1000, -1000,
	2181, -1000, -1000, 2383, -1000, 2353, -1000, 2175, -1000, -1000,
	44884, 794, 997, 47790, -150, -137, 16155, -150, -1000, -1000,
	375, -1000, -1000, 344, -1000, -1000, 1964, 583, -1000, -1000,
	-1000, -1000, 1673, 1888, 2138, 30831, 24721, 25332, 2174, -1000,
	-1000, 32664, 1726, 1726, 48008, 269, 48349, -1000, 2558, 1036,
	1643, -1000, 1991, -1000, 1988, -1000, 3236, 1197, 151, -1000,
	-1000, 1580, -332, -1000, 1036, 2078, 3208, -1000, 3222, 44884,
	2915, 44884, 2544, 1665, 13083, -1000, 720, 2951, -1000, -1000,
	312, -1000, -1000, 1885, 13083, -1000, -1000, 2172, 25332, 812,
	1655, 1654, 841, 2542, -1000, 546, 3261, -1000, -1000, -1000,
	902, 2541, -1000, 1855, 1854, -1000, 44884, -1000, 30831, 30831,
	735, 735, 30831, 30831, 2540, 737, -1000, -1000, 13083, -1000,
	-1000, 1627, -1000, -1000, -1000, 1627, 1453, -1000, -1000, -1000,
	-1000, -1000, -1000, 2090, -1000, -1000, -1000, 3182, -1000, -1000,
	2289, 44884, 2289, 32053, -1000, 3204, 3203, -1000, 2289, 1075,
	-1000, -302, 44884, 44884, -238, 1986, -1000, 2167, 158, -1000,
	-1000, 1086, -235, -240, 72, 24721, 1653, -1000, -1000, -1000,
	-1000, -1000, 2352, -1000, 747, -1000, -1000, -1000, 1075, 2344,
	2336, -1000, -1000, -1000, -1000, 351, 44884, -119, -1000, -1000,
	421, -1000, -1000, -1000, 561, 2104, -1000, -1000, 343, -1000,
	-1000, 2162, -1000, -1000, 136, -1000, 1638, 1341, -1000, 2534,
	11241, -1000, -1000, -1000, -1000, -1000, -1000, 709, -1000, 417,
	48311, -1000, 996, -1000, 989, 709, 29609, 562, 318, -1000,
	1984, -1000, -1000, 3267, -1000, -1000, 558, -1000, 505, -1000,
	1314, -1000, 1309, 31442, 1979, 2819, -1000, 48138, 824, -1000,
	-1000, 3757, -1000, -1000, -1000, -1000, -1000, -1000, 2161, 2147,
	-1000, -1000, -1000, -1000, -1000, 1959, 2533, -5, 3139, 2146,
	-1000, -1000, 2529, 1298, 1290, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1281, 1269, 30831, -1000, -1000, 3757,
	1958, 24721, 1627, -1000, -1000, 1239, 1233, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2528, -1000, -1000, 3202, -238, -242,
	2144, 137, 138, -1000, 2139, -1000, -1000, 914, -228, 111,
	107, 103, -1000, -1000, -1000, 11241, -1000, -1000, 44884, 793,
	44884, 533, -1000, -1000, -1000, -1000, 190, -1000, -1000, -1000,
	-1000, -1000, 2138, 2137, -1000, 30831, 3069, 2276, 480, 3201,
	-1000, 48349, -1000, 1627, -1000, 480, 1219, -1000, 1627, 1627,
	-1000, 439, -1000, 1642, -1000, 1956, -1000, 3182, -1000, 435,
	-1000, 478, -1000, -1000, -1000, 1218, -1000, -1000, -1000, 48138,
	487, -1000, 689, 2524, -1000, -1000, 2331, 11241, 2516, 1627,
	2294, -106, 30831, 2871, 2868, 2745, 2586, 1191, -1000, -1000,
	24721, -1000, -1000, 30220, 44884, 2120, -1000, -1000, 2132, -1000,
	774, 131, 138, -1000, 3199, 155, 3198, 3197, 1058, 1838,
	-1000, 116, 113, 105, -1000, -1000, -1000, -1000, -1000, 350,
	534, -1000, 278, -1000, -1000, -1000, 302, -1000, -1000, 3069,
	-1000, 3195, 521, -1000, 24721, -1000, -1000, 29609, 1726, 1726,
	-1000, -1000, 1945, -1000, -1000, -1000, -1000, 1942, -1000, -1000,
	-1000, 1177, -1000, 44884, 880, 8165, -1000, 2271, -1000, 44884,
	-1000, 2897, -1000, 241, 1176, 302, 735, 302, 735, 302,
	735, 302, 735, 257, -1000, -1000, -1000, 1157, -1000, -1000,
	-1000, 2461, 1918, 143, 141, 3194, -1000, 2120, 3189, 2120,
	2120, -1000, 118, 914, -1000, -1000, -1000, 44884, 2131, -1000,
	-1000, -1000, -1000, 1627, 1627, 2124, 2122, 403, -1000, -1000,
	-1000, 28998, 493, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	487, 48349, -1000, 8165, 1149, -1000, 2289, -1000, 737, -1000,
	-1000, 2895, 2577, 3240, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 44884, 3115, 24110, 128, -1000, -1000,
	-1000, 2121, -1000, 2120, -1000, -1000, 1622, -1000, -1000, -278,
	1910, 1886, -1000, -1000, 44884, -1000, 44884, 483, -1000, 48349,
	1142, -1000, 8165, -1000, -1000, 3260, -1000, 3241, 829, 829,
	302, 302, 302, 302, -1000, -1000, 44884, -1000, 1121, -1000,
	-1000, -1000, 1390, -1000, -1000, -1000, -1000, 2118, -1000, -1000,
	2112, -1000, -1000, -1000, 1115, 2078, -1000, -1000, -1000, -1000,
	-1000, 1966, 551, -1000, 1041, -1000, 1620, -1000, 28387, 44884,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44884, 7551, -1000,
	1389, -1000, -1000, 2289, 44884, -1000,
}

var yyPgo = [...]int{
	0, 178, 3280, 263, 184, 3862, 82, 277, 246, 230,
	276, 3856, 3855, 3852, 3851, 3045, 3044, 3850, 3849, 3847,
	3846, 3845, 3844, 3842, 3841, 3840, 3839, 3838, 3836, 3834,
	3833, 3832, 3831, 3828, 3827, 3826, 3825, 3824, 3816, 3815,
	3814, 3812, 3810, 3809, 3808, 3807, 3792, 271, 3791, 3790,
	3785, 3784, 3783, 3782, 3780, 3775, 3774, 3772, 3771, 3768,
	3766, 3764, 3763, 3762, 3761, 3760, 3759, 3758, 3757, 3756,
	3751, 3749, 3740, 3739, 3737, 3736, 3735, 3734, 3732, 258,
	3731, 3730, 221, 3728, 3035, 3727, 3726, 3725, 3724, 3723,
	3722, 3721, 3720, 253, 3718, 3716, 3714, 3713, 3711, 3707,
	3702, 3700, 3696, 3694, 3693, 248, 3692, 3691, 3689, 3688,
	266, 3686, 226, 3685, 182, 154, 3684, 3682, 3681, 3678,
	3677, 3676, 3675, 243, 223, 74, 3674, 51, 3672, 3669,
	229, 3668, 160, 3663, 156, 3662, 3659, 3658, 3656, 3655,
	3653, 3652, 3651, 3637, 3633, 3632, 3631, 3630, 3628, 3626,
	3625, 3624, 3623, 96, 3622, 270, 3621, 76, 3619, 180,
	141, 3618, 83, 129, 265, 2682, 268, 252, 194, 190,
	103, 3617, 340, 3616, 167, 240, 164, 27, 3615, 145,
	3613, 275, 47, 43, 249, 150, 65, 166, 127, 3612,
	224, 114, 113, 3608, 3607, 149, 3606, 261, 187, 3605,
	107, 3604, 3603, 3596, 3593, 3590, 210, 200, 3589, 3588,
	135, 3587, 3586, 73, 144, 3584, 79, 130, 179, 126,
	3582, 112, 124, 133, 134, 99, 3581, 109, 3580, 3579,
	3575, 3573, 186, 3572, 3571, 142, 53, 3570, 3569, 3566,
	69, 3565, 77, 3560, 36, 3558, 68, 3557, 3556, 3555,
	3554, 3553, 3552, 3551, 3550, 3548, 3546, 3545, 3544, 50,
	3542, 3541, 9, 11, 16, 3540, 30, 3539, 181, 3538,
	3537, 176, 3535, 198, 3534, 3533, 95, 90, 3532, 92,
	172, 3531, 7, 29, 75, 3528, 3527, 232, 136, 104,
	158, 3526, 310, 3525, 3524, 3523, 165, 3522, 2585, 3517,
	3516, 3515, 3513, 3512, 3511, 125, 3510, 1, 222, 44,
	3509, 139, 140, 3508, 41, 48, 115, 209, 138, 98,
	3507, 3506, 3505, 541, 207, 105, 38, 0, 3504, 234,
	163, 3502, 3501, 3500, 272, 3499, 251, 204, 241, 500,
	267, 259, 3498, 3497, 71, 131, 3496, 171, 25, 58,
	143, 80, 21, 220, 3495, 14, 8, 199, 3494, 225,
	3492, 375, 18, 123, 155, 3491, 3490, 35, 274, 3489,
	3488, 3487, 132, 3486, 3485, 228, 78, 3484, 3483, 3481,
	3480, 37, 3479, 40, 13, 3478, 102, 3476, 254, 3474,
	256, 170, 189, 188, 161, 236, 242, 85, 84, 3473,
	1749, 157, 101, 17, 3472, 237, 3469, 193, 119, 3468,
	88, 3467, 262, 278, 216, 3464, 192, 12, 49, 32,
	33, 46, 10, 255, 217, 3462, 3460, 23, 55, 3459,
	59, 3458, 20, 3457, 3456, 3455, 72, 5, 3454, 3453,
	19, 22, 3451, 39, 273, 196, 122, 97, 61, 3450,
	3449, 52, 250, 3448, 152, 159, 162, 3447, 81, 3444,
	3443, 3442, 3441, 877, 3440, 264, 3439, 3438, 3436, 3433,
	3432, 3431, 3430, 3427, 227, 3426, 106, 45, 3422, 3421,
	3419, 3416, 87, 153, 3413, 3412, 3411, 3410, 31, 147,
	3408, 15, 3407, 26, 24, 34, 3406, 100, 3405, 3,
	191, 3404, 3402, 4, 3400, 3399, 2, 3398, 3396, 137,
	3395, 94, 28, 177, 116, 3393, 3391, 91, 233, 151,
	3388, 3382, 108, 257, 211, 3381, 60, 247, 269, 3380,
	215, 3379, 3378, 3376, 3375, 3374, 3373, 1119, 3372, 3358,
	244, 70, 93, 3357, 231, 118, 3354, 3353, 89, 173,
	128, 120, 66, 86, 3352, 117, 208, 3350, 202, 3348,
	3346, 3338, 110, 3335, 3333, 3331, 3329, 195, 3325, 3321,
	197, 238, 3320, 3315, 290, 3314, 3312, 3311, 3309, 3302,
	3301, 3298, 3294, 3292, 3285, 260, 424, 3282,
}

//line mysql_sql.y:12158
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 580, 583, 583, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 120, 120, 318, 318, 319,
	319, 150, 559, 559, 121, 121, 121, 121, 121, 121,
	121, 119, 565, 565, 565, 566, 566, 116, 139, 138,
	141, 141, 140, 140, 137, 137, 133, 136, 136, 135,
	135, 134, 129, 131, 131, 130, 132, 132, 117, 105,
	118, 508, 508, 507, 507, 506, 506, 459, 459, 460,
	460, 307, 307, 307, 505, 505, 505, 504, 504, 503,
	503, 502, 502, 500, 500, 501, 499, 498, 498, 498,
	496, 496, 496, 492, 492, 494, 493, 493, 495, 487,
	487, 490, 490, 488, 488, 488, 488, 491, 486, 486,
	486, 485, 485, 104, 104, 104, 402, 402, 103, 103,
	416, 416, 416, 416, 416, 414, 414, 414, 414, 414,
	414, 413, 413, 412, 412, 417, 417, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 94, 94,
	94, 94, 94, 99, 99, 99, 571, 571, 570, 570,
	572, 572, 572, 572, 573, 573, 97, 97, 97, 98,
	411, 411, 411, 95, 96, 96, 401, 401, 406, 406,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 410, 410, 410, 408, 408, 407, 407,
	409, 409, 88, 88, 88, 91, 90, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 89, 89, 89, 89,
	89, 89, 83, 83, 83, 83, 83, 82, 82, 84,
	84, 398, 398, 397, 100, 100, 101, 568, 568, 567,
	569, 569, 569, 569, 102, 108, 108, 108, 108, 108,
	108, 108, 108, 107, 107, 110, 110, 109, 111, 93,
	93, 93, 93, 93, 93, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 533, 533,
	533, 535, 535, 332, 333, 584, 335, 331, 331, 331,
	529, 529, 530, 531, 532, 532, 532, 106, 14, 196,
	196, 434, 434, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 13, 81, 86, 86, 87, 272, 272, 273,
	267, 267, 274, 274, 275, 275, 275, 280, 280, 281,
	281, 268, 268, 268, 268, 268, 268, 268, 268, 268,
	268, 268, 268, 268, 268, 268, 268, 268, 268, 268,
	268, 268, 268, 254, 254, 254, 249, 249, 249, 249,
	250, 250, 251, 251, 252, 252, 252, 252, 253, 253,
	324, 324, 276, 276, 276, 278, 278, 277, 271, 269,
	269, 269, 269, 269, 269, 269, 270, 270, 270, 270,
	279, 279, 79, 85, 85, 85, 547, 547, 80, 558,
	558, 463, 463, 347, 347, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 468, 469, 342, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 54, 57, 58, 53,
	53, 53, 387, 387, 52, 585, 585, 317, 317, 67,
	66, 56, 68, 69, 70, 71, 72, 73, 51, 65,
	65, 65, 65, 65, 65, 65, 65, 76, 481, 481,
	587, 587, 587, 74, 75, 462, 462, 462, 64, 63,
	62, 61, 60, 60, 50, 50, 49, 49, 55, 145,
	59, 146, 146, 339, 339, 339, 341, 341, 337, 345,
	345, 586, 586, 430, 430, 340, 340, 48, 48, 48,
	48, 77, 338, 338, 316, 336, 336, 336, 12, 12,
	10, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 26, 27, 29, 395,
	395, 392, 28, 20, 19, 19, 23, 22, 18, 18,
	21, 24, 25, 25, 9, 9, 9, 9, 15, 15,
	16, 169, 169, 222, 222, 541, 541, 537, 537, 538,
	538, 538, 539, 539, 540, 540, 112, 475, 475, 475,
	475, 475, 475, 8, 8, 191, 191, 474, 474, 474,
	474, 474, 474, 399, 399, 399, 518, 518, 518, 519,
	190, 190, 185, 185, 476, 476, 364, 520, 520, 484,
	484, 483, 483, 482, 482, 188, 188, 189, 189, 172,
	172, 124, 124, 489, 489, 489, 489, 497, 497, 458,
	458, 259, 259, 309, 309, 310, 310, 162, 162, 163,
	163, 163, 163, 163, 163, 574, 574, 575, 576, 577,
	577, 578, 578, 578, 579, 579, 579, 579, 579, 526,
	526, 528, 528, 527, 187, 187, 183, 183, 184, 184,
	184, 182, 182, 181, 180, 180, 179, 177, 177, 177,
	178, 178, 178, 195, 195, 165, 165, 165, 164, 164,
	164, 164, 164, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 166, 166, 534, 534, 534,
	464, 464, 464, 471, 471, 289, 289, 290, 290, 288,
	288, 167, 167, 168, 168, 168, 168, 287, 287, 286,
	170, 170, 176, 175, 175, 171, 171, 171, 171, 297,
	297, 296, 296, 296, 296, 115, 122, 122, 123, 194,
	194, 295, 294, 294, 294, 193, 193, 192, 192, 186,
	186, 174, 174, 174, 174, 293, 173, 291, 564, 564,
	563, 563, 562, 560, 560, 560, 561, 561, 561, 561,
	510, 510, 510, 510, 510, 325, 325, 325, 330, 330,
	328, 328, 328, 328, 328, 334, 7, 7, 7, 7,
	7, 7, 7, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 39, 205, 206, 40,
	207, 207, 208, 208, 209, 209, 210, 211, 212, 212,
	212, 212, 38, 197, 197, 198, 198, 199, 199, 200,
	201, 201, 201, 204, 202, 203, 203, 582, 582, 581,
	37, 37, 30, 154, 154, 155, 155, 155, 157, 157,
	255, 255, 255, 156, 156, 158, 158, 158, 542, 544,
	544, 546, 545, 545, 545, 548, 548, 548, 548, 548,
	549, 549, 549, 549, 550, 550, 31, 142, 142, 147,
	553, 553, 553, 552, 552, 554, 554, 555, 555, 313,
	313, 314, 314, 152, 153, 153, 149, 144, 160, 160,
	160, 160, 160, 161, 161, 143, 148, 151, 543, 551,
	551, 551, 396, 396, 393, 394, 394, 391, 390, 390,
	390, 557, 557, 556, 556, 556, 326, 326, 32, 386,
	386, 388, 389, 389, 389, 380, 380, 380, 380, 36,
	384, 384, 385, 385, 385, 385, 385, 385, 385, 381,
	381, 383, 383, 379, 379, 379, 379, 379, 379, 379,
	35, 159, 159, 378, 378, 375, 375, 373, 373, 374,
	374, 372, 372, 372, 376, 376, 43, 78, 44, 45,
	46, 42, 377, 377, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 126, 125, 125, 125, 125, 125,
	128, 128, 312, 312, 311, 311, 127, 256, 256, 41,
	234, 234, 450, 450, 445, 445, 445, 445, 445, 466,
	466, 466, 446, 446, 446, 447, 447, 447, 449, 449,
	449, 448, 448, 448, 448, 448, 465, 465, 467, 467,
	467, 418, 418, 419, 419, 419, 422, 422, 437, 437,
	438, 438, 436, 436, 443, 443, 442, 442, 441, 441,
	440, 440, 439, 439, 439, 439, 433, 433, 432, 432,
	420, 420, 420, 420, 420, 421, 421, 421, 431, 431,
	435, 435, 285, 285, 284, 284, 242, 242, 243, 243,
	283, 283, 240, 240, 241, 241, 241, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 516, 516, 517, 245, 245, 257, 257, 257,
	257, 257, 257, 244, 244, 246, 246, 223, 223, 221,
	221, 213, 213, 213, 213, 213, 213, 214, 214, 215,
	215, 216, 216, 216, 220, 220, 219, 219, 219, 219,
	217, 217, 218, 218, 218, 218, 218, 218, 404, 404,
	513, 513, 514, 514, 509, 509, 509, 512, 512, 512,
	512, 512, 512, 512, 515, 515, 515, 511, 511, 224,
	306, 306, 306, 327, 327, 327, 327, 329, 305, 305,
	305, 239, 239, 238, 238, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 403, 403, 343,
	343, 344, 344, 266, 265, 265, 265, 265, 265, 263,
	264, 262, 262, 262, 262, 262, 261, 261, 260, 260,
	260, 382, 382, 258, 258, 248, 248, 248, 247, 247,
	247, 444, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 303, 303, 303, 304, 304, 304, 304, 304, 304,
	304, 304, 354, 354, 360, 360, 525, 525, 524, 225,
	225, 225, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 235, 235, 235, 427, 427, 427, 427, 428, 428,
	428, 428, 429, 429, 429, 425, 425, 426, 426, 365,
	366, 366, 472, 472, 473, 473, 423, 423, 424, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 480, 480, 480, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	536, 536, 536, 521, 521, 521, 522, 522, 522, 522,
	522, 522, 522, 522, 522, 522, 522, 522, 523, 523,
	523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
	523, 523, 523, 523, 523, 301, 301, 301, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 367, 367, 368, 368,
	477, 477, 477, 477, 477, 477, 478, 478, 479, 479,
	479, 479, 470, 470, 470, 470, 470, 470, 470, 470,
	470, 470, 470, 470, 470, 470, 470, 470, 470, 470,
	470, 470, 470, 470, 470, 470, 470, 470, 470, 470,
	470, 352, 298, 298, 298, 369, 361, 361, 362, 362,
	363, 363, 355, 355, 355, 355, 355, 355, 356, 356,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 357, 357, 359, 359, 371, 371, 371, 370,
	370, 370, 370, 370, 370, 370, 237, 237, 237, 237,
	349, 349, 349, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 227, 227, 227, 227, 231,
	231, 233, 233, 233, 233, 233, 233, 233, 233, 233,
	233, 233, 233, 233, 233, 232, 232, 232, 232, 232,
	230, 230, 230, 230, 230, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 113, 114, 114, 229, 308, 308, 451,
	451, 454, 454, 452, 452, 453, 455, 455, 455, 456,
	456, 456, 457, 457, 457, 461, 461, 315, 315, 315,
	323, 323, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 8, 8, 0, 2, 0,
	2, 6, 1, 2, 5, 6, 8, 10, 9, 11,
	13, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 1, 3, 3, 1,
	2, 2, 2, 1, 2, 2, 3, 4, 4, 6,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 4, 3, 3, 2, 4, 4,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 2, 2, 0, 1, 4,
	2, 4, 1, 5, 3, 2, 1, 2, 2, 4,
	4, 5, 2, 1, 3, 4, 4, 1, 2, 9,
	7, 1, 3, 3, 1, 1, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 4, 1,
	1, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 10, 7, 4, 4, 3, 1, 3, 3,
	1, 3, 1, 6, 3, 3, 3, 1, 1, 1,
	3, 2, 4, 5, 5, 6, 5, 5, 3, 2,
	2, 1, 3, 4, 3, 7, 5, 8, 2, 2,
	1, 3, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 2, 1, 3, 2, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 6, 3, 3,
	1, 1, 7, 7, 8, 8, 0, 4, 7, 0,
	3, 0, 2, 0, 1, 1, 1, 1, 4, 2,
	2, 3, 3, 4, 5, 3, 4, 4, 2, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 3, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 7, 7, 5, 4, 7, 8, 3, 3,
	2, 3, 4, 0, 2, 2, 0, 2, 2, 0,
	5, 1, 1, 1, 1, 0, 1, 5, 5, 5,
	4, 3, 1, 3, 1, 1, 3, 5, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 4, 1,
	3, 1, 4, 6, 6, 4, 4, 4, 4, 4,
	3, 6, 3, 5, 1, 1, 2, 2, 11, 8,
	9, 1, 3, 2, 4, 0, 2, 0, 1, 1,
	1, 1, 0, 1, 0, 1, 4, 2, 1, 5,
	4, 4, 2, 5, 5, 1, 3, 2, 1, 5,
	4, 4, 2, 0, 5, 4, 0, 1, 3, 3,
	1, 3, 1, 3, 1, 3, 4, 0, 1, 0,
	1, 1, 3, 1, 1, 0, 4, 1, 3, 2,
	1, 0, 8, 0, 4, 7, 4, 0, 2, 0,
	2, 0, 2, 0, 4, 1, 3, 1, 1, 6,
	4, 5, 7, 4, 5, 0, 1, 3, 8, 0,
	6, 0, 4, 6, 1, 1, 1, 1, 1, 2,
	3, 1, 3, 6, 0, 3, 0, 1, 2, 4,
	4, 0, 1, 3, 1, 3, 3, 0, 1, 1,
	0, 2, 2, 0, 2, 3, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 7, 7, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	2, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 3, 1, 1, 1, 4, 4, 4, 3, 2,
	2, 2, 3, 2, 3, 4, 1, 3, 4, 0,
	2, 1, 1, 2, 2, 0, 1, 2, 4, 1,
	3, 1, 3, 2, 3, 1, 4, 3, 0, 1,
	1, 2, 5, 2, 2, 2, 0, 2, 3, 3,
	0, 1, 3, 1, 3, 0, 1, 2, 1, 1,
	0, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 1, 7,
	1, 3, 0, 1, 1, 3, 1, 3, 0, 1,
	1, 1, 14, 1, 3, 0, 1, 1, 3, 1,
	1, 2, 4, 1, 1, 1, 1, 0, 1, 2,
	9, 9, 7, 1, 2, 3, 3, 3, 0, 4,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 4, 1, 1, 1, 3, 3, 4, 3, 3,
	0, 1, 1, 1, 0, 2, 7, 8, 8, 8,
	0, 3, 3, 0, 3, 0, 3, 0, 5, 1,
	3, 0, 3, 3, 0, 2, 9, 7, 0, 2,
	2, 3, 3, 0, 2, 4, 4, 4, 1, 0,
	2, 2, 1, 3, 2, 1, 3, 2, 1, 3,
	2, 0, 1, 3, 4, 3, 1, 1, 4, 1,
	3, 1, 1, 1, 1, 0, 1, 1, 1, 11,
	0, 2, 3, 3, 2, 2, 3, 1, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 2, 2,
	6, 0, 4, 1, 1, 0, 3, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 8, 2, 4, 4,
	4, 9, 0, 2, 11, 9, 11, 8, 6, 9,
	7, 10, 7, 6, 2, 2, 9, 4, 5, 3,
	0, 4, 1, 3, 0, 3, 6, 0, 2, 10,
	0, 2, 0, 2, 0, 3, 2, 4, 3, 0,
	2, 1, 0, 2, 3, 0, 2, 3, 0, 2,
	1, 0, 3, 2, 4, 3, 0, 1, 0, 1,
	1, 0, 6, 0, 3, 5, 0, 4, 0, 3,
	1, 3, 4, 5, 0, 3, 1, 3, 2, 3,
	1, 2, 0, 4, 6, 5, 0, 2, 0, 2,
	4, 5, 4, 5, 1, 5, 6, 5, 0, 3,
	0, 1, 1, 3, 3, 3, 0, 4, 1, 3,
	3, 3, 0, 1, 1, 3, 2, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	5, 4, 1, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 0, 2, 5, 5, 5, 5, 0, 1, 1,
	3, 1, 1, 1, 1, 1, 7, 9, 7, 9,
	2, 1, 7, 9, 7, 9, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 3,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 2, 1, 2, 2, 1, 1,
	2, 2, 2, 3, 3, 2, 2, 1, 5, 6,
	4, 1, 1, 1, 5, 4, 1, 1, 2, 0,
	1, 1, 2, 5, 0, 1, 1, 2, 2, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 2, 2,
	2, 0, 3, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 3, 5,
	2, 2, 2, 2, 4, 1, 1, 2, 5, 6,
	8, 6, 6, 6, 1, 1, 1, 1, 1, 1,
	3, 4, 4, 4, 7, 9, 7, 7, 7, 9,
	7, 7, 0, 2, 0, 1, 1, 2, 4, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 5, 0, 1, 3,
	0, 1, 0, 2, 0, 2, 0, 1, 6, 8,
	8, 6, 6, 5, 5, 5, 6, 6, 6, 6,
	5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 1, 1, 1, 4, 4, 6, 8, 6, 4,
	5, 4, 4, 4, 3, 4, 6, 6, 7, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 8, 4, 2,
	3, 2, 4, 2, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 4, 4, 4, 0, 1, 2, 3,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 0, 1, 1, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 1, 1,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 3, 4, 4, 5, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 4, 1, 2, 3, 5, 1, 1, 3, 0,
	1, 0, 3, 0, 3, 3, 0, 3, 5, 0,
	3, 5, 0, 1, 1, 0, 1, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -580, -583, -2, -5, 621, -1, -4, -114, -88,
	-7, -14, -116, -117, -8, -112, -9, -10, -12, -92,
	-107, -109, -111, -110, -47, -11, -106, -82, -83, -94,
	-100, -103, -104, -105, -118, -113, -115, -162, -119, -120,
	-121, 611, -89, -90, -91, -33, -32, -31, -30, -142,
	-147, -150, 544, 617, 447, 14, 496, -15, -16, -526,
	-17, 259, -331, -332, -333, -335, -584, -48, -49, -50,
	-60, -61, -62, -63, -64, -74, -75, -76, -51, -52,
	-53, -56, -54, -67, -66, -68, -69, -70, -71, -72,
	-73, -55, -59, -145, -146, -77, -57, -78, -58, -80,
	-79, -85, -81, -86, -144, -149, -13, -87, 234, -84,
	76, -95, -96, -97, -98, -99, -101, -102, 371, 377,
	434, 610, 61, -163, -165, 628, 629, 632, 159, 160,
	162, 163, -34, -35, -36, -37, -38, -39, -41, -40,
	-42, -43, -44, -45, -46, 230, 16, 539, -18, -21,
	-19, -22, -20, -28, -29, -27, -24, -26, -143, -25,
	-148, -23, -151, 254, 253, 38, 320, 321, 322, 375,
	252, 231, 233, 15, 31, 42, 351, -164, 82, 531,
	532, 534, 232, -166, 13, 634, -6, -3, -2, -129,
	-133, -137, -140, -141, -138, -139, -4, -114, 117, 244,
	612, -327, 367, 613, 615, 614, 85, 93, -320, -322,
	447, 259, 371, 377, 610, 629, 632, 546, 547, 548,
	549, 550, 551, 552, 553, 555, 556, 557, 558, 559,
	560, 561, 571, 572, 562, 563, 564, 565, 566, 567,
	568, 569, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 499, 596, 597, 598,
	599, 527, 554, 590, 591, 592, 593, 349, 350, 536,
	271, 295, 402, 301, 308, 159, 178, 172, 200, 192,
	532, 167, 275, 313, 276, 92, 162, 482, 107, 459,
	431, 165, 290, 292, 294, 528, 529, 361, 297, 526,
	296, 298, 300, 530, 277, 352, 188, 183, 289, 273,
	181, 278, 40, 279, 205, 280, 281, 541, 455, 348,
	461, 305, 52, 429, 182, 456, 293, 458, 209, 213,
	473, 474, 176, 177, 463, 476, 204, 207, 208, 251,
	345, 346, 43, 538, 263, 477, 211, 203, 199, 485,
	309, 307, 202, 175, 198, 274, 65, 215, 214, 216,
	425, 426, 427, 428, 282, 283, 365, 472, 195, 184,
	353, 168, 23, 480, 258, 460, 378, 284, 302, 310,
	210, 212, 265, 270, 540, 531, 433, 269, 306, 478,
	180, 262, 291, 257, 481, 169, 534, 380, 285, 163,
	299, 475, 484, 64, 393, 174, 166, 248, 160, 267,
	272, 286, 287, 288, 525, 312, 311, 303, 533, 196,
	264, 201, 186, 173, 197, 161, 266, 483, 394, 608,
	351, 412, 194, 191, 268, 241, 479, 462, 164, 416,
	395, 189, 314, 603, 604, 605, 366, 344, 315, 316,
	187, 255, 453, 454, 319, 422, 335, 396, 432, 403,
	397, 222, 223, 323, 465, 467, 206, 606, 324, 325,
	326, 457, 327, 328, 329, 330, 370, 56, 58, 94,
	97, 96, 630, 631, 63, 29, 356, 359, 391, 398,
	337, 609, 537, 334, 338, 339, 360, 25, 414, 382,
	418, 417, 48, 49, 50, 53, 54, 55, 57, 59,
	60, 51, 524, 375, 388, 486, 45, 47, 385, 27,
	362, 413, 435, 333, 415, 446, 46, 444, 445, 466,
	26, 364, 363, 62, 44, 421, 423, 424, 317, 331,
	373, 618, 487, 368, 384, 387, 369, 336, 358, 389,
	67, 66, 381, 619, 376, 374, 332, 542, 543, 340,
	570, 354, 430, 521, 520, 519, 518, 517, 516, 515,
	514, 320, 321, 322, 399, 400, 401, 411, 404, 405,
	406, 407, 408, 409, 410, 449, 450, 620, 468, 470,
	471, 469, 236, 633, 355, 239, 622, 623, 95, 624,
	626, 625, 28, 627, -409, -407, -327, 532, 610, 377,
	531, 534, 371, 351, 629, 632, 375, 259, 320, 321,
	322, 447, 349, -207, -327, 633, -172, 243, 39, -221,
	-327, -172, -84, -16, -15, -164, -165, -221, 238, -336,
	24, 429, -93, 430, 234, 82, 77, -327, -9, -105,
	-8, -112, -82, -162, 434, -334, -327, 320, 320, -334,
	238, -329, 269, 410, -327, -463, 244, -413, -386, 270,
	-412, -388, -415, -389, 32, 230, 232, 231, 544, 266,
	16, 375, 240, 14, 13, 376, 252, 25, 26, 28,
	15, 377, 379, 29, 380, 383, 384, 385, 42, 388,
	389, 259, 85, 93, 88, 277, -206, -327, -363, -355,
	114, -358, -350, -351, -353, -307, -500, -348, 82, 141,
	142, 149, 115, 635, -352, -444, 36, 117, 550, 554,
	590, 497, -299, -300, -301, -302, -303, -304, -327, -501,
	-499, 88, 98, 100, 104, 105, 103, 101, 153, 185,
	102, 89, 154, -165, 85, -521, 560, -321, 583, 596,
	597, 598, 599, 582, 61, -470, -479, 237, -477, 152,
	190, 255, 186, 14, 147, 422, 187, 591, 592, 593,
	557, 579, 499, 561, 571, 586, 552, 553, 555, 547,
	548, 549, 551, 562, 564, 578, -480, 574, 584, 585,
	570, 594, 595, 587, 588, 589, 626, 87, 86, 577,
	576, 563, 558, 559, 565, 546, 556, 566, 567, 575,
	580, 581, 359, 107, 360, 361, 489, 352, 362, 244,
	429, 70, 363, 364, 365, 366, 367, 496, 368, 71,
	369, 358, 259, 412, 370, 189, 206, 501, 500, 502,
	493, 490, 488, 491, 492, 494, 495, 568, 569, 573,
	-122, -123, 601, -574, -292, -575, 6, 7, 8, 9,
	-576, 154, -565, 431, 540, 88, 313, 349, 164, 161,
	-400, 164, 113, 169, 168, -400, 166, 323, 265, -377,
	-154, 349, 412, 327, 94, 269, -380, -378, 528, -465,
	317, 313, 289, 239, 110, -155, 249, 248, 108, 489,
	237, 386, 308, 56, 58, -537, -538, 227, 228, 229,
	-528, 522, -527, -327, 361, 96, 97, 27, 238, 372,
	265, 467, 465, 466, 468, 469, 470, 471, -65, -481,
	-462, 462, 461, -340, 454, 460, 452, 464, 455, 350,
	329, 544, 328, 230, 622, 529, 523, -315, 396, 432,
	486, 487, 373, 433, 473, 475, 456, 107, 193, 190,
	239, 241, 238, 349, 489, 412, 94, 327, 238, -537,
	161, 473, 475, 269, 410, 41, -406, 422, -405, -407,
	474, 485, 86, 87, 472, -315, 107, 453, 453, -574,
	-292, -163, -165, -115, -526, 530, 530, 530, 239, 349,
	412, 269, 240, 238, 525, 528, 241, 489, 237, 320,
	372, 265, 327, 94, 166, -464, -534, 32, -471, 224,
	225, 226, 33, 34, -1, 121, 634, -355, -355, -6,
	637, -6, -355, -327, -327, 156, -227, -231, -228, -230,
	-229, -233, -232, 190, 191, 152, 194, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 207, 208, 205, 31,
	206, 255, 186, 187, 188, 189, 209, 172, 192, 537,
	217, 173, 218, 174, 219, 175, 220, 176, 177, 221,
	178, 181, 182, 183, 184, 180, 155, -196, 88, 32,
	82, 155, 88, -188, 261, -172, -221, -213, 155, 635,
	-188, -574, -181, -182, 11, -221, -305, -327, 431, 124,
	-93, 77, -93, 430, 77, -529, -530, -531, -533, 234,
	430, 429, -110, 155, 277, 17, -334, -334, 80, -221,
	-388, 269, -413, -386, 36, 79, 156, 242, 156, 79,
	82, 373, 349, 412, 374, 489, 238, 386, 241, 269,
	387, 349, 412, 238, 241, 489, 269, 349, 238, 241,
	412, 269, 387, 349, 452, 453, 241, 27, 378, 381,
	382, 453, -485, 485, 156, 113, 110, 111, 112, -355,
	131, -370, 124, 125, 126, 127, 128, 129, 130, 138,
	137, 148, 141, 142, 143, 144, 145, 146, 147, 139,
	140, 134, 114, 132, 136, 133, 116, 151, -165, -355,
	-363, 61, -353, -353, -353, -353, -327, -444, -360, -355,
	82, 82, 82, 82, 155, 101, 88, -355, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	-478, 82, 82, -367, -368, 82, 82, -348, -305, 82,
	88, 88, 82, 82, 82, 88, 82, 82, 82, -368,
	-368, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, -182, 156, -181, 82,
	-181, -182, -166, -165, 32, 33, 32, 33, 32, 33,
	32, 33, -577, 619, 82, 98, 630, 222, 17, -327,
	478, 539, 167, 168, 169, -375, 244, -205, -327, -207,
	372, 241, 525, 241, -155, -375, -375, -375, -375, -375,
	240, -375, 24, 238, 238, 238, 238, -375, 496, 124,
	124, 59, -539, 171, 156, -528, -187, 82, -339, 132,
	136, -339, -288, 18, 24, 267, 267, 267, -339, 307,
	-585, -586, 17, 134, -337, -586, -337, -337, -339, -587,
	240, 463, 43, 268, 267, -183, -184, 22, -183, 457,
	453, -430, 458, 459, -341, -586, -340, -339, -339, -340,
	-339, -339, -339, 32, 238, 241, 489, 327, 623, -585,
	-585, 31, 31, -463, -463, -221, -463, 523, -316, -327,
	-463, -463, -463, -272, -273, -221, -540, 243, -571, -570,
	476, -573, 478, 161, -407, 161, -407, -388, 269, 269,
	156, 124, 24, -408, 124, 135, -407, -407, -408, -408,
	-244, 41, -326, 152, -327, 88, -244, 41, -568, -567,
	-221, -182, -166, -165, 83, 83, 83, 533, 533, 533,
	-463, -463, -463, -463, -463, -465, -463, -463, -463, -463,
	-463, -334, -197, -327, -207, 244, -463, -463, -463, -167,
	-168, 143, -355, -327, -167, -3, -131, -130, 118, 119,
	121, 613, 367, 612, 616, 610, -407, 41, -457, 394,
	393, -451, -453, 82, -452, 82, -452, -452, -452, -452,
	-452, 82, 82, -454, 82, -454, -454, -451, -455, 82,
	-455, -456, 82, -456, -455, -327, -434, 539, -361, -363,
	-327, 39, -474, 61, -162, 82, 31, 82, -188, -327,
	636, 187, 166, 627, -475, 61, -162, 82, 31, -182,
	-124, 39, -184, 21, 155, 98, 88, -110, -93, 77,
	-110, 83, 156, -532, 104, 105, -535, 204, 196, -327,
	-108, 88, -7, -8, -9, -10, -47, -82, -79, -162,
	231, -502, -500, 82, 32, 421, 79, 17, -414, 238,
	489, 372, 265, 241, 349, -412, -395, -392, -390, -326,
	-388, -391, -390, -417, -305, 453, -125, 436, 435, 319,
	-355, -355, -355, -355, -355, 103, 114, 344, 104, 105,
	-350, -371, 32, 315, 316, -351, -351, -351, -351, -351,
	-351, -351, -351, -351, -351, -351, -351, -359, -369, -444,
	82, 134, 132, 136, 133, 116, -353, -353, -351, -351,
	-246, -326, 152, 83, 156, -355, -525, -524, 118, -355,
	-355, -355, -355, -327, -522, -523, 503, 504, 505, 506,
	507, 508, 509, 510, 511, 512, 513, 363, 358, 364,
	362, 352, 370, 365, 366, 189, 520, 521, 514, 515,
	516, 517, 518, 519, -361, -361, -355, -522, -361, -298,
	33, 32, -363, -363, -363, 83, -355, -536, 342, 341,
	343, -185, -327, -361, 83, 83, 83, 98, -363, -363,
	-361, -351, -361, -361, -361, -361, -523, -298, -298, -298,
	-298, 143, -363, -363, -298, -298, -298, -298, 143, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, 83,
	83, 83, 143, -363, -183, -123, -483, -482, -355, 41,
	-124, -184, -578, 620, 82, -305, -566, 88, 88, 635,
	166, 17, 489, 479, 480, 165, 168, 167, -327, 114,
	35, 82, -197, -375, -375, -375, -544, -327, 89, -396,
	-393, -390, -327, -327, -386, -327, -316, -221, -375, -375,
	-375, -375, -221, -255, 53, 54, 55, -390, -156, 56,
	57, -540, -527, 35, -186, -327, -288, -353, -353, -355,
	-390, 269, -585, -339, -339, -317, -316, -341, -336, -341,
	-341, -288, -337, -339, -339, -355, -341, -337, -288, -327,
	453, -288, -288, -430, -339, -338, -327, -338, -375, -316,
	-317, -317, -221, -221, -267, -274, -268, -275, 261, 235,
	356, 357, 233, 231, 11, 232, -282, 308, -376, 497,
	-250, -251, 77, 42, -253, 259, 398, 391, 271, 275,
	92, 276, 431, 277, 240, 279, 280, 281, 296, 298,
	251, 282, 283, 284, 422, 285, 160, 297, 286, 287,
	288, 374, -245, 6, 330, 41, 51, 52, 445, 444,
	542, 539, 272, -544, -542, 31, -327, 31, -396, -327,
	-327, 156, 242, -175, -170, -174, -171, -176, -291, -293,
	-173, 82, -221, -165, -327, 156, 477, 479, 480, -571,
	-408, -571, -408, 32, 421, -411, 421, 32, -386, -405,
	473, 475, -401, 88, 422, -391, -410, 79, 152, -482,
	-408, -408, -410, -410, 151, 156, -569, 478, 479, 227,
	-183, 98, 98, 98, -223, -221, -544, -395, -386, -327,
	-463, -223, -223, -223, -329, -329, 82, 155, 36, -327,
	-327, -327, -287, 156, -286, 17, -328, -327, 35, 88,
	155, -287, -132, -130, 120, -355, -6, 612, -355, -6,
	-6, -355, -6, -355, -461, 395, 98, 98, -308, 88,
	-308, 98, 98, 98, 545, 83, 88, -399, 79, -476,
	-364, -520, 601, -190, 83, -185, -518, -519, -185, -189,
	-327, -474, -213, 124, 124, 124, -476, -190, 83, -518,
	-183, 602, -124, -180, -179, -355, -327, 24, -110, -93,
	-530, 155, 349, 156, -186, -414, -394, -391, -416, 143,
	-327, -402, 156, 539, 638, 86, 242, -557, -556, 413,
	83, 156, -486, 243, 496, 88, 635, 429, 222, 223,
	103, 344, 104, 105, -444, -363, -359, -353, -353, -351,
	-351, -357, 256, -357, 113, -355, 636, -354, -524, 120,
	-355, 35, 156, 35, 156, 80, 155, 83, 83, 17,
	17, 83, -355, 83, 83, 83, 83, 17, 17, -355,
	83, 155, 83, 83, 83, 83, 80, 83, 156, 83,
	83, 83, 83, 156, -363, -363, -355, -363, 83, 83,
	83, -355, -355, -355, -363, 83, -355, -355, -355, -355,
	-355, -355, -355, -355, -355, -355, -424, 448, -424, -424,
	156, 156, 156, 83, -124, 82, 98, 156, 631, -312,
	-311, 88, -327, 166, -327, 166, 169, 169, 168, 24,
	36, -206, -208, -209, -210, -211, -212, 134, 157, 158,
	82, -221, -221, -221, -546, 399, -558, 156, 41, -556,
	489, 238, -152, 319, -379, 80, -159, 17, 539, -221,
	-221, -221, -221, -234, 35, 17, -169, -222, -327, 82,
	83, 156, -387, 80, -327, -317, -288, -288, -341, -288,
	-288, 156, 23, -339, -341, -341, -345, 635, -337, -345,
	155, -345, -316, -450, 35, -187, 156, 21, 261, -220,
	-324, -217, -219, 246, -344, -218, 249, -514, 247, 245,
	108, 250, 304, 109, 240, -324, -324, 246, -254, 242,
	35, -324, -270, 240, 347, 304, 247, 21, 261, -269,
	240, 109, -327, 246, 250, 247, 245, -323, 124, -315,
	151, 242, 43, 374, -323, 543, 261, -323, -323, -323,
	-323, -323, -323, -323, 278, 278, -323, -323, -323, -323,
	-323, -323, -323, -323, -323, -323, -323, 161, -323, -323,
	-323, -323, -323, -323, 82, 273, 274, -547, 399, 31,
	355, 355, -558, 31, -160, 349, -273, -271, -338, 31,
	-294, -295, -296, -297, 68, 72, 74, 69, 70, 71,
	75, 31, 156, -325, -330, 35, -327, 88, -325, -165,
	-170, -175, -325, 82, -570, -572, 481, 478, 484, -410,
	-410, 242, 82, 124, -410, -410, 41, -326, -567, 485,
	479, -124, 156, 79, -223, -198, -199, -200, -201, -227,
	-305, 191, 194, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 207, 208, 205, 206, 255, 186, 187, 188,
	189, 209, 172, 192, 537, 173, 174, 175, 176, 177,
	178, 181, 182, 183, 184, 180, -327, -207, -288, -168,
	-170, -327, 88, -327, 143, -288, 121, -6, 119, -136,
	-135, -134, 122, 610, 616, 121, 121, 121, 83, 83,
	83, 156, 83, 83, 83, 156, 83, 156, 98, -489,
	458, 40, 156, 82, 83, 156, 61, 156, 124, 83,
	156, -355, -327, 88, -355, 83, 61, -124, 88, 156,
	-177, 37, 38, 155, 431, -327, -500, 83, -416, 156,
	242, 155, 155, -392, 377, -326, -394, 21, 539, -305,
	39, -312, 124, 635, -327, 83, -357, -357, 113, -353,
	-350, 83, 121, -355, 119, -225, -227, 393, 394, -355,
	-225, -226, -232, 152, 190, 255, 189, 188, 186, 393,
	394, -244, -327, -355, -355, 83, -355, -355, 17, -327,
	-244, -351, -355, -182, -182, 83, 83, -423, -424, -423,
	-423, 83, 83, 83, 83, -423, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 82, 98, 100, 98,
	100, -482, -579, 63, 618, 62, 421, 103, 309, 156,
	98, 88, 636, 156, 124, -327, 17, 238, 169, -559,
	313, 349, 385, 83, 156, -305, -198, -187, 82, -187,
	-549, 460, 401, 411, -323, -347, -346, 351, 42, -468,
	422, 407, 408, -393, 269, -327, -327, -555, 95, 124,
	79, 334, 338, 339, 335, 336, 337, -373, -374, -372,
	-376, -542, 82, 82, -162, 35, 132, -159, 82, 82,
	35, -445, 324, -227, -221, -169, -327, 17, 156, -541,
	155, -1, -327, -386, -339, -288, -355, -355, -288, -339,
	-339, 166, -341, -327, -445, -227, 35, -268, 235, 232,
	-420, 306, 307, -421, -435, 309, -437, 82, -224, -305,
	-218, -513, -514, -375, -327, 109, -513, 109, 82, -224,
	-305, -305, -271, -305, -327, -327, -327, -327, -278, -277,
	-305, -280, 32, -281, -327, -327, -327, -327, 109, -327,
	109, -249, 41, 48, 49, 50, -323, -323, 193, -252,
	41, 421, 423, 424, -280, 98, 98, 98, 98, 88,
	88, 88, -323, -323, 98, 88, -330, 88, -515, 168,
	45, 46, 98, 98, 98, 98, 41, 88, -257, 41,
	289, 293, 290, 291, 292, 88, 98, 41, 98, 41,
	98, 41, -327, 82, -516, -517, 88, -549, -323, 355,
	-407, 124, -347, -554, 319, -161, 489, 32, -191, 235,
	232, -542, -398, -397, -305, -174, -174, -174, -174, 68,
	68, 68, 73, 68, 73, 68, -296, -398, -176, -187,
	-330, 83, -564, -563, -562, -560, 76, 243, 77, -361,
	478, 482, 483, -394, -342, 88, -401, -195, 24, -221,
	-221, -467, 299, 300, 83, 156, -227, -290, 19, 155,
	-290, 117, -6, -132, -134, -355, -6, -355, 612, 367,
	613, 88, 98, 98, -497, 442, 437, 439, 109, -364,
	-484, -483, 61, -162, -185, -476, -519, -482, -327, 636,
	636, 636, 636, 61, -162, -476, -195, -489, -179, -178,
	44, -327, 98, 17, -391, -386, 143, 143, -327, 378,
	-402, 88, 400, 88, 238, 636, 88, -312, -350, -355,
	83, -235, 177, 176, -235, 35, 83, 83, -452, -452,
	-451, -454, -451, -235, -235, 83, 83, 24, 83, 83,
	83, -355, 83, 83, 156, -472, 498, -473, 572, -423,
	-423, -423, -423, -423, -423, -423, -423, -423, -423, -423,
	-423, -423, -423, -423, -423, -366, -365, 261, 443, 625,
	625, 443, 625, 625, 83, 156, -522, 156, -318, 314,
	-318, -311, 88, 242, 166, -327, -327, 88, 88, -210,
	-227, 83, 35, -214, -215, -216, -224, -217, -219, 35,
	-550, 92, -545, 88, -327, 89, -551, 92, 402, 154,
	353, 41, 403, 404, 419, 348, 98, 98, 409, -543,
	-327, -160, -160, -553, 52, 124, 88, -221, -372, -315,
	151, 280, 327, -285, -284, -327, 88, -214, -162, -221,
	-214, -214, -162, -446, 326, 21, 98, 142, -188, 80,
	155, -170, -222, -327, 143, 83, -288, -345, -288, -288,
	124, -339, -446, -162, -432, 310, 82, -430, 82, -430,
	109, 335, -438, -436, 261, -276, 45, 47, -227, -511,
	-327, -509, -511, -327, -509, -509, -375, -355, -276, -224,
	242, 31, 232, -279, 332, 333, 338, -403, 305, 114,
	-403, 156, -177, 156, -327, -244, -244, 31, 88, 88,
	-223, 83, 156, 124, -550, -545, 124, -408, 88, -551,
	-555, 124, -153, 92, -316, 156, -191, -191, -288, 156,
	124, -193, -192, 79, 80, -194, 79, -192, 68, 68,
	-288, -562, -561, 24, -514, -514, -514, 83, 83, 15,
	-200, 41, -289, 20, 21, 143, -289, 121, 119, 121,
	121, -327, 83, 83, -458, 603, -493, -495, 437, 21,
	21, 15, 243, 83, -476, -476, -497, 45, 46, -386,
	-402, 422, -221, 156, 636, -225, -355, 83, -355, 83,
	88, 83, 88, -182, 21, 83, 156, 83, 83, 83,
	156, 83, 83, -355, 83, -522, -319, 187, 88, -319,
	349, -327, 17, 236, -162, 83, 156, -162, 88, -548,
	413, 88, 88, 98, 41, 98, 154, 405, -469, -153,
	-153, -552, 92, 124, 635, 82, -323, -323, -323, -327,
	83, 156, -323, -323, 83, 83, 83, -242, 539, -447,
	260, 98, 142, 98, 142, 98, -325, -170, -327, -288,
	-541, 155, 88, -288, -447, -422, 311, 98, -351, 82,
	-351, 82, -431, 308, 82, 83, 156, -327, -305, -239,
	-238, -236, 103, 114, 41, 391, -237, 92, 151, 294,
	297, 296, 272, 295, -266, -343, 79, 397, 332, 333,
	-376, 603, 527, 245, 108, 109, 379, -344, 82, 82,
	80, 314, 82, 82, -511, 83, -276, -305, 41, -279,
	41, 345, 305, -277, -327, 151, -244, 83, -517, 88,
	-548, 88, -410, -553, 88, 88, -542, -182, -397, -482,
	-355, 82, -355, 82, 68, 11, 19, -348, -355, -363,
	244, -6, 613, 367, -259, 604, 88, 21, 88, -491,
	88, -398, -458, -127, -256, -315, 277, 83, 83, 83,
	-423, -423, -426, -425, -429, 443, 306, 451, -363, 88,
	88, 83, 83, 88, -327, 242, 166, -202, -227, -157,
	539, -242, -216, -157, 21, 539, 352, 41, 98, 41,
	406, 124, 104, 105, -313, -314, 88, -381, -383, -305,
	82, -244, -246, 88, -284, -348, -348, -240, -162, 35,
	-241, -282, -376, -126, -125, -240, 82, -448, 160, 98,
	142, 98, 98, -288, -288, 636, -448, -437, 21, 83,
	-417, 83, -417, 82, 124, -351, -436, -439, 61, -236,
	103, -351, 88, -246, -247, 41, 293, 289, 124, 124,
	-248, 41, 273, 274, -258, 82, 304, 15, 193, 82,
	109, 109, -221, -381, -381, -512, 334, 335, 336, 340,
	338, 339, 337, -512, -381, -381, 82, -404, -403, -351,
	-323, -323, 151, -552, -183, -186, -510, -327, 245, 21,
	21, -327, -327, -309, 605, 98, 88, 439, -259, -459,
	606, -487, -430, -244, 124, 83, -428, 116, 405, 409,
	-349, -352, 98, 100, 185, 154, 83, 83, 349, -327,
	538, -158, 60, 485, 88, 89, 400, 88, 89, 352,
	88, 636, 156, 124, 83, 156, -451, -355, -418, 261,
	-162, 156, -282, -315, -127, -418, -243, -283, -327, 88,
	-466, 168, 325, 539, 98, 142, 98, -182, -449, 168,
	325, -421, 83, 83, 83, -417, 98, 83, -443, -440,
	82, -282, 263, 134, 88, 88, 98, 82, -477, 31,
	88, -382, 82, 83, 83, 83, 83, -381, 98, -244,
	-323, 83, 83, 156, 82, 21, -309, -460, 607, 88,
	-496, 442, -490, -488, 437, 438, 439, 440, 88, -427,
	-428, 409, -349, -352, 601, 449, 449, 449, -327, 242,
	-204, -327, 304, 422, -314, 88, -384, -383, -177, 83,
	-419, 313, 21, -282, -323, -419, 83, 156, -323, -323,
	325, 98, 142, 98, -183, 325, -433, 312, 83, -443,
	-282, -442, -441, 311, 264, 82, 83, -355, -367, -323,
	83, -261, -260, 535, -381, -384, 80, -384, 80, -384,
	80, -384, 80, 83, -244, -327, 245, -310, -327, -491,
	88, -498, 243, -494, -495, 441, -488, 21, 439, 21,
	21, -128, 156, 113, 450, 450, 450, 349, -203, 35,
	444, 378, -385, 251, 345, 346, 92, 539, 332, 333,
	-177, 21, -420, -244, -283, -348, -348, 98, 98, 83,
	156, -327, 260, 82, -362, -356, -355, 260, 83, -327,
	-265, -263, -264, 79, 456, 302, 303, 83, -512, -512,
	-512, -512, -266, 83, 156, -505, 82, 98, -493, -492,
	-494, 21, -491, 21, -491, -491, 446, -427, -327, 88,
	-323, -323, 88, 88, 331, -305, 82, -432, -441, -440,
	-362, 83, 156, -403, -264, 79, -263, 79, 16, 15,
	-384, -384, -384, -384, -327, -508, 31, 83, -504, -503,
	-306, -499, -327, 442, 443, 88, -491, 124, -582, -581,
	624, 98, 98, -327, -417, -422, 83, -356, -262, 299,
	300, 31, 168, -262, -507, -506, -307, 83, 156, 155,
	88, 88, 83, -437, 103, 41, 301, 156, 124, -503,
	-327, -506, 41, -355, 155, -327,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 0, 282, 283, 284, 896, 897, 898, 899, 900,
	901, 902, 0, 0, 0, 0, 0, 654, 655, 0,
	620, 0, 0, 0, 0, 0, 0, 504, 505, 506,
	507, 508, 509, 510, 511, 512, 513, 514, 515, 516,
	517, 518, 519, 520, 521, 522, 523, 524, 525, 526,
	527, 528, 529, 530, 531, 532, 533, 534, 535, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 0, 307,
	303, 228, 229, 230, 231, 232, 314, 315, 481, 0,
	0, 0, 0, 737, -2, 72, 0, 0, 296, 0,
	287, 287, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, -2, 667, 0, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 367, 368, 369, 363, 364, 366, 365,
	-2, 0, 0, 667, 0, 0, 0, 745, 0, 0,
	0, 0, 0, 788, 810, 23, 0, 7, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 0, 0,
	19, 0, 19, 0, 0, 0, 1313, 1314, 1315, 1316,
	2096, 2066, -2, 1838, 1815, 1990, 1991, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138,
	2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
	2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158,
	2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168,
	2169, 2170, 2171, 2172, 2173, 2174, 2175, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, -2, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, -2, -2, -2, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2097, 2098, 2099, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
	2112, 2113, 2114, 2115, 0, 280, 278, 1785, 1815, 1838,
	1892, 1903, 1904, 1938, 1990, 1991, 2023, 2066, 2082, 2083,
	2084, 2096, 0, 0, 920, 0, 715, 0, 0, 720,
	1261, 715, 308, 656, 657, 745, 771, 618, 0, 345,
	0, 1829, 349, 2073, 0, 0, 0, 615, 339, 340,
	341, 342, 343, 344, 0, 0, 895, 0, 0, 335,
	0, 302, 1894, 2095, 1317, 0, 0, 0, 0, 0,
	171, 1039, 173, 1041, 177, 185, 0, 0, 0, 190,
	191, 194, 195, 196, 197, 198, 0, 202, 0, 204,
	207, 0, 209, 210, 0, 213, 214, 215, 0, 225,
	226, 227, 1042, 1043, 1044, -2, 100, 918, 1743, 1630,
	0, 1637, 1650, 1661, 1394, 1395, 1396, 1397, 0, 0,
	0, 0, 0, 0, 1405, 1406, 0, 1434, 2130, 2171,
	2172, 0, 1414, 1415, 1416, 1417, 1418, 1419, 111, 123,
	124, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 0, 1691,
	1692, 1693, 1601, 1381, 1313, 0, 2139, 0, 2161, 2166,
	2167, 2168, 2169, 2160, 0, 0, 1586, 0, 1576, 0,
	0, -2, -2, 0, 0, 1963, -2, 2173, 2174, 2175,
	2136, 2157, 2165, 2140, 2141, 2164, 2132, 2133, 2134, 2127,
	2128, 2129, 2131, 2143, 2145, 2156, 0, 2152, 2162, 2163,
	2071, 0, 0, 0, 0, 0, 2112, 125, 126, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1597, -2, -2, 1600,
	-2, 1603, -2, -2, -2, -2, 1608, 1609, -2, 1611,
	-2, -2, -2, -2, -2, -2, -2, 1588, 1589, 1590,
	1591, 1580, 1581, 1582, 1583, 1584, 1585, -2, -2, -2,
	771, 846, 0, 771, 0, 746, 793, 796, 799, 802,
	749, 0, 0, 73, 74, 0, 0, 0, 297, 298,
	286, 288, 0, 292, 0, 285, 1075, 0, 0, 0,
	0, 1075, 1075, 1075, 1075, 1075, 0, 1075, 0, 0,
	0, 0, 0, 1075, 0, 953, 1046, 1047, 1048, 1073,
	1074, 1147, 0, 0, 0, 672, 668, 669, 670, 671,
	759, 0, 761, 764, 593, 593, 819, 539, 0, 0,
	0, 593, 0, 553, 545, 0, 0, 0, 593, 0,
	0, 766, 766, 0, 596, 605, 593, 593, -2, 593,
	593, 590, 593, 0, 0, 1087, 559, 560, 561, 545,
	545, 564, 565, 566, 576, 577, 606, 1767, 0, 0,
	481, 481, 0, 481, 0, 481, 481, 481, 0, 674,
	1933, 1836, 1909, 1894, 2095, 0, 253, 1963, 258, 0,
	1837, 1856, 0, 0, 1874, 0, -2, 0, 324, 771,
	0, 0, 745, 0, 0, 0, 0, 0, 481, 481,
	481, 481, 481, 1146, 481, 481, 481, 481, 481, 0,
	0, 0, 481, 481, 481, 0, 0, 811, 812, 807,
	808, 809, 813, 814, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 79, 78, 0, 1744, 1762, 1696, 1697,
	1698, 1749, 1700, 1753, 1753, 1753, 1753, 1729, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1753, 1753, 0, 0,
	1742, 1720, 1751, 1751, 1751, 1749, 1746, 1701, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1756, 1756, 1759, 1759, 1756, 0, 381, 379, 380,
	1626, 0, 0, 0, 0, 715, 719, 1259, 0, 0,
	0, 771, -2, 0, 0, 619, 346, 1318, 0, 0,
	350, 0, 351, 0, 0, 0, 370, 0, 373, 358,
	359, 360, 354, 0, 151, 0, 337, 338, 0, 0,
	304, 0, 0, 0, 482, 0, 0, 0, 0, 0,
	0, 182, 178, 186, 189, 199, 206, 0, 218, 220,
	223, 179, 187, 192, 193, 200, 221, 180, 183, 184,
	188, 222, 224, 181, 201, 205, 219, 203, 208, 211,
	212, 217, 0, 152, 0, 0, 0, 0, 0, 1636,
	0, 0, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 1630,
	0, 0, 1400, 1401, 1402, 1403, 0, 1407, 0, 1435,
	0, 0, 0, 0, 0, 1690, 1694, 0, 1626, 1626,
	0, 1626, 1622, 0, 0, 0, 0, 0, 0, 1626,
	1559, 0, 0, 1561, 1577, 0, 0, 1563, 1564, 0,
	1567, 1568, 1626, 0, 1626, 1572, 1626, 1626, 1626, 1555,
	1556, 0, 1622, 1622, 1622, 1622, 0, 0, 1622, 1622,
	1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
	1622, 1622, 0, 0, 0, 0, 766, 0, 772, 0,
	-2, 0, 790, 792, 794, 795, 797, 798, 800, 801,
	803, 804, 751, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 290, 0, 295, 0, 0, 0, 917, 0,
	0, 1075, 1075, 1075, 954, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 1075, 1075, 1075, 0, 1093, 0,
	0, 0, 674, 673, 0, 760, 0, 0, 819, 0,
	0, 537, 538, 0, 0, 545, 593, 593, 551, 552,
	547, 546, 601, 602, 596, 0, 596, 596, 819, 0,
	570, 571, 572, 593, 593, 578, 767, 0, 579, 580,
	596, 0, 603, 604, 819, 0, 0, 819, 819, 0,
	588, 589, 591, 593, 0, 0, 1075, 0, 611, 547,
	547, 1768, 1769, 0, 0, 1084, 0, 0, 0, 614,
	0, 0, 0, 396, 397, 0, 0, 675, 233, 236,
	0, 239, 0, 1933, 0, 1933, 0, 246, 0, 0,
	0, 0, 0, 0, 276, 277, 0, 0, 0, 0,
	267, 270, 1253, 1254, 1036, 1037, 271, 272, 316, 317,
	0, 766, 789, 791, 785, 786, 787, 0, 0, 0,
	0, 0, 0, 0, 0, 481, 0, 0, 0, 0,
	0, 650, 0, 933, 652, 0, 0, 0, 0, 827,
	821, 823, 890, 111, 827, 8, 96, 93, 0, 19,
	0, 0, 19, 19, 0, 19, 281, 0, 1765, 1763,
	1764, 1699, 1750, 0, 1725, 0, 1726, 1727, 1728, 1738,
	1739, 0, 0, 1721, 0, 1722, 1723, 1724, 1715, 0,
	1716, 1717, 0, 1718, 1719, 279, 378, 0, 0, 1627,
	921, 0, 693, 707, 688, 0, 696, 0, 0, 1261,
	1262, 0, 0, 0, 676, 707, 678, 0, 696, 766,
	743, 0, 721, 0, 0, 347, 0, 355, 352, 0,
	356, 0, 0, 372, 374, 375, 376, 361, 362, 616,
	333, 334, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 336, 121, 0, 305, 306, 0, 0, 0, 165,
	166, 167, 168, 169, 170, 172, 156, 639, 641, 1028,
	1040, 0, 1031, 0, 175, 216, 148, 0, 0, 0,
	1631, 1632, 1633, 1634, 1635, 1640, 0, 1642, 1644, 1646,
	1648, 0, 1666, -2, -2, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1651, 1664, 1665,
	0, 0, 0, 0, 0, 0, 1662, 1662, 1657, 0,
	1420, 1255, 1256, 1398, 0, 0, 1432, 1436, 0, 0,
	0, 0, 0, 112, 1621, 1526, 1527, 1528, 1529, 1530,
	1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
	1551, 1552, 1553, 1554, 0, 0, 1630, 0, 0, 0,
	1623, 1624, 0, 0, 0, 1514, 0, 0, 1520, 1521,
	1522, 0, 702, 0, 1587, 1560, 1578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 845, 847, 0, 711, 713, 714,
	740, 721, 747, 0, 0, 0, 71, 76, 0, 1114,
	0, 0, 0, 299, 300, 0, 0, 294, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 969, 970, 479,
	1022, 0, 0, 0, 1038, 1063, 1071, 0, 0, 0,
	0, 0, 1120, 955, 960, 961, 962, 956, 957, 963,
	964, 0, 762, 0, 0, 859, 536, 594, 595, 820,
	542, 1894, 547, 819, 819, 554, 548, 555, 598, 556,
	557, 558, 596, 819, 819, 768, 593, 596, 581, 597,
	596, 599, 585, 0, 592, 599, 612, 599, 0, 610,
	562, 563, 1122, 764, 394, 395, 400, 402, 0, 450,
	450, 450, 433, 450, 0, 0, 421, 1770, 0, 0,
	0, 0, 430, 1770, 0, 0, 1770, 1770, 1770, 1770,
	1770, 1770, 1770, 0, 0, 1770, 1770, 1770, 1770, 1770,
	1770, 1770, 1770, 1770, 1770, 1770, 0, 1770, 1770, 1770,
	1770, 1770, 1239, 1770, 0, 1085, 440, 441, 442, 443,
	448, 449, 0, 476, 0, 0, 968, 0, 479, 0,
	1008, 0, 0, 832, 0, 833, 834, 830, 861, 885,
	885, 0, 885, 865, 1261, 0, 0, 244, 245, 234,
	0, 235, 0, 247, 248, 0, 250, 251, 252, 259,
	1836, 1909, 254, 256, 0, 0, 260, 273, 274, 275,
	0, 0, 265, 266, 0, 0, 319, 320, 322, 0,
	721, 1088, 1089, 1090, 636, 1257, 637, 638, 642, 0,
	0, 645, 646, 647, 648, 649, 935, 0, 0, 1015,
	1016, 1017, 819, 0, 828, 0, 824, 891, 0, 893,
	0, 819, 0, 94, 19, 0, 87, 84, 0, 0,
	0, 0, 0, 1745, 1695, 1766, 0, 0, 0, 1747,
	0, 0, 0, 0, 0, 77, 723, 683, 0, 687,
	704, 0, 708, 0, 0, 700, 692, 697, 0, 0,
	717, 684, 1260, 0, 0, 0, 677, 0, 0, 682,
	721, 0, 744, 773, 774, 777, 1319, 0, 357, 353,
	371, 0, 481, 0, 0, 0, 159, 1025, 0, 160,
	164, 154, 0, 0, 0, 1030, 0, 1027, 1032, 0,
	174, 0, 0, 149, 150, 1105, 1114, 0, 0, 0,
	1641, 1643, 1645, 1647, 1649, 0, 1652, 1662, 1662, 1658,
	0, 1653, 0, 1655, 0, 1631, 1404, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 1505, 0,
	0, 1509, 0, 1511, 1512, 1513, 1515, 0, 0, 0,
	1519, 0, 1558, 1579, 1562, 1565, 0, 1569, 0, 1571,
	1573, 1574, 1575, 0, 771, 771, 0, 0, 1476, 1476,
	1476, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 0, 1422, 1423,
	0, 0, 0, 848, 741, 0, 0, 0, 0, 0,
	1112, 0, 64, 0, 0, 301, 289, 291, 0, 0,
	1076, 0, 0, 923, 924, 926, 0, 929, 930, 931,
	935, 764, 0, 764, 980, 1770, 483, 0, 0, 1024,
	0, 0, 997, 0, 0, 0, -2, 0, 0, 1071,
	0, 0, 0, 1124, 0, 0, 0, 661, 665, 23,
	765, 0, 540, 0, 541, 593, 549, 550, 819, 573,
	574, 0, 0, 819, 593, 593, 584, 0, 596, 607,
	0, 608, 609, 1124, 0, 0, 1084, 1190, 1158, 411,
	0, 1274, 1275, 451, 0, 1281, 1290, 1075, 1351, 0,
	1290, 0, 0, 1292, 1293, 0, 0, 0, 0, 434,
	435, 0, 420, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 461, 0, 0, 0, 0, 0, 1771, 1770,
	1770, 0, 428, 429, 0, 432, 0, 0, 0, 0,
	0, 0, 0, 0, 1770, 1770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1230, 0, 0,
	0, 0, 0, 0, 0, 1245, 1246, 980, 1770, 0,
	0, 0, 483, 995, 1013, 0, 398, 399, 458, 0,
	0, 0, 0, 0, 852, 0, 0, 851, 0, 0,
	0, 0, 0, 764, 886, 0, 888, 889, 863, -2,
	0, 832, 868, 1626, 237, 238, 0, 0, 243, 261,
	263, 0, 0, 0, 262, 264, 268, 269, 318, 321,
	323, 783, 0, 0, 1148, 0, 936, 937, 939, 940,
	0, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1820, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 934, 653, 817, 822,
	829, 892, 894, 112, 825, 817, 0, 97, 19, 96,
	88, 89, 0, 19, 0, 0, 0, 0, 1755, 1754,
	1740, 0, 1741, 1752, 1757, 0, 1760, 0, 382, 727,
	0, 0, 707, 709, 0, 0, 707, 0, 0, 716,
	0, 0, 0, 0, 0, 0, 707, 783, 723, 0,
	780, 778, 779, 0, 0, 617, 122, 377, 0, 0,
	0, 0, 0, 640, 0, 1029, 156, 0, 0, 176,
	0, 0, 0, 1114, 1109, 1625, 1654, 1656, 0, 1663,
	1659, 1399, 1408, 1433, 0, 0, 1439, 1451, 1451, 0,
	0, 0, 1442, 1753, 1753, 1445, 1749, 1751, 1749, 1451,
	1451, 0, 113, 0, 0, 1510, 0, 0, 0, 703,
	0, 0, 0, 1472, 1474, 1476, 1476, 1483, 1477, 1484,
	1485, 1476, 1476, 1476, 1476, 1490, 1476, 1476, 1476, 1476,
	1476, 1476, 1476, 1476, 1476, 1476, 1470, 0, 0, 1684,
	1685, 712, 0, 0, 754, 755, 756, 757, 758, 0,
	0, 57, 57, 1114, 0, 65, 0, 0, 293, 61,
	62, 0, 0, 0, 928, 0, 0, 0, 1267, 0,
	984, 981, 982, 983, 0, 1019, 484, 485, 486, 487,
	0, 0, 0, 1023, 0, 1008, 1008, 990, 0, 0,
	0, 1064, 1065, 1066, 1067, 1068, 1069, 1070, -2, 1079,
	0, 0, 0, 1267, 1098, 0, 0, 1103, 1267, 1267,
	0, 1132, 0, 1121, 715, 0, -2, 0, 0, 663,
	0, 0, 860, 543, 819, 567, 769, 770, 599, 819,
	819, 0, 593, 613, 1132, 1123, 0, 401, 450, 0,
	1178, 0, 0, 1184, 0, 1191, 404, 0, 452, 0,
	1280, 1307, 1291, 1307, 1352, 1307, 1307, 1075, 0, 452,
	0, 0, 422, 0, 0, 0, 0, 0, 418, 455,
	777, 405, 407, 408, 409, 459, 460, 462, 0, 464,
	465, 424, 436, 437, 438, 439, 0, 0, 0, 431,
	444, 445, 446, 447, 406, 1207, 1208, 1209, 1212, 1213,
	1214, 1215, 0, 0, 1218, 1219, 1220, 1221, 1222, 1304,
	1305, 1306, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1247,
	1248, 1249, 1250, 1251, 1252, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 0, 0, 1242, 0, 984, 0, 0,
	0, 0, 1019, 997, 0, 1004, 0, 1009, 1010, 0,
	0, 685, 819, 311, 0, 855, 849, 0, 838, 853,
	854, 841, 0, 843, 0, 839, 840, 819, 831, 862,
	887, 864, 867, 869, 870, 876, 0, 0, 0, 0,
	240, 241, 242, 249, 0, 503, 255, 739, 0, 1258,
	643, 644, 1149, 1150, 651, 0, 941, 815, 0, 0,
	815, 92, 95, 0, 90, 0, 0, 0, 0, 82,
	80, 1748, 0, 0, 729, 136, 0, 0, 0, 705,
	0, 710, 707, 691, 701, 690, 698, 699, 718, 1263,
	1264, 1265, 1266, 707, 681, 680, 742, 727, 775, 776,
	0, 1320, 348, 0, 1026, 156, 161, 162, 163, 157,
	155, 1033, 0, 1035, 0, 1107, 0, 0, 1660, 1438,
	1409, 1440, 1452, 1453, 1441, 0, 1411, 1412, 1443, 1444,
	1446, 1447, 1448, 1449, 1450, 1413, 1506, 0, 1508, 1516,
	1517, 0, 1566, 1570, 0, 0, 0, 0, 0, 1481,
	1482, 1486, 1487, 1488, 1489, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 771, 1471, 0, 0, 0,
	0, 0, 0, 0, 752, 0, 0, 0, 59, 0,
	59, 1113, 1115, 0, 0, 0, 63, 916, 919, 925,
	927, 0, 0, 0, 1268, 1269, 1271, 1272, 1273, 0,
	952, 0, 0, 972, 973, 974, 986, 0, 0, 0,
	489, 490, 0, 0, 0, 502, 498, 499, 500, 480,
	1018, 1004, 1004, 993, 0, 0, 1003, 0, 1080, 1770,
	1770, 1770, 0, 0, 1192, 1770, 1770, 0, 1100, 1102,
	0, 0, 1196, 1135, 0, 0, 1126, 0, 885, 0,
	0, 819, 662, 665, 666, 763, 544, 582, 586, 583,
	0, 819, 1135, 393, 1156, 0, 0, 0, 0, 0,
	1188, 0, 0, 1160, 0, 423, 453, 0, -2, 0,
	1308, 0, 1294, 1308, 0, 0, 1307, 0, 412, 452,
	0, 0, 0, 466, 470, 471, 0, 468, 1347, 0,
	469, 0, 457, 0, 463, 1210, 1211, 0, 1216, 1217,
	0, 1241, 0, 0, 472, 0, 0, 0, 473, 478,
	990, 0, 1007, 0, 1014, 0, 1011, 1012, 771, 0,
	0, 835, 856, 0, 0, 836, 0, 837, 842, 844,
	310, 871, 0, 0, 873, 874, 875, 866, 257, 784,
	938, 0, 805, 0, 0, 826, 806, 0, 19, 0,
	0, 85, 1758, 1761, 731, 0, 728, 137, 0, 0,
	0, 0, 695, 706, 689, 679, 729, 781, 782, 158,
	153, 1034, 1117, 0, 1108, 0, 0, 1518, 0, 1476,
	1473, 1476, 1475, 1467, 0, 1424, 0, 1426, 1427, 1428,
	0, 1430, 1431, 0, 750, 0, 55, 0, 58, 56,
	0, 66, 0, 0, 958, 1196, 0, 958, 985, 971,
	0, 1020, 1021, 0, 491, 492, 0, 495, 501, 987,
	988, 989, 0, 0, 1001, 0, 0, 0, 0, 1072,
	1086, 0, 0, 0, -2, 0, -2, 1097, 0, 1141,
	0, 1133, 0, 1125, 0, 1128, 819, 819, -2, 659,
	664, 0, 0, 587, 1141, 1158, 0, 1179, 0, 0,
	0, 0, 0, 0, 0, 1159, 0, 1172, 454, 1309,
	-2, 1323, 1325, 0, 1085, 1328, 1329, 0, 0, 0,
	0, 0, 0, 1373, 1337, 0, 0, 1341, 1342, 1343,
	0, 0, 1346, 0, 1678, 1679, 0, 1350, 0, 0,
	0, 0, 0, 0, 0, 1288, 413, 414, 0, 416,
	417, 1770, 1348, 456, 410, 1770, 426, 1240, 1243, 1244,
	477, 474, 475, 993, 996, 1005, 686, 766, 312, 313,
	857, 0, 850, 880, 877, 0, 0, 942, 816, 818,
	86, 91, 0, 0, 733, 0, 730, 0, 724, 726,
	147, 694, 731, 107, 139, 0, 0, 1410, 1507, 1557,
	1479, 1480, 0, 1468, 0, 1462, 1463, 1464, 1469, 0,
	0, 753, 748, 60, 68, 0, 0, 0, 944, 951,
	965, 1091, 1270, 950, 0, 0, 488, 493, 0, 496,
	497, 0, 991, 992, 0, 999, 0, 0, 1059, 1749,
	0, 1081, 1082, 1083, 1193, 1194, 1195, 1151, 1099, 0,
	-2, 1204, 0, 1095, 1117, 1151, 0, 1129, 0, 1136,
	0, 1134, 1127, 771, 660, 600, 1138, 403, 1190, 1180,
	0, 1182, 0, 0, 0, 0, 1161, -2, 0, 1324,
	1326, 1327, 1330, 1331, 1332, 1378, 1379, 1380, 0, 0,
	1335, 1375, 1376, 1377, 1336, 0, 0, 0, 0, 0,
	1676, 1677, 1371, 0, 0, 1295, 1297, 1298, 1299, 1300,
	1301, 1302, 1303, 1296, 0, 0, 0, 1287, 1289, 415,
	0, 0, 1770, 1006, 309, 0, 0, 881, 883, 878,
	879, 81, 83, 98, 0, 732, 138, 0, 733, 109,
	0, 130, 0, 1118, 0, 1478, 1465, 0, 0, 0,
	0, 0, 1680, 1681, 1682, 0, 1425, 1429, 0, 67,
	0, 0, 966, 967, 975, 976, 0, 978, 979, 494,
	994, 998, 1001, 0, 1050, 0, 777, 0, 1153, 0,
	1101, 1084, 1206, 1770, 1104, 1153, 0, 1198, 1770, 1770,
	1119, 0, 1131, 0, 1143, 0, 1137, 766, 392, 0,
	1140, 1176, 1181, 1183, 1185, 0, 1189, 1187, 1162, -2,
	0, 1170, 0, 0, 1333, 1334, 0, 0, 1576, 1770,
	0, 1366, 0, 1050, 1050, 1050, 1050, 0, 467, 425,
	0, 858, 872, 0, 0, 0, 722, 99, 0, 108,
	127, 0, 140, 141, 0, 0, 0, 0, 1110, 0,
	1454, 0, 0, 0, 1458, 1459, 1460, 1461, 69, 0,
	0, 943, 0, 977, 1000, 1002, 1049, 1060, 1061, 777,
	1094, 0, 1190, 1205, 0, 1096, 1197, 0, 0, 0,
	1130, 1142, 0, 1145, 658, 1139, 1157, 0, 1186, 1163,
	1171, 0, 1166, 0, 0, 0, 1374, 0, 1340, 0,
	1345, 1354, 1367, 0, 0, 1276, 0, 1278, 0, 1282,
	0, 1284, 0, 0, 427, 882, 884, 0, 735, 725,
	110, 114, 0, 136, 133, 0, 142, 0, 0, 0,
	0, 1106, 0, 0, 1455, 1456, 1457, 0, 0, 945,
	946, 959, 1051, 1770, 1770, 0, 0, 0, 1057, 1058,
	1062, 0, 1178, 1210, 1199, 1200, 1201, 1144, 1177, 1165,
	0, -2, 1173, 0, 0, 1628, 1638, 1639, 1338, 1344,
	1353, 1355, 1356, 0, 1368, 1369, 1370, 1372, 1050, 1050,
	1050, 1050, 1286, 734, 0, 101, 0, 0, 131, 132,
	134, 0, 143, 0, 145, 146, 0, 1466, 70, 947,
	0, 0, 1054, 1055, 0, 1154, 0, 1156, 1167, -2,
	0, 1175, 0, 1339, 1357, 0, 1358, 0, 0, 0,
	1277, 1279, 1283, 1285, 736, 1116, 0, 115, 0, 117,
	119, 120, 1310, 128, 129, 135, 144, 0, 932, 948,
	0, 1052, 1053, 1056, 0, 1158, 1174, 1629, 1359, 1361,
	1362, 0, 0, 1360, 102, 103, 0, 116, 0, 0,
	1111, 949, 1155, 1152, 1363, 1365, 1364, 0, 0, 118,
	1311, 104, 105, 106, 0, 1312,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 637, 634,
	125, 124, 126, 3, 638, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 635, 137, 636, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:818
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:825
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:831
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:839
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:849
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:883
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:916
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:926
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:937
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:949
		{
			yyVAL.str = ""
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:953
		{
			yyVAL.str = yyDollar[2].str
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:958
		{
			yyVAL.str = ""
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:962
		{
			yyVAL.str = yyDollar[2].str
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:970
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:980
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:990
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1003
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1011
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1038
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1047
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1090
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1096
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1103
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1111
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1117
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1126
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1136
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1144
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1152
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1160
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1170
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1178
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1188
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1195
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1214
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1218
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1224
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1228
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1234
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1243
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1253
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1257
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1263
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1272
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1276
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1282
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1303
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1317
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1324
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1328
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1334
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1338
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1344
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1351
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1359
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1363
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1375
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1379
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1393
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1397
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1402
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1409
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1417
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1423
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1432
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1443
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1447
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1453
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1457
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1463
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1467
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1473
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1497
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1516
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1520
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1524
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1529
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1533
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1542
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1552
		{
			yyVAL.str = ""
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1559
		{
			yyVAL.str = yyDollar[3].str
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1564
		{
			yyVAL.str = "\n"
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1571
		{
			yyVAL.str = yyDollar[3].str
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1576
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1580
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1608
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1612
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1618
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1626
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1646
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1665
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1690
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1694
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1698
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1703
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1707
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1713
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1726
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1737
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1750
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1754
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1764
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1777
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1790
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1796
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1802
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1810
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1820
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1830
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1834
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1838
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1842
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1846
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1850
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1857
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1861
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1867
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1874
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1883
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1887
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1893
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1897
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1901
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1905
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1909
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1913
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1917
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1921
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1925
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1929
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1933
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1937
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1941
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1945
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1949
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1953
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1957
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1961
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1965
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1969
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1973
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1977
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1981
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1985
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1989
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1993
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1997
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2001
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2005
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2009
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2013
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2017
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2021
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2025
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2029
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2033
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2037
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2041
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2045
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2049
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2053
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2057
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2061
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2065
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2069
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2073
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2077
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2081
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2085
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2089
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2093
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2106
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2113
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2120
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2130
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2134
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2140
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2147
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2177
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2183
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2190
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2197
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2206
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2236
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2240
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2244
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2250
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2256
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2260
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2267
		{
			yyVAL.str = yyDollar[3].str
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2273
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2277
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2283
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2291
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2300
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2309
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2317
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2325
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2348
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2371
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2378
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2385
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2393
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2400
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2407
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2416
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2420
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2424
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2430
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2434
		{
			yyVAL.str = yyDollar[1].str
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2440
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2444
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2450
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2454
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2465
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2471
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2476
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2480
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2484
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2488
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2492
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2496
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2500
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2504
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2508
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2514
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2522
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2526
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2531
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2536
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2542
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2555
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2568
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2581
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2594
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2610
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2617
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2628
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2639
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2643
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2649
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2659
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2665
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2669
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2675
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2681
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2685
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2689
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2693
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2699
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2712
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2722
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2728
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2732
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2738
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2755
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2761
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2765
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2769
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2773
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2777
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2789
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2797
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2807
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2819
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2823
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2831
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2839
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2878
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2882
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2888
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2894
		{
			yyVAL.str = yyDollar[1].str
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2899
		{
			yyVAL.str = "true"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2900
		{
			yyVAL.str = "false"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2901
		{
			yyVAL.str = yyDollar[1].str
		}
	case 377:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2906
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2912
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2921
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2928
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2936
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2940
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2964
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2987
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2997
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3004
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3013
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3021
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3025
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3031
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3042
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3046
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3052
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3056
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3080
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3090
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3106
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3124
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3128
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3134
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3138
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3144
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3150
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3158
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3168
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3176
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3186
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3196
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3206
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3213
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3217
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3221
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3225
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3229
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3236
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3242
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3246
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3250
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3254
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3258
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3262
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3266
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3270
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3275
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3306
		{
			yyVAL.str = ""
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3310
		{
			yyVAL.str = string("COLUMN")
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3315
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3321
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3327
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3335
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3339
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3345
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3353
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3360
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3366
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3372
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3378
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3384
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3391
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3398
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3406
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3412
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3424
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3430
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3438
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3442
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3449
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3467
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3481
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3495
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3508
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3514
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3525
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3538
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3542
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3550
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3554
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3559
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3563
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3579
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3583
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3587
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3591
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3598
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3602
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3606
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3610
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3617
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3621
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3628
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3632
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3636
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3640
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3647
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3654
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3660
		{
			yyVAL.item = nil
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3665
		{
			yyVAL.item = nil
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3708
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3717
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3725
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3733
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3741
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3752
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3756
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3762
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3767
		{
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3771
		{
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3776
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3786
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3796
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3804
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3810
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3816
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3822
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3828
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3834
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3840
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3849
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3853
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3857
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3861
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3865
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3869
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3873
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3877
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3883
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3892
		{
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3894
		{
		}
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3903
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3913
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3922
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3926
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3930
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3936
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3942
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3948
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3954
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3963
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3974
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3986
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3994
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4000
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4012
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4026
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4032
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4038
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4045
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4049
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4054
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4058
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4062
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4067
		{
			yyVAL.str = ""
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4071
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4077
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4082
		{
			yyVAL.str = ""
		}
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4086
		{
			yyVAL.str = yyDollar[4].str
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4101
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4105
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4111
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4119
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4130
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4136
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4142
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4147
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4155
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4161
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4166
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4172
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4178
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4182
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4208
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4216
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4224
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4232
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4236
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4242
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4255
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4263
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4272
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4278
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4286
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4294
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4302
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4308
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4316
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4330
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4336
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4346
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4351
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4358
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4374
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4387
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4398
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4402
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4408
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4414
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4423
		{
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4425
		{
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4428
		{
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4437
		{
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4441
		{
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4446
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4455
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4462
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4468
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4476
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4483
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4490
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4510
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4518
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4528
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4532
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4538
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4545
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4551
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4559
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4566
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4573
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4592
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4596
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4600
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4605
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4609
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4613
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4619
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4628
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4632
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4638
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4642
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4648
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4652
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4658
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4663
		{
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4667
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4674
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4678
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4685
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4690
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4694
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4700
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4704
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4710
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4714
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4719
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4723
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4736
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4747
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4758
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4780
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4803
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4811
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4820
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4824
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4837
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4841
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4846
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4850
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4857
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4862
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4869
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4875
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4879
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4883
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4887
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4891
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4895
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4900
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4904
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4910
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4920
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4935
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4939
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4953
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4957
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4963
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4972
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4976
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4980
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4984
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4988
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4994
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5001
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5010
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5014
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5020
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5028
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5032
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5037
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5041
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5047
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5051
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5055
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5060
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5064
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5070
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5076
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5080
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5086
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5091
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5095
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5099
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5104
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5108
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5112
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5117
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5121
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5129
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5133
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5137
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5151
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5155
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5165
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5175
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5185
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5197
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5205
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5213
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5222
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5230
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5238
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5246
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5254
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5262
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5270
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5278
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5286
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5296
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5307
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5321
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5325
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5329
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5334
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5338
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5342
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5351
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5355
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5360
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5364
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5373
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5379
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5383
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5389
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5393
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5397
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5401
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5406
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5414
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5420
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5428
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5436
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5446
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5452
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5461
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5470
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5479
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5489
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5493
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5503
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5507
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5511
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5515
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5521
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5531
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5535
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5541
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5547
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5551
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5557
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5563
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5567
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5571
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5577
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5581
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5587
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5591
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5597
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5601
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5607
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5611
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5621
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5634
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5640
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5646
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5660
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5671
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5678
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5682
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5688
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5698
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5702
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5706
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5711
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5715
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5719
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5723
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5728
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5732
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5736
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5740
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5744
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5749
		{
			yyVAL.str = ""
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5753
		{
			yyVAL.str = yyDollar[1].str
		}
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5757
		{
			yyVAL.str = yyDollar[2].str
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5763
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5767
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5772
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5776
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5780
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5784
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5788
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5794
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 916:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5834
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5847
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5853
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 919:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5859
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5872
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5877
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5884
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5891
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5895
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5901
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5907
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5912
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5916
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5920
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5924
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5931
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5964
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5969
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5976
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5983
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5987
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5993
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5999
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6003
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6007
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6013
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6019
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6025
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6029
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6035
		{
			yyVAL.str = ""
		}
	case 949:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6042
		{
			yyVAL.str = yyDollar[2].str
		}
	case 950:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6048
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6063
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6080
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6097
		{
			yyVAL.str = yyDollar[1].str
		}
	case 954:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6101
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6107
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6111
		{
			yyVAL.str = "DEFINER = "
		}
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6115
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6120
		{
			yyVAL.str = ""
		}
	case 959:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6124
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6138
		{
			yyVAL.str = ""
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6146
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6152
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6157
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6163
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6176
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6181
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6186
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6192
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6199
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6206
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6213
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6220
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6228
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6234
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6241
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6248
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6256
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6262
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6271
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6288
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6305
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6324
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6342
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6348
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6355
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6363
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6369
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6377
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6383
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6391
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6397
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6406
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6410
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6415
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6419
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6426
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1004:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6431
		{
			yyVAL.str = ""
		}
	case 1005:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6435
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1006:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6441
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6454
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6464
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6468
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6474
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6480
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6486
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6493
		{
			yyVAL.str = ""
		}
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6497
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1015:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6503
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6511
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6519
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6527
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6532
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6544
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6555
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6664
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6668
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6674
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6687
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6691
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6697
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6710
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6714
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6718
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6723
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6727
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6733
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6740
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6746
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6755
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1038:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6762
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6773
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6777
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6783
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6792
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6796
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6800
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6805
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6809
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6813
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6817
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6823
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6854
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6858
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6884
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6890
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6902
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6908
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6914
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6920
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6926
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6934
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6938
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6944
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6958
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6972
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6976
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6980
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6984
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6988
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6992
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6996
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7002
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7017
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7021
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7032
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7036
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7041
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7045
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7051
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7055
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7061
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7070
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7079
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7085
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7089
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7095
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7106
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7112
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7130
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7148
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7166
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7182
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7186
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7195
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7207
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7216
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7228
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7238
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7248
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7259
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7269
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7280
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7288
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7299
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7306
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7316
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7329
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7337
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7346
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7355
		{
			yyVAL.str = ""
		}
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7359
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7365
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7369
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7374
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7378
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7385
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7397
		{
			yyVAL.str = ""
		}
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7401
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1119:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7407
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7428
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7442
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7446
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7450
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7456
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7460
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7467
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7474
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7481
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7488
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7492
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7496
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7500
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7504
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7511
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7518
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7522
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7529
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7536
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7540
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7546
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7552
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7556
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7563
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7570
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7577
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7584
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7588
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7593
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7597
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7601
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7606
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7610
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7623
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7627
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7635
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7643
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7647
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7659
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7663
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7669
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7673
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7679
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7692
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7706
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7710
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7716
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7720
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7726
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7735
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7746
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7750
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7755
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7759
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7765
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7770
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7778
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7782
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7792
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7796
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7807
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7815
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7823
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7831
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7842
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7851
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7861
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7871
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7875
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7880
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7884
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7890
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7894
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7900
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7909
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7919
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7923
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7929
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7933
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7939
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7948
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7958
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7962
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7968
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7972
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7976
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7982
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7986
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7990
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7994
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7998
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8002
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8006
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8011
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8015
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8019
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8023
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8027
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8031
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8035
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8039
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8043
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8047
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8051
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8055
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8059
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8065
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8071
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8075
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8079
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8083
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8087
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8093
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8099
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8105
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8111
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8117
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8123
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8127
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8131
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8135
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8142
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8146
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8152
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8163
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8167
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8173
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8177
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8181
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8185
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8189
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8193
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8207
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8211
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8220
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8226
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8234
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8242
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8249
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8257
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8264
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8272
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8279
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8283
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8289
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8293
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8297
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8303
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8307
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8313
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8326
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8339
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8378
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8418
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8432
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8438
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8451
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8464
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8477
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8490
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8505
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8515
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8521
		{
			yyVAL.str = ""
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8525
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8535
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8541
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8547
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8568
		{
			yyVAL.str = ""
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8572
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8578
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8584
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8588
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8593
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8601
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8605
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8609
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8613
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8619
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8625
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8629
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8634
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8641
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8645
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8651
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8655
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8661
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8665
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8669
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8673
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8677
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8681
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8686
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8690
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8694
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8698
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8702
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8706
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8710
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8714
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8718
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8722
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8736
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8740
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8744
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8748
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8752
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8756
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8762
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8766
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8771
		{
			yyVAL.str = ""
		}
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8775
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8781
		{
			yyVAL.str = ""
		}
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8785
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8791
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8808
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8815
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8822
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8829
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8836
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8845
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8851
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8857
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8861
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8865
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8869
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8873
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8878
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8885
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8889
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8893
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8898
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8902
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8907
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8911
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8927
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8933
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8937
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8941
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8945
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8949
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8953
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8957
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8961
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8965
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8969
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8973
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8977
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8981
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8987
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8991
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8995
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8999
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9003
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9007
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9011
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9015
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9019
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9023
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9065
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9069
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9073
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9078
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9086
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9090
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9094
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9098
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9102
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9112
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9116
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9120
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9124
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9128
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9132
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9136
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9142
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9151
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9160
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9171
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9181
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9191
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9200
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9210
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9220
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9230
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9239
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9249
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9253
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9258
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9262
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9268
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9272
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9278
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9287
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9299
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9316
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9333
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9346
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9359
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9371
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9385
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9400
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9415
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9432
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9447
		{
		}
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9454
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9458
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9462
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9468
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9472
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9476
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9480
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9486
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9490
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9494
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9500
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9508
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9518
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9522
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9529
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9534
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9538
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9543
		{
			yyVAL.str = ","
		}
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9547
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9552
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9556
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1476:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9561
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9568
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9594
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9606
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9618
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9629
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9640
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9651
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9661
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9671
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9682
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9693
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9704
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9715
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9726
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9737
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9748
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9759
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9770
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9781
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9792
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9803
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9814
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9825
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9843
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9852
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9861
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9870
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9879
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9890
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9899
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9909
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9918
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9927
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9936
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9945
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9957
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9968
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9981
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9993
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10016
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10052
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10065
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10078
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10090
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10099
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10107
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10115
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10128
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10137
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10148
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10159
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10168
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10180
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10190
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10200
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10209
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10220
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10229
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10239
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10248
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10257
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10267
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10271
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10277
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10281
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10300
		{
		}
	case 1587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10302
		{
		}
	case 1621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10343
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10355
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10359
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10363
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10369
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10374
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10378
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10384
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10388
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10394
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10398
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10405
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10409
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10413
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10422
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10426
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10430
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10435
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10439
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10445
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10449
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10453
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10457
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10461
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10465
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10469
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10473
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10477
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10481
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10489
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10493
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10497
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10501
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10505
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10509
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10513
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10517
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10521
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10525
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10531
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10535
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10541
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10545
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10552
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10556
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10560
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10566
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10570
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10574
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10578
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10582
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10586
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10590
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10596
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10600
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10604
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10608
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10614
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10627
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10632
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10638
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10642
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10655
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10660
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10664
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10668
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10672
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10676
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10683
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10687
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10691
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10695
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10702
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10713
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10718
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10724
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10736
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10748
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10760
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10773
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10786
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10799
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10812
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10825
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10838
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10851
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10864
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10877
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10890
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10905
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10932
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10974
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11010
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11046
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11063
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11075
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11095
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11115
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11135
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11151
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11164
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11177
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11190
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11203
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11215
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11227
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11239
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11251
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11263
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11275
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11287
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11299
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11311
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11324
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11337
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11350
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11363
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11378
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11386
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11395
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11405
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11428
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11433
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11439
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11446
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11450
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11455
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11459
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11465
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11471
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11478
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11485
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11494
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11501
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11508
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11517
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11521
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11525
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11531
		{
		}
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11533
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11543
		{
			yyVAL.str = ""
		}
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11547
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
