// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const ADDDATE = 57869
const BIT_AND = 57870
const BIT_OR = 57871
const BIT_XOR = 57872
const CAST = 57873
const COUNT = 57874
const APPROX_COUNT = 57875
const APPROX_COUNT_DISTINCT = 57876
const SERIAL_EXTRACT = 57877
const APPROX_PERCENTILE = 57878
const CURDATE = 57879
const CURTIME = 57880
const DATE_ADD = 57881
const DATE_SUB = 57882
const EXTRACT = 57883
const GROUP_CONCAT = 57884
const MAX = 57885
const MID = 57886
const MIN = 57887
const NOW = 57888
const POSITION = 57889
const SESSION_USER = 57890
const STD = 57891
const STDDEV = 57892
const MEDIAN = 57893
const CLUSTER_CENTERS = 57894
const KMEANS = 57895
const STDDEV_POP = 57896
const STDDEV_SAMP = 57897
const SUBDATE = 57898
const SUBSTR = 57899
const SUBSTRING = 57900
const SUM = 57901
const SYSDATE = 57902
const SYSTEM_USER = 57903
const TRANSLATE = 57904
const TRIM = 57905
const VARIANCE = 57906
const VAR_POP = 57907
const VAR_SAMP = 57908
const AVG = 57909
const RANK = 57910
const ROW_NUMBER = 57911
const DENSE_RANK = 57912
const BIT_CAST = 57913
const NEXTVAL = 57914
const SETVAL = 57915
const CURRVAL = 57916
const LASTVAL = 57917
const ARROW = 57918
const ROW = 57919
const OUTFILE = 57920
const HEADER = 57921
const MAX_FILE_SIZE = 57922
const FORCE_QUOTE = 57923
const PARALLEL = 57924
const UNUSED = 57925
const BINDINGS = 57926
const DO = 57927
const DECLARE = 57928
const LOOP = 57929
const WHILE = 57930
const LEAVE = 57931
const ITERATE = 57932
const UNTIL = 57933
const CALL = 57934
const PREV = 57935
const SLIDING = 57936
const FILL = 57937
const SPBEGIN = 57938
const BACKEND = 57939
const SERVERS = 57940
const HANDLER = 57941
const PERCENT = 57942
const SAMPLE = 57943
const KILL = 57944
const BACKUP = 57945
const FILESYSTEM = 57946
const PARALLELISM = 57947
const QUERY_RESULT = 57948

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11657

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 119,
	11, 713,
	22, 713,
	-2, 706,
	-1, 139,
	238, 1104,
	240, 1005,
	-2, 1052,
	-1, 164,
	43, 540,
	240, 540,
	267, 547,
	268, 547,
	463, 540,
	-2, 574,
	-1, 205,
	627, 1851,
	-2, 454,
	-1, 502,
	627, 1969,
	-2, 348,
	-1, 560,
	627, 2028,
	-2, 346,
	-1, 561,
	627, 2029,
	-2, 347,
	-1, 562,
	627, 2030,
	-2, 349,
	-1, 688,
	319, 136,
	435, 136,
	436, 136,
	-2, 1756,
	-1, 754,
	82, 1543,
	-2, 1906,
	-1, 755,
	82, 1561,
	-2, 1877,
	-1, 759,
	82, 1562,
	-2, 1905,
	-1, 787,
	82, 1473,
	-2, 2100,
	-1, 788,
	82, 1474,
	-2, 2099,
	-1, 789,
	82, 1475,
	-2, 2089,
	-1, 790,
	82, 2061,
	-2, 2082,
	-1, 791,
	82, 2062,
	-2, 2083,
	-1, 792,
	82, 2063,
	-2, 2091,
	-1, 793,
	82, 2064,
	-2, 2071,
	-1, 794,
	82, 2065,
	-2, 2080,
	-1, 795,
	82, 2066,
	-2, 2092,
	-1, 796,
	82, 2067,
	-2, 2093,
	-1, 797,
	82, 2068,
	-2, 2098,
	-1, 798,
	82, 2069,
	-2, 2103,
	-1, 799,
	82, 2070,
	-2, 2104,
	-1, 800,
	82, 1539,
	-2, 1943,
	-1, 801,
	82, 1540,
	-2, 1740,
	-1, 802,
	82, 1541,
	-2, 1952,
	-1, 803,
	82, 1542,
	-2, 1749,
	-1, 805,
	82, 1545,
	-2, 1757,
	-1, 806,
	82, 1546,
	-2, 1976,
	-1, 808,
	82, 1549,
	-2, 1776,
	-1, 810,
	82, 1551,
	-2, 1988,
	-1, 811,
	82, 1552,
	-2, 1987,
	-1, 812,
	82, 1553,
	-2, 1820,
	-1, 813,
	82, 1554,
	-2, 1901,
	-1, 816,
	82, 1557,
	-2, 1999,
	-1, 818,
	82, 1559,
	-2, 2002,
	-1, 819,
	82, 1560,
	-2, 2004,
	-1, 820,
	82, 1563,
	-2, 2012,
	-1, 821,
	82, 1564,
	-2, 1886,
	-1, 822,
	82, 1565,
	-2, 1931,
	-1, 823,
	82, 1566,
	-2, 1896,
	-1, 824,
	82, 1567,
	-2, 1921,
	-1, 835,
	82, 1451,
	-2, 2094,
	-1, 836,
	82, 1452,
	-2, 2095,
	-1, 837,
	82, 1453,
	-2, 2096,
	-1, 924,
	458, 574,
	459, 574,
	-2, 541,
	-1, 970,
	124, 1740,
	135, 1740,
	155, 1740,
	-2, 1714,
	-1, 1081,
	22, 740,
	-2, 689,
	-1, 1185,
	11, 713,
	22, 713,
	-2, 1334,
	-1, 1262,
	22, 740,
	-2, 689,
	-1, 1582,
	82, 1614,
	-2, 1903,
	-1, 1583,
	82, 1615,
	-2, 1904,
	-1, 1729,
	83, 890,
	-2, 896,
	-1, 2146,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	280, 1044,
	-2, 1037,
	-1, 2292,
	11, 713,
	22, 713,
	-2, 833,
	-1, 2324,
	83, 1700,
	156, 1700,
	-2, 1888,
	-1, 2325,
	83, 1700,
	156, 1700,
	-2, 1887,
	-1, 2326,
	83, 1676,
	156, 1676,
	-2, 1874,
	-1, 2327,
	83, 1677,
	156, 1677,
	-2, 1879,
	-1, 2328,
	83, 1678,
	156, 1678,
	-2, 1808,
	-1, 2329,
	83, 1679,
	156, 1679,
	-2, 1802,
	-1, 2330,
	83, 1680,
	156, 1680,
	-2, 1730,
	-1, 2331,
	83, 1681,
	156, 1681,
	-2, 1876,
	-1, 2332,
	83, 1682,
	156, 1682,
	-2, 1806,
	-1, 2333,
	83, 1683,
	156, 1683,
	-2, 1801,
	-1, 2334,
	83, 1684,
	156, 1684,
	-2, 1790,
	-1, 2335,
	83, 1700,
	156, 1700,
	-2, 1791,
	-1, 2336,
	83, 1700,
	156, 1700,
	-2, 1792,
	-1, 2338,
	83, 1689,
	156, 1689,
	-2, 1921,
	-1, 2339,
	83, 1667,
	156, 1667,
	-2, 1906,
	-1, 2340,
	83, 1698,
	156, 1698,
	-2, 1877,
	-1, 2341,
	83, 1698,
	156, 1698,
	-2, 1905,
	-1, 2342,
	83, 1698,
	156, 1698,
	-2, 1758,
	-1, 2343,
	83, 1696,
	156, 1696,
	-2, 1896,
	-1, 2344,
	83, 1693,
	156, 1693,
	-2, 1781,
	-1, 2345,
	82, 1648,
	83, 1648,
	156, 1648,
	393, 1648,
	394, 1648,
	395, 1648,
	-2, 1729,
	-1, 2346,
	82, 1649,
	83, 1649,
	156, 1649,
	393, 1649,
	394, 1649,
	395, 1649,
	-2, 1731,
	-1, 2347,
	82, 1650,
	83, 1650,
	156, 1650,
	393, 1650,
	394, 1650,
	395, 1650,
	-2, 1948,
	-1, 2348,
	82, 1652,
	83, 1652,
	156, 1652,
	393, 1652,
	394, 1652,
	395, 1652,
	-2, 1878,
	-1, 2349,
	82, 1654,
	83, 1654,
	156, 1654,
	393, 1654,
	394, 1654,
	395, 1654,
	-2, 1860,
	-1, 2350,
	82, 1656,
	83, 1656,
	156, 1656,
	393, 1656,
	394, 1656,
	395, 1656,
	-2, 1807,
	-1, 2351,
	82, 1658,
	83, 1658,
	156, 1658,
	393, 1658,
	394, 1658,
	395, 1658,
	-2, 1786,
	-1, 2352,
	82, 1659,
	83, 1659,
	156, 1659,
	393, 1659,
	394, 1659,
	395, 1659,
	-2, 1787,
	-1, 2353,
	82, 1661,
	83, 1661,
	156, 1661,
	393, 1661,
	394, 1661,
	395, 1661,
	-2, 1728,
	-1, 2354,
	83, 1703,
	156, 1703,
	393, 1703,
	394, 1703,
	395, 1703,
	-2, 1763,
	-1, 2355,
	83, 1703,
	156, 1703,
	393, 1703,
	394, 1703,
	395, 1703,
	-2, 1777,
	-1, 2356,
	83, 1706,
	156, 1706,
	393, 1706,
	394, 1706,
	395, 1706,
	-2, 1759,
	-1, 2357,
	83, 1706,
	156, 1706,
	393, 1706,
	394, 1706,
	395, 1706,
	-2, 1823,
	-1, 2358,
	83, 1703,
	156, 1703,
	393, 1703,
	394, 1703,
	395, 1703,
	-2, 1844,
	-1, 2551,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	280, 1044,
	-2, 1038,
	-1, 2567,
	80, 634,
	156, 634,
	-2, 1217,
	-1, 2953,
	193, 1044,
	304, 1302,
	-2, 1274,
	-1, 3109,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1160,
	-1, 3111,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1160,
	-1, 3123,
	80, 634,
	156, 634,
	-2, 1218,
	-1, 3144,
	193, 1044,
	304, 1302,
	-2, 1275,
	-1, 3281,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1161,
	-1, 3307,
	83, 1122,
	156, 1122,
	-2, 1044,
	-1, 3435,
	83, 1122,
	156, 1122,
	-2, 1044,
	-1, 3581,
	83, 1126,
	156, 1126,
	-2, 1044,
	-1, 3628,
	83, 1127,
	156, 1127,
	-2, 1044,
}

const yyPrivate = 57344

const yyLast = 46025

var yyAct = [...]int{
	721, 698, 3674, 723, 3648, 2596, 194, 3667, 1813, 3585,
	1562, 3129, 3488, 3222, 3592, 3591, 3584, 3435, 2939, 707,
	3514, 3544, 2223, 3473, 3039, 3335, 2972, 3158, 3413, 2590,
	3040, 2409, 3467, 700, 1220, 1558, 3266, 3434, 3492, 3267,
	594, 3264, 751, 3363, 1082, 1345, 3404, 2593, 3226, 1484,
	1351, 610, 3096, 615, 615, 1407, 969, 3474, 1761, 615,
	632, 641, 3476, 3217, 641, 3288, 3271, 2570, 3278, 2912,
	2190, 1565, 3248, 3112, 3037, 2875, 3145, 3283, 2703, 696,
	2901, 2704, 2948, 2686, 2620, 1900, 2968, 1903, 3085, 179,
	56, 3114, 1620, 2957, 2702, 2950, 2286, 2765, 2444, 2320,
	2696, 652, 1972, 3025, 2010, 2476, 646, 2193, 2725, 3005,
	2699, 2540, 1868, 1400, 2885, 2956, 690, 2882, 2920, 2599,
	36, 1494, 2876, 2878, 2880, 1074, 2157, 2877, 2552, 1918,
	118, 1318, 2270, 2114, 2113, 35, 1994, 1981, 2391, 2125,
	2738, 1980, 899, 1480, 1707, 695, 2374, 1973, 1488, 2873,
	2748, 1946, 1896, 2809, 2006, 1473, 2287, 2005, 1871, 1485,
	1316, 1869, 2275, 2622, 2529, 1792, 2524, 963, 594, 2601,
	2191, 2562, 1803, 1285, 190, 8, 6, 1354, 189, 7,
	638, 2156, 1493, 1026, 1556, 2007, 1737, 2318, 2322, 1447,
	2040, 1416, 1511, 1386, 194, 2137, 194, 609, 1017, 1018,
	1773, 1355, 2017, 1613, 697, 615, 699, 593, 689, 2186,
	1772, 1561, 1547, 708, 1596, 2477, 26, 1334, 1979, 15,
	1095, 932, 22, 1454, 1962, 1736, 962, 14, 1976, 1936,
	13, 624, 1555, 32, 1385, 1439, 2294, 627, 691, 839,
	1330, 655, 1383, 898, 654, 1621, 23, 16, 180, 10,
	640, 170, 875, 176, 896, 1346, 919, 1260, 2014, 1446,
	881, 1221, 978, 651, 1154, 1155, 1156, 1153, 1154, 1155,
	1156, 1153, 1154, 1155, 1156, 1153, 637, 3398, 2510, 633,
	1014, 2296, 2510, 1013, 2510, 1015, 3126, 636, 2927, 2024,
	635, 3099, 1077, 634, 3032, 177, 52, 166, 140, 2432,
	2380, 2378, 975, 2377, 2375, 1984, 1720, 977, 620, 1461,
	1010, 178, 1457, 167, 644, 1009, 611, 841, 2112, 1010,
	159, 1279, 842, 2857, 168, 1010, 2854, 2859, 2856, 691,
	3659, 1368, 2502, 2500, 1714, 1275, 1459, 1154, 1155, 1156,
	1153, 3215, 2761, 117, 2759, 3148, 1154, 1155, 1156, 1153,
	1951, 3370, 3364, 8, 1077, 1008, 3218, 7, 105, 3038,
	1991, 1215, 3478, 1975, 171, 840, 2836, 2231, 3249, 851,
	3420, 3113, 3253, 2504, 1117, 1280, 2418, 2011, 177, 52,
	166, 140, 2148, 3160, 3388, 177, 3566, 2426, 177, 52,
	166, 140, 177, 3525, 177, 177, 3151, 1426, 177, 52,
	166, 140, 177, 177, 177, 1425, 1424, 3146, 177, 981,
	1509, 979, 3168, 3169, 3421, 980, 2558, 2834, 3147, 1291,
	177, 52, 166, 140, 1308, 650, 1501, 2022, 2141, 177,
	52, 166, 140, 117, 2312, 1125, 1281, 1151, 1127, 2313,
	1506, 122, 123, 2781, 124, 125, 2731, 171, 1655, 1880,
	2773, 117, 1093, 1532, 171, 3152, 1498, 171, 2732, 2733,
	2392, 1508, 1520, 2556, 171, 941, 1128, 171, 1881, 1882,
	2526, 171, 171, 171, 1913, 1721, 1722, 1500, 852, 830,
	2527, 829, 831, 832, 1090, 833, 834, 1144, 973, 171,
	3390, 1787, 1364, 974, 1564, 1365, 2300, 2858, 171, 2299,
	2855, 1387, 2301, 1389, 1548, 1342, 1149, 1552, 1352, 1353,
	3239, 2943, 139, 165, 175, 972, 103, 1350, 736, 119,
	971, 1349, 1352, 1353, 119, 3595, 3596, 3481, 3557, 2525,
	3481, 1551, 3480, 3556, 164, 158, 157, 3479, 3555, 1132,
	951, 58, 1133, 3480, 3479, 3563, 1121, 3616, 2101, 3167,
	1290, 2194, 3559, 3652, 3653, 2941, 3468, 3469, 3470, 3471,
	3041, 1568, 3465, 2413, 3546, 1087, 2766, 2767, 3546, 2768,
	1135, 1123, 3041, 1460, 1458, 621, 3156, 3549, 119, 2505,
	3367, 1367, 2026, 1126, 1129, 3485, 3054, 1098, 1897, 1887,
	1543, 2641, 3093, 3258, 3392, 139, 2894, 175, 3153, 3157,
	3155, 3154, 160, 161, 162, 3086, 1098, 2886, 1891, 1122,
	2532, 2018, 2264, 2136, 615, 1553, 2896, 164, 887, 1959,
	2516, 2799, 1467, 1466, 615, 1086, 3568, 3569, 2423, 3170,
	1147, 1148, 2229, 169, 3561, 2797, 3162, 3163, 1550, 3564,
	3565, 1146, 163, 641, 641, 3216, 615, 3238, 1120, 3395,
	1130, 2891, 2892, 113, 2760, 3240, 2890, 163, 2690, 114,
	2267, 685, 2266, 3255, 687, 2271, 649, 2893, 2209, 686,
	2514, 3185, 2971, 3623, 2189, 2212, 2921, 1567, 1566, 3594,
	2023, 2969, 2970, 3170, 947, 945, 1124, 946, 2910, 3507,
	976, 2503, 3502, 2563, 3425, 3149, 3417, 119, 1142, 1143,
	2945, 3161, 1340, 1292, 1377, 2695, 2515, 1193, 1574, 1577,
	1578, 3182, 119, 1131, 119, 2143, 115, 643, 642, 1575,
	1278, 978, 2029, 2031, 2032, 1911, 1912, 3175, 3493, 51,
	3509, 3130, 2211, 3336, 3337, 3338, 3342, 3340, 3341, 3339,
	3137, 2940, 1079, 1366, 1085, 3515, 2595, 3397, 3057, 638,
	638, 1112, 2803, 1086, 2509, 1549, 1984, 2012, 1078, 2012,
	2012, 975, 1078, 1329, 3186, 3484, 977, 1137, 2974, 2888,
	1138, 2591, 2592, 952, 2595, 2210, 3326, 889, 53, 890,
	2780, 1020, 1100, 1099, 2045, 3685, 1224, 3382, 1985, 3383,
	1134, 2241, 978, 2315, 2240, 948, 3229, 1010, 1140, 1103,
	2013, 1100, 1099, 1010, 1010, 1092, 1010, 2538, 3670, 639,
	2196, 3419, 3315, 172, 173, 1010, 174, 3321, 1010, 639,
	1396, 141, 1395, 1187, 1078, 1110, 2025, 2261, 2262, 2376,
	1327, 3166, 975, 3567, 2670, 3516, 1326, 977, 1462, 1344,
	1343, 639, 1325, 3385, 3405, 637, 637, 2949, 633, 633,
	639, 3426, 3583, 3418, 1101, 1075, 636, 636, 950, 635,
	635, 2853, 634, 634, 1288, 610, 1089, 1091, 2232, 3439,
	3115, 53, 1225, 840, 3384, 2189, 2041, 3213, 1136, 1081,
	2501, 53, 3044, 1258, 116, 39, 1263, 1352, 1353, 1109,
	3254, 50, 1286, 1105, 1106, 5, 172, 173, 899, 174,
	3165, 120, 121, 53, 141, 2427, 3393, 1189, 1190, 1191,
	1192, 141, 53, 1111, 141, 3391, 1141, 2887, 141, 2531,
	141, 141, 1898, 1194, 141, 1341, 2946, 2897, 141, 141,
	141, 1352, 1353, 2800, 141, 949, 2743, 2744, 1080, 2727,
	2729, 1139, 650, 974, 2206, 3671, 141, 2195, 615, 1576,
	1379, 3543, 2197, 1384, 1117, 141, 594, 594, 3259, 2973,
	2965, 3560, 1293, 2030, 1348, 594, 594, 692, 2889, 1411,
	1411, 2642, 615, 2643, 2644, 2535, 2536, 2199, 1888, 1544,
	2419, 3382, 2304, 3383, 2544, 2547, 2548, 2549, 2545, 2546,
	2534, 2227, 2015, 1300, 641, 1440, 610, 1890, 3438, 3377,
	1450, 1450, 2969, 2970, 1409, 1409, 2198, 942, 2966, 3079,
	2802, 194, 1306, 1305, 2027, 2028, 1304, 1303, 1418, 645,
	594, 942, 1233, 1234, 3328, 1413, 893, 894, 895, 888,
	3582, 2639, 1313, 1321, 1525, 1526, 2116, 3385, 2512, 1328,
	1116, 1295, 1296, 1297, 1298, 1299, 1338, 1301, 2117, 3322,
	3323, 2908, 942, 1307, 1357, 1358, 1284, 1360, 1361, 1362,
	3317, 1724, 1289, 1725, 3316, 2226, 2196, 2199, 3384, 1322,
	891, 1492, 1723, 1495, 854, 1468, 3668, 3669, 1503, 2253,
	1405, 1406, 2671, 2673, 2674, 2675, 2672, 2811, 2810, 855,
	944, 2661, 2662, 943, 3378, 3289, 1264, 3686, 3475, 1262,
	2119, 2118, 858, 1530, 944, 2128, 2728, 943, 2200, 3681,
	3045, 3676, 1331, 1335, 1335, 1335, 3665, 1411, 2926, 1411,
	1086, 1282, 1283, 1391, 1393, 1510, 1529, 1294, 2129, 2130,
	1336, 1337, 1403, 1404, 1528, 944, 1331, 1331, 943, 2075,
	2284, 3553, 2074, 2196, 2199, 2172, 1152, 119, 119, 976,
	1378, 2205, 1315, 857, 3630, 2203, 2568, 860, 859, 1011,
	1012, 1083, 3002, 3603, 1016, 978, 1545, 1117, 3597, 3579,
	978, 844, 845, 846, 847, 1369, 1370, 2394, 1356, 1323,
	2909, 1359, 2020, 1471, 3677, 1474, 1475, 1463, 3535, 3631,
	1939, 1482, 1483, 1441, 2569, 1499, 1476, 1477, 2200, 1394,
	1507, 3510, 1619, 2195, 2189, 2194, 3498, 2192, 2197, 2967,
	1001, 1006, 1007, 638, 2660, 1152, 1668, 1490, 1546, 2184,
	1185, 1154, 1155, 1156, 1153, 1539, 1487, 3631, 1419, 1491,
	620, 2998, 1154, 1155, 1156, 1153, 3604, 953, 3082, 1563,
	1432, 3401, 3580, 1115, 1438, 3056, 1641, 1584, 1585, 1586,
	1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1452,
	1451, 3401, 2198, 1607, 1608, 2285, 2106, 2832, 3458, 844,
	845, 846, 847, 1560, 2020, 2200, 2418, 1086, 2171, 3499,
	2195, 2189, 2194, 2978, 2192, 2197, 1726, 1323, 3378, 2976,
	2863, 1440, 3379, 2861, 3457, 2569, 1735, 1411, 1739, 1740,
	1653, 1742, 1743, 615, 1705, 1579, 1152, 3452, 615, 637,
	1677, 1411, 633, 1518, 1541, 899, 1521, 2285, 1762, 849,
	636, 1538, 3451, 635, 1535, 1411, 634, 2285, 1557, 1937,
	1519, 1379, 1658, 1659, 1660, 1534, 632, 2139, 1513, 2198,
	3450, 3459, 2746, 3449, 2518, 1674, 1422, 1114, 1675, 1708,
	2506, 1537, 1536, 1667, 1533, 1083, 1786, 1117, 3429, 1559,
	1554, 1265, 1685, 1686, 2408, 1793, 1793, 2161, 1379, 3428,
	1379, 1379, 2399, 2315, 615, 615, 3400, 1735, 1735, 1704,
	3401, 1411, 1865, 1866, 1878, 2011, 1605, 1606, 1650, 1651,
	1734, 1654, 1879, 1598, 2182, 3401, 1716, 3191, 594, 1669,
	1411, 1741, 1003, 1004, 1005, 1154, 1155, 1156, 1153, 1637,
	1790, 3139, 1676, 3401, 1678, 1634, 3401, 849, 2111, 1636,
	1633, 1635, 1639, 1640, 1115, 3002, 2105, 1638, 615, 1735,
	1411, 2020, 1923, 3105, 615, 615, 615, 1928, 1929, 2104,
	3072, 2079, 2020, 2002, 1933, 1934, 1935, 3068, 2986, 3401,
	1941, 2051, 2138, 1815, 1909, 1711, 1314, 194, 1770, 1771,
	194, 194, 2722, 194, 1914, 1731, 1732, 1733, 1610, 2483,
	2315, 1860, 1861, 724, 734, 1780, 1781, 1745, 1746, 1747,
	1748, 1679, 1397, 725, 3140, 726, 730, 733, 729, 727,
	728, 1906, 1907, 1420, 3693, 1791, 3678, 621, 1892, 1706,
	1259, 1668, 1668, 1983, 3126, 1884, 3106, 1886, 1738, 1668,
	1668, 2475, 1774, 3073, 1776, 1777, 1996, 1904, 1905, 1712,
	3069, 2987, 1754, 1920, 1764, 1765, 1730, 1331, 1783, 119,
	2434, 1794, 1922, 2750, 2416, 2285, 1767, 2404, 731, 2571,
	1795, 1335, 1152, 1762, 2421, 2420, 1950, 1411, 2009, 1953,
	1954, 2412, 1956, 1335, 1899, 1758, 1990, 1779, 1759, 2401,
	2396, 2389, 2387, 1925, 1926, 1927, 1769, 1775, 1796, 1784,
	732, 1644, 1645, 1646, 1647, 1648, 1649, 1642, 1643, 2177,
	1797, 1798, 2070, 3092, 1152, 2055, 2001, 2385, 1944, 1931,
	1515, 978, 1738, 119, 2383, 2160, 1201, 2107, 119, 978,
	1102, 2003, 2931, 1152, 1072, 1070, 1864, 2161, 3352, 1986,
	2397, 119, 1373, 1374, 3189, 1376, 2086, 1380, 1381, 1382,
	1867, 1908, 1169, 119, 1893, 1883, 2794, 1885, 2375, 1657,
	1656, 975, 2402, 2397, 2390, 2388, 977, 1401, 1978, 975,
	3687, 1557, 2054, 638, 977, 3656, 1978, 2085, 1402, 1427,
	1428, 1429, 1430, 1431, 2073, 1433, 1434, 1435, 1436, 1437,
	2384, 1157, 1921, 1443, 1444, 1445, 1332, 2384, 2161, 1186,
	2106, 2224, 1154, 1155, 1156, 1153, 3399, 1947, 1196, 2452,
	2922, 1945, 2064, 2038, 2039, 1680, 1681, 1682, 1683, 1152,
	978, 1687, 1688, 1689, 1690, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1204, 1964, 3374, 1992, 1069, 1065, 1066,
	1067, 1068, 2063, 2457, 2062, 2456, 2455, 2453, 2053, 2019,
	1152, 2034, 1522, 1948, 3319, 3318, 3304, 1152, 1989, 690,
	975, 3260, 615, 615, 615, 977, 3098, 1987, 1363, 637,
	1691, 1319, 633, 1998, 2000, 1320, 615, 615, 615, 615,
	636, 3003, 856, 635, 3503, 1152, 634, 2923, 2004, 2158,
	1999, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1169, 2164,
	1379, 1167, 1177, 1178, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1169, 2454, 1333, 2996, 1152, 2991, 1152, 1657, 1656,
	2988, 2903, 2020, 3290, 2033, 1523, 1379, 2042, 3504, 2692,
	3118, 2924, 2080, 2081, 1399, 2083, 2036, 2037, 2542, 3116,
	2511, 3030, 2090, 2218, 1598, 2035, 2047, 1168, 1167, 1177,
	1178, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1169, 3433,
	1172, 1173, 1174, 1175, 1176, 1169, 2077, 3291, 1319, 2431,
	2400, 2306, 1320, 2230, 3119, 1310, 2233, 2234, 2235, 2236,
	2237, 2238, 2239, 3117, 1309, 2242, 2243, 2244, 2245, 2246,
	2247, 2248, 2249, 2250, 2251, 2252, 1088, 2254, 2255, 2256,
	2257, 2258, 2225, 2259, 2289, 2289, 1878, 2289, 861, 2441,
	2369, 1614, 2752, 1168, 1167, 1177, 1178, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1169, 594, 594, 1156, 1153, 1684,
	1727, 3554, 1877, 1086, 1398, 2108, 1604, 1153, 3331, 1411,
	615, 1154, 1155, 1156, 1153, 2173, 2100, 2102, 2103, 1455,
	2458, 2459, 1601, 1603, 1600, 615, 1602, 1614, 3330, 2048,
	2188, 1086, 2359, 610, 2187, 2769, 1224, 2122, 1450, 2631,
	1878, 2140, 2629, 2364, 2310, 2366, 1455, 2607, 1948, 194,
	2605, 3684, 1154, 1155, 1156, 1153, 3310, 2168, 3261, 3262,
	3661, 2181, 2174, 3033, 1203, 2175, 978, 1449, 1449, 3256,
	2302, 2291, 2303, 2295, 2541, 119, 3660, 1202, 119, 119,
	2165, 119, 1154, 1155, 1156, 1153, 3097, 2494, 2293, 2495,
	2307, 2308, 1335, 2379, 3607, 1672, 2178, 3578, 1154, 1155,
	1156, 1153, 2414, 3577, 3090, 2009, 975, 3031, 2176, 2066,
	1673, 977, 1411, 3683, 1411, 2682, 1411, 2201, 2202, 976,
	2207, 1086, 1225, 3301, 3505, 3454, 3257, 976, 3442, 2433,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1158, 2370, 2410,
	2411, 119, 1154, 1155, 1156, 1153, 1504, 2825, 3432, 2424,
	2323, 2443, 2363, 2697, 2317, 1411, 2461, 3422, 3365, 2467,
	2268, 3091, 1391, 1393, 3293, 1154, 1155, 1156, 1153, 3292,
	3131, 2468, 2681, 2297, 2371, 2065, 1411, 1168, 1167, 1177,
	1178, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1169, 3120,
	1409, 1154, 1155, 1156, 1153, 1154, 1155, 1156, 1153, 1924,
	1456, 2311, 1154, 1155, 1156, 1153, 2824, 2314, 3089, 2895,
	2460, 1409, 1154, 1155, 1156, 1153, 3588, 2790, 1185, 2680,
	1569, 1570, 1571, 1572, 1573, 2472, 2473, 2362, 1086, 2764,
	2360, 2469, 1086, 1154, 1155, 1156, 1153, 2763, 2665, 1411,
	2428, 2664, 2539, 1154, 1155, 1156, 1153, 2663, 1735, 2678,
	2667, 2449, 1154, 1155, 1156, 1153, 2567, 2470, 2655, 2528,
	2430, 1611, 2573, 2649, 2648, 1615, 1616, 1617, 1618, 2647,
	2646, 3491, 2507, 2425, 1652, 2110, 2679, 1967, 2583, 1966,
	1965, 1961, 1662, 2406, 1960, 1917, 2881, 1086, 1916, 2439,
	2417, 2478, 2479, 1915, 2498, 2604, 2422, 2484, 1154, 1155,
	1156, 1153, 1086, 1086, 1086, 1793, 2677, 2666, 1086, 2415,
	2615, 2616, 2617, 2618, 1086, 2625, 1516, 2626, 2627, 1277,
	2628, 3680, 2630, 1557, 2553, 3244, 3679, 2435, 2436, 1709,
	3522, 3223, 3654, 2625, 3622, 685, 3621, 2451, 687, 2445,
	978, 2445, 2554, 686, 3618, 2289, 2438, 2519, 2637, 2638,
	3487, 2323, 1154, 1155, 1156, 1153, 3265, 3472, 3463, 2683,
	1815, 3446, 3441, 2653, 2654, 2574, 3440, 594, 3396, 3394,
	2557, 3366, 1735, 1086, 1878, 1878, 1878, 1878, 3312, 3274,
	3243, 2813, 3242, 3232, 3221, 1086, 1878, 2689, 3518, 2289,
	3219, 1766, 3198, 2521, 1876, 2523, 3195, 2575, 3193, 2687,
	2602, 3231, 3088, 3087, 2602, 1411, 2580, 2581, 3084, 2598,
	1154, 1155, 1156, 1153, 3065, 1782, 615, 615, 3063, 2520,
	2997, 2058, 2610, 2611, 2609, 2537, 2993, 2614, 1154, 1155,
	1156, 1153, 2984, 2621, 8, 2983, 2572, 2566, 7, 2904,
	2868, 2867, 2865, 2564, 2115, 2804, 2801, 614, 614, 2762,
	1738, 2584, 2736, 622, 2582, 2587, 1154, 1155, 1156, 1153,
	2676, 2600, 2668, 2718, 2658, 2656, 2606, 2603, 1709, 2585,
	2613, 2652, 194, 1709, 1709, 2651, 2650, 194, 1177, 1178,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1169, 1763, 2508,
	2407, 1969, 2705, 1963, 2292, 1719, 2645, 1718, 1668, 2052,
	1668, 2657, 1517, 2779, 2705, 786, 785, 3387, 1778, 1232,
	1228, 1227, 3179, 2789, 1154, 1155, 1156, 1153, 1073, 1411,
	853, 3060, 2796, 1949, 1785, 2828, 1952, 1788, 1789, 1955,
	2688, 3386, 1957, 2693, 2691, 2706, 2707, 2708, 2709, 1154,
	1155, 1156, 1153, 2827, 2719, 2721, 2717, 2720, 1154, 1155,
	1156, 1153, 1154, 1155, 1156, 1153, 3375, 3245, 1877, 2737,
	3230, 2753, 2734, 3111, 3110, 3109, 2757, 119, 3081, 3077,
	1154, 1155, 1156, 1153, 1154, 1155, 1156, 1153, 3075, 2730,
	3074, 1475, 1995, 1708, 3071, 1482, 1483, 978, 2778, 3070,
	3064, 1476, 1477, 3062, 3046, 978, 3036, 3035, 3021, 622,
	3020, 2776, 2932, 2871, 2826, 2818, 1490, 2820, 2783, 2860,
	2830, 2823, 2747, 2815, 2814, 1487, 2866, 2774, 1491, 2751,
	2755, 2793, 2492, 1086, 2754, 2782, 2808, 2745, 2517, 2884,
	2798, 1154, 1155, 1156, 1153, 2775, 2491, 2386, 2382, 2899,
	2772, 2777, 2770, 2050, 615, 2786, 2785, 2784, 2381, 1154,
	1155, 1156, 1153, 2091, 2084, 2078, 2913, 1086, 2076, 2072,
	1086, 1086, 2071, 1154, 1155, 1156, 1153, 2805, 2069, 1878,
	2158, 2060, 2930, 2792, 2057, 2056, 1968, 1702, 2044, 1701,
	2837, 2838, 2049, 2806, 1700, 1671, 2839, 2840, 2841, 2842,
	2218, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2862,
	2819, 2812, 2955, 1670, 2958, 2490, 2958, 2958, 2816, 2817,
	2907, 1086, 2821, 2822, 177, 1661, 166, 140, 1154, 1155,
	1156, 1153, 1423, 2061, 1421, 2597, 3606, 1222, 3517, 2553,
	2979, 2068, 1154, 1155, 1156, 1153, 3460, 3448, 1411, 1411,
	3443, 1470, 2942, 2944, 2864, 2975, 3346, 978, 177, 978,
	2082, 3329, 978, 2977, 3325, 2087, 2088, 2089, 2869, 3303,
	2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 119, 3636,
	2489, 3287, 2900, 1409, 1409, 3206, 3204, 978, 119, 2916,
	2906, 2928, 2919, 171, 3177, 615, 3176, 975, 3173, 3172,
	2884, 2925, 977, 2980, 2981, 2954, 2929, 1154, 1155, 1156,
	1153, 1735, 1735, 2937, 3138, 2963, 2915, 2938, 2870, 2917,
	2918, 3135, 2188, 3133, 2936, 2488, 2187, 171, 3100, 1481,
	1472, 2959, 2960, 1486, 3308, 2487, 1489, 1478, 1317, 2684,
	2608, 2560, 2559, 2964, 2555, 2522, 2493, 2395, 2305, 1180,
	2260, 1184, 1154, 1155, 1156, 1153, 2159, 1086, 2486, 2131,
	2109, 2461, 1154, 1155, 1156, 1153, 2485, 1181, 1183, 1179,
	3034, 1182, 1168, 1167, 1177, 1178, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1169, 1599, 1154, 1155, 1156, 1153, 171,
	1930, 2961, 1729, 1154, 1155, 1156, 1153, 1715, 2953, 1542,
	1502, 1479, 1877, 1877, 1877, 1877, 2437, 1276, 1261, 1257,
	1256, 1255, 1254, 615, 1877, 2992, 2995, 2990, 2994, 1253,
	1252, 2999, 3000, 2989, 2985, 2482, 1251, 1250, 3010, 1249,
	1168, 1167, 1177, 1178, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1169, 2481, 3014, 1248, 3017, 3018, 3019, 1247, 1246,
	2166, 2167, 1154, 1155, 1156, 1153, 3023, 1245, 1244, 1243,
	2169, 2170, 1709, 1242, 1709, 3029, 1241, 3534, 2480, 1154,
	1155, 1156, 1153, 1240, 1239, 1238, 2323, 1237, 1236, 1235,
	1231, 1230, 1709, 1709, 2474, 1229, 3047, 1226, 1219, 1218,
	1216, 1215, 1214, 3049, 3048, 1154, 1155, 1156, 1153, 1213,
	119, 3532, 2464, 3052, 1212, 119, 3066, 1211, 3053, 1210,
	1209, 1154, 1155, 1156, 1153, 1449, 1208, 1207, 1076, 1206,
	1205, 3104, 3058, 3530, 2440, 119, 1200, 1199, 1084, 1154,
	1155, 1156, 1153, 119, 1198, 1197, 2289, 1878, 3123, 1119,
	3101, 3102, 3103, 1071, 3006, 3007, 3107, 3108, 3528, 3174,
	1108, 1154, 1155, 1156, 1153, 1609, 2163, 2272, 2145, 1107,
	3141, 3634, 2403, 1086, 3593, 3009, 3078, 2543, 2316, 1971,
	1118, 3012, 2955, 978, 2714, 2716, 1086, 2281, 2282, 2715,
	978, 2712, 1154, 1155, 1156, 1153, 2713, 1086, 3011, 3188,
	2711, 2710, 2405, 1411, 2277, 2280, 2281, 2282, 2278, 2398,
	2279, 2283, 1311, 3080, 1756, 1757, 612, 3208, 3125, 1735,
	3083, 3095, 2445, 1086, 2902, 3209, 2361, 2277, 2280, 2281,
	2282, 2278, 104, 2279, 2283, 2368, 2442, 2788, 1409, 2448,
	2228, 3132, 3121, 3134, 3171, 55, 2462, 2463, 2951, 3128,
	2952, 3164, 194, 54, 2465, 2466, 3050, 3051, 3190, 3122,
	1751, 1752, 1753, 3184, 3024, 1086, 3200, 2471, 1852, 1464,
	616, 2393, 2429, 3183, 3207, 3178, 2633, 1512, 3210, 1496,
	3180, 3187, 2121, 2634, 2635, 2636, 2410, 2411, 1932, 617,
	1113, 3192, 3142, 1569, 1709, 976, 3197, 119, 3196, 3194,
	119, 2879, 618, 1086, 3201, 3181, 2872, 1877, 2586, 2561,
	619, 3202, 2180, 3199, 2154, 1760, 2621, 1728, 1657, 1656,
	3645, 1086, 1411, 1411, 3445, 119, 2982, 2913, 1272, 1273,
	1270, 1271, 3228, 1268, 1269, 1266, 1267, 2269, 3282, 2265,
	3282, 3214, 2705, 3224, 3225, 1863, 1372, 1371, 1145, 3016,
	2739, 2120, 1997, 1324, 1086, 3297, 1086, 1409, 3272, 2577,
	2578, 3276, 3277, 1302, 3300, 1347, 3302, 3613, 3611, 3212,
	3571, 3551, 3550, 1411, 3548, 3250, 3252, 3270, 3251, 3494,
	3461, 3360, 3359, 3298, 2705, 3220, 3067, 3043, 3233, 3042,
	3234, 615, 3027, 1086, 1086, 2213, 3275, 1086, 1086, 2183,
	3286, 1514, 3285, 3026, 2749, 1323, 3638, 3637, 3272, 3241,
	2791, 3125, 2147, 2059, 3296, 1104, 3637, 1083, 3638, 3327,
	978, 3343, 3022, 181, 3, 1762, 3348, 3357, 3350, 3333,
	3334, 1339, 3351, 3344, 3345, 3171, 3361, 3362, 3305, 3313,
	3268, 3309, 3164, 3306, 63, 2, 3657, 3658, 3311, 1411,
	3279, 844, 845, 846, 847, 1, 1083, 2499, 2576, 1713,
	1274, 848, 1375, 2579, 843, 1388, 3354, 2298, 1910, 1415,
	3353, 1717, 850, 1563, 2723, 1563, 2724, 3381, 3015, 2726,
	2513, 2016, 3349, 3355, 1409, 3299, 1417, 2694, 3247, 2263,
	2135, 2898, 1312, 892, 1663, 1527, 1000, 1097, 3372, 1524,
	1096, 1094, 1612, 738, 3373, 1974, 2685, 2659, 3414, 3368,
	3408, 3356, 3268, 3268, 3644, 3376, 3268, 3268, 3673, 3605,
	3380, 3647, 1540, 722, 1086, 3542, 3464, 3609, 3466, 3371,
	2021, 1150, 2771, 915, 3431, 776, 3437, 749, 3402, 1168,
	1167, 1177, 1178, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1169, 1217, 1505, 3411, 3410, 1497, 2835, 2833, 1002, 3423,
	3409, 748, 3228, 2756, 3094, 2758, 3427, 1086, 2533, 2742,
	3416, 999, 1411, 916, 1958, 3369, 1465, 1469, 2179, 3424,
	3513, 3307, 2947, 1709, 2594, 3508, 3136, 3237, 1709, 3235,
	3444, 978, 3236, 656, 1889, 3456, 1995, 592, 960, 3347,
	1970, 657, 2162, 3453, 3562, 3447, 872, 1409, 2144, 3483,
	873, 119, 865, 2551, 2550, 1580, 1159, 3477, 119, 1597,
	2851, 3406, 1086, 2852, 1195, 694, 2046, 3455, 2530, 3159,
	2735, 2807, 3462, 62, 61, 60, 3495, 59, 1940, 202,
	740, 201, 3263, 1563, 3539, 3649, 720, 719, 718, 717,
	716, 715, 3496, 2276, 3490, 2829, 2274, 3500, 3501, 2273,
	3486, 3489, 1873, 1872, 3512, 1877, 1938, 2911, 2624, 1086,
	3497, 2619, 1804, 1802, 2612, 2208, 2215, 1411, 1801, 3590,
	3537, 3540, 3527, 3529, 3531, 3533, 3268, 3523, 3521, 3506,
	3524, 3324, 2669, 3511, 3227, 3541, 1750, 2204, 1821, 3520,
	2640, 1818, 1817, 2632, 3320, 3526, 3314, 1849, 3412, 3281,
	3143, 3144, 1409, 3150, 2153, 1025, 3545, 1411, 1021, 3547,
	3414, 1023, 1024, 1022, 2450, 2185, 2874, 2127, 2126, 2124,
	2123, 1287, 3536, 3482, 3558, 3246, 3581, 2321, 2319, 3008,
	3004, 3268, 3589, 3570, 3572, 1982, 1993, 2787, 3574, 1874,
	1870, 2146, 1409, 3389, 3575, 3576, 1755, 866, 2142, 1641,
	156, 49, 101, 154, 48, 90, 89, 100, 152, 47,
	119, 186, 3573, 185, 3598, 188, 3599, 187, 3600, 184,
	3601, 2372, 3612, 3602, 3614, 3615, 2373, 3610, 3268, 3608,
	183, 1453, 1086, 182, 3477, 3552, 2962, 3284, 3617, 838,
	38, 37, 33, 12, 11, 34, 3619, 3620, 21, 20,
	3437, 3626, 1531, 19, 25, 31, 30, 1744, 112, 3628,
	3629, 3627, 1749, 111, 29, 3643, 3633, 3651, 3635, 110,
	3650, 3639, 3640, 3641, 3642, 3632, 109, 108, 107, 106,
	28, 18, 42, 41, 3662, 40, 1086, 3655, 119, 9,
	99, 97, 27, 98, 95, 96, 3663, 3512, 3664, 93,
	91, 3666, 74, 73, 72, 2933, 3672, 3675, 87, 86,
	2934, 2935, 85, 84, 83, 177, 52, 166, 140, 82,
	80, 81, 914, 71, 70, 69, 68, 67, 1799, 1800,
	3682, 94, 92, 167, 78, 88, 79, 2831, 3651, 3689,
	159, 3650, 3688, 77, 168, 76, 903, 75, 3675, 3690,
	66, 3624, 65, 64, 3694, 138, 137, 136, 135, 134,
	132, 133, 1637, 117, 131, 130, 129, 128, 1634, 127,
	126, 43, 1636, 1633, 1635, 1639, 1640, 44, 105, 45,
	1638, 46, 1919, 148, 171, 147, 149, 151, 1919, 1919,
	1919, 1168, 1167, 1177, 1178, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1169, 153, 150, 1563, 155, 145, 143, 146,
	2043, 144, 142, 57, 102, 901, 902, 17, 24, 4,
	0, 0, 1043, 0, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 3001, 1168, 1167, 1177, 1178, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1169, 0, 0, 3013, 0,
	0, 0, 889, 3059, 890, 0, 0, 0, 0, 119,
	3061, 122, 123, 0, 124, 125, 1168, 1167, 1177, 1178,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3076,
	870, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 880, 0, 0, 944,
	0, 0, 943, 1622, 1623, 1624, 1625, 1626, 1627, 1628,
	1629, 1630, 1631, 1632, 1644, 1645, 1646, 1647, 1648, 1649,
	1642, 1643, 139, 165, 175, 0, 103, 0, 0, 0,
	0, 0, 0, 1029, 0, 0, 0, 1019, 0, 928,
	0, 0, 0, 0, 164, 158, 157, 904, 0, 0,
	0, 58, 862, 1051, 1055, 1057, 1059, 1061, 1062, 1064,
	0, 1069, 1065, 1066, 1067, 1068, 0, 1046, 1047, 1048,
	1049, 1027, 1028, 1052, 906, 1030, 0, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1040, 1041,
	1050, 0, 0, 0, 0, 0, 0, 0, 1054, 1056,
	1058, 1060, 1063, 0, 0, 0, 0, 0, 0, 0,
	1709, 0, 160, 161, 162, 0, 0, 0, 0, 0,
	0, 1709, 0, 886, 3203, 879, 0, 3205, 0, 0,
	0, 0, 0, 0, 883, 882, 1045, 927, 926, 0,
	0, 0, 0, 169, 3211, 0, 0, 0, 3124, 0,
	0, 864, 0, 0, 0, 871, 3127, 0, 997, 925,
	0, 0, 0, 113, 0, 0, 0, 163, 0, 114,
	900, 0, 0, 0, 0, 878, 2132, 2133, 2134, 0,
	0, 905, 937, 0, 0, 0, 0, 0, 0, 0,
	2149, 2150, 2151, 2152, 888, 0, 0, 0, 0, 877,
	0, 0, 0, 876, 0, 933, 0, 0, 0, 863,
	0, 0, 0, 869, 1850, 0, 0, 0, 0, 1811,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	998, 0, 0, 0, 0, 867, 0, 0, 0, 51,
	0, 934, 938, 0, 0, 0, 0, 0, 0, 1852,
	1820, 0, 0, 0, 0, 0, 0, 0, 0, 1853,
	1854, 922, 0, 920, 924, 941, 0, 0, 0, 921,
	918, 917, 887, 923, 908, 909, 907, 910, 911, 912,
	913, 0, 939, 0, 940, 1819, 0, 0, 53, 0,
	0, 0, 0, 0, 0, 935, 936, 0, 868, 0,
	1827, 992, 987, 982, 986, 990, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 173, 0, 174, 0, 0, 995,
	0, 141, 931, 985, 0, 0, 0, 0, 930, 0,
	0, 3294, 3295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1843, 1919,
	0, 1154, 1155, 1156, 1153, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 993, 0, 0, 3403, 0, 0,
	0, 996, 0, 0, 116, 39, 0, 0, 0, 0,
	0, 50, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 983, 874, 0, 0, 0, 1053, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 0, 0, 1810,
	1812, 1809, 0, 1806, 0, 0, 0, 0, 1831, 0,
	1641, 0, 0, 0, 0, 0, 0, 0, 0, 1837,
	0, 0, 0, 0, 0, 0, 0, 1822, 0, 1805,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 1825,
	1859, 0, 0, 1826, 1828, 1830, 0, 1832, 1833, 1834,
	1838, 1839, 1840, 1842, 1845, 1846, 1847, 0, 0, 667,
	666, 673, 663, 1204, 1835, 1844, 1836, 0, 0, 0,
	0, 670, 671, 0, 672, 676, 1814, 0, 658, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 681, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 0, 0, 0, 0, 0,
	0, 3519, 0, 0, 1807, 1808, 0, 0, 0, 0,
	0, 685, 0, 0, 687, 0, 0, 0, 0, 686,
	0, 0, 1848, 0, 0, 0, 0, 0, 0, 988,
	0, 0, 989, 0, 0, 0, 0, 0, 0, 1824,
	2565, 0, 0, 0, 0, 0, 1823, 0, 0, 0,
	0, 0, 0, 1637, 0, 0, 0, 0, 0, 1634,
	0, 0, 0, 1636, 1633, 1635, 1639, 1640, 0, 0,
	1841, 1638, 0, 0, 0, 3586, 0, 0, 0, 1829,
	0, 1029, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1856, 1855, 0, 0, 0, 0, 0, 0,
	0, 1051, 1055, 1057, 1059, 1061, 1062, 1064, 0, 1069,
	1065, 1066, 1067, 1068, 0, 1046, 1047, 1048, 1049, 1027,
	1028, 1052, 0, 1030, 0, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1042, 1044, 1040, 1041, 1050, 0,
	0, 3586, 0, 0, 0, 1816, 1054, 1056, 1058, 1060,
	1063, 0, 0, 0, 0, 0, 659, 661, 660, 0,
	0, 0, 0, 0, 0, 0, 665, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 0, 1045, 684, 0, 1858, 0, 3586,
	1857, 0, 662, 0, 0, 0, 653, 0, 0, 0,
	2740, 2741, 0, 0, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1644, 1645, 1646, 1647, 1648,
	1649, 1642, 1643, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3692, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 668, 674, 0, 675, 677, 0, 0, 678,
	679, 680, 0, 0, 682, 683, 0, 0, 0, 0,
	0, 0, 756, 0, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 709, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 747,
	522, 473, 392, 345, 540, 539, 0, 0, 809, 817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 737, 786, 785, 724, 734, 0, 0,
	274, 200, 468, 587, 470, 469, 725, 0, 726, 730,
	733, 729, 727, 728, 0, 801, 0, 0, 0, 0,
	0, 0, 693, 705, 0, 710, 0, 0, 2905, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 702,
	703, 0, 0, 0, 0, 757, 0, 704, 0, 0,
	752, 731, 735, 0, 0, 0, 1053, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 732, 755, 759, 295, 823, 753, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 824, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 750, 0, 584, 0, 424,
	0, 0, 807, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 754, 0, 382, 363, 820, 0, 1919,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 1665,
	1664, 1666, 436, 329, 330, 0, 308, 256, 257, 601,
	805, 359, 550, 583, 475, 0, 819, 800, 802, 803,
	806, 810, 811, 812, 813, 814, 816, 818, 822, 600,
	0, 529, 544, 603, 543, 597, 365, 3055, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	821, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	758, 525, 526, 349, 350, 351, 352, 808, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 830, 804, 829, 831,
	832, 828, 833, 834, 815, 714, 0, 762, 826, 825,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 793, 769, 770, 771, 711, 772, 766, 767,
	712, 768, 794, 760, 790, 791, 739, 763, 773, 789,
	774, 792, 795, 796, 835, 836, 780, 764, 225, 837,
	777, 797, 788, 787, 775, 761, 798, 799, 746, 741,
	778, 779, 765, 781, 782, 783, 713, 742, 743, 744,
	745, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 784, 0, 602, 471,
	472, 582, 756, 706, 0, 0, 0, 0, 0, 0,
	0, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 709, 0, 0, 0, 301, 1710,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 747,
	522, 473, 392, 345, 540, 539, 0, 0, 809, 817,
	0, 0, 0, 0, 0, 0, 0, 1901, 0, 0,
	701, 0, 0, 737, 786, 785, 724, 734, 0, 0,
	274, 200, 468, 587, 470, 469, 725, 0, 726, 730,
	733, 729, 727, 728, 0, 801, 0, 0, 0, 0,
	0, 0, 693, 705, 0, 710, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3332, 0, 0, 0, 702,
	703, 0, 0, 0, 0, 757, 0, 704, 0, 0,
	1902, 731, 735, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 732, 755, 759, 295, 823, 753, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 824, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 750, 0, 584, 0, 424,
	0, 0, 807, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 754, 0, 382, 363, 820, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	805, 359, 550, 583, 475, 0, 819, 800, 802, 803,
	806, 810, 811, 812, 813, 814, 816, 818, 822, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	821, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	758, 525, 526, 349, 350, 351, 352, 808, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 830, 804, 829, 831,
	832, 828, 833, 834, 815, 714, 0, 762, 826, 825,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 793, 769, 770, 771, 711, 772, 766, 767,
	712, 768, 794, 760, 790, 791, 739, 763, 773, 789,
	774, 792, 795, 796, 835, 836, 780, 764, 225, 837,
	777, 797, 788, 787, 775, 761, 798, 799, 746, 741,
	778, 779, 765, 781, 782, 783, 713, 742, 743, 744,
	745, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 784, 0, 602, 471,
	472, 582, 0, 706, 177, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 1188, 522, 473, 392, 345, 540, 539, 0,
	0, 809, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 737, 786, 785, 724,
	734, 0, 0, 274, 200, 468, 587, 470, 469, 725,
	0, 726, 730, 733, 729, 727, 728, 0, 801, 0,
	0, 0, 0, 0, 0, 693, 705, 0, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 703, 0, 0, 0, 0, 757, 0,
	704, 0, 0, 752, 731, 735, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 732, 755, 759, 295,
	823, 753, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 824, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 750, 0,
	584, 0, 424, 0, 0, 807, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 754, 0, 382, 363,
	820, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 805, 359, 550, 583, 475, 0, 819,
	800, 802, 803, 806, 810, 811, 812, 813, 814, 816,
	818, 822, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 821, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 758, 525, 526, 349, 350, 351, 352,
	808, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 830,
	804, 829, 831, 832, 828, 833, 834, 815, 714, 0,
	762, 826, 825, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	141, 373, 306, 546, 547, 793, 769, 770, 771, 711,
	772, 766, 767, 712, 768, 794, 760, 790, 791, 739,
	763, 773, 789, 774, 792, 795, 796, 835, 836, 780,
	764, 225, 837, 777, 797, 788, 787, 775, 761, 798,
	799, 746, 741, 778, 779, 765, 781, 782, 783, 713,
	742, 743, 744, 745, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 784,
	756, 602, 471, 472, 582, 0, 706, 0, 0, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 709, 0, 0, 0, 301, 3691, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 747, 522, 473,
	392, 345, 540, 539, 0, 0, 809, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 737, 786, 785, 724, 734, 0, 0, 274, 200,
	468, 587, 470, 469, 725, 0, 726, 730, 733, 729,
	727, 728, 0, 801, 0, 0, 0, 0, 0, 0,
	693, 705, 0, 710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 703, 0,
	0, 0, 0, 757, 0, 704, 0, 0, 752, 731,
	735, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 732, 755, 759, 295, 823, 753, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 824, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 750, 0, 584, 0, 424, 0, 0,
	807, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 754, 0, 382, 363, 820, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 805, 359,
	550, 583, 475, 0, 819, 800, 802, 803, 806, 810,
	811, 812, 813, 814, 816, 818, 822, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 821, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 758, 525,
	526, 349, 350, 351, 352, 808, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 830, 804, 829, 831, 832, 828,
	833, 834, 815, 714, 0, 762, 826, 825, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	793, 769, 770, 771, 711, 772, 766, 767, 712, 768,
	794, 760, 790, 791, 739, 763, 773, 789, 774, 792,
	795, 796, 835, 836, 780, 764, 225, 837, 777, 797,
	788, 787, 775, 761, 798, 799, 746, 741, 778, 779,
	765, 781, 782, 783, 713, 742, 743, 744, 745, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 784, 756, 602, 471, 472, 582,
	0, 706, 0, 0, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 747, 522, 473, 392, 345, 540, 539, 0,
	0, 809, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 737, 786, 785, 724,
	734, 0, 0, 274, 200, 468, 587, 470, 469, 725,
	0, 726, 730, 733, 729, 727, 728, 0, 801, 0,
	0, 0, 0, 0, 0, 693, 705, 0, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 703, 0, 0, 0, 0, 757, 0,
	704, 0, 0, 752, 731, 735, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 732, 755, 759, 295,
	823, 753, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 824, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 750, 0,
	584, 0, 424, 0, 0, 807, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 754, 0, 382, 363,
	820, 3587, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 805, 359, 550, 583, 475, 0, 819,
	800, 802, 803, 806, 810, 811, 812, 813, 814, 816,
	818, 822, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 821, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 758, 525, 526, 349, 350, 351, 352,
	808, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 830,
	804, 829, 831, 832, 828, 833, 834, 815, 714, 0,
	762, 826, 825, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 793, 769, 770, 771, 711,
	772, 766, 767, 712, 768, 794, 760, 790, 791, 739,
	763, 773, 789, 774, 792, 795, 796, 835, 836, 780,
	764, 225, 837, 777, 797, 788, 787, 775, 761, 798,
	799, 746, 741, 778, 779, 765, 781, 782, 783, 713,
	742, 743, 744, 745, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 784,
	756, 602, 471, 472, 582, 0, 706, 0, 0, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 709, 0, 0, 0, 301, 1710, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 747, 522, 473,
	392, 345, 540, 539, 0, 0, 809, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 737, 786, 785, 724, 734, 0, 0, 274, 200,
	468, 587, 470, 469, 725, 0, 726, 730, 733, 729,
	727, 728, 0, 801, 0, 0, 0, 0, 0, 0,
	693, 705, 0, 710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 703, 0,
	0, 0, 0, 757, 0, 704, 0, 0, 752, 731,
	735, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 732, 755, 759, 295, 823, 753, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 824, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 750, 0, 584, 0, 424, 0, 0,
	807, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 754, 0, 382, 363, 820, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 805, 359,
	550, 583, 475, 0, 819, 800, 802, 803, 806, 810,
	811, 812, 813, 814, 816, 818, 822, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 821, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 758, 525,
	526, 349, 350, 351, 352, 808, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 830, 804, 829, 831, 832, 828,
	833, 834, 815, 714, 0, 762, 826, 825, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	793, 769, 770, 771, 711, 772, 766, 767, 712, 768,
	794, 760, 790, 791, 739, 763, 773, 789, 774, 792,
	795, 796, 835, 836, 780, 764, 225, 837, 777, 797,
	788, 787, 775, 761, 798, 799, 746, 741, 778, 779,
	765, 781, 782, 783, 713, 742, 743, 744, 745, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 784, 756, 602, 471, 472, 582,
	0, 706, 0, 0, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 747, 522, 473, 392, 345, 540, 539, 0,
	0, 809, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 737, 786, 785, 724,
	734, 0, 0, 274, 200, 468, 587, 470, 469, 725,
	0, 726, 730, 733, 729, 727, 728, 0, 801, 0,
	0, 0, 0, 0, 0, 693, 705, 0, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 703, 1448, 0, 0, 0, 757, 0,
	704, 0, 0, 752, 731, 735, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 732, 755, 759, 295,
	823, 753, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 824, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 750, 0,
	584, 0, 424, 0, 0, 807, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 754, 0, 382, 363,
	820, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 805, 359, 550, 583, 475, 0, 819,
	800, 802, 803, 806, 810, 811, 812, 813, 814, 816,
	818, 822, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 821, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 758, 525, 526, 349, 350, 351, 352,
	808, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 830,
	804, 829, 831, 832, 828, 833, 834, 815, 714, 0,
	762, 826, 825, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 793, 769, 770, 771, 711,
	772, 766, 767, 712, 768, 794, 760, 790, 791, 739,
	763, 773, 789, 774, 792, 795, 796, 835, 836, 780,
	764, 225, 837, 777, 797, 788, 787, 775, 761, 798,
	799, 746, 741, 778, 779, 765, 781, 782, 783, 713,
	742, 743, 744, 745, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 784,
	0, 602, 471, 472, 582, 756, 706, 0, 2067, 0,
	0, 0, 0, 0, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 747, 522, 473, 392, 345, 540, 539, 0,
	0, 809, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 737, 786, 785, 724,
	734, 0, 0, 274, 200, 468, 587, 470, 469, 725,
	0, 726, 730, 733, 729, 727, 728, 0, 801, 0,
	0, 0, 0, 0, 0, 693, 705, 0, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 703, 0, 0, 0, 0, 757, 0,
	704, 0, 0, 752, 731, 735, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 732, 755, 759, 295,
	823, 753, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 824, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 750, 0,
	584, 0, 424, 0, 0, 807, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 754, 0, 382, 363,
	820, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 805, 359, 550, 583, 475, 0, 819,
	800, 802, 803, 806, 810, 811, 812, 813, 814, 816,
	818, 822, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 821, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 758, 525, 526, 349, 350, 351, 352,
	808, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 830,
	804, 829, 831, 832, 828, 833, 834, 815, 714, 0,
	762, 826, 825, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 793, 769, 770, 771, 711,
	772, 766, 767, 712, 768, 794, 760, 790, 791, 739,
	763, 773, 789, 774, 792, 795, 796, 835, 836, 780,
	764, 225, 837, 777, 797, 788, 787, 775, 761, 798,
	799, 746, 741, 778, 779, 765, 781, 782, 783, 713,
	742, 743, 744, 745, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 784,
	756, 602, 471, 472, 582, 0, 706, 0, 0, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 709, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 747, 522, 473,
	392, 345, 540, 539, 0, 0, 809, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 737, 786, 785, 724, 734, 0, 0, 274, 200,
	468, 587, 470, 469, 725, 0, 726, 730, 733, 729,
	727, 728, 0, 801, 0, 0, 0, 0, 0, 0,
	693, 705, 0, 710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 703, 1703,
	0, 0, 0, 757, 0, 704, 0, 0, 752, 731,
	735, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 732, 755, 759, 295, 823, 753, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 824, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 750, 0, 584, 0, 424, 0, 0,
	807, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 754, 0, 382, 363, 820, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 805, 359,
	550, 583, 475, 0, 819, 800, 802, 803, 806, 810,
	811, 812, 813, 814, 816, 818, 822, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 821, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 758, 525,
	526, 349, 350, 351, 352, 808, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 830, 804, 829, 831, 832, 828,
	833, 834, 815, 714, 0, 762, 826, 825, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	793, 769, 770, 771, 711, 772, 766, 767, 712, 768,
	794, 760, 790, 791, 739, 763, 773, 789, 774, 792,
	795, 796, 835, 836, 780, 764, 225, 837, 777, 797,
	788, 787, 775, 761, 798, 799, 746, 741, 778, 779,
	765, 781, 782, 783, 713, 742, 743, 744, 745, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 784, 756, 602, 471, 472, 582,
	0, 706, 0, 0, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 747, 522, 473, 392, 345, 540, 539, 0,
	0, 809, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 737, 786, 785, 724,
	734, 0, 0, 274, 200, 468, 587, 470, 469, 725,
	0, 726, 730, 733, 729, 727, 728, 0, 801, 0,
	0, 0, 0, 0, 0, 693, 705, 0, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 703, 0, 0, 0, 0, 757, 0,
	704, 0, 0, 752, 731, 735, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 732, 755, 759, 295,
	823, 753, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 824, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 750, 0,
	584, 0, 424, 0, 0, 807, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 754, 0, 382, 363,
	820, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 805, 359, 550, 583, 475, 0, 819,
	800, 802, 803, 806, 810, 811, 812, 813, 814, 816,
	818, 822, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 821, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 758, 525, 526, 349, 350, 351, 352,
	808, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 830,
	804, 829, 831, 832, 828, 833, 834, 815, 714, 0,
	762, 826, 825, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 793, 769, 770, 771, 711,
	772, 766, 767, 712, 768, 794, 760, 790, 791, 739,
	763, 773, 789, 774, 792, 795, 796, 835, 836, 780,
	764, 225, 837, 777, 797, 788, 787, 775, 761, 798,
	799, 746, 741, 778, 779, 765, 781, 782, 783, 713,
	742, 743, 744, 745, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 784,
	756, 602, 471, 472, 582, 0, 706, 0, 0, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 709, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 747, 522, 473,
	392, 345, 540, 539, 0, 0, 809, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 737, 786, 785, 724, 734, 0, 0, 274, 200,
	468, 587, 470, 469, 2496, 0, 2497, 730, 733, 729,
	727, 728, 0, 801, 0, 0, 0, 0, 0, 0,
	693, 705, 0, 710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 703, 0,
	0, 0, 0, 757, 0, 704, 0, 0, 752, 731,
	735, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 732, 755, 759, 295, 823, 753, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 824, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 750, 0, 584, 0, 424, 0, 0,
	807, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 754, 0, 382, 363, 820, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 805, 359,
	550, 583, 475, 0, 819, 800, 802, 803, 806, 810,
	811, 812, 813, 814, 816, 818, 822, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 821, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 758, 525,
	526, 349, 350, 351, 352, 808, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 830, 804, 829, 831, 832, 828,
	833, 834, 815, 714, 0, 762, 826, 825, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	793, 769, 770, 771, 711, 772, 766, 767, 712, 768,
	794, 760, 790, 791, 739, 763, 773, 789, 774, 792,
	795, 796, 835, 836, 780, 764, 225, 837, 777, 797,
	788, 787, 775, 761, 798, 799, 746, 741, 778, 779,
	765, 781, 782, 783, 713, 742, 743, 744, 745, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 784, 756, 602, 471, 472, 582,
	0, 706, 0, 0, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 1581, 0, 0, 0, 709, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 747, 522, 473, 392, 345, 540, 539, 0,
	0, 809, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 737, 786, 785, 724,
	734, 0, 0, 274, 200, 468, 587, 470, 469, 725,
	0, 726, 730, 733, 729, 727, 728, 0, 801, 0,
	0, 0, 0, 0, 0, 0, 705, 0, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 703, 0, 0, 0, 0, 757, 0,
	704, 0, 0, 752, 731, 735, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 732, 755, 759, 295,
	823, 753, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 824, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 750, 0,
	584, 0, 424, 0, 0, 807, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 754, 0, 382, 363,
	820, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 1582, 1583, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 805, 359, 550, 583, 475, 0, 819,
	800, 802, 803, 806, 810, 811, 812, 813, 814, 816,
	818, 822, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 821, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 758, 525, 526, 349, 350, 351, 352,
	808, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 830,
	804, 829, 831, 832, 828, 833, 834, 815, 714, 0,
	762, 826, 825, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 793, 769, 770, 771, 711,
	772, 766, 767, 712, 768, 794, 760, 790, 791, 739,
	763, 773, 789, 774, 792, 795, 796, 835, 836, 780,
	764, 225, 837, 777, 797, 788, 787, 775, 761, 798,
	799, 746, 741, 778, 779, 765, 781, 782, 783, 713,
	742, 743, 744, 745, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 784,
	756, 602, 471, 472, 582, 0, 706, 0, 0, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 709, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 747, 522, 473,
	392, 345, 540, 539, 0, 0, 809, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 737, 786, 785, 724, 734, 0, 0, 274, 200,
	468, 587, 470, 469, 725, 0, 726, 730, 733, 729,
	727, 728, 0, 801, 0, 0, 0, 0, 0, 0,
	0, 705, 0, 710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 702, 703, 0,
	0, 0, 0, 757, 0, 704, 0, 0, 752, 731,
	735, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 732, 755, 759, 295, 823, 753, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 824, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 750, 0, 584, 0, 424, 0, 0,
	807, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 754, 0, 382, 363, 820, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 805, 359,
	550, 583, 475, 0, 819, 800, 802, 803, 806, 810,
	811, 812, 813, 814, 816, 818, 822, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 821, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 758, 525,
	526, 349, 350, 351, 352, 808, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 830, 804, 829, 831, 832, 828,
	833, 834, 815, 714, 0, 762, 826, 825, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	793, 769, 770, 771, 711, 772, 766, 767, 712, 768,
	794, 760, 790, 791, 739, 763, 773, 789, 774, 792,
	795, 796, 835, 836, 780, 764, 225, 837, 777, 797,
	788, 787, 775, 761, 798, 799, 746, 741, 778, 779,
	765, 781, 782, 783, 713, 742, 743, 744, 745, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 784, 756, 602, 471, 472, 582,
	0, 706, 0, 0, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 747, 522, 473, 392, 345, 540, 539, 0,
	0, 809, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 737, 786, 785, 724,
	734, 0, 0, 274, 200, 468, 587, 470, 469, 725,
	0, 726, 730, 733, 729, 727, 728, 0, 801, 0,
	0, 0, 0, 0, 0, 693, 705, 0, 710, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 702, 703, 0, 0, 0, 0, 757, 0,
	704, 0, 0, 752, 731, 735, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 732, 755, 759, 295,
	823, 753, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 824, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 750, 0,
	584, 0, 424, 0, 0, 807, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 754, 0, 382, 363,
	820, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 805, 359, 550, 583, 475, 0, 819,
	800, 802, 803, 806, 810, 811, 812, 813, 814, 816,
	818, 822, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 821, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 758, 525, 526, 349, 350, 351, 352,
	808, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 830,
	804, 829, 831, 832, 828, 833, 834, 815, 714, 0,
	762, 826, 825, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 793, 769, 770, 771, 711,
	772, 766, 767, 712, 768, 794, 760, 790, 791, 739,
	763, 773, 789, 774, 792, 795, 796, 835, 836, 780,
	764, 225, 837, 777, 797, 788, 787, 775, 761, 798,
	799, 746, 741, 778, 779, 765, 781, 782, 783, 713,
	742, 743, 744, 745, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 784,
	0, 602, 471, 472, 582, 0, 706, 177, 52, 166,
	140, 0, 0, 0, 0, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 167, 0, 0, 0, 0,
	0, 0, 159, 0, 301, 0, 168, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 117, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 171, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 139, 165, 175, 0, 103, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 192, 0,
	0, 0, 396, 0, 0, 328, 164, 158, 157, 440,
	0, 382, 363, 204, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 560, 561, 562, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 419, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 195, 532, 535, 465, 205, 0, 529, 544, 502,
	543, 206, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 115, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 203, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 374, 269, 407, 385, 0,
	258, 481, 332, 141, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 207, 39, 193, 196,
	198, 197, 0, 50, 530, 542, 576, 5, 585, 586,
	588, 590, 589, 120, 208, 471, 472, 582, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 117, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 2196, 2199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 2200, 424, 0, 0, 0,
	2195, 0, 2194, 396, 2192, 2197, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 2198,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 141, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1223, 0,
	0, 199, 0, 0, 724, 734, 0, 0, 274, 200,
	468, 587, 470, 469, 725, 0, 726, 730, 733, 729,
	727, 728, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 732, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	177, 52, 166, 140, 0, 0, 0, 0, 0, 0,
	361, 625, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 631, 0, 0, 0, 0, 630,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 626, 628, 279, 447,
	375, 639, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 141, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 2196, 2199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 2200, 424,
	0, 0, 0, 2195, 0, 2194, 396, 2192, 2197, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 2198, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1029, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 2345, 2348, 2349, 2350, 2351, 2352, 2353, 0, 2358,
	2354, 2355, 2356, 2357, 0, 2340, 2341, 2342, 2343, 1027,
	2324, 2346, 0, 2325, 357, 2326, 2327, 2328, 2329, 2330,
	2331, 2332, 2333, 2334, 2337, 2338, 2335, 2336, 2344, 369,
	335, 370, 318, 347, 346, 348, 1054, 1056, 1058, 1060,
	1063, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 2339, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 2347, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 2217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	2216, 424, 0, 0, 0, 2222, 2219, 2221, 396, 0,
	2220, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 2214, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	2217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 2216, 424, 0, 0, 0, 2222, 2219, 2221, 396,
	0, 2220, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 1942, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	1943, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 1154, 1155, 1156, 1153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 177, 602, 471, 472, 582, 0, 0, 0, 0,
	0, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 117,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 1988, 0, 199, 0, 0, 0, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 141, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 177, 602, 471,
	472, 582, 0, 0, 0, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 117, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 1977, 0, 199,
	0, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 141, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 959, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 966, 967, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 954, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 944, 422, 268, 943, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 957, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 958, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 961, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 968, 955, 964,
	956, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	965, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 177, 602, 471, 472, 582, 0,
	0, 0, 0, 0, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 117, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1875, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	141, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 966, 967,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 944, 422, 268, 943, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 968, 1894, 964, 1895, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 965, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 2698, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 2701, 0, 0, 2700, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 1414, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 1412, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1410, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 1408, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 1412, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1410, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3646,
	0, 199, 786, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 1412, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 1412, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3273, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 2288, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 2290, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 2309, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 1412, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 786, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3625, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 3415, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 3538,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3269, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3430,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 3358, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 2914, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1875, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3028, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	2883, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2795, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 1412, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 2290, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 2623, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 2365, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 2155, 602,
	471, 472, 582, 0, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 1862, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 1412, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 1768, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 1442, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 623, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 897, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 613, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	1392, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 1390, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 688, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 647, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 648, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 1043, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 1850, 0, 0, 0, 0,
	1811, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1852, 1820, 0, 0, 0, 0, 0, 0, 0, 0,
	1853, 1854, 0, 0, 0, 0, 0, 1850, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3280, 0, 0, 0,
	0, 1827, 1852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1029, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 0, 0, 1051, 1055, 1057, 1059,
	1061, 1062, 1064, 1827, 1069, 1065, 1066, 1067, 1068, 0,
	1046, 1047, 1048, 1049, 1027, 1028, 1052, 0, 1030, 1843,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042,
	1044, 1040, 1041, 1050, 0, 0, 0, 0, 0, 0,
	0, 1054, 1056, 1058, 1060, 1063, 1850, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1843, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 1852, 0, 0, 0, 0, 0, 0, 0, 0,
	1810, 2589, 1809, 0, 2588, 0, 0, 0, 1850, 1831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3436, 0, 0, 0, 0, 0, 0, 0,
	1825, 1859, 1827, 1852, 1826, 1828, 1830, 0, 1832, 1833,
	1834, 1838, 1839, 1840, 1842, 1845, 1846, 1847, 0, 0,
	0, 1831, 0, 0, 0, 1835, 1844, 1836, 0, 0,
	0, 0, 1837, 0, 0, 0, 0, 1814, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1825, 1859, 1827, 0, 1826, 1828, 1830, 1851,
	1832, 1833, 1834, 1838, 1839, 1840, 1842, 1845, 1846, 1847,
	1843, 0, 0, 0, 0, 0, 0, 1835, 1844, 1836,
	0, 0, 0, 0, 0, 1807, 1808, 2446, 2447, 0,
	0, 0, 0, 0, 0, 0, 0, 1850, 0, 0,
	0, 0, 0, 1848, 0, 0, 0, 0, 0, 0,
	0, 1851, 0, 0, 0, 0, 0, 0, 3407, 0,
	1824, 0, 1843, 0, 0, 0, 0, 1823, 0, 0,
	0, 0, 1852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1831, 1841, 0, 0, 0, 1848, 0, 0, 0, 0,
	1829, 1837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1824, 1856, 1855, 0, 0, 0, 0, 1823,
	0, 1825, 1859, 1827, 0, 1826, 1828, 1830, 0, 1832,
	1833, 1834, 1838, 1839, 1840, 1842, 1845, 1846, 1847, 0,
	0, 0, 1831, 1841, 0, 0, 1835, 1844, 1836, 0,
	0, 0, 1829, 1837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1816, 0, 0, 0,
	0, 1053, 0, 1825, 1859, 0, 0, 1826, 1828, 1830,
	1851, 1832, 1833, 1834, 1838, 1839, 1840, 1842, 1845, 1846,
	1847, 1843, 0, 0, 667, 666, 673, 663, 1835, 1844,
	1836, 0, 0, 0, 0, 0, 670, 671, 1858, 672,
	676, 1857, 0, 658, 0, 0, 0, 0, 667, 666,
	673, 663, 0, 681, 1848, 0, 0, 0, 0, 0,
	670, 671, 1851, 672, 676, 0, 0, 658, 0, 0,
	0, 1824, 0, 0, 0, 0, 0, 681, 1823, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 685, 0, 0, 687,
	0, 1831, 1841, 0, 686, 0, 1848, 0, 0, 0,
	0, 1829, 1837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1824, 0, 0, 0, 0, 0, 0,
	1823, 0, 1825, 1859, 0, 0, 1826, 1828, 1830, 0,
	1832, 1833, 1834, 1838, 1839, 1840, 1842, 1845, 1846, 1847,
	0, 0, 0, 0, 1841, 0, 0, 1835, 1844, 1836,
	0, 0, 0, 1829, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1848, 0, 0, 0, 0,
	0, 659, 661, 660, 0, 0, 0, 0, 0, 0,
	0, 665, 1824, 0, 0, 0, 0, 0, 0, 1823,
	0, 0, 0, 669, 0, 659, 661, 660, 0, 0,
	684, 0, 0, 0, 0, 665, 0, 662, 0, 0,
	0, 0, 0, 1841, 0, 0, 0, 669, 0, 0,
	0, 0, 1829, 0, 684, 0, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 664, 668, 674, 0,
	675, 677, 0, 0, 678, 679, 680, 0, 0, 682,
	683, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 668, 674, 0, 675, 677, 0, 0, 678, 679,
	680, 0, 0, 682, 683,
}

var yyPact = [...]int{
	282, -1000, -1000, -1000, -313, 13214, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42098,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42098, -307, 41497, 41497, -1000, -1000, 2601, -1000, 40295, 15037,
	42098, 398, 397, 42098, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 781, -1000, 44502, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 698, 4336, 43901, 10181, -229, -1000, 1165,
	-62, 2332, 910, 928, 989, 989, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3736,
	799, 40896, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3659, 446, 799, 19855, 67, 62,
	1165, 390, -119, -115, -121, 3914, -1000, 1178, 3642, 194,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10181, 10181, 13214, -347, 13214, 10181, 42098, 42098, -1000,
	-1000, -1000, -1000, -307, 40295, 698, 4336, 10181, 2332, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -115,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -119, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -121, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 62,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3731, -1000, 1450, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2851,
	1449, 2330, 594, 42098, -1000, 137, 594, -1000, -1000, -1000,
	1165, 3225, -1000, 42098, 42098, 134, 1742, -1000, 407, 375,
	372, 267, 1445, -1000, -1000, -1000, -1000, -1000, -1000, 522,
	3178, -1000, 42098, 42098, 2869, 42098, -1000, 2150, 556, 45611,
	3034, 1268, 798, 2881, -1000, -1000, 2847, -1000, 275, 197,
	301, 529, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 246,
	-1000, 3101, -1000, -1000, 263, -1000, -1000, 249, -1000, -1000,
	-1000, 53, -1000, -1000, -1000, -1000, -1000, -1000, -48, -1000,
	-1000, 990, 1985, 10181, 1906, -1000, 2625, -1000, -1000, -1000,
	-1000, 5941, 11996, 11996, 11996, 11996, 42098, -1000, -1000, 2697,
	10181, 2843, 2842, 2835, 2834, -1000, -1000, -1000, -1000, -1000,
	-1000, 1441, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1876, -1000, -1000, -1000, 12601, -1000, 2828, 2827, 2825,
	2824, 2818, 2817, 2815, 2812, 2807, 2800, 2799, 2798, 2797,
	2796, 2545, 14426, 2795, 2323, 2322, 2793, 2789, 2788, 2321,
	2545, 2545, 2787, 2786, 2785, 2783, 2782, 2781, 2774, 2771,
	2767, 2766, 2765, 2757, 2756, 2752, 2737, 2735, 2734, 2728,
	2727, 2720, 2719, 2718, 2717, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1344, -1000,
	2716, 3186, 2635, -1000, 3083, 3081, 3078, 3076, -276, 2715,
	2121, -1000, -1000, 99, -1000, -103, -1000, -1000, 954, -1000,
	887, -1000, 648, 42098, 42098, 178, 721, 648, 648, 648,
	648, 648, 753, 648, 3119, 779, 778, 775, 774, 648,
	-72, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1730, 1721,
	2933, 861, -1000, -1000, -1000, -1000, 1300, 42098, -1000, 2646,
	1609, 1609, 3167, 3109, 575, 569, 563, 1609, 456, -1000,
	1649, 1649, 1649, 1649, 1609, 462, 572, 3123, 3123, 64,
	1649, 9, 1609, 1609, 9, 1609, 1609, 1706, 254, -284,
	-1000, -1000, -1000, -1000, 1649, 1649, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3096, 3095, 698, 698, 42098, 181, 42098,
	698, 698, 698, 710, 25, 43300, 42699, 2150, 553, 551,
	1326, 1780, -1000, 1513, 42098, 42098, 1513, 1513, 22865, 22264,
	-1000, 42098, -1000, 3186, 2635, 2541, 1263, 2539, 2635, -127,
	-128, -136, 698, 698, 698, 698, 698, 232, 698, 698,
	698, 698, 698, 42098, 42098, 39694, 698, 698, 698, 8361,
	8361, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13214, 1801, 1981, 191, -31, -299, 236, -1000, -1000, 42098,
	3008, 229, -1000, -1000, -1000, 2559, -1000, 2638, 2638, 2638,
	2638, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2638, 2638, 2645, 2709, -1000, -1000, 2637, 2637, 2637, 2559,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2641, 2641, 2644, 2644, 2641,
	42098, 10181, 42098, 3020, 395, 2708, -1000, 42098, 10181, 379,
	3186, 3018, 3123, 3160, -1000, -1000, 1435, 2118, 2314, -1000,
	267, -1000, 385, 267, 1639, -1000, 930, -1000, -1000, -1000,
	-1000, -1000, 42098, -48, 365, -1000, -1000, 2319, 2707, -1000,
	558, 1087, 1201, -1000, 266, 45635, 34284, 2150, 34284, 42098,
	-1000, -1000, -1000, -1000, -1000, -1000, 41, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	242, -1000, 10181, 10181, 10181, 10181, 10181, -1000, 605, 11391,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11996, 11996, 11996,
	11996, 11996, 11996, 11996, 11996, 11996, 11996, 11996, 11996, 2692,
	1790, 11996, 11996, 11996, 11996, 1263, 2862, 1312, 279, -1000,
	-1000, -1000, -1000, 10181, -1000, 1763, 1985, 10181, 10181, 10181,
	10181, 42098, -1000, -1000, 4111, 10181, 10181, 3350, 10181, 3066,
	10181, 10181, 10181, 2532, 4718, 42098, 10181, -1000, 2520, 2502,
	-1000, -1000, 1912, 10181, -1000, -1000, 10181, -1000, -1000, 10181,
	11996, 10181, -1000, -1000, -1000, 1057, 3066, 3066, 3066, 1756,
	10181, 10181, 3066, 3066, 3066, 1597, 3066, 3066, 3066, 3066,
	3066, 3066, 3066, 3066, 2501, 2496, 2494, 9576, 3123, -229,
	-1000, 7756, 3018, 3123, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -278, 2705, 42098, 2309, 2307, -319,
	-4, 907, 893, 896, -1000, 42098, 1786, 3062, -1000, 2700,
	42098, 648, 648, 648, -1000, 42098, 34284, 42098, 42098, 2150,
	42098, 42098, 42098, 648, 648, 648, 648, 42098, -1000, 2987,
	34284, 2938, 710, -1000, 42098, 1300, 3060, 42098, 3167, 11996,
	11996, -1000, -1000, 10181, 39093, 1649, 1609, 1609, -1000, -1000,
	42098, -1000, -1000, -1000, 1649, 42098, 1649, 1649, 3167, 1649,
	-1000, -1000, -1000, 1609, 1609, -1000, -1000, 10181, -1000, -1000,
	1649, 1649, -1000, -1000, 3167, 42098, 38, 3167, 3167, 50,
	-1000, -1000, -1000, 1609, 42098, 42098, 648, 42098, -1000, 42098,
	42098, -1000, -1000, 42098, 42098, 4058, 42098, 38492, 3094, -1000,
	34284, 42098, 42098, 31880, -1000, 1236, -1000, -28, -1000, -11,
	25, 1513, 25, 1513, -1000, 557, 576, 21062, 500, 34284,
	5328, -1000, -1000, 1513, 1513, 5328, 5328, 1470, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1298, -1000, 247, 3123, -1000,
	-1000, -1000, -1000, -1000, 2095, 2090, 2087, 42098, 42098, 34284,
	2150, 42098, 698, 42098, 42098, 42098, 42098, 42098, -1000, 2698,
	1434, -1000, 3032, 42098, 42098, 42098, 1173, -1000, -1000, 18042,
	1433, 1173, -1000, 1828, -1000, 10181, 13214, -254, 10181, 13214,
	13214, 10181, 13214, -1000, 10181, 224, -1000, -1000, -1000, -1000,
	2086, -1000, 2083, -1000, -1000, -1000, -1000, -1000, 2305, 2305,
	-1000, 2082, -1000, -1000, -1000, -1000, 2081, -1000, -1000, 2079,
	-1000, -1000, -1000, 2493, 990, -1000, 2303, 2880, -231, -1000,
	19254, 42098, 42098, -320, 162, -1000, -231, -1000, 18648, 42098,
	3123, -1000, -235, 3018, 10181, 42098, -1000, 3108, -1000, -1000,
	267, -1000, 416, 353, -1000, -1000, -1000, -1000, -1000, -1000,
	1431, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1287, -1000, 42098, -1000, -1000, 266, 34284, 36087, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 221, -1000, -1000, 172, -1000,
	750, 198, 1636, -1000, -1000, 184, 201, 153, 792, 1985,
	-1000, 1785, 1785, 1794, -1000, 619, -1000, -1000, -1000, -1000,
	2697, -1000, -1000, -1000, 2239, 1633, -1000, 1687, 1687, 1474,
	1474, 1474, 1474, 1474, 1620, 1620, -1000, -1000, -1000, 5941,
	2692, 11996, 11996, 11996, 11996, 620, 620, 3669, 3637, -1000,
	10181, 158, 1809, -1000, 10181, 2508, 1295, 2364, 1562, 1430,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2492, 2491, 2304, 3176, 2488, 10181, -1000, -1000, 1631, 1629,
	1599, -1000, 1992, 8971, -1000, -1000, -1000, 2485, 1427, 2479,
	-1000, -1000, -1000, 2476, 1571, 1059, 2475, 1680, 2472, 1285,
	10181, 10181, 10181, 10181, 2471, 1564, 1533, 10181, 10181, 10181,
	10181, 2470, 10181, 10181, 10181, 10181, 10181, 10181, 10181, 10181,
	100, 100, 100, 1283, 1270, -1000, -1000, 1514, -1000, 1985,
	-1000, -1000, 3018, -1000, 2668, 2077, 1262, -1000, -1000, -304,
	2256, -1000, -1000, 870, 879, 932, 3107, 3026, 42098, 971,
	2667, 42098, 42098, 42098, 214, -1000, 1296, -1000, 198, -61,
	396, 1011, 2868, 3175, -157, 42098, 42098, 42098, 42098, 3059,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37891, -1000,
	2664, 1512, -1000, -1000, -1000, -1000, 1985, 2866, 42098, 42098,
	3167, 3167, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1649,
	3167, 3167, 1122, 1609, 1649, -1000, -1000, 1649, -1000, -1000,
	1649, -1000, -1000, 1424, -1000, 42098, -1000, -1000, -1000, 3057,
	2646, 1238, -1000, -1000, -1000, 3158, 958, 629, 629, 909,
	428, 3154, 16840, -1000, 1547, 914, 749, 2977, 258, -1000,
	1547, -176, 607, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
	516, 513, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
	1547, 1547, 1547, 918, 1547, 1547, 1547, 1547, 1547, -1000,
	1547, 2658, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 554,
	213, 3088, 307, 305, 1296, 3086, 316, 2916, 1109, -1000,
	-1000, -1000, -1000, 25269, 25269, 20461, 25269, -1000, 199, 25,
	18, -1000, -1000, 1236, 5328, 1236, 5328, -1000, -1000, 740,
	-1000, -1000, 1011, -1000, 42098, 42098, -1000, -1000, 2656, 1717,
	-1000, -1000, 14426, -1000, 5328, 5328, -1000, -1000, 25870, 42098,
	-1000, -51, -1000, -40, 3018, -1000, -1000, -1000, 1217, -1000,
	-1000, 1229, 1011, 2879, 42098, 1217, 1217, 1217, -1000, -1000,
	16239, 42098, 42098, -1000, -1000, -1000, 3167, 8361, -1000, 31880,
	-1000, -1000, 37289, -1000, 36688, 3167, 1759, -1000, 13214, 1955,
	182, -1000, 227, -305, 180, 1872, 179, 1985, -1000, -1000,
	2465, 2455, 1511, -1000, 1504, 2454, 1479, 1478, -1000, 2,
	-1000, 3011, 1021, -1000, 2655, -1000, 1477, 2928, -1000, 1216,
	-1000, 1716, 1476, -1000, 10181, -1000, 1021, 1454, 2921, 1216,
	3018, 2302, -1000, 1208, -1000, 2002, 1396, 132, -1000, -1000,
	-1000, 42098, 2319, 1451, 36087, 1120, -1000, 738, 1390, 1389,
	-1000, 34284, 251, 34284, -1000, 34284, -1000, -1000, 366, -1000,
	42098, 3013, -1000, -1000, -1000, 2256, 1715, -326, 42098, -1000,
	-1000, -1000, -1000, -1000, 1447, -1000, 620, 620, 3669, 2683,
	-1000, 11996, -1000, 11996, 2831, -1000, 1758, -1000, 10181, 1932,
	45064, 10181, 45064, 1527, 24067, 42098, -1000, -1000, 10181, 10181,
	-1000, 2809, -1000, -1000, -1000, -1000, 10181, 10181, 2042, -1000,
	42098, -1000, -1000, -1000, -1000, 24067, -1000, 11996, -1000, 10181,
	1150, 1150, 2791, 1428, 100, 100, 100, 2775, 2749, 2732,
	1386, 100, 2673, 2665, 2642, 2632, 2587, 2522, 2453, 2439,
	-1000, 2654, -1000, -1000, 1889, 10786, 7756, -1000, -1000, 270,
	1194, 2074, 2301, 128, -1000, 1686, -1000, -1000, -1000, 869,
	357, -1000, 235, 2445, 1188, -1000, -1000, 42098, -1000, -1000,
	-1000, 16239, 2646, 2653, 2646, 69, 1547, 568, 34284, 538,
	-1000, 42098, 1879, 1684, 2878, 650, 3007, 42098, 2652, 381,
	2650, 2649, 3054, 369, 4339, 42098, 1139, -1000, 1384, 3642,
	-1000, 42098, -1000, 2150, -1000, 1609, -1000, -1000, 3167, -1000,
	-1000, 10181, 10181, 3167, 1609, 1609, 1649, 42098, -1000, 369,
	4339, 3053, 45099, 465, 2543, -1000, 42098, -1000, -1000, -1000,
	702, -1000, 868, 648, 42098, 1841, 868, 1838, 2648, -1000,
	-1000, 42098, 42098, 42098, 42098, -1000, -1000, 42098, -1000, 42098,
	42098, 42098, 42098, 42098, 35486, -1000, 42098, 42098, -1000, 42098,
	1833, 42098, 1830, 3015, -1000, 1547, 1547, 838, -1000, -1000,
	550, -1000, 35486, 2072, 2071, 2066, 2065, 2288, 2287, 2283,
	1547, 1547, 2060, 2277, 34885, 2276, 1046, 2049, 2043, 2040,
	2109, 2274, 793, -1000, 2272, 2108, 2078, 1974, 42098, 2647,
	2211, -1000, -1000, 69, 1547, 303, 42098, 1675, 568, 386,
	1961, 21663, 42098, 31880, 31880, 31880, 31880, -1000, 2913, 2912,
	-1000, 2903, 2896, 2897, 42098, 31880, 2646, -1000, 34885, -1000,
	-1000, -1000, 1263, 1379, 2939, 863, 10181, -1000, -1000, -32,
	-24, -1000, -1000, -1000, 34284, 2264, 500, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3106, 42098, 42098, 637, 2444, 1186,
	-1000, -1000, -1000, 4339, 2638, 2638, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2638, 2638, 2645, -1000, -1000,
	2637, 2637, 2637, 2559, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2641, 2641, 2644, 2644, 2641, -1000,
	-1000, 3165, -1000, 1171, -1000, -1000, 1378, -1000, 3165, 1765,
	-314, 13214, 1603, 1506, -1000, 10181, 13214, 10181, -260, 287,
	-263, -1000, -1000, -1000, 2261, -1000, -1000, -1000, 2039, -1000,
	2031, 124, 130, 1826, -231, 7756, 389, 42098, -231, 42098,
	7756, -1000, 42098, 154, 382, -231, 3106, 2, 10181, 2973,
	-1000, -1000, 42098, 2019, -1000, -1000, -1000, 3173, 34284, 2150,
	1483, 33683, -1000, 257, -1000, 220, 533, 2258, -1000, 772,
	126, 2257, 2256, -1000, -1000, -1000, -1000, 11996, -1000, -1000,
	-1000, -1000, 1985, 10181, 2443, -1000, 911, 911, 2246, 2431,
	2430, -1000, 2638, 2638, -1000, 2559, 2637, 2559, 911, 911,
	2428, -1000, 2023, 2421, -1000, 2360, 2342, 10181, -1000, 2427,
	3594, 1111, -81, -204, 100, 100, -1000, -1000, -1000, -1000,
	100, 100, 100, 100, -1000, 100, 100, 100, 100, 100,
	100, 100, 100, 600, -117, -289, -120, -290, -1000, 2426,
	1137, -1000, -1000, -1000, -1000, -1000, 3350, 1134, -1000, -1000,
	2256, 2254, -1000, -1000, -1000, 42098, 2253, 2252, 971, 4339,
	2420, 3051, 15638, 3046, 2094, -1000, -1000, -1000, 33082, 515,
	-1000, -1000, -1000, 615, 248, 2011, 518, -1000, 42098, 316,
	2952, 1667, 2251, 42098, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3007, -1000, 900, 361, 30678, 13825, -1000, 391, 15638,
	15638, 391, 350, 1659, -1000, 594, 1038, 133, 31880, 42098,
	-1000, 31279, 2419, -1000, 1011, 3167, -1000, 1985, 1985, -1000,
	3167, 3167, 1609, -1000, 350, -1000, 391, -1000, 1035, 17441,
	431, 473, 429, -1000, 591, -1000, -1000, 586, 2983, 4339,
	-1000, 42098, -1000, 42098, -1000, 42098, 42098, 648, 10181, 2983,
	42098, 718, -1000, -1000, 977, 349, 334, 654, 654, 1133,
	-1000, 3029, -1000, -1000, 1127, -1000, -1000, -1000, -1000, 42098,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 24067, 24067, 3075,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2247, 2244, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42098, 1365, -1000, 1666, 2094, 33082,
	1662, 1513, 2238, 515, 1879, 1660, -1000, 2232, -1000, 1075,
	42098, 42098, -1000, 1269, -1000, 1627, 2855, 2876, 2855, -1000,
	-1000, -1000, -1000, 2910, -1000, 2893, -1000, -1000, 1269, -1000,
	-1000, -1000, -1000, -1000, 863, -1000, 3105, 868, 868, 868,
	2417, -1000, -1000, -1000, 1120, 2415, -1000, -1000, -1000, 3187,
	-1000, -1000, -1000, -1000, -1000, -1000, 16239, 3003, 3163, 3151,
	32481, 3163, -1000, -314, 1690, -1000, 1888, 173, 1842, 42098,
	-1000, -1000, -1000, 2414, 2413, -237, 135, 3148, 3146, 867,
	-1000, 2411, 1110, -231, -1000, -1000, 1021, -1000, -1000, -1000,
	-1000, -231, -1000, 1021, -1000, 124, -1000, -1000, 2991, -1000,
	-1000, 2150, -1000, 218, -1000, -1000, -1000, -1000, -1000, -1000,
	164, -1000, 42098, -1000, 1089, 122, -1000, 1985, -1000, -1000,
	-1000, -1000, -1000, 45064, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10181, -1000, -1000, -1000, 2338,
	-1000, -1000, 10181, 2410, 2230, 2407, 2226, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3186, -1000, 3145, 1364, 2406, 2401, 1357, 2397, 2395,
	-1000, 10181, 2386, 3350, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 773, 391, 2385, 1082, -1000, -1000, -1000, -1000, 391,
	-1000, 2220, 192, -1000, -1000, -1000, 2215, 2214, 2010, -1000,
	-1000, 1963, 1429, 187, -1000, -1000, -1000, -1000, -1000, -1000,
	1961, 1894, 1612, -334, -1000, 2636, -1000, 1547, 1547, 1547,
	42098, 1350, -1000, 1547, 1547, 2382, -1000, 2381, 2380, -168,
	610, 1711, 1702, -1000, 1991, 25269, 31880, 31279, 1161, -1000,
	1349, -1000, -1000, -1000, -1000, -1000, 3167, 610, -1000, 420,
	1972, 11996, 2631, 11996, 2629, 432, 2622, 1328, -1000, 42098,
	-1000, -1000, 42098, 304, 2607, -1000, 2606, 2859, 413, 2604,
	2602, 42098, 2329, -1000, 2983, 42098, 670, 3002, -1000, -1000,
	-1000, 326, -1000, -1000, 459, -1000, 42098, -1000, 42098, -1000,
	1463, -1000, 24067, -1000, -1000, 1314, -1000, 2211, 2210, -1000,
	192, 2208, 5328, -1000, -1000, 2952, 2204, -1000, 42098, 1075,
	1075, 3186, 42098, 7756, -1000, -1000, 10181, 2594, -1000, 10181,
	-1000, -1000, -1000, -1000, -1000, 2593, 2986, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1385, -1000, 10181, 10181, -1000, -1000,
	633, 13214, -264, 278, -1000, -1000, -1000, -241, 2202, -1000,
	-1000, 3144, 2196, 2143, 42098, -1000, -1000, 1021, 1021, -237,
	-1000, -1000, 1011, -1000, -1000, 945, 519, -1000, 2377, 2218,
	-1000, 2200, 100, -1000, 100, -1000, 204, 10181, -1000, 2194,
	-1000, -1000, -1000, 2192, -1000, -1000, 2142, -1000, 2374, 4339,
	-171, -168, 15638, -171, -1000, -1000, 351, -1000, -1000, 311,
	-1000, -1000, 1928, 552, -1000, -1000, -1000, 1607, 1854, 2168,
	28875, 24067, 24668, 2191, -1000, -1000, 30678, 1385, 1385, 45151,
	242, 45461, -1000, 2589, 935, 1695, -1000, 1971, -1000, 1966,
	-1000, 3167, 1161, 131, -1000, -1000, 1459, -1000, 935, 2543,
	3142, -1000, 3182, 42098, 1940, 42098, 2577, 1602, 11996, -1000,
	586, 2663, -1000, -1000, 304, -1000, -1000, 1853, 11996, -1000,
	-1000, 2190, 24668, 771, 1601, 1600, 776, 2572, -1000, 472,
	3184, -1000, -1000, -1000, 831, 2569, -1000, 1819, 1799, -1000,
	42098, -1000, 28875, 28875, 399, 399, 28875, 28875, 2564, 654,
	-1000, -1000, 11996, -1000, -1000, 1547, -1000, -1000, -1000, 1547,
	1457, -1000, -1000, -1000, -1000, -1000, -1000, 1894, -1000, -1000,
	3123, -1000, -1000, 1985, 42098, 1985, 30077, -1000, 3141, 3140,
	-1000, 1985, 990, -1000, -314, 42098, 42098, -246, 1960, -1000,
	2183, 141, -1000, -1000, 1006, -241, -248, 50, 24067, 1581,
	-1000, -1000, -1000, -1000, -1000, 2373, -1000, 883, -1000, -1000,
	-1000, 990, 2348, 2324, -1000, -1000, -154, -1000, -1000, 430,
	-1000, -1000, -1000, 506, 2181, -1000, -1000, 297, -1000, -1000,
	2180, -1000, -1000, 121, -1000, 1552, 1293, -1000, 2559, 10181,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 583, -1000,
	391, 45332, -1000, 914, -1000, 945, 583, 27673, 528, 272,
	-1000, 1959, -1000, -1000, 3186, -1000, 526, -1000, 437, -1000,
	1286, -1000, 1275, 29476, 1950, 1746, -1000, 45280, 735, -1000,
	-1000, 3669, -1000, -1000, -1000, -1000, -1000, -1000, 2178, 2174,
	-1000, -1000, -1000, -1000, -1000, 1930, 2558, -9, 3073, 2173,
	-1000, -1000, 2555, 1260, 1257, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1239, 1224, 28875, -1000, -1000, 3669,
	1927, 24067, 1547, -1000, -1000, 1211, 1185, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2554, -1000, -1000, 3139, -246, -1000,
	2170, 120, 119, -1000, 2169, -1000, -1000, 689, -232, 95,
	94, 81, -1000, -1000, -1000, 10181, -1000, -1000, 42098, 461,
	-1000, -1000, -1000, 163, -1000, -1000, -1000, -1000, 2168, 2162,
	-1000, 28875, 3029, 2088, 415, 3138, -1000, 45461, -1000, 1547,
	-1000, 415, 1123, -1000, 1547, 1547, -1000, 367, -1000, 1656,
	-1000, 1926, -1000, 3123, -1000, 364, -1000, 418, -1000, -1000,
	-1000, 1118, -1000, -1000, -1000, 45280, 434, -1000, 571, 2546,
	-1000, -1000, 2205, 10181, 2545, 1547, 2147, -142, 28875, 2858,
	2833, 2811, 2777, 1105, -1000, -1000, 24067, -1000, -1000, 28274,
	42098, 2143, -1000, -1000, 708, 123, 119, -1000, 3133, 138,
	3131, 3130, 985, 1788, -1000, 88, 83, 78, -1000, -1000,
	-1000, -1000, 517, -1000, 256, -1000, -1000, -1000, 294, -1000,
	-1000, 3029, -1000, 3129, 465, -1000, 24067, -1000, -1000, 27673,
	1385, 1385, -1000, -1000, 1905, -1000, -1000, -1000, -1000, 1899,
	-1000, -1000, -1000, 1086, -1000, 42098, 770, 7151, -1000, 2033,
	-1000, 42098, -1000, 2875, -1000, 223, 1085, 294, 399, 294,
	399, 294, 399, 294, 399, 250, -1000, -1000, -1000, 1080,
	-1000, -1000, 2544, 1896, 135, 127, 3127, -1000, 2143, 3126,
	2143, 2143, -1000, 101, 689, -1000, -1000, -1000, 2156, -1000,
	-1000, -1000, -1000, 1547, 1547, 2148, 2146, 342, -1000, -1000,
	-1000, 27072, 431, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	434, 45461, -1000, 7151, 1071, -1000, 1985, -1000, 654, -1000,
	-1000, 2872, 2590, 3171, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42098, 3069, 23466, 111, -1000, -1000,
	-1000, 2144, -1000, 2143, -1000, -1000, 1521, -1000, -286, 1878,
	1862, -1000, -1000, 42098, -1000, 42098, 420, -1000, 45461, 1033,
	-1000, 7151, -1000, -1000, 3183, -1000, 3180, 777, 777, 294,
	294, 294, 294, -1000, -1000, 42098, -1000, 1028, -1000, -1000,
	-1000, 1341, -1000, -1000, -1000, -1000, 2138, -1000, -1000, 2133,
	-1000, -1000, -1000, 1026, 2543, -1000, -1000, -1000, -1000, -1000,
	1910, 484, -1000, 941, -1000, 1516, -1000, 26471, 42098, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 42098, 6546, -1000, 1339,
	-1000, -1000, 1985, 42098, -1000,
}

var yyPgo = [...]int{
	0, 176, 3203, 248, 178, 3759, 89, 249, 230, 219,
	247, 3758, 3757, 3754, 3033, 3025, 3753, 3752, 3751, 3749,
	3748, 3747, 3746, 3744, 3743, 3727, 3726, 3725, 3723, 3721,
	3719, 3717, 3711, 3710, 3709, 3707, 3706, 3705, 3704, 3701,
	3700, 3699, 3698, 3697, 3696, 3695, 246, 3693, 3692, 3690,
	3687, 3685, 3683, 3676, 3675, 3674, 3672, 3671, 3667, 3666,
	3665, 3664, 3663, 3662, 3661, 3660, 3659, 3654, 3653, 3652,
	3649, 3648, 3644, 3643, 3642, 3640, 3639, 3635, 3634, 3633,
	216, 3632, 3012, 3631, 3630, 3629, 3625, 3623, 3622, 3621,
	237, 3620, 3619, 3618, 3617, 3616, 3609, 3604, 3603, 3598,
	3596, 3595, 233, 3594, 3593, 3592, 3589, 222, 3588, 227,
	3585, 174, 135, 3584, 3583, 3582, 3581, 3580, 3579, 239,
	192, 71, 3577, 48, 3575, 3573, 223, 3571, 151, 3570,
	146, 3566, 3561, 3559, 3557, 3555, 3553, 3551, 3549, 3548,
	3547, 3546, 3545, 3544, 3543, 3542, 3541, 3540, 3538, 100,
	3537, 260, 3536, 72, 3533, 3531, 132, 120, 130, 251,
	518, 253, 259, 189, 181, 112, 3530, 2996, 3529, 161,
	236, 158, 31, 3527, 136, 3526, 257, 44, 45, 255,
	137, 58, 160, 125, 3525, 228, 110, 109, 3520, 3519,
	140, 235, 187, 3518, 99, 3517, 3515, 3514, 3513, 3511,
	208, 197, 3510, 3509, 139, 3508, 3507, 149, 3506, 75,
	127, 170, 123, 3505, 2294, 126, 129, 122, 98, 3504,
	188, 3503, 3502, 3501, 3498, 183, 3495, 3494, 153, 76,
	3493, 3491, 3490, 68, 3489, 73, 3488, 55, 3487, 66,
	3486, 3484, 3483, 3482, 3481, 3480, 3478, 3477, 3476, 3474,
	3472, 3471, 63, 3470, 3467, 7, 15, 14, 3459, 27,
	3458, 172, 3456, 3455, 3454, 3453, 3452, 95, 84, 3451,
	86, 163, 3448, 8, 28, 69, 3447, 3446, 229, 1069,
	103, 150, 3443, 322, 3442, 3439, 3436, 162, 3433, 448,
	3431, 3430, 3429, 3428, 3427, 3426, 119, 3425, 224, 43,
	3424, 133, 134, 3422, 41, 56, 200, 210, 3421, 3420,
	3419, 22, 209, 96, 35, 0, 3418, 156, 3417, 3415,
	3414, 250, 3413, 231, 217, 165, 131, 256, 177, 3410,
	3409, 70, 3408, 164, 33, 62, 145, 79, 19, 204,
	3406, 967, 9, 190, 3405, 214, 3404, 182, 16, 121,
	147, 3403, 3400, 34, 261, 3399, 3396, 3395, 128, 3394,
	3393, 173, 77, 3392, 3390, 3388, 3386, 36, 3385, 39,
	12, 3384, 101, 3382, 241, 3381, 211, 154, 184, 186,
	157, 232, 225, 81, 78, 3380, 1752, 152, 104, 26,
	3379, 226, 3378, 167, 113, 3377, 85, 3374, 244, 263,
	212, 3373, 185, 10, 46, 38, 29, 47, 11, 105,
	215, 3372, 3369, 23, 57, 3367, 50, 3366, 18, 3365,
	3364, 82, 5, 3362, 3361, 17, 20, 3360, 37, 213,
	171, 118, 91, 65, 3359, 3358, 49, 155, 3357, 143,
	159, 148, 3356, 74, 3355, 3354, 3353, 666, 3351, 252,
	3350, 3349, 3348, 3344, 3341, 3338, 3337, 3336, 3335, 3332,
	102, 42, 3331, 3317, 3315, 3313, 87, 144, 3312, 3311,
	3310, 3309, 32, 138, 3308, 13, 3307, 24, 21, 30,
	3306, 97, 3305, 3, 206, 3303, 3302, 4, 3301, 3299,
	1, 2, 3298, 3294, 115, 3291, 93, 25, 169, 107,
	3287, 3286, 83, 218, 141, 3285, 3283, 92, 245, 203,
	3282, 90, 243, 254, 3281, 220, 3280, 3279, 3277, 3276,
	3275, 3274, 1070, 3273, 3272, 242, 67, 94, 117, 3271,
	3270, 3269, 88, 166, 124, 114, 52, 80, 3267, 111,
	202, 3261, 195, 3260, 3259, 3258, 108, 3256, 3254, 3252,
	3251, 191, 3249, 3248, 193, 234, 3247, 3245, 317, 3244,
	3241, 3240, 3239, 3237, 3235, 3227, 3226, 3225, 3224, 240,
	201, 3211,
}

//line mysql_sql.y:11657
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 564, 567, 567, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 117, 117, 146, 543, 543, 116, 549,
	549, 549, 550, 550, 113, 135, 134, 137, 137, 136,
	136, 133, 133, 129, 132, 132, 131, 131, 130, 125,
	127, 127, 126, 128, 128, 114, 102, 115, 493, 493,
	492, 492, 491, 491, 444, 444, 490, 490, 490, 489,
	489, 489, 488, 488, 487, 487, 486, 486, 484, 484,
	485, 483, 482, 482, 482, 480, 480, 480, 476, 476,
	478, 477, 477, 479, 471, 471, 474, 474, 472, 472,
	472, 472, 475, 470, 470, 470, 469, 469, 101, 101,
	101, 388, 388, 100, 100, 402, 402, 402, 402, 402,
	400, 400, 400, 400, 400, 400, 399, 399, 398, 398,
	403, 403, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 91, 91, 91, 91, 91, 96, 96, 96,
	555, 555, 554, 554, 556, 556, 556, 556, 557, 557,
	94, 94, 94, 95, 397, 397, 397, 92, 93, 93,
	387, 387, 392, 392, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 396, 396, 396,
	394, 394, 393, 393, 395, 395, 85, 85, 85, 88,
	87, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	86, 86, 86, 86, 86, 86, 81, 81, 81, 81,
	81, 80, 80, 82, 82, 384, 384, 383, 97, 97,
	98, 552, 552, 551, 553, 553, 553, 553, 99, 105,
	105, 105, 105, 105, 105, 105, 104, 104, 107, 107,
	106, 108, 90, 90, 90, 90, 90, 90, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 518, 518, 518, 520, 520, 319, 320, 568, 322,
	318, 318, 318, 514, 514, 515, 516, 517, 517, 517,
	103, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	79, 84, 84, 260, 260, 265, 265, 266, 266, 266,
	271, 271, 272, 272, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 247, 247, 247, 242,
	242, 242, 242, 243, 243, 244, 244, 245, 245, 245,
	245, 246, 246, 312, 312, 267, 267, 267, 269, 269,
	268, 264, 262, 262, 262, 262, 262, 262, 262, 263,
	263, 263, 263, 270, 270, 77, 83, 83, 83, 531,
	531, 78, 542, 542, 447, 447, 333, 333, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 452, 453, 329, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 53, 56,
	57, 52, 52, 52, 373, 373, 51, 569, 569, 307,
	307, 65, 64, 55, 66, 67, 68, 69, 70, 71,
	50, 63, 63, 63, 63, 63, 63, 63, 63, 74,
	465, 465, 571, 571, 571, 72, 73, 446, 446, 446,
	62, 61, 60, 59, 58, 58, 49, 49, 48, 48,
	54, 141, 142, 142, 326, 326, 326, 328, 328, 324,
	570, 570, 416, 416, 327, 327, 47, 47, 47, 47,
	75, 325, 325, 306, 323, 323, 323, 12, 12, 10,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 25, 26, 28, 381, 381,
	378, 27, 19, 18, 18, 22, 21, 17, 17, 20,
	23, 24, 24, 9, 9, 9, 9, 14, 14, 15,
	164, 164, 215, 215, 526, 526, 522, 522, 523, 523,
	523, 524, 524, 525, 525, 109, 459, 459, 459, 459,
	459, 459, 8, 186, 186, 458, 458, 458, 458, 458,
	458, 385, 385, 385, 503, 503, 503, 504, 185, 185,
	180, 180, 460, 460, 350, 505, 505, 468, 468, 467,
	467, 466, 466, 183, 183, 184, 184, 167, 167, 120,
	120, 473, 473, 473, 473, 481, 481, 443, 443, 252,
	252, 299, 299, 300, 300, 157, 157, 158, 158, 158,
	158, 158, 158, 558, 558, 559, 560, 561, 561, 562,
	562, 562, 563, 563, 563, 563, 563, 511, 511, 513,
	513, 512, 182, 182, 178, 178, 179, 179, 179, 177,
	177, 176, 175, 175, 174, 172, 172, 172, 173, 173,
	173, 190, 190, 160, 160, 160, 159, 159, 159, 159,
	159, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 161, 161, 519, 519, 519, 448, 448,
	448, 455, 455, 280, 280, 281, 281, 279, 279, 162,
	162, 163, 163, 163, 163, 278, 278, 277, 165, 165,
	171, 170, 170, 166, 166, 166, 166, 288, 288, 287,
	287, 287, 287, 112, 118, 118, 119, 189, 189, 286,
	285, 285, 285, 188, 188, 187, 187, 181, 181, 169,
	169, 169, 169, 284, 168, 282, 548, 548, 547, 547,
	546, 544, 544, 544, 545, 545, 545, 545, 495, 495,
	495, 495, 495, 313, 313, 313, 317, 317, 316, 316,
	316, 316, 316, 321, 7, 7, 7, 7, 7, 7,
	7, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 38, 199, 200, 39, 201, 201,
	202, 202, 203, 203, 204, 205, 206, 206, 206, 206,
	37, 191, 191, 192, 192, 193, 193, 194, 195, 195,
	195, 198, 196, 197, 197, 566, 566, 565, 36, 36,
	29, 150, 150, 151, 151, 151, 153, 153, 248, 248,
	248, 152, 152, 154, 154, 154, 527, 530, 528, 528,
	532, 532, 532, 533, 533, 533, 533, 534, 534, 30,
	138, 143, 537, 537, 537, 536, 536, 538, 538, 539,
	539, 303, 303, 304, 304, 148, 149, 149, 145, 140,
	156, 156, 156, 156, 156, 139, 144, 147, 529, 535,
	535, 535, 382, 382, 379, 380, 380, 377, 376, 376,
	376, 541, 541, 540, 540, 540, 314, 314, 31, 372,
	372, 374, 375, 375, 375, 366, 366, 366, 366, 35,
	370, 370, 371, 371, 371, 371, 371, 371, 371, 367,
	367, 369, 369, 365, 365, 365, 365, 365, 365, 365,
	34, 155, 155, 364, 364, 361, 361, 359, 359, 360,
	360, 358, 358, 358, 362, 362, 42, 76, 43, 44,
	45, 41, 363, 363, 33, 33, 33, 33, 33, 33,
	33, 33, 122, 121, 121, 121, 121, 121, 124, 124,
	302, 302, 301, 301, 123, 249, 249, 40, 227, 227,
	435, 435, 430, 430, 430, 430, 430, 450, 450, 450,
	431, 431, 431, 432, 432, 432, 434, 434, 434, 433,
	433, 433, 433, 433, 449, 449, 451, 451, 451, 404,
	404, 405, 405, 405, 408, 408, 422, 422, 423, 423,
	421, 421, 428, 428, 427, 427, 426, 426, 425, 425,
	424, 424, 424, 424, 419, 419, 418, 418, 406, 406,
	406, 406, 406, 407, 407, 407, 417, 417, 420, 420,
	276, 276, 275, 275, 235, 235, 236, 236, 274, 274,
	233, 233, 234, 234, 234, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	501, 501, 502, 238, 238, 250, 250, 250, 250, 250,
	250, 237, 237, 239, 239, 216, 216, 214, 214, 214,
	214, 207, 207, 208, 208, 209, 209, 209, 213, 213,
	212, 212, 212, 212, 210, 210, 211, 211, 211, 211,
	211, 211, 390, 390, 498, 498, 499, 499, 494, 494,
	494, 497, 497, 497, 497, 497, 497, 497, 500, 500,
	500, 496, 496, 217, 297, 297, 297, 315, 315, 315,
	315, 296, 296, 296, 232, 232, 231, 231, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	389, 389, 330, 330, 331, 331, 259, 258, 258, 258,
	258, 258, 256, 257, 255, 255, 255, 255, 255, 254,
	254, 253, 253, 253, 368, 368, 251, 251, 241, 241,
	241, 240, 240, 240, 429, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 294, 294, 294, 295, 295, 295, 295,
	295, 295, 295, 295, 340, 340, 346, 346, 510, 510,
	509, 218, 218, 218, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 228, 228, 228, 413, 413, 413, 413,
	414, 414, 414, 414, 415, 415, 415, 411, 411, 412,
	412, 351, 352, 352, 456, 456, 457, 457, 409, 409,
	410, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 464, 464, 464, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	521, 521, 521, 506, 506, 506, 507, 507, 507, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 508, 508,
	508, 508, 508, 508, 508, 508, 508, 508, 508, 508,
	508, 508, 508, 508, 508, 292, 292, 292, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 353, 353, 354, 354, 461, 461, 461,
	461, 461, 461, 462, 462, 463, 463, 463, 463, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 338, 289,
	289, 289, 355, 347, 347, 348, 348, 349, 349, 341,
	341, 341, 341, 341, 341, 342, 342, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 343,
	343, 345, 345, 357, 357, 357, 356, 356, 356, 356,
	356, 356, 356, 230, 230, 230, 230, 335, 335, 335,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 220, 220, 220, 220, 224, 224, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 225, 225, 225, 225, 225, 223, 223, 223,
	223, 223, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	110, 111, 111, 222, 298, 298, 436, 436, 439, 439,
	437, 437, 438, 440, 440, 440, 441, 441, 441, 442,
	442, 442, 445, 445, 305, 305, 305, 311, 311, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 6, 1, 2, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 10, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 3, 4, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 10,
	7, 4, 4, 1, 3, 1, 6, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 8, 8, 0,
	4, 7, 0, 3, 0, 2, 0, 1, 1, 1,
	1, 4, 2, 2, 3, 3, 4, 5, 3, 4,
	4, 2, 2, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 6, 7, 4, 4, 7, 8,
	3, 3, 3, 4, 0, 2, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 4, 5, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 3,
	0, 1, 1, 3, 1, 3, 0, 1, 1, 1,
	14, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 0, 1, 2, 9, 9,
	7, 1, 2, 3, 3, 3, 0, 4, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 4, 1, 1,
	3, 4, 3, 0, 1, 1, 1, 0, 2, 7,
	8, 8, 0, 3, 3, 0, 3, 0, 3, 0,
	5, 1, 3, 0, 3, 3, 0, 2, 9, 6,
	0, 2, 2, 3, 3, 4, 4, 4, 1, 0,
	2, 2, 1, 3, 2, 1, 3, 2, 1, 3,
	2, 0, 1, 3, 4, 3, 1, 1, 4, 1,
	3, 1, 1, 1, 1, 0, 1, 1, 1, 11,
	0, 2, 3, 3, 2, 2, 3, 1, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 2, 2,
	6, 0, 4, 1, 1, 0, 3, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 8, 2, 4, 4,
	4, 9, 0, 2, 11, 9, 11, 8, 6, 9,
	7, 10, 2, 2, 9, 4, 5, 3, 0, 4,
	1, 3, 0, 3, 6, 0, 2, 10, 0, 2,
	0, 2, 0, 3, 2, 4, 3, 0, 2, 1,
	0, 2, 3, 0, 2, 3, 0, 2, 1, 0,
	3, 2, 4, 3, 0, 1, 0, 1, 1, 0,
	6, 0, 3, 5, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 4, 6, 5, 0, 2, 0, 2, 4, 5,
	4, 5, 1, 5, 6, 5, 0, 3, 0, 1,
	1, 3, 3, 3, 0, 4, 1, 3, 3, 3,
	0, 1, 1, 3, 2, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 5, 4,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 4,
	6, 0, 1, 1, 3, 1, 1, 1, 1, 1,
	7, 9, 7, 9, 2, 1, 7, 9, 7, 9,
	8, 5, 0, 1, 0, 1, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 3, 3, 2, 2,
	1, 5, 6, 4, 1, 1, 1, 5, 4, 1,
	1, 2, 0, 1, 1, 2, 5, 0, 1, 1,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 2, 2, 2, 0, 3, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 3, 5, 2, 2, 2, 2, 4, 1, 1,
	2, 5, 6, 8, 6, 6, 6, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 7, 9, 7, 7,
	7, 9, 7, 7, 0, 2, 0, 1, 1, 2,
	4, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	2, 2, 2, 0, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 5, 0,
	1, 3, 0, 1, 0, 2, 0, 2, 0, 1,
	6, 8, 8, 6, 6, 5, 5, 5, 6, 6,
	6, 6, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 1, 1, 1, 4, 4, 6, 8, 6, 4,
	5, 4, 4, 4, 3, 4, 6, 6, 7, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 8, 4, 2,
	3, 2, 4, 2, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 1, 3, 4,
	4, 5, 4, 5, 3, 4, 5, 6, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 4, 4, 1,
	2, 3, 5, 1, 1, 3, 0, 1, 0, 3,
	0, 3, 3, 0, 3, 5, 0, 3, 5, 0,
	1, 1, 0, 1, 1, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -564, -567, -2, -5, 613, -1, -4, -111, -85,
	-7, -113, -114, -8, -109, -9, -10, -12, -89, -104,
	-106, -108, -107, -46, -11, -103, -80, -81, -91, -97,
	-100, -101, -102, -115, -110, -112, -157, -116, -117, 603,
	-86, -87, -88, -32, -31, -30, -29, -138, -143, -146,
	609, 447, 14, 496, -14, -15, -511, -16, 259, -318,
	-319, -320, -322, -568, -47, -48, -49, -58, -59, -60,
	-61, -62, -72, -73, -74, -50, -51, -52, -55, -53,
	-65, -64, -66, -67, -68, -69, -70, -71, -54, -141,
	-142, -75, -56, -76, -57, -78, -77, -83, -79, -84,
	-140, -145, -13, 234, -82, 76, -92, -93, -94, -95,
	-96, -98, -99, 371, 377, 434, 602, 61, -158, -160,
	619, 620, 159, 160, 162, 163, -33, -34, -35, -36,
	-37, -38, -40, -39, -41, -42, -43, -44, -45, 230,
	16, 539, -17, -20, -18, -21, -19, -27, -28, -26,
	-23, -25, -139, -24, -144, -22, -147, 254, 253, 38,
	320, 321, 322, 375, 252, 231, 15, 31, 42, 351,
	-159, 82, 531, 532, 534, 232, -161, 13, 624, -6,
	-3, -2, -125, -129, -133, -136, -137, -134, -135, -4,
	-111, 117, 244, 604, -315, 367, 605, 607, 606, 85,
	93, -308, -310, 447, 259, 371, 377, 602, 620, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 555,
	556, 557, 558, 559, 569, 570, 560, 561, 562, 563,
	564, 565, 566, 567, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 499, 589,
	590, 591, 592, 527, 552, 588, 349, 350, 536, 271,
	295, 402, 301, 308, 159, 178, 172, 200, 192, 532,
	167, 275, 313, 276, 92, 162, 482, 107, 459, 431,
	165, 290, 292, 294, 528, 529, 361, 297, 526, 296,
	298, 300, 530, 277, 352, 188, 183, 289, 273, 181,
	278, 40, 279, 205, 280, 281, 541, 455, 348, 461,
	305, 52, 429, 182, 456, 293, 458, 209, 213, 473,
	474, 176, 177, 463, 476, 204, 207, 208, 251, 345,
	346, 43, 538, 263, 477, 211, 203, 199, 485, 309,
	307, 202, 175, 198, 274, 65, 215, 214, 216, 425,
	426, 427, 428, 282, 283, 365, 472, 195, 184, 353,
	168, 23, 480, 258, 460, 378, 284, 302, 310, 210,
	212, 265, 270, 540, 531, 433, 269, 306, 478, 180,
	262, 291, 257, 481, 169, 534, 380, 285, 163, 299,
	475, 484, 64, 393, 174, 166, 248, 160, 267, 272,
	286, 287, 288, 525, 312, 311, 303, 533, 196, 264,
	201, 186, 173, 197, 161, 266, 483, 394, 600, 351,
	412, 194, 191, 268, 241, 479, 462, 164, 416, 395,
	189, 314, 596, 597, 598, 366, 344, 315, 316, 187,
	255, 453, 454, 319, 422, 335, 396, 432, 403, 397,
	222, 223, 323, 465, 467, 206, 599, 324, 325, 326,
	457, 327, 328, 329, 330, 370, 56, 58, 94, 97,
	96, 621, 622, 63, 29, 356, 359, 391, 398, 337,
	601, 537, 334, 338, 339, 360, 25, 414, 382, 418,
	417, 48, 49, 50, 53, 54, 55, 57, 59, 60,
	51, 524, 375, 388, 486, 45, 47, 385, 27, 362,
	413, 435, 333, 415, 446, 46, 444, 445, 466, 26,
	364, 363, 62, 44, 421, 423, 424, 317, 331, 373,
	610, 487, 368, 384, 387, 369, 336, 358, 389, 67,
	66, 381, 611, 376, 374, 332, 542, 543, 340, 568,
	354, 430, 521, 520, 519, 518, 517, 516, 515, 514,
	320, 321, 322, 399, 400, 401, 411, 404, 405, 406,
	407, 408, 409, 410, 449, 450, 612, 468, 470, 471,
	469, 236, 623, 355, 239, 614, 615, 95, 616, 618,
	617, 28, -395, -393, -315, 532, 602, 377, 531, 534,
	371, 351, 620, 375, 259, 320, 321, 322, 447, -201,
	-315, 623, -167, 39, -214, -315, -167, -82, -15, -14,
	-159, -160, -214, 238, -323, 24, 429, -90, 430, 234,
	82, 77, -315, -9, -102, -8, -109, -80, -157, 434,
	-321, -315, 320, 320, -321, 238, -315, 269, 410, -447,
	244, -399, -372, 270, -398, -374, -401, -375, 32, 230,
	232, 231, 266, 16, 375, 240, 14, 13, 376, 252,
	25, 26, 28, 15, 377, 379, 29, 380, 383, 384,
	385, 42, 388, 389, 259, 85, 93, 88, 277, -200,
	-315, -349, -341, 114, -344, -336, -337, -339, -490, -484,
	-334, 82, 141, 142, 149, 115, 625, -338, -429, 36,
	117, 548, 552, 588, 497, -290, -291, -292, -293, -294,
	-295, -315, -485, -483, 88, 98, 100, 104, 105, 103,
	101, 153, 185, 102, 89, 154, -160, 85, -506, 558,
	-309, 581, 589, 590, 591, 592, 580, 61, -454, -463,
	237, -461, 152, 190, 255, 186, 14, 147, 422, 187,
	555, 577, 499, 559, 569, 584, 550, 551, 553, 545,
	546, 547, 549, 560, 562, 576, -464, 572, 582, 583,
	568, 585, 586, 587, 618, 87, 86, 575, 574, 561,
	556, 557, 563, 544, 554, 564, 565, 573, 578, 579,
	359, 107, 360, 361, 489, 352, 362, 244, 429, 70,
	363, 364, 365, 366, 367, 496, 368, 71, 369, 358,
	259, 412, 370, 189, 206, 501, 500, 502, 493, 490,
	488, 491, 492, 494, 495, 566, 567, 571, -118, -119,
	594, -558, -283, -559, 6, 7, 8, 9, -560, 154,
	-549, 431, 540, 88, 164, 161, -386, 164, 113, 169,
	168, -386, 166, 323, 265, -363, -150, 349, 412, 327,
	94, 269, -366, -364, 528, -449, 317, 313, 289, 239,
	110, -151, 249, 248, 108, 489, 237, 386, 308, 56,
	58, -522, -523, 227, 228, 229, -513, 522, -512, -315,
	361, 96, 97, 27, 238, 372, 265, 467, 465, 466,
	468, 469, 470, 471, -63, -465, -446, 462, 461, -327,
	454, 460, 452, 464, 455, 350, 329, 328, 230, 614,
	529, 523, -305, 396, 432, 486, 487, 373, 433, 473,
	475, 456, 107, 193, 190, 239, 241, 238, 349, 489,
	412, 94, 327, -522, 161, 473, 475, 269, 410, 41,
	-392, 422, -391, -393, 474, 485, 86, 87, 472, -305,
	107, 453, 453, -558, -283, -158, -160, -112, -511, 530,
	530, 530, 239, 349, 412, 269, 240, 238, 525, 528,
	241, 489, 237, 320, 372, 265, 327, 94, 166, -448,
	-519, 32, -455, 224, 225, 226, 33, 34, -1, 121,
	624, -341, -341, -6, 627, -6, -341, -315, -315, 156,
	-220, -224, -221, -223, -222, -226, -225, 190, 191, 152,
	194, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	207, 208, 205, 31, 206, 255, 186, 187, 188, 189,
	209, 172, 192, 537, 217, 173, 218, 174, 219, 175,
	220, 176, 177, 221, 178, 181, 182, 183, 184, 180,
	155, 82, 155, 88, -183, 261, -214, 155, 625, -183,
	-558, -176, -177, 11, -214, -296, -315, 431, 124, -90,
	77, -90, 430, 77, -514, -515, -516, -518, 234, 430,
	429, -107, 155, 277, 17, -321, -321, 80, -214, -374,
	269, -399, -372, 36, 79, 156, 242, 156, 79, 82,
	373, 349, 412, 374, 489, 238, 386, 241, 269, 387,
	349, 412, 238, 241, 489, 269, 349, 238, 241, 412,
	269, 387, 452, 453, 241, 27, 378, 381, 382, 453,
	-469, 485, 156, 113, 110, 111, 112, -341, 131, -356,
	124, 125, 126, 127, 128, 129, 130, 138, 137, 148,
	141, 142, 143, 144, 145, 146, 147, 139, 140, 134,
	114, 132, 136, 133, 116, -160, -341, -349, 61, -339,
	-339, -339, -339, -315, -429, -346, -341, 82, 82, 82,
	82, 155, 101, 88, -341, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, -462, 82, 82,
	-353, -354, 82, 82, -334, -296, 82, 88, 88, 82,
	82, 82, 88, -354, -354, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, -177, 156,
	-176, 82, -176, -177, -161, -160, 32, 33, 32, 33,
	32, 33, 32, 33, -561, 611, 82, 98, 621, 222,
	478, 539, 167, 168, 169, -361, 244, -199, -315, -201,
	372, 241, 525, 241, -151, -361, -361, -361, -361, -361,
	240, -361, 24, 238, 238, 238, 238, -361, 496, 124,
	124, 59, -524, 171, 156, -513, -182, 82, -326, 132,
	136, -326, -279, 18, 24, 267, 267, 267, -326, 307,
	-569, -570, 17, 134, -324, -570, -324, -324, -326, -571,
	240, 463, 43, 268, 267, -178, -179, 22, -178, 457,
	453, -416, 458, 459, -328, -570, -327, -326, -326, -327,
	-326, -326, -326, 32, 238, 241, 489, 327, 615, -569,
	-569, 31, 31, -447, -447, -214, -447, 523, -306, -315,
	-447, -447, -447, -525, 243, -555, -554, 476, -557, 478,
	161, -393, 161, -393, -374, 269, 269, 156, 124, 24,
	-394, 124, 135, -393, -393, -394, -394, -237, 41, -314,
	152, -315, 88, -237, 41, -552, -551, -214, -177, -161,
	-160, 83, 83, 83, 533, 533, 533, -447, -447, -447,
	-447, -447, -449, -447, -447, -447, -447, -447, -321, -191,
	-315, -201, 244, -447, -447, -447, -162, -163, 143, -341,
	-315, -162, -3, -127, -126, 118, 119, 121, 605, 367,
	604, 608, 602, -393, 41, -442, 394, 393, -436, -438,
	82, -437, 82, -437, -437, -437, -437, -437, 82, 82,
	-439, 82, -439, -439, -436, -440, 82, -440, -441, 82,
	-441, -440, -315, -347, -349, -315, 39, -458, 61, -157,
	82, 31, 82, -315, -341, -459, 61, -157, 82, 31,
	-177, -120, 39, -179, 21, 155, 98, 88, -107, -90,
	77, -107, 83, 156, -517, 104, 105, -520, 204, 196,
	-315, -105, 88, -7, -8, -9, -10, -46, -80, -157,
	-486, -484, 82, 32, 421, 79, 17, -400, 238, 489,
	372, 265, 241, 349, -398, -381, -378, -376, -314, -374,
	-377, -376, -403, -296, 453, -121, 436, 435, 319, -341,
	-341, -341, -341, -341, 103, 114, 344, 104, 105, -336,
	-357, 32, 315, 316, -337, -337, -337, -337, -337, -337,
	-337, -337, -337, -337, -337, -337, -345, -355, -429, 82,
	134, 132, 136, 133, 116, -339, -339, -337, -337, 83,
	156, -341, -510, -509, 118, -341, -341, -341, -341, -315,
	-507, -508, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 363, 358, 364, 362, 352, 370, 365,
	366, 189, 520, 521, 514, 515, 516, 517, 518, 519,
	-347, -347, -341, -507, -347, -289, 33, 32, -349, -349,
	-349, 83, -341, -521, 342, 341, 343, -180, -315, -347,
	83, 83, 83, 98, -349, -349, -347, -337, -347, -508,
	-289, -289, -289, -289, 143, -349, -349, -289, -289, -289,
	-289, 143, -289, -289, -289, -289, -289, -289, -289, -289,
	83, 83, 83, 143, -349, -178, -119, -467, -466, -341,
	41, -120, -179, -562, 612, 82, -296, -550, 88, 88,
	625, 479, 480, 165, 168, 167, -315, 114, 35, 82,
	-191, -361, -361, -361, -527, -315, -382, -379, -376, -315,
	-315, -372, -315, -315, -214, -361, -361, -361, -361, -214,
	-248, 53, 54, 55, -376, -152, 56, 57, -525, -512,
	35, -181, -315, -279, -339, -339, -341, -376, 269, -569,
	-326, -326, -307, -306, -328, -323, -328, -328, -279, -324,
	-326, -326, -341, -328, -324, -279, -315, 453, -279, -279,
	-416, -326, -325, -315, -325, -361, -306, -307, -307, -214,
	-214, -260, -265, -261, -266, 261, 235, 356, 357, 233,
	231, 11, 232, -273, 308, -362, 497, -243, -244, 77,
	42, -246, 259, 398, 391, 271, 275, 92, 276, 431,
	277, 240, 279, 280, 281, 296, 298, 251, 282, 283,
	284, 422, 285, 160, 297, 286, 287, 288, 374, -238,
	6, 330, 41, 51, 52, 445, 444, 542, 539, 272,
	-527, -527, 31, 31, -382, -315, -315, -170, -165, -169,
	-166, -171, -282, -284, -168, 82, -214, -160, -315, 156,
	477, 479, 480, -555, -394, -555, -394, 32, 421, -397,
	421, 32, -372, -391, 473, 475, -387, 88, 422, -377,
	-396, 79, 152, -466, -394, -394, -396, -396, 151, 156,
	-553, 478, 479, 227, -178, 98, 98, 98, -216, -214,
	-527, -381, -372, -315, -447, -216, -216, -216, -315, -315,
	82, 155, 36, -315, -315, -315, -278, 156, -277, 17,
	-316, -315, 35, 88, 155, -278, -128, -126, 120, -341,
	-6, 604, -341, -6, -6, -341, -6, -341, -445, 395,
	98, 98, -298, 88, -298, 98, 98, 98, 83, 88,
	-385, 79, -460, -350, -505, 594, -185, 83, -180, -503,
	-504, -180, -184, -315, 625, 626, -460, -185, 83, -503,
	-178, 595, -120, -175, -174, -341, -315, 24, -107, -90,
	-515, 155, 156, -181, -400, -380, -377, -402, 143, -315,
	-388, 156, 539, 628, 86, 242, -541, -540, 413, 83,
	156, -470, 243, 496, 88, 625, 429, 222, 223, 103,
	344, 104, 105, -429, -349, -345, -339, -339, -337, -337,
	-343, 256, -343, 113, -341, 626, -340, -509, 120, -341,
	35, 156, 35, 156, 80, 155, 83, 83, 17, 17,
	83, -341, 83, 83, 83, 83, 17, 17, -341, 83,
	155, 83, 83, 83, 83, 80, 83, 156, 83, 156,
	-349, -349, -341, -349, 83, 83, 83, -341, -341, -341,
	-349, 83, -341, -341, -341, -341, -341, -341, -341, -341,
	-410, 448, -410, -410, 156, 156, 156, 83, -120, 82,
	98, 156, 622, -302, -301, 88, 166, 169, 169, 168,
	24, 36, -200, -202, -203, -204, -205, -206, 134, 157,
	158, 82, -214, -214, -214, -530, 399, -542, 156, 41,
	-540, 489, -148, 319, -365, 80, -155, 17, 539, -214,
	-214, -214, -214, -227, 35, 17, -164, -215, -315, 82,
	83, 156, -373, 80, -315, -307, -279, -279, -328, -279,
	-279, 156, 23, -326, -328, -328, -324, 155, -306, -435,
	35, -182, 156, 21, 261, -213, -312, -210, -212, 246,
	-331, -211, 249, -499, 247, 245, 108, 250, 304, 109,
	240, -312, -312, 246, -247, 242, 35, -312, -263, 240,
	347, 304, 247, 21, 261, -262, 240, 109, -315, 246,
	250, 247, 245, -311, 124, -305, 151, 242, 43, 374,
	-311, 543, 261, -311, -311, -311, -311, -311, -311, -311,
	278, 278, -311, -311, -311, -311, -311, -311, -311, -311,
	-311, -311, -311, 161, -311, -311, -311, -311, -311, -311,
	82, 273, 274, -531, 399, 31, 355, 355, -542, 31,
	-156, 349, 31, -285, -286, -287, -288, 68, 72, 74,
	69, 70, 71, 75, 31, 156, -313, -317, 35, -315,
	88, -313, -160, -165, -170, -313, 82, -554, -556, 481,
	478, 484, -396, -396, 242, 82, 124, -396, -396, 41,
	-314, -551, 485, 479, -120, 156, 79, -216, -192, -193,
	-194, -195, -220, -296, 191, 194, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 207, 208, 205, 206, 255,
	186, 187, 188, 189, 209, 172, 192, 537, 173, 174,
	175, 176, 177, 178, 181, 182, 183, 184, 180, -315,
	-201, -279, -163, -165, -315, 88, -315, 143, -279, 121,
	-6, 119, -132, -131, -130, 122, 602, 608, 121, 121,
	121, 83, 83, 83, 156, 83, 83, 83, 156, 83,
	156, -473, 458, 40, 156, 82, 83, 156, 61, 156,
	124, 83, 156, -341, 83, 61, -120, 88, 156, -172,
	37, 38, 155, 431, -315, -484, 83, -402, 156, 242,
	155, 155, -378, 377, -314, -380, 21, 539, -296, 39,
	-302, 124, 625, -315, 83, -343, -343, 113, -339, -336,
	83, 121, -341, 119, -218, -220, 393, 394, -341, -218,
	-219, -225, 152, 190, 255, 189, 188, 186, 393, 394,
	-237, -315, -341, -341, 83, -341, -341, 17, -315, -237,
	-337, -341, -177, -177, 83, 83, -409, -410, -409, -409,
	83, 83, 83, 83, -409, 83, 83, 83, 83, 83,
	83, 83, 83, 82, 98, 100, 98, 100, -466, -563,
	63, 610, 62, 421, 103, 309, 156, 98, 88, 626,
	156, 124, 169, -543, 313, 349, 385, 83, 156, -296,
	-192, -182, 82, -182, -533, 460, 401, 411, -311, -333,
	-332, 351, 42, -452, 422, 407, 408, -379, 269, -315,
	-539, 95, 124, 79, 334, 338, 339, 335, 336, 337,
	-359, -360, -358, -362, -527, 82, 82, -157, 35, 82,
	82, 35, -430, 324, -220, -214, -164, -315, 17, 156,
	-526, 155, -1, -315, -372, -326, -279, -341, -341, -279,
	-326, -326, -328, -315, -430, -220, 35, -261, 235, 232,
	-406, 306, 307, -407, -420, 309, -422, 82, -217, -296,
	-211, -498, -499, -361, -315, 109, -498, 109, 82, -217,
	-296, -296, -264, -325, -296, -315, -315, -315, -315, -269,
	-268, -296, -271, 32, -272, -315, -315, -315, -315, 109,
	-315, 109, -242, 41, 48, 49, 50, -311, -311, 193,
	-245, 41, 421, 423, 424, -271, 98, 98, 98, 98,
	88, 88, 88, -311, -311, 98, 88, -317, 88, -500,
	168, 45, 46, 98, 98, 98, 98, 41, 88, -250,
	41, 289, 293, 290, 291, 292, 88, 98, 41, 98,
	41, 98, 41, -315, 82, -501, -502, 88, -533, -311,
	355, -393, 124, -333, -538, 319, -149, 92, 32, -186,
	235, 232, -527, -384, -383, -296, -169, -169, -169, -169,
	68, 68, 68, 73, 68, 73, 68, -287, -384, -171,
	-182, -317, 83, -548, -547, -546, -544, 76, 243, 77,
	-347, 478, 482, 483, -380, -329, 88, -387, -190, 24,
	-214, -214, -451, 299, 300, 83, 156, -220, -281, 19,
	155, -281, 117, -6, -128, -130, -341, -6, -341, 604,
	367, 605, 88, 98, 98, -481, 442, 437, 439, 109,
	-350, -468, -467, 61, -157, -180, -460, -504, -466, -315,
	626, 61, -157, -460, -190, -473, -174, -173, 44, -315,
	98, 17, -377, -372, 143, 143, -315, 378, -388, 88,
	400, 88, 238, 626, 88, -302, -336, -341, 83, -228,
	177, 176, -228, 35, 83, 83, -437, -437, -436, -439,
	-436, -228, -228, 83, 83, 24, 83, 83, 83, -341,
	83, 83, 156, -456, 498, -457, 570, -409, -409, -409,
	-409, -409, -409, -409, -409, -409, -409, -409, -409, -409,
	-409, -352, -351, 261, 443, 617, 617, 443, 617, 617,
	83, 156, -507, 156, -301, 88, -315, 88, 88, -204,
	-220, 83, 35, -207, -208, -209, -217, -210, -212, 35,
	-534, 92, -528, 88, -315, -535, 92, 402, 154, 353,
	41, 403, 404, 419, 348, 98, 98, 409, -529, -315,
	-156, -537, 52, 124, 88, -214, -358, -305, 151, 280,
	327, -276, -275, -315, 88, -207, -157, -207, -207, -157,
	-431, 326, 21, 98, 142, -183, 80, 155, -165, -215,
	-315, 143, 83, -279, -279, -279, -326, -431, -157, -418,
	310, 82, -416, 82, -416, 109, 335, -423, -421, 261,
	-267, 45, 47, -220, -496, -315, -494, -496, -315, -494,
	-494, -361, -341, -267, -217, 242, 31, 232, -270, 332,
	333, 338, -389, 305, 114, -389, 156, -172, 156, -315,
	-237, -237, 31, 88, 88, -216, 83, 156, 124, -534,
	-528, 124, -394, 88, -535, -539, 124, 88, 156, -186,
	-186, -279, 156, 124, -188, -187, 79, 80, -189, 79,
	-187, 68, 68, -279, -546, -545, 24, -499, -499, -499,
	83, 83, 15, -194, 41, -280, 20, 21, 143, -280,
	121, 119, 121, 121, -315, 83, 83, -443, 596, -477,
	-479, 437, 21, 21, 15, 243, 83, -460, -460, -481,
	45, 46, -372, -388, 422, -214, 156, 626, -218, -341,
	83, -341, 83, 88, 83, 88, -177, 21, 83, 156,
	83, 83, 83, 156, 83, 83, -341, 83, -507, 236,
	-157, 83, 156, -157, 88, -532, 413, 88, 88, 98,
	41, 98, 154, 405, -453, -149, -536, 92, 124, 625,
	82, -311, -311, -311, -315, 83, 156, -311, -311, 83,
	83, 83, -235, 539, -432, 260, 98, 142, 98, 142,
	98, -313, -165, -315, -279, -526, 155, -279, -432, -408,
	311, 98, -337, 82, -337, 82, -417, 308, 82, 83,
	156, -315, -296, -232, -231, -229, 103, 114, 41, 391,
	-230, 92, 151, 294, 297, 296, 272, 295, -259, -330,
	79, 397, 332, 333, -362, 596, 527, 245, 108, 109,
	379, -331, 82, 82, 80, 314, 82, 82, -496, 83,
	-267, -296, 41, -270, 41, 345, 305, -268, -315, 151,
	-237, 83, -502, 88, -532, 88, -396, -537, 88, -527,
	-177, -383, -466, -341, 82, -341, 82, 68, 11, 19,
	-334, -341, -349, 244, -6, 605, 367, -252, 597, 88,
	21, 88, -475, 88, -384, -443, -123, -249, -305, 277,
	83, 83, 83, -409, -409, -412, -411, -415, 443, 306,
	451, -349, 88, 88, 83, 83, -196, -220, -153, 539,
	-235, -209, -153, 21, 539, 352, 41, 98, 41, 406,
	124, 104, 105, -303, -304, 88, -367, -369, -296, 82,
	-237, -239, -314, 152, 88, -275, -334, -334, -233, -157,
	35, -234, -273, -362, -122, -121, -233, 82, -433, 160,
	98, 142, 98, 98, -279, -279, -433, -422, 21, 83,
	-403, 83, -403, 82, 124, -337, -421, -424, 61, -229,
	103, -337, 88, -239, -240, 41, 293, 289, 124, 124,
	-241, 41, 273, 274, -251, 82, 304, 15, 193, 82,
	109, 109, -214, -367, -367, -497, 334, 335, 336, 340,
	338, 339, 337, -497, -367, -367, 82, -390, -389, -337,
	-311, -311, 151, -536, -178, -181, -495, -315, 245, 21,
	21, -315, -315, -299, 598, 98, 88, 439, -252, -444,
	599, -471, -416, -237, 124, 83, -414, 116, 405, 409,
	-335, -338, 98, 100, 185, 154, 83, 83, 538, -154,
	60, 485, 88, 400, 88, 352, 88, 626, 156, 124,
	83, 156, -436, -341, -404, 261, -157, 156, -273, -305,
	-123, -404, -236, -274, -315, 88, -450, 168, 325, 539,
	98, 142, 98, -177, -434, 168, 325, -407, 83, 83,
	83, -403, 98, 83, -428, -425, 82, -273, 263, 134,
	88, 88, 98, 82, -461, 31, 88, -368, 82, 83,
	83, 83, 83, -367, 98, -237, -311, 83, 83, 156,
	82, 21, -299, 88, -480, 442, -474, -472, 437, 438,
	439, 440, 88, -413, -414, 409, -335, -338, 594, 449,
	449, 449, -198, -315, 304, 422, -304, 88, -370, -369,
	-172, 83, -405, 313, 21, -273, -311, -405, 83, 156,
	-311, -311, 325, 98, 142, 98, -178, 325, -419, 312,
	83, -428, -273, -427, -426, 311, 264, 82, 83, -341,
	-353, -311, 83, -254, -253, 535, -367, -370, 80, -370,
	80, -370, 80, -370, 80, 83, -237, -315, 245, -300,
	-315, -475, -482, 243, -478, -479, 441, -472, 21, 439,
	21, 21, -124, 156, 113, 450, 450, 450, -197, 35,
	444, 378, -371, 251, 345, 346, 92, 539, 332, 333,
	-172, 21, -406, -237, -274, -334, -334, 98, 98, 83,
	156, -315, 260, 82, -348, -342, -341, 260, 83, -315,
	-258, -256, -257, 79, 456, 302, 303, 83, -497, -497,
	-497, -497, -259, 83, 156, -489, 82, 98, -477, -476,
	-478, 21, -475, 21, -475, -475, 446, -413, 88, -311,
	-311, 88, 88, 331, -296, 82, -418, -426, -425, -348,
	83, 156, -389, -257, 79, -256, 79, 16, 15, -370,
	-370, -370, -370, -315, -493, 31, 83, -488, -487, -297,
	-483, -315, 442, 443, 88, -475, 124, -566, -565, 616,
	98, 98, -315, -403, -408, 83, -342, -255, 299, 300,
	31, 168, -255, -492, -491, -490, 83, 156, 155, 88,
	88, 83, -422, 103, 41, 301, 156, 124, -487, -315,
	-491, 41, -341, 155, -315,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	266, 267, 268, 864, 865, 866, 867, 868, 869, 870,
	0, 0, 0, 0, 623, 624, 0, 589, 0, 0,
	0, 0, 0, 0, 477, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 507, 361, 362, 363, 364, 365,
	366, 367, 368, 0, 291, 287, 212, 213, 214, 215,
	216, 298, 299, 454, 0, 0, 0, 0, 705, -2,
	59, 0, 280, 0, 271, 271, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, -2,
	636, 0, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 350, 351, 352,
	346, 347, 349, 348, -2, 0, 636, 0, 0, 0,
	713, 0, 0, 0, 0, 0, 756, 778, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1267,
	1268, 1269, 1270, 2042, 2012, -2, 1785, 1762, 1937, 2071,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
	2112, 2113, 2114, 2115, 2116, 2117, 1719, 1720, 1721, 1722,
	1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, -2, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	-2, -2, -2, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 0, 264, 262, 1732, 1762, 1785, 1839, 1850,
	1851, 1885, 1937, 1969, 2012, 2028, 2029, 2030, 2042, 0,
	888, 0, 683, 0, 688, 1217, 683, 292, 625, 626,
	713, 739, 587, 0, 328, 0, 1776, 332, 2019, 0,
	0, 0, 584, 322, 323, 324, 325, 326, 327, 0,
	0, 863, 0, 0, 318, 0, 286, 1841, 2041, 0,
	0, 0, 0, 0, 156, 999, 158, 1001, 162, 169,
	0, 0, 174, 175, 178, 179, 180, 181, 182, 0,
	186, 0, 188, 191, 0, 193, 194, 0, 197, 198,
	199, 0, 209, 210, 211, 1002, 1003, 1004, -2, 87,
	886, 1690, 1577, 0, 1584, 1597, 1608, 1347, 1348, 1349,
	1350, 0, 0, 0, 0, 0, 0, 1358, 1359, 0,
	1386, 2075, 2116, 2117, 0, 1367, 1368, 1369, 1370, 1371,
	1372, 96, 108, 109, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 0, 1638, 1639, 1640, 1548, 1334, 1267, 0, 2084,
	0, 2106, 2111, 2112, 2113, 2114, 2105, 0, 0, 1533,
	0, 1523, 0, 0, -2, -2, 0, 0, 1910, -2,
	2081, 2102, 2110, 2085, 2086, 2109, 2077, 2078, 2079, 2072,
	2073, 2074, 2076, 2088, 2090, 2101, 0, 2097, 2107, 2108,
	2017, 0, 0, 0, 2058, 110, 111, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1544, -2, -2, 1547, -2, 1550,
	-2, -2, -2, -2, 1555, 1556, -2, 1558, -2, -2,
	-2, -2, -2, -2, -2, 1535, 1536, 1537, 1538, 1527,
	1528, 1529, 1530, 1531, 1532, -2, -2, -2, 739, 814,
	0, 739, 0, 714, 761, 764, 767, 770, 717, 0,
	0, 60, 61, 0, 281, 282, 270, 272, 0, 276,
	0, 269, 1035, 0, 0, 0, 0, 1035, 1035, 1035,
	1035, 1035, 0, 1035, 0, 0, 0, 0, 0, 1035,
	0, 921, 1006, 1007, 1008, 1033, 1034, 1105, 0, 0,
	0, 641, 637, 638, 639, 640, 727, 0, 729, 732,
	564, 564, 787, 511, 0, 0, 0, 564, 0, 525,
	517, 0, 0, 0, 564, 0, 0, 734, 734, 0,
	567, 574, 564, 564, -2, 564, 564, 564, 0, 0,
	1047, 531, 532, 533, 517, 517, 536, 537, 538, 548,
	549, 575, 1714, 0, 0, 454, 454, 0, 454, 0,
	454, 454, 454, 643, 1880, 1783, 1856, 1841, 2041, 0,
	237, 1910, 242, 0, 1784, 1803, 0, 0, 1821, 0,
	-2, 0, 308, 739, 0, 0, 713, 0, 0, 0,
	0, 0, 454, 454, 454, 454, 454, 1104, 454, 454,
	454, 454, 454, 0, 0, 0, 454, 454, 454, 0,
	0, 779, 780, 775, 776, 777, 781, 782, 5, 6,
	19, 0, 0, 0, 0, 0, 0, 66, 65, 0,
	1691, 1709, 1643, 1644, 1645, 1696, 1647, 1700, 1700, 1700,
	1700, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1700, 1700, 0, 0, 1689, 1667, 1698, 1698, 1698, 1696,
	1693, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 1658, 1659, 1660, 1661, 1703, 1703, 1706, 1706, 1703,
	0, 1573, 0, 0, 0, 0, 687, 0, 0, 0,
	739, -2, 0, 0, 588, 329, 1271, 0, 0, 333,
	0, 334, 0, 0, 0, 353, 0, 356, 341, 342,
	343, 337, 0, 136, 0, 320, 321, 0, 0, 288,
	0, 0, 0, 455, 0, 0, 0, 0, 0, 0,
	166, 163, 170, 173, 183, 190, 0, 202, 204, 207,
	164, 171, 176, 177, 184, 205, 165, 167, 168, 172,
	206, 208, 185, 189, 203, 187, 192, 195, 196, 201,
	0, 137, 0, 0, 0, 0, 0, 1583, 0, 0,
	1616, 1617, 1618, 1619, 1620, 1621, 1622, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 1577, 0, 0, 1353,
	1354, 1355, 1356, 0, 1360, 0, 1387, 0, 0, 0,
	0, 0, 1637, 1641, 0, 1573, 1573, 0, 1573, 1569,
	0, 0, 0, 0, 0, 0, 1573, 1509, 0, 0,
	1511, 1524, 0, 0, 1513, 1514, 0, 1517, 1518, 1573,
	0, 1573, 1522, 1505, 1506, 0, 1569, 1569, 1569, 1569,
	0, 0, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
	1569, 1569, 1569, 1569, 0, 0, 0, 0, 734, 0,
	740, 0, -2, 0, 758, 760, 762, 763, 765, 766,
	768, 769, 771, 772, 719, 0, 0, 62, 0, 0,
	0, 0, 274, 0, 279, 0, 0, 0, 885, 0,
	0, 1035, 1035, 1035, 922, 0, 0, 0, 0, 0,
	0, 0, 0, 1035, 1035, 1035, 1035, 0, 1053, 0,
	0, 0, 643, 642, 0, 728, 0, 0, 787, 0,
	0, 509, 510, 0, 0, 517, 564, 564, 523, 524,
	519, 518, 570, 571, 567, 0, 567, 567, 787, 0,
	542, 543, 544, 564, 564, 550, 735, 0, 551, 552,
	567, 0, 572, 573, 787, 0, 0, 787, 787, 0,
	560, 561, 562, 564, 0, 0, 1035, 0, 580, 519,
	519, 1715, 1716, 0, 0, 1044, 0, 0, 0, 583,
	0, 0, 0, 0, 644, 217, 220, 0, 223, 0,
	1880, 0, 1880, 0, 230, 0, 0, 0, 0, 0,
	0, 260, 261, 0, 0, 0, 0, 251, 254, 1211,
	1212, 996, 997, 255, 256, 300, 301, 0, 734, 757,
	759, 753, 754, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 0, 619, 0,
	901, 621, 0, 0, 0, 0, 795, 789, 791, 858,
	96, 795, 8, 83, 80, 0, 19, 0, 0, 19,
	19, 0, 19, 265, 0, 1712, 1710, 1711, 1646, 1697,
	0, 1672, 0, 1673, 1674, 1675, 1685, 1686, 0, 0,
	1668, 0, 1669, 1670, 1671, 1662, 0, 1663, 1664, 0,
	1665, 1666, 263, 0, 1574, 889, 0, 661, 675, 656,
	0, 664, 0, 1218, 0, 645, 675, 647, 0, 664,
	734, 711, 0, 689, 0, 0, 330, 0, 338, 335,
	0, 339, 0, 0, 355, 357, 358, 359, 344, 345,
	585, 316, 317, 309, 310, 311, 312, 313, 314, 315,
	319, 106, 0, 289, 290, 0, 0, 0, 150, 151,
	152, 153, 154, 155, 157, 141, 608, 610, 988, 1000,
	0, 991, 0, 160, 200, 133, 0, 0, 0, 1578,
	1579, 1580, 1581, 1582, 1587, 0, 1589, 1591, 1593, 1595,
	0, 1613, -2, -2, 1335, 1336, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1598, 1611, 1612, 0,
	0, 0, 0, 0, 0, 1609, 1609, 1604, 0, 1351,
	0, 0, 1384, 1388, 0, 0, 0, 0, 0, 97,
	1568, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	0, 0, 1577, 0, 0, 0, 1570, 1571, 0, 0,
	0, 1464, 0, 0, 1470, 1471, 1472, 0, 670, 0,
	1534, 1510, 1525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 813, 815, 0, 679, 681,
	682, 708, 689, 715, 0, 0, 0, 58, 63, 0,
	1072, 283, 284, 0, 0, 278, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 936, 452, 982, 0, 0,
	0, 998, 1023, 1031, 0, 0, 0, 0, 0, 1078,
	923, 928, 929, 930, 924, 925, 931, 932, 0, 730,
	0, 0, 827, 508, 565, 566, 788, 514, 1841, 519,
	787, 787, 526, 520, 527, 569, 528, 529, 530, 567,
	787, 787, 736, 564, 567, 553, 568, 567, 556, 557,
	0, 563, 576, 581, 577, 0, 579, 534, 535, 1080,
	732, 371, 372, 373, 375, 0, 423, 423, 423, 406,
	423, 0, 0, 394, 1717, 0, 0, 0, 0, 403,
	1717, 0, 0, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
	0, 0, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
	1717, 1717, 1717, 0, 1717, 1717, 1717, 1717, 1717, 1197,
	1717, 0, 1045, 413, 414, 415, 416, 421, 422, 0,
	449, 0, 0, 0, 452, 0, 970, 800, 0, 801,
	802, 798, 829, 853, 853, 0, 853, 833, 1217, 0,
	0, 228, 229, 218, 0, 219, 0, 231, 232, 0,
	234, 235, 236, 243, 1783, 1856, 238, 240, 0, 0,
	244, 257, 258, 259, 0, 0, 249, 250, 0, 0,
	303, 304, 306, 0, 689, 1048, 1049, 1050, 605, 1215,
	606, 607, 611, 0, 0, 614, 615, 616, 617, 618,
	903, 0, 0, 975, 976, 977, 787, 0, 796, 0,
	792, 859, 0, 861, 0, 787, 0, 81, 19, 0,
	74, 71, 0, 0, 0, 0, 0, 1692, 1642, 1713,
	0, 0, 0, 1694, 0, 0, 0, 0, 64, 691,
	652, 0, 655, 672, 0, 676, 0, 0, 668, 660,
	665, 0, 0, 685, 0, 1219, 646, 0, 0, 651,
	689, 0, 712, 741, 742, 745, 1272, 0, 340, 336,
	354, 0, 0, 0, 0, 144, 985, 0, 145, 149,
	139, 0, 0, 0, 990, 0, 987, 992, 0, 159,
	0, 0, 134, 135, 1063, 1072, 0, 0, 0, 1588,
	1590, 1592, 1594, 1596, 0, 1599, 1609, 1609, 1605, 0,
	1600, 0, 1602, 0, 1578, 1357, 0, 1389, 0, 0,
	0, 0, 0, 0, 0, 0, 1454, 1455, 0, 0,
	1459, 0, 1461, 1462, 1463, 1465, 0, 0, 0, 1469,
	0, 1508, 1526, 1512, 1515, 0, 1519, 0, 1521, 0,
	739, 739, 0, 0, 1428, 1428, 1428, 0, 0, 0,
	0, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	1373, 0, 1374, 1375, 0, 0, 0, 816, 709, 0,
	0, 0, 0, 0, 1070, 0, 285, 273, 275, 0,
	0, 1036, 0, 0, 891, 892, 894, 0, 897, 898,
	899, 903, 732, 0, 732, 943, 1717, 456, 0, 0,
	984, 0, 959, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 630, 634, 23,
	733, 0, 512, 0, 513, 564, 521, 522, 787, 545,
	546, 0, 0, 787, 564, 564, 567, 0, 578, 1082,
	0, 0, 1044, 1148, 1116, 384, 0, 1228, 1229, 424,
	0, 1235, 1244, 1035, 1304, 0, 1244, 0, 0, 1246,
	1247, 0, 0, 0, 0, 407, 408, 0, 393, 0,
	0, 0, 0, 0, 0, 392, 0, 0, 434, 0,
	0, 0, 0, 0, 1718, 1717, 1717, 0, 401, 402,
	0, 405, 0, 0, 0, 0, 0, 0, 0, 0,
	1717, 1717, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1188, 0, 0, 0, 0, 0, 0,
	0, 1203, 1204, 943, 1717, 0, 0, 0, 456, 957,
	966, 0, 0, 0, 0, 0, 0, 820, 0, 0,
	819, 0, 0, 0, 0, 0, 732, 854, 0, 856,
	857, 831, -2, 0, 800, 836, 1573, 221, 222, 0,
	0, 227, 245, 247, 0, 0, 0, 246, 248, 252,
	253, 302, 305, 307, 751, 0, 0, 1106, 0, 904,
	905, 907, 908, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1767, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 902,
	622, 785, 790, 797, 860, 862, 97, 793, 785, 0,
	84, 19, 83, 75, 76, 0, 19, 0, 0, 0,
	0, 1702, 1701, 1687, 0, 1688, 1699, 1704, 0, 1707,
	0, 695, 0, 0, 675, 677, 0, 0, 675, 0,
	0, 684, 0, 0, 0, 675, 751, 691, 0, 748,
	746, 747, 0, 0, 586, 107, 360, 0, 0, 0,
	0, 0, 609, 0, 989, 141, 0, 0, 161, 0,
	0, 0, 1072, 1067, 1572, 1601, 1603, 0, 1610, 1606,
	1352, 1361, 1385, 0, 0, 1391, 1403, 1403, 0, 0,
	0, 1394, 1700, 1700, 1397, 1696, 1698, 1696, 1403, 1403,
	0, 98, 0, 0, 1460, 0, 0, 0, 671, 0,
	0, 0, 1424, 1426, 1428, 1428, 1435, 1429, 1436, 1437,
	1428, 1428, 1428, 1428, 1442, 1428, 1428, 1428, 1428, 1428,
	1428, 1428, 1428, 1422, 0, 0, 1631, 1632, 680, 0,
	0, 722, 723, 724, 725, 726, 0, 0, 53, 54,
	1072, 0, 277, 55, 56, 0, 0, 0, 896, 0,
	0, 0, 1221, 0, 947, 944, 945, 946, 0, 979,
	457, 458, 459, 460, 0, 0, 0, 983, 0, 970,
	952, 0, 0, 0, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, -2, 1039, 0, 0, 0, 1221, 1058, 0, 1221,
	1221, 0, 1090, 0, 1079, 683, 0, -2, 0, 0,
	632, 0, 0, 828, 515, 787, 539, 737, 738, 554,
	787, 787, 564, 582, 1090, 1081, 0, 374, 423, 0,
	1136, 0, 0, 1142, 0, 1149, 377, 0, 425, 0,
	1234, 1261, 1245, 1261, 1305, 1261, 1261, 1035, 0, 425,
	0, 0, 395, 431, 0, 0, 0, 0, 0, 391,
	428, 745, 378, 380, 381, 382, 432, 433, 435, 0,
	437, 438, 397, 409, 410, 411, 412, 0, 0, 0,
	404, 417, 418, 419, 420, 379, 1165, 1166, 1167, 1170,
	1171, 1172, 1173, 0, 0, 1176, 1177, 1178, 1179, 1180,
	1258, 1259, 1260, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1205, 1206, 1207, 1208, 1209, 1210, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 0, 0, 1200, 0, 947, 0,
	0, 0, 0, 979, 959, 0, 969, 0, 971, 972,
	0, 0, 653, 787, 295, 0, 823, 817, 0, 806,
	821, 822, 809, 0, 811, 0, 807, 808, 787, 799,
	830, 855, 832, 835, 837, 838, 844, 0, 0, 0,
	0, 224, 225, 226, 233, 0, 476, 239, 707, 0,
	1216, 612, 613, 1107, 1108, 620, 0, 909, 783, 0,
	0, 783, 79, 82, 0, 77, 0, 0, 0, 0,
	69, 67, 1695, 0, 0, 697, 121, 0, 0, 0,
	673, 0, 678, 675, 659, 669, 658, 666, 667, 686,
	1220, 675, 650, 649, 710, 695, 743, 744, 0, 1273,
	331, 0, 986, 141, 146, 147, 148, 142, 140, 993,
	0, 995, 0, 1065, 0, 0, 1607, 1390, 1362, 1392,
	1404, 1405, 1393, 0, 1364, 1365, 1395, 1396, 1398, 1399,
	1400, 1401, 1402, 1366, 1456, 0, 1458, 1466, 1467, 0,
	1516, 1520, 0, 0, 0, 0, 0, 1433, 1434, 1438,
	1439, 1440, 1441, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 739, 1423, 0, 0, 0, 0, 0, 0, 0,
	720, 0, 0, 0, 1071, 1073, 57, 884, 887, 893,
	895, 0, 0, 0, 1222, 1223, 1225, 1226, 1227, 0,
	920, 0, 0, 938, 939, 949, 0, 0, 0, 462,
	463, 0, 0, 0, 475, 471, 472, 473, 453, 978,
	966, 955, 0, 0, 965, 0, 1040, 1717, 1717, 1717,
	0, 0, 1150, 1717, 1717, 0, 1060, 0, 0, 1154,
	1093, 0, 0, 1084, 0, 853, 0, 0, 787, 631,
	634, 635, 731, 516, 558, 555, 787, 1093, 370, 1114,
	0, 0, 0, 0, 0, 1146, 0, 0, 1118, 0,
	396, 426, 0, -2, 0, 1262, 0, 1248, 1262, 0,
	0, 1261, 0, 385, 425, 0, 0, 0, 439, 443,
	444, 0, 441, 1300, 0, 442, 0, 430, 0, 436,
	1168, 1169, 0, 1174, 1175, 0, 1199, 0, 0, 445,
	0, 0, 0, 446, 451, 952, 0, 967, 0, 973,
	974, 739, 0, 0, 803, 824, 0, 0, 804, 0,
	805, 810, 812, 294, 839, 0, 0, 841, 842, 843,
	834, 241, 752, 906, 0, 773, 0, 0, 794, 774,
	0, 19, 0, 0, 72, 1705, 1708, 699, 0, 696,
	122, 0, 0, 0, 0, 663, 674, 657, 648, 697,
	749, 750, 143, 138, 994, 1075, 0, 1066, 0, 0,
	1468, 0, 1428, 1425, 1428, 1427, 1419, 0, 1376, 0,
	1378, 1379, 1380, 0, 1382, 1383, 0, 718, 0, 0,
	926, 1154, 0, 926, 948, 937, 0, 980, 981, 0,
	464, 465, 0, 468, 474, 950, 951, 0, 0, 963,
	0, 0, 0, 0, 1032, 1046, 0, 0, 0, -2,
	0, -2, 1057, 0, 1099, 0, 1091, 0, 1083, 0,
	1086, 787, 787, -2, 628, 633, 0, 559, 1099, 1116,
	0, 1137, 0, 0, 0, 0, 0, 0, 0, 1117,
	0, 1130, 427, 1263, -2, 1276, 1278, 0, 1045, 1281,
	1282, 0, 0, 0, 0, 0, 0, 1326, 1290, 0,
	0, 1294, 1295, 1296, 0, 0, 1299, 0, 1625, 1626,
	0, 1303, 0, 0, 0, 0, 0, 0, 0, 1242,
	386, 387, 0, 389, 390, 1717, 1301, 429, 383, 1717,
	399, 1198, 1201, 1202, 450, 447, 448, 955, 958, 654,
	734, 296, 297, 825, 0, 818, 848, 845, 0, 0,
	910, 784, 786, 73, 78, 0, 0, 701, 0, 698,
	0, 692, 694, 132, 662, 699, 94, 124, 0, 0,
	1363, 1457, 1507, 1431, 1432, 0, 1420, 0, 1414, 1415,
	1416, 1421, 0, 0, 721, 716, 0, 912, 919, 933,
	1051, 1224, 918, 0, 0, 461, 466, 0, 469, 470,
	0, 953, 954, 0, 961, 0, 0, 1019, 1696, 0,
	1041, 1042, 1213, 1214, 1043, 1151, 1152, 1153, 1109, 1059,
	0, -2, 1162, 0, 1055, 1075, 1109, 0, 1087, 0,
	1094, 0, 1092, 1085, 739, 629, 1096, 376, 1148, 1138,
	0, 1140, 0, 0, 0, 0, 1119, -2, 0, 1277,
	1279, 1280, 1283, 1284, 1285, 1331, 1332, 1333, 0, 0,
	1288, 1328, 1329, 1330, 1289, 0, 0, 0, 0, 0,
	1623, 1624, 1324, 0, 0, 1249, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1250, 0, 0, 0, 1241, 1243, 388,
	0, 0, 1717, 968, 293, 0, 0, 849, 851, 846,
	847, 68, 70, 85, 0, 700, 123, 0, 701, 86,
	0, 115, 0, 1076, 0, 1430, 1417, 0, 0, 0,
	0, 0, 1627, 1628, 1629, 0, 1377, 1381, 0, 0,
	934, 935, 940, 0, 942, 467, 956, 960, 963, 0,
	1010, 0, 745, 0, 1111, 0, 1061, 1044, 1164, 1717,
	1062, 1111, 0, 1156, 1717, 1717, 1077, 0, 1089, 0,
	1101, 0, 1095, 734, 369, 0, 1098, 1134, 1139, 1141,
	1143, 0, 1147, 1145, 1120, -2, 0, 1128, 0, 0,
	1286, 1287, 0, 0, 1523, 1717, 0, 1319, 0, 1010,
	1010, 1010, 1010, 0, 440, 398, 0, 826, 840, 0,
	0, 0, 690, 95, 112, 0, 125, 126, 0, 0,
	0, 0, 1068, 0, 1406, 0, 0, 0, 1410, 1411,
	1412, 1413, 0, 911, 0, 941, 962, 964, 1009, 1020,
	1021, 745, 1054, 0, 1148, 1163, 0, 1056, 1155, 0,
	0, 0, 1088, 1100, 0, 1103, 627, 1097, 1115, 0,
	1144, 1121, 1129, 0, 1124, 0, 0, 0, 1327, 0,
	1293, 0, 1298, 1307, 1320, 0, 0, 1230, 0, 1232,
	0, 1236, 0, 1238, 0, 0, 400, 850, 852, 0,
	703, 693, 99, 0, 121, 118, 0, 127, 0, 0,
	0, 0, 1064, 0, 0, 1407, 1408, 1409, 0, 913,
	914, 927, 1011, 1717, 1717, 0, 0, 0, 1017, 1018,
	1022, 0, 1136, 1168, 1157, 1158, 1159, 1102, 1135, 1123,
	0, -2, 1131, 0, 0, 1575, 1585, 1586, 1291, 1297,
	1306, 1308, 1309, 0, 1321, 1322, 1323, 1325, 1010, 1010,
	1010, 1010, 1240, 702, 0, 88, 0, 0, 116, 117,
	119, 0, 128, 0, 130, 131, 0, 1418, 915, 0,
	0, 1014, 1015, 0, 1112, 0, 1114, 1125, -2, 0,
	1133, 0, 1292, 1310, 0, 1311, 0, 0, 0, 1231,
	1233, 1237, 1239, 704, 1074, 0, 100, 0, 102, 104,
	105, 1264, 113, 114, 120, 129, 0, 900, 916, 0,
	1012, 1013, 1016, 0, 1116, 1132, 1576, 1312, 1314, 1315,
	0, 0, 1313, 89, 90, 0, 101, 0, 0, 1069,
	917, 1113, 1110, 1316, 1318, 1317, 0, 0, 103, 1265,
	91, 92, 93, 0, 1266,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 627, 624,
	125, 124, 126, 3, 628, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 625, 137, 626, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:800
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:807
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:813
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:821
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:827
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:831
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:850
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:856
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:865
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:905
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:914
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:925
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:935
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:945
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:958
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:978
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:984
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:991
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:999
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1005
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1014
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1024
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1048
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1058
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1066
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1076
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1083
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1102
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1106
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1112
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1116
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1122
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1141
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1145
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1151
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1160
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1164
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1170
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1211
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1215
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1221
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1225
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1231
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1238
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1246
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1250
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1264
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1268
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1272
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1277
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1281
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1285
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1291
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1300
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1311
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1315
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1321
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1325
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1331
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1335
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1341
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1365
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1384
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1388
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1392
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1397
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1401
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1410
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1420
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1427
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1432
		{
			yyVAL.str = "\n"
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1439
		{
			yyVAL.str = yyDollar[3].str
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1444
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1448
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1476
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1480
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1486
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1494
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1514
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1533
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1558
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1562
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1566
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1571
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1575
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1581
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1594
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1605
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1618
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1622
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1632
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1645
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1658
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1664
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1670
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1677
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1685
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1694
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1698
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1702
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1706
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1710
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1714
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1721
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1725
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1731
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1738
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1747
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1751
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1757
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1761
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1765
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1769
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1773
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1777
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1781
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1785
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1789
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1793
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1797
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1801
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1805
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1809
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1813
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1817
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1821
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1825
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1829
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1833
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1837
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1841
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1845
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1849
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1853
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1857
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1861
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1865
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1869
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1873
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1877
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1881
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1885
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1889
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1893
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1897
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1901
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1905
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1909
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1913
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1917
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1921
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1925
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1929
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1933
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1937
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1941
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1945
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1949
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1953
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1966
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1973
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1980
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1990
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1994
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2000
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2007
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2015
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2019
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2023
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2027
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2033
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2037
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2043
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2050
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2057
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2066
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2096
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2100
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2104
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2110
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2116
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2120
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2127
		{
			yyVAL.str = yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2133
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2137
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2143
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2151
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2160
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2169
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2177
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2185
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2208
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2231
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2238
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2245
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2253
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2260
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2267
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2276
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2280
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2284
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2290
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2294
		{
			yyVAL.str = yyDollar[1].str
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2300
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2304
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2310
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2314
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2325
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2331
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2336
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2340
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2344
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2348
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2352
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2356
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2360
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2364
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2368
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2374
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2378
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2382
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2386
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2396
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2402
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2415
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2428
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2441
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2454
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2470
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2477
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2488
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2499
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2503
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2519
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2525
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2529
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2535
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2541
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2545
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2549
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2553
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2559
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2571
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2577
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2581
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2587
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2591
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2597
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2603
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2614
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2620
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2624
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2628
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2632
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2636
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2640
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2648
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2656
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2666
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2678
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2682
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2690
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2698
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2737
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2741
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2747
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2753
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2758
		{
			yyVAL.str = "true"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2759
		{
			yyVAL.str = "false"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2760
		{
			yyVAL.str = yyDollar[1].str
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2765
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2782
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2805
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2815
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2822
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2831
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2835
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2841
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2845
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2869
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2879
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2895
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2913
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2917
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2923
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2927
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2933
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2939
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2947
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2957
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2965
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2975
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2985
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2995
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3002
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3006
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3010
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3014
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3018
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3025
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3031
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3035
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3039
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3043
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3047
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3051
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3055
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3059
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3064
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3095
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3099
		{
			yyVAL.str = string("COLUMN")
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3104
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3110
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3116
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3124
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3128
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3134
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3142
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3149
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3155
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3161
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3167
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3173
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3180
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3187
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3195
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3201
		{
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = int64(yyDollar[6].item.(int64))
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3208
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3214
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3222
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3226
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3233
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3251
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3265
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3279
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3292
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3298
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3309
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3322
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3326
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3334
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3338
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3343
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3347
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3363
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3367
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3371
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3375
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3382
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3386
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3390
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3394
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3401
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3405
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3412
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3416
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3420
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3424
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3431
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3438
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3444
		{
			yyVAL.item = nil
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3449
		{
			yyVAL.item = nil
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3491
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3500
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3508
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3516
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3520
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3524
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3535
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3539
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3545
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3550
		{
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3554
		{
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3559
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3569
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3579
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3587
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3593
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3599
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3605
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3611
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3617
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3623
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3632
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3636
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3640
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3644
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3648
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3652
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3656
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3660
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3666
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3675
		{
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3677
		{
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3686
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3696
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3705
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3709
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3713
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3719
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3725
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3731
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3746
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3756
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3768
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3772
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3778
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3790
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3804
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3810
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3817
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3821
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3826
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3830
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3834
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3839
		{
			yyVAL.str = ""
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3843
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3849
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3862
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3866
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3872
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3877
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3881
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3885
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3891
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3897
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3901
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3907
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3913
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3917
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3921
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3927
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3931
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3981
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3985
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3991
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4004
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4012
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4021
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4027
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4035
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4043
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4051
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4057
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4065
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4071
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4079
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4085
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4095
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4100
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4107
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4123
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4136
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4147
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4151
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4157
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4162
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4169
		{
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4171
		{
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4174
		{
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4183
		{
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4187
		{
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4192
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4201
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4208
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4214
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4222
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4229
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4236
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4256
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4266
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4270
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4276
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4283
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4289
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4297
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4304
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4311
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4330
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4334
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4338
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4343
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4347
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4351
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4357
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4366
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4370
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4376
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4380
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4386
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4390
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4396
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4401
		{
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4405
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4412
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4416
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4423
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4428
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4432
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4438
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4442
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4448
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4452
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4457
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4461
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4474
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4485
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4496
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4518
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4541
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4549
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4558
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4562
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4575
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4579
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4584
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4588
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4595
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4600
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4607
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4613
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4617
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4621
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4625
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4629
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4633
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4638
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4642
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4648
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4658
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4673
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4677
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4691
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4695
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4701
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4710
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4714
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4718
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4722
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4726
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4732
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4739
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4748
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4752
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4758
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4766
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4770
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4779
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4785
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4789
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4793
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4798
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4802
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4808
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4814
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4818
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4824
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4829
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4833
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4837
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4842
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4846
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4850
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4855
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4859
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4867
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4871
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4875
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4889
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4893
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4903
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4913
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4923
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4935
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4943
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4951
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4960
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4968
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4976
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4984
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4992
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5000
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5008
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5016
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5024
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5034
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5045
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5059
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5063
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5067
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5072
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5076
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5080
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5089
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5093
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5098
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5102
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5107
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5111
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5117
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5121
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5127
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5131
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5136
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5140
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5145
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5153
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5159
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5167
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5175
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5185
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5191
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5200
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5209
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5218
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5228
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5232
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5242
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5246
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5250
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5254
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5260
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5270
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5274
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5280
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5286
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5290
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5296
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5302
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5306
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5310
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5316
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5320
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5326
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5330
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5336
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5340
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5346
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5350
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5360
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5373
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5379
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5385
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5398
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5409
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5416
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5420
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5426
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5436
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5440
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5444
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5449
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5453
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5457
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5461
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5466
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5470
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5474
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5478
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5482
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5487
		{
			yyVAL.str = ""
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5491
		{
			yyVAL.str = yyDollar[1].str
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5495
		{
			yyVAL.str = yyDollar[2].str
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5501
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5507
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5511
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5515
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5519
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5523
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5529
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 884:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5569
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5582
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5588
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 887:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5594
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5607
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5612
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5618
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5625
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5629
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5635
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5641
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5646
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5650
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5654
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5658
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5665
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5698
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5703
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5709
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5716
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5720
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5726
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5732
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5736
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5740
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5746
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5752
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5758
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5762
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5768
		{
			yyVAL.str = ""
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5775
		{
			yyVAL.str = yyDollar[2].str
		}
	case 918:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5781
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5796
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5813
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].str
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5830
		{
			yyVAL.str = yyDollar[1].str
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5834
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5840
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5844
		{
			yyVAL.str = "DEFINER = "
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5848
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5853
		{
			yyVAL.str = ""
		}
	case 927:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5857
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5871
		{
			yyVAL.str = ""
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5879
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 937:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5885
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].str
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5898
		{
			yyVAL.str = yyDollar[1].str
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5902
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5908
		{
			var Typ = tree.AccountIdentifiedByPassword
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5917
		{
			var Typ = tree.AccountIdentifiedByRandomPassword
			var Str string
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5926
		{
			var Typ = tree.AccountIdentifiedWithSSL
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5936
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5942
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5949
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5956
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5964
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5970
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5979
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5996
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6013
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6031
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6037
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6044
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6052
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6058
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6066
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6072
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6080
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6086
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6095
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6099
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6104
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6108
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6115
		{
			yyVAL.str = yyDollar[3].str
		}
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6120
		{
			yyVAL.str = ""
		}
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6124
		{
			yyVAL.str = yyDollar[2].str
		}
	case 968:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6130
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6143
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6152
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6156
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6162
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6168
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6174
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6183
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6191
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6199
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6207
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6212
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6224
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6235
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6344
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6348
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6354
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6367
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6371
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6377
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6390
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6394
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6398
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6403
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6407
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6413
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6420
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6426
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6435
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 998:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6442
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6453
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6457
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6463
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6472
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6476
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6480
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6485
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6489
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6493
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6497
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6503
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6534
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6538
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6564
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6570
		{
			io := tree.NewIndexOption()
			io.AlgoParamList = int64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6576
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6582
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6588
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6594
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6600
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6608
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6612
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6618
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6632
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6646
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6650
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6654
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6658
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6662
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6666
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6670
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6676
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6691
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6695
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6706
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6710
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6715
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6719
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6725
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6729
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6735
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6744
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6753
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6759
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6763
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6769
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6780
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6786
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6804
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6822
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6840
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6856
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6860
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6866
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6878
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6887
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6899
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6909
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6919
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6930
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6940
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6953
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6960
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6970
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6983
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6991
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7000
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7009
		{
			yyVAL.str = ""
		}
	case 1069:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7013
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7019
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7023
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7028
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7032
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7039
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7051
		{
			yyVAL.str = ""
		}
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7055
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1077:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7061
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7082
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7096
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7100
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7104
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7110
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7114
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7121
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7128
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7135
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7142
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7146
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7150
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7154
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7158
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7165
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7176
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7183
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7190
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7194
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7200
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7206
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7210
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7217
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7224
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7231
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7238
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7242
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7247
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7251
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7255
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7260
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7264
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7277
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7281
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7289
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7297
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7301
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7313
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7317
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7323
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7327
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7333
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7346
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7360
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7364
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7370
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7374
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7380
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7389
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7400
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7404
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7409
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7413
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7419
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7424
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7432
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7436
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7446
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7450
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7461
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7469
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7477
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7485
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7496
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7505
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7515
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7525
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7529
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7534
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7538
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7544
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7548
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7554
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7563
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7573
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7577
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7583
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7587
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7593
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7602
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7612
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7616
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7622
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7626
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7630
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7636
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7640
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7644
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7648
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7652
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7656
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7660
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7665
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7669
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7673
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7677
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7681
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7685
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7689
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7693
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7697
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7701
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7705
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7709
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7713
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7719
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7725
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7729
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7733
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7737
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7741
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7747
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7753
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7759
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7765
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7771
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7777
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7781
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7785
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7789
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7796
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7800
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7806
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7817
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7821
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7827
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7831
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7835
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7839
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7843
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7847
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7861
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7865
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7874
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7879
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7884
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[3].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7892
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7901
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7908
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7912
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7918
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7922
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7926
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7932
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7936
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7942
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7955
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7968
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8007
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8047
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8061
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8067
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8080
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8093
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8106
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8119
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8134
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8144
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8150
		{
			yyVAL.str = ""
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8154
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8164
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8170
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8176
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8197
		{
			yyVAL.str = ""
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8201
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8207
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8213
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8217
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8221
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8227
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8231
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8235
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8239
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8245
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8249
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8253
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8258
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8262
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8268
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8272
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8278
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8282
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8286
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8290
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8294
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8298
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8303
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8307
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8311
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8315
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8319
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8323
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8327
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8331
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8335
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8339
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8352
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8356
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8360
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8364
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8368
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8372
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8378
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8382
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8387
		{
			yyVAL.str = ""
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8391
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8397
		{
			yyVAL.str = ""
		}
	case 1305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8401
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8407
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8424
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8431
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8438
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8445
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8452
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8461
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8467
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8473
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8477
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8481
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8485
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8489
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8494
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8501
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8505
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8509
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8514
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8518
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8523
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8527
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8543
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8549
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8553
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8557
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8561
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8565
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8569
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8573
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8577
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8581
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8585
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8589
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8593
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8597
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8603
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8607
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8611
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8615
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8619
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8623
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8627
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8631
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8635
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8639
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8681
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8685
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8689
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8694
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8702
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8706
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8710
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8714
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8718
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8727
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8731
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8735
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8739
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8743
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8747
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8753
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8761
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8769
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8779
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8789
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8799
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8808
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8818
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8828
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8838
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8847
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8857
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8861
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8866
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8870
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8876
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8880
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8886
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8895
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8907
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8924
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8941
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8954
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8967
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8979
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8993
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9008
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9023
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9040
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9055
		{
		}
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9062
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9066
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9070
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9076
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9080
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9084
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9088
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9094
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9098
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9102
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9108
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9116
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9126
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9130
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9137
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9142
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9146
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9151
		{
			yyVAL.str = ","
		}
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9155
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9160
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9164
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9169
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9176
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9202
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9213
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9224
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9234
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9244
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9254
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9263
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9272
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9282
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9292
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9302
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9312
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9322
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9332
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9342
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9352
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9362
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9372
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9382
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9392
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9411
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9419
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9427
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9435
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9443
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9453
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9461
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9470
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9478
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9486
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9494
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9502
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9513
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9523
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9535
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9546
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9568
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9604
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9616
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9628
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9639
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9647
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9654
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9661
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9673
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9681
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9691
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9701
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9709
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9720
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9729
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9738
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9746
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9756
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9764
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9774
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9778
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9788
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9807
		{
		}
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9809
		{
		}
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9850
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9861
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9865
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9869
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9875
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9880
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9884
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9890
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9894
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9900
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9904
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9911
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9915
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9919
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9927
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9931
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9935
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9940
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9944
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9950
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9954
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9958
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9962
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9966
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9970
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9974
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9978
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9982
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9986
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9994
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9998
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10002
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10006
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10010
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10014
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10018
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10022
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10026
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10030
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10036
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10040
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10046
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10050
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10057
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10061
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10065
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10071
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10075
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10079
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10083
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10087
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10091
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10095
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10101
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10105
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10109
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10113
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10119
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10132
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10137
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10143
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10147
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10160
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10165
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10169
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10173
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10177
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10181
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10188
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10192
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10196
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10200
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10207
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10218
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10223
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10229
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10241
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10253
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10265
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10278
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10291
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10304
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10317
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10330
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10343
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10356
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10369
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10382
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10395
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10410
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10437
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10479
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10515
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10551
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10568
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10580
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10600
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10620
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10640
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10656
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10669
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10682
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10695
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10708
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10720
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10732
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10744
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10756
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10768
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10780
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10792
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10804
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10816
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10829
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10842
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10855
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10868
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10883
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10891
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10900
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10910
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10933
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10938
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10944
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10951
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10955
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10960
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10964
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10970
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10976
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10983
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10990
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10999
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11006
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11013
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11022
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11026
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11030
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11036
		{
		}
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11038
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11048
		{
			yyVAL.str = ""
		}
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11052
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
