// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CROSS_L2 = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const INCREMENT = 57659
const CYCLE = 57660
const MINVALUE = 57661
const PUBLICATION = 57662
const SUBSCRIPTIONS = 57663
const PUBLICATIONS = 57664
const PROPERTIES = 57665
const PARSER = 57666
const VISIBLE = 57667
const INVISIBLE = 57668
const BTREE = 57669
const HASH = 57670
const RTREE = 57671
const BSI = 57672
const IVFFLAT = 57673
const MASTER = 57674
const ZONEMAP = 57675
const LEADING = 57676
const BOTH = 57677
const TRAILING = 57678
const UNKNOWN = 57679
const LISTS = 57680
const OP_TYPE = 57681
const REINDEX = 57682
const EXPIRE = 57683
const ACCOUNT = 57684
const ACCOUNTS = 57685
const UNLOCK = 57686
const DAY = 57687
const NEVER = 57688
const PUMP = 57689
const MYSQL_COMPATIBILITY_MODE = 57690
const UNIQUE_CHECK_ON_AUTOINCR = 57691
const MODIFY = 57692
const CHANGE = 57693
const SECOND = 57694
const ASCII = 57695
const COALESCE = 57696
const COLLATION = 57697
const HOUR = 57698
const MICROSECOND = 57699
const MINUTE = 57700
const MONTH = 57701
const QUARTER = 57702
const REPEAT = 57703
const REVERSE = 57704
const ROW_COUNT = 57705
const WEEK = 57706
const REVOKE = 57707
const FUNCTION = 57708
const PRIVILEGES = 57709
const TABLESPACE = 57710
const EXECUTE = 57711
const SUPER = 57712
const GRANT = 57713
const OPTION = 57714
const REFERENCES = 57715
const REPLICATION = 57716
const SLAVE = 57717
const CLIENT = 57718
const USAGE = 57719
const RELOAD = 57720
const FILE = 57721
const TEMPORARY = 57722
const ROUTINE = 57723
const EVENT = 57724
const SHUTDOWN = 57725
const NULLX = 57726
const AUTO_INCREMENT = 57727
const APPROXNUM = 57728
const SIGNED = 57729
const UNSIGNED = 57730
const ZEROFILL = 57731
const ENGINES = 57732
const LOW_CARDINALITY = 57733
const AUTOEXTEND_SIZE = 57734
const ADMIN_NAME = 57735
const RANDOM = 57736
const SUSPEND = 57737
const ATTRIBUTE = 57738
const HISTORY = 57739
const REUSE = 57740
const CURRENT = 57741
const OPTIONAL = 57742
const FAILED_LOGIN_ATTEMPTS = 57743
const PASSWORD_LOCK_TIME = 57744
const UNBOUNDED = 57745
const SECONDARY = 57746
const RESTRICTED = 57747
const USER = 57748
const IDENTIFIED = 57749
const CIPHER = 57750
const ISSUER = 57751
const X509 = 57752
const SUBJECT = 57753
const SAN = 57754
const REQUIRE = 57755
const SSL = 57756
const NONE = 57757
const PASSWORD = 57758
const SHARED = 57759
const EXCLUSIVE = 57760
const MAX_QUERIES_PER_HOUR = 57761
const MAX_UPDATES_PER_HOUR = 57762
const MAX_CONNECTIONS_PER_HOUR = 57763
const MAX_USER_CONNECTIONS = 57764
const FORMAT = 57765
const VERBOSE = 57766
const CONNECTION = 57767
const TRIGGERS = 57768
const PROFILES = 57769
const LOAD = 57770
const INLINE = 57771
const INFILE = 57772
const TERMINATED = 57773
const OPTIONALLY = 57774
const ENCLOSED = 57775
const ESCAPED = 57776
const STARTING = 57777
const LINES = 57778
const ROWS = 57779
const IMPORT = 57780
const DISCARD = 57781
const JSONTYPE = 57782
const CHECKING = 57783
const NOCHECKING = 57784
const MODUMP = 57785
const OVER = 57786
const PRECEDING = 57787
const FOLLOWING = 57788
const GROUPS = 57789
const DATABASES = 57790
const TABLES = 57791
const SEQUENCES = 57792
const EXTENDED = 57793
const FULL = 57794
const PROCESSLIST = 57795
const FIELDS = 57796
const COLUMNS = 57797
const OPEN = 57798
const ERRORS = 57799
const WARNINGS = 57800
const INDEXES = 57801
const SCHEMAS = 57802
const NODE = 57803
const LOCKS = 57804
const ROLES = 57805
const TABLE_NUMBER = 57806
const COLUMN_NUMBER = 57807
const TABLE_VALUES = 57808
const TABLE_SIZE = 57809
const NAMES = 57810
const GLOBAL = 57811
const PERSIST = 57812
const SESSION = 57813
const ISOLATION = 57814
const LEVEL = 57815
const READ = 57816
const WRITE = 57817
const ONLY = 57818
const REPEATABLE = 57819
const COMMITTED = 57820
const UNCOMMITTED = 57821
const SERIALIZABLE = 57822
const LOCAL = 57823
const EVENTS = 57824
const PLUGINS = 57825
const CURRENT_TIMESTAMP = 57826
const DATABASE = 57827
const CURRENT_TIME = 57828
const LOCALTIME = 57829
const LOCALTIMESTAMP = 57830
const UTC_DATE = 57831
const UTC_TIME = 57832
const UTC_TIMESTAMP = 57833
const REPLACE = 57834
const CONVERT = 57835
const SEPARATOR = 57836
const TIMESTAMPDIFF = 57837
const CURRENT_DATE = 57838
const CURRENT_USER = 57839
const CURRENT_ROLE = 57840
const SECOND_MICROSECOND = 57841
const MINUTE_MICROSECOND = 57842
const MINUTE_SECOND = 57843
const HOUR_MICROSECOND = 57844
const HOUR_SECOND = 57845
const HOUR_MINUTE = 57846
const DAY_MICROSECOND = 57847
const DAY_SECOND = 57848
const DAY_MINUTE = 57849
const DAY_HOUR = 57850
const YEAR_MONTH = 57851
const SQL_TSI_HOUR = 57852
const SQL_TSI_DAY = 57853
const SQL_TSI_WEEK = 57854
const SQL_TSI_MONTH = 57855
const SQL_TSI_QUARTER = 57856
const SQL_TSI_YEAR = 57857
const SQL_TSI_SECOND = 57858
const SQL_TSI_MINUTE = 57859
const RECURSIVE = 57860
const CONFIG = 57861
const DRAINER = 57862
const SOURCE = 57863
const STREAM = 57864
const HEADERS = 57865
const CONNECTOR = 57866
const CONNECTORS = 57867
const DAEMON = 57868
const PAUSE = 57869
const CANCEL = 57870
const TASK = 57871
const RESUME = 57872
const MATCH = 57873
const AGAINST = 57874
const BOOLEAN = 57875
const LANGUAGE = 57876
const WITH = 57877
const QUERY = 57878
const EXPANSION = 57879
const WITHOUT = 57880
const VALIDATION = 57881
const UPGRADE = 57882
const RETRY = 57883
const ADDDATE = 57884
const BIT_AND = 57885
const BIT_OR = 57886
const BIT_XOR = 57887
const CAST = 57888
const COUNT = 57889
const APPROX_COUNT = 57890
const APPROX_COUNT_DISTINCT = 57891
const SERIAL_EXTRACT = 57892
const APPROX_PERCENTILE = 57893
const CURDATE = 57894
const CURTIME = 57895
const DATE_ADD = 57896
const DATE_SUB = 57897
const EXTRACT = 57898
const GROUP_CONCAT = 57899
const MAX = 57900
const MID = 57901
const MIN = 57902
const NOW = 57903
const POSITION = 57904
const SESSION_USER = 57905
const STD = 57906
const STDDEV = 57907
const MEDIAN = 57908
const CLUSTER_CENTERS = 57909
const KMEANS = 57910
const STDDEV_POP = 57911
const STDDEV_SAMP = 57912
const SUBDATE = 57913
const SUBSTR = 57914
const SUBSTRING = 57915
const SUM = 57916
const SYSDATE = 57917
const SYSTEM_USER = 57918
const TRANSLATE = 57919
const TRIM = 57920
const VARIANCE = 57921
const VAR_POP = 57922
const VAR_SAMP = 57923
const AVG = 57924
const RANK = 57925
const ROW_NUMBER = 57926
const DENSE_RANK = 57927
const BIT_CAST = 57928
const BITMAP_BIT_POSITION = 57929
const BITMAP_BUCKET_NUMBER = 57930
const BITMAP_COUNT = 57931
const BITMAP_CONSTRUCT_AGG = 57932
const BITMAP_OR_AGG = 57933
const NEXTVAL = 57934
const SETVAL = 57935
const CURRVAL = 57936
const LASTVAL = 57937
const ARROW = 57938
const ROW = 57939
const OUTFILE = 57940
const HEADER = 57941
const MAX_FILE_SIZE = 57942
const FORCE_QUOTE = 57943
const PARALLEL = 57944
const STRICT = 57945
const UNUSED = 57946
const BINDINGS = 57947
const DO = 57948
const DECLARE = 57949
const LOOP = 57950
const WHILE = 57951
const LEAVE = 57952
const ITERATE = 57953
const UNTIL = 57954
const CALL = 57955
const PREV = 57956
const SLIDING = 57957
const FILL = 57958
const SPBEGIN = 57959
const BACKEND = 57960
const SERVERS = 57961
const HANDLER = 57962
const PERCENT = 57963
const SAMPLE = 57964
const MO_TS = 57965
const PITR = 57966
const CDC = 57967
const GROUPING = 57968
const SETS = 57969
const CUBE = 57970
const ROLLUP = 57971
const LOGSERVICE = 57972
const REPLICAS = 57973
const STORES = 57974
const SETTINGS = 57975
const KILL = 57976
const BACKUP = 57977
const FILESYSTEM = 57978
const PARALLELISM = 57979
const RESTORE = 57980
const QUERY_RESULT = 57981

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"CHECKING",
	"NOCHECKING",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12826

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 141,
	11, 805,
	22, 805,
	-2, 798,
	-1, 166,
	246, 1232,
	248, 1131,
	-2, 1178,
	-1, 193,
	44, 628,
	248, 628,
	275, 635,
	276, 635,
	476, 628,
	-2, 663,
	-1, 233,
	660, 2006,
	-2, 532,
	-1, 543,
	660, 2129,
	-2, 412,
	-1, 601,
	660, 2188,
	-2, 410,
	-1, 602,
	660, 2189,
	-2, 411,
	-1, 603,
	660, 2190,
	-2, 413,
	-1, 743,
	327, 181,
	446, 181,
	447, 181,
	-2, 1907,
	-1, 810,
	86, 1691,
	-2, 2065,
	-1, 811,
	86, 1710,
	-2, 2036,
	-1, 815,
	86, 1711,
	-2, 2064,
	-1, 849,
	86, 1618,
	-2, 2268,
	-1, 850,
	86, 1619,
	-2, 2267,
	-1, 851,
	86, 1620,
	-2, 2257,
	-1, 852,
	86, 2229,
	-2, 2250,
	-1, 853,
	86, 2230,
	-2, 2251,
	-1, 854,
	86, 2231,
	-2, 2259,
	-1, 855,
	86, 2232,
	-2, 2239,
	-1, 856,
	86, 2233,
	-2, 2248,
	-1, 857,
	86, 2234,
	-2, 2260,
	-1, 858,
	86, 2235,
	-2, 2261,
	-1, 859,
	86, 2236,
	-2, 2266,
	-1, 860,
	86, 2237,
	-2, 2271,
	-1, 861,
	86, 2238,
	-2, 2272,
	-1, 862,
	86, 1687,
	-2, 2103,
	-1, 863,
	86, 1688,
	-2, 1891,
	-1, 864,
	86, 1689,
	-2, 2112,
	-1, 865,
	86, 1690,
	-2, 1900,
	-1, 867,
	86, 1693,
	-2, 1908,
	-1, 869,
	86, 1695,
	-2, 2136,
	-1, 871,
	86, 1698,
	-2, 1927,
	-1, 873,
	86, 1700,
	-2, 2148,
	-1, 874,
	86, 1701,
	-2, 2147,
	-1, 875,
	86, 1702,
	-2, 1972,
	-1, 876,
	86, 1703,
	-2, 2060,
	-1, 879,
	86, 1706,
	-2, 2159,
	-1, 881,
	86, 1708,
	-2, 2162,
	-1, 882,
	86, 1709,
	-2, 2164,
	-1, 883,
	86, 1712,
	-2, 2172,
	-1, 884,
	86, 1713,
	-2, 2045,
	-1, 885,
	86, 1714,
	-2, 2090,
	-1, 886,
	86, 1715,
	-2, 2055,
	-1, 887,
	86, 1716,
	-2, 2080,
	-1, 898,
	86, 1596,
	-2, 2262,
	-1, 899,
	86, 1597,
	-2, 2263,
	-1, 900,
	86, 1598,
	-2, 2264,
	-1, 1004,
	471, 663,
	472, 663,
	-2, 629,
	-1, 1055,
	128, 1891,
	139, 1891,
	159, 1891,
	-2, 1864,
	-1, 1176,
	22, 832,
	-2, 781,
	-1, 1286,
	11, 805,
	22, 805,
	-2, 1473,
	-1, 1370,
	22, 832,
	-2, 781,
	-1, 1729,
	86, 1763,
	-2, 2062,
	-1, 1730,
	86, 1764,
	-2, 2063,
	-1, 1905,
	87, 1003,
	-2, 1009,
	-1, 2359,
	111, 1170,
	155, 1170,
	195, 1170,
	198, 1170,
	288, 1170,
	-2, 1163,
	-1, 2520,
	11, 805,
	22, 805,
	-2, 944,
	-1, 2554,
	87, 1850,
	160, 1850,
	-2, 2047,
	-1, 2555,
	87, 1850,
	160, 1850,
	-2, 2046,
	-1, 2556,
	87, 1826,
	160, 1826,
	-2, 2033,
	-1, 2557,
	87, 1827,
	160, 1827,
	-2, 2038,
	-1, 2558,
	87, 1828,
	160, 1828,
	-2, 1960,
	-1, 2559,
	87, 1829,
	160, 1829,
	-2, 1954,
	-1, 2560,
	87, 1830,
	160, 1830,
	-2, 1880,
	-1, 2561,
	87, 1831,
	160, 1831,
	-2, 2035,
	-1, 2562,
	87, 1832,
	160, 1832,
	-2, 1958,
	-1, 2563,
	87, 1833,
	160, 1833,
	-2, 1953,
	-1, 2564,
	87, 1834,
	160, 1834,
	-2, 1941,
	-1, 2565,
	87, 1850,
	160, 1850,
	-2, 1942,
	-1, 2566,
	87, 1850,
	160, 1850,
	-2, 1943,
	-1, 2568,
	87, 1839,
	160, 1839,
	-2, 2080,
	-1, 2569,
	87, 1816,
	160, 1816,
	-2, 2065,
	-1, 2570,
	87, 1848,
	160, 1848,
	-2, 2036,
	-1, 2571,
	87, 1848,
	160, 1848,
	-2, 2064,
	-1, 2572,
	87, 1848,
	160, 1848,
	-2, 1909,
	-1, 2573,
	87, 1846,
	160, 1846,
	-2, 2055,
	-1, 2574,
	87, 1843,
	160, 1843,
	-2, 1932,
	-1, 2575,
	86, 1797,
	87, 1797,
	160, 1797,
	404, 1797,
	405, 1797,
	406, 1797,
	-2, 1879,
	-1, 2576,
	86, 1798,
	87, 1798,
	160, 1798,
	404, 1798,
	405, 1798,
	406, 1798,
	-2, 1881,
	-1, 2577,
	86, 1799,
	87, 1799,
	160, 1799,
	404, 1799,
	405, 1799,
	406, 1799,
	-2, 2108,
	-1, 2578,
	86, 1801,
	87, 1801,
	160, 1801,
	404, 1801,
	405, 1801,
	406, 1801,
	-2, 2037,
	-1, 2579,
	86, 1803,
	87, 1803,
	160, 1803,
	404, 1803,
	405, 1803,
	406, 1803,
	-2, 2016,
	-1, 2580,
	86, 1805,
	87, 1805,
	160, 1805,
	404, 1805,
	405, 1805,
	406, 1805,
	-2, 1959,
	-1, 2581,
	86, 1807,
	87, 1807,
	160, 1807,
	404, 1807,
	405, 1807,
	406, 1807,
	-2, 1937,
	-1, 2582,
	86, 1808,
	87, 1808,
	160, 1808,
	404, 1808,
	405, 1808,
	406, 1808,
	-2, 1938,
	-1, 2583,
	86, 1810,
	87, 1810,
	160, 1810,
	404, 1810,
	405, 1810,
	406, 1810,
	-2, 1878,
	-1, 2584,
	87, 1853,
	160, 1853,
	404, 1853,
	405, 1853,
	406, 1853,
	-2, 1914,
	-1, 2585,
	87, 1853,
	160, 1853,
	404, 1853,
	405, 1853,
	406, 1853,
	-2, 1928,
	-1, 2586,
	87, 1856,
	160, 1856,
	404, 1856,
	405, 1856,
	406, 1856,
	-2, 1910,
	-1, 2587,
	87, 1856,
	160, 1856,
	404, 1856,
	405, 1856,
	406, 1856,
	-2, 1975,
	-1, 2588,
	87, 1853,
	160, 1853,
	404, 1853,
	405, 1853,
	406, 1853,
	-2, 1998,
	-1, 2806,
	111, 1170,
	155, 1170,
	195, 1170,
	198, 1170,
	288, 1170,
	-2, 1164,
	-1, 2824,
	84, 725,
	160, 725,
	-2, 1348,
	-1, 3252,
	198, 1170,
	312, 1436,
	-2, 1408,
	-1, 3436,
	111, 1170,
	155, 1170,
	195, 1170,
	198, 1170,
	-2, 1288,
	-1, 3438,
	111, 1170,
	155, 1170,
	195, 1170,
	198, 1170,
	-2, 1288,
	-1, 3450,
	84, 725,
	160, 725,
	-2, 1348,
	-1, 3471,
	198, 1170,
	312, 1436,
	-2, 1409,
	-1, 3624,
	111, 1170,
	155, 1170,
	195, 1170,
	198, 1170,
	-2, 1289,
	-1, 3652,
	87, 1250,
	160, 1250,
	-2, 1170,
	-1, 3796,
	87, 1250,
	160, 1250,
	-2, 1170,
	-1, 3959,
	87, 1254,
	160, 1254,
	-2, 1170,
	-1, 4010,
	87, 1255,
	160, 1255,
	-2, 1170,
}

const yyPrivate = 57344

const yyLast = 55419

var yyAct = [...]int{
	777, 753, 4060, 779, 4032, 2854, 222, 4052, 3963, 1990,
	1709, 3969, 1630, 3970, 3456, 3555, 3862, 3271, 3962, 3796,
	3238, 3843, 3885, 762, 3920, 3680, 3345, 3485, 3774, 1705,
	755, 3744, 2848, 3834, 1322, 3795, 3346, 3612, 1542, 3863,
	1769, 3713, 807, 2851, 1054, 3765, 643, 3559, 1177, 1474,
	3418, 3844, 2946, 3846, 1480, 3423, 1756, 3550, 3472, 1938,
	2406, 3247, 1171, 661, 3633, 667, 667, 3195, 2827, 37,
	1712, 667, 685, 694, 3594, 3439, 694, 3621, 3209, 3171,
	3343, 2967, 3626, 2968, 3198, 3410, 2088, 2877, 2943, 2966,
	3249, 751, 2101, 3267, 3441, 3388, 2963, 3256, 2552, 2678,
	2050, 706, 2514, 1771, 1631, 2085, 1450, 2124, 3035, 2199,
	2550, 2995, 3311, 1950, 2795, 2955, 2156, 3178, 3218, 2409,
	3176, 3255, 207, 3172, 68, 2370, 702, 1774, 3174, 3173,
	1535, 1167, 2315, 2807, 2338, 3143, 750, 3083, 745, 140,
	2314, 691, 2182, 36, 2621, 2165, 3009, 2164, 1867, 1608,
	2643, 2157, 935, 1620, 2603, 1623, 3169, 2129, 2498, 1615,
	2515, 2195, 1619, 2081, 2054, 2879, 2784, 2194, 2779, 976,
	2493, 2859, 1980, 2407, 2819, 218, 8, 217, 7, 6,
	2369, 2359, 1914, 1703, 2231, 2196, 2548, 1551, 1770, 1582,
	1407, 1708, 1440, 754, 1115, 1520, 2350, 744, 643, 2402,
	1514, 1483, 1652, 1463, 752, 2715, 1949, 660, 1763, 763,
	1743, 2353, 1193, 1694, 2163, 1634, 2160, 2145, 1589, 699,
	1702, 15, 222, 1910, 222, 1047, 1106, 1107, 2494, 2522,
	1913, 902, 1519, 667, 676, 975, 2051, 1459, 1013, 1516,
	1573, 1775, 23, 746, 708, 709, 1086, 208, 114, 24,
	1392, 1475, 693, 17, 10, 952, 973, 204, 1484, 958,
	200, 1323, 999, 904, 1368, 705, 905, 663, 1254, 1255,
	1256, 1253, 1254, 1255, 1256, 1253, 1254, 1255, 1256, 1253,
	2203, 2524, 2714, 3853, 3762, 33, 2751, 2751, 2751, 1103,
	3453, 3354, 3225, 689, 3052, 3051, 2215, 1172, 3586, 3426,
	3338, 1173, 2666, 2609, 2607, 1880, 2604, 1099, 1592, 1098,
	679, 2606, 206, 662, 1596, 2313, 1387, 1443, 1444, 1445,
	1518, 3821, 1361, 924, 1645, 922, 1063, 3153, 697, 672,
	27, 1446, 2323, 668, 205, 64, 196, 167, 16, 1099,
	746, 1060, 1099, 2319, 1102, 1062, 1104, 1881, 1390, 3136,
	3138, 3133, 3135, 197, 1172, 1081, 4044, 687, 1497, 1874,
	188, 1383, 1594, 14, 198, 1033, 3548, 2743, 2741, 3031,
	1254, 1255, 1256, 1253, 3029, 1254, 1255, 1256, 1253, 2134,
	3829, 3720, 8, 139, 7, 3714, 1097, 3551, 3344, 2179,
	3848, 2159, 1317, 903, 3112, 2151, 2447, 4066, 125, 966,
	3842, 967, 690, 4041, 3728, 1252, 914, 201, 205, 3781,
	686, 2745, 3599, 1398, 3565, 3945, 3998, 205, 64, 196,
	167, 205, 923, 1216, 921, 2360, 2660, 1082, 2652, 3595,
	2200, 1048, 3440, 2361, 1629, 688, 3840, 3749, 2696, 3896,
	947, 3726, 205, 924, 2813, 1393, 205, 64, 196, 167,
	1559, 205, 1397, 3782, 961, 1396, 957, 3055, 1643, 205,
	1395, 1638, 922, 1064, 1058, 704, 1415, 1059, 3110, 205,
	1432, 2961, 2354, 2542, 1399, 1251, 2213, 642, 205, 205,
	1642, 201, 3003, 3004, 147, 148, 1883, 149, 150, 2770,
	201, 1635, 151, 2543, 2811, 152, 2098, 1650, 205, 64,
	196, 167, 1076, 1071, 1066, 1070, 1074, 3002, 139, 2065,
	2066, 2766, 938, 1028, 1026, 1637, 1027, 915, 3043, 201,
	205, 64, 196, 167, 201, 1675, 2064, 1647, 139, 1521,
	1079, 1523, 201, 3137, 1069, 3134, 1892, 1893, 205, 64,
	196, 167, 201, 1231, 2814, 3751, 1232, 205, 64, 196,
	167, 1649, 201, 2622, 1471, 1481, 1482, 2781, 166, 194,
	203, 195, 123, 1188, 2768, 1022, 893, 2782, 892, 894,
	895, 201, 896, 897, 1234, 1964, 1244, 1493, 3942, 1711,
	1494, 193, 187, 186, 1249, 1077, 2763, 963, 70, 956,
	2302, 1479, 3575, 201, 1080, 1478, 1481, 1482, 960, 959,
	1414, 1057, 2767, 1661, 1034, 3973, 3974, 1056, 3851, 1595,
	1593, 201, 1185, 3850, 3242, 941, 1067, 3240, 2780, 948,
	201, 2746, 3851, 3934, 2764, 2529, 1030, 3849, 2528, 3850,
	3933, 2530, 3925, 1695, 3849, 3932, 1699, 3938, 3997, 955,
	1078, 4036, 4037, 3922, 3347, 1191, 3832, 3036, 3922, 189,
	190, 191, 3717, 1715, 3347, 919, 1229, 1809, 965, 2217,
	1698, 3947, 3948, 954, 2647, 667, 667, 953, 1496, 2439,
	166, 1684, 203, 940, 3943, 3944, 667, 1181, 2898, 946,
	1068, 1182, 199, 2211, 2212, 2082, 2787, 1196, 1199, 3037,
	1032, 3038, 3859, 193, 1196, 1199, 694, 694, 2072, 667,
	1690, 944, 3361, 135, 2076, 3411, 2207, 192, 2488, 136,
	3191, 3073, 3835, 3836, 3837, 3838, 3604, 3416, 3189, 2482,
	1230, 2349, 2956, 3753, 3754, 964, 2142, 1602, 1601, 2771,
	1247, 1248, 3574, 3497, 2214, 3940, 2744, 3071, 1246, 964,
	1109, 1386, 3576, 2657, 192, 2769, 1700, 2445, 1219, 1507,
	691, 691, 691, 2096, 2097, 1416, 3549, 3030, 1469, 1075,
	740, 2950, 1294, 742, 3972, 945, 137, 2765, 741, 1031,
	1697, 2207, 1714, 1713, 3186, 3187, 2485, 2486, 2484, 3758,
	1180, 63, 3852, 3761, 3601, 3364, 3077, 2750, 2545, 1173,
	3188, 1173, 1242, 1243, 3185, 1072, 1173, 3707, 1073, 1233,
	1174, 3196, 3392, 2491, 3736, 1211, 3737, 2190, 1063, 1181,
	1241, 659, 3512, 3053, 2320, 2201, 3270, 3050, 1882, 4005,
	2201, 2236, 2201, 1060, 3509, 3207, 3244, 1062, 3566, 3219,
	65, 3878, 1099, 1495, 3873, 1099, 1099, 1099, 2820, 1326,
	1099, 1099, 3268, 3269, 962, 1190, 2945, 2477, 696, 692,
	695, 2202, 3786, 1173, 2220, 2222, 2223, 2959, 3502, 3780,
	3739, 1288, 2216, 3778, 2356, 145, 202, 3144, 146, 3864,
	3880, 3946, 3457, 168, 1721, 1724, 1725, 3886, 61, 2605,
	3708, 1063, 3239, 951, 1597, 1722, 1198, 1197, 2853, 1696,
	3464, 1458, 3738, 1198, 1197, 3591, 1060, 3273, 1083, 1065,
	1062, 3402, 689, 689, 689, 3400, 2849, 2850, 1029, 2853,
	3183, 3160, 1327, 65, 3197, 3727, 966, 2480, 967, 1389,
	903, 1391, 3513, 2412, 3858, 3671, 1187, 1200, 1644, 4072,
	692, 2457, 1169, 1403, 2456, 2742, 1175, 1406, 1176, 1059,
	2545, 1412, 661, 3600, 138, 45, 1208, 168, 1204, 1205,
	1366, 62, 692, 1371, 4055, 5, 168, 2661, 1394, 917,
	168, 3562, 1290, 1291, 1292, 1293, 687, 687, 687, 1210,
	692, 1884, 142, 143, 1295, 976, 144, 1685, 202, 692,
	1686, 168, 3752, 939, 937, 168, 1470, 3197, 747, 2425,
	168, 1184, 1186, 1189, 65, 2405, 2428, 918, 168, 1481,
	1482, 1202, 1481, 1482, 2786, 2793, 3666, 1224, 168, 1531,
	1226, 690, 690, 690, 3787, 1530, 65, 168, 168, 686,
	686, 686, 1209, 3660, 1456, 3779, 2083, 3887, 3192, 667,
	3074, 1455, 1509, 1454, 65, 3800, 667, 168, 1227, 2957,
	643, 643, 3755, 65, 688, 688, 688, 3766, 1477, 3442,
	643, 643, 3961, 2427, 1546, 1546, 3939, 667, 3245, 168,
	3248, 2790, 2791, 1236, 2411, 1168, 1237, 3132, 2899, 2413,
	2900, 2901, 3736, 2448, 3737, 2422, 2789, 168, 694, 1574,
	661, 1338, 1339, 1544, 1544, 1585, 168, 3014, 3015, 1452,
	3731, 3605, 3272, 1548, 1239, 4056, 2927, 2073, 2426, 1691,
	222, 2221, 1285, 2075, 2478, 2479, 2405, 1553, 1417, 643,
	1473, 1472, 3546, 1408, 929, 3184, 704, 3919, 3732, 1517,
	1220, 1723, 3845, 2414, 3268, 3269, 2997, 2999, 3739, 1409,
	1410, 1216, 3264, 3148, 2653, 1419, 1420, 1421, 1422, 1423,
	920, 1425, 3350, 2534, 2443, 1508, 1222, 1431, 1023, 1413,
	3681, 3682, 3683, 3687, 3685, 3686, 3684, 2204, 1225, 1228,
	3738, 1627, 2071, 1372, 2048, 933, 1632, 1405, 3799, 1370,
	931, 930, 2415, 1641, 1424, 965, 1235, 3302, 3076, 1430,
	1429, 1428, 1540, 1541, 1221, 2799, 2802, 2803, 2804, 2800,
	2801, 1427, 3205, 3673, 1035, 698, 1465, 1466, 3404, 970,
	971, 972, 1673, 1418, 2896, 2756, 968, 1886, 1100, 1101,
	3389, 2232, 2637, 1105, 929, 1240, 1546, 1437, 1546, 1181,
	2760, 1215, 2218, 2219, 1651, 3085, 3084, 2327, 1442, 4053,
	4054, 1439, 1025, 3265, 3960, 1024, 1402, 1636, 2329, 2328,
	1238, 1400, 1401, 1895, 1648, 3667, 3668, 932, 1896, 1460,
	1464, 1464, 1464, 1498, 1499, 2918, 2919, 691, 1023, 936,
	691, 691, 3584, 1223, 1485, 928, 1606, 1488, 1609, 1610,
	931, 930, 3150, 1683, 1460, 1460, 2326, 1603, 3662, 1894,
	1611, 1612, 3661, 925, 2469, 926, 1546, 1575, 1529, 2421,
	1668, 1669, 1063, 2419, 3634, 4074, 1451, 1617, 1618, 1063,
	2998, 1640, 2442, 1181, 1773, 2341, 1451, 2416, 2270, 3929,
	1622, 2269, 1449, 1626, 1625, 1757, 1560, 1554, 1822, 1457,
	1804, 1805, 1710, 1808, 672, 3206, 1467, 1566, 2342, 2343,
	1572, 1823, 1586, 1252, 1486, 1487, 3308, 1489, 1490, 2545,
	1491, 4068, 1025, 3304, 1830, 1024, 1832, 1587, 1833, 1834,
	1835, 2928, 2930, 2931, 2932, 2929, 1178, 1023, 1216, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
	1742, 907, 908, 909, 910, 1754, 1755, 2624, 3351, 1707,
	3407, 2825, 2917, 1672, 1252, 1181, 3732, 3363, 4062, 2307,
	3733, 1885, 1671, 4050, 4012, 1888, 1726, 1890, 1178, 2385,
	1688, 3984, 3981, 1036, 3224, 1897, 1899, 1704, 1900, 689,
	1902, 1903, 689, 689, 2209, 1574, 1865, 1812, 1813, 1814,
	1911, 1546, 1916, 1917, 1831, 1919, 1509, 667, 1659, 1654,
	1828, 1662, 667, 1829, 2757, 1546, 1887, 1807, 2513, 976,
	3266, 1025, 1939, 3975, 1024, 2652, 2123, 3957, 3308, 2512,
	1842, 1843, 1682, 1680, 1546, 3277, 1868, 1679, 1676, 1701,
	1509, 4063, 1706, 1821, 3913, 685, 4013, 4013, 3912, 3275,
	1864, 1525, 1527, 687, 3985, 3982, 687, 687, 3142, 2059,
	2826, 1538, 1539, 3906, 3881, 1963, 1752, 1753, 1876, 1745,
	1254, 1255, 1256, 1253, 1970, 1970, 3140, 1509, 1660, 1509,
	1509, 1663, 1664, 667, 667, 1252, 2037, 1911, 2041, 1692,
	3869, 1546, 2045, 2046, 2352, 3819, 2246, 2061, 690, 643,
	3958, 690, 690, 912, 2826, 1918, 686, 3818, 2245, 686,
	686, 2513, 3813, 643, 1681, 1546, 2384, 1252, 3812, 1920,
	1598, 1252, 1678, 1967, 666, 666, 1693, 1367, 3017, 3811,
	674, 688, 3810, 1940, 688, 688, 2246, 2209, 1254, 1255,
	1256, 1253, 667, 1911, 1546, 2773, 2106, 1677, 667, 667,
	667, 702, 702, 1871, 1955, 3790, 3789, 2513, 2116, 2117,
	2118, 2119, 1836, 3870, 2747, 2125, 1214, 1992, 3820, 2121,
	1962, 3764, 222, 1965, 1966, 222, 222, 2039, 222, 1866,
	2374, 1213, 2642, 2099, 2244, 2246, 1907, 1908, 1909, 3518,
	1973, 2246, 1915, 1254, 1255, 1256, 1253, 2629, 1922, 1923,
	1924, 1925, 2246, 1872, 3466, 2246, 1931, 2412, 2415, 2200,
	3432, 2063, 2351, 2077, 1254, 1255, 1256, 1253, 1822, 1822,
	2167, 2398, 3381, 3377, 2312, 1944, 2091, 2092, 2209, 2209,
	1822, 1822, 1941, 1942, 2306, 1906, 2068, 2184, 2070, 3108,
	2108, 2109, 2110, 3285, 2246, 1951, 2105, 1953, 1954, 2089,
	2090, 2992, 1956, 2305, 1936, 2733, 1935, 2277, 1214, 2191,
	2242, 1960, 2545, 2721, 1961, 2094, 1972, 2713, 2668, 1216,
	1939, 2047, 1946, 1438, 1546, 2198, 2084, 3467, 2650, 1952,
	1760, 2178, 2044, 3433, 2169, 1974, 1975, 1532, 4081, 4064,
	1636, 3453, 674, 1460, 2133, 3382, 3378, 2136, 2137, 2638,
	2139, 2631, 1969, 1971, 3021, 2626, 2618, 1464, 2616, 2614,
	2038, 2828, 2412, 2415, 2655, 691, 3286, 1257, 2654, 1464,
	2646, 2043, 2612, 2373, 2513, 1287, 2049, 2308, 2374, 2192,
	907, 908, 909, 910, 1297, 1704, 1252, 2067, 2078, 2069,
	1252, 1252, 1063, 2416, 2174, 1063, 2284, 2283, 2411, 2405,
	2410, 2374, 2408, 2413, 1063, 2268, 2259, 1060, 2392, 3415,
	1306, 1062, 3475, 2162, 2104, 2265, 2103, 1947, 1948, 1060,
	2111, 2112, 2627, 1062, 2632, 2162, 780, 790, 2627, 2619,
	1795, 2617, 2613, 2258, 1957, 1958, 781, 2130, 782, 786,
	789, 785, 783, 784, 3697, 2613, 2374, 2250, 2257, 2247,
	2307, 2189, 2128, 3487, 1968, 2208, 2114, 2414, 1665, 1656,
	1303, 1557, 2147, 1201, 1165, 1160, 3478, 3516, 1285, 1252,
	1252, 2093, 2229, 2230, 1269, 3229, 927, 3473, 1252, 1252,
	3068, 2225, 3495, 3496, 4075, 4040, 2168, 2180, 3474, 3220,
	1939, 787, 2440, 1811, 1810, 2177, 2175, 1492, 2416, 2604,
	1461, 1063, 3336, 2411, 2405, 2410, 1252, 2408, 2413, 2188,
	1811, 1810, 2317, 2318, 3874, 2321, 1060, 689, 2324, 2400,
	1062, 1252, 2246, 3854, 788, 3479, 3763, 3635, 2209, 2330,
	3445, 1666, 912, 1447, 2186, 745, 2193, 1448, 667, 667,
	667, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1269, 2300,
	2206, 3443, 1536, 667, 667, 667, 667, 1534, 3875, 3724,
	3664, 3663, 2414, 1537, 2248, 3649, 2371, 2224, 2233, 3608,
	3221, 3636, 2278, 2279, 3446, 2281, 2377, 1509, 3425, 3309,
	2062, 687, 2288, 2227, 2228, 3300, 3292, 1745, 2226, 1272,
	1273, 1274, 1275, 1276, 1269, 3444, 2131, 3287, 1791, 3200,
	1447, 2238, 2953, 1509, 1448, 1788, 2187, 1848, 2952, 1790,
	1787, 1789, 1793, 1794, 3222, 2797, 2752, 1792, 2665, 2630,
	2434, 1462, 2536, 3494, 1841, 2410, 690, 934, 2172, 1837,
	1838, 1839, 1840, 2171, 686, 1844, 1845, 1846, 1847, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	3483, 2170, 1254, 1255, 1256, 1253, 1434, 1433, 2389, 688,
	1183, 1533, 2391, 3339, 2393, 2675, 2598, 2441, 1254, 1255,
	1256, 1253, 3480, 3484, 3482, 3481, 3022, 3337, 667, 1970,
	1254, 1255, 1256, 1253, 2379, 2380, 1764, 2517, 2517, 2061,
	2517, 2608, 1901, 703, 2382, 2383, 2301, 2303, 2304, 3931,
	1094, 1095, 1096, 1584, 1253, 2309, 1254, 1255, 1256, 1253,
	643, 643, 3489, 3490, 3676, 2677, 2394, 3675, 1181, 1254,
	1255, 1256, 1253, 3655, 1546, 667, 1256, 1253, 2600, 1764,
	3039, 2239, 2335, 1590, 1093, 2131, 2888, 1090, 667, 2886,
	2865, 2863, 2404, 2403, 1181, 2589, 661, 3602, 1326, 3609,
	3610, 4071, 1585, 2540, 2061, 4046, 4045, 2594, 1305, 2596,
	3497, 3988, 222, 1798, 1799, 1800, 1801, 1802, 1803, 1796,
	1797, 1304, 3476, 3956, 666, 1170, 3101, 3413, 3488, 1254,
	1255, 1256, 1253, 2378, 2735, 1179, 2736, 1590, 2381, 2521,
	2519, 2939, 2523, 2387, 2261, 2937, 2388, 2796, 3955, 3876,
	2397, 2390, 2634, 3815, 2531, 2935, 2532, 3603, 1207, 1254,
	1255, 1256, 1253, 1063, 2417, 2418, 4070, 2423, 1591, 1826,
	2648, 1327, 2924, 2525, 2198, 2537, 2538, 3803, 1060, 3793,
	2547, 1546, 1062, 1546, 1827, 1546, 3783, 3414, 2947, 3100,
	1181, 3715, 3638, 1751, 3637, 3087, 3458, 2553, 2705, 3447,
	2667, 2938, 3412, 3288, 2593, 2936, 1464, 2591, 3966, 1748,
	1750, 1747, 2658, 1749, 2260, 2934, 1254, 1255, 1256, 1253,
	2487, 1716, 1717, 1718, 1719, 1720, 1546, 1181, 2492, 3580,
	3190, 2699, 2923, 3064, 2599, 1254, 1255, 1256, 1253, 2526,
	3034, 1254, 1255, 1256, 1253, 3033, 2706, 1087, 1088, 1089,
	1092, 1546, 1091, 2922, 2921, 1544, 1254, 1255, 1256, 1253,
	3493, 3419, 2541, 1761, 2694, 2920, 2912, 1765, 1766, 1767,
	1768, 2906, 2386, 1254, 1255, 1256, 1253, 1806, 2905, 2904,
	1544, 2903, 2544, 3424, 2748, 1816, 2620, 2533, 2311, 2707,
	2150, 2592, 2149, 2662, 2148, 1254, 1255, 1256, 1253, 3568,
	2754, 2755, 2144, 2590, 2758, 2143, 2100, 2710, 2711, 1267,
	1277, 1278, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1269,
	2679, 1181, 2679, 2683, 1891, 1181, 1254, 1255, 1256, 1253,
	1889, 1657, 1546, 1385, 3177, 1509, 3492, 2664, 1869, 3567,
	4067, 2041, 740, 1163, 2708, 742, 3756, 3757, 3506, 2824,
	741, 2673, 2659, 1528, 4065, 2830, 2644, 2645, 3369, 2651,
	3556, 2640, 4038, 4073, 2656, 2649, 1254, 1255, 1256, 1253,
	4004, 4003, 1704, 2840, 2739, 1254, 1255, 1256, 1253, 2697,
	4000, 3936, 3745, 1181, 3917, 1254, 1255, 1256, 1253, 3861,
	3613, 2862, 2669, 2670, 1254, 1255, 1256, 1253, 1181, 1181,
	1181, 1970, 1162, 3855, 1181, 3839, 2872, 2873, 2874, 2875,
	1181, 2882, 2812, 2883, 2884, 2695, 2885, 2672, 2887, 2685,
	1943, 3830, 2808, 3104, 2774, 3807, 3802, 3801, 2553, 2882,
	2809, 3760, 1254, 1255, 1256, 1253, 3747, 2841, 3746, 3716,
	3657, 2517, 3617, 3606, 3589, 1959, 2821, 3587, 2794, 3585,
	1254, 1255, 1256, 1253, 3582, 2940, 3579, 3578, 2831, 3554,
	3552, 1992, 3526, 3523, 3520, 643, 2944, 1063, 2833, 3409,
	3397, 3390, 2041, 2836, 3374, 2843, 1181, 2061, 2061, 2061,
	2061, 2061, 2061, 3372, 3367, 2855, 2857, 3298, 1504, 3297,
	3295, 1525, 1527, 1181, 2061, 1515, 3294, 2517, 3289, 3283,
	3282, 2857, 2868, 2869, 1869, 2253, 2856, 2871, 2860, 1869,
	1869, 2775, 2860, 2878, 2792, 1546, 1552, 3000, 2776, 3201,
	2778, 2867, 3164, 1915, 2815, 3163, 667, 667, 8, 2823,
	7, 3154, 2829, 3152, 1268, 1267, 1277, 1278, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1269, 2716, 2717, 3103, 3149,
	2842, 2845, 2722, 2272, 3147, 3102, 2316, 3078, 3075, 2132,
	2858, 2732, 2135, 4026, 2864, 2138, 3893, 3054, 2140, 3032,
	2731, 2870, 2839, 3007, 2988, 1254, 1255, 1256, 1253, 2969,
	2861, 222, 1254, 1255, 1256, 1253, 222, 2933, 1254, 1255,
	1256, 1253, 2925, 2915, 2902, 2913, 2969, 1254, 1255, 1256,
	1253, 2914, 1254, 1255, 1256, 1253, 2909, 2908, 1822, 2907,
	1822, 3001, 2761, 3049, 1277, 1278, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1269, 2183, 2753, 2243, 3063, 2749, 2641,
	2948, 2331, 3018, 1546, 2954, 2325, 3070, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1258, 848, 847, 2446, 2985, 2322,
	2449, 2450, 2451, 2452, 2453, 2454, 2455, 2991, 2989, 2458,
	2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468,
	2153, 2470, 2471, 2472, 2473, 2474, 3044, 2475, 2146, 1879,
	3008, 1878, 3005, 1658, 1334, 1610, 1330, 2990, 3056, 1329,
	2832, 1166, 1868, 916, 3889, 1611, 1612, 3048, 3741, 2837,
	2838, 3740, 3729, 3023, 1254, 1255, 1256, 1253, 3027, 3725,
	3581, 1617, 1618, 2970, 2971, 2972, 2973, 2974, 2975, 1622,
	3563, 3438, 1626, 1625, 3437, 3046, 3436, 3406, 3386, 2235,
	3384, 1063, 2730, 2240, 3383, 3067, 3057, 3025, 3151, 3024,
	3380, 2249, 2729, 1063, 3379, 3155, 3156, 3157, 3159, 3072,
	3161, 3162, 3373, 3045, 3042, 2728, 3040, 3047, 1181, 1254,
	1255, 1256, 1253, 3371, 3180, 3060, 3059, 3058, 3352, 1254,
	1255, 1256, 1253, 2727, 3194, 3342, 3341, 3328, 2256, 667,
	3327, 3230, 1254, 1255, 1256, 1253, 2263, 3079, 3080, 3167,
	3139, 3210, 1181, 3106, 3066, 667, 3097, 1181, 1181, 3086,
	1254, 1255, 1256, 1253, 3089, 3088, 2061, 2371, 2280, 3228,
	3095, 3096, 3082, 2285, 2286, 2287, 3090, 3091, 2290, 2291,
	2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2434, 3099,
	3093, 3016, 3092, 3204, 3094, 2772, 2615, 2611, 2610, 2289,
	3254, 2282, 3257, 2276, 3257, 3257, 2275, 2274, 205, 1181,
	196, 167, 2273, 3166, 2271, 3141, 2267, 2266, 2264, 2255,
	2252, 2857, 2251, 3213, 3146, 2152, 3145, 3278, 3217, 2808,
	1862, 1861, 1860, 3274, 1825, 1546, 1546, 1824, 1815, 3232,
	3182, 2726, 1558, 1556, 3241, 3243, 1921, 205, 3165, 4025,
	3987, 1926, 3911, 1324, 3237, 2857, 2951, 3888, 3905, 2725,
	2857, 2857, 3825, 3822, 1544, 1544, 3226, 3809, 1254, 1255,
	1256, 1253, 3804, 3279, 3280, 3710, 1063, 3709, 1063, 3231,
	3203, 201, 667, 1063, 3233, 3234, 1254, 1255, 1256, 1253,
	3180, 1060, 3227, 3691, 3223, 1062, 3252, 3253, 3262, 2241,
	2724, 3236, 1509, 3674, 3670, 2041, 2041, 3648, 3212, 1063,
	3632, 3536, 2857, 3215, 3216, 2404, 2403, 3534, 3504, 3503,
	201, 3500, 1976, 1977, 3499, 3258, 3259, 1254, 1255, 1256,
	1253, 3465, 3263, 3462, 3460, 3113, 3114, 2723, 3427, 792,
	141, 3115, 3116, 3117, 3118, 141, 3119, 3120, 3121, 3122,
	3123, 3124, 3125, 3126, 3127, 3128, 3129, 3098, 1181, 2783,
	1605, 1616, 2699, 2720, 1254, 1255, 1256, 1253, 1607, 3276,
	3340, 1621, 1624, 1613, 3284, 3903, 2719, 1254, 1255, 1256,
	1253, 2102, 1441, 2941, 2866, 2817, 2816, 2102, 2102, 2102,
	1254, 1255, 1256, 1253, 2810, 2777, 3260, 1869, 2734, 1869,
	2625, 3305, 3306, 1254, 1255, 1256, 1253, 3291, 673, 3290,
	3296, 141, 2718, 3299, 3307, 3303, 2535, 667, 1869, 1869,
	2476, 2372, 3293, 2344, 2310, 3316, 2712, 3317, 1746, 201,
	1502, 1503, 2113, 1505, 1506, 3320, 1510, 1511, 1512, 1254,
	1255, 1256, 1253, 1905, 1875, 1689, 3321, 1639, 1614, 1384,
	1584, 2894, 2895, 1254, 1255, 1256, 1253, 3324, 3325, 3326,
	1369, 2553, 1365, 1364, 1363, 1362, 2910, 2911, 3330, 1361,
	1561, 1562, 1563, 1564, 1565, 1360, 1567, 1568, 1569, 1570,
	1571, 1359, 1358, 1357, 1577, 1578, 1579, 1580, 1356, 1355,
	2125, 3394, 2949, 2702, 3396, 1354, 1353, 1352, 3398, 2633,
	3353, 2636, 2698, 3403, 1351, 3901, 2674, 3359, 3356, 1350,
	1349, 3235, 3355, 1348, 4018, 1759, 1347, 3360, 1346, 3375,
	1254, 1255, 1256, 1253, 1345, 1344, 2679, 3365, 1343, 1254,
	1255, 1256, 1253, 1254, 1255, 1256, 1253, 667, 2041, 1342,
	1341, 1061, 1254, 1255, 1256, 1253, 141, 1340, 3431, 1337,
	1336, 3399, 1335, 3401, 1333, 1332, 1331, 1328, 1321, 1320,
	1318, 141, 1317, 141, 2517, 2061, 3450, 1316, 2676, 1315,
	1314, 2682, 1313, 1312, 1311, 1310, 1309, 1308, 3405, 1307,
	1302, 3391, 2700, 2701, 1301, 3408, 1300, 1299, 1298, 3468,
	2703, 2704, 1181, 1218, 1164, 3312, 3313, 3393, 3899, 3501,
	2376, 3254, 2358, 1206, 4016, 1181, 2709, 3971, 3315, 2798,
	3387, 2546, 2155, 1217, 2978, 2987, 1181, 3319, 3515, 2982,
	3318, 2980, 1546, 2986, 2983, 2977, 2981, 2979, 2984, 3420,
	2507, 2508, 2976, 1063, 3422, 1716, 1869, 3452, 124, 3538,
	1063, 67, 66, 667, 3930, 2041, 3841, 3539, 3653, 1181,
	2639, 1544, 2628, 3498, 1435, 1933, 1934, 1928, 1929, 1930,
	3517, 2890, 3199, 3357, 3358, 3449, 3448, 3062, 2891, 2892,
	2893, 3455, 3459, 3451, 3461, 3491, 2444, 3250, 222, 3251,
	3511, 3331, 3454, 2030, 1599, 2623, 2644, 2645, 2332, 2663,
	1653, 1181, 3527, 1633, 3507, 3469, 3530, 3537, 3505, 3510,
	2115, 1212, 3540, 3514, 3175, 3168, 2844, 669, 3508, 2818,
	670, 671, 2396, 2834, 2835, 3519, 2367, 3522, 1937, 2878,
	1904, 1811, 1810, 4029, 3525, 1380, 1381, 2345, 2346, 2347,
	1378, 1379, 3531, 3583, 3529, 3528, 3532, 1376, 1377, 3524,
	1374, 1375, 2362, 2363, 2364, 2365, 3806, 3561, 1181, 3281,
	2489, 2483, 2969, 2042, 1501, 1500, 3521, 1245, 2173, 3323,
	3010, 2334, 2333, 2185, 1453, 1426, 1476, 3994, 1181, 1546,
	1546, 3992, 3557, 3949, 3210, 3927, 3926, 3558, 3924, 3542,
	3865, 3826, 3705, 3704, 3643, 3553, 3625, 3376, 3625, 3349,
	3348, 3334, 2429, 3588, 2969, 3590, 2399, 1655, 1544, 1757,
	3547, 1181, 3642, 1181, 3333, 3619, 3620, 3615, 3614, 3020,
	1451, 3645, 3395, 3647, 4020, 4019, 1178, 3065, 4020, 2759,
	1546, 3577, 3596, 3598, 2360, 2254, 3616, 3597, 3607, 1388,
	1203, 4019, 3672, 3329, 907, 908, 909, 910, 667, 1178,
	1181, 1181, 1468, 3593, 1181, 1181, 3622, 75, 3629, 1757,
	2, 2857, 3618, 2169, 1869, 4042, 3630, 209, 3, 3452,
	3641, 4043, 1, 2740, 3693, 1873, 1382, 1515, 3688, 3651,
	3654, 911, 3498, 906, 1522, 1939, 3658, 3702, 2527, 2095,
	3678, 3679, 1550, 1877, 3689, 3690, 913, 2993, 3794, 3711,
	3712, 2994, 3322, 2996, 3491, 3639, 3640, 3650, 2762, 2205,
	2958, 1063, 1546, 2481, 1710, 2348, 1710, 3656, 3193, 1436,
	969, 1817, 1670, 1195, 1552, 1667, 1194, 1192, 1762, 794,
	3699, 3698, 2158, 2942, 2916, 3742, 3701, 2102, 4028, 4059,
	3986, 1544, 4031, 3026, 3700, 3028, 1687, 3735, 2495, 778,
	3723, 3694, 1268, 1267, 1277, 1278, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1269, 1869, 3722, 3718, 3918, 3831, 1869,
	3990, 3833, 3721, 2210, 1250, 3730, 3041, 3734, 976, 995,
	2107, 2183, 835, 3775, 3769, 2502, 2506, 2507, 2508, 2503,
	2511, 2504, 2509, 805, 3748, 2505, 1319, 2510, 1646, 1181,
	3111, 3109, 804, 3417, 3569, 2788, 3570, 3706, 3759, 3792,
	3013, 3777, 3798, 996, 2141, 3828, 3081, 3719, 1600, 2686,
	1604, 3770, 2395, 3785, 3561, 3884, 3772, 3771, 3652, 3246,
	141, 141, 141, 1061, 2852, 1628, 3879, 3788, 3784, 3463,
	3573, 3571, 1181, 3767, 3105, 3572, 710, 1546, 1159, 1155,
	1156, 1157, 1158, 2074, 2691, 641, 2690, 2689, 2687, 1045,
	3692, 2154, 711, 2375, 3941, 3805, 3808, 2502, 2506, 2507,
	2508, 2503, 2511, 2504, 2509, 3646, 1544, 2505, 949, 2510,
	2357, 950, 3814, 942, 2806, 3816, 2805, 1727, 1259, 1280,
	1744, 1284, 3130, 3131, 1296, 749, 2237, 2785, 1063, 3486,
	3857, 3006, 1710, 74, 73, 3847, 1286, 1281, 1283, 1279,
	3827, 1282, 1268, 1267, 1277, 1278, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1269, 72, 71, 2688, 230, 3866, 1268,
	1267, 1277, 1278, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1269, 796, 229, 3743, 3611, 3914, 4033, 775, 774, 773,
	3860, 772, 771, 770, 2500, 2501, 3883, 2499, 2497, 2496,
	1181, 2056, 3868, 2055, 3823, 3824, 3019, 3332, 1546, 2120,
	2122, 3908, 3208, 2881, 2876, 1981, 3915, 3898, 3900, 3902,
	3904, 1979, 3882, 1513, 3877, 2424, 2431, 1978, 3968, 3366,
	3891, 3564, 3916, 3894, 3895, 3669, 2926, 1544, 2822, 3560,
	3897, 1927, 2420, 1998, 2897, 3261, 3907, 1995, 1994, 2889,
	3665, 3659, 2026, 3773, 3624, 3470, 3471, 3923, 1546, 3921,
	3477, 3775, 2366, 1114, 3428, 3429, 3430, 1110, 1112, 1113,
	3434, 3435, 1111, 2684, 3301, 3935, 2401, 3959, 3170, 2340,
	2339, 2337, 2336, 3967, 1411, 3856, 3937, 1544, 3950, 3952,
	3592, 2551, 3953, 3954, 2549, 1373, 3951, 1161, 3314, 3310,
	2166, 2181, 3061, 2057, 2053, 2052, 1085, 2692, 2693, 1084,
	1581, 2960, 2490, 3750, 3983, 3976, 1932, 3977, 943, 3978,
	2355, 3979, 2671, 41, 3980, 121, 108, 184, 59, 183,
	3993, 58, 3995, 3996, 119, 181, 3991, 3989, 57, 103,
	1181, 102, 118, 3999, 179, 3847, 1268, 1267, 1277, 1278,
	1270, 1271, 1272, 1273, 1274, 1275, 1276, 1269, 56, 3798,
	214, 4008, 213, 216, 215, 212, 2601, 1133, 2602, 4010,
	4011, 4009, 4017, 4015, 4014, 211, 4027, 1588, 4035, 210,
	3928, 4034, 3628, 4021, 4022, 4023, 4024, 3910, 901, 44,
	43, 185, 42, 109, 60, 40, 4047, 39, 1181, 38,
	4039, 34, 13, 983, 12, 35, 22, 21, 4048, 1674,
	3883, 20, 4051, 4049, 26, 3011, 3012, 32, 4057, 31,
	134, 4061, 133, 30, 132, 131, 130, 129, 4058, 128,
	127, 126, 29, 205, 64, 196, 167, 19, 51, 50,
	49, 48, 47, 4006, 46, 4069, 9, 122, 117, 1555,
	115, 28, 197, 673, 4035, 4077, 116, 4034, 4076, 188,
	113, 112, 111, 198, 110, 106, 4061, 4078, 104, 86,
	85, 84, 4082, 99, 98, 980, 981, 97, 96, 95,
	3368, 94, 139, 92, 93, 994, 1023, 3370, 83, 141,
	82, 1118, 81, 80, 79, 101, 107, 125, 105, 90,
	100, 1710, 91, 89, 88, 87, 201, 78, 77, 76,
	165, 164, 1141, 1145, 1147, 1149, 1151, 1152, 1154, 3385,
	1159, 1155, 1156, 1157, 1158, 163, 1136, 1137, 1138, 1139,
	1116, 1117, 1142, 162, 1119, 161, 1121, 1122, 1123, 1124,
	1120, 1125, 1126, 1127, 1128, 1129, 1132, 1134, 1130, 1131,
	1140, 159, 160, 158, 157, 156, 155, 141, 1144, 1146,
	1148, 1150, 1153, 154, 141, 153, 52, 53, 3644, 54,
	1025, 55, 3695, 1024, 175, 2234, 3696, 141, 174, 176,
	141, 141, 178, 147, 148, 180, 149, 150, 177, 182,
	172, 151, 170, 141, 152, 173, 171, 169, 1135, 1268,
	1267, 1277, 1278, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1269, 69, 1009, 11, 120, 18, 25, 4, 0, 0,
	0, 984, 1268, 1267, 1277, 1278, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1269, 0, 0, 0, 0, 0, 0,
	0, 3107, 0, 0, 1506, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 194, 203,
	195, 123, 0, 0, 0, 0, 0, 0, 3202, 0,
	0, 0, 1869, 0, 0, 0, 0, 0, 0, 0,
	193, 187, 186, 0, 3214, 0, 0, 70, 1869, 0,
	0, 3533, 0, 0, 3535, 1268, 1267, 1277, 1278, 1270,
	1271, 1272, 1273, 1274, 1275, 1276, 1269, 0, 0, 0,
	0, 0, 3541, 1008, 1006, 1268, 1267, 1277, 1278, 1270,
	1271, 1272, 1273, 1274, 1275, 1276, 1269, 0, 0, 0,
	0, 0, 0, 0, 0, 1005, 0, 0, 0, 2680,
	2681, 0, 0, 0, 0, 0, 0, 979, 189, 190,
	191, 0, 0, 0, 0, 0, 0, 3817, 985, 1018,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 1014, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 192, 0, 136, 0,
	0, 2102, 0, 0, 0, 0, 0, 0, 1015, 1019,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3867, 0, 0, 0, 0, 3871, 3872, 0, 0, 0,
	1002, 0, 1000, 1004, 1022, 0, 0, 0, 1001, 998,
	997, 0, 1003, 988, 989, 987, 990, 991, 992, 993,
	0, 1020, 0, 1021, 0, 137, 3892, 2027, 0, 0,
	0, 0, 1988, 0, 1016, 1017, 0, 0, 0, 0,
	63, 1795, 0, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2030, 1997, 0, 2060, 0, 0, 0,
	0, 1012, 0, 2031, 2032, 0, 0, 1011, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 1007, 0, 0, 0, 0, 0, 0, 1996,
	0, 0, 0, 0, 0, 0, 3362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2004, 0, 0,
	0, 0, 0, 0, 145, 202, 0, 146, 0, 0,
	0, 0, 168, 0, 0, 0, 0, 61, 0, 0,
	0, 141, 0, 0, 141, 141, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2027, 4001, 4002, 0, 0, 1988, 0, 0, 0,
	1010, 0, 0, 0, 0, 0, 982, 977, 0, 0,
	0, 0, 978, 0, 0, 2020, 0, 1061, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 2030, 1997, 1061,
	0, 0, 0, 138, 45, 0, 0, 2031, 2032, 1791,
	62, 0, 0, 0, 0, 141, 1788, 0, 0, 0,
	1790, 1787, 1789, 1793, 1794, 0, 2102, 0, 1792, 0,
	0, 142, 143, 1996, 0, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2004, 0, 0, 0, 0, 0, 0, 0, 1987,
	1989, 1986, 0, 0, 1983, 0, 0, 0, 0, 2008,
	0, 0, 0, 0, 0, 0, 0, 0, 1306, 0,
	2014, 0, 0, 0, 0, 0, 0, 0, 1999, 0,
	1982, 0, 0, 0, 0, 0, 1286, 0, 0, 0,
	2002, 2036, 0, 0, 2003, 2005, 2007, 0, 2009, 2010,
	2011, 2015, 2016, 2017, 2019, 2022, 2023, 2024, 0, 2020,
	0, 0, 0, 0, 0, 2012, 2021, 2013, 0, 0,
	0, 0, 2102, 0, 0, 0, 0, 1991, 0, 0,
	0, 0, 0, 3890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2028, 0, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1798, 1799, 1800, 1801, 1802, 1803,
	1796, 1797, 0, 0, 0, 0, 0, 0, 1984, 1985,
	0, 0, 0, 1987, 2847, 1986, 0, 0, 2846, 0,
	0, 0, 0, 2008, 0, 0, 2025, 0, 0, 0,
	0, 0, 0, 0, 2014, 0, 0, 0, 0, 0,
	0, 0, 0, 2001, 0, 0, 0, 3964, 0, 0,
	2000, 0, 0, 0, 2002, 2036, 0, 0, 2003, 2005,
	2007, 0, 2009, 2010, 2011, 2015, 2016, 2017, 2019, 2022,
	2023, 2024, 0, 0, 2018, 0, 0, 0, 0, 2012,
	2021, 2013, 0, 2006, 0, 0, 0, 0, 0, 0,
	0, 1991, 0, 0, 0, 1133, 2034, 2033, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2028, 0, 0, 0, 0,
	3964, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1984, 1985, 0, 0, 0, 3677, 0, 0,
	0, 1993, 0, 0, 0, 0, 0, 0, 0, 0,
	2025, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3964, 0, 0, 0, 0, 2001, 0, 0,
	0, 0, 0, 0, 2000, 0, 1133, 0, 0, 0,
	0, 0, 0, 2029, 0, 0, 2035, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2018, 0,
	0, 0, 0, 0, 0, 0, 0, 2006, 0, 1118,
	0, 0, 0, 1108, 0, 0, 0, 0, 2520, 0,
	2034, 2033, 0, 0, 4080, 0, 0, 0, 0, 0,
	1141, 1145, 1147, 1149, 1151, 1152, 1154, 0, 1159, 1155,
	1156, 1157, 1158, 0, 1136, 1137, 1138, 1139, 1116, 1117,
	1142, 0, 1119, 0, 1121, 1122, 1123, 1124, 1120, 1125,
	1126, 1127, 1128, 1129, 1132, 1134, 1130, 1131, 1140, 0,
	0, 0, 0, 0, 0, 1993, 1144, 1146, 1148, 1150,
	1153, 0, 0, 2060, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1135, 2029, 0, 0,
	2035, 1141, 1145, 1147, 1149, 1151, 1152, 1154, 0, 1159,
	1155, 1156, 1157, 1158, 0, 1136, 1137, 1138, 1139, 1116,
	1117, 1142, 0, 1119, 0, 1121, 1122, 1123, 1124, 1120,
	1125, 1126, 1127, 1128, 1129, 1132, 1134, 1130, 1131, 1140,
	722, 721, 728, 718, 0, 0, 0, 1144, 1146, 1148,
	1150, 1153, 0, 725, 726, 0, 727, 731, 0, 0,
	712, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 722, 721,
	728, 718, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 725, 726, 0, 727, 731, 740, 0, 712, 742,
	0, 0, 0, 0, 741, 0, 0, 0, 736, 0,
	0, 0, 0, 0, 0, 0, 0, 722, 721, 728,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	725, 726, 0, 727, 731, 0, 0, 712, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 742, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 2027,
	0, 0, 141, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3623,
	0, 0, 0, 0, 0, 2030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 713, 715, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 720, 0, 0, 0, 0,
	2027, 0, 0, 1143, 0, 0, 0, 724, 0, 201,
	0, 0, 0, 0, 739, 0, 0, 0, 0, 2004,
	0, 717, 0, 0, 0, 707, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2030, 0, 0, 0,
	0, 0, 713, 715, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 720, 0, 0, 2060, 2060, 2060, 2060,
	2060, 2060, 0, 0, 0, 724, 0, 0, 0, 0,
	0, 0, 739, 2060, 0, 0, 0, 0, 0, 717,
	3797, 713, 715, 714, 0, 0, 0, 2020, 0, 0,
	2004, 0, 720, 0, 1143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 0, 717, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 719, 723, 729, 0, 730, 732, 0,
	0, 733, 734, 735, 0, 0, 737, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2020, 0,
	141, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 2008, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2014, 0, 0, 0, 141, 0, 0, 0,
	0, 719, 723, 729, 0, 730, 732, 0, 141, 733,
	734, 735, 2002, 2036, 737, 738, 2003, 2005, 2007, 0,
	2009, 2010, 2011, 2015, 2016, 2017, 2019, 2022, 2023, 2024,
	0, 0, 0, 2027, 0, 0, 0, 2012, 2021, 2013,
	719, 723, 729, 0, 730, 732, 0, 0, 733, 734,
	735, 0, 2008, 737, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 2014, 0, 0, 0, 0, 0, 2030,
	0, 0, 0, 2028, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2002, 2036, 0, 0, 2003, 2005, 2007,
	0, 2009, 2010, 2011, 2015, 2016, 2017, 2019, 2022, 2023,
	2024, 0, 0, 0, 2027, 0, 0, 0, 2012, 2021,
	2013, 0, 0, 0, 716, 0, 0, 0, 2025, 0,
	0, 0, 0, 2004, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2001, 0, 0, 0, 0,
	2030, 0, 2000, 0, 2028, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2018, 0, 0, 0,
	0, 0, 716, 0, 0, 2006, 0, 0, 0, 0,
	0, 1061, 0, 141, 0, 0, 0, 3768, 141, 2025,
	0, 2020, 0, 0, 2004, 2060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2001, 0, 0, 0,
	0, 716, 0, 2000, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2018, 0, 0,
	0, 0, 0, 0, 0, 0, 2006, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2020, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3627, 2014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2002, 2036, 0, 0,
	2003, 2005, 2007, 0, 2009, 2010, 2011, 2015, 2016, 2017,
	2019, 2022, 2023, 2024, 0, 0, 0, 0, 0, 0,
	0, 2012, 2021, 2013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2008, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3631, 2014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2028, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2002, 2036, 0,
	0, 2003, 2005, 2007, 0, 2009, 2010, 2011, 2015, 2016,
	2017, 2019, 2022, 2023, 2024, 0, 0, 0, 0, 0,
	0, 0, 2012, 2021, 2013, 0, 0, 0, 0, 0,
	0, 0, 2025, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2001,
	0, 0, 0, 0, 0, 0, 2000, 0, 2028, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2018, 0, 0, 0, 0, 0, 0, 0, 0, 2006,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2025, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2001, 0, 0, 0, 0, 0, 0, 2000, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2018, 0, 0, 0, 0, 0, 0, 141, 0,
	2006, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 3631,
	0, 0, 0, 0, 0, 0, 398, 0, 0, 527,
	560, 549, 633, 515, 2060, 0, 0, 0, 0, 0,
	764, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 803, 563, 514, 430, 381,
	581, 580, 0, 0, 872, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 756,
	3631, 0, 793, 848, 847, 780, 790, 0, 0, 309,
	228, 509, 629, 511, 510, 781, 0, 782, 786, 789,
	785, 783, 784, 0, 863, 0, 0, 0, 0, 0,
	0, 748, 760, 0, 765, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 757, 758,
	0, 0, 0, 0, 813, 0, 759, 0, 0, 808,
	787, 791, 0, 0, 0, 0, 298, 436, 455, 310,
	425, 468, 315, 433, 447, 304, 396, 422, 0, 0,
	300, 453, 432, 378, 356, 357, 299, 0, 416, 334,
	348, 331, 394, 788, 811, 815, 330, 886, 809, 463,
	302, 0, 462, 393, 449, 454, 379, 373, 0, 301,
	451, 377, 372, 360, 338, 887, 361, 362, 352, 406,
	370, 407, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 622, 806, 0,
	626, 0, 465, 0, 0, 870, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 810, 0, 419, 400,
	883, 0, 0, 417, 368, 450, 408, 456, 437, 464,
	413, 409, 293, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 403, 424, 440, 441, 442,
	332, 316, 418, 317, 350, 318, 294, 324, 322, 325,
	426, 326, 296, 404, 446, 0, 345, 414, 376, 297,
	375, 405, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 410, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 1819, 1818, 1820, 477, 364, 365,
	0, 343, 290, 291, 650, 867, 395, 591, 624, 625,
	516, 0, 882, 862, 864, 865, 869, 873, 874, 875,
	876, 877, 879, 881, 885, 649, 0, 570, 585, 653,
	584, 646, 402, 0, 423, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 431, 458, 470,
	487, 490, 519, 604, 605, 606, 295, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 884, 551, 528, 554,
	469, 531, 530, 141, 0, 565, 814, 566, 567, 385,
	386, 387, 388, 871, 592, 314, 488, 412, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 305, 397, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 401, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 427, 359, 369, 415, 466, 399, 420, 311, 457,
	429, 374, 545, 572, 893, 866, 892, 894, 895, 891,
	896, 897, 878, 769, 0, 821, 889, 888, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 284, 319, 320, 327, 647, 644, 448,
	648, 776, 292, 522, 367, 0, 411, 341, 587, 588,
	0, 639, 855, 828, 829, 830, 766, 831, 825, 826,
	767, 827, 856, 819, 852, 853, 795, 822, 832, 851,
	833, 854, 857, 858, 898, 899, 839, 823, 256, 900,
	836, 859, 850, 849, 834, 820, 860, 861, 802, 797,
	837, 838, 824, 843, 844, 845, 768, 816, 817, 818,
	840, 841, 798, 799, 800, 801, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 846, 634, 434, 0, 842, 637, 638, 635,
	371, 421, 439, 428, 812, 651, 512, 513, 652, 623,
	0, 761, 0, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 336, 1870, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 803, 563, 514, 430, 381, 581, 580, 0,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 2086, 0, 0, 756, 0, 0, 793,
	848, 847, 780, 790, 0, 0, 309, 228, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 863, 0, 0, 0, 0, 0, 0, 748, 760,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 758, 0, 0, 0,
	0, 813, 0, 759, 0, 0, 2087, 787, 791, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	788, 811, 815, 330, 886, 809, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 887, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 806, 0, 626, 0, 465,
	0, 0, 870, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 810, 0, 419, 400, 883, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 867, 395, 591, 624, 625, 516, 0, 882,
	862, 864, 865, 869, 873, 874, 875, 876, 877, 879,
	881, 885, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 884, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 814, 566, 567, 385, 386, 387, 388,
	871, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 893, 866, 892, 894, 895, 891, 896, 897, 878,
	769, 0, 821, 889, 888, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 776, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 855,
	828, 829, 830, 766, 831, 825, 826, 767, 827, 856,
	819, 852, 853, 795, 822, 832, 851, 833, 854, 857,
	858, 898, 899, 839, 823, 256, 900, 836, 859, 850,
	849, 834, 820, 860, 861, 802, 797, 837, 838, 824,
	843, 844, 845, 768, 816, 817, 818, 840, 841, 798,
	799, 800, 801, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 846,
	634, 434, 0, 842, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 0, 761, 205,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 1289, 563,
	514, 430, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 756, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 228, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 748, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 419, 400, 883, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 893, 866, 892,
	894, 895, 891, 896, 897, 878, 769, 0, 821, 889,
	888, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 776, 292, 522, 367, 168, 411,
	341, 587, 588, 0, 639, 855, 828, 829, 830, 766,
	831, 825, 826, 767, 827, 856, 819, 852, 853, 795,
	822, 832, 851, 833, 854, 857, 858, 898, 899, 839,
	823, 256, 900, 836, 859, 850, 849, 834, 820, 860,
	861, 802, 797, 837, 838, 824, 843, 844, 845, 768,
	816, 817, 818, 840, 841, 798, 799, 800, 801, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 846, 634, 434, 0, 842,
	637, 638, 635, 371, 421, 439, 428, 812, 651, 512,
	513, 652, 623, 0, 761, 0, 398, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	764, 0, 0, 0, 336, 4079, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 803, 563, 514, 430, 381,
	581, 580, 0, 0, 872, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 756,
	0, 0, 793, 848, 847, 780, 790, 0, 0, 309,
	228, 509, 629, 511, 510, 781, 0, 782, 786, 789,
	785, 783, 784, 0, 863, 0, 0, 0, 0, 0,
	0, 748, 760, 0, 765, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 757, 758,
	0, 0, 0, 0, 813, 0, 759, 0, 0, 808,
	787, 791, 0, 0, 0, 0, 298, 436, 455, 310,
	425, 468, 315, 433, 447, 304, 396, 422, 0, 0,
	300, 453, 432, 378, 356, 357, 299, 0, 416, 334,
	348, 331, 394, 788, 811, 815, 330, 886, 809, 463,
	302, 0, 462, 393, 449, 454, 379, 373, 0, 301,
	451, 377, 372, 360, 338, 887, 361, 362, 352, 406,
	370, 407, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 806, 0,
	626, 0, 465, 0, 0, 870, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 810, 0, 419, 400,
	883, 0, 0, 417, 368, 450, 408, 456, 437, 464,
	413, 409, 293, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 403, 424, 440, 441, 442,
	332, 316, 418, 317, 350, 318, 294, 324, 322, 325,
	426, 326, 296, 404, 446, 0, 345, 414, 376, 297,
	375, 405, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 410, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 290, 291, 650, 867, 395, 591, 624, 625,
	516, 0, 882, 862, 864, 865, 869, 873, 874, 875,
	876, 877, 879, 881, 885, 649, 0, 570, 585, 653,
	584, 646, 402, 0, 423, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 431, 458, 470,
	487, 490, 519, 604, 605, 606, 295, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 884, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 814, 566, 567, 385,
	386, 387, 388, 871, 592, 314, 488, 412, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 305, 397, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 401, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 427, 359, 369, 415, 466, 399, 420, 311, 457,
	429, 374, 545, 572, 893, 866, 892, 894, 895, 891,
	896, 897, 878, 769, 0, 821, 889, 888, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 284, 319, 320, 327, 647, 644, 448,
	648, 776, 292, 522, 367, 0, 411, 341, 587, 588,
	0, 639, 855, 828, 829, 830, 766, 831, 825, 826,
	767, 827, 856, 819, 852, 853, 795, 822, 832, 851,
	833, 854, 857, 858, 898, 899, 839, 823, 256, 900,
	836, 859, 850, 849, 834, 820, 860, 861, 802, 797,
	837, 838, 824, 843, 844, 845, 768, 816, 817, 818,
	840, 841, 798, 799, 800, 801, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 846, 634, 434, 0, 842, 637, 638, 635,
	371, 421, 439, 428, 812, 651, 512, 513, 652, 623,
	0, 761, 0, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 803, 563, 514, 430, 381, 581, 580, 0,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 756, 0, 0, 793,
	848, 847, 780, 790, 0, 0, 309, 228, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 863, 0, 0, 0, 0, 0, 0, 748, 760,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 758, 0, 0, 0,
	0, 813, 0, 759, 0, 0, 808, 787, 791, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	788, 811, 815, 330, 886, 809, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 887, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 806, 0, 626, 0, 465,
	0, 0, 870, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 810, 0, 419, 400, 883, 3965, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 867, 395, 591, 624, 625, 516, 0, 882,
	862, 864, 865, 869, 873, 874, 875, 876, 877, 879,
	881, 885, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 884, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 814, 566, 567, 385, 386, 387, 388,
	871, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 893, 866, 892, 894, 895, 891, 896, 897, 878,
	769, 0, 821, 889, 888, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 776, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 855,
	828, 829, 830, 766, 831, 825, 826, 767, 827, 856,
	819, 852, 853, 795, 822, 832, 851, 833, 854, 857,
	858, 898, 899, 839, 823, 256, 900, 836, 859, 850,
	849, 834, 820, 860, 861, 802, 797, 837, 838, 824,
	843, 844, 845, 768, 816, 817, 818, 840, 841, 798,
	799, 800, 801, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 846,
	634, 434, 0, 842, 637, 638, 635, 371, 421, 439,
	428, 812, 651, 512, 513, 652, 623, 0, 761, 0,
	398, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 764, 0, 0, 0, 336, 1870,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 803,
	563, 514, 430, 381, 581, 580, 0, 0, 872, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 756, 0, 0, 793, 848, 847, 780,
	790, 0, 0, 309, 228, 509, 629, 511, 510, 781,
	0, 782, 786, 789, 785, 783, 784, 0, 863, 0,
	0, 0, 0, 0, 0, 748, 760, 0, 765, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 757, 758, 0, 0, 0, 0, 813, 0,
	759, 0, 0, 808, 787, 791, 0, 0, 0, 0,
	298, 436, 455, 310, 425, 468, 315, 433, 447, 304,
	396, 422, 0, 0, 300, 453, 432, 378, 356, 357,
	299, 0, 416, 334, 348, 331, 394, 788, 811, 815,
	330, 886, 809, 463, 302, 0, 462, 393, 449, 454,
	379, 373, 0, 301, 451, 377, 372, 360, 338, 887,
	361, 362, 352, 406, 370, 407, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 806, 0, 626, 0, 465, 0, 0, 870,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	810, 0, 419, 400, 883, 0, 0, 417, 368, 450,
	408, 456, 437, 464, 413, 409, 293, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 403,
	424, 440, 441, 442, 332, 316, 418, 317, 350, 318,
	294, 324, 322, 325, 426, 326, 296, 404, 446, 0,
	345, 414, 376, 297, 375, 405, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	410, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 290, 291, 650, 867,
	395, 591, 624, 625, 516, 0, 882, 862, 864, 865,
	869, 873, 874, 875, 876, 877, 879, 881, 885, 649,
	0, 570, 585, 653, 584, 646, 402, 0, 423, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 431, 458, 470, 487, 490, 519, 604, 605, 606,
	295, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	884, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	814, 566, 567, 385, 386, 387, 388, 871, 592, 314,
	488, 412, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 305, 397, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	401, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 427, 359, 369, 415, 466,
	399, 420, 311, 457, 429, 374, 545, 572, 893, 866,
	892, 894, 895, 891, 896, 897, 878, 769, 0, 821,
	889, 888, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 284, 319, 320,
	327, 647, 644, 448, 648, 776, 292, 522, 367, 0,
	411, 341, 587, 588, 0, 639, 855, 828, 829, 830,
	766, 831, 825, 826, 767, 827, 856, 819, 852, 853,
	795, 822, 832, 851, 833, 854, 857, 858, 898, 899,
	839, 823, 256, 900, 836, 859, 850, 849, 834, 820,
	860, 861, 802, 797, 837, 838, 824, 843, 844, 845,
	768, 816, 817, 818, 840, 841, 798, 799, 800, 801,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 846, 634, 434, 0,
	842, 637, 638, 635, 371, 421, 439, 428, 812, 651,
	512, 513, 652, 623, 0, 761, 0, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 803, 563, 514, 430,
	381, 581, 580, 0, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	756, 0, 0, 793, 848, 847, 780, 790, 0, 0,
	309, 228, 509, 629, 511, 510, 781, 0, 782, 786,
	789, 785, 783, 784, 0, 863, 0, 0, 0, 0,
	0, 0, 748, 760, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	758, 1583, 0, 0, 0, 813, 0, 759, 0, 0,
	808, 787, 791, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 788, 811, 815, 330, 886, 809,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 887, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 806,
	0, 626, 0, 465, 0, 0, 870, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 810, 0, 419,
	400, 883, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 867, 395, 591, 624,
	625, 516, 0, 882, 862, 864, 865, 869, 873, 874,
	875, 876, 877, 879, 881, 885, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 884, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 814, 566, 567,
	385, 386, 387, 388, 871, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 776, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 256,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 434, 0, 842, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 812, 761, 0, 2262, 0, 0, 0, 0, 0,
	398, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 764, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 803,
	563, 514, 430, 381, 581, 580, 0, 0, 872, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 756, 0, 0, 793, 848, 847, 780,
	790, 0, 0, 309, 228, 509, 629, 511, 510, 781,
	0, 782, 786, 789, 785, 783, 784, 0, 863, 0,
	0, 0, 0, 0, 0, 748, 760, 0, 765, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 757, 758, 0, 0, 0, 0, 813, 0,
	759, 0, 0, 808, 787, 791, 0, 0, 0, 0,
	298, 436, 455, 310, 425, 468, 315, 433, 447, 304,
	396, 422, 0, 0, 300, 453, 432, 378, 356, 357,
	299, 0, 416, 334, 348, 331, 394, 788, 811, 815,
	330, 886, 809, 463, 302, 0, 462, 393, 449, 454,
	379, 373, 0, 301, 451, 377, 372, 360, 338, 887,
	361, 362, 352, 406, 370, 407, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 806, 0, 626, 0, 465, 0, 0, 870,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	810, 0, 419, 400, 883, 0, 0, 417, 368, 450,
	408, 456, 437, 464, 413, 409, 293, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 403,
	424, 440, 441, 442, 332, 316, 418, 317, 350, 318,
	294, 324, 322, 325, 426, 326, 296, 404, 446, 0,
	345, 414, 376, 297, 375, 405, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	410, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 290, 291, 650, 867,
	395, 591, 624, 625, 516, 0, 882, 862, 864, 865,
	869, 873, 874, 875, 876, 877, 879, 881, 885, 649,
	0, 570, 585, 653, 584, 646, 402, 0, 423, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 431, 458, 470, 487, 490, 519, 604, 605, 606,
	295, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	884, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	814, 566, 567, 385, 386, 387, 388, 871, 592, 314,
	488, 412, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 305, 397, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	401, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 427, 359, 369, 415, 466,
	399, 420, 311, 457, 429, 374, 545, 572, 893, 866,
	892, 894, 895, 891, 896, 897, 878, 769, 0, 821,
	889, 888, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 284, 319, 320,
	327, 647, 644, 448, 648, 776, 292, 522, 367, 0,
	411, 341, 587, 588, 0, 639, 855, 828, 829, 830,
	766, 831, 825, 826, 767, 827, 856, 819, 852, 853,
	795, 822, 832, 851, 833, 854, 857, 858, 898, 899,
	839, 823, 256, 900, 836, 859, 850, 849, 834, 820,
	860, 861, 802, 797, 837, 838, 824, 843, 844, 845,
	768, 816, 817, 818, 840, 841, 798, 799, 800, 801,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 846, 634, 434, 0,
	842, 637, 638, 635, 371, 421, 439, 428, 812, 651,
	512, 513, 652, 623, 0, 761, 0, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 803, 563, 514, 430,
	381, 581, 580, 0, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	756, 0, 0, 793, 848, 847, 780, 790, 0, 0,
	309, 228, 509, 629, 511, 510, 781, 0, 782, 786,
	789, 785, 783, 784, 0, 863, 0, 0, 0, 0,
	0, 0, 748, 760, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	758, 1863, 0, 0, 0, 813, 0, 759, 0, 0,
	808, 787, 791, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 788, 811, 815, 330, 886, 809,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 887, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 806,
	0, 626, 0, 465, 0, 0, 870, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 810, 0, 419,
	400, 883, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 867, 395, 591, 624,
	625, 516, 0, 882, 862, 864, 865, 869, 873, 874,
	875, 876, 877, 879, 881, 885, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 884, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 814, 566, 567,
	385, 386, 387, 388, 871, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 776, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 256,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 434, 0, 842, 637, 638,
	635, 371, 421, 439, 428, 812, 651, 512, 513, 652,
	623, 0, 761, 0, 398, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 803, 563, 514, 430, 381, 581, 580,
	0, 0, 872, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 756, 0, 0,
	793, 848, 847, 780, 790, 0, 0, 309, 228, 509,
	629, 511, 510, 781, 0, 782, 786, 789, 785, 783,
	784, 0, 863, 0, 0, 0, 0, 0, 0, 748,
	760, 0, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 758, 0, 0,
	0, 0, 813, 0, 759, 0, 0, 808, 787, 791,
	0, 0, 0, 0, 298, 436, 455, 310, 425, 468,
	315, 433, 447, 304, 396, 422, 0, 0, 300, 453,
	432, 378, 356, 357, 299, 0, 416, 334, 348, 331,
	394, 788, 811, 815, 330, 886, 809, 463, 302, 0,
	462, 393, 449, 454, 379, 373, 0, 301, 451, 377,
	372, 360, 338, 887, 361, 362, 352, 406, 370, 407,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 806, 0, 626, 0,
	465, 0, 0, 870, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 810, 0, 419, 400, 883, 0,
	0, 417, 368, 450, 408, 456, 437, 464, 413, 409,
	293, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 403, 424, 440, 441, 442, 332, 316,
	418, 317, 350, 318, 294, 324, 322, 325, 426, 326,
	296, 404, 446, 0, 345, 414, 376, 297, 375, 405,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 410, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	290, 291, 650, 867, 395, 591, 624, 625, 516, 0,
	882, 862, 864, 865, 869, 873, 874, 875, 876, 877,
	879, 881, 885, 649, 0, 570, 585, 653, 584, 646,
	402, 0, 423, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 431, 458, 470, 487, 490,
	519, 604, 605, 606, 295, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 884, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 814, 566, 567, 385, 386, 387,
	388, 871, 592, 314, 488, 412, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 305,
	397, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 401, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 427,
	359, 369, 415, 466, 399, 420, 311, 457, 429, 374,
	545, 572, 893, 866, 892, 894, 895, 891, 896, 897,
	878, 769, 0, 821, 889, 888, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 284, 319, 320, 327, 647, 644, 448, 648, 776,
	292, 522, 367, 0, 411, 341, 587, 588, 0, 639,
	855, 828, 829, 830, 766, 831, 825, 826, 767, 827,
	856, 819, 852, 853, 795, 822, 832, 851, 833, 854,
	857, 858, 898, 899, 839, 823, 256, 900, 836, 859,
	850, 849, 834, 820, 860, 861, 802, 797, 837, 838,
	824, 843, 844, 845, 768, 816, 817, 818, 840, 841,
	798, 799, 800, 801, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	846, 634, 434, 0, 842, 637, 638, 635, 371, 421,
	439, 428, 812, 651, 512, 513, 652, 623, 0, 761,
	0, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 764, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	803, 563, 514, 430, 381, 581, 580, 0, 0, 872,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 756, 0, 0, 793, 848, 847,
	780, 790, 0, 0, 309, 228, 509, 629, 511, 510,
	781, 0, 782, 786, 789, 785, 783, 784, 0, 863,
	0, 0, 0, 0, 0, 0, 748, 760, 0, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 758, 0, 0, 0, 0, 813,
	0, 759, 0, 0, 808, 787, 791, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 788, 811,
	815, 330, 886, 809, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	887, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 806, 0, 626, 0, 465, 0, 0,
	870, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 810, 0, 419, 400, 883, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	867, 395, 591, 624, 625, 516, 0, 882, 862, 864,
	865, 869, 873, 874, 875, 876, 877, 879, 881, 885,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 884, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 814, 566, 567, 385, 386, 387, 388, 871, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 893,
	866, 892, 894, 895, 891, 896, 897, 878, 769, 0,
	821, 889, 888, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 776, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 855, 828, 829,
	830, 766, 831, 825, 826, 767, 827, 856, 819, 852,
	853, 795, 822, 832, 851, 833, 854, 857, 858, 898,
	899, 839, 823, 256, 900, 836, 859, 850, 849, 834,
	820, 860, 861, 802, 797, 837, 838, 824, 843, 844,
	845, 768, 816, 817, 818, 840, 841, 798, 799, 800,
	801, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 846, 634, 434,
	0, 3543, 637, 3544, 3545, 371, 421, 439, 428, 812,
	651, 512, 513, 652, 623, 0, 761, 0, 398, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 764, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 803, 563, 514,
	430, 381, 581, 580, 0, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 756, 0, 0, 793, 848, 847, 780, 790, 0,
	0, 309, 228, 509, 629, 511, 510, 2737, 0, 2738,
	786, 789, 785, 783, 784, 0, 863, 0, 0, 0,
	0, 0, 0, 748, 760, 0, 765, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	757, 758, 0, 0, 0, 0, 813, 0, 759, 0,
	0, 808, 787, 791, 0, 0, 0, 0, 298, 436,
	455, 310, 425, 468, 315, 433, 447, 304, 396, 422,
	0, 0, 300, 453, 432, 378, 356, 357, 299, 0,
	416, 334, 348, 331, 394, 788, 811, 815, 330, 886,
	809, 463, 302, 0, 462, 393, 449, 454, 379, 373,
	0, 301, 451, 377, 372, 360, 338, 887, 361, 362,
	352, 406, 370, 407, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	806, 0, 626, 0, 465, 0, 0, 870, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 810, 0,
	419, 400, 883, 0, 0, 417, 368, 450, 408, 456,
	437, 464, 413, 409, 293, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 403, 424, 440,
	441, 442, 332, 316, 418, 317, 350, 318, 294, 324,
	322, 325, 426, 326, 296, 404, 446, 0, 345, 414,
	376, 297, 375, 405, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 410, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 290, 291, 650, 867, 395, 591,
	624, 625, 516, 0, 882, 862, 864, 865, 869, 873,
	874, 875, 876, 877, 879, 881, 885, 649, 0, 570,
	585, 653, 584, 646, 402, 0, 423, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 431,
	458, 470, 487, 490, 519, 604, 605, 606, 295, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 884, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 814, 566,
	567, 385, 386, 387, 388, 871, 592, 314, 488, 412,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 305, 397, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 401, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 427, 359, 369, 415, 466, 399, 420,
	311, 457, 429, 374, 545, 572, 893, 866, 892, 894,
	895, 891, 896, 897, 878, 769, 0, 821, 889, 888,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 284, 319, 320, 327, 647,
	644, 448, 648, 776, 292, 522, 367, 0, 411, 341,
	587, 588, 0, 639, 855, 828, 829, 830, 766, 831,
	825, 826, 767, 827, 856, 819, 852, 853, 795, 822,
	832, 851, 833, 854, 857, 858, 898, 899, 839, 823,
	256, 900, 836, 859, 850, 849, 834, 820, 860, 861,
	802, 797, 837, 838, 824, 843, 844, 845, 768, 816,
	817, 818, 840, 841, 798, 799, 800, 801, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 846, 634, 434, 0, 842, 637,
	638, 635, 371, 421, 439, 428, 812, 651, 512, 513,
	652, 623, 0, 761, 0, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 1728, 0, 0, 0, 764,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 803, 563, 514, 430, 381, 581,
	580, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 756, 0,
	0, 793, 848, 847, 780, 790, 0, 0, 309, 228,
	509, 629, 511, 510, 781, 0, 782, 786, 789, 785,
	783, 784, 0, 863, 0, 0, 0, 0, 0, 0,
	0, 760, 0, 765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 757, 758, 0,
	0, 0, 0, 813, 0, 759, 0, 0, 808, 787,
	791, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 788, 811, 815, 330, 886, 809, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 887, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 806, 0, 626,
	0, 465, 0, 0, 870, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 810, 0, 419, 400, 883,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 1729, 1730, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 867, 395, 591, 624, 625, 516,
	0, 882, 862, 864, 865, 869, 873, 874, 875, 876,
	877, 879, 881, 885, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 884, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 814, 566, 567, 385, 386,
	387, 388, 871, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 893, 866, 892, 894, 895, 891, 896,
	897, 878, 769, 0, 821, 889, 888, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	776, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 855, 828, 829, 830, 766, 831, 825, 826, 767,
	827, 856, 819, 852, 853, 795, 822, 832, 851, 833,
	854, 857, 858, 898, 899, 839, 823, 256, 900, 836,
	859, 850, 849, 834, 820, 860, 861, 802, 797, 837,
	838, 824, 843, 844, 845, 768, 816, 817, 818, 840,
	841, 798, 799, 800, 801, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 846, 634, 434, 0, 842, 637, 638, 635, 371,
	421, 439, 428, 812, 651, 512, 513, 652, 623, 0,
	761, 0, 398, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 764, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 803, 563, 514, 430, 381, 581, 580, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 756, 0, 0, 793, 848,
	847, 780, 790, 0, 0, 309, 228, 509, 629, 511,
	510, 781, 0, 782, 786, 789, 785, 783, 784, 0,
	863, 0, 0, 0, 0, 0, 0, 0, 760, 0,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 757, 758, 0, 0, 0, 0,
	813, 0, 759, 0, 0, 808, 787, 791, 0, 0,
	0, 0, 298, 436, 455, 310, 425, 468, 315, 433,
	447, 304, 396, 422, 0, 0, 300, 453, 432, 378,
	356, 357, 299, 0, 416, 334, 348, 331, 394, 788,
	811, 815, 330, 886, 809, 463, 302, 0, 462, 393,
	449, 454, 379, 373, 0, 301, 451, 377, 372, 360,
	338, 887, 361, 362, 352, 406, 370, 407, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 806, 0, 626, 0, 465, 0,
	0, 870, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 810, 0, 419, 400, 883, 0, 0, 417,
	368, 450, 408, 456, 437, 464, 413, 409, 293, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 403, 424, 440, 441, 442, 332, 316, 418, 317,
	350, 318, 294, 324, 322, 325, 426, 326, 296, 404,
	446, 0, 345, 414, 376, 297, 375, 405, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 410, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 290, 291,
	650, 867, 395, 591, 624, 625, 516, 0, 882, 862,
	864, 865, 869, 873, 874, 875, 876, 877, 879, 881,
	885, 649, 0, 570, 585, 653, 584, 646, 402, 0,
	423, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 431, 458, 470, 487, 490, 519, 604,
	605, 606, 295, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 884, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 814, 566, 567, 385, 386, 387, 388, 871,
	592, 314, 488, 412, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 305, 397, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 401, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 427, 359, 369,
	415, 466, 399, 420, 311, 457, 429, 374, 545, 572,
	893, 866, 892, 894, 895, 891, 896, 897, 878, 769,
	0, 821, 889, 888, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 284,
	319, 320, 327, 647, 644, 448, 648, 776, 292, 522,
	367, 0, 411, 341, 587, 588, 0, 639, 855, 828,
	829, 830, 766, 831, 825, 826, 767, 827, 856, 819,
	852, 853, 795, 822, 832, 851, 833, 854, 857, 858,
	898, 899, 839, 823, 256, 900, 836, 859, 850, 849,
	834, 820, 860, 861, 802, 797, 837, 838, 824, 843,
	844, 845, 768, 816, 817, 818, 840, 841, 798, 799,
	800, 801, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 846, 634,
	434, 0, 842, 637, 638, 635, 371, 421, 439, 428,
	812, 651, 512, 513, 652, 623, 0, 761, 0, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 803, 563,
	514, 430, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 228, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 748, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 419, 400, 883, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 893, 866, 892,
	894, 895, 891, 896, 897, 878, 769, 0, 821, 889,
	888, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 776, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 855, 828, 829, 830, 766,
	831, 825, 826, 767, 827, 856, 819, 852, 853, 795,
	822, 832, 851, 833, 854, 857, 858, 898, 899, 839,
	823, 256, 900, 836, 859, 850, 849, 834, 820, 860,
	861, 802, 797, 837, 838, 824, 843, 844, 845, 768,
	816, 817, 818, 840, 841, 798, 799, 800, 801, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 846, 634, 434, 0, 842,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 0, 761, 205, 64, 196, 167, 0,
	0, 0, 0, 0, 0, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 197, 0, 0, 0, 0, 0,
	0, 188, 0, 336, 0, 198, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 139, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 166,
	194, 203, 195, 123, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 220, 0, 0, 0, 435, 0,
	0, 363, 193, 187, 186, 481, 0, 419, 400, 232,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	601, 602, 603, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 460, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	223, 573, 576, 506, 233, 0, 570, 585, 543, 584,
	234, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 137, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 231, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 238, 303, 448, 239,
	0, 292, 522, 367, 168, 411, 341, 587, 588, 61,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 235, 45, 221, 224, 226,
	225, 0, 62, 571, 583, 617, 5, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 142, 236, 512, 513, 237, 623, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 139, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 2412, 2415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 2416, 465, 0, 0, 0, 2411,
	0, 2410, 435, 2408, 2413, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 2414, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 168, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 227,
	0, 0, 780, 790, 0, 0, 309, 228, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 787, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	788, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 205, 64, 196,
	167, 0, 0, 0, 0, 0, 0, 398, 677, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 0, 0, 0,
	683, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 681, 682, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 678, 680, 314, 488, 412, 692,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 168, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	1133, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1118, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 2575, 2578, 2579, 2580, 2581,
	2582, 2583, 0, 2588, 2584, 2585, 2586, 2587, 0, 2570,
	2571, 2572, 2573, 1116, 2554, 2576, 0, 2555, 393, 2556,
	2557, 2558, 2559, 1120, 2560, 2561, 2562, 2563, 2564, 2567,
	2568, 2565, 2566, 2574, 406, 370, 407, 353, 383, 382,
	384, 1144, 1146, 1148, 1150, 1153, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 2569, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 2577, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 2412, 2415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	2416, 465, 0, 0, 0, 2411, 0, 2410, 435, 2408,
	2413, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 2414, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 2433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 2432, 465, 0, 0, 0, 2438,
	2435, 2437, 435, 0, 2436, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 2430, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 2433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 2432, 465,
	0, 0, 0, 2438, 2435, 2437, 435, 0, 2436, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	2126, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 2127, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 1254, 1255,
	1256, 1253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 205, 651, 512, 513, 652,
	623, 0, 0, 0, 0, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 139, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 2176,
	0, 227, 0, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 168, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 205, 651, 512, 513, 652, 623, 0,
	0, 0, 0, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 139, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 201, 2161, 0, 227,
	0, 0, 0, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 168, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 1044, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 1051, 1052, 0, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 1038,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 1025,
	463, 302, 1024, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 1042, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 1043, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 1046, 566, 567,
	385, 386, 387, 388, 347, 592, 1041, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 1053,
	1039, 1049, 1040, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 1050, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 1037, 421, 439, 428, 205, 651, 512, 513, 652,
	623, 0, 0, 0, 0, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 139, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2058, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 168, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 1051, 1052, 0, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 1025, 463, 302, 1024, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 1053, 2079, 1049, 2080, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 1050, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 2962, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 2965,
	0, 0, 0, 2964, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 1549, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 1547, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1545, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	1543, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	1547, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1545, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4030,
	0, 227, 848, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 1547, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1545, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 2477, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 974, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 1547, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1758, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 2516, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	2518, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 2126, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 2127, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 3179, 3181,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 2539, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 1547, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 664, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 848, 0,
	0, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4007, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 3776, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 3909, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1772, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3791, 0, 227, 0, 0,
	0, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 3703, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 3211, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2058, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 3421, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 1547, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 2518, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 2880, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 2635, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 2595, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 2368, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 1912, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 2040, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 1547, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 1945, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 1576, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 665, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 455, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 675, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 455, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 974, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 447, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 3158, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 1898,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 413, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 398, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 430, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 309, 228,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 436, 1526, 310, 425,
	468, 315, 433, 447, 304, 396, 422, 0, 0, 300,
	453, 432, 378, 356, 357, 299, 0, 416, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 302,
	0, 462, 393, 449, 454, 379, 373, 0, 301, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 406, 370,
	407, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 419, 400, 654,
	0, 0, 417, 368, 450, 408, 456, 437, 464, 413,
	409, 293, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 403, 424, 440, 441, 442, 332,
	316, 418, 317, 350, 318, 294, 324, 322, 325, 426,
	326, 296, 404, 446, 0, 345, 414, 376, 297, 375,
	405, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 410, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 290, 291, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 402, 0, 423, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 431, 458, 470, 487,
	490, 519, 604, 605, 606, 295, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 412, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	305, 397, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 401, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	427, 359, 369, 415, 466, 399, 420, 311, 457, 429,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 284, 319, 320, 327, 647, 644, 448, 648,
	0, 292, 522, 367, 0, 411, 341, 587, 588, 0,
	639, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 590, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 434, 0, 636, 637, 638, 635, 371,
	421, 439, 428, 0, 651, 512, 513, 652, 623, 398,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 430, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 309, 228, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	436, 1524, 310, 425, 468, 315, 433, 447, 304, 396,
	422, 0, 0, 300, 453, 432, 378, 356, 357, 299,
	0, 416, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 302, 0, 462, 393, 449, 454, 379,
	373, 0, 301, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 406, 370, 407, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 419, 400, 654, 0, 0, 417, 368, 450, 408,
	456, 437, 464, 413, 409, 293, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 403, 424,
	440, 441, 442, 332, 316, 418, 317, 350, 318, 294,
	324, 322, 325, 426, 326, 296, 404, 446, 0, 345,
	414, 376, 297, 375, 405, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 410,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 290, 291, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 402, 0, 423, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	431, 458, 470, 487, 490, 519, 604, 605, 606, 295,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	412, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 305, 397, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 401,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 427, 359, 369, 415, 466, 399,
	420, 311, 457, 429, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 284, 319, 320, 327,
	647, 644, 448, 648, 0, 292, 522, 367, 0, 411,
	341, 587, 588, 0, 639, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 590,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 434, 0, 636,
	637, 638, 635, 371, 421, 439, 428, 0, 651, 512,
	513, 652, 623, 398, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 430, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 309, 228, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 436, 455, 310, 425, 468, 315,
	433, 1404, 304, 396, 422, 0, 0, 300, 453, 432,
	378, 356, 357, 299, 0, 416, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 302, 0, 462,
	393, 449, 454, 379, 373, 0, 301, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 406, 370, 407, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 419, 400, 654, 0, 0,
	417, 368, 450, 408, 456, 437, 464, 413, 409, 293,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 403, 424, 440, 441, 442, 332, 316, 418,
	317, 350, 318, 294, 324, 322, 325, 426, 326, 296,
	404, 446, 0, 345, 414, 376, 297, 375, 405, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 410, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 290,
	291, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 402,
	0, 423, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 431, 458, 470, 487, 490, 519,
	604, 605, 606, 295, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 412, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 305, 397,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 401, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 427, 359,
	369, 415, 466, 399, 420, 311, 457, 429, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	284, 319, 320, 327, 647, 644, 448, 648, 0, 292,
	522, 367, 0, 411, 341, 587, 588, 0, 639, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 590, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 434, 0, 636, 637, 638, 635, 371, 421, 439,
	428, 0, 651, 512, 513, 652, 623, 398, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 430,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	309, 228, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 436, 455,
	310, 425, 468, 315, 433, 447, 304, 396, 422, 0,
	0, 300, 453, 432, 378, 356, 357, 299, 0, 416,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 302, 0, 462, 393, 449, 454, 379, 373, 0,
	301, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	406, 370, 407, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 419,
	400, 654, 0, 0, 417, 368, 450, 408, 456, 437,
	464, 413, 409, 293, 438, 333, 380, 306, 308, 743,
	335, 337, 339, 340, 389, 390, 403, 424, 440, 441,
	442, 332, 316, 418, 317, 350, 318, 294, 324, 322,
	325, 426, 326, 296, 404, 446, 0, 345, 414, 376,
	297, 375, 405, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 410, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 290, 291, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 402, 0, 423, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 431, 458,
	470, 487, 490, 519, 604, 605, 606, 295, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 412, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 305, 397, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 401, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 427, 359, 369, 415, 466, 399, 420, 311,
	457, 429, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 284, 319, 320, 327, 647, 644,
	448, 648, 0, 292, 522, 367, 0, 411, 341, 587,
	588, 0, 639, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 590, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 434, 0, 636, 637, 638,
	635, 371, 421, 439, 428, 0, 651, 512, 513, 652,
	623, 398, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 430, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 309, 228, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 436, 455, 310, 425, 468, 315, 433, 447,
	304, 396, 422, 0, 0, 300, 453, 432, 378, 356,
	357, 299, 0, 416, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 302, 0, 462, 393, 449,
	454, 379, 373, 0, 301, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 406, 370, 407, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 419, 400, 654, 0, 0, 417, 368,
	450, 408, 456, 437, 464, 700, 409, 293, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	403, 424, 440, 441, 442, 332, 316, 418, 317, 350,
	318, 294, 324, 322, 325, 426, 326, 296, 404, 446,
	0, 345, 414, 376, 297, 375, 405, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 410, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 290, 291, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 402, 0, 423,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 431, 458, 470, 487, 490, 519, 604, 605,
	606, 295, 489, 608, 609, 610, 611, 612, 613, 701,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 412, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 305, 397, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 401, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 427, 359, 369, 415,
	466, 399, 420, 311, 457, 429, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 1254, 1255,
	1256, 1253, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 284, 319,
	320, 327, 647, 644, 448, 648, 0, 292, 522, 367,
	0, 411, 341, 587, 588, 0, 639, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 590, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 1795, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 434,
	0, 636, 637, 638, 635, 371, 421, 439, 428, 0,
	651, 512, 513, 652, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1791, 0, 0, 0,
	0, 0, 0, 1788, 0, 0, 0, 1790, 1787, 1789,
	1793, 1794, 0, 0, 0, 1792, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1798, 1799, 1800, 1801, 1802, 1803, 1796, 1797,
}

var yyPact = [...]int{
	321, -1000, -1000, -1000, -345, 15772, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 50040, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 452, 50040, -343, 31654, 48138, -1000, -1000, 2855, -1000,
	48772, 17694, 50040, 522, 520, 50040, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 949, -1000, 54478, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 864, 5187, 53844, 11941, -221,
	-1000, 1365, -36, 2621, 638, -218, -220, 1115, 1120, 1097,
	997, 50040, 1088, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 342, 965, 49406, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3985, 267, 948, 965, 22774, 141, 135,
	1365, 466, -80, 257, -1000, 2037, 4030, 184, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11941,
	11941, 15772, -371, 15772, 11941, 50040, 50040, -1000, -1000, -1000,
	-1000, -343, 48772, 864, 5187, 11941, 2621, 638, -218, -220,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -80, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	135, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4893, -1000, 1676, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2330,
	3168, 1675, 2619, 796, 48138, 50040, -1000, 138, 796, -1000,
	-1000, -1000, 1365, 3488, -1000, 50040, 50040, 239, 1902, -1000,
	534, 485, 404, 446, 358, 1674, -1000, -1000, -1000, -1000,
	-1000, -1000, 716, 3473, -1000, 50040, 50040, 3179, 50040, -1000,
	2273, 745, -1000, 5245, 3324, 1518, 971, 3190, -1000, -1000,
	3167, -1000, 364, 761, 297, 817, 451, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 327, -1000, 3389, -1000, -1000, 349,
	-1000, -1000, 338, -1000, -1000, -1000, 118, -1000, -1000, -1000,
	-1000, -1000, -1000, -23, -1000, -1000, 1173, 2300, 11941, 2529,
	-1000, 3621, 1683, -1000, -1000, -1000, 7476, 14489, 14489, 14489,
	14489, 50040, -1000, -1000, 3003, 11941, 3162, 3161, 3160, 3158,
	-1000, -1000, -1000, -1000, -1000, -1000, 3154, 1671, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2036, -1000, -1000,
	-1000, 15126, -1000, 3153, 3151, 3150, 3149, 3148, 3147, 3146,
	3144, 3143, 3141, 3136, 3134, 3133, 3132, 2827, 17050, 3131,
	2617, 2614, 3130, 3129, 3128, 2612, 3126, 3124, 3123, 2827,
	2827, 3121, 3114, 3113, 3102, 3099, 3098, 3092, 3090, 3087,
	3084, 3083, 3078, 3071, 3070, 3069, 3063, 3062, 3057, 3056,
	3055, 3049, 3043, 3039, 3038, 3037, 3036, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1387, -1000, 3034, 3465, 2894, -1000, 3367, 3364, 3357,
	3352, -271, 3023, 2251, -1000, -1000, 88, 3472, 50040, -293,
	50040, 412, -86, -91, -94, -1000, -78, -1000, -1000, 1069,
	-1000, 1062, 53210, 917, -1000, -1000, 50040, 861, 861, 861,
	50040, 50040, 217, 859, 861, 861, 861, 861, 861, 926,
	861, 3401, 945, 935, 934, 933, 861, -39, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1899, 1898, 3254, 1041, -1000,
	-1000, -1000, -1000, 1533, 50040, -1000, 2956, 412, -331, 1767,
	1767, 3452, 3452, 3400, 758, 756, 749, 1767, 576, -1000,
	1853, 1853, 1853, 1853, 1767, 510, 835, 3404, 3404, 125,
	1853, 96, 1767, 1767, 96, 1767, 1767, -1000, 1834, 331,
	-278, -1000, -1000, -1000, -1000, 1853, 1853, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3383, 3382, 864, 864, 50040, 864,
	213, 50040, 864, 864, 864, 50040, 868, -330, 40, 52576,
	51942, 2284, 2273, 738, 732, 1547, 1903, -1000, 1794, 50040,
	50040, 1794, 1794, 25948, 25314, -1000, 50040, -1000, 3465, 2894,
	2816, 1744, 2815, 2894, -96, 412, 864, 864, 864, 864,
	864, 328, 864, 864, 864, 864, 864, 50040, 50040, 47504,
	864, 864, 864, 864, 10024, 2037, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15772,
	2035, 2065, 183, -16, -315, 261, -1000, -1000, 50040, 3302,
	323, -1000, -1000, -1000, 2934, -1000, 2942, 2942, 2942, 2942,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2942, 2942, 2947, 3022, -1000, -1000, 2935, 2935, 2935, 2934,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2945, 2945, 2946, 2946, 2945,
	50040, -118, -1000, -1000, 11941, 50040, 3313, 429, 3021, 796,
	-1000, -1000, 50040, 288, 465, 3465, 3310, 3404, 3436, -1000,
	-1000, 1670, 2249, 2611, -1000, 358, -1000, 525, 358, -1000,
	507, 507, 1741, -1000, 1182, -1000, -1000, -1000, -1000, -1000,
	-1000, 50040, -23, 433, -1000, -1000, 2575, 3019, -1000, 667,
	1426, 1529, -1000, 387, 5284, 40530, 2273, 40530, 50040, -1000,
	-1000, -1000, -1000, -1000, -1000, 113, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	326, -1000, 11941, 11941, 11941, 11941, 11941, -1000, 767, 13852,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14489, 14489, 14489,
	14489, 14489, 14489, 14489, 14489, 14489, 14489, 14489, 14489, 3002,
	2093, 14489, 14489, 14489, 14489, 28484, 1744, 3088, 1540, 306,
	1683, 1683, 1683, 1683, 11941, -1000, 1934, 2300, 11941, 11941,
	11941, 11941, 34824, 50040, -1000, -1000, 54884, 11941, 11941, 4297,
	11941, 3348, 11941, 11941, 11941, 2811, 6193, 50040, 11941, -1000,
	2810, 2807, -1000, -1000, 2102, 11941, -1000, -1000, 11941, -1000,
	-1000, 11941, 14489, 11941, -1000, 11941, 11941, 11941, -1000, -1000,
	1606, 3348, 3348, 3348, 1847, 11941, 11941, 3348, 3348, 3348,
	1830, 3348, 3348, 3348, 3348, 3348, 3348, 3348, 3348, 3348,
	3348, 3348, 2805, 2804, 2803, 11304, 3404, -221, -1000, 9387,
	3310, 3404, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -274, 3018, 50040, 2609, 2607, -353, 177, 469,
	50040, 1190, -1000, -1000, 50040, 2248, 50040, 2242, 44, 1110,
	1070, 1076, -1000, -1000, 50040, 51308, -1000, 50040, 1944, 50040,
	50040, 3344, -1000, 3017, 50040, 861, 861, 861, -1000, 45602,
	40530, 50040, 50040, 2273, 50040, 50040, 50040, 861, 861, 861,
	861, 50040, -1000, 3263, 40530, 3258, 868, -1000, 50040, 1533,
	3342, 50040, -1000, -1000, -1000, -1000, 3452, 14489, 14489, -1000,
	-1000, 11941, -1000, 46870, 1853, 1767, 1767, -1000, -1000, 50040,
	-1000, -1000, -1000, 1853, 50040, 1853, 1853, 3452, 1853, -1000,
	-1000, -1000, 1767, 1767, -1000, -1000, 11941, -1000, -1000, 1853,
	1853, -1000, -1000, 3452, 50040, 109, 3452, 3452, 84, -1000,
	-1000, -1000, 1767, 50040, 50040, 861, 50040, -1000, 50040, 50040,
	-1000, -1000, 50040, 50040, 4471, 50040, 45602, 46236, 3381, -1000,
	40530, 50040, 50040, 1531, -1000, 914, 37994, -1000, 50040, 1471,
	-1000, 36, -1000, 17, 40, 1794, 40, 1794, 912, -1000,
	665, 671, 24046, 593, 40530, 6830, -1000, -1000, 1794, 1794,
	6830, 6830, 1686, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1525, -1000, 262, 3404, -1000, -1000, -1000, -1000, -1000, 2224,
	-1000, 50040, 45602, 40530, 2273, 50040, 864, 50040, 50040, 50040,
	50040, 50040, -1000, 3006, 1667, -1000, 3323, 50040, 50040, 50040,
	50040, 1429, -1000, -1000, 20864, 1663, -1000, -1000, 1981, -1000,
	11941, 15772, -246, 11941, 15772, 15772, 11941, 15772, -1000, 11941,
	320, -1000, -1000, -1000, -1000, 2223, -1000, 2220, -1000, -1000,
	-1000, -1000, -1000, 2606, 2606, -1000, 2212, -1000, -1000, -1000,
	-1000, 2210, -1000, -1000, 2208, -1000, -1000, -1000, -1000, -163,
	2798, 1173, -1000, 2598, 3189, -223, -1000, 22140, 50040, 50040,
	429, -357, 1893, 1875, 1870, 3393, -1000, -223, -1000, 21502,
	50040, 3404, -1000, -226, 3310, 11941, 50040, -1000, 3399, -1000,
	-1000, 358, -1000, -1000, -1000, 507, 453, -1000, -1000, -1000,
	-1000, -1000, -1000, 1662, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 448, -81, -100, 1519, -1000, 50040,
	-1000, -1000, 387, 40530, 42432, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 270, -1000, -1000, 190, -1000, 907, 282, 1738,
	-1000, -1000, 225, 204, 219, 994, 2300, -1000, 1980, 1980,
	1957, -1000, 747, -1000, -1000, -1000, -1000, 3003, -1000, -1000,
	-1000, 2491, 2187, -1000, 1812, 1812, 1692, 1692, 1692, 1692,
	1692, 1766, 1766, -1000, -1000, -1000, 7476, 3002, 14489, 14489,
	14489, 14489, 947, 947, 4184, 4068, -1000, -1000, -1000, -1000,
	11941, 162, 1977, -1000, 11941, 2923, 1520, 2610, 1444, 1732,
	-1000, 2934, 11941, 1658, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2795, 2793, 2508, 3468, 2792, 11941,
	-1000, -1000, 1731, 1716, 1689, -1000, 2147, 10667, -1000, -1000,
	-1000, 2791, 1626, 2790, -1000, -1000, -1000, 2789, 1688, 1224,
	2787, 2413, 2785, 2780, 2779, 2776, 1517, 11941, 11941, 11941,
	11941, 2774, 1680, 1679, 11941, 11941, 11941, 11941, 2772, 11941,
	11941, 11941, 11941, 11941, 11941, 11941, 11941, 11941, 11941, 50040,
	129, 129, 129, 1513, 1494, -1000, -1000, 1660, -1000, 2300,
	-1000, -1000, 3310, -1000, 2998, 2206, 1484, -1000, -1000, -339,
	2484, 50040, 50040, 173, 50040, 2577, -309, 50040, -1000, -1000,
	2563, -1000, -1000, -1000, 1106, 1053, 1065, -1000, 50040, -1000,
	2559, 3311, 3398, 3397, 50040, 1167, 2997, 50040, 50040, 50040,
	311, -1000, -1000, 1472, -1000, 282, -30, 537, 1198, 3178,
	3467, -119, 50040, 50040, 50040, 50040, 3340, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 44968, -1000, 2995, 1656, -1000,
	-1000, 1683, 1683, 2300, 3176, 50040, 50040, 3452, 3452, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1853, 3452, 3452, 1376,
	1767, 1853, -1000, -1000, 1853, -357, -1000, 1853, -1000, -357,
	1619, -357, 50040, -1000, -1000, -1000, 3336, 2956, 1481, -1000,
	-1000, -1000, 3435, 1620, 852, 852, 1039, 741, 3431, 19596,
	-1000, 1734, 1147, 894, 3292, 362, -1000, 1734, -160, 804,
	1734, 1734, 1734, 1734, 1734, 1734, 1734, 648, 645, 1734,
	1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
	1119, 1734, 1734, 1734, 1734, 1734, -1000, 1734, 2994, 515,
	-1000, -1000, -1000, -1000, -1000, -1000, 823, 603, 309, 3379,
	413, -1000, 411, 1472, 347, 3378, 444, 50040, 50040, 3566,
	1417, -1000, -1000, -1000, -1000, -1000, 29118, 29118, 23412, 29118,
	-1000, 195, 1794, 40, 134, -1000, -1000, 1471, 6830, 1471,
	6830, 2205, -1000, -1000, 893, -1000, -1000, 1198, -1000, 50040,
	50040, -1000, -1000, 2990, 1864, -1000, -1000, 17050, -1000, 6830,
	6830, -1000, -1000, 31020, 50040, -1000, -25, -1000, 1, 3310,
	-1000, 1179, -1000, -1000, 1469, 1198, 3188, 50040, 1179, 1179,
	1179, -1000, -1000, 18328, 50040, 50040, -1000, -1000, -1000, -1000,
	3452, 10024, -1000, 37994, -1000, -1000, 44334, -1000, 43700, 1911,
	-1000, 15772, 1975, 180, -1000, 256, -318, 179, 1936, 178,
	2300, -1000, -1000, 2771, 2770, 1655, -1000, 1642, 2769, 1641,
	1639, 2204, -1000, 82, -1000, 3304, 1217, -1000, 2974, -1000,
	1638, 3250, -1000, 1457, -1000, 1861, 1634, -1000, -1000, -1000,
	11941, 43066, 11941, 1020, 1217, 1632, 3248, 1457, 3310, 2557,
	-1000, 1442, -1000, 2338, 1581, 222, -1000, -1000, -1000, 50040,
	864, 2575, 1611, 42432, 1285, -1000, 884, 1579, 1575, -1000,
	40530, 355, 40530, -1000, 40530, -1000, -1000, 405, -1000, 50040,
	3309, -1000, -1000, -1000, -1000, -1000, 2484, 1860, -356, 50040,
	-1000, -1000, -1000, -1000, -1000, 1601, -1000, 947, 947, 4184,
	3815, -1000, 14489, -1000, 14489, 3079, -1000, 1910, -1000, 11941,
	1962, 3945, 11941, 3945, 3513, 27216, 34824, -111, 3308, 3075,
	50040, -1000, -1000, 11941, 11941, -1000, 3066, -1000, -1000, -1000,
	-1000, 11941, 11941, 2201, -1000, 50040, -1000, -1000, -1000, -1000,
	27216, -1000, 14489, -1000, -1000, -1000, -1000, 11941, 1345, 1345,
	2999, 1600, 129, 129, 129, 2985, 2949, 2936, 1596, 129,
	2910, 2873, 2832, 2814, 2706, 2688, 2675, 2665, 2503, 2494,
	1588, -1000, 2972, -1000, -1000, 2052, 13215, 9387, -1000, -1000,
	304, 1424, 2202, 2556, 128, -1000, 1858, -1000, 2553, 50040,
	50040, 1188, -1000, 50040, 3462, -1000, -1000, -1000, -1000, 1046,
	-1000, 2540, -1000, 265, 243, 333, 2768, 1405, -1000, -1000,
	50040, -1000, -1000, -1000, 18328, 2956, 2969, 2956, 145, 1734,
	643, 40530, 728, -1000, 50040, 2068, 1857, 3186, 841, 3301,
	50040, 2968, 408, 2960, 2959, 3333, 504, 4984, 50040, 1364,
	-1000, 1572, 4030, -1000, 50040, -1000, 2273, -1000, 1767, -1000,
	-1000, 3452, -1000, -1000, 11941, 11941, 3452, 1767, 1767, -1000,
	1853, -1000, 50040, -1000, -357, 504, 4984, 3330, 4605, 592,
	2419, -1000, 50040, -1000, -1000, -1000, 811, -1000, 1059, 861,
	50040, 1998, 1059, 1997, 2958, -1000, -1000, 50040, 50040, 50040,
	50040, -1000, -1000, 50040, -1000, 50040, 50040, 50040, 50040, 50040,
	41798, -1000, 50040, 50040, -1000, 50040, 1996, 50040, 1993, 3279,
	-1000, 1734, 1734, 1006, -1000, -1000, 636, -1000, 41798, 2199,
	2197, 2196, 2189, 2537, 2535, 2534, 1734, 1734, 2184, 2523,
	41164, 2521, 1209, 2183, 2172, 2171, 2150, 2520, 1054, -1000,
	2515, 2133, 2123, 2119, 50040, 2957, 2394, 513, -1000, -1000,
	2106, 145, 1734, 396, 50040, 1850, 1844, 643, 626, 530,
	-31, 24680, -1000, -1000, -1000, 50040, 37994, 37994, 37994, 37994,
	37994, 37994, -1000, 3223, 3205, 3218, -1000, 3212, 3210, 3219,
	3214, 3195, 50040, 37994, 2956, -1000, 41164, -1000, -1000, -1000,
	1744, 1584, 3648, 1049, 11941, 6830, -1000, -1000, 16, -13,
	-1000, -1000, -1000, -1000, 40530, 2501, 593, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3396, 50040, 50040, 780, 2764, 1388,
	-1000, -1000, -1000, 4984, 2942, 2942, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2942, 2942, 2947, -1000, -1000,
	2935, 2935, 2935, 2934, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2945, 2945, 2946, 2946, 2945, -1000,
	-1000, 3450, -1000, 1371, -1000, -1000, 1565, -1000, 1925, -350,
	15772, 1842, 1743, -1000, 11941, 15772, 11941, -251, 379, -257,
	-1000, -1000, -1000, 2497, -1000, -1000, -1000, 2163, -1000, 2158,
	-1000, 194, 241, 1987, -223, 9387, 456, 50040, -223, 50040,
	9387, -1000, 50040, 158, -364, -365, 154, 2495, 395, -223,
	3396, 82, 11941, 3282, -1000, -1000, 50040, 2151, -1000, -1000,
	-1000, 3460, 40530, 2273, 1703, 39896, -1000, 348, -1000, 268,
	619, 2486, -1000, 932, 127, 2485, 2484, -1000, -1000, -1000,
	-1000, 14489, 1683, -1000, -1000, -1000, 2300, 11941, 2745, -1000,
	1044, 1044, 2179, 2738, 2737, -1000, 2942, 2942, -1000, 2934,
	2935, 2934, 1044, 1044, 2729, -1000, 2931, -1000, 3308, -1000,
	2122, 2488, -1000, 2481, 2356, 11941, -1000, 2726, 4164, 1499,
	-43, -191, 129, 129, -1000, -1000, -1000, -1000, 129, 129,
	129, 129, -1000, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 798, -103, -286, -105, -288, -1000,
	2723, 1336, -1000, -1000, -1000, -1000, -1000, 4297, 1318, 545,
	545, 2484, 2482, -1000, 883, 2477, 1102, 50040, 2461, -314,
	-1000, 2459, -1000, -1000, 50040, 50040, 50040, 50674, 597, 50040,
	50040, 2453, 2450, 1167, 4984, 2722, 3329, 18962, 3328, 2258,
	-1000, -1000, -1000, 30386, 626, -1000, -1000, -1000, 752, 360,
	2148, 608, -1000, 50040, 555, 3269, 1841, 2447, 50040, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3301, -1000, 1037, 488,
	36726, 16416, -1000, 438, 50040, -1000, 18962, 18962, 438, 493,
	1838, -1000, 796, 1320, 133, 37994, 50040, -1000, 37360, 2714,
	-1000, 1198, 3452, -1000, 2300, 2300, -357, 3452, 3452, 1767,
	-1000, -1000, 493, -1000, 438, -1000, 1515, 20230, 564, 531,
	528, -1000, 713, -1000, -1000, 791, 3291, 4984, -1000, 50040,
	-1000, 50040, -1000, 50040, 50040, 861, 11941, 3291, 50040, 882,
	-1000, 1201, 500, 468, 779, 779, 1309, -1000, 3308, -1000,
	-1000, 1295, -1000, -1000, -1000, -1000, 50040, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 27216, 27216, 3377, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2428, 2427, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 50040, 1576, -1000, 1839, 2121, 2426, -1000, 2258, 30386,
	1828, 1794, 2424, 2418, 626, -1000, 2417, 2415, 2068, 1827,
	931, 50040, -1000, 1183, 50040, 50040, -1000, 1288, -1000, 1821,
	3172, 3185, 3172, -1000, 3172, -1000, -1000, -1000, -1000, -1000,
	-1000, 3211, -1000, 3208, -1000, -1000, -1000, -1000, 1288, -1000,
	-1000, -1000, -1000, -1000, 1049, -1000, 3395, 1059, 1059, 1059,
	2713, -1000, -1000, -1000, -1000, 1285, 2710, -1000, -1000, -1000,
	3478, -1000, -1000, -1000, -1000, -1000, -1000, 18328, 3299, 3444,
	3430, 39262, -1000, -350, 1747, -1000, 1924, 175, 1908, 50040,
	-1000, -1000, -1000, 2709, 2708, -228, 206, 3429, 3428, 1127,
	-1000, 2701, 1229, -223, -1000, -1000, 1217, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -368, -223, -1000, 1217, -1000, 194,
	-1000, -1000, 3277, -1000, -1000, 2273, -1000, 263, -1000, -1000,
	-1000, -1000, -1000, -1000, 269, -1000, 50040, -1000, 1227, 126,
	-1000, 2300, -1000, -1000, -1000, -1000, -1000, 3945, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2412, -1000,
	-1000, 11941, -1000, -1000, -1000, 2291, -1000, -1000, 11941, 2696,
	2411, 2685, 2402, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3465, -1000, 3426, 1556, 2677, 2673, 1555, 2667, 2663, -1000,
	11941, 2661, 4297, 1018, 2399, 1018, -1000, -1000, 443, 29752,
	50040, 3455, -1000, 50040, 2398, -1000, -1000, 50040, 2106, 591,
	2106, 587, 50040, -1000, -1000, -1000, -1000, 954, 438, 2660,
	1220, -1000, -1000, -1000, -1000, 438, -1000, 2397, 281, -1000,
	-1000, -1000, -1000, 2120, -1000, -1000, 2105, 1621, 301, -1000,
	-1000, -1000, -1000, -1000, -1000, 2185, 50040, 38628, 2207, 1820,
	-359, -1000, 2912, -1000, 1734, 1734, 1734, 50040, 1543, -1000,
	1734, 1734, 2659, -1000, -1000, 2657, 2654, -120, 781, 1819,
	1798, -1000, 2117, 29118, 37994, 37360, 1278, -1000, 1552, -1000,
	-1000, -1000, -1000, -1000, -1000, 3452, 781, -1000, 553, 2114,
	14489, 2908, 14489, 2907, 574, 2905, 1537, -1000, 50040, -1000,
	-1000, 50040, 1740, 2898, -1000, 2895, 3175, 536, 2893, 2892,
	50040, 2281, -1000, 3291, 50040, 782, 3298, -1000, -1000, -1000,
	457, -1000, -1000, 609, -1000, 50040, -1000, 50040, -1000, 1682,
	-1000, 27216, -1000, -1000, 1522, -1000, 2394, 2392, 4297, -1000,
	-1000, 281, 2391, 6830, -1000, -1000, -1000, -1000, -1000, 3269,
	2390, 2185, 50040, -1000, 50040, 1183, 1183, 3465, 50040, 9387,
	-1000, -1000, 11941, 2891, -1000, 11941, -1000, -1000, -1000, -1000,
	-1000, -1000, 2885, 3288, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1704, -1000, 11941, 12578, -1000, 860, 15772, -260, 378,
	-1000, -1000, -1000, -230, 2388, -1000, -1000, 3424, 2387, 2288,
	50040, -1000, -1000, 1217, -1000, 1217, -228, -1000, -1000, 1198,
	-1000, -1000, 1246, 676, -1000, 2653, 276, -1000, 2272, -1000,
	2232, 129, -1000, 129, -1000, 278, 11941, -1000, 2385, -1000,
	-1000, -1000, 2384, -1000, -1000, 2162, -1000, 2643, -1000, 2382,
	-1000, -1000, 50040, -1000, -1000, 1092, 2377, -360, -1000, 2375,
	2106, 2372, 2106, 581, 4984, -123, -120, 18962, -123, -1000,
	-1000, 391, 422, -1000, -1000, 2075, 674, -1000, -1000, 2371,
	628, -1000, 1183, -1000, 1811, 2011, 2318, 34824, 27216, 28484,
	2370, -1000, -1000, 36726, 1704, 1704, 5363, 326, 5728, -1000,
	2884, 1130, 1795, -1000, 2112, -1000, 2110, -1000, 3452, 1278,
	131, -1000, -1000, 1698, -1000, 1130, 2419, 3423, -1000, 4091,
	50040, 3638, 50040, 2881, 1807, 14489, -1000, 791, 3246, -1000,
	-1000, 1740, -1000, -1000, 1986, 14489, -1000, -1000, 2368, 28484,
	981, 1803, 1802, 964, 2878, -1000, 613, 3477, -1000, -1000,
	-1000, 995, 2877, -1000, 1974, 1971, -1000, 50040, -1000, 34824,
	34824, 806, 806, 34824, 34824, 2867, 779, -1000, -1000, 14489,
	-1000, -1000, 1734, -1000, -1000, -1000, 1734, 1659, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2207, -1000, -1000, 1179, -1000,
	3404, -1000, -1000, 2300, 50040, 2300, 36092, -1000, 3422, 3421,
	-1000, 2300, 245, 236, 2851, 2849, -1000, -350, 50040, 50040,
	-233, 2109, -1000, 2367, 202, -1000, -1000, 1176, -230, -238,
	84, 27216, 1801, -1000, 2642, 365, -149, -1000, -1000, -1000,
	-1000, 2635, -1000, 970, -1000, -1000, -1000, 1173, 2634, 2631,
	-1000, -1000, -1000, -1000, 50040, -1000, 2310, -1000, 2366, -1000,
	2364, 2106, -114, -1000, -1000, 484, -1000, -1000, -1000, 631,
	2274, -1000, -1000, 417, -1000, -1000, -1000, 2185, 2359, -1000,
	-1000, 124, -1000, 1768, 1504, -1000, -1000, -1000, -1000, -1000,
	-1000, 778, -1000, 438, 5657, -1000, 1147, 27850, -1000, 1246,
	778, 515, 33556, 690, 307, -1000, 2104, -1000, -1000, 3465,
	-1000, 679, -1000, 571, -1000, 1489, -1000, 1488, 35458, 2097,
	3461, -1000, 5434, 897, -1000, -1000, 4184, -1000, -1000, -1000,
	-1000, -1000, -1000, 2355, 2354, -1000, -1000, -1000, -1000, -1000,
	2095, 2846, 65, 3374, 2353, -1000, -1000, 2841, 1465, 1462,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1451,
	1445, 34824, -1000, -1000, 4184, 2071, 27216, 1734, -1000, -1000,
	1440, 1428, -1000, -1000, -1000, -1000, -1000, -325, 2837, 11941,
	11941, -1000, -1000, -1000, 2836, -1000, -1000, 3420, -233, -240,
	2349, 193, 264, -1000, 2333, -1000, -115, 3240, -154, -1000,
	-1000, 702, -224, 165, 151, 146, -1000, -1000, -1000, 11941,
	-1000, -1000, -1000, 123, -1000, 1765, -1000, -1000, 2331, 50040,
	612, -1000, -1000, -1000, -1000, 259, -1000, -1000, -1000, -1000,
	-1000, -1000, 2318, 2317, -1000, 548, 3419, -1000, 5728, -1000,
	1734, -1000, 548, 1423, -1000, 1734, 1734, -1000, 499, -1000,
	1782, -1000, 2067, -1000, 3404, -1000, 496, -1000, 550, -1000,
	-1000, -1000, 1397, -1000, -1000, -1000, 5434, 558, -1000, 755,
	2831, -1000, -1000, 2627, 11941, 2827, 1734, 2499, -109, 34824,
	3174, 3081, 2951, 2834, 1396, -1000, -1000, 27216, -1000, -1000,
	34190, -1000, 2826, 1381, 1377, 50040, 2288, -1000, -1000, 2312,
	-1000, 866, 196, 264, -1000, 3417, 182, 3415, 3414, 1149,
	3238, -1000, -1000, 1952, -1000, 172, 167, 160, -1000, -1000,
	-1000, -1000, -1000, 2310, 2309, -1000, 601, -1000, 346, -1000,
	-1000, -1000, 319, -1000, 3412, 592, -1000, 27216, -1000, -1000,
	33556, 1704, 1704, -1000, -1000, 2066, -1000, -1000, -1000, -1000,
	2041, -1000, -1000, -1000, 1360, -1000, 50040, 966, 8750, -1000,
	2141, -1000, 50040, -1000, 3184, -1000, 295, 1356, 319, 806,
	319, 806, 319, 806, 319, 806, 343, -1000, -1000, -1000,
	1315, 11941, -1000, -1000, 1314, -1000, -1000, -1000, 2824, 2029,
	206, 191, 3410, -1000, 2288, 3406, 2288, 2288, -1000, 181,
	-136, 702, -1000, -1000, -1000, -1000, -1000, 2308, -1000, -1000,
	-1000, -1000, 1734, 1734, 2299, 2298, 478, -1000, -1000, 32922,
	564, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 558, 5728,
	-1000, 8750, 1307, -1000, 2300, -1000, 779, -1000, -1000, 3181,
	3091, 3459, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2823, 2496, -1000, 50040, 3351, 26582, 188, -1000,
	-1000, -1000, 2290, -1000, 2288, -1000, -1000, 1727, -150, -1000,
	-281, 2024, 2023, -1000, -1000, 50040, -1000, 50040, 553, -1000,
	5728, 1306, -1000, 8750, -1000, -1000, 3463, -1000, 3475, 922,
	922, 319, 319, 319, 319, 11941, -1000, -1000, -1000, 50040,
	-1000, 1301, -1000, -1000, -1000, 1550, -1000, -1000, -1000, -1000,
	2282, -157, -1000, -1000, 2268, -1000, -1000, -1000, 1254, 2419,
	-1000, -1000, -1000, -1000, -1000, 2079, 620, -1000, 2296, 1135,
	-1000, 1726, -1000, 32288, 50040, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 50040, 8113, -1000, 1549, -1000, -1000,
	2300, 50040, -1000,
}

var yyPgo = [...]int{
	0, 179, 3517, 247, 177, 4227, 122, 254, 363, 338,
	253, 4226, 4225, 4224, 4223, 3302, 3301, 4221, 4207, 4206,
	4205, 4202, 4200, 4199, 4198, 4195, 4192, 4189, 4188, 4184,
	4181, 4179, 4177, 4176, 4175, 4173, 4166, 4165, 4164, 4163,
	4162, 4161, 4145, 4143, 4135, 4121, 4120, 249, 4119, 4118,
	4117, 4115, 4114, 4113, 4112, 4110, 4109, 4108, 4106, 4105,
	4104, 4103, 4102, 4100, 4098, 4095, 4094, 4093, 4091, 4089,
	4088, 4087, 4084, 4083, 4081, 4080, 4079, 4078, 4075, 4074,
	4072, 4071, 248, 4070, 4066, 330, 4061, 3298, 4060, 4058,
	4057, 4056, 4054, 4052, 4051, 4050, 4049, 4048, 4047, 310,
	4042, 4041, 4040, 4039, 4037, 4036, 4035, 4034, 4033, 4032,
	4030, 4029, 4027, 285, 4024, 4021, 4019, 4017, 242, 4016,
	221, 4015, 175, 143, 4014, 4012, 4011, 4009, 4007, 4005,
	4004, 4003, 4002, 4001, 4000, 3999, 3998, 3997, 231, 202,
	70, 3992, 47, 3990, 3989, 218, 3987, 157, 3985, 154,
	3978, 3976, 3975, 3974, 3973, 3972, 3970, 3968, 3954, 3952,
	3951, 3949, 3948, 3945, 3944, 3941, 3939, 3938, 3937, 3936,
	3935, 3933, 3930, 50, 3928, 259, 3926, 74, 3923, 181,
	3922, 67, 3921, 69, 139, 260, 2999, 257, 3920, 189,
	3919, 3916, 246, 180, 3915, 3914, 267, 3913, 236, 229,
	164, 100, 150, 3912, 142, 3911, 264, 48, 49, 251,
	145, 59, 192, 131, 3910, 216, 96, 112, 3909, 3908,
	146, 3907, 240, 186, 3904, 110, 3901, 3900, 3896, 3895,
	3894, 197, 207, 3892, 3891, 134, 3890, 3889, 62, 156,
	3888, 79, 129, 173, 128, 3886, 1479, 125, 92, 3884,
	123, 99, 3883, 98, 3882, 3879, 3878, 3877, 194, 3873,
	3872, 137, 58, 3870, 3866, 3865, 77, 3864, 75, 3863,
	38, 3862, 56, 3861, 3860, 3859, 3858, 3857, 3854, 3853,
	3852, 3851, 3849, 3846, 3845, 57, 3844, 3843, 3841, 3839,
	7, 11, 13, 3838, 27, 3837, 172, 3836, 3835, 170,
	3833, 200, 3831, 3825, 90, 87, 3824, 93, 165, 3823,
	9, 28, 78, 3822, 3820, 3819, 106, 3817, 3816, 3813,
	266, 3811, 3809, 3808, 158, 3807, 3805, 3804, 657, 3803,
	3802, 3801, 3799, 3798, 3797, 103, 3796, 1, 217, 41,
	3795, 132, 140, 3794, 37, 31, 3793, 44, 113, 206,
	135, 95, 3792, 3791, 3777, 669, 199, 102, 29, 0,
	107, 219, 160, 3775, 3774, 3754, 252, 3753, 234, 203,
	228, 331, 262, 201, 3751, 3749, 60, 3747, 166, 30,
	53, 136, 91, 23, 204, 3746, 988, 8, 184, 3745,
	210, 3744, 12, 18, 104, 151, 3743, 3742, 34, 261,
	3740, 3738, 3737, 133, 3736, 3734, 190, 82, 3733, 3731,
	3730, 3728, 40, 3716, 188, 16, 3714, 101, 3713, 245,
	3712, 191, 161, 183, 182, 167, 220, 230, 83, 81,
	3711, 1846, 163, 109, 17, 3710, 225, 3709, 431, 130,
	3705, 105, 3703, 244, 265, 213, 3696, 185, 10, 45,
	39, 32, 43, 14, 282, 205, 3695, 3691, 21, 51,
	3690, 54, 3689, 20, 3686, 3685, 52, 3684, 61, 5,
	3679, 3678, 19, 22, 3675, 35, 209, 174, 118, 94,
	64, 3673, 3672, 162, 149, 3670, 159, 153, 155, 3668,
	80, 3667, 3665, 3664, 3663, 2063, 255, 3661, 3660, 3657,
	3655, 3653, 3652, 3651, 3650, 215, 3648, 116, 42, 3646,
	3643, 3632, 3629, 86, 148, 3626, 3624, 3623, 3622, 33,
	144, 3621, 15, 3620, 26, 24, 36, 3618, 108, 3617,
	3, 193, 3599, 3596, 4, 3592, 3590, 2, 3589, 3588,
	121, 3586, 97, 25, 171, 119, 3584, 3583, 88, 214,
	147, 3582, 3579, 127, 241, 208, 3578, 124, 235, 256,
	3577, 212, 3576, 3575, 3573, 3572, 3571, 1206, 3570, 3569,
	239, 68, 89, 3568, 223, 117, 3565, 3563, 85, 168,
	120, 115, 55, 84, 3560, 114, 211, 3559, 196, 3558,
	250, 3553, 3552, 111, 3551, 3547, 3546, 3543, 187, 3542,
	3539, 195, 232, 3538, 3534, 263, 3533, 3531, 3526, 3525,
	3523, 3522, 3521, 3515, 3510, 3507, 237, 258, 3502,
}

//line mysql_sql.y:12826
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadDuplicateModeUnion() tree.LoadDupMode {
	v, _ := st.union.(tree.LoadDupMode)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 611, 614, 614, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 350, 350, 351, 351, 130, 346, 346, 345, 345,
	131, 132, 133, 590, 590, 134, 135, 165, 589, 589,
	589, 589, 589, 167, 167, 167, 167, 167, 466, 129,
	129, 129, 129, 129, 171, 171, 171, 171, 171, 127,
	596, 596, 596, 597, 597, 124, 154, 153, 156, 156,
	155, 155, 152, 152, 148, 151, 151, 150, 150, 149,
	144, 146, 146, 145, 147, 147, 125, 113, 126, 539,
	539, 538, 538, 537, 537, 491, 491, 492, 492, 337,
	337, 337, 536, 536, 536, 535, 535, 534, 534, 533,
	533, 531, 531, 532, 530, 529, 529, 529, 527, 527,
	527, 523, 523, 525, 524, 524, 526, 518, 518, 521,
	521, 519, 519, 519, 519, 522, 517, 517, 517, 517,
	517, 516, 516, 112, 112, 112, 433, 433, 111, 111,
	447, 447, 447, 447, 447, 445, 445, 445, 445, 445,
	445, 444, 444, 443, 443, 448, 448, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 100, 100,
	100, 100, 100, 100, 100, 107, 105, 105, 105, 106,
	602, 602, 601, 601, 603, 603, 603, 603, 604, 604,
	103, 103, 103, 104, 442, 442, 442, 101, 102, 102,
	432, 432, 437, 437, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 441, 441, 441,
	439, 439, 438, 438, 440, 440, 91, 91, 91, 91,
	91, 91, 95, 96, 97, 97, 97, 97, 94, 93,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 86,
	85, 85, 87, 87, 429, 429, 428, 108, 108, 109,
	599, 599, 598, 600, 600, 600, 600, 110, 116, 116,
	116, 116, 116, 116, 116, 116, 115, 115, 118, 118,
	117, 119, 99, 99, 99, 99, 99, 99, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 564, 564, 564, 564, 565, 565,
	364, 365, 615, 367, 363, 363, 363, 560, 560, 561,
	562, 563, 563, 563, 114, 14, 221, 221, 465, 465,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 84, 89, 89, 90, 300, 300, 301, 295, 295,
	302, 302, 170, 303, 303, 303, 308, 308, 309, 309,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 280, 280, 280, 275, 275, 275, 275, 276,
	276, 277, 277, 278, 278, 278, 278, 279, 279, 356,
	356, 304, 304, 304, 306, 306, 305, 299, 297, 297,
	297, 297, 297, 297, 297, 298, 298, 298, 298, 307,
	307, 82, 88, 88, 88, 88, 577, 577, 83, 83,
	588, 588, 495, 495, 378, 378, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 500, 501, 374, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 79, 80, 81, 54, 57, 58, 169, 53,
	53, 53, 418, 418, 52, 616, 616, 349, 349, 67,
	66, 56, 68, 69, 70, 71, 72, 73, 51, 65,
	65, 65, 65, 65, 65, 65, 65, 76, 512, 512,
	618, 618, 618, 74, 75, 494, 494, 494, 64, 63,
	62, 61, 60, 60, 50, 50, 49, 49, 55, 160,
	59, 161, 161, 371, 371, 371, 373, 373, 369, 617,
	617, 461, 461, 372, 372, 48, 48, 48, 48, 77,
	370, 370, 348, 368, 368, 368, 12, 12, 10, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 26, 27, 29, 426,
	426, 423, 28, 20, 19, 19, 23, 22, 18, 18,
	21, 24, 25, 25, 9, 9, 9, 9, 15, 15,
	16, 193, 193, 247, 247, 571, 571, 567, 567, 568,
	568, 568, 569, 569, 570, 570, 120, 506, 506, 506,
	506, 506, 506, 8, 8, 216, 216, 505, 505, 505,
	505, 505, 505, 430, 430, 430, 549, 549, 549, 550,
	215, 215, 210, 210, 507, 507, 395, 551, 551, 515,
	515, 514, 514, 513, 513, 213, 213, 214, 214, 196,
	196, 139, 139, 520, 520, 520, 520, 528, 528, 490,
	490, 285, 285, 339, 339, 340, 340, 183, 183, 184,
	184, 184, 184, 184, 184, 605, 605, 606, 607, 608,
	608, 609, 609, 609, 610, 610, 610, 610, 610, 557,
	557, 559, 559, 558, 212, 212, 208, 208, 209, 209,
	209, 207, 207, 206, 205, 205, 204, 202, 202, 202,
	203, 203, 203, 220, 220, 186, 186, 186, 185, 185,
	185, 185, 185, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 187, 190, 190, 191, 191,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	317, 317, 318, 318, 318, 318, 318, 137, 137, 499,
	499, 316, 316, 188, 188, 189, 189, 189, 189, 315,
	315, 314, 201, 201, 200, 199, 199, 199, 194, 194,
	194, 194, 194, 195, 326, 326, 325, 325, 324, 324,
	324, 324, 327, 123, 136, 136, 138, 219, 219, 323,
	322, 322, 322, 322, 218, 218, 217, 217, 211, 211,
	198, 198, 198, 198, 321, 197, 319, 595, 595, 594,
	594, 593, 591, 591, 591, 592, 592, 592, 592, 541,
	541, 541, 541, 541, 357, 357, 357, 362, 362, 360,
	360, 360, 360, 360, 366, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 39, 230, 231,
	40, 232, 232, 233, 233, 234, 234, 235, 236, 237,
	237, 237, 237, 38, 222, 222, 223, 223, 224, 224,
	225, 226, 226, 226, 229, 227, 228, 228, 613, 613,
	612, 37, 37, 30, 174, 174, 175, 175, 175, 177,
	177, 281, 281, 281, 176, 176, 178, 178, 178, 572,
	574, 574, 576, 575, 575, 575, 578, 578, 578, 578,
	578, 579, 579, 579, 579, 580, 580, 31, 157, 157,
	181, 181, 162, 583, 583, 583, 582, 582, 584, 584,
	585, 585, 343, 343, 344, 344, 172, 173, 173, 164,
	159, 180, 180, 180, 180, 180, 182, 182, 249, 249,
	158, 163, 166, 168, 573, 581, 581, 581, 427, 427,
	424, 425, 425, 422, 421, 421, 421, 587, 587, 586,
	586, 586, 358, 358, 32, 417, 417, 419, 420, 420,
	420, 411, 411, 411, 411, 36, 415, 415, 416, 416,
	416, 416, 416, 416, 416, 412, 412, 414, 414, 410,
	410, 410, 410, 410, 410, 410, 35, 179, 179, 409,
	409, 406, 406, 404, 404, 405, 405, 403, 403, 403,
	407, 407, 43, 78, 44, 45, 46, 42, 408, 408,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	141, 140, 140, 140, 140, 140, 143, 143, 342, 342,
	341, 341, 142, 282, 282, 41, 260, 260, 482, 482,
	477, 477, 477, 477, 477, 497, 497, 497, 478, 478,
	478, 479, 479, 479, 481, 481, 481, 480, 480, 480,
	480, 480, 496, 496, 498, 498, 498, 449, 449, 450,
	450, 450, 453, 453, 469, 469, 470, 470, 468, 468,
	475, 475, 474, 474, 473, 473, 472, 472, 471, 471,
	471, 471, 464, 464, 463, 463, 451, 451, 451, 451,
	451, 452, 452, 452, 462, 462, 467, 467, 313, 313,
	312, 312, 268, 268, 269, 269, 311, 311, 266, 266,
	267, 267, 267, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 547,
	547, 548, 271, 271, 283, 283, 283, 283, 283, 283,
	270, 270, 272, 272, 248, 248, 246, 246, 238, 238,
	238, 238, 238, 238, 239, 239, 240, 240, 241, 241,
	241, 245, 245, 244, 244, 244, 244, 242, 242, 243,
	243, 243, 243, 243, 243, 435, 435, 544, 544, 545,
	545, 540, 540, 540, 543, 543, 543, 543, 543, 543,
	543, 546, 546, 546, 542, 542, 250, 336, 336, 336,
	359, 359, 359, 359, 361, 335, 335, 335, 265, 265,
	264, 264, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 434, 434, 375, 375, 376, 376,
	294, 293, 293, 293, 293, 293, 291, 292, 290, 290,
	290, 290, 290, 287, 287, 286, 286, 286, 288, 288,
	288, 288, 288, 413, 413, 284, 284, 274, 274, 274,
	273, 273, 273, 476, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 289, 333, 333, 333, 334, 334,
	334, 334, 334, 334, 334, 334, 385, 385, 391, 391,
	556, 556, 555, 251, 251, 251, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 261, 261, 261, 458, 458,
	458, 458, 459, 459, 459, 459, 460, 460, 460, 456,
	456, 457, 457, 396, 397, 397, 503, 503, 504, 504,
	454, 454, 455, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 511, 511, 511, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 566, 566, 566, 552, 552,
	552, 553, 553, 553, 553, 553, 553, 553, 553, 553,
	553, 553, 553, 554, 554, 554, 554, 554, 554, 554,
	554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
	331, 331, 331, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 398, 398, 399, 399, 508, 508, 508, 508, 508,
	508, 509, 509, 510, 510, 510, 510, 502, 502, 502,
	502, 502, 502, 502, 502, 502, 502, 502, 502, 502,
	502, 502, 502, 502, 502, 502, 502, 502, 502, 502,
	502, 502, 502, 502, 502, 502, 502, 383, 328, 328,
	328, 400, 392, 392, 393, 393, 394, 394, 386, 386,
	386, 386, 386, 386, 387, 387, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 388, 388,
	390, 390, 402, 402, 402, 401, 401, 401, 401, 401,
	401, 401, 263, 263, 263, 263, 380, 380, 380, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 253, 253, 253, 253, 257, 257, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 258, 258, 258, 258, 258, 256, 256, 256, 256,
	256, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	121, 122, 122, 255, 338, 338, 483, 483, 486, 486,
	484, 484, 485, 487, 487, 487, 488, 488, 488, 489,
	489, 489, 493, 493, 347, 347, 347, 355, 355, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 9, 9, 10, 10, 11, 1, 5,
	6, 8, 10, 9, 5, 7, 9, 8, 6, 4,
	0, 1, 1, 0, 1, 5, 2, 2, 6, 9,
	6, 9, 4, 7, 8, 0, 1, 1, 2, 4,
	6, 1, 2, 4, 0, 2, 10, 11, 2, 0,
	2, 1, 3, 3, 3, 0, 2, 0, 2, 1,
	3, 5, 0, 2, 3, 1, 3, 1, 1, 1,
	3, 1, 1, 1, 1, 0, 3, 3, 0, 3,
	3, 0, 1, 3, 0, 1, 3, 0, 2, 1,
	2, 3, 4, 3, 3, 1, 0, 1, 1, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 3, 4, 4, 5,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 4, 5, 4, 2, 2,
	0, 1, 4, 2, 4, 1, 5, 3, 2, 1,
	2, 2, 4, 4, 5, 2, 1, 3, 4, 4,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 3, 4, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 1,
	1, 7, 7, 7, 8, 8, 0, 4, 7, 6,
	0, 3, 0, 2, 0, 1, 1, 1, 1, 4,
	2, 2, 3, 3, 4, 5, 3, 4, 4, 2,
	2, 2, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 4, 3, 3, 3, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 7, 7, 5, 4, 7, 8, 3, 3,
	2, 3, 4, 0, 2, 2, 0, 2, 2, 1,
	1, 1, 1, 0, 1, 5, 5, 6, 4, 3,
	1, 3, 1, 1, 3, 5, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 4, 1,
	3, 1, 4, 6, 6, 4, 4, 4, 4, 4,
	3, 6, 3, 5, 1, 1, 2, 2, 11, 8,
	9, 1, 3, 2, 4, 0, 2, 0, 1, 1,
	1, 1, 0, 1, 0, 1, 4, 2, 1, 5,
	4, 4, 2, 5, 5, 1, 3, 2, 1, 5,
	4, 4, 2, 0, 5, 4, 0, 1, 3, 3,
	1, 3, 1, 3, 1, 3, 4, 0, 1, 0,
	1, 1, 3, 1, 1, 0, 4, 1, 3, 2,
	1, 0, 8, 0, 4, 7, 4, 0, 2, 0,
	2, 0, 2, 0, 4, 1, 3, 1, 1, 6,
	4, 5, 7, 4, 5, 0, 1, 3, 8, 0,
	6, 0, 4, 6, 1, 1, 1, 1, 1, 2,
	3, 1, 3, 6, 0, 3, 0, 1, 2, 4,
	4, 0, 1, 3, 1, 3, 3, 0, 1, 1,
	0, 2, 2, 0, 2, 3, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 7, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 4, 7, 6, 6, 3, 5, 0,
	2, 0, 2, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 3, 1, 1, 1, 1, 4, 4,
	4, 3, 4, 3, 2, 2, 2, 2, 2, 3,
	2, 3, 2, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	7, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 14, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 4, 1, 1, 1, 1, 0, 1,
	2, 9, 9, 7, 1, 2, 3, 3, 3, 0,
	4, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 4, 1, 1, 1, 3, 3, 4, 3,
	3, 0, 1, 1, 1, 0, 2, 7, 8, 10,
	2, 2, 8, 0, 3, 3, 0, 3, 0, 3,
	0, 5, 1, 3, 0, 3, 3, 0, 2, 9,
	8, 0, 2, 2, 3, 3, 0, 2, 0, 2,
	4, 4, 4, 4, 1, 0, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 3, 2, 0, 1, 3,
	4, 3, 1, 1, 4, 1, 3, 1, 1, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 3,
	2, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 6, 0, 4, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 8, 2, 4, 4, 4, 9, 0, 2,
	11, 9, 11, 8, 6, 9, 7, 10, 7, 6,
	2, 2, 9, 4, 5, 3, 0, 4, 1, 3,
	0, 3, 6, 0, 2, 10, 0, 2, 0, 2,
	0, 3, 2, 4, 3, 0, 2, 1, 0, 2,
	3, 0, 2, 3, 0, 2, 1, 0, 3, 2,
	4, 3, 0, 1, 0, 1, 1, 0, 6, 0,
	3, 5, 0, 4, 0, 3, 1, 3, 4, 5,
	0, 3, 1, 3, 2, 3, 1, 2, 0, 4,
	6, 5, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 5, 6, 5, 0, 3, 0, 1, 1, 3,
	3, 3, 0, 4, 1, 3, 3, 3, 0, 1,
	1, 3, 2, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 5, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 5,
	5, 5, 5, 6, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 2, 1, 2, 2, 1, 1, 2, 2, 2,
	3, 3, 2, 2, 1, 5, 6, 4, 1, 1,
	1, 5, 4, 1, 1, 2, 0, 1, 1, 2,
	5, 0, 1, 1, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 2, 2, 0, 4,
	7, 3, 3, 0, 3, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	3, 5, 2, 2, 2, 2, 4, 1, 1, 2,
	5, 6, 8, 6, 6, 6, 1, 1, 1, 1,
	1, 1, 3, 9, 1, 4, 4, 4, 7, 9,
	7, 7, 7, 9, 7, 7, 0, 2, 0, 1,
	1, 2, 4, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 2, 2, 2, 0, 1, 1, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	5, 0, 1, 3, 0, 1, 0, 2, 0, 2,
	0, 1, 6, 8, 8, 6, 6, 5, 5, 5,
	6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 1, 1, 1, 4,
	4, 6, 8, 6, 4, 5, 4, 4, 4, 3,
	4, 6, 6, 7, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 8, 4, 2, 3, 2, 4, 2, 2,
	4, 6, 2, 2, 4, 6, 4, 2, 4, 4,
	4, 0, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 3, 0, 1, 1, 3, 1, 3, 3, 3,
	3, 3, 2, 1, 1, 1, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 1, 3, 4, 4,
	5, 4, 5, 3, 4, 5, 6, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 4, 4, 1,
	2, 3, 5, 1, 1, 3, 0, 1, 0, 3,
	0, 3, 3, 0, 3, 5, 0, 3, 5, 0,
	1, 1, 0, 1, 1, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -611, -614, -2, -5, 634, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -183, -127, -128,
	-129, -171, -132, -134, -135, 624, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 557, 630, 460, 14, 509, -15, -16, -557, -17,
	267, -363, -364, -365, -367, -615, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -131,
	-79, -80, -81, -83, -82, -88, -84, -89, -159, -164,
	-13, -170, -90, 241, -87, 77, -101, -102, -103, -104,
	-105, -106, -107, -109, -110, 382, 388, 445, 623, 62,
	-184, -186, 651, 652, 655, 544, 547, 163, 164, 166,
	167, 171, 174, -34, -35, -36, -37, -38, -39, -41,
	-40, -42, -43, -44, -45, -46, 237, 16, 552, -18,
	-21, -19, -22, -20, -28, -29, -27, -24, -26, -158,
	-25, -163, -23, -166, -168, -133, 262, 261, 39, 328,
	329, 330, 386, 260, 238, 240, 15, 32, 43, 361,
	-185, 86, 545, 239, -187, 13, 657, -6, -3, -2,
	-144, -148, -152, -155, -156, -153, -154, -4, -122, 121,
	252, 625, -359, 378, 626, 628, 627, 89, 97, -352,
	-354, 460, 267, 382, 388, 623, 652, 655, 544, 547,
	559, 560, 561, 562, 563, 564, 565, 566, 568, 569,
	570, 571, 572, 573, 574, 584, 585, 575, 576, 577,
	578, 579, 580, 581, 582, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 512,
	609, 610, 611, 612, 540, 567, 603, 604, 605, 606,
	359, 360, 549, 279, 303, 413, 309, 316, 163, 183,
	177, 206, 197, 545, 172, 458, 283, 321, 284, 96,
	166, 495, 111, 472, 442, 169, 298, 300, 302, 541,
	542, 372, 305, 539, 304, 306, 308, 543, 285, 362,
	193, 188, 297, 281, 186, 286, 41, 287, 211, 288,
	289, 554, 468, 358, 474, 313, 53, 440, 187, 469,
	301, 471, 215, 219, 486, 487, 181, 182, 476, 489,
	210, 213, 214, 259, 355, 356, 44, 551, 271, 490,
	217, 647, 209, 204, 498, 317, 315, 208, 180, 203,
	282, 66, 221, 220, 222, 436, 437, 438, 439, 290,
	291, 376, 485, 200, 189, 363, 173, 459, 23, 493,
	266, 473, 389, 292, 310, 318, 216, 218, 273, 278,
	333, 553, 444, 277, 314, 491, 185, 270, 299, 265,
	494, 648, 174, 391, 293, 167, 307, 488, 650, 497,
	65, 404, 179, 170, 641, 256, 164, 275, 280, 649,
	294, 295, 296, 538, 320, 319, 311, 171, 546, 201,
	272, 207, 191, 178, 202, 165, 274, 496, 405, 621,
	361, 423, 199, 196, 276, 249, 492, 475, 168, 427,
	406, 194, 322, 616, 617, 618, 377, 354, 323, 324,
	192, 263, 466, 467, 327, 433, 345, 407, 443, 414,
	408, 228, 229, 331, 478, 480, 212, 619, 334, 335,
	336, 470, 337, 338, 339, 340, 381, 57, 59, 98,
	101, 100, 653, 654, 64, 30, 367, 370, 402, 409,
	347, 622, 550, 344, 348, 349, 371, 26, 425, 393,
	429, 428, 49, 50, 51, 54, 55, 56, 58, 60,
	61, 52, 537, 386, 399, 499, 46, 48, 396, 28,
	373, 424, 446, 343, 426, 457, 47, 455, 456, 479,
	27, 375, 374, 63, 45, 432, 434, 435, 325, 341,
	384, 631, 500, 379, 395, 398, 380, 346, 369, 400,
	68, 67, 392, 632, 387, 385, 342, 555, 556, 350,
	583, 364, 441, 534, 533, 532, 531, 530, 529, 528,
	527, 328, 329, 330, 410, 411, 412, 422, 415, 416,
	417, 418, 419, 420, 421, 462, 463, 633, 481, 483,
	484, 482, 244, 656, 365, 366, 247, 635, 636, 99,
	637, 639, 638, 29, 640, 646, 643, 644, 645, 558,
	232, -440, -438, -359, 545, 623, 388, 544, 547, 382,
	361, 652, 655, 386, 267, 328, 329, 330, 460, 359,
	-232, -359, 656, -196, 251, 40, -246, -359, -196, -87,
	-16, -15, -185, -186, -246, 246, -368, 24, 440, -99,
	441, 241, 242, 86, 78, -359, -9, -113, -8, -120,
	-85, -183, 445, -366, -359, 328, 328, -366, 246, -361,
	277, 421, -359, -495, 252, -444, -417, 278, -443, -419,
	-446, -420, 33, 237, 239, 238, 557, 274, 16, 386,
	248, 14, 13, 387, 260, 26, 27, 29, 15, 388,
	390, 30, 391, 394, 395, 396, 43, 399, 400, 267,
	89, 97, 92, 285, -231, -359, -394, -386, 118, -389,
	-381, -382, -384, -337, -531, -379, 86, 145, 146, 153,
	119, 658, -383, -476, 37, 121, 563, 567, 603, 510,
	-329, -330, -331, -332, -333, -334, 548, -359, -532, -530,
	92, 102, 104, 108, 109, 107, 105, 157, 190, 106,
	93, 158, -186, 89, -552, 573, -353, 596, 609, 610,
	611, 612, 595, 62, -502, -510, 245, -508, 156, 195,
	263, 191, 14, 151, 433, 192, 604, 605, 606, 570,
	592, 512, 574, 584, 599, 565, 566, 568, 560, 561,
	562, 564, 575, 577, 591, -511, 587, 597, 598, 583,
	607, 608, 643, 600, 601, 602, 639, 91, 90, 590,
	589, 576, 571, 572, 578, 559, 569, 579, 580, 588,
	593, 594, 370, 111, 371, 372, 502, 362, 81, 373,
	252, 440, 71, 374, 375, 376, 377, 378, 509, 379,
	72, 380, 369, 267, 423, 381, 194, 212, 514, 513,
	515, 506, 503, 501, 504, 505, 507, 508, 581, 582,
	586, -136, -138, 614, -605, -320, -606, 6, 7, 8,
	9, -607, 158, -596, 442, 553, 92, 321, 359, 17,
	502, 642, 543, 642, 543, 168, 165, -431, 168, 117,
	174, 173, 250, 168, -431, -359, 171, 642, 170, 641,
	331, 273, -408, -174, 359, 423, 337, 98, 277, -411,
	-409, 541, -496, 325, 321, 297, 247, 114, -175, 257,
	256, 112, 502, 245, 397, 316, 57, 59, -567, -568,
	234, 235, 236, -559, 535, -558, -359, 642, 647, 372,
	100, 101, 641, 28, 246, 383, 273, 480, 478, 479,
	481, 482, 483, 484, -65, -512, -494, 475, 474, -372,
	467, 473, 465, 477, 468, 360, 339, 557, 338, 237,
	635, 542, 536, -347, 407, 443, 499, 500, 384, 444,
	486, 488, 469, 111, 198, 195, 247, 249, 246, 641,
	359, 502, 423, 98, 337, 246, -567, 647, 165, 486,
	488, 442, 277, 421, 42, -437, 433, -436, -438, 487,
	498, 90, 91, 485, -347, 111, 466, 466, -605, -320,
	-184, -186, -123, -557, 543, 642, 247, 359, 423, 277,
	248, 246, 538, 541, 249, 502, 245, 328, 383, 273,
	337, 98, 170, 641, -190, -191, -192, 230, 231, 232,
	70, 235, 233, 67, 33, 34, 35, -1, 125, 657,
	-386, -386, -6, 660, -6, -386, -359, -359, 160, -253,
	-257, -254, -256, -255, -259, -258, 195, 196, 156, 199,
	205, 201, 202, 203, 204, 206, 207, 208, 209, 210,
	213, 214, 211, 32, 212, 263, 191, 192, 193, 194,
	215, 177, 197, 550, 223, 178, 224, 179, 225, 180,
	226, 181, 182, 227, 183, 186, 187, 188, 189, 185,
	159, -221, 92, 33, 86, 159, 92, -213, 269, -196,
	-246, -238, 159, 658, -213, -605, -206, -207, 11, -246,
	-335, -359, 442, 128, -99, 78, -99, 441, 78, -99,
	441, 241, -560, -561, -562, -564, 241, 441, 440, 242,
	-118, 159, 285, 17, -366, -366, 84, -246, -419, 277,
	-444, -417, 37, 83, 160, 250, 160, 83, 86, 384,
	359, 423, 385, 502, 246, 397, 249, 277, 398, 359,
	423, 246, 249, 502, 277, 359, 246, 249, 423, 277,
	398, 359, 465, 466, 249, 28, 389, 392, 393, 466,
	-516, 498, 160, 117, 114, 115, 116, -386, 135, -401,
	128, 129, 130, 131, 132, 133, 134, 142, 141, 152,
	145, 146, 147, 148, 149, 150, 151, 143, 144, 138,
	118, 136, 140, 137, 120, 155, -186, -386, -394, 62,
	-384, -384, -384, -384, -359, -476, -391, -386, 86, 86,
	86, 86, 86, 159, 105, 92, -386, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, -509,
	86, 86, -398, -399, 86, 86, -379, -335, 86, 92,
	92, 86, 86, 86, 92, 86, 86, 86, -399, -399,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, -207, 160, -206, 86,
	-206, -207, -187, -186, 33, 34, 33, 34, 33, 34,
	33, 34, -608, 632, 86, 102, 653, 228, 17, -359,
	641, -359, -590, 33, 546, 546, 546, 546, 491, 552,
	172, 173, 174, -359, 171, 250, -359, -406, 252, -406,
	-406, -230, -359, -232, 383, 249, 538, 249, -175, -406,
	-406, -406, -406, -406, 248, -406, 24, 246, 246, 246,
	246, -406, 509, 128, 128, 60, -569, 176, 160, -559,
	-212, 86, -590, 648, 649, 650, -371, 136, 140, -371,
	-316, 18, -316, 24, 275, 275, 275, -371, 315, -616,
	-617, 17, 138, -369, -617, -369, -369, -371, -618, 248,
	476, 44, 276, 275, -208, -209, 22, -208, 470, 466,
	-461, 471, 472, -373, -617, -372, -371, -371, -372, -371,
	-371, -371, 33, 246, 249, 502, 337, 636, -616, -616,
	32, 32, -495, -495, -246, -495, -495, 536, -348, -359,
	-495, -495, -495, -300, -301, -246, -570, 251, 650, -602,
	-601, 489, -604, 491, 165, -438, 165, -438, 89, -419,
	277, 277, 160, 128, 24, -439, 128, 139, -438, -438,
	-439, -439, -270, 42, -358, 156, -359, 92, -270, 42,
	-599, -598, -246, -207, -187, -186, 87, 87, 87, 546,
	-590, -495, -495, -495, -495, -495, -496, -495, -495, -495,
	-495, -495, -366, -222, -359, -232, 252, -495, -495, -495,
	-495, -188, -189, 147, -386, -359, -192, -3, -146, -145,
	122, 123, 125, 626, 378, 625, 629, 623, -438, 42,
	-489, 405, 404, -483, -485, 86, -484, 86, -484, -484,
	-484, -484, -484, 86, 86, -486, 86, -486, -486, -483,
	-487, 86, -487, -488, 86, -488, -487, -359, -465, 552,
	-392, -394, -359, 40, -505, 62, -183, 86, 32, 86,
	-213, -359, 192, 170, 640, 36, -506, 62, -183, 86,
	32, -207, -139, 40, -209, 21, 159, 102, 92, -118,
	-99, 78, -118, -99, -99, 87, 160, -563, 108, 109,
	-565, 210, 201, -359, -116, 92, -7, -8, -9, -10,
	-47, -85, -82, -183, 238, 544, 547, -533, -531, 86,
	33, 432, 83, 17, -445, 246, 502, 383, 273, 249,
	359, -443, -426, -423, -421, -358, -419, -422, -421, -448,
	-335, 466, -140, 447, 446, 327, -386, -386, -386, -386,
	-386, 107, 118, 354, 108, 109, -381, -402, 33, 323,
	324, -382, -382, -382, -382, -382, -382, -382, -382, -382,
	-382, -382, -382, -390, -400, -476, 86, 138, 136, 140,
	137, 120, -384, -384, -382, -382, -272, -358, 156, 87,
	160, -386, -556, -555, 122, -386, -386, -386, -386, -412,
	-414, -335, 86, -359, -553, -554, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 374, 369, 375,
	373, 362, 381, 376, 377, 194, 533, 534, 527, 528,
	529, 530, 531, 532, -392, -392, -386, -553, -392, -328,
	34, 33, -394, -394, -394, 87, -386, -566, 352, 351,
	353, -210, -359, -392, 87, 87, 87, 102, -394, -394,
	-392, -382, -392, -392, -392, -392, -554, -328, -328, -328,
	-328, 147, -394, -394, -328, -328, -328, -328, 147, -328,
	-328, -328, -328, -328, -328, -328, -328, -328, -328, -328,
	87, 87, 87, 147, -394, -208, -138, -514, -513, -386,
	42, -139, -209, -609, 633, 86, -335, -597, 92, 92,
	658, 170, 641, 17, 502, -359, 17, 246, -359, 102,
	-359, 102, 492, 493, 169, 173, 172, -359, 171, -359,
	-359, 118, -359, -359, 36, 86, -222, -406, -406, -406,
	-574, -359, 93, -427, -424, -421, -359, -359, -417, -359,
	-348, -246, -406, -406, -406, -406, -246, -281, 54, 55,
	56, -421, -176, 57, 58, -570, -558, 36, -211, -359,
	-316, -384, -384, -386, -421, 277, -616, -371, -371, -349,
	-348, -373, -368, -373, -373, -316, -369, -371, -371, -386,
	-373, -369, -316, -359, 466, -316, -316, -461, -371, -370,
	-359, -370, -406, -348, -349, -349, -246, -246, -295, -302,
	-296, -303, 269, 243, 367, 368, 240, 238, 11, 239,
	-310, 316, -407, 510, -276, -277, 78, 43, -279, 267,
	409, 402, 279, 283, 96, 284, 442, 285, 248, 287,
	288, 289, 304, 306, 259, 290, 291, 292, 433, 293,
	164, 305, 294, 295, 296, 385, -271, 6, 340, 552,
	42, 52, 53, 456, 455, 555, 280, -359, -574, -572,
	32, -359, 32, -427, -421, -359, -359, 160, 250, -199,
	-201, -198, -194, -195, -200, -319, -321, -197, 86, -246,
	-186, -359, -438, 160, 490, 492, 493, -602, -439, -602,
	-439, 250, 33, 432, -442, 432, 33, -417, -436, 486,
	488, -432, 92, 433, -422, -441, 83, 156, -513, -439,
	-439, -441, -441, 155, 160, -600, 491, 492, 234, -208,
	102, -248, -246, -574, -426, -417, -359, -495, -248, -248,
	-248, -361, -361, 86, 159, 37, -359, -359, -359, -359,
	-315, 160, -314, 17, -360, -359, 36, 92, 159, -147,
	-145, 124, -386, -6, 625, -386, -6, -6, -386, -6,
	-386, -493, 406, 102, 102, -338, 92, -338, 102, 102,
	102, 558, 87, 92, -430, 83, -507, -395, -551, 614,
	-215, 87, -210, -549, -550, -210, -214, -359, -505, -238,
	128, 128, 128, 25, -507, -215, 87, -549, -208, 615,
	-139, -205, -204, -386, -359, 24, -118, -99, -561, 159,
	359, 160, -211, -445, -425, -422, -447, 147, -359, -433,
	160, 552, 661, 90, 250, -587, -586, 424, 87, 160,
	-517, 458, 459, 251, 509, 92, 658, 440, 228, 229,
	107, 354, 108, 109, -476, -394, -390, -384, -384, -382,
	-382, -388, 264, -388, 117, -386, 659, -385, -555, 124,
	-386, 36, 160, 36, 160, 84, 160, 87, -483, -386,
	159, 87, 87, 17, 17, 87, -386, 87, 87, 87,
	87, 17, 17, -386, 87, 159, 87, 87, 87, 87,
	84, 87, 160, 87, 87, 87, 87, 160, -394, -394,
	-386, -394, 87, 87, 87, -386, -386, -386, -394, 87,
	-386, -386, -386, -386, -386, -386, -386, -386, -386, -386,
	-211, -455, 461, -455, -455, 160, 160, 160, 87, -139,
	86, 102, 160, 654, -342, -341, 92, -359, -359, 170,
	641, -359, 92, 641, -359, 92, 170, 174, 174, 173,
	-359, 92, 37, 24, 24, -231, -233, -234, -235, -236,
	-237, 138, 161, 162, 86, -246, -246, -246, -576, 410,
	-588, 160, 42, -586, 502, -172, 327, -410, 84, -179,
	17, 552, -246, -246, -246, -246, -260, 36, 17, -193,
	-247, -359, 86, 87, 160, -418, 84, -359, -349, -316,
	-316, -373, -316, -316, 160, 23, -371, -373, -373, -238,
	-369, -238, 159, -238, -348, -482, 36, -212, 160, 21,
	269, -245, -356, -242, -244, 254, -376, -243, 257, -545,
	255, 253, 112, 258, 312, 113, 248, -356, -356, 254,
	-280, 250, 36, -356, -298, 248, 357, 312, 255, 21,
	269, -297, 248, 113, -359, 254, 258, 255, 253, -355,
	128, -347, 155, 250, 44, 385, -355, 556, 269, -355,
	-355, -355, -355, -355, -355, -355, 286, 286, -355, -355,
	-355, -355, -355, -355, -355, -355, -355, -355, -355, 165,
	-355, -355, -355, -355, -355, -355, 86, 332, 281, 282,
	314, -577, 410, 32, 365, 365, 366, -588, 361, 32,
	-180, 359, -301, -299, -370, 32, -322, -323, -324, -325,
	-327, -326, 69, 73, 75, 79, 70, 71, 72, 76,
	81, 74, 32, 160, -357, -362, 36, -359, 92, -357,
	-186, -201, -199, -357, 86, -439, -601, -603, 494, 491,
	497, -441, -441, 102, 250, 86, 128, -441, -441, 42,
	-358, -598, 498, 492, -139, 160, 83, -248, -223, -224,
	-225, -226, -253, -335, 196, 199, 201, 202, 203, 204,
	206, 207, 208, 209, 210, 213, 214, 211, 212, 263,
	191, 192, 193, 194, 215, 177, 197, 550, 178, 179,
	180, 181, 182, 183, 186, 187, 188, 189, 185, -359,
	-232, -316, -189, -201, -359, 92, -359, 147, 125, -6,
	123, -151, -150, -149, 126, 623, 629, 125, 125, 125,
	87, 87, 87, 160, 87, 87, 87, 160, 87, 160,
	102, -520, 471, 41, 160, 86, 87, 160, 62, 160,
	128, 87, 160, -386, -359, 92, -386, 192, 87, 62,
	-139, 92, 160, -202, 38, 39, 159, 442, -359, -531,
	87, -447, 160, 250, 159, 159, -423, 388, -358, -425,
	21, 552, -335, 40, -342, 128, 658, -359, 87, -388,
	-388, 117, -384, -381, 87, 125, -386, 123, -251, -253,
	404, 405, -386, -251, -252, -258, 156, 195, 263, 194,
	193, 191, 404, 405, -270, -414, 549, -202, 87, -359,
	-386, -386, 87, -386, -386, 17, -359, -270, -382, -386,
	-207, -207, 87, 87, -454, -455, -454, -454, 87, 87,
	87, 87, -454, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 86, 102, 104, 102, 104, -513,
	-610, 64, 631, 63, 432, 107, 317, 160, 102, 92,
	659, 160, 128, 92, -359, -359, 17, 246, -359, 17,
	174, 92, -589, 321, 359, 502, 246, 359, 321, 502,
	246, 396, 87, 160, -335, -223, -212, 86, -212, -579,
	473, 412, 422, -355, -378, -377, 361, 43, -500, 433,
	418, 419, -424, 277, -348, -585, 99, 128, 83, 344,
	348, 349, 345, 346, 347, -404, -405, -403, -407, -572,
	86, 86, -183, 36, 136, -179, 86, 86, 36, -477,
	334, -253, -246, -193, -359, 17, 160, -571, 159, -1,
	-359, -417, -371, -316, -386, -386, -316, -371, -371, -373,
	-359, -238, -477, -253, 36, -296, 243, 239, -451, 314,
	315, -452, -467, 317, -469, 86, -250, -335, -243, -544,
	-545, -406, -359, 113, -544, 113, 86, -250, -335, -335,
	-299, -335, -359, -359, -359, -359, -306, -305, -335, -308,
	33, -309, -359, -359, -359, -359, 113, -359, 113, -275,
	42, 49, 50, 51, -355, -355, 198, -278, 42, 432,
	434, 435, -308, 102, 102, 102, 102, 92, 92, 92,
	-355, -355, 102, 92, -362, 92, -546, 173, 46, 47,
	102, 102, 102, 102, 42, 92, -283, 42, 297, 301,
	298, 299, 300, 92, 102, 42, 102, 42, 102, 42,
	-359, 86, -547, -548, 92, 333, -466, 102, -579, -355,
	365, -438, 128, 128, -378, -581, 96, 413, -584, 327,
	-182, 502, 33, -216, 243, 239, -572, -429, -428, -335,
	-198, -198, -198, -198, -198, -198, 69, 80, 69, 69,
	69, 74, 69, 74, 69, -324, 69, 80, -429, -200,
	-212, -362, 87, -595, -594, -593, -591, 77, 251, 78,
	-392, -441, 491, 495, 496, -425, -374, 92, -432, -220,
	24, -246, -246, -498, 307, 308, 87, 160, -253, -318,
	19, 159, 121, -6, -147, -149, -386, -6, -386, 625,
	378, 626, 92, 102, 102, -528, 453, 448, 450, 113,
	-395, -515, -514, 62, -183, -210, -507, -550, -513, -359,
	659, 659, 659, 659, 92, 62, -183, -507, -220, -520,
	-204, -203, 45, -359, 102, 17, -422, -417, 147, 147,
	-359, 389, -433, 92, 411, 92, 246, 659, 92, -342,
	-381, -386, 87, -261, 182, 181, -261, 36, 87, 87,
	-484, -484, -483, -486, -483, -261, -261, 87, 86, -202,
	87, 24, 87, 87, 87, -386, 87, 87, 160, -503,
	511, -504, 585, -454, -454, -454, -454, -454, -454, -454,
	-454, -454, -454, -454, -454, -454, -454, -454, -454, -454,
	-397, -396, 269, 454, 638, 638, 454, 638, 638, 87,
	160, -553, 160, -350, 322, -350, -341, 92, 250, 92,
	170, -359, 92, 641, 92, -359, -359, -359, 314, -359,
	314, -359, -359, 92, 92, -235, -253, 87, 36, -239,
	-240, -241, -250, -242, -244, 36, -580, 96, -575, 92,
	-359, 93, -581, 158, 363, 42, 414, 415, 430, 358,
	102, 102, 420, -573, -359, -181, 246, 359, -583, 53,
	128, 92, -246, -403, -347, 155, 288, 337, -313, -312,
	-359, 92, -239, -183, -246, -239, -239, -183, -478, 336,
	21, 102, 146, -213, 84, 159, -201, -247, -359, 147,
	87, -316, -238, -316, -316, -371, -478, -183, -463, 318,
	86, -461, 86, -461, 113, 345, -470, -468, 269, -304,
	46, 48, -253, -542, -359, -540, -542, -359, -540, -540,
	-406, -386, -304, -250, 250, 32, 239, -307, 342, 343,
	348, -434, 313, 118, -434, 160, -202, 160, -359, -270,
	-270, 32, 92, 92, -248, 87, 160, 128, 102, 92,
	-580, -575, 128, -439, 92, 92, -581, 92, 92, -585,
	128, -249, 246, -348, 160, -216, -216, -316, 160, 128,
	-218, -217, 83, 84, -219, 83, -217, -217, 69, 69,
	-316, -593, -592, 24, -545, -545, -545, 87, 87, 15,
	-225, 42, -317, 20, 21, 147, 125, 123, 125, 125,
	-359, 87, 87, -490, 616, -524, -526, 448, 21, 21,
	15, 251, 87, -507, 659, -507, -528, 46, 47, -417,
	-433, 433, -246, 160, 659, -251, -289, 92, -386, 87,
	-386, 87, 92, 87, 92, -207, 21, 87, 160, 87,
	87, 87, 160, 87, 87, -386, 87, -553, -351, 192,
	92, -351, 359, -360, -359, 17, -359, 92, -359, -466,
	314, -466, 314, -359, 244, -183, 87, 160, -183, 92,
	-578, 424, 102, 42, 102, 158, 416, -501, -173, 96,
	-248, 33, -216, -582, 96, 128, 658, 86, -355, -355,
	-355, -359, 87, 160, -355, -355, 87, 87, 87, -268,
	552, -479, 268, 102, 146, 102, 146, 102, -357, -201,
	-359, -316, -571, 159, -316, -479, -453, 319, 102, -382,
	86, -382, 86, -462, 316, 86, 87, 160, -359, -335,
	-265, -264, -262, 107, 118, 42, 402, -263, 96, 155,
	302, 305, 304, 280, 303, -294, -375, 83, 408, 342,
	343, -407, 616, 540, 253, 112, 113, 390, -376, 86,
	86, 84, 322, 86, 86, -542, 87, -304, -335, 42,
	-307, 42, 355, 313, -305, -359, 155, -270, 87, -548,
	92, -553, -578, 92, -441, -583, 92, -173, -248, -572,
	-207, -428, -513, -386, 86, -386, 86, 69, 11, 19,
	-379, -386, -394, 643, 645, 646, 252, -6, 626, 378,
	-285, 617, 92, 21, 92, -522, 92, -429, -490, -142,
	-282, -347, 285, 87, -288, 138, 552, 87, 87, -454,
	-454, -457, -456, -460, 454, 314, 464, -394, 92, 92,
	87, 87, 92, -359, 170, 92, 658, 92, -466, 92,
	-466, 314, -227, -253, -177, 552, -268, -241, -177, 21,
	552, 362, 42, 102, 42, 417, 92, -181, 128, 108,
	109, -343, -344, 92, -412, -270, -272, 92, -312, -379,
	-379, -266, -183, 36, -267, -310, -407, 552, -141, -140,
	-266, 552, 86, -480, 164, 102, 146, 102, 102, -316,
	-316, -480, -469, 21, 87, -448, 87, -448, 86, 128,
	-382, -468, -471, 62, -262, 107, -382, 92, -272, -273,
	42, 301, 297, 128, 128, -274, 42, 281, 282, -284,
	86, 312, 15, 198, 86, 113, 113, -246, -412, -412,
	-543, 344, 345, 346, 350, 348, 349, 347, -543, -412,
	-412, 86, -435, -434, -382, -355, -355, 155, -582, -208,
	-211, -541, -359, 253, 21, 21, -499, 552, 644, 86,
	86, -359, -359, -339, 618, 102, 92, 450, -285, -491,
	619, -518, -461, -270, 128, 87, 76, 550, 553, 87,
	-459, 120, 416, 420, -380, -383, 102, 104, 190, 158,
	87, 87, -359, -346, -345, 92, 92, 92, -466, 551,
	-178, 61, 498, 92, 93, 411, 92, 93, 362, -173,
	92, 659, 160, 128, 87, -449, 269, -183, 160, -310,
	-347, -142, -449, -269, -311, -359, 92, -497, 173, 335,
	552, 102, 146, 102, -207, -481, 173, 335, -452, 87,
	87, 87, -448, 102, 87, -475, -472, 86, -310, 271,
	138, 92, 92, 102, 86, -508, 32, 92, -413, 86,
	87, 87, 87, 87, -412, 102, -270, -355, 87, 87,
	160, 646, 86, -394, -394, 86, 21, -339, -492, 620,
	92, -527, 453, -521, -519, 448, 449, 450, 451, 92,
	551, 66, 554, -458, -459, 420, -380, -383, 614, 462,
	462, 462, 659, 160, 128, 92, -229, -359, 312, 433,
	-344, 92, -415, -450, 321, 21, -310, -355, -450, 87,
	160, -355, -355, 335, 102, 146, 102, -208, 335, -464,
	320, 87, -475, -310, -474, -473, 319, 272, 86, 87,
	-386, -398, -355, 87, -287, -286, 548, -412, -415, 84,
	-415, 84, -415, 84, -415, 84, 87, -270, -359, 253,
	-137, 86, 87, 87, -340, -359, -522, 92, -529, 251,
	-525, -526, 452, -519, 21, 450, 21, 21, -143, 160,
	66, 117, 463, 463, 463, -345, 92, -228, 36, 455,
	389, -416, 259, 355, 356, 96, 552, 342, 343, 21,
	-451, -270, -311, -379, -379, 102, 102, 87, 160, -359,
	268, 86, -393, -387, -386, 268, 87, -359, -293, -291,
	-292, 83, 469, 310, 311, 87, -543, -543, -543, -543,
	-294, 87, 160, -392, 87, 160, -536, 86, 102, -524,
	-523, -525, 21, -522, 21, -522, -522, 457, 552, -458,
	92, -355, -355, 92, 92, 341, -335, 86, -463, -473,
	-472, -393, 87, 160, -434, -292, 83, -291, 83, 16,
	15, -415, -415, -415, -415, 86, 87, -359, -539, 32,
	87, -535, -534, -336, -530, -359, 453, 454, 92, -522,
	128, 553, -613, -612, 637, 102, 102, -359, -448, -453,
	87, -387, -290, 307, 308, 32, 173, -290, -392, -538,
	-537, -337, 87, 160, 159, 92, 554, 92, 87, -469,
	107, 42, 309, 87, 160, 128, -534, -359, -537, 42,
	-386, 159, -359,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 316, 317, 318, 319,
	320, 321, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 0, 0, 0, 0, 0, 714, 715, 0, 678,
	0, 0, 0, 0, 0, 0, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 0, 350, 346, 258, 259, 260, 261,
	262, 263, 264, 357, 358, 532, 0, 0, 0, 0,
	797, -2, 100, 0, 0, 0, 0, 339, 0, 330,
	330, 0, 0, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, -2, 727, 0, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 414, 415, 416, 410,
	411, 413, 412, -2, 0, 0, 727, 0, 0, 0,
	805, 0, 0, 0, 848, 866, 23, 0, 7, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	0, 19, 0, 19, 0, 0, 0, 1400, 1401, 1402,
	1403, 2202, 2172, -2, 1936, 1913, 2096, 2097, 1993, 2005,
	2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248,
	2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258,
	2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268,
	2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278,
	2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288,
	1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
	1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
	2002, 2003, 2004, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,
	2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
	2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
	2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
	2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
	2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,
	2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125,
	2126, 2127, 2128, -2, 2130, 2131, 2132, 2133, 2134, 2135,
	2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145,
	2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155,
	2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165,
	2166, 2167, 2168, 2169, 2170, 2171, 2173, 2174, 2175, 2176,
	2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186,
	2187, -2, -2, -2, 2191, 2192, 2193, 2194, 2195, 2196,
	2197, 2198, 2199, 2200, 2201, 2203, 2204, 2205, 2206, 2207,
	2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217,
	2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227,
	2228, 0, 314, 312, 1882, 1913, 1936, 1993, 2005, 2006,
	2044, 2096, 2097, 2129, 2172, 2188, 2189, 2190, 2202, 0,
	0, 1001, 0, 775, 0, 0, 780, 1348, 775, 351,
	716, 717, 805, 831, 676, 0, 388, 0, 1927, 392,
	2179, 0, 0, 0, 0, 673, 382, 383, 384, 385,
	386, 387, 0, 0, 974, 0, 0, 378, 0, 345,
	1995, 2201, 1404, 0, 0, 0, 0, 0, 201, 1125,
	203, 1127, 207, 215, 0, 0, 0, 220, 221, 224,
	225, 226, 227, 228, 0, 232, 0, 234, 237, 0,
	239, 240, 0, 243, 244, 245, 0, 255, 256, 257,
	1128, 1129, 1130, -2, 128, 999, 1840, 1726, 0, 1733,
	1746, 1757, 1486, 1487, 1488, 1489, 0, 0, 0, 0,
	0, 0, 1497, 1498, 0, 1528, 2243, 2284, 2285, 0,
	1506, 1507, 1508, 1509, 1510, 1511, 0, 139, 151, 152,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 0, 1787, 1788,
	1789, 1697, 1473, 1400, 0, 2252, 0, 2274, 2279, 2280,
	2281, 2282, 2273, 0, 0, 1681, 0, 1671, 0, 0,
	-2, -2, 0, 0, 2069, -2, 2286, 2287, 2288, 2249,
	2270, 2278, 2253, 2254, 2277, 2245, 2246, 2247, 2240, 2241,
	2242, 2244, 2256, 2258, 2269, 0, 2265, 2275, 2276, 2177,
	0, 0, 2224, 0, 0, 0, 2219, 153, 154, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1692, -2, 1694, -2,
	1696, -2, 1699, -2, -2, -2, -2, 1704, 1705, -2,
	1707, -2, -2, -2, -2, -2, -2, -2, 1683, 1684,
	1685, 1686, 1675, 1676, 1677, 1678, 1679, 1680, -2, -2,
	-2, 831, 924, 0, 831, 0, 806, 853, 856, 859,
	862, 809, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 340, 341, 329, 331, 0,
	335, 0, 0, 331, 328, 322, 0, 1161, 1161, 1161,
	0, 0, 0, 0, 1161, 1161, 1161, 1161, 1161, 0,
	1161, 0, 0, 0, 0, 0, 1161, 0, 1034, 1132,
	1133, 1134, 1159, 1160, 1233, 0, 0, 0, 732, 728,
	729, 730, 731, 819, 0, 821, 824, 0, 0, 653,
	653, 891, 891, 599, 0, 0, 0, 653, 0, 613,
	605, 0, 0, 0, 653, 0, 0, 826, 826, 0,
	656, 663, 653, 653, -2, 653, 653, 650, 653, 0,
	0, 1173, 619, 620, 621, 605, 605, 624, 625, 626,
	636, 637, 664, 1864, 0, 0, 532, 532, 0, 532,
	532, 0, 532, 532, 532, 0, 734, 1952, 2039, 1934,
	2011, 1893, 1995, 2201, 0, 287, 2069, 292, 0, 1935,
	1955, 0, 0, 1973, 0, -2, 0, 367, 831, 0,
	0, 805, 0, 0, 0, 0, 532, 532, 532, 532,
	532, 1232, 532, 532, 532, 532, 532, 0, 0, 0,
	532, 532, 532, 532, 0, 867, 868, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 5, 6, 19,
	0, 0, 0, 0, 0, 0, 107, 106, 0, 1841,
	1859, 1792, 1793, 1794, 1846, 1796, 1850, 1850, 1850, 1850,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1850, 1850, 0, 0, 1839, 1816, 1848, 1848, 1848, 1846,
	1843, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1853, 1853, 1856, 1856, 1853,
	0, 428, 426, 427, 1722, 0, 0, 0, 0, 775,
	779, 1346, 0, 0, 0, 831, -2, 0, 0, 677,
	389, 1405, 0, 0, 393, 0, 394, 0, 0, 396,
	0, 0, 0, 417, 0, 420, 404, 405, 406, 407,
	400, 0, 181, 0, 380, 381, 0, 0, 347, 0,
	0, 0, 533, 0, 0, 0, 0, 0, 0, 212,
	208, 216, 219, 229, 236, 0, 248, 250, 253, 209,
	217, 222, 223, 230, 251, 210, 213, 214, 218, 252,
	254, 211, 231, 235, 249, 233, 238, 241, 242, 247,
	0, 182, 0, 0, 0, 0, 0, 1732, 0, 0,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1726, 0, 0,
	1492, 1493, 1494, 1495, 0, 1499, 0, 1529, 0, 0,
	0, 0, 0, 0, 1786, 1790, 0, 1722, 1722, 0,
	1722, 1718, 0, 0, 0, 0, 0, 0, 1722, 1654,
	0, 0, 1656, 1672, 0, 0, 1658, 1659, 0, 1662,
	1663, 1722, 0, 1722, 1667, 1722, 1722, 1722, 1650, 1651,
	0, 1718, 1718, 1718, 1718, 0, 0, 1718, 1718, 1718,
	1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
	1718, 1718, 0, 0, 0, 0, 826, 0, 832, 0,
	-2, 0, 850, 852, 854, 855, 857, 858, 860, 861,
	863, 864, 811, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 71, 73, 0, 0, 0, 0, 0, 0,
	333, 0, 338, 324, 2031, 0, 323, 0, 0, 0,
	0, 0, 998, 0, 0, 1161, 1161, 1161, 1035, 0,
	0, 0, 0, 0, 0, 0, 0, 1161, 1161, 1161,
	1161, 0, 1179, 0, 0, 0, 734, 733, 0, 820,
	0, 0, 70, 592, 593, 594, 891, 0, 0, 596,
	597, 0, 598, 0, 605, 653, 653, 611, 612, 607,
	606, 659, 660, 656, 0, 656, 656, 891, 0, 630,
	631, 632, 653, 653, 638, 827, 0, 639, 640, 656,
	0, 661, 662, 891, 0, 0, 891, 891, 0, 648,
	649, 651, 653, 0, 0, 1161, 0, 669, 607, 607,
	1865, 1866, 0, 0, 1170, 0, 0, 0, 0, 672,
	0, 0, 0, 444, 445, 0, 0, 735, 0, 266,
	270, 0, 273, 0, 2039, 0, 2039, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 310, 311, 0, 0,
	0, 0, 301, 304, 1340, 1341, 1122, 1123, 305, 306,
	359, 360, 0, 826, 849, 851, 845, 846, 847, 0,
	72, 0, 0, 0, 0, 0, 532, 0, 0, 0,
	0, 0, 710, 0, 1014, 712, 0, 0, 0, 0,
	0, 899, 893, 895, 969, 139, 869, 8, 124, 121,
	0, 19, 0, 0, 19, 19, 0, 19, 315, 0,
	1862, 1860, 1861, 1795, 1847, 0, 1821, 0, 1822, 1823,
	1824, 1835, 1836, 0, 0, 1817, 0, 1818, 1819, 1820,
	1811, 0, 1812, 1813, 0, 1814, 1815, 313, 425, 0,
	0, 1723, 1002, 0, 753, 767, 748, 0, 756, 0,
	0, 1348, 0, 0, 0, 0, 736, 767, 738, 0,
	756, 826, 803, 0, 781, 0, 0, 390, 0, 401,
	395, 0, 402, 397, 398, 0, 0, 419, 421, 422,
	423, 408, 409, 674, 376, 377, 368, 369, 370, 371,
	372, 373, 374, 375, 0, 0, 0, 379, 149, 0,
	348, 349, 0, 0, 0, 195, 196, 197, 198, 199,
	200, 202, 186, 699, 701, 1114, 1126, 0, 1117, 0,
	205, 246, 176, 0, 0, 0, 1727, 1728, 1729, 1730,
	1731, 1736, 0, 1738, 1740, 1742, 1744, 0, 1762, -2,
	-2, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1747, 1760, 1761, 0, 0, 0, 0,
	0, 0, 1758, 1758, 1753, 0, 1512, 1342, 1343, 1490,
	0, 0, 1526, 1530, 0, 0, 0, 0, 0, 0,
	1145, 1846, 0, 140, 1717, 1621, 1622, 1623, 1624, 1625,
	1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 0, 0, 1726, 0, 0, 0,
	1719, 1720, 0, 0, 0, 1609, 0, 0, 1615, 1616,
	1617, 0, 762, 0, 1682, 1655, 1673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 925, 0, 771, 773,
	774, 800, 781, 807, 0, 0, 0, 99, 104, 0,
	1200, 0, 0, 0, 0, 0, 0, 0, 74, 1174,
	75, 1176, 342, 343, 0, 0, 337, 325, 2031, 327,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 1050, 1051, 530, 1108, 0, 0, 0, 1124, 1149,
	1157, 0, 0, 0, 0, 0, 1206, 1036, 1041, 1042,
	1043, 1037, 1038, 1044, 1045, 0, 822, 0, 0, 938,
	595, 654, 655, 892, 602, 1995, 607, 891, 891, 614,
	608, 615, 658, 616, 617, 618, 656, 891, 891, 828,
	653, 656, 641, 657, 656, 1348, 645, 0, 652, 1348,
	670, 1348, 0, 668, 622, 623, 1208, 824, 442, 443,
	448, 450, 0, 499, 499, 499, 482, 499, 0, 0,
	470, 1867, 0, 0, 0, 0, 479, 1867, 0, 0,
	1867, 1867, 1867, 1867, 1867, 1867, 1867, 0, 0, 1867,
	1867, 1867, 1867, 1867, 1867, 1867, 1867, 1867, 1867, 1867,
	0, 1867, 1867, 1867, 1867, 1867, 1325, 1867, 0, 498,
	1171, 489, 490, 491, 492, 497, 0, 0, 526, 0,
	0, 1049, 0, 530, 0, 0, 1091, 0, 0, 904,
	0, 905, 906, 907, 902, 940, 964, 964, 0, 964,
	944, 1348, 0, 0, 0, 278, 279, 267, 0, 268,
	0, 0, 281, 282, 0, 284, 285, 286, 293, 1934,
	2011, 288, 290, 0, 0, 294, 307, 308, 309, 0,
	0, 299, 300, 0, 0, 362, 363, 365, 0, 781,
	1175, 696, 1344, 697, 698, 702, 0, 0, 705, 706,
	707, 708, 709, 1016, 0, 0, 1100, 1101, 1102, 1103,
	891, 0, 900, 0, 896, 970, 0, 972, 0, 0,
	122, 19, 0, 115, 112, 0, 0, 0, 0, 0,
	1842, 1791, 1863, 0, 0, 0, 1844, 0, 0, 0,
	0, 0, 105, 783, 743, 0, 747, 764, 0, 768,
	0, 0, 760, 752, 757, 0, 0, 777, 744, 1347,
	0, 0, 0, 0, 737, 0, 0, 742, 781, 0,
	804, 833, 834, 837, 1406, 0, 403, 399, 418, 0,
	532, 0, 0, 0, 189, 1111, 0, 190, 194, 184,
	0, 0, 0, 1116, 0, 1113, 1118, 0, 204, 0,
	0, 177, 178, 179, 180, 1191, 1200, 0, 0, 0,
	1737, 1739, 1741, 1743, 1745, 0, 1748, 1758, 1758, 1754,
	0, 1749, 0, 1751, 0, 1727, 1496, 0, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 1599, 1600, 0, 0, 1604, 0, 1606, 1607, 1608,
	1610, 0, 0, 0, 1614, 0, 1653, 1674, 1657, 1660,
	0, 1664, 0, 1666, 1668, 1669, 1670, 0, 831, 831,
	0, 0, 1570, 1570, 1570, 0, 0, 0, 0, 1570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 1516, 1517, 0, 0, 0, 926, 801,
	0, 0, 0, 0, 0, 1198, 0, 89, 0, 0,
	0, 0, 94, 0, 0, 76, 344, 332, 334, 0,
	326, 0, 1162, 0, 0, 0, 0, 1004, 1005, 1007,
	0, 1010, 1011, 1012, 1016, 824, 0, 824, 1061, 1867,
	534, 0, 0, 1110, 0, 1080, 0, 0, 0, -2,
	0, 0, 1157, 0, 0, 0, 1210, 0, 0, 0,
	721, 725, 23, 825, 0, 600, 0, 601, 653, 609,
	610, 891, 633, 634, 0, 0, 891, 653, 653, 644,
	656, 665, 0, 666, 1348, 1210, 0, 0, 1170, 1276,
	1244, 460, 0, 1361, 1362, 500, 0, 1368, 1377, 1161,
	1438, 0, 1377, 0, 0, 1379, 1380, 0, 0, 0,
	0, 483, 484, 0, 469, 0, 0, 0, 0, 0,
	0, 468, 0, 0, 510, 0, 0, 0, 0, 0,
	1868, 1867, 1867, 0, 477, 478, 0, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 1867, 1867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 1333,
	0, 1061, 1867, 0, 0, 0, 0, 534, 1105, 1078,
	1096, 0, 446, 447, 507, 0, 0, 0, 0, 0,
	0, 0, 930, 0, 0, 0, 929, 0, 0, 0,
	0, 0, 0, 0, 824, 965, 0, 967, 968, 942,
	-2, 0, 904, 947, 1722, 0, 271, 272, 0, 0,
	277, 295, 297, 269, 0, 0, 0, 296, 298, 302,
	303, 361, 364, 366, 843, 0, 0, 1234, 0, 1017,
	1018, 1020, 1021, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1918, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1015,
	713, 882, 894, 901, 971, 973, 140, 897, 0, 125,
	19, 124, 116, 117, 0, 19, 0, 0, 0, 0,
	1852, 1851, 1837, 0, 1838, 1849, 1854, 0, 1857, 0,
	429, 787, 0, 0, 767, 769, 0, 0, 767, 0,
	0, 776, 0, 0, 0, 0, 0, 0, 0, 767,
	843, 783, 0, 840, 838, 839, 0, 0, 675, 150,
	424, 0, 0, 0, 0, 0, 700, 0, 1115, 186,
	0, 0, 206, 0, 0, 0, 1200, 1195, 1721, 1750,
	1752, 0, 1759, 1755, 1491, 1500, 1527, 0, 0, 1533,
	1545, 1545, 0, 0, 0, 1536, 1850, 1850, 1539, 1846,
	1848, 1846, 1545, 1545, 0, 1146, 0, 1147, 837, 141,
	0, 0, 1605, 0, 0, 0, 763, 0, 0, 0,
	1566, 1568, 1570, 1570, 1577, 1571, 1578, 1579, 1570, 1570,
	1570, 1570, 1584, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
	1570, 1570, 1570, 1570, 1564, 0, 0, 1780, 1781, 772,
	0, 0, 814, 815, 816, 817, 818, 0, 0, 61,
	61, 1200, 0, 98, 90, 0, 0, 0, 0, 0,
	336, 0, 77, 78, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 1009, 0, 0, 0, 1354, 0, 1065,
	1062, 1063, 1064, 0, 1105, 535, 536, 537, 538, 0,
	0, 0, 1109, 0, 0, 1073, 0, 0, 0, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, -2, 1165, 0, 0,
	0, 1354, 1184, 0, 0, 1189, 1354, 1354, 0, 1218,
	0, 1207, 775, 0, -2, 0, 0, 723, 0, 0,
	939, 603, 891, 627, 829, 830, 1348, 891, 891, 653,
	671, 667, 1218, 1209, 0, 449, 499, 0, 1264, 0,
	0, 1270, 0, 1277, 453, 0, 501, 0, 1367, 1394,
	1378, 1394, 1439, 1394, 1394, 1161, 0, 501, 0, 0,
	471, 0, 0, 0, 0, 0, 467, 504, 837, 454,
	456, 457, 458, 508, 509, 511, 0, 513, 514, 473,
	485, 486, 487, 488, 0, 0, 0, 480, 493, 494,
	495, 496, 455, 1293, 1294, 1295, 1298, 1299, 1300, 1301,
	0, 0, 1304, 1305, 1306, 1307, 1308, 1391, 1392, 1393,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1334, 1335, 1336,
	1337, 1338, 1339, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 0, 0, 1329, 0, 0, 0, 88, 1065, 0,
	0, 0, 0, 0, 1105, 529, 0, 0, 1080, 0,
	1098, 0, 1092, 1093, 0, 0, 745, 891, 354, 0,
	934, 927, 0, 911, 0, 913, 931, 914, 932, 933,
	918, 0, 920, 0, 916, 917, 922, 915, 891, 903,
	941, 966, 943, 946, 948, 949, 955, 0, 0, 0,
	0, 265, 274, 275, 276, 283, 0, 554, 289, 799,
	0, 1345, 703, 704, 1235, 1236, 711, 0, 1022, 880,
	0, 0, 120, 123, 0, 118, 0, 0, 0, 0,
	110, 108, 1845, 0, 0, 789, 164, 0, 0, 0,
	765, 0, 770, 767, 751, 761, 750, 758, 759, 778,
	1349, 1350, 1351, 1352, 0, 767, 741, 740, 802, 787,
	835, 836, 0, 1407, 391, 0, 1112, 186, 191, 192,
	193, 187, 185, 1119, 0, 1121, 0, 1193, 0, 0,
	1756, 1532, 1501, 1534, 1546, 1547, 1535, 0, 1503, 1504,
	1537, 1538, 1540, 1541, 1542, 1543, 1544, 1505, 0, 1148,
	1601, 0, 1603, 1611, 1612, 0, 1661, 1665, 0, 0,
	0, 0, 0, 1575, 1576, 1580, 1581, 1582, 1583, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	831, 1565, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 63, 0, 63, 1199, 1201, 0, 969,
	0, 0, 95, 0, 0, 79, 81, 0, 1996, 0,
	0, 0, 0, 997, 1000, 1006, 1008, 0, 0, 0,
	1355, 1356, 1358, 1359, 1360, 0, 1033, 0, 0, 1053,
	1054, 1055, 1067, 0, 540, 541, 0, 0, 0, 553,
	549, 550, 551, 531, 1104, 1087, 0, 0, 1076, 0,
	0, 1086, 0, 1166, 1867, 1867, 1867, 0, 0, 1278,
	1867, 1867, 0, 1186, 1188, 0, 0, 1282, 1221, 0,
	0, 1212, 0, 964, 0, 0, 891, 722, 725, 726,
	823, 604, 642, 646, 643, 891, 1221, 441, 1242, 0,
	0, 0, 0, 0, 1274, 0, 0, 1246, 0, 472,
	502, 0, -2, 0, 1395, 0, 1381, 1395, 0, 0,
	1394, 0, 461, 501, 0, 0, 0, 515, 519, 520,
	0, 517, 1434, 0, 518, 0, 506, 0, 512, 1296,
	1297, 0, 1302, 1303, 0, 1327, 0, 0, 0, 452,
	521, 0, 0, 0, 522, 523, 528, 1106, 1107, 1073,
	0, 1087, 0, 1097, 0, 1094, 1095, 831, 0, 0,
	908, 935, 0, 0, 909, 0, 910, 912, 919, 921,
	353, 950, 0, 0, 952, 953, 954, 945, 291, 844,
	1019, 0, 865, 0, 0, 898, 0, 19, 0, 0,
	113, 1855, 1858, 791, 0, 788, 165, 0, 0, 0,
	0, 755, 766, 749, 1353, 739, 789, 841, 842, 188,
	183, 1120, 1203, 0, 1194, 0, 1458, 1514, 0, 1613,
	0, 1570, 1567, 1570, 1569, 1561, 0, 1518, 0, 1520,
	1521, 1522, 0, 1524, 1525, 0, 810, 0, 59, 0,
	62, 60, 0, 97, 91, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 1039, 1282, 0, 1039, 1066,
	1052, 0, 0, 542, 543, 0, 546, 552, 1068, 0,
	0, 1070, 1071, 1072, 0, 0, 1084, 0, 0, 0,
	0, 1158, 1172, 0, 0, 0, -2, 0, -2, 1183,
	0, 1227, 0, 1219, 0, 1211, 0, 1214, 891, 891,
	-2, 719, 724, 0, 647, 1227, 1244, 0, 1265, 0,
	0, 0, 0, 0, 0, 0, 1245, 0, 1258, 503,
	1396, -2, 1410, 1412, 0, 1171, 1415, 1416, 0, 0,
	0, 0, 0, 0, 1465, 1424, 0, 0, 1428, 1429,
	1430, 0, 0, 1433, 0, 1774, 1775, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 1375, 462, 463, 0,
	465, 466, 1867, 1435, 505, 459, 1867, 475, 1326, 1330,
	1331, 1328, 527, 524, 525, 1076, 1079, 1090, 1099, 746,
	826, 355, 356, 936, 0, 928, 959, 956, 0, 0,
	1023, 881, 889, 2224, 2226, 2223, 114, 119, 0, 0,
	793, 0, 790, 0, 784, 786, 175, 754, 791, 135,
	167, 0, 0, 1502, 0, 0, 0, 1602, 1652, 1573,
	1574, 0, 1562, 0, 1556, 1557, 1558, 1563, 0, 0,
	813, 808, 64, 93, 0, 96, 68, 83, 0, 84,
	0, 0, 0, 1025, 1032, 1046, 1177, 1357, 1031, 0,
	0, 539, 544, 0, 547, 548, 1088, 1087, 0, 1074,
	1075, 0, 1082, 0, 0, 1167, 1168, 1169, 1279, 1280,
	1281, 1237, 1185, 0, -2, 1290, 0, 0, 1181, 1203,
	1237, 0, 0, 1215, 0, 1222, 0, 1220, 1213, 831,
	720, 1224, 451, 1276, 1266, 0, 1268, 0, 0, 0,
	0, 1247, -2, 0, 1411, 1413, 1414, 1417, 1418, 1419,
	1470, 1471, 1472, 0, 0, 1422, 1467, 1468, 1469, 1423,
	0, 0, 0, 0, 0, 1772, 1773, 1463, 0, 0,
	1382, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1383, 0,
	0, 0, 1374, 1376, 464, 0, 0, 1867, 1089, 352,
	0, 0, 960, 962, 957, 958, 883, 0, 0, 0,
	0, 109, 111, 126, 0, 792, 166, 0, 793, 137,
	0, 158, 0, 1204, 0, 1513, 0, 0, 0, 1572,
	1559, 0, 0, 0, 0, 0, 1776, 1777, 1778, 0,
	1519, 1523, 92, 0, 66, 0, 85, 86, 0, 0,
	0, 1047, 1048, 1056, 1057, 0, 1059, 1060, 545, 1069,
	1077, 1081, 1084, 0, 1136, 1239, 0, 1187, 1170, 1292,
	1867, 1190, 1239, 0, 1284, 1867, 1867, 1205, 0, 1217,
	0, 1229, 0, 1223, 826, 440, 0, 1226, 1262, 1267,
	1269, 1271, 0, 1275, 1273, 1248, -2, 0, 1256, 0,
	0, 1420, 1421, 0, 0, 1671, 1867, 0, 1453, 0,
	1136, 1136, 1136, 1136, 0, 516, 474, 0, 937, 951,
	0, 890, 0, 0, 0, 0, 0, 782, 127, 0,
	136, 155, 0, 168, 169, 0, 0, 0, 0, 1196,
	0, 1461, 1462, 0, 1548, 0, 0, 0, 1552, 1553,
	1554, 1555, 65, 68, 0, 87, 0, 1024, 0, 1058,
	1083, 1085, 1135, 1180, 0, 1276, 1291, 0, 1182, 1283,
	0, 0, 0, 1216, 1228, 0, 1231, 718, 1225, 1243,
	0, 1272, 1249, 1257, 0, 1252, 0, 0, 0, 1466,
	0, 1427, 0, 1432, 1441, 1454, 0, 0, 1363, 0,
	1365, 0, 1369, 0, 1371, 0, 0, 476, 961, 963,
	0, 1722, 885, 886, 0, 795, 785, 138, 142, 0,
	164, 161, 0, 170, 0, 0, 0, 0, 1192, 0,
	1459, 0, 1549, 1550, 1551, 67, 69, 0, 1026, 1027,
	1040, 1137, 1867, 1867, 0, 0, 0, 1143, 1144, 0,
	1264, 1296, 1285, 1286, 1287, 1230, 1263, 1251, 0, -2,
	1259, 0, 0, 1724, 1734, 1735, 1425, 1431, 1440, 1442,
	1443, 0, 1455, 1456, 1457, 1464, 1136, 1136, 1136, 1136,
	1373, 884, 0, 0, 794, 0, 129, 0, 0, 159,
	160, 162, 0, 171, 0, 173, 174, 0, 0, 1560,
	1028, 0, 0, 1140, 1141, 0, 1240, 0, 1242, 1253,
	-2, 0, 1261, 0, 1426, 1444, 0, 1445, 0, 0,
	0, 1364, 1366, 1370, 1372, 1722, 887, 796, 1202, 0,
	143, 0, 145, 147, 148, 1397, 156, 157, 163, 172,
	0, 0, 1013, 1029, 0, 1138, 1139, 1142, 0, 1244,
	1260, 1725, 1446, 1448, 1449, 0, 0, 1447, 0, 130,
	131, 0, 144, 0, 0, 1197, 1460, 1030, 1241, 1238,
	1450, 1452, 1451, 888, 0, 0, 146, 1398, 132, 133,
	134, 0, 1399,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 660, 657,
	129, 128, 130, 3, 661, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 658, 141, 659, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:845
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:852
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:858
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:866
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:876
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:968
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:984
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:989
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:993
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:999
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1021
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1025
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1048
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1078
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1086
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1096
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1106
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1116
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1126
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1136
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1148
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1158
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1168
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1179
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1204
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1220
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1228
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1247
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1267
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1276
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1286
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1296
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1306
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1326
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1332
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1339
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1347
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1353
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1372
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1380
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1388
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1396
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1406
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1414
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1424
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1431
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1440
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1450
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1454
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1460
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1464
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1470
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1479
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1489
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1493
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1499
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1508
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1512
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1518
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1539
		{
			yyLOCAL = &tree.Load{
				Local:        yyDollar[3].boolValUnion(),
				Param:        yyDollar[4].loadParamUnion(),
				DuplicateOpt: yyDollar[5].loadDuplicateModeUnion(),
				Table:        yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1553
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1560
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1564
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1570
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1574
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1580
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1587
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1595
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1599
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1611
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1615
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1629
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1633
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1638
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1645
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1649
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1653
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1659
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1668
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1679
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1683
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1689
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1693
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1699
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1703
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1709
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1729
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1748
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1752
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1756
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1761
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1765
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1774
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1784
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1791
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1796
		{
			yyVAL.str = "\n"
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1803
		{
			yyVAL.str = yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1808
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1812
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1840
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1844
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1850
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1858
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1878
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1897
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LoadDupMode
//line mysql_sql.y:1922
		{
			yyLOCAL = tree.LOAD_DUPLICATE_CHECKING
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadDupMode
//line mysql_sql.y:1926
		{
			yyLOCAL = tree.LOAD_DUPLICATE_CHECKING
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadDupMode
//line mysql_sql.y:1930
		{
			yyLOCAL = tree.LOAD_DUPLICATE_NOCHECKING
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadDupMode
//line mysql_sql.y:1934
		{
			yyLOCAL = tree.LOAD_DUPLICATE_IGNORE
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadDupMode
//line mysql_sql.y:1938
		{
			yyLOCAL = tree.LOAD_DUPLICATE_REPLACE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1943
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1947
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1953
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1966
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1977
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1990
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1994
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2004
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2017
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2030
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2036
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2042
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2050
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2060
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2070
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2074
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2078
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2082
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2086
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2090
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2097
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2101
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2107
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2114
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2123
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2127
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2133
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2137
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2141
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2145
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2149
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2153
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2157
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2161
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2165
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2177
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2181
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2185
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2193
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2197
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2201
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2205
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2209
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2213
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2217
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2229
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2233
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2237
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2241
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2245
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2249
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2253
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2257
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2261
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2265
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2269
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2273
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2309
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2313
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2317
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2321
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2325
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2329
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2333
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2348
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2357
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2364
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2371
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2380
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2398
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2402
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2408
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2415
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2423
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2427
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2431
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2435
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2441
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2445
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2451
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2458
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2465
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2474
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2504
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2512
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2524
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2528
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2535
		{
			yyVAL.str = yyDollar[3].str
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2541
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2545
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2551
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2559
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2568
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2577
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2585
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2616
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2635
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2642
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2649
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2657
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2664
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2671
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2680
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2684
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2688
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2694
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2698
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2704
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2708
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2714
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2718
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2732
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2738
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2749
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2754
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2759
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2765
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2771
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2776
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2780
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2784
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2788
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2792
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2796
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2800
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2804
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2808
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2814
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2818
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2822
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2826
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2831
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2836
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2842
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2855
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2868
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2881
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2894
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2910
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2917
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2928
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2939
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2943
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2949
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2959
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2965
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2969
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2975
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2981
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2985
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2989
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2993
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3012
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3018
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3022
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3028
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3032
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3038
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3044
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3055
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3061
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3065
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3069
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3073
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3081
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3089
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3107
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3115
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3125
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3135
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3151
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3155
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3163
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3171
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3211
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3215
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3221
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3227
		{
			yyVAL.str = yyDollar[1].str
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3232
		{
			yyVAL.str = "true"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3233
		{
			yyVAL.str = "false"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3234
		{
			yyVAL.str = yyDollar[1].str
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3239
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3245
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3254
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3261
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3269
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3273
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3298
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3321
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3331
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3338
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3347
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3355
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3359
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3365
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3376
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3380
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3386
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3390
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3414
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3424
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3434
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3450
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3468
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3472
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3478
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3482
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3488
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3494
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3502
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3512
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3520
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3530
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3540
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3550
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3557
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3561
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3565
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3569
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3573
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3580
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3586
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3590
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3594
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3598
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3602
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3606
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3610
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3614
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3619
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3650
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3654
		{
			yyVAL.str = string("COLUMN")
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3659
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3665
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3671
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3679
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3683
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3689
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3697
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3704
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3710
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3716
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3722
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3728
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3735
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3742
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3750
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3756
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3768
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3774
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3782
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3786
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3793
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3811
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3826
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3841
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3856
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3869
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3875
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3886
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3898
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3911
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3915
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3923
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3927
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3932
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3936
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3952
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3956
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3960
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3964
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3971
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3975
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3979
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3983
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3990
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3994
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4001
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4005
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4009
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4013
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4020
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4027
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4033
		{
			yyVAL.item = nil
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4038
		{
			yyVAL.item = nil
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4086
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4092
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4098
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4113
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4121
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4129
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4137
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4141
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4145
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4156
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4160
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4166
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4171
		{
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4175
		{
		}
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4180
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4190
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4200
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4208
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4214
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4220
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4226
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4232
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4238
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4244
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4253
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4257
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4261
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4265
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4269
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4273
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4277
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4281
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4287
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4296
		{
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4298
		{
		}
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4307
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4317
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4326
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4330
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4334
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4340
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4346
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4352
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4358
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4378
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4390
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4398
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4404
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4416
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4430
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4436
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4442
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4449
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4453
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4458
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4462
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4466
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4471
		{
			yyVAL.str = ""
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4475
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4481
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4496
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4500
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4506
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4514
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4521
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4529
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4535
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4541
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4546
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4554
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4560
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4565
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4571
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4577
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4581
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4609
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4617
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4625
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4633
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4637
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4643
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4656
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4664
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4673
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4679
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4687
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4695
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4703
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4709
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4717
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4723
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4731
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4737
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4747
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4752
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4759
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4775
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4788
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4799
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4803
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4809
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4815
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4824
		{
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4826
		{
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4829
		{
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4838
		{
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4842
		{
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4847
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4856
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4863
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4869
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4877
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4884
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4891
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4911
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4919
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4929
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4933
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4939
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4946
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4952
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4960
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4967
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4974
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4993
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4997
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5001
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5006
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5010
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5014
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5020
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5029
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5033
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5039
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5043
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5049
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5053
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5059
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5064
		{
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5068
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5075
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5079
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5086
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5091
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5095
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5101
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5105
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5111
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5115
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5120
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5124
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5137
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5148
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5159
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5181
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5204
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5212
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5221
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5225
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5238
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5242
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5247
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5251
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5258
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5263
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5270
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5276
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5280
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5284
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5288
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5292
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5296
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5301
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5305
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5311
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5321
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5336
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5340
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5354
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5358
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5364
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5373
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5377
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5381
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5385
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5389
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5395
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5402
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5411
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5415
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5421
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5429
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5433
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5438
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5442
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5448
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5452
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5456
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5461
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5465
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5471
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5477
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5481
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5487
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5492
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5496
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5500
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5505
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5509
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5513
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5518
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5522
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5530
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5534
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5538
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5552
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5556
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5566
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5576
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5586
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5598
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5606
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5614
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5623
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5631
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5639
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5647
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5655
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5663
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5671
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5679
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5687
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5697
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5710
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5714
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5720
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5724
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5730
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5734
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5738
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5742
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5746
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5750
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5754
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5758
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5762
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5766
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5788
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5792
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5797
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5801
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5811
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5820
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5829
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5840
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5844
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5849
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5853
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5858
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5862
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5868
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5872
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5878
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5882
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5886
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5890
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5895
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5903
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5909
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5917
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5927
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5937
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5941
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5947
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5956
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5965
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5974
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5982
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5993
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6003
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6007
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6013
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6017
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6027
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6031
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6035
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6039
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6045
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 923:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6051
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6062
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6066
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6072
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6078
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6082
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6088
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6094
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6098
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6102
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6106
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6116
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6122
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6126
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6132
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6136
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6142
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6146
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6156
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6169
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6175
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6181
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6195
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6206
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6213
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6217
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6223
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6233
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6237
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6241
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6246
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6250
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6254
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6258
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6263
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6267
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6271
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6275
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6279
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6284
		{
			yyVAL.str = ""
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6288
		{
			yyVAL.str = yyDollar[1].str
		}
	case 966:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6292
		{
			yyVAL.str = yyDollar[2].str
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6298
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6302
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6307
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6311
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6315
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6319
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6323
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6329
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 997:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6371
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6384
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6390
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1000:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6396
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6409
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6414
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6421
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6428
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6432
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6438
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6444
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6449
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6453
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6457
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6461
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6468
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6501
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6506
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6513
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6520
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6524
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6530
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6536
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6540
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6544
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6550
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6556
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6562
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6566
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6572
		{
			yyVAL.str = ""
		}
	case 1030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6579
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1031:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6585
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6600
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6617
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6634
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6638
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6644
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6648
		{
			yyVAL.str = "DEFINER = "
		}
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6652
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6657
		{
			yyVAL.str = ""
		}
	case 1040:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6661
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1046:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6675
		{
			yyVAL.str = ""
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6683
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6689
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6694
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6700
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6713
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6718
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6723
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6729
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6736
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6743
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6750
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6757
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6765
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6771
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6778
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6785
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6793
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6799
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6808
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6825
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6841
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6860
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6866
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6875
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6893
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6899
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6906
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6914
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6920
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6928
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6934
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6942
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6948
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6957
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6961
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6966
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6970
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6977
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6982
		{
			yyVAL.str = ""
		}
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6986
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1089:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6992
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7005
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7016
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7020
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7026
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7032
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7038
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7045
		{
			yyVAL.str = ""
		}
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7049
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7054
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7058
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7064
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7072
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7080
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7088
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7096
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7101
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7113
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7124
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7233
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7237
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7243
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7256
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7260
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7266
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7279
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7283
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7287
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7292
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7296
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7302
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7309
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7315
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7324
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7331
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7342
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7346
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7352
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7361
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7365
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7369
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7374
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7378
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7382
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7386
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7392
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7427
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7453
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7459
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7471
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7477
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7483
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7489
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7495
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7503
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7507
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7513
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7527
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7541
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7545
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7549
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7553
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7557
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7561
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7565
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7571
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7586
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7590
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7601
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7605
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7610
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7614
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7620
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7624
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7630
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7639
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7648
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7654
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7658
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7664
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7675
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7681
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7699
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7717
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7735
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7751
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7755
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7764
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7776
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7785
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7797
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7807
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7817
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7828
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7838
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7849
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7857
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7868
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7875
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7885
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7898
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7906
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7915
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7924
		{
			yyVAL.str = ""
		}
	case 1197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7928
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7934
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7938
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7943
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7947
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7954
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7966
		{
			yyVAL.str = ""
		}
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7970
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1205:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7976
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7997
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8011
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8015
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8019
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8025
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8029
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8036
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8043
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8050
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8057
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8061
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8065
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8069
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8073
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8080
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8087
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8091
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8098
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8105
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8109
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8115
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8121
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8125
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8132
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8139
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8146
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8153
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8157
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8162
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8166
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8170
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8175
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8179
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8192
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8196
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8204
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8212
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8216
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8228
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8232
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8238
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8242
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8248
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8261
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8275
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8279
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8285
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8289
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8295
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8304
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8315
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8319
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8324
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8328
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8334
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8339
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8347
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8351
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8361
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8365
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8376
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8384
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8392
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8400
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8411
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8420
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8430
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8440
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8444
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8449
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8453
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8459
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8463
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8469
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8478
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8488
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8492
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8498
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8502
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8508
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8517
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8527
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8531
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8537
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8541
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8545
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8551
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8555
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8559
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8563
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8567
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8571
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8575
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8580
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8584
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8588
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8592
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8596
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8600
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8604
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8608
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8612
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8616
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8620
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8624
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8628
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8634
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8640
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8644
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8648
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8652
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8656
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8662
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8668
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8674
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8680
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8686
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8692
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8696
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8700
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8704
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8709
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8720
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8724
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8730
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8741
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8745
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8751
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8755
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8759
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8763
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8767
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8771
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8785
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8789
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8798
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8804
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8812
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8816
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8823
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8832
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8840
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8847
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8855
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8862
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8866
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8872
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8876
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8880
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8886
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8890
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8896
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8909
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8922
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8961
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9001
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9015
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9021
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9034
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9047
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9060
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9073
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9088
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9098
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9104
		{
			yyVAL.str = ""
		}
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9108
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9118
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9124
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9130
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9151
		{
			yyVAL.str = ""
		}
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9155
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9161
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9167
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9171
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9176
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9184
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9188
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9192
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9196
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9202
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9208
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9212
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9217
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9224
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9228
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9234
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9238
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9244
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9248
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9252
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9256
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9260
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9264
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9269
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9273
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9277
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9281
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9285
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9289
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9293
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9297
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9301
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9305
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9319
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9323
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9327
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9331
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9335
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9339
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9345
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9349
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9354
		{
			yyVAL.str = ""
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9358
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9364
		{
			yyVAL.str = ""
		}
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9368
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9374
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9391
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9398
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9405
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9412
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9419
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9428
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9434
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9440
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9444
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9448
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9452
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9456
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9461
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9468
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9472
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9476
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9481
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9485
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9489
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9493
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9497
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9502
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9506
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9511
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9515
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9531
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9537
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9541
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9545
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9549
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9553
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9557
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9561
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9565
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9569
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9573
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9577
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9581
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9585
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9591
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9595
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9599
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9603
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9607
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9611
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9615
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9619
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9623
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9627
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9669
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9673
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9677
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9682
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9690
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9694
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9698
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9702
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9706
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9716
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9720
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9724
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9728
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9732
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9736
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9740
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9744
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9757
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9763
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9772
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9781
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9792
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9802
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9812
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9821
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9831
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9841
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9851
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9860
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9870
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9874
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9879
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9883
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9889
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9893
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9899
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9908
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9920
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9937
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9954
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9967
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9980
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9992
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10006
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10021
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10036
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10053
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10068
		{
		}
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10075
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10079
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10083
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10089
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10093
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10097
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10101
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10107
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10111
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10115
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10121
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10129
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10139
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10143
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10150
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10155
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10159
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10164
		{
			yyVAL.str = ","
		}
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10168
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10173
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10177
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1570:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10182
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10189
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10215
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10227
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10239
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10250
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10261
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10272
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10282
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10292
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10303
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10314
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10325
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10336
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10347
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10358
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10369
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10380
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10391
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10402
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10413
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10424
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10435
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10446
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10457
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10481
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10490
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10499
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10508
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10517
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10528
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10537
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10547
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10556
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10565
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10574
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10583
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10595
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10606
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10619
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10631
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10654
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10690
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10703
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10716
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10728
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10737
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10745
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10753
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10766
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10775
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10786
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10797
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10806
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10818
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10828
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10838
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10847
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10858
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10867
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10877
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10886
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10895
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10905
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10909
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10915
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10919
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10938
		{
		}
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10940
		{
		}
	case 1717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10982
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10994
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10998
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11002
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11008
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11013
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11017
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11023
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11027
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11033
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11037
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11044
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11048
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11052
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11061
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11065
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11069
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11074
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11078
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11084
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11088
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11092
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11096
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11100
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11104
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11108
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11112
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11116
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11120
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11128
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11132
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11136
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11140
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11144
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11148
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11152
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11156
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11160
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11164
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11170
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11174
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11180
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11184
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11191
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11195
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11199
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11205
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11209
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11213
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11217
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11221
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11225
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11229
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11235
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11239
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11243
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11247
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11253
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11266
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11271
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11277
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11281
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11294
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11299
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11303
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11307
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11311
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11315
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11322
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11326
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11330
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11334
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11341
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11352
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11357
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11363
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11375
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11387
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11399
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11412
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11425
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11438
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11451
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11464
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11477
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11490
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11503
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11516
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11529
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11544
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11571
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11613
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11649
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11685
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11702
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11714
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11734
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11754
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11774
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11790
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11803
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11816
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11829
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11842
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11854
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11866
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11878
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11890
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11902
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11914
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11926
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11938
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11950
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11962
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11975
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11988
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12001
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12014
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12029
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12037
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12046
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12056
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12079
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12084
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12090
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12097
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12101
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12106
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12110
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12116
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12122
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12129
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12136
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12145
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12152
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12159
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12168
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12172
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12176
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12182
		{
		}
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12184
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12194
		{
			yyVAL.str = ""
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12198
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
