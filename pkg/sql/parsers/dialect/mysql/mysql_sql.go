// Code generated by goyacc -o mysql_sql.go -c mysql mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const DISTINCTROW = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const SUBQUERY_AS_EXPR = 57394
const LOWER_THAN_STRING = 57395
const ID = 57396
const AT_ID = 57397
const AT_AT_ID = 57398
const STRING = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const INTEGRAL = 57404
const HEX = 57405
const HEXNUM = 57406
const BIT_LITERAL = 57407
const FLOAT = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const LOWER_THAN_CHARSET = 57412
const CHARSET = 57413
const UNIQUE = 57414
const KEY = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const ASSIGNMENT = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const UNARY = 57439
const COLLATE = 57440
const BINARY = 57441
const UNDERSCORE_BINARY = 57442
const INTERVAL = 57443
const BEGIN = 57444
const START = 57445
const TRANSACTION = 57446
const COMMIT = 57447
const ROLLBACK = 57448
const WORK = 57449
const CONSISTENT = 57450
const SNAPSHOT = 57451
const CHAIN = 57452
const NO = 57453
const RELEASE = 57454
const BIT = 57455
const TINYINT = 57456
const SMALLINT = 57457
const MEDIUMINT = 57458
const INT = 57459
const INTEGER = 57460
const BIGINT = 57461
const INTNUM = 57462
const REAL = 57463
const DOUBLE = 57464
const FLOAT_TYPE = 57465
const DECIMAL = 57466
const NUMERIC = 57467
const DECIMAL_VALUE = 57468
const TIME = 57469
const TIMESTAMP = 57470
const DATETIME = 57471
const YEAR = 57472
const CHAR = 57473
const VARCHAR = 57474
const BOOL = 57475
const CHARACTER = 57476
const VARBINARY = 57477
const NCHAR = 57478
const TEXT = 57479
const TINYTEXT = 57480
const MEDIUMTEXT = 57481
const LONGTEXT = 57482
const BLOB = 57483
const TINYBLOB = 57484
const MEDIUMBLOB = 57485
const LONGBLOB = 57486
const JSON = 57487
const ENUM = 57488
const GEOMETRY = 57489
const POINT = 57490
const LINESTRING = 57491
const POLYGON = 57492
const GEOMETRYCOLLECTION = 57493
const MULTIPOINT = 57494
const MULTILINESTRING = 57495
const MULTIPOLYGON = 57496
const INT1 = 57497
const INT2 = 57498
const INT3 = 57499
const INT4 = 57500
const INT8 = 57501
const SQL_SMALL_RESULT = 57502
const SQL_BIG_RESULT = 57503
const SQL_BUFFER_RESULT = 57504
const CREATE = 57505
const ALTER = 57506
const DROP = 57507
const RENAME = 57508
const ANALYZE = 57509
const ADD = 57510
const SCHEMA = 57511
const TABLE = 57512
const INDEX = 57513
const VIEW = 57514
const TO = 57515
const IGNORE = 57516
const IF = 57517
const PRIMARY = 57518
const COLUMN = 57519
const CONSTRAINT = 57520
const SPATIAL = 57521
const FULLTEXT = 57522
const FOREIGN = 57523
const KEY_BLOCK_SIZE = 57524
const SHOW = 57525
const DESCRIBE = 57526
const EXPLAIN = 57527
const DATE = 57528
const ESCAPE = 57529
const REPAIR = 57530
const OPTIMIZE = 57531
const TRUNCATE = 57532
const MAXVALUE = 57533
const PARTITION = 57534
const REORGANIZE = 57535
const LESS = 57536
const THAN = 57537
const PROCEDURE = 57538
const TRIGGER = 57539
const STATUS = 57540
const VARIABLES = 57541
const ROLE = 57542
const PROXY = 57543
const AVG_ROW_LENGTH = 57544
const STORAGE = 57545
const DISK = 57546
const MEMORY = 57547
const CHECKSUM = 57548
const COMPRESSION = 57549
const DATA = 57550
const DIRECTORY = 57551
const DELAY_KEY_WRITE = 57552
const ENCRYPTION = 57553
const ENGINE = 57554
const MAX_ROWS = 57555
const MIN_ROWS = 57556
const PACK_KEYS = 57557
const ROW_FORMAT = 57558
const STATS_AUTO_RECALC = 57559
const STATS_PERSISTENT = 57560
const STATS_SAMPLE_PAGES = 57561
const DYNAMIC = 57562
const COMPRESSED = 57563
const REDUNDANT = 57564
const COMPACT = 57565
const FIXED = 57566
const COLUMN_FORMAT = 57567
const AUTO_RANDOM = 57568
const RESTRICT = 57569
const CASCADE = 57570
const ACTION = 57571
const PARTIAL = 57572
const SIMPLE = 57573
const CHECK = 57574
const ENFORCED = 57575
const RANGE = 57576
const LIST = 57577
const ALGORITHM = 57578
const LINEAR = 57579
const PARTITIONS = 57580
const SUBPARTITION = 57581
const SUBPARTITIONS = 57582
const TYPE = 57583
const ANY = 57584
const SOME = 57585
const PROPERTIES = 57586
const PARSER = 57587
const VISIBLE = 57588
const INVISIBLE = 57589
const BTREE = 57590
const HASH = 57591
const RTREE = 57592
const BSI = 57593
const ZONEMAP = 57594
const LEADING = 57595
const BOTH = 57596
const TRAILING = 57597
const UNKNOWN = 57598
const EXPIRE = 57599
const ACCOUNT = 57600
const UNLOCK = 57601
const DAY = 57602
const NEVER = 57603
const SECOND = 57604
const ASCII = 57605
const COALESCE = 57606
const COLLATION = 57607
const HOUR = 57608
const MICROSECOND = 57609
const MINUTE = 57610
const MONTH = 57611
const QUARTER = 57612
const REPEAT = 57613
const REVERSE = 57614
const ROW_COUNT = 57615
const WEEK = 57616
const REVOKE = 57617
const FUNCTION = 57618
const PRIVILEGES = 57619
const TABLESPACE = 57620
const EXECUTE = 57621
const SUPER = 57622
const GRANT = 57623
const OPTION = 57624
const REFERENCES = 57625
const REPLICATION = 57626
const SLAVE = 57627
const CLIENT = 57628
const USAGE = 57629
const RELOAD = 57630
const FILE = 57631
const TEMPORARY = 57632
const ROUTINE = 57633
const EVENT = 57634
const SHUTDOWN = 57635
const NULLX = 57636
const AUTO_INCREMENT = 57637
const APPROXNUM = 57638
const SIGNED = 57639
const UNSIGNED = 57640
const ZEROFILL = 57641
const USER = 57642
const IDENTIFIED = 57643
const CIPHER = 57644
const ISSUER = 57645
const X509 = 57646
const SUBJECT = 57647
const SAN = 57648
const REQUIRE = 57649
const SSL = 57650
const NONE = 57651
const PASSWORD = 57652
const MAX_QUERIES_PER_HOUR = 57653
const MAX_UPDATES_PER_HOUR = 57654
const MAX_CONNECTIONS_PER_HOUR = 57655
const MAX_USER_CONNECTIONS = 57656
const FORMAT = 57657
const VERBOSE = 57658
const CONNECTION = 57659
const LOAD = 57660
const INFILE = 57661
const TERMINATED = 57662
const OPTIONALLY = 57663
const ENCLOSED = 57664
const ESCAPED = 57665
const STARTING = 57666
const LINES = 57667
const DATABASES = 57668
const TABLES = 57669
const EXTENDED = 57670
const FULL = 57671
const PROCESSLIST = 57672
const FIELDS = 57673
const COLUMNS = 57674
const OPEN = 57675
const ERRORS = 57676
const WARNINGS = 57677
const INDEXES = 57678
const NAMES = 57679
const GLOBAL = 57680
const SESSION = 57681
const ISOLATION = 57682
const LEVEL = 57683
const READ = 57684
const WRITE = 57685
const ONLY = 57686
const REPEATABLE = 57687
const COMMITTED = 57688
const UNCOMMITTED = 57689
const SERIALIZABLE = 57690
const LOCAL = 57691
const EXCEPT = 57692
const CURRENT_TIMESTAMP = 57693
const DATABASE = 57694
const CURRENT_TIME = 57695
const LOCALTIME = 57696
const LOCALTIMESTAMP = 57697
const UTC_DATE = 57698
const UTC_TIME = 57699
const UTC_TIMESTAMP = 57700
const REPLACE = 57701
const CONVERT = 57702
const SEPARATOR = 57703
const CURRENT_DATE = 57704
const CURRENT_USER = 57705
const CURRENT_ROLE = 57706
const SECOND_MICROSECOND = 57707
const MINUTE_MICROSECOND = 57708
const MINUTE_SECOND = 57709
const HOUR_MICROSECOND = 57710
const HOUR_SECOND = 57711
const HOUR_MINUTE = 57712
const DAY_MICROSECOND = 57713
const DAY_SECOND = 57714
const DAY_MINUTE = 57715
const DAY_HOUR = 57716
const YEAR_MONTH = 57717
const SQL_TSI_HOUR = 57718
const SQL_TSI_DAY = 57719
const SQL_TSI_WEEK = 57720
const SQL_TSI_MONTH = 57721
const SQL_TSI_QUARTER = 57722
const SQL_TSI_YEAR = 57723
const SQL_TSI_SECOND = 57724
const SQL_TSI_MINUTE = 57725
const RECURSIVE = 57726
const CONFIG = 57727
const MATCH = 57728
const AGAINST = 57729
const BOOLEAN = 57730
const LANGUAGE = 57731
const WITH = 57732
const QUERY = 57733
const EXPANSION = 57734
const ADDDATE = 57735
const BIT_AND = 57736
const BIT_OR = 57737
const BIT_XOR = 57738
const CAST = 57739
const COUNT = 57740
const APPROX_COUNT_DISTINCT = 57741
const APPROX_PERCENTILE = 57742
const CURDATE = 57743
const CURTIME = 57744
const DATE_ADD = 57745
const DATE_SUB = 57746
const EXTRACT = 57747
const GROUP_CONCAT = 57748
const MAX = 57749
const MID = 57750
const MIN = 57751
const NOW = 57752
const POSITION = 57753
const SESSION_USER = 57754
const STD = 57755
const STDDEV = 57756
const STDDEV_POP = 57757
const STDDEV_SAMP = 57758
const SUBDATE = 57759
const SUBSTR = 57760
const SUBSTRING = 57761
const SUM = 57762
const SYSDATE = 57763
const SYSTEM_USER = 57764
const TRANSLATE = 57765
const TRIM = 57766
const VARIANCE = 57767
const VAR_POP = 57768
const VAR_SAMP = 57769
const AVG = 57770
const ROW = 57771
const OUTFILE = 57772
const HEADER = 57773
const MAX_FILE_SIZE = 57774
const FORCE_QUOTE = 57775
const UNUSED = 57776

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"HEXNUM",
	"BIT_LITERAL",
	"FLOAT",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6491

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	17, 355,
	-2, 336,
	-1, 58,
	188, 503,
	-2, 539,
	-1, 67,
	215, 245,
	216, 245,
	-2, 265,
	-1, 318,
	58, 1316,
	453, 1316,
	-2, 92,
	-1, 337,
	58, 664,
	453, 664,
	-2, 501,
	-1, 338,
	58, 494,
	453, 494,
	-2, 502,
	-1, 344,
	17, 356,
	-2, 319,
	-1, 402,
	88, 1197,
	99, 1197,
	118, 1197,
	-2, 1024,
	-1, 577,
	17, 356,
	-2, 319,
	-1, 599,
	53, 1345,
	-2, 1352,
	-1, 607,
	53, 1346,
	-2, 1360,
	-1, 609,
	53, 1342,
	-2, 1362,
	-1, 610,
	53, 1343,
	-2, 1363,
	-1, 615,
	53, 1344,
	-2, 1369,
	-1, 616,
	53, 1347,
	-2, 1370,
	-1, 617,
	53, 1348,
	-2, 1371,
	-1, 618,
	53, 790,
	-2, 1372,
	-1, 619,
	53, 791,
	-2, 1373,
	-1, 620,
	53, 792,
	-2, 1374,
	-1, 622,
	53, 1349,
	-2, 1376,
	-1, 623,
	53, 809,
	-2, 1377,
	-1, 624,
	53, 808,
	-2, 1378,
	-1, 627,
	53, 1350,
	-2, 1381,
	-1, 628,
	53, 1351,
	-2, 1382,
	-1, 634,
	53, 871,
	-2, 1197,
	-1, 635,
	53, 884,
	-2, 1261,
	-1, 636,
	53, 895,
	-2, 1321,
	-1, 637,
	53, 897,
	-2, 1331,
	-1, 638,
	53, 885,
	-2, 1336,
	-1, 639,
	53, 893,
	-2, 1340,
	-1, 640,
	53, 874,
	-2, 1341,
	-1, 792,
	1, 529,
	55, 529,
	452, 529,
	-2, 536,
	-1, 919,
	17, 355,
	-2, 722,
	-1, 965,
	118, 1034,
	-2, 1032,
	-1, 967,
	118, 443,
	-2, 1029,
	-1, 968,
	118, 444,
	-2, 1030,
	-1, 1164,
	1, 530,
	55, 530,
	452, 530,
	-2, 536,
	-1, 1222,
	53, 937,
	-2, 1338,
	-1, 1223,
	53, 938,
	-2, 1339,
	-1, 1619,
	74, 536,
	114, 536,
	148, 536,
	151, 536,
	-2, 576,
	-1, 1621,
	249, 689,
	-2, 670,
	-1, 1741,
	74, 536,
	114, 536,
	148, 536,
	151, 536,
	-2, 577,
	-1, 1769,
	249, 689,
	-2, 671,
	-1, 2161,
	54, 551,
	55, 551,
	-2, 536,
	-1, 2165,
	54, 551,
	55, 551,
	-2, 536,
	-1, 2177,
	54, 555,
	55, 555,
	-2, 536,
	-1, 2180,
	54, 556,
	55, 556,
	-2, 536,
}

const yyPrivate = 57344

const yyLast = 21840

var yyAct = [...]int{
	782, 2165, 1225, 2167, 2164, 2172, 2138, 643, 2112, 1814,
	771, 641, 2002, 661, 2083, 2127, 1781, 2064, 1978, 2065,
	469, 1737, 1955, 530, 85, 1613, 1812, 294, 1151, 847,
	1981, 1910, 1813, 564, 1804, 1966, 88, 465, 1883, 305,
	1507, 85, 307, 671, 53, 1226, 298, 19, 400, 1680,
	339, 339, 1803, 1398, 515, 1799, 1503, 588, 1770, 1531,
	1699, 830, 1491, 84, 1708, 598, 1540, 1704, 1375, 1519,
	53, 1512, 1666, 1508, 401, 724, 947, 1558, 1547, 1696,
	418, 1157, 642, 1557, 85, 1443, 300, 572, 854, 962,
	965, 956, 948, 957, 1310, 1405, 1296, 1213, 297, 12,
	652, 295, 6, 296, 5, 520, 823, 766, 3, 1369,
	1165, 52, 784, 1745, 767, 1240, 361, 1224, 345, 407,
	409, 344, 741, 431, 591, 53, 1227, 442, 19, 799,
	503, 827, 800, 801, 287, 1133, 1124, 467, 290, 849,
	856, 886, 417, 309, 556, 573, 758, 392, 310, 311,
	453, 1140, 482, 81, 1828, 1733, 1612, 779, 950, 590,
	80, 415, 540, 2030, 1136, 301, 80, 1351, 23, 40,
	24, 1492, 542, 1370, 346, 2019, 1358, 513, 413, 412,
	12, 357, 536, 6, 78, 5, 817, 80, 408, 502,
	428, 379, 80, 403, 341, 1361, 405, 803, 80, 80,
	23, 40, 24, 812, 813, 531, 532, 76, 411, 774,
	497, 721, 529, 76, 718, 528, 531, 532, 2052, 1468,
	543, 2068, 2069, 493, 2087, 1908, 2050, 769, 1911, 1912,
	1913, 1914, 1495, 366, 720, 1990, 1496, 1993, 1497, 76,
	1831, 1614, 393, 778, 445, 76, 76, 1338, 436, 404,
	1520, 1521, 1522, 1523, 1378, 1376, 1373, 1377, 1379, 1541,
	1372, 1371, 1544, 824, 1136, 1378, 1376, 1524, 1377, 1379,
	1138, 380, 1882, 1790, 1789, 484, 1786, 314, 314, 495,
	496, 1730, 494, 483, 1609, 1899, 1690, 85, 435, 1691,
	2078, 1687, 359, 1411, 1217, 1218, 759, 434, 2029, 1889,
	85, 2157, 356, 355, 1381, 1382, 1383, 1384, 410, 2054,
	2173, 1543, 2092, 2049, 2027, 2004, 1216, 1217, 1218, 2099,
	2067, 1877, 761, 351, 1980, 2148, 1214, 1967, 1968, 1969,
	1971, 1970, 1868, 1846, 2130, 53, 53, 409, 445, 449,
	2000, 2001, 470, 2004, 1845, 343, 2056, 2057, 2010, 552,
	475, 527, 526, 2174, 491, 2168, 2139, 1834, 1872, 430,
	414, 1359, 2032, 2033, 537, 1444, 516, 541, 1988, 479,
	1355, 1516, 1187, 433, 1688, 1144, 786, 492, 518, 733,
	734, 1610, 299, 1396, 371, 1706, 1705, 1185, 1184, 339,
	508, 514, 447, 446, 1183, 401, 401, 401, 546, 815,
	339, 339, 760, 544, 545, 408, 517, 384, 519, 816,
	1182, 814, 381, 354, 1559, 382, 2152, 418, 474, 2116,
	594, 594, 1484, 350, 1840, 1498, 838, 1408, 555, 1349,
	438, 439, 2131, 723, 569, 1348, 1337, 1570, 1567, 1568,
	1569, 1331, 1940, 1564, 1177, 1563, 1562, 1560, 575, 738,
	1149, 435, 85, 85, 85, 85, 386, 385, 373, 1118,
	742, 372, 737, 755, 867, 593, 593, 522, 726, 571,
	736, 448, 432, 53, 534, 358, 719, 904, 1486, 339,
	339, 435, 339, 1517, 53, 521, 447, 446, 2134, 2125,
	772, 505, 1532, 440, 1979, 523, 1410, 554, 557, 2055,
	339, 339, 1561, 470, 756, 499, 2031, 1378, 1376, 558,
	1377, 1379, 2014, 531, 532, 1135, 339, 1492, 339, 1215,
	792, 531, 532, 1333, 85, 576, 578, 1485, 405, 577,
	825, 507, 551, 1189, 1159, 1689, 1686, 807, 488, 791,
	1870, 339, 562, 563, 1869, 1122, 1139, 481, 2128, 2129,
	1873, 1874, 781, 339, 401, 785, 339, 437, 1352, 805,
	1591, 79, 1311, 796, 1134, 1367, 489, 79, 787, 1229,
	1228, 524, 839, 581, 582, 583, 584, 585, 587, 729,
	716, 404, 339, 339, 846, 85, 789, 418, 79, 574,
	855, 861, 808, 79, 864, 371, 793, 1863, 795, 79,
	79, 533, 831, 535, 794, 1879, 850, 776, 831, 831,
	804, 1878, 754, 1565, 1566, 777, 314, 743, 744, 745,
	746, 1670, 851, 788, 848, 1738, 762, 566, 566, 770,
	1513, 1516, 797, 798, 1665, 1387, 780, 559, 560, 561,
	1311, 868, 1449, 1418, 486, 775, 863, 861, 809, 921,
	1941, 1943, 1944, 1945, 1942, 1234, 487, 490, 525, 1303,
	2163, 790, 2144, 802, 841, 74, 485, 2109, 2093, 373,
	826, 383, 372, 1301, 1302, 1300, 2147, 376, 862, 863,
	861, 2039, 1951, 421, 426, 427, 1593, 1986, 1985, 844,
	919, 1949, 920, 1957, 836, 837, 821, 862, 863, 861,
	928, 822, 1723, 840, 833, 834, 835, 314, 842, 773,
	907, 908, 909, 910, 911, 904, 930, 2146, 1950, 371,
	1935, 954, 954, 959, 843, 1934, 845, 1948, 2088, 852,
	922, 923, 924, 925, 1431, 862, 863, 861, 1722, 1933,
	855, 406, 1930, 1517, 387, 314, 1924, 967, 1510, 1388,
	1947, 1921, 1511, 1514, 926, 1237, 1452, 1920, 408, 1451,
	862, 863, 861, 968, 409, 1239, 944, 2061, 894, 1937,
	1148, 961, 1886, 1829, 53, 1984, 1822, 2077, 1430, 1821,
	314, 1820, 862, 863, 861, 2060, 1946, 85, 85, 862,
	863, 861, 1819, 373, 1816, 1676, 372, 862, 863, 861,
	862, 863, 861, 294, 1515, 1936, 1147, 1675, 1674, 1179,
	314, 1673, 1906, 1132, 953, 1480, 1120, 2177, 339, 938,
	727, 850, 1956, 1152, 1153, 370, 1154, 1156, 1119, 862,
	863, 861, 408, 374, 862, 863, 861, 851, 2021, 339,
	423, 424, 425, 960, 2008, 2007, 405, 912, 913, 905,
	906, 907, 908, 909, 910, 911, 904, 946, 594, 1117,
	85, 1894, 1938, 1931, 966, 1927, 1209, 1926, 1211, 1116,
	1925, 1884, 1168, 1169, 1170, 862, 863, 861, 1865, 831,
	831, 831, 1129, 862, 863, 861, 1830, 1235, 1236, 1399,
	1736, 1180, 902, 912, 913, 905, 906, 907, 908, 909,
	910, 911, 904, 593, 1734, 1171, 1166, 1206, 1207, 1208,
	1683, 1143, 944, 1529, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1823, 1528, 1232, 1305,
	1306, 1173, 1202, 1175, 1716, 1527, 1219, 1174, 802, 1176,
	1172, 1275, 1320, 471, 472, 473, 1205, 1715, 862, 863,
	861, 1526, 2036, 1146, 1322, 1145, 862, 863, 861, 940,
	901, 1186, 900, 1714, 728, 1190, 1191, 1192, 2155, 862,
	863, 861, 1195, 2035, 1196, 1312, 2015, 1315, 1414, 2182,
	1599, 1964, 1203, 1901, 1642, 862, 863, 861, 368, 1580,
	369, 379, 2176, 2175, 1900, 367, 365, 364, 375, 1304,
	377, 378, 862, 863, 861, 1142, 2158, 1230, 1231, 2133,
	1233, 915, 1724, 918, 1721, 1298, 1270, 1271, 1272, 1273,
	1274, 1720, 1325, 1280, 1281, 1282, 1283, 916, 917, 914,
	1590, 903, 902, 912, 913, 905, 906, 907, 908, 909,
	910, 911, 904, 2154, 2153, 314, 1313, 360, 1336, 1314,
	1316, 1317, 862, 863, 861, 862, 863, 861, 1695, 1321,
	1458, 1323, 1619, 1414, 1457, 1601, 1194, 1454, 1546, 1630,
	1545, 348, 1324, 905, 906, 907, 908, 909, 910, 911,
	904, 347, 1142, 2142, 1649, 1653, 1655, 1657, 1659, 1660,
	1662, 1461, 1570, 1567, 1568, 1569, 1142, 2141, 1644, 1645,
	1646, 1647, 1628, 1629, 1650, 1459, 1631, 1456, 1632, 1633,
	1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1648, 1339,
	1455, 580, 435, 1453, 1584, 1414, 1652, 1654, 1656, 1658,
	1661, 742, 1583, 862, 863, 861, 1423, 339, 2115, 2114,
	339, 1896, 2075, 435, 1420, 339, 862, 863, 861, 1413,
	1364, 1395, 1354, 1582, 862, 863, 861, 1643, 871, 872,
	873, 874, 875, 876, 877, 869, 1319, 1581, 1343, 1896,
	2070, 1344, 1318, 1773, 1346, 862, 863, 861, 1393, 1198,
	2058, 1577, 2047, 2046, 1896, 2025, 757, 1576, 339, 862,
	863, 861, 579, 1362, 1363, 1326, 785, 1620, 85, 85,
	1896, 2024, 1404, 862, 863, 861, 1575, 1136, 1776, 862,
	863, 861, 1366, 1602, 1771, 1386, 1896, 2023, 1407, 1784,
	1785, 1896, 2022, 498, 1772, 2178, 1574, 477, 862, 863,
	861, 1573, 2013, 2012, 1962, 1963, 1419, 1401, 1402, 1341,
	1962, 1961, 405, 53, 1342, 1556, 19, 1389, 862, 863,
	861, 1350, 1356, 862, 863, 861, 1905, 1904, 1777, 2124,
	1555, 1903, 1902, 1365, 1554, 1896, 1895, 862, 863, 861,
	1307, 1201, 1604, 1415, 479, 1385, 1416, 1417, 1166, 1390,
	1332, 1391, 862, 863, 861, 1308, 862, 863, 861, 725,
	1394, 1198, 862, 863, 861, 1397, 1400, 1150, 12, 1414,
	1585, 6, 1438, 5, 1414, 1571, 1392, 476, 1403, 1414,
	1422, 477, 1409, 586, 1441, 1442, 1425, 1426, 1427, 1428,
	1429, 1412, 1433, 1414, 1421, 859, 1434, 1435, 1436, 1437,
	954, 1121, 1472, 954, 1201, 1340, 1475, 1783, 553, 1509,
	1335, 1334, 478, 919, 1329, 1328, 855, 80, 339, 1201,
	1200, 2118, 339, 339, 1446, 2100, 339, 1450, 1478, 1651,
	1142, 1141, 731, 730, 1779, 2097, 2095, 1353, 857, 435,
	1462, 2038, 53, 831, 1479, 1469, 1976, 1960, 1506, 831,
	1958, 85, 1953, 1915, 1440, 479, 1778, 1780, 1698, 1467,
	1892, 1891, 1890, 1887, 76, 1474, 1876, 1439, 1861, 1800,
	1797, 1298, 1796, 1700, 1448, 589, 1709, 1471, 85, 1551,
	1712, 408, 1678, 1671, 1299, 76, 1368, 1345, 1327, 1464,
	1530, 1463, 1199, 1470, 1473, 450, 1188, 1476, 1477, 1481,
	1181, 945, 943, 942, 1482, 455, 458, 459, 460, 456,
	941, 457, 461, 1525, 1786, 939, 887, 1533, 1534, 936,
	935, 933, 932, 339, 931, 1483, 1774, 929, 899, 339,
	1553, 898, 897, 1490, 896, 895, 1535, 1536, 2145, 893,
	1572, 892, 1598, 891, 890, 889, 888, 1578, 1579, 885,
	884, 455, 458, 459, 460, 456, 1595, 457, 461, 339,
	883, 882, 1597, 881, 1550, 1592, 880, 879, 1537, 1551,
	1596, 85, 878, 739, 722, 480, 1125, 1126, 2122, 1888,
	1664, 1589, 1162, 903, 902, 912, 913, 905, 906, 907,
	908, 909, 910, 911, 904, 308, 1586, 1588, 2105, 2103,
	2066, 1380, 339, 1197, 339, 1594, 1128, 500, 1131, 751,
	1618, 1130, 1600, 53, 752, 1603, 1617, 753, 748, 459,
	460, 747, 1694, 903, 902, 912, 913, 905, 906, 907,
	908, 909, 910, 911, 904, 1679, 749, 1668, 725, 2162,
	1330, 750, 1608, 2080, 539, 538, 340, 1167, 1493, 1487,
	1489, 1663, 504, 1667, 1627, 1667, 1669, 1500, 1672, 1152,
	1153, 1160, 811, 1677, 1693, 1832, 455, 458, 459, 460,
	456, 1499, 457, 461, 853, 1606, 1685, 339, 339, 463,
	1115, 85, 1607, 1684, 1229, 1228, 510, 511, 506, 2119,
	2043, 435, 2041, 1742, 1995, 1994, 1717, 1992, 1918, 1916,
	1506, 1735, 1692, 1710, 1707, 1713, 1616, 1615, 1549, 1719,
	509, 348, 1701, 1702, 1703, 347, 1548, 1406, 831, 725,
	1731, 347, 1424, 1718, 2107, 2106, 462, 1347, 286, 2106,
	2107, 362, 1787, 1, 1726, 1276, 1805, 1807, 512, 1805,
	1805, 1729, 735, 420, 444, 732, 1739, 1767, 443, 435,
	566, 441, 75, 1309, 1241, 672, 566, 949, 955, 1792,
	1793, 1954, 2079, 2111, 2037, 2082, 660, 644, 1987, 1494,
	1907, 1806, 1801, 1989, 1909, 1360, 1791, 1825, 1357, 501,
	1794, 1795, 1465, 1466, 684, 675, 1605, 1811, 934, 677,
	717, 1808, 1809, 422, 1798, 1810, 674, 1802, 324, 1817,
	323, 327, 319, 1542, 349, 419, 363, 1881, 1611, 1788,
	1711, 1697, 315, 1238, 2171, 1836, 1818, 2161, 2137, 2117,
	2003, 2156, 2048, 334, 2098, 1826, 2091, 1999, 1833, 566,
	312, 1681, 818, 547, 390, 1977, 740, 1518, 1374, 1824,
	1158, 1137, 768, 313, 2028, 1959, 352, 1161, 339, 353,
	1164, 1163, 1220, 870, 1297, 1864, 937, 85, 927, 596,
	1447, 651, 645, 1539, 1839, 1538, 1782, 806, 26, 464,
	860, 2120, 963, 1837, 1838, 673, 1841, 1842, 1843, 1844,
	1787, 1807, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1880, 1866, 1862, 87,
	1178, 964, 1996, 1827, 1727, 1728, 1885, 2084, 659, 1919,
	658, 1587, 657, 656, 454, 1893, 903, 902, 912, 913,
	905, 906, 907, 908, 909, 910, 911, 904, 452, 451,
	1952, 1898, 903, 902, 912, 913, 905, 906, 907, 908,
	909, 910, 911, 904, 304, 303, 53, 858, 2063, 1917,
	2062, 2017, 2018, 1732, 1875, 1939, 470, 1932, 435, 1871,
	1867, 435, 435, 435, 1897, 2009, 1460, 435, 1741, 1922,
	1923, 1740, 317, 316, 320, 1928, 1929, 1768, 1769, 1775,
	322, 1626, 1622, 1624, 1965, 1625, 1997, 1973, 1974, 1975,
	1725, 1623, 326, 339, 339, 1972, 1983, 1621, 1504, 1982,
	1505, 1502, 1501, 1127, 1123, 951, 763, 958, 1998, 429,
	783, 1991, 903, 902, 912, 913, 905, 906, 907, 908,
	909, 910, 911, 904, 85, 82, 2005, 2006, 302, 1204,
	11, 435, 18, 17, 16, 903, 902, 912, 913, 905,
	906, 907, 908, 909, 910, 911, 904, 435, 48, 47,
	46, 45, 15, 2011, 8, 44, 43, 2020, 42, 14,
	13, 38, 36, 848, 35, 34, 33, 32, 31, 30,
	37, 29, 28, 2026, 2016, 1681, 27, 9, 57, 56,
	55, 54, 20, 2034, 2042, 2040, 2044, 2045, 321, 325,
	764, 21, 329, 765, 2051, 2053, 331, 332, 333, 22,
	63, 335, 336, 62, 61, 60, 2059, 59, 25, 2086,
	10, 7, 4, 2, 0, 1445, 0, 0, 2090, 0,
	0, 0, 2085, 2071, 2072, 2073, 2074, 0, 0, 0,
	0, 0, 2094, 0, 2096, 2089, 903, 902, 912, 913,
	905, 906, 907, 908, 909, 910, 911, 904, 0, 0,
	2101, 0, 0, 2104, 2102, 0, 0, 0, 2113, 2076,
	0, 0, 2108, 0, 0, 0, 435, 0, 435, 2110,
	0, 0, 0, 0, 0, 772, 2121, 772, 2123, 0,
	0, 0, 2126, 0, 0, 0, 2086, 2136, 0, 0,
	0, 0, 0, 2132, 0, 435, 0, 0, 0, 2085,
	2135, 0, 2140, 0, 772, 2143, 0, 0, 0, 0,
	0, 2113, 2149, 0, 0, 0, 0, 0, 0, 0,
	566, 566, 0, 2159, 0, 0, 0, 0, 0, 0,
	0, 2160, 0, 0, 0, 0, 0, 0, 0, 2170,
	2169, 0, 0, 0, 0, 0, 0, 0, 0, 2180,
	2151, 2181, 2179, 0, 2170, 1078, 1065, 0, 1027, 1080,
	1000, 1015, 1088, 1017, 1018, 1052, 979, 1036, 211, 1013,
	971, 1003, 1004, 973, 1010, 974, 1001, 1029, 156, 999,
	1068, 1039, 181, 1086, 0, 0, 240, 195, 0, 0,
	1032, 1070, 1034, 1057, 1026, 1053, 987, 1046, 1081, 1014,
	1050, 1082, 0, 0, 0, 0, 0, 471, 472, 473,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	1049, 1075, 1012, 0, 141, 1079, 1033, 1051, 0, 972,
	1047, 0, 977, 980, 1087, 1073, 1007, 1008, 0, 0,
	0, 0, 0, 0, 0, 1030, 1035, 1054, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1005, 0,
	1043, 0, 0, 0, 982, 978, 0, 1028, 0, 130,
	245, 259, 139, 236, 272, 144, 243, 135, 210, 232,
	132, 257, 242, 192, 175, 176, 131, 0, 227, 154,
	167, 151, 208, 0, 1077, 284, 150, 275, 981, 267,
	134, 1114, 266, 207, 254, 258, 193, 187, 133, 256,
	191, 186, 179, 158, 171, 220, 185, 221, 172, 197,
	196, 198, 1098, 1099, 1100, 1101, 1102, 1110, 1111, 0,
	986, 0, 1006, 1055, 0, 970, 1064, 1071, 1025, 269,
	1074, 1022, 1021, 1105, 0, 1104, 244, 1106, 1107, 180,
	1069, 1002, 1011, 285, 1009, 230, 213, 1076, 1042, 218,
	228, 183, 255, 222, 260, 246, 268, 1058, 223, 126,
	247, 153, 194, 136, 137, 149, 155, 157, 159, 160,
	203, 204, 216, 235, 248, 249, 250, 152, 145, 229,
	146, 169, 147, 127, 237, 148, 128, 217, 253, 1103,
	166, 225, 190, 129, 189, 219, 252, 251, 276, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 0, 1113, 281, 163, 969, 264, 0, 209, 1066,
	975, 985, 983, 1019, 1044, 1045, 205, 280, 1060, 1063,
	1061, 1089, 233, 0, 0, 0, 0, 0, 174, 215,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 241, 262, 274, 265, 1020, 993,
	1031, 273, 996, 994, 1059, 995, 1048, 1091, 199, 200,
	201, 202, 1016, 0, 143, 1040, 1024, 1092, 1093, 1094,
	1095, 1096, 1097, 998, 1072, 162, 168, 0, 170, 142,
	214, 165, 271, 177, 206, 173, 238, 178, 184, 226,
	270, 212, 231, 140, 261, 239, 188, 164, 992, 997,
	991, 1037, 1038, 1083, 1084, 1085, 1056, 984, 1067, 988,
	990, 989, 903, 902, 912, 913, 905, 906, 907, 908,
	909, 910, 911, 904, 0, 0, 0, 0, 0, 0,
	0, 1062, 0, 1041, 125, 0, 182, 1090, 224, 161,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 653, 0, 0, 0,
	156, 0, 0, 0, 181, 0, 0, 0, 240, 195,
	0, 0, 0, 0, 695, 701, 1108, 1109, 277, 278,
	279, 263, 0, 0, 0, 646, 0, 0, 0, 597,
	686, 685, 662, 0, 0, 0, 138, 663, 0, 668,
	0, 664, 667, 665, 666, 0, 634, 0, 0, 0,
	0, 0, 595, 650, 0, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 647, 648, 0, 0,
	0, 0, 681, 0, 649, 0, 0, 683, 0, 670,
	0, 130, 245, 259, 139, 236, 272, 144, 243, 135,
	210, 232, 132, 257, 242, 192, 175, 176, 131, 0,
	227, 154, 167, 151, 208, 669, 679, 639, 150, 637,
	678, 267, 134, 0, 266, 207, 254, 258, 193, 187,
	133, 256, 191, 186, 179, 158, 171, 220, 185, 221,
	172, 197, 196, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 0,
	0, 269, 0, 0, 693, 0, 0, 0, 244, 0,
	0, 180, 0, 0, 0, 640, 0, 230, 213, 704,
	0, 218, 228, 183, 255, 222, 260, 246, 268, 0,
	223, 126, 247, 153, 194, 136, 137, 149, 155, 157,
	159, 160, 203, 204, 216, 235, 248, 249, 250, 152,
	145, 229, 146, 169, 147, 127, 237, 148, 128, 217,
	253, 0, 166, 225, 190, 129, 189, 219, 252, 251,
	276, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 1277, 1279, 281, 163, 0, 264, 691,
	209, 703, 687, 688, 689, 692, 696, 697, 635, 638,
	698, 700, 702, 705, 233, 0, 0, 0, 0, 0,
	174, 215, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 241, 262, 274, 636,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 682,
	199, 200, 201, 202, 694, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 168, 0,
	170, 142, 214, 165, 271, 177, 206, 173, 238, 178,
	184, 226, 270, 212, 231, 140, 261, 239, 188, 164,
	711, 690, 710, 712, 713, 709, 714, 715, 699, 655,
	0, 707, 706, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 182, 0,
	224, 161, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 104, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 0, 0,
	277, 278, 279, 263, 80, 0, 680, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 653, 0, 0, 0, 156, 0, 0, 0,
	181, 0, 0, 0, 240, 195, 0, 0, 0, 0,
	695, 701, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 646, 0, 0, 0, 597, 686, 685, 662, 0,
	0, 0, 138, 663, 0, 668, 0, 664, 667, 665,
	666, 0, 634, 0, 0, 0, 0, 0, 595, 650,
	0, 654, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 647, 648, 0, 0, 0, 0, 681, 0,
	649, 0, 0, 683, 0, 670, 0, 130, 245, 259,
	139, 236, 272, 144, 243, 135, 210, 232, 132, 257,
	242, 192, 175, 176, 131, 0, 227, 154, 167, 151,
	208, 669, 679, 639, 150, 637, 678, 267, 134, 0,
	266, 207, 254, 258, 193, 187, 133, 256, 191, 186,
	179, 158, 171, 220, 185, 221, 172, 197, 196, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 676, 0, 0, 269, 0, 0,
	693, 0, 0, 0, 244, 0, 0, 180, 0, 0,
	0, 640, 0, 230, 213, 704, 0, 218, 228, 183,
	255, 222, 260, 246, 268, 0, 223, 126, 247, 153,
	194, 136, 137, 149, 155, 157, 159, 160, 203, 204,
	216, 235, 248, 249, 250, 152, 145, 229, 146, 169,
	147, 127, 237, 148, 128, 217, 253, 0, 166, 225,
	190, 129, 189, 219, 252, 251, 276, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 163, 0, 264, 691, 209, 703, 687, 688,
	689, 692, 696, 697, 635, 638, 698, 700, 702, 705,
	233, 0, 0, 0, 0, 0, 174, 215, 0, 234,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 262, 274, 636, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 682, 199, 200, 201, 202,
	694, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 168, 0, 170, 142, 214, 165,
	271, 177, 206, 173, 238, 178, 184, 226, 270, 212,
	231, 140, 261, 239, 188, 164, 711, 690, 710, 712,
	713, 709, 714, 715, 699, 655, 0, 707, 706, 708,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 182, 79, 224, 161, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 104, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 680, 0, 277, 278, 279, 263,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 156, 832, 0, 0, 181, 0,
	0, 0, 240, 195, 0, 0, 0, 0, 695, 701,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 646,
	0, 0, 0, 597, 686, 685, 662, 0, 0, 0,
	138, 663, 0, 668, 0, 664, 667, 665, 666, 0,
	634, 0, 0, 0, 0, 0, 595, 650, 0, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	647, 648, 0, 0, 0, 0, 681, 0, 649, 0,
	0, 829, 0, 670, 0, 130, 245, 259, 139, 236,
	272, 144, 243, 135, 210, 232, 132, 257, 242, 192,
	175, 176, 131, 0, 227, 154, 167, 151, 208, 669,
	679, 639, 150, 637, 678, 267, 134, 0, 266, 207,
	254, 258, 193, 187, 133, 256, 191, 186, 179, 158,
	171, 220, 185, 221, 172, 197, 196, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 676, 0, 0, 269, 0, 0, 693, 0,
	0, 0, 244, 0, 0, 180, 0, 0, 0, 640,
	0, 230, 213, 704, 0, 218, 228, 183, 255, 222,
	260, 246, 268, 0, 223, 126, 247, 153, 194, 136,
	137, 149, 155, 157, 159, 160, 203, 204, 216, 235,
	248, 249, 250, 152, 145, 229, 146, 169, 147, 127,
	237, 148, 128, 217, 253, 0, 166, 225, 190, 129,
	189, 219, 252, 251, 276, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	163, 0, 264, 691, 209, 703, 687, 688, 689, 692,
	696, 697, 635, 638, 698, 700, 702, 705, 233, 0,
	0, 0, 0, 0, 174, 215, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	241, 262, 274, 636, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 682, 199, 200, 201, 202, 694, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 168, 0, 170, 142, 214, 165, 271, 177,
	206, 173, 238, 178, 184, 226, 270, 212, 231, 140,
	261, 239, 188, 164, 711, 690, 710, 712, 713, 709,
	714, 715, 699, 655, 0, 707, 706, 708, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 182, 0, 224, 161, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 104, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 680, 0, 277, 278, 279, 263, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 653, 0,
	0, 0, 156, 2150, 0, 0, 181, 0, 0, 0,
	240, 195, 0, 0, 0, 0, 695, 701, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 646, 0, 0,
	0, 597, 686, 685, 662, 0, 0, 0, 138, 663,
	0, 668, 0, 664, 667, 665, 666, 0, 634, 0,
	0, 0, 0, 0, 595, 650, 0, 654, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 647, 648,
	0, 0, 0, 0, 681, 0, 649, 0, 0, 683,
	0, 670, 0, 130, 245, 259, 139, 236, 272, 144,
	243, 135, 210, 232, 132, 257, 242, 192, 175, 176,
	131, 0, 227, 154, 167, 151, 208, 669, 679, 639,
	150, 637, 678, 267, 134, 0, 266, 207, 254, 258,
	193, 187, 133, 256, 191, 186, 179, 158, 171, 220,
	185, 221, 172, 197, 196, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 269, 0, 0, 693, 0, 0, 0,
	244, 0, 0, 180, 0, 0, 0, 640, 0, 230,
	213, 704, 0, 218, 228, 183, 255, 222, 260, 246,
	268, 0, 223, 126, 247, 153, 194, 136, 137, 149,
	155, 157, 159, 160, 203, 204, 216, 235, 248, 249,
	250, 152, 145, 229, 146, 169, 147, 127, 237, 148,
	128, 217, 253, 0, 166, 225, 190, 129, 189, 219,
	252, 251, 276, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 163, 0,
	264, 691, 209, 703, 687, 688, 689, 692, 696, 697,
	635, 638, 698, 700, 702, 705, 233, 0, 0, 0,
	0, 0, 174, 215, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 241, 262,
	274, 636, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 682, 199, 200, 201, 202, 694, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	168, 0, 170, 142, 214, 165, 271, 177, 206, 173,
	238, 178, 184, 226, 270, 212, 231, 140, 261, 239,
	188, 164, 711, 690, 710, 712, 713, 709, 714, 715,
	699, 655, 0, 707, 706, 708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	182, 0, 224, 161, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 104,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	680, 0, 277, 278, 279, 263, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 653, 0, 0, 0,
	156, 832, 0, 0, 181, 0, 0, 0, 240, 195,
	0, 0, 0, 0, 695, 701, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 646, 0, 0, 0, 597,
	686, 685, 662, 0, 0, 0, 138, 663, 0, 668,
	0, 664, 667, 665, 666, 0, 634, 0, 0, 0,
	0, 0, 595, 650, 0, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 647, 648, 0, 0,
	0, 0, 681, 0, 649, 0, 0, 683, 0, 670,
	0, 130, 245, 259, 139, 236, 272, 144, 243, 135,
	210, 232, 132, 257, 242, 192, 175, 176, 131, 0,
	227, 154, 167, 151, 208, 669, 679, 639, 150, 637,
	678, 267, 134, 0, 266, 207, 254, 258, 193, 187,
	133, 256, 191, 186, 179, 158, 171, 220, 185, 221,
	172, 197, 196, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 0,
	0, 269, 0, 0, 693, 0, 0, 0, 244, 0,
	0, 180, 0, 0, 0, 640, 0, 230, 213, 704,
	0, 218, 228, 183, 255, 222, 260, 246, 268, 0,
	223, 126, 247, 153, 194, 136, 137, 149, 155, 157,
	159, 160, 203, 204, 216, 235, 248, 249, 250, 152,
	145, 229, 146, 169, 147, 127, 237, 148, 128, 217,
	253, 0, 166, 225, 190, 129, 189, 219, 252, 251,
	276, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 163, 0, 264, 691,
	209, 703, 687, 688, 689, 692, 696, 697, 635, 638,
	698, 700, 702, 705, 233, 0, 0, 0, 0, 0,
	174, 215, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 241, 262, 274, 636,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 682,
	199, 200, 201, 202, 694, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 168, 0,
	170, 142, 214, 165, 271, 177, 206, 173, 238, 178,
	184, 226, 270, 212, 231, 140, 261, 239, 188, 164,
	711, 690, 710, 712, 713, 709, 714, 715, 699, 655,
	0, 707, 706, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 182, 0,
	224, 161, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 104, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 0, 0,
	277, 278, 279, 263, 680, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 156, 0, 0, 0, 181, 0,
	0, 0, 240, 195, 0, 0, 0, 0, 695, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 646,
	0, 0, 0, 597, 686, 685, 662, 0, 0, 0,
	138, 663, 0, 668, 0, 664, 667, 665, 666, 0,
	634, 0, 0, 0, 0, 0, 595, 650, 0, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	647, 648, 0, 0, 0, 0, 681, 0, 649, 0,
	0, 683, 0, 670, 0, 130, 245, 259, 139, 236,
	272, 144, 243, 135, 210, 232, 132, 257, 242, 192,
	175, 176, 131, 0, 227, 154, 167, 151, 208, 669,
	679, 639, 150, 637, 678, 267, 134, 0, 266, 207,
	254, 258, 193, 187, 133, 256, 191, 186, 179, 158,
	171, 220, 185, 221, 172, 197, 196, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 676, 0, 0, 269, 0, 0, 693, 0,
	0, 0, 244, 0, 0, 180, 0, 0, 0, 640,
	0, 230, 213, 704, 0, 218, 228, 183, 255, 222,
	260, 246, 268, 0, 223, 126, 247, 153, 194, 136,
	137, 149, 155, 157, 159, 160, 203, 204, 216, 235,
	248, 249, 250, 152, 145, 229, 146, 169, 147, 127,
	237, 148, 128, 217, 253, 0, 166, 225, 190, 129,
	189, 219, 252, 251, 276, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	163, 0, 264, 691, 209, 703, 687, 688, 689, 692,
	696, 697, 635, 638, 698, 700, 702, 705, 233, 0,
	0, 0, 0, 0, 174, 215, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	241, 262, 274, 636, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 682, 199, 200, 201, 202, 694, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 168, 0, 170, 142, 214, 165, 271, 177,
	206, 173, 238, 178, 184, 226, 270, 212, 231, 140,
	261, 239, 188, 164, 711, 690, 710, 712, 713, 709,
	714, 715, 699, 655, 0, 707, 706, 708, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 182, 0, 224, 161, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 104, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 680, 0, 277, 278, 279, 263, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 653, 0,
	0, 0, 156, 0, 0, 0, 181, 0, 0, 0,
	240, 195, 0, 0, 0, 0, 695, 701, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 646, 0, 0,
	0, 597, 686, 685, 662, 0, 0, 0, 138, 663,
	0, 668, 0, 664, 667, 665, 666, 0, 634, 0,
	0, 0, 0, 0, 595, 650, 0, 654, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 647, 648,
	592, 0, 0, 0, 681, 0, 649, 0, 0, 683,
	0, 670, 0, 130, 245, 259, 139, 236, 272, 144,
	243, 135, 210, 232, 132, 257, 242, 192, 175, 176,
	131, 0, 227, 154, 167, 151, 208, 669, 679, 639,
	150, 637, 678, 267, 134, 0, 266, 207, 254, 258,
	193, 187, 133, 256, 191, 186, 179, 158, 171, 220,
	185, 221, 172, 197, 196, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 269, 0, 0, 693, 0, 0, 0,
	244, 0, 0, 180, 0, 0, 0, 640, 0, 230,
	213, 704, 0, 218, 228, 183, 255, 222, 260, 246,
	268, 0, 223, 126, 247, 153, 194, 136, 137, 149,
	155, 157, 159, 160, 203, 204, 216, 235, 248, 249,
	250, 152, 145, 229, 146, 169, 147, 127, 237, 148,
	128, 217, 253, 0, 166, 225, 190, 129, 189, 219,
	252, 251, 276, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 163, 0,
	264, 691, 209, 703, 687, 688, 689, 692, 696, 697,
	635, 638, 698, 700, 702, 705, 233, 0, 0, 0,
	0, 0, 174, 215, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 241, 262,
	274, 636, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 682, 199, 200, 201, 202, 694, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	168, 0, 170, 142, 214, 165, 271, 177, 206, 173,
	238, 178, 184, 226, 270, 212, 231, 140, 261, 239,
	188, 164, 711, 690, 710, 712, 713, 709, 714, 715,
	699, 655, 0, 707, 706, 708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	182, 0, 224, 161, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 104,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	680, 0, 277, 278, 279, 263, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 653, 0, 0, 0,
	156, 0, 0, 0, 181, 0, 0, 0, 240, 195,
	0, 0, 0, 0, 695, 701, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 646, 0, 0, 0, 597,
	686, 685, 662, 0, 0, 0, 138, 663, 0, 668,
	0, 664, 667, 665, 666, 0, 634, 0, 0, 0,
	0, 0, 595, 650, 0, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 647, 648, 0, 0,
	0, 0, 681, 0, 649, 0, 0, 683, 0, 670,
	0, 130, 245, 259, 139, 236, 272, 144, 243, 135,
	210, 232, 132, 257, 242, 192, 175, 176, 131, 0,
	227, 154, 167, 151, 208, 669, 679, 639, 150, 637,
	678, 267, 134, 0, 266, 207, 254, 258, 193, 187,
	133, 256, 191, 186, 179, 158, 171, 220, 185, 221,
	172, 197, 196, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 0,
	0, 269, 0, 0, 693, 0, 0, 0, 244, 0,
	0, 180, 0, 0, 0, 640, 0, 230, 213, 704,
	0, 218, 228, 183, 255, 222, 260, 246, 268, 0,
	223, 126, 247, 153, 194, 136, 137, 149, 155, 157,
	159, 160, 203, 204, 216, 235, 248, 249, 250, 152,
	145, 229, 146, 169, 147, 127, 237, 148, 128, 217,
	253, 0, 166, 225, 190, 129, 189, 219, 252, 251,
	276, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 163, 0, 264, 691,
	209, 703, 687, 688, 689, 692, 696, 697, 635, 638,
	698, 700, 702, 705, 233, 0, 0, 0, 0, 0,
	174, 215, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 241, 262, 274, 636,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 682,
	199, 200, 201, 202, 694, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 168, 0,
	170, 142, 214, 165, 271, 177, 206, 173, 238, 178,
	184, 226, 270, 212, 231, 140, 261, 239, 188, 164,
	711, 690, 710, 712, 713, 709, 714, 715, 699, 655,
	0, 707, 706, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 182, 0,
	224, 161, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 104, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 680, 0,
	277, 278, 279, 263, 0, 0, 0, 0, 211, 0,
	1221, 0, 0, 0, 653, 0, 0, 0, 156, 0,
	0, 0, 181, 0, 0, 0, 240, 195, 0, 0,
	0, 0, 695, 701, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 646, 0, 0, 0, 597, 686, 685,
	662, 0, 0, 0, 138, 663, 0, 668, 0, 664,
	667, 665, 666, 0, 634, 0, 0, 0, 0, 0,
	0, 650, 0, 654, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 647, 648, 0, 0, 0, 0,
	681, 0, 649, 0, 0, 683, 0, 670, 0, 130,
	245, 259, 139, 236, 272, 144, 243, 135, 210, 232,
	132, 257, 242, 192, 175, 176, 131, 0, 227, 154,
	167, 151, 208, 669, 679, 639, 150, 637, 678, 267,
	134, 0, 266, 207, 254, 258, 193, 187, 133, 256,
	191, 186, 179, 158, 171, 220, 185, 221, 172, 197,
	196, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 676, 0, 0, 269,
	0, 0, 693, 0, 0, 0, 244, 0, 0, 180,
	0, 0, 0, 640, 0, 230, 213, 704, 0, 218,
	228, 183, 255, 222, 260, 246, 268, 0, 223, 126,
	247, 153, 194, 136, 137, 149, 155, 157, 159, 160,
	203, 204, 216, 235, 248, 249, 250, 152, 145, 229,
	146, 169, 147, 127, 237, 148, 128, 217, 253, 0,
	166, 225, 190, 129, 189, 219, 252, 251, 276, 1222,
	1223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 163, 0, 264, 691, 209, 703,
	687, 688, 689, 692, 696, 697, 635, 638, 698, 700,
	702, 705, 233, 0, 0, 0, 0, 0, 174, 215,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 241, 262, 274, 636, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 682, 199, 200,
	201, 202, 694, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 168, 0, 170, 142,
	214, 165, 271, 177, 206, 173, 238, 178, 184, 226,
	270, 212, 231, 140, 261, 239, 188, 164, 711, 690,
	710, 712, 713, 709, 714, 715, 699, 655, 0, 707,
	706, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 182, 0, 224, 161,
	599, 600, 601, 602, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 104, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 680, 0, 277, 278,
	279, 263, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 653, 0, 0, 0, 156, 0, 0, 0,
	181, 0, 0, 0, 240, 195, 0, 0, 0, 0,
	695, 701, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 646, 0, 0, 0, 597, 686, 685, 662, 0,
	0, 0, 138, 663, 0, 668, 0, 664, 667, 665,
	666, 0, 634, 0, 0, 0, 0, 0, 0, 650,
	0, 654, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 647, 648, 0, 0, 0, 0, 681, 0,
	649, 0, 0, 683, 0, 670, 0, 130, 245, 259,
	139, 236, 272, 144, 243, 135, 210, 232, 132, 257,
	242, 192, 175, 176, 131, 0, 227, 154, 167, 151,
	208, 669, 679, 639, 150, 637, 678, 267, 134, 0,
	266, 207, 254, 258, 193, 187, 133, 256, 191, 186,
	179, 158, 171, 220, 185, 221, 172, 197, 196, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 676, 0, 0, 269, 0, 0,
	693, 0, 0, 0, 244, 0, 0, 180, 0, 0,
	0, 640, 0, 230, 213, 704, 0, 218, 228, 183,
	255, 222, 260, 246, 268, 0, 223, 126, 247, 153,
	194, 136, 137, 149, 155, 157, 159, 160, 203, 204,
	216, 235, 248, 249, 250, 152, 145, 229, 146, 169,
	147, 127, 237, 148, 128, 217, 253, 0, 166, 225,
	190, 129, 189, 219, 252, 251, 276, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 163, 0, 264, 691, 209, 703, 687, 688,
	689, 692, 696, 697, 635, 638, 698, 700, 702, 705,
	233, 0, 0, 0, 0, 0, 174, 215, 0, 234,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 262, 274, 636, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 682, 199, 200, 201, 202,
	694, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 168, 0, 170, 142, 214, 165,
	271, 177, 206, 173, 238, 178, 184, 226, 270, 212,
	231, 140, 261, 239, 188, 164, 711, 690, 710, 712,
	713, 709, 714, 715, 699, 655, 0, 707, 706, 708,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 182, 0, 224, 161, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 104, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 680, 0, 277, 278, 279, 263,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 156, 0, 0, 0, 181, 0,
	0, 0, 240, 195, 0, 0, 0, 0, 695, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 686, 685, 662, 0, 0, 0,
	138, 663, 0, 668, 0, 664, 667, 665, 666, 0,
	634, 0, 0, 0, 0, 0, 595, 650, 0, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	647, 648, 0, 0, 0, 0, 681, 0, 649, 0,
	0, 683, 0, 670, 0, 130, 245, 259, 139, 236,
	272, 144, 243, 135, 210, 232, 132, 257, 242, 192,
	175, 176, 131, 0, 227, 154, 167, 151, 208, 669,
	679, 639, 150, 637, 678, 267, 134, 0, 266, 207,
	254, 258, 193, 187, 133, 256, 191, 186, 179, 158,
	171, 220, 185, 221, 172, 197, 196, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 676, 0, 0, 269, 0, 0, 693, 0,
	0, 0, 244, 0, 0, 180, 0, 0, 0, 640,
	0, 230, 213, 704, 0, 218, 228, 183, 255, 222,
	260, 246, 268, 0, 223, 126, 247, 153, 194, 136,
	137, 149, 155, 157, 159, 160, 203, 204, 216, 235,
	248, 249, 250, 152, 145, 229, 146, 169, 147, 127,
	237, 148, 128, 217, 253, 0, 166, 225, 190, 129,
	189, 219, 252, 251, 276, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	163, 0, 264, 691, 209, 703, 687, 688, 689, 692,
	696, 697, 635, 638, 698, 700, 702, 705, 233, 0,
	0, 0, 0, 0, 174, 215, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	241, 262, 274, 636, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 682, 199, 200, 201, 202, 694, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 168, 0, 170, 142, 214, 165, 271, 177,
	206, 173, 238, 178, 184, 226, 270, 212, 231, 140,
	261, 239, 188, 164, 711, 690, 710, 712, 713, 709,
	714, 715, 699, 655, 0, 707, 706, 708, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 182, 0, 224, 161, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 104, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 0, 0, 277, 278, 279, 263, 324, 0,
	323, 327, 319, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 334, 181, 0, 0, 0, 240, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
	0, 0, 338, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 245, 259, 139, 236, 272, 144, 243, 135,
	210, 232, 132, 257, 242, 192, 175, 176, 131, 0,
	227, 154, 167, 151, 208, 0, 0, 284, 150, 275,
	0, 267, 134, 0, 266, 207, 254, 258, 193, 187,
	133, 256, 191, 186, 179, 158, 171, 220, 185, 221,
	172, 197, 196, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 316, 320, 0, 0, 0, 0, 0,
	322, 269, 0, 0, 0, 0, 0, 0, 244, 0,
	0, 180, 326, 0, 0, 285, 0, 230, 213, 0,
	0, 218, 228, 183, 255, 222, 318, 246, 268, 0,
	342, 126, 247, 153, 194, 136, 137, 149, 155, 157,
	159, 160, 203, 204, 216, 235, 248, 249, 250, 152,
	145, 229, 146, 169, 147, 127, 237, 148, 128, 217,
	253, 1261, 166, 225, 190, 129, 189, 219, 252, 251,
	276, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 163, 0, 264, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 205, 280,
	0, 0, 0, 0, 233, 0, 0, 0, 321, 325,
	328, 215, 329, 330, 0, 0, 331, 332, 333, 0,
	0, 335, 336, 0, 0, 0, 241, 262, 274, 265,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	199, 200, 201, 202, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 168, 0,
	170, 142, 214, 165, 271, 177, 206, 173, 238, 178,
	184, 226, 270, 212, 231, 140, 261, 239, 188, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1257, 0, 1254, 0, 0, 0, 1256, 1253, 1255,
	1259, 1260, 0, 0, 0, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 182, 0,
	224, 161, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 0, 0,
	277, 278, 279, 263, 324, 0, 323, 327, 319, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 334,
	181, 0, 0, 0, 240, 195, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1264, 1265, 1266,
	1267, 1268, 1269, 1262, 1263, 337, 0, 0, 338, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 245, 259,
	139, 236, 272, 144, 243, 135, 210, 232, 132, 257,
	242, 192, 175, 176, 131, 0, 227, 154, 167, 151,
	208, 0, 0, 284, 150, 275, 0, 267, 134, 0,
	266, 207, 254, 258, 193, 187, 133, 256, 191, 186,
	179, 158, 171, 220, 185, 221, 172, 197, 196, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 317, 316,
	320, 0, 0, 0, 0, 0, 322, 269, 0, 0,
	0, 0, 0, 0, 244, 0, 0, 180, 326, 0,
	0, 285, 0, 230, 213, 0, 0, 218, 228, 183,
	255, 222, 318, 246, 268, 0, 223, 126, 247, 153,
	194, 136, 137, 149, 155, 157, 159, 160, 203, 204,
	216, 235, 248, 249, 250, 152, 145, 229, 146, 169,
	147, 127, 237, 148, 128, 217, 253, 0, 166, 225,
	190, 129, 189, 219, 252, 251, 276, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 163, 0, 264, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 205, 280, 0, 0, 0, 0,
	233, 0, 0, 0, 321, 325, 328, 215, 329, 330,
	0, 0, 331, 332, 333, 0, 0, 335, 336, 0,
	0, 0, 241, 262, 274, 265, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 199, 200, 201, 202,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 168, 0, 170, 142, 214, 165,
	271, 177, 206, 173, 238, 178, 184, 226, 270, 212,
	231, 140, 261, 239, 188, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 182, 0, 224, 161, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 0, 0, 277, 278, 279, 263,
	80, 0, 23, 40, 24, 0, 0, 0, 0, 0,
	0, 0, 211, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 181, 0, 0, 0,
	240, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 245, 259, 139, 236, 272, 144,
	243, 135, 210, 232, 132, 257, 242, 192, 175, 176,
	131, 0, 227, 154, 167, 151, 208, 0, 0, 284,
	150, 275, 0, 267, 134, 0, 266, 207, 254, 258,
	193, 187, 133, 256, 191, 186, 179, 158, 171, 220,
	185, 221, 172, 197, 196, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	244, 0, 0, 180, 0, 0, 0, 285, 0, 230,
	213, 0, 0, 218, 228, 183, 255, 222, 260, 246,
	268, 0, 223, 126, 247, 153, 194, 136, 137, 149,
	155, 157, 159, 160, 203, 204, 216, 235, 248, 249,
	250, 152, 145, 229, 146, 169, 147, 127, 237, 148,
	128, 217, 253, 0, 166, 225, 190, 129, 189, 219,
	252, 251, 276, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 163, 0,
	264, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	205, 280, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 174, 215, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 241, 262,
	274, 265, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 199, 200, 201, 202, 289, 291, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	168, 0, 170, 142, 214, 165, 271, 177, 206, 173,
	238, 178, 184, 226, 270, 212, 231, 140, 261, 239,
	188, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	182, 79, 224, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	211, 0, 277, 278, 279, 263, 0, 0, 0, 0,
	156, 0, 0, 0, 181, 0, 0, 0, 240, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 1513, 1516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 245, 259, 139, 236, 272, 144, 243, 135,
	210, 232, 132, 257, 242, 192, 175, 176, 131, 0,
	227, 154, 167, 151, 208, 0, 0, 284, 150, 275,
	0, 267, 134, 0, 266, 207, 254, 258, 193, 187,
	133, 256, 191, 186, 179, 158, 171, 220, 185, 221,
	172, 197, 196, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1517, 269, 0, 0, 0, 1510, 0, 1509, 244, 1511,
	1514, 180, 0, 0, 0, 285, 0, 230, 213, 0,
	0, 218, 228, 183, 255, 222, 260, 246, 268, 0,
	223, 126, 247, 153, 194, 136, 137, 149, 155, 157,
	159, 160, 203, 204, 216, 235, 248, 249, 250, 152,
	145, 229, 146, 169, 147, 127, 237, 148, 128, 217,
	253, 1515, 166, 225, 190, 129, 189, 219, 252, 251,
	276, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 163, 0, 264, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 205, 280,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	174, 215, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 241, 262, 274, 265,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	199, 200, 201, 202, 0, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 168, 0,
	170, 142, 214, 165, 271, 177, 206, 173, 238, 178,
	184, 226, 270, 212, 231, 140, 261, 239, 188, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 182, 0,
	224, 161, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 211, 0,
	277, 278, 279, 263, 0, 0, 0, 0, 156, 389,
	0, 0, 181, 0, 0, 0, 240, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 397, 398,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	245, 259, 139, 236, 272, 144, 243, 135, 210, 232,
	132, 257, 242, 192, 175, 176, 131, 0, 227, 154,
	167, 151, 208, 0, 0, 284, 150, 275, 373, 267,
	134, 372, 266, 207, 254, 258, 193, 187, 133, 256,
	191, 186, 179, 158, 171, 220, 185, 221, 172, 197,
	196, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 244, 0, 0, 180,
	0, 0, 0, 285, 0, 230, 213, 0, 0, 218,
	228, 183, 255, 222, 260, 246, 268, 388, 223, 126,
	247, 153, 194, 136, 137, 149, 155, 157, 159, 160,
	203, 204, 216, 235, 248, 249, 250, 152, 145, 229,
	146, 169, 147, 127, 237, 148, 128, 217, 253, 0,
	166, 225, 190, 129, 189, 219, 252, 251, 276, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 163, 0, 264, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 205, 280, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 174, 215,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 241, 262, 274, 265, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 391, 199, 200,
	201, 202, 0, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 168, 0, 170, 142,
	214, 165, 271, 177, 399, 394, 395, 178, 184, 226,
	270, 212, 231, 140, 261, 239, 396, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 182, 0, 224, 161,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 0, 211, 277, 278,
	279, 263, 865, 0, 0, 0, 0, 156, 0, 0,
	0, 181, 0, 0, 0, 240, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 866,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 862, 863, 861, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 245,
	259, 139, 236, 272, 144, 243, 135, 210, 232, 132,
	257, 242, 192, 175, 176, 131, 0, 227, 154, 167,
	151, 208, 0, 0, 284, 150, 275, 0, 267, 134,
	0, 266, 207, 254, 258, 193, 187, 133, 256, 191,
	186, 179, 158, 171, 220, 185, 221, 172, 197, 196,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 244, 0, 0, 180, 0,
	0, 0, 285, 0, 230, 213, 0, 0, 218, 228,
	183, 255, 222, 260, 246, 268, 0, 223, 126, 247,
	153, 194, 136, 137, 149, 155, 157, 159, 160, 203,
	204, 216, 235, 248, 249, 250, 152, 145, 229, 146,
	169, 147, 127, 237, 148, 128, 217, 253, 0, 166,
	225, 190, 129, 189, 219, 252, 251, 276, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 163, 0, 264, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 205, 280, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 174, 215, 0,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 262, 274, 265, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 199, 200, 201,
	202, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 168, 0, 170, 142, 214,
	165, 271, 177, 206, 173, 238, 178, 184, 226, 270,
	212, 231, 140, 261, 239, 188, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 182, 0, 224, 161, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 80, 0, 277, 278, 279,
	263, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 181, 0, 0, 0, 240, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 952, 0, 86, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 245,
	259, 139, 236, 272, 144, 243, 135, 210, 232, 132,
	257, 242, 192, 175, 176, 131, 0, 227, 154, 167,
	151, 208, 0, 0, 284, 150, 275, 0, 267, 134,
	0, 266, 207, 254, 258, 193, 187, 133, 256, 191,
	186, 179, 158, 171, 220, 185, 221, 172, 197, 196,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 244, 0, 0, 180, 0,
	0, 0, 285, 0, 230, 213, 0, 0, 218, 228,
	183, 255, 222, 260, 246, 268, 0, 223, 126, 247,
	153, 194, 136, 137, 149, 155, 157, 159, 160, 203,
	204, 216, 235, 248, 249, 250, 152, 145, 229, 146,
	169, 147, 127, 237, 148, 128, 217, 253, 0, 166,
	225, 190, 129, 189, 219, 252, 251, 276, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 163, 0, 264, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 205, 280, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 174, 215, 0,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 262, 274, 265, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 199, 200, 201,
	202, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 168, 0, 170, 142, 214,
	165, 271, 177, 206, 173, 238, 178, 184, 226, 270,
	212, 231, 140, 261, 239, 188, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 182, 79, 224, 161, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 211, 0, 277, 278, 279,
	263, 0, 0, 0, 0, 156, 0, 0, 0, 181,
	0, 0, 0, 240, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 397, 398, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 402, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 245, 259, 139,
	236, 272, 144, 243, 135, 210, 232, 132, 257, 242,
	192, 175, 176, 131, 0, 227, 154, 167, 151, 208,
	0, 0, 284, 150, 275, 373, 267, 134, 372, 266,
	207, 254, 258, 193, 187, 133, 256, 191, 186, 179,
	158, 171, 220, 185, 221, 172, 197, 196, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 244, 0, 0, 180, 0, 0, 0,
	285, 0, 230, 213, 0, 0, 218, 228, 183, 255,
	222, 260, 246, 268, 0, 223, 126, 247, 153, 194,
	136, 137, 149, 155, 157, 159, 160, 203, 204, 216,
	235, 248, 249, 250, 152, 145, 229, 146, 169, 147,
	127, 237, 148, 128, 217, 253, 0, 166, 225, 190,
	129, 189, 219, 252, 251, 276, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 163, 0, 264, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 205, 280, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 174, 215, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 262, 274, 265, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 199, 200, 201, 202, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 168, 0, 170, 142, 214, 165, 271,
	177, 399, 394, 395, 178, 184, 226, 270, 212, 231,
	140, 261, 239, 396, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 182, 0, 224, 161, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 0, 0, 277, 278, 279, 263, 211,
	0, 548, 0, 0, 0, 0, 0, 0, 0, 156,
	549, 0, 0, 181, 0, 0, 0, 240, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 0,
	0, 338, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 245, 259, 139, 236, 272, 144, 243, 135, 210,
	232, 132, 257, 242, 192, 175, 176, 131, 0, 227,
	154, 167, 151, 208, 0, 0, 284, 150, 275, 0,
	267, 134, 0, 266, 207, 254, 258, 193, 187, 133,
	256, 191, 186, 179, 158, 171, 220, 185, 221, 172,
	197, 196, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 244, 0, 0,
	180, 0, 0, 0, 285, 0, 230, 213, 0, 0,
	218, 228, 183, 255, 222, 260, 246, 268, 0, 223,
	126, 247, 153, 194, 136, 137, 149, 155, 157, 159,
	160, 203, 204, 216, 235, 248, 249, 250, 152, 145,
	229, 146, 169, 147, 127, 237, 148, 128, 217, 253,
	0, 166, 225, 190, 129, 189, 219, 252, 251, 276,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 163, 0, 264, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 205, 280, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 174,
	215, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 262, 274, 265, 0,
	0, 0, 273, 0, 0, 0, 0, 550, 0, 199,
	200, 201, 202, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 168, 0, 170,
	142, 214, 165, 271, 177, 206, 173, 238, 178, 184,
	226, 270, 212, 231, 140, 261, 239, 188, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 182, 0, 224,
	161, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 0, 0, 277,
	278, 279, 263, 211, 0, 820, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 181, 0, 0,
	0, 240, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 337, 0, 0, 338, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 245, 259, 139, 236, 272,
	144, 243, 135, 210, 232, 132, 257, 242, 192, 175,
	176, 131, 0, 227, 154, 167, 151, 208, 0, 0,
	284, 150, 275, 0, 267, 134, 0, 266, 207, 254,
	258, 193, 187, 133, 256, 191, 186, 179, 158, 171,
	220, 185, 221, 172, 197, 196, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 244, 0, 0, 180, 0, 0, 0, 285, 0,
	230, 213, 0, 0, 218, 228, 183, 255, 222, 260,
	246, 268, 0, 223, 126, 247, 153, 194, 136, 137,
	149, 155, 157, 159, 160, 203, 204, 216, 235, 248,
	249, 250, 152, 145, 229, 146, 169, 147, 127, 237,
	148, 128, 217, 253, 0, 166, 225, 190, 129, 189,
	219, 252, 251, 276, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 163,
	0, 264, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 205, 280, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 174, 215, 0, 234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	262, 274, 265, 0, 0, 0, 273, 0, 0, 0,
	0, 819, 0, 199, 200, 201, 202, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 168, 0, 170, 142, 214, 165, 271, 177, 206,
	173, 238, 178, 184, 226, 270, 212, 231, 140, 261,
	239, 188, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 182, 0, 224, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 211, 0, 277, 278, 279, 263, 0, 0, 0,
	0, 156, 570, 0, 0, 181, 0, 0, 0, 240,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 568, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 567, 0,
	0, 0, 130, 245, 259, 139, 236, 272, 144, 243,
	135, 210, 232, 132, 257, 242, 192, 175, 176, 131,
	0, 227, 154, 167, 151, 208, 0, 0, 284, 150,
	275, 0, 267, 134, 0, 266, 207, 254, 258, 193,
	187, 133, 256, 191, 186, 179, 158, 171, 220, 185,
	221, 172, 197, 196, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 244,
	0, 0, 180, 0, 0, 0, 285, 0, 230, 213,
	0, 0, 218, 228, 183, 255, 222, 260, 246, 268,
	0, 223, 126, 247, 153, 194, 136, 137, 149, 155,
	157, 159, 160, 203, 204, 216, 235, 248, 249, 250,
	152, 145, 229, 146, 169, 147, 127, 237, 148, 128,
	217, 253, 0, 166, 225, 190, 129, 189, 219, 252,
	251, 276, 282, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 163, 0, 264,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 205,
	280, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 174, 215, 0, 234, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 262, 274,
	265, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 199, 200, 201, 202, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 168,
	0, 170, 142, 214, 165, 271, 177, 206, 173, 238,
	178, 184, 226, 270, 212, 231, 140, 261, 239, 188,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 182,
	0, 224, 161, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 211,
	0, 277, 278, 279, 263, 0, 0, 0, 0, 156,
	565, 0, 0, 181, 0, 0, 0, 240, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 568, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 567, 0, 0, 0,
	130, 245, 259, 139, 236, 272, 144, 243, 135, 210,
	232, 132, 257, 242, 192, 175, 176, 131, 0, 227,
	154, 167, 151, 208, 0, 0, 284, 150, 275, 0,
	267, 134, 0, 266, 207, 254, 258, 193, 187, 133,
	256, 191, 186, 179, 158, 171, 220, 185, 221, 172,
	197, 196, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 244, 0, 0,
	180, 0, 0, 0, 285, 0, 230, 213, 0, 0,
	218, 228, 183, 255, 222, 260, 246, 268, 0, 223,
	126, 247, 153, 194, 136, 137, 149, 155, 157, 159,
	160, 203, 204, 216, 235, 248, 249, 250, 152, 145,
	229, 146, 169, 147, 127, 237, 148, 128, 217, 253,
	0, 166, 225, 190, 129, 189, 219, 252, 251, 276,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 163, 0, 264, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 205, 280, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 174,
	215, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 262, 274, 265, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 199,
	200, 201, 202, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 168, 0, 170,
	142, 214, 165, 271, 177, 206, 173, 238, 178, 184,
	226, 270, 212, 231, 140, 261, 239, 188, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 182, 0, 224,
	161, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 211, 0, 277,
	278, 279, 263, 0, 0, 0, 0, 156, 0, 0,
	0, 181, 0, 0, 0, 240, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2081, 0, 86, 686, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 245,
	259, 139, 236, 272, 144, 243, 135, 210, 232, 132,
	257, 242, 192, 175, 176, 131, 0, 227, 154, 167,
	151, 208, 0, 0, 284, 150, 275, 0, 267, 134,
	0, 266, 207, 254, 258, 193, 187, 133, 256, 191,
	186, 179, 158, 171, 220, 185, 221, 172, 197, 196,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 244, 0, 0, 180, 0,
	0, 0, 285, 0, 230, 213, 0, 0, 218, 228,
	183, 255, 222, 260, 246, 268, 0, 223, 126, 247,
	153, 194, 136, 137, 149, 155, 157, 159, 160, 203,
	204, 216, 235, 248, 249, 250, 152, 145, 229, 146,
	169, 147, 127, 237, 148, 128, 217, 253, 0, 166,
	225, 190, 129, 189, 219, 252, 251, 276, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 163, 0, 264, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 205, 280, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 174, 215, 0,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 262, 274, 265, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 199, 200, 201,
	202, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 168, 0, 170, 142, 214,
	165, 271, 177, 206, 173, 238, 178, 184, 226, 270,
	212, 231, 140, 261, 239, 188, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 182, 0, 224, 161, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 211, 0, 277, 278, 279,
	263, 0, 0, 0, 0, 156, 0, 0, 0, 181,
	0, 0, 0, 240, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 568, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 567, 0, 0, 0, 130, 245, 259, 139,
	236, 272, 144, 243, 135, 210, 232, 132, 257, 242,
	192, 175, 176, 131, 0, 227, 154, 167, 151, 208,
	0, 0, 284, 150, 275, 0, 267, 134, 0, 266,
	207, 254, 258, 193, 187, 133, 256, 191, 186, 179,
	158, 171, 220, 185, 221, 172, 197, 196, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 244, 0, 0, 180, 0, 0, 0,
	285, 0, 230, 213, 0, 0, 218, 228, 183, 255,
	222, 260, 246, 268, 0, 223, 126, 247, 153, 194,
	136, 137, 149, 155, 157, 159, 160, 203, 204, 216,
	235, 248, 249, 250, 152, 145, 229, 146, 169, 147,
	127, 237, 148, 128, 217, 253, 0, 166, 225, 190,
	129, 189, 219, 252, 251, 276, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 163, 0, 264, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 205, 280, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 174, 215, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 262, 274, 265, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 199, 200, 201, 202, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 168, 0, 170, 142, 214, 165, 271,
	177, 206, 173, 238, 178, 184, 226, 270, 212, 231,
	140, 261, 239, 188, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 182, 0, 224, 161, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 211, 0, 277, 278, 279, 263, 0,
	0, 0, 0, 156, 0, 0, 0, 181, 0, 0,
	0, 240, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 568, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1682, 0, 0, 0, 130, 245, 259, 139, 236, 272,
	144, 243, 135, 210, 232, 132, 257, 242, 192, 175,
	176, 131, 0, 227, 154, 167, 151, 208, 0, 0,
	284, 150, 275, 0, 267, 134, 0, 266, 207, 254,
	258, 193, 187, 133, 256, 191, 186, 179, 158, 171,
	220, 185, 221, 172, 197, 196, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 244, 0, 0, 180, 0, 0, 0, 285, 0,
	230, 213, 0, 0, 218, 228, 183, 255, 222, 260,
	246, 268, 0, 223, 126, 247, 153, 194, 136, 137,
	149, 155, 157, 159, 160, 203, 204, 216, 235, 248,
	249, 250, 152, 145, 229, 146, 169, 147, 127, 237,
	148, 128, 217, 253, 0, 166, 225, 190, 129, 189,
	219, 252, 251, 276, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 163,
	0, 264, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 205, 280, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 174, 215, 0, 234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	262, 274, 265, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 199, 200, 201, 202, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 168, 0, 170, 142, 214, 165, 271, 177, 206,
	173, 238, 178, 184, 226, 270, 212, 231, 140, 261,
	239, 188, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 182, 0, 224, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 211, 0, 277, 278, 279, 263, 0, 0, 0,
	0, 156, 0, 0, 0, 181, 0, 0, 0, 240,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 568, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 245, 259, 139, 236, 272, 144, 243,
	135, 210, 232, 132, 257, 242, 192, 175, 176, 131,
	0, 227, 154, 167, 151, 208, 0, 0, 284, 150,
	275, 0, 267, 134, 0, 266, 207, 254, 258, 193,
	187, 133, 256, 191, 186, 179, 158, 171, 220, 185,
	221, 172, 197, 196, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 244,
	0, 0, 180, 0, 0, 0, 285, 0, 230, 213,
	0, 0, 218, 228, 183, 255, 222, 260, 246, 268,
	0, 223, 126, 247, 153, 194, 136, 137, 149, 155,
	157, 159, 160, 203, 204, 216, 235, 248, 249, 250,
	152, 145, 229, 146, 169, 147, 127, 237, 148, 128,
	217, 253, 0, 166, 225, 190, 129, 189, 219, 252,
	251, 276, 282, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 163, 0, 264,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 205,
	280, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 174, 215, 0, 234, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 262, 274,
	265, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	1488, 199, 200, 201, 202, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 168,
	0, 170, 142, 214, 165, 271, 177, 206, 173, 238,
	178, 184, 226, 270, 212, 231, 140, 261, 239, 188,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 182,
	0, 224, 161, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 211,
	0, 277, 278, 279, 263, 0, 0, 0, 0, 156,
	1193, 0, 0, 181, 0, 0, 0, 240, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 568, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 245, 259, 139, 236, 272, 144, 243, 135, 210,
	232, 132, 257, 242, 192, 175, 176, 131, 0, 227,
	154, 167, 151, 208, 0, 0, 284, 150, 275, 0,
	267, 134, 0, 266, 207, 254, 258, 193, 187, 133,
	256, 191, 186, 179, 158, 171, 220, 185, 221, 172,
	197, 196, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 244, 0, 0,
	180, 0, 0, 0, 285, 0, 230, 213, 0, 0,
	218, 228, 183, 255, 222, 260, 246, 268, 0, 223,
	126, 247, 153, 194, 136, 137, 149, 155, 157, 159,
	160, 203, 204, 216, 235, 248, 249, 250, 152, 145,
	229, 146, 169, 147, 127, 237, 148, 128, 217, 253,
	0, 166, 225, 190, 129, 189, 219, 252, 251, 276,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 163, 0, 264, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 205, 280, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 174,
	215, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 262, 274, 265, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 199,
	200, 201, 202, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 168, 0, 170,
	142, 214, 165, 271, 177, 206, 173, 238, 178, 184,
	226, 270, 212, 231, 140, 261, 239, 188, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 182, 0, 224,
	161, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 211, 0, 277,
	278, 279, 263, 0, 0, 0, 0, 156, 0, 0,
	0, 181, 0, 0, 0, 240, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 686, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 245,
	259, 139, 236, 272, 144, 243, 135, 210, 232, 132,
	257, 242, 192, 175, 176, 131, 0, 227, 154, 167,
	151, 208, 0, 0, 284, 150, 275, 0, 267, 134,
	0, 266, 207, 254, 258, 193, 187, 133, 256, 191,
	186, 179, 158, 171, 220, 185, 221, 172, 197, 196,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 244, 0, 0, 180, 0,
	0, 0, 285, 0, 230, 213, 0, 0, 218, 228,
	183, 255, 222, 260, 246, 268, 0, 223, 126, 247,
	153, 194, 136, 137, 149, 155, 157, 159, 160, 203,
	204, 216, 235, 248, 249, 250, 152, 145, 229, 146,
	169, 147, 127, 237, 148, 128, 217, 253, 0, 166,
	225, 190, 129, 189, 219, 252, 251, 276, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 163, 0, 264, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 205, 280, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 174, 215, 0,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 262, 274, 265, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 199, 200, 201,
	202, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 168, 0, 170, 142, 214,
	165, 271, 177, 206, 173, 238, 178, 184, 226, 270,
	212, 231, 140, 261, 239, 188, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 182, 0, 224, 161, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 211, 0, 277, 278, 279,
	263, 0, 0, 0, 0, 156, 0, 0, 0, 181,
	0, 0, 0, 240, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1815, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 245, 259, 139,
	236, 272, 144, 243, 135, 210, 232, 132, 257, 242,
	192, 175, 176, 131, 0, 227, 154, 167, 151, 208,
	0, 0, 284, 150, 275, 0, 267, 134, 0, 266,
	207, 254, 258, 193, 187, 133, 256, 191, 186, 179,
	158, 171, 220, 185, 221, 172, 197, 196, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 244, 0, 0, 180, 0, 0, 0,
	285, 0, 230, 213, 0, 0, 218, 228, 183, 255,
	222, 260, 246, 268, 0, 223, 126, 247, 153, 194,
	136, 137, 149, 155, 157, 159, 160, 203, 204, 216,
	235, 248, 249, 250, 152, 145, 229, 146, 169, 147,
	127, 237, 148, 128, 217, 253, 0, 166, 225, 190,
	129, 189, 219, 252, 251, 276, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 163, 0, 264, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 205, 280, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 174, 215, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 262, 274, 265, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 199, 200, 201, 202, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 168, 0, 170, 142, 214, 165, 271,
	177, 206, 173, 238, 178, 184, 226, 270, 212, 231,
	140, 261, 239, 188, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 182, 0, 224, 161, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 211, 0, 277, 278, 279, 263, 0,
	0, 0, 0, 156, 0, 0, 0, 181, 0, 0,
	0, 240, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 568, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 245, 259, 139, 236, 272,
	144, 243, 135, 210, 232, 132, 257, 242, 192, 175,
	176, 131, 0, 227, 154, 167, 151, 208, 0, 0,
	284, 150, 275, 0, 267, 134, 0, 266, 207, 254,
	258, 193, 187, 133, 256, 191, 186, 179, 158, 171,
	220, 185, 221, 172, 197, 196, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 244, 0, 0, 180, 0, 0, 0, 285, 0,
	230, 213, 0, 0, 218, 228, 183, 255, 222, 260,
	246, 268, 0, 223, 126, 247, 153, 194, 136, 137,
	149, 155, 157, 159, 160, 203, 204, 216, 235, 248,
	249, 250, 152, 145, 229, 146, 169, 147, 127, 237,
	148, 128, 217, 253, 0, 166, 225, 190, 129, 189,
	219, 252, 251, 276, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 163,
	0, 264, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 205, 280, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 174, 215, 0, 234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	262, 274, 265, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 199, 200, 201, 202, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 168, 0, 170, 142, 214, 165, 271, 177, 206,
	173, 238, 178, 184, 226, 270, 212, 231, 140, 261,
	239, 188, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 182, 0, 224, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 211, 0, 277, 278, 279, 263, 0, 0, 0,
	0, 156, 0, 0, 0, 181, 0, 0, 0, 240,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 245, 259, 139, 236, 272, 144, 243,
	135, 210, 232, 132, 257, 242, 192, 175, 176, 131,
	0, 227, 154, 167, 151, 208, 0, 0, 284, 150,
	275, 0, 267, 134, 0, 266, 207, 254, 258, 193,
	187, 133, 256, 191, 186, 179, 158, 171, 220, 185,
	221, 172, 197, 196, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 244,
	0, 0, 180, 0, 0, 0, 285, 0, 230, 213,
	0, 0, 218, 228, 183, 255, 222, 260, 246, 268,
	0, 223, 126, 247, 153, 194, 136, 137, 149, 155,
	157, 159, 160, 203, 204, 216, 235, 248, 249, 250,
	152, 145, 229, 146, 169, 147, 127, 237, 148, 128,
	217, 253, 0, 166, 225, 190, 129, 189, 219, 252,
	251, 276, 282, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 163, 0, 264,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 205,
	280, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 174, 215, 0, 234, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 262, 274,
	265, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 199, 200, 201, 202, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 168,
	0, 170, 142, 214, 165, 271, 177, 206, 173, 238,
	178, 184, 226, 270, 212, 231, 140, 261, 239, 188,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 182,
	0, 224, 161, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 211,
	0, 277, 278, 279, 263, 0, 0, 0, 0, 156,
	0, 0, 0, 181, 0, 0, 0, 240, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 245, 259, 139, 236, 272, 144, 243, 135, 210,
	232, 132, 257, 242, 192, 175, 176, 131, 0, 227,
	154, 167, 151, 208, 0, 0, 284, 150, 275, 0,
	267, 134, 0, 266, 207, 254, 258, 193, 187, 133,
	256, 191, 186, 179, 158, 171, 220, 185, 221, 172,
	197, 196, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 244, 0, 0,
	180, 0, 0, 0, 285, 0, 230, 213, 0, 0,
	218, 228, 183, 255, 222, 260, 246, 268, 0, 223,
	126, 247, 153, 194, 136, 137, 149, 155, 157, 159,
	160, 203, 204, 216, 235, 248, 249, 250, 152, 145,
	229, 146, 169, 147, 127, 237, 148, 128, 217, 253,
	0, 166, 225, 190, 129, 189, 219, 252, 251, 276,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 163, 0, 264, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 205, 280, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 174,
	215, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 262, 274, 265, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 199,
	200, 201, 202, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 168, 0, 170,
	142, 214, 165, 271, 177, 206, 173, 238, 178, 184,
	226, 270, 212, 231, 140, 261, 239, 188, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 182, 0, 224,
	161, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 211, 0, 277,
	278, 279, 263, 0, 0, 0, 0, 156, 0, 0,
	0, 181, 0, 0, 0, 240, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 245,
	259, 139, 236, 272, 144, 243, 135, 210, 232, 132,
	257, 242, 192, 175, 176, 131, 0, 227, 154, 167,
	151, 208, 0, 0, 284, 150, 275, 0, 267, 134,
	0, 266, 207, 254, 258, 193, 187, 133, 256, 191,
	186, 179, 158, 171, 220, 185, 221, 172, 197, 196,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 244, 0, 0, 180, 0,
	0, 0, 285, 0, 230, 213, 0, 0, 218, 228,
	183, 255, 222, 260, 246, 268, 0, 223, 126, 247,
	153, 194, 136, 137, 149, 155, 157, 159, 160, 203,
	204, 216, 235, 248, 249, 250, 152, 145, 229, 146,
	169, 147, 127, 237, 148, 128, 217, 253, 0, 166,
	225, 190, 129, 189, 219, 252, 251, 276, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 163, 0, 264, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 205, 280, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 174, 215, 0,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 262, 274, 265, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 199, 200, 201,
	202, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 168, 0, 170, 142, 214,
	165, 271, 177, 206, 173, 238, 178, 184, 226, 270,
	212, 231, 140, 261, 239, 188, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 182, 0, 224, 161, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 211, 0, 277, 278, 279,
	263, 0, 0, 0, 0, 156, 0, 0, 0, 181,
	0, 0, 0, 240, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 1210, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 245, 259, 139,
	236, 272, 144, 243, 135, 210, 232, 132, 257, 242,
	192, 175, 176, 131, 0, 227, 154, 167, 151, 208,
	0, 0, 284, 150, 275, 0, 267, 134, 0, 266,
	207, 254, 258, 193, 187, 133, 256, 191, 186, 179,
	158, 171, 220, 185, 221, 172, 197, 196, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 244, 0, 0, 180, 0, 0, 0,
	285, 0, 230, 213, 0, 0, 218, 228, 183, 255,
	222, 260, 246, 268, 0, 223, 126, 247, 153, 194,
	136, 137, 149, 155, 157, 159, 160, 203, 204, 216,
	235, 248, 249, 250, 152, 145, 229, 146, 169, 147,
	127, 237, 148, 128, 217, 253, 0, 166, 225, 190,
	129, 189, 219, 252, 251, 276, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 163, 0, 264, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 205, 280, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 174, 215, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 262, 274, 265, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 199, 200, 201, 202, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 168, 0, 170, 142, 214, 165, 271,
	177, 206, 173, 238, 178, 184, 226, 270, 212, 231,
	140, 261, 239, 188, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 182, 0, 224, 161, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 211, 0, 277, 278, 279, 263, 0,
	0, 0, 0, 156, 0, 0, 0, 181, 0, 0,
	0, 240, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 337, 0, 0, 338, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 245, 259, 139, 236, 272,
	144, 243, 135, 210, 232, 132, 257, 242, 192, 175,
	176, 131, 0, 227, 154, 167, 151, 208, 0, 0,
	284, 150, 275, 0, 267, 134, 0, 266, 207, 254,
	258, 193, 187, 133, 256, 191, 186, 179, 158, 171,
	220, 185, 221, 172, 197, 196, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 244, 0, 0, 180, 0, 0, 0, 285, 0,
	230, 213, 0, 0, 218, 228, 183, 255, 222, 260,
	246, 268, 0, 223, 126, 247, 153, 194, 136, 137,
	149, 155, 157, 159, 160, 203, 204, 216, 235, 248,
	249, 250, 152, 145, 229, 146, 169, 147, 127, 237,
	148, 128, 217, 253, 0, 166, 225, 190, 129, 189,
	219, 252, 251, 276, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 163,
	0, 264, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 205, 280, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 174, 215, 0, 234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	262, 274, 265, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 199, 200, 201, 202, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 168, 0, 170, 142, 214, 165, 271, 177, 206,
	173, 238, 178, 184, 226, 270, 212, 231, 140, 261,
	239, 188, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 182, 0, 224, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 211, 0, 277, 278, 279, 263, 0, 0, 0,
	0, 156, 0, 0, 0, 181, 0, 0, 0, 240,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 245, 259, 139, 236, 272, 144, 243,
	135, 210, 232, 132, 257, 242, 192, 175, 176, 131,
	0, 227, 154, 167, 151, 208, 0, 0, 284, 150,
	275, 0, 267, 134, 0, 266, 207, 254, 258, 193,
	187, 133, 256, 191, 186, 179, 158, 171, 220, 185,
	221, 172, 197, 196, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 1155, 0, 0, 0, 244,
	0, 0, 180, 0, 0, 0, 285, 0, 230, 213,
	0, 0, 218, 228, 183, 255, 222, 260, 246, 268,
	0, 223, 126, 247, 153, 194, 136, 137, 149, 155,
	157, 159, 160, 203, 204, 216, 235, 248, 249, 250,
	152, 145, 229, 146, 169, 147, 127, 237, 148, 128,
	217, 253, 0, 166, 225, 190, 129, 189, 219, 252,
	251, 276, 282, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 163, 0, 264,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 205,
	280, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 174, 215, 0, 234, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 262, 274,
	265, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 199, 200, 201, 202, 0, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 168,
	0, 170, 142, 214, 165, 271, 177, 206, 173, 238,
	178, 184, 226, 270, 212, 231, 140, 261, 239, 188,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 182,
	0, 224, 161, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 211,
	0, 277, 278, 279, 263, 0, 0, 0, 0, 156,
	0, 0, 0, 181, 0, 0, 0, 240, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 568, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 245, 259, 139, 236, 272, 144, 243, 135, 210,
	232, 132, 257, 242, 192, 175, 176, 131, 0, 227,
	154, 167, 151, 208, 0, 0, 284, 150, 275, 0,
	267, 134, 0, 266, 207, 254, 258, 193, 187, 133,
	256, 191, 186, 179, 158, 171, 220, 185, 221, 172,
	197, 196, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 244, 0, 0,
	180, 0, 0, 0, 285, 0, 230, 213, 0, 0,
	218, 228, 183, 255, 222, 260, 246, 268, 0, 223,
	126, 247, 153, 194, 136, 137, 149, 155, 157, 159,
	160, 203, 204, 216, 235, 248, 249, 250, 152, 145,
	229, 146, 169, 147, 127, 237, 148, 128, 217, 253,
	0, 166, 225, 190, 129, 189, 219, 252, 251, 276,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 163, 0, 264, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 205, 280, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 174,
	215, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 262, 274, 810, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 199,
	200, 201, 202, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 168, 0, 170,
	142, 214, 165, 271, 177, 206, 173, 238, 178, 184,
	226, 270, 212, 231, 140, 261, 239, 188, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 182, 0, 224,
	161, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 211, 0, 277,
	278, 279, 263, 0, 0, 0, 0, 156, 0, 0,
	0, 181, 0, 0, 0, 240, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 245,
	259, 139, 236, 272, 144, 243, 135, 210, 232, 132,
	257, 242, 192, 175, 176, 131, 0, 227, 154, 167,
	151, 208, 0, 0, 284, 150, 275, 0, 267, 134,
	0, 266, 207, 254, 258, 193, 187, 133, 256, 191,
	186, 179, 158, 171, 220, 185, 221, 172, 197, 196,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 244, 0, 0, 180, 0,
	0, 0, 285, 0, 230, 213, 0, 0, 218, 228,
	183, 255, 222, 260, 246, 268, 0, 223, 126, 247,
	153, 194, 136, 137, 149, 155, 157, 159, 160, 203,
	204, 216, 235, 248, 249, 250, 152, 145, 229, 146,
	169, 147, 127, 237, 148, 128, 217, 253, 0, 166,
	225, 190, 129, 189, 219, 252, 251, 276, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 163, 0, 264, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 205, 280, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 174, 215, 0,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 262, 274, 265, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 199, 200, 201,
	202, 0, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 168, 0, 170, 142, 214,
	165, 271, 177, 206, 173, 238, 178, 184, 226, 270,
	212, 231, 140, 261, 239, 188, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 125, 0, 182, 0, 224, 161, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 211, 0, 277, 278, 279,
	263, 0, 0, 0, 83, 156, 0, 0, 0, 181,
	0, 0, 0, 240, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 245, 259, 139,
	236, 272, 144, 243, 135, 210, 232, 132, 257, 242,
	192, 175, 176, 131, 0, 227, 154, 167, 151, 208,
	0, 0, 284, 150, 275, 0, 267, 134, 0, 266,
	207, 254, 258, 193, 187, 133, 256, 191, 186, 179,
	158, 171, 220, 185, 221, 172, 197, 196, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 244, 0, 0, 180, 0, 0, 0,
	285, 0, 230, 213, 0, 0, 218, 228, 183, 255,
	222, 260, 246, 268, 0, 223, 126, 247, 153, 194,
	136, 137, 149, 155, 157, 159, 160, 203, 204, 216,
	235, 248, 249, 250, 152, 145, 229, 146, 169, 147,
	127, 237, 148, 128, 217, 253, 0, 166, 225, 190,
	129, 189, 219, 252, 251, 276, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 163, 0, 264, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 205, 280, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 174, 215, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 262, 274, 265, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 199, 200, 201, 202, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 168, 0, 170, 142, 214, 165, 271,
	177, 206, 173, 238, 178, 184, 226, 270, 212, 231,
	140, 261, 239, 188, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 182, 0, 224, 161, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 211, 0, 277, 278, 279, 263, 0,
	0, 0, 0, 156, 0, 0, 0, 181, 0, 0,
	0, 240, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 245, 259, 139, 236, 272,
	144, 243, 135, 210, 232, 132, 257, 242, 192, 175,
	176, 131, 0, 227, 154, 167, 151, 208, 0, 0,
	284, 150, 275, 0, 267, 134, 0, 266, 207, 254,
	258, 193, 187, 133, 256, 191, 186, 179, 158, 171,
	220, 185, 221, 172, 197, 196, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 244, 0, 0, 180, 0, 0, 0, 285, 0,
	230, 213, 0, 0, 218, 228, 183, 255, 222, 260,
	246, 268, 0, 223, 126, 247, 153, 194, 136, 137,
	149, 155, 157, 159, 160, 203, 204, 216, 235, 248,
	249, 250, 152, 145, 229, 146, 169, 147, 127, 237,
	148, 128, 217, 253, 0, 166, 225, 190, 129, 189,
	219, 252, 251, 276, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 163,
	0, 264, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 205, 280, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 174, 215, 0, 234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	262, 274, 265, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 199, 200, 201, 202, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 168, 0, 170, 142, 214, 165, 271, 177, 206,
	173, 238, 178, 184, 226, 270, 212, 231, 140, 261,
	239, 188, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 182, 0, 224, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 0, 211, 277, 278, 279, 263, 466, 0, 0,
	0, 0, 156, 0, 0, 0, 181, 0, 0, 0,
	240, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 471, 472, 473, 468, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 245, 259, 139, 236, 272, 144,
	243, 135, 210, 232, 132, 257, 242, 192, 175, 176,
	131, 0, 227, 154, 167, 151, 208, 0, 0, 284,
	150, 275, 0, 267, 134, 0, 266, 207, 254, 258,
	193, 187, 133, 256, 191, 186, 179, 158, 171, 220,
	185, 221, 172, 197, 196, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	244, 0, 0, 180, 0, 0, 0, 285, 0, 230,
	213, 0, 0, 218, 228, 183, 255, 222, 260, 246,
	268, 0, 223, 126, 247, 153, 194, 136, 137, 149,
	155, 157, 159, 160, 203, 204, 216, 235, 248, 249,
	250, 152, 145, 229, 146, 169, 147, 127, 237, 148,
	128, 217, 253, 0, 166, 225, 190, 129, 189, 219,
	252, 251, 276, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 163, 0,
	264, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	205, 280, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 174, 215, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 241, 262,
	274, 265, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 199, 200, 201, 202, 0, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	168, 0, 170, 142, 214, 165, 271, 177, 206, 173,
	238, 178, 184, 226, 270, 212, 231, 140, 261, 239,
	188, 164, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 181,
	0, 0, 0, 240, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	182, 0, 224, 161, 471, 472, 473, 468, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 245, 259, 139,
	236, 272, 144, 243, 135, 210, 232, 132, 257, 242,
	192, 175, 176, 131, 0, 227, 154, 167, 151, 208,
	0, 0, 284, 150, 275, 0, 267, 134, 0, 266,
	207, 254, 258, 193, 187, 133, 256, 191, 186, 179,
	158, 171, 220, 185, 221, 172, 197, 196, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 244, 0, 0, 180, 0, 0, 0,
	285, 0, 230, 213, 0, 0, 218, 228, 183, 255,
	222, 260, 246, 268, 0, 223, 126, 247, 153, 194,
	136, 137, 149, 155, 157, 159, 160, 203, 204, 216,
	235, 248, 249, 250, 152, 145, 229, 146, 169, 147,
	127, 237, 148, 128, 217, 253, 0, 166, 225, 190,
	129, 189, 219, 252, 251, 276, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 163, 0, 264, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 205, 280, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 174, 215, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 262, 274, 265, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 199, 200, 201, 202, 0,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 168, 0, 170, 142, 214, 165, 271,
	177, 206, 173, 238, 178, 184, 226, 270, 212, 231,
	140, 261, 239, 188, 164, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 0, 181, 0, 0, 0, 240, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 182, 0, 224, 161, 471, 472, 473,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	245, 259, 139, 236, 272, 144, 243, 135, 210, 232,
	132, 257, 242, 192, 175, 176, 131, 0, 227, 154,
	167, 151, 208, 0, 0, 284, 150, 275, 0, 267,
	134, 0, 266, 207, 254, 258, 193, 187, 133, 256,
	191, 186, 179, 158, 171, 220, 185, 221, 172, 197,
	196, 198, 0, 0, 0, 0, 0, 0, 0, 862,
	863, 861, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 244, 0, 0, 180,
	0, 0, 0, 285, 0, 230, 213, 0, 0, 218,
	228, 183, 255, 222, 260, 246, 268, 0, 223, 126,
	247, 153, 194, 136, 137, 149, 155, 157, 159, 160,
	203, 204, 216, 235, 248, 249, 250, 152, 145, 229,
	146, 169, 147, 127, 237, 148, 128, 217, 253, 1261,
	166, 225, 190, 129, 189, 219, 252, 251, 276, 282,
	283, 80, 0, 23, 40, 24, 0, 0, 0, 0,
	0, 0, 0, 281, 163, 0, 264, 0, 209, 0,
	0, 66, 0, 0, 0, 73, 205, 280, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 174, 215,
	0, 234, 0, 41, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 241, 262, 274, 265, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 199, 200,
	201, 202, 0, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1765, 162, 168, 0, 170, 142,
	214, 165, 271, 177, 206, 173, 238, 178, 184, 226,
	270, 212, 231, 140, 261, 239, 188, 164, 1167, 0,
	0, 0, 0, 0, 69, 70, 0, 71, 72, 1257,
	0, 1254, 0, 0, 0, 1256, 1253, 1255, 1259, 1260,
	0, 0, 2166, 1258, 1765, 0, 0, 0, 0, 0,
	0, 0, 0, 1747, 125, 0, 182, 0, 224, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 1167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 68, 77, 0, 39,
	0, 0, 0, 1835, 0, 0, 0, 0, 277, 278,
	279, 263, 0, 1747, 0, 67, 65, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1765, 0, 0, 0, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1264, 1265, 1266, 1267, 1268,
	1269, 1262, 1263, 0, 1167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1751, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1755, 1747,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 0, 1744, 0,
	0, 0, 1746, 1748, 1750, 0, 1752, 1753, 1754, 1756,
	1757, 1758, 1760, 1761, 1762, 1763, 0, 1751, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1755, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1766, 0, 0, 0, 0, 0, 0, 0, 1744, 0,
	0, 0, 1746, 1748, 1750, 0, 1752, 1753, 1754, 1756,
	1757, 1758, 1760, 1761, 1762, 1763, 0, 0, 0, 0,
	0, 0, 0, 0, 1764, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1766, 1743, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 1751, 0, 0, 1759, 0, 0, 0,
	0, 0, 0, 1749, 1755, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1764, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1744, 0, 0, 0, 1746, 1748,
	1750, 1743, 1752, 1753, 1754, 1756, 1757, 1758, 1760, 1761,
	1762, 1763, 0, 0, 0, 0, 1759, 0, 0, 0,
	0, 0, 0, 1749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1766, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1764, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1759, 0, 0, 0, 0, 0, 0, 1749,
}

var yyPact = [...]int{
	21285, -1000, -299, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19467, 1647, -1000, 8314, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 195,
	16471, 19895, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7868,
	7422, 120, -1000, 1636, -1000, -1000, -1000, -1000, 106, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 645, -46, 288,
	294, 328, 328, 9170, 1636, 1341, 193, -9, -1000, 19039,
	663, 21285, 150, 19895, -1000, 354, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 16471, 19895, -86, 469,
	-1000, 192, 160, 154, 353, -1000, -1000, -1000, -1000, 19895,
	1395, -1000, -1000, -1000, 1586, 20324, 193, -1000, 1257, 1331,
	-1000, -1000, 1452, -1000, 94, -11, -33, 349, -1000, -1000,
	137, -1000, -1000, -1000, -1000, -1000, 34, -1000, -17, -1000,
	-23, -1000, -1000, -1000, -134, -1000, -1000, -1000, -1000, -1000,
	1173, 315, 1487, -177, 1555, 1601, 1341, 1624, 1596, -10,
	174, 174, 190, 174, -1000, -1000, -1000, -1000, -1000, -1000,
	389, 389, 560, 136, -1000, -1000, -132, -155, 389, -155,
	-5, -1000, 1545, 1544, -1000, -1000, -1000, -1000, -1000, -1000,
	175, -1000, -187, -1000, 276, -1000, 269, -1000, 10901, 132,
	1284, 409, -1000, 410, 19895, 19895, 19895, 410, 410, 12191,
	11763, 351, -1000, 1601, 1341, -1000, 1636, 1636, 1137, 1066,
	175, 175, 175, 175, 175, 1259, 19895, -1000, 1352, 5224,
	5224, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 181,
	1451, -1000, 19895, 1556, -1000, 350, 755, 904, -1000, -1000,
	192, 1308, -1000, 308, -1000, -1000, -1000, -1000, 19895, 1450,
	19895, 16471, 16471, 16471, 16471, -1000, 1511, 1508, -1000, 1526,
	1499, 1507, 19895, -1000, -1000, -1000, 20677, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1131, 1636, 109, 1722, 15615, 17755,
	19895, 15615, -1000, -1000, -1000, -1000, -1000, -135, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 109, 15615,
	15615, -93, -1000, -1000, -290, 1555, 5662, -1000, -1000, 5662,
	-1000, -1000, 187, 174, -1000, 15615, 506, 17755, 886, 19895,
	1637, 6538, 1637, 19895, -1000, -1000, 389, 389, -1000, 560,
	560, -1000, -1000, -147, 1637, -143, 19895, 174, -1000, -1000,
	18611, 1568, -157, 286, 271, 282, -1000, -1000, -181, -1000,
	-1000, 1220, 11335, 10467, 203, 15615, 3466, -1000, -1000, 410,
	410, 410, 3466, 3466, 312, -1000, -1000, -1000, -1000, -1000,
	-1000, 19895, 1555, -1000, -1000, -1000, 1601, 1555, 1601, -1000,
	-1000, 15615, 17755, 19895, 19895, 21030, 19895, 1259, 1581, 19895,
	1314, -1000, -1000, 9599, 346, 5662, 1070, 1449, -1000, -1000,
	1444, 1443, 1440, 1438, 1437, 1427, 1426, -1000, 1393, -1000,
	-1000, 1423, 1422, 1421, 1420, -1000, -1000, -1000, -1000, -1000,
	-1000, 1418, -1000, -1000, -1000, 1416, 1393, -1000, -1000, 1412,
	1411, 1409, 1408, 1405, -1000, -1000, -1000, -1000, -1000, 902,
	900, 931, -1000, -1000, -1000, -1000, 3028, 6538, 6538, 6538,
	6538, -1000, -1000, 1362, 5662, 1404, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6976, -1000, 1401, 1399, 1398, 1397, 1396, 1393, 1392, 899,
	1387, 1380, 1379, 6538, 1378, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1314, -1000, -288, -1000,
	10039, 19895, 19895, -1000, 1630, 5662, 2180, -1000, 1591, -1000,
	192, 60, -1000, -1000, -1000, -1000, -1000, -1000, 341, 19895,
	1277, -1000, 457, 1456, 1486, 1456, -1000, -1000, -1000, -1000,
	1501, -1000, 1498, -1000, -1000, 1352, -1000, -1000, 458, -1000,
	-1000, -1000, -1000, -1000, -17, -23, 1153, -1000, -48, 93,
	-1000, 1306, -1000, -1000, -1000, 458, 1153, 185, 895, 893,
	-1000, 752, 332, 1243, -1000, 798, 18183, 19895, 210, 1567,
	1220, 1461, 1548, -1000, -1000, -1000, 1637, 1637, 1637, 389,
	21030, 560, 19895, 560, -1000, 560, -1000, 326, 19895, 210,
	1377, -1000, -1000, -1000, 284, 265, 259, 17755, 182, -1000,
	-1000, 1220, -1000, -1000, -1000, 1373, 445, -1000, -1000, 6538,
	-1000, 658, -1000, 3466, 3466, 3466, -1000, -1000, 14331, -1000,
	-1000, 1555, -1000, 1555, 1153, 1220, 1483, 1237, -1000, -1000,
	-1000, -1000, -1000, 1369, 1295, -1000, 1637, 5224, -1000, 16471,
	-1000, 5662, 5662, 5662, -1000, 17327, -1000, 16899, -1000, 246,
	6100, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5662, 1594,
	1594, 1594, 5662, 549, 5662, 5662, -1000, 700, 7524, 1594,
	1594, 1594, 1594, 1594, -1000, 2582, 1594, 1594, 1594, 1594,
	-1000, -1000, 6538, 6538, 6538, 6538, 6538, 6538, 6538, 6538,
	6538, 6538, 6538, 6538, 1361, 577, 6538, 6538, 6538, 1066,
	1215, 1231, -1000, -1000, -1000, -1000, -1000, 478, 658, 5662,
	21132, 5662, 5662, 5662, -1000, 1117, 1111, -1000, -1000, 5662,
	-1000, 5662, 6538, 5662, -1000, 1594, 1637, 1141, -1000, 1365,
	-1000, 1290, 1537, -1000, 323, 1226, -1000, 435, 1286, -1000,
	1601, 658, -1000, 318, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -87, -1000, -1000, 19895, 1280,
	1630, 19895, 5662, -1000, -1000, 5662, 1364, -1000, 5662, -1000,
	-1000, -1000, -1000, 1646, 317, 311, 15615, -1000, 151, 15615,
	-1000, -1000, 19895, 180, 15615, -15, -153, 5662, 5662, 19895,
	5662, -1000, -1000, -1000, 1352, 485, 1363, -234, -1000, -65,
	-1000, 1481, 39, -1000, 1548, -1000, 521, -1000, -1000, -1000,
	-1000, 1637, -1000, 389, -1000, 389, 560, 19895, -1000, -1000,
	-234, 1096, -1000, -1000, -1000, 254, 1220, 15615, 829, 203,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19895, 19895, 21285,
	-1000, 19895, 1634, -1000, 1164, 1441, -1000, 568, 512, -1000,
	-1000, 309, -1000, -1000, 223, -1000, -1000, -1000, -1000, -1000,
	1362, -1000, -1000, -1000, 1094, 1071, 658, 5662, -1000, -1000,
	5662, 5662, 620, 5662, 1089, 1269, 1255, -1000, 1081, -1000,
	1641, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5662, 5662, 5662, 5662, 5662, 723, 4786, -1000, -1000, -1000,
	5662, 5662, 5662, 5662, 745, 791, -1000, 604, 604, 366,
	366, 366, 366, 366, 969, 969, -1000, -1000, -1000, 3028,
	1361, 6538, 6538, 6538, 161, 2462, 1966, -1000, 5662, 556,
	-1000, 5662, 705, -1000, 1068, 1056, 1065, 1052, -1000, -1000,
	1009, 1050, 1842, 1036, 5662, 1634, -288, 4342, 186, 19895,
	-288, 19895, 19895, 4342, -1000, 19895, -1000, 2180, 750, -1000,
	-1000, 1601, -1000, 658, 658, 19895, 658, 15615, 316, 421,
	-1000, 13903, 15615, -1000, -1000, 15615, 110, 1551, -1000, -1000,
	-110, -101, 658, 658, 307, -1000, 1578, 1563, 8742, -1000,
	-78, -1000, -1000, -1000, 188, -1000, 891, 875, 867, 853,
	19895, -1000, -1000, -1000, -1000, -1000, 404, 404, 404, -1000,
	1637, 1637, 389, -1000, -16, -56, -1000, 1153, 1015, -1000,
	-1000, -1000, -1000, 1013, -1000, 1632, 1622, 16471, 16043, -1000,
	-1000, -1000, -1000, -1000, 5662, 1209, 1205, 1190, 299, 1250,
	-1000, -1000, -1000, -1000, 5662, 1176, 1171, 1151, 1132, 1126,
	-1000, 5662, 5662, 978, 1112, 1098, 1077, 1069, 1245, -1000,
	161, 2462, 1762, -1000, 6538, 6538, 975, 473, -1000, 5662,
	601, 299, 13047, -1000, 5662, -1000, -1000, -1000, 13047, -1000,
	6538, -1000, 925, 1632, -1000, 1010, 1159, -1000, -288, -1000,
	-1000, 1141, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1217, 1153, -1000, -1000, -1000, -1000, 15615, 1589,
	210, -1000, -14, 194, -292, -96, 1621, 1620, 19895, 193,
	19895, 1007, 1143, -1000, -1000, -1000, 954, 555, -1000, 19895,
	558, 295, 174, 295, 545, 1360, -1000, -1000, -78, -1000,
	746, 743, 742, 730, -54, -1000, -1000, -1000, -1000, -1000,
	1359, 13047, -1000, 13475, 850, -1000, -1000, 1637, -1000, -16,
	-1000, 260, 257, 15, 1616, -1000, -1000, -1000, 5662, 5662,
	1441, -1000, -1000, 658, -1000, -1000, -1000, 1003, -1000, 1335,
	1350, -1000, 1335, 1335, 1335, 251, 251, 1353, 1353, 1357,
	1353, -1000, 908, -1000, -1000, -1000, -1000, -1000, 892, 879,
	5662, -1000, -1000, -1000, -1000, -1000, -1000, 6538, -1000, -1000,
	-1000, -1000, 658, 5662, 966, 959, 683, 957, 1865, -1000,
	-1000, -1000, 4342, 1141, -1000, -1000, 15615, 15615, -236, -18,
	19895, -294, 844, -1000, 1615, 830, 565, -1000, 1352, 21505,
	8742, 1144, -41, -1000, -1000, -1000, 1335, -1000, 1350, 1350,
	1335, 1335, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1349, 1347, -1000, 1335, 1346, 1346, 1335, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 19895, 19895, -1000, 19895, 19895,
	174, 5662, -1000, -1000, -1000, -1000, -1000, -1000, 15187, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 729, -1000,
	-1000, -1000, 829, 658, 1071, -1000, -1000, -1000, 727, -1000,
	716, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 714,
	-1000, -1000, 711, -1000, -1000, -1000, -1000, 871, -1000, 658,
	-1000, -1000, -1000, 5662, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -143, -296, 708, -1000, 826, -99, -1000, -1000, 1572,
	148, 21419, -1000, 404, 404, 310, 404, 404, 404, 404,
	118, 107, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 1345, -1000, -1000, 1144,
	-1000, -1000, 527, 6538, -1000, -1000, 818, 13475, 303, 329,
	1343, -1000, 72, 535, 529, -1000, 19895, -1000, -44, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 811, 811, -1000, -1000,
	707, -1000, -1000, 1340, 1458, 41, 1339, -1000, 1338, 1337,
	19895, 806, 1211, -1000, 1335, 5662, 8, -1000, -1000, 939,
	928, 1207, 1202, -1000, 757, -117, -109, -1000, 1330, -1000,
	-1000, 1613, 193, -1000, 1612, 21505, -1000, 692, 686, 404,
	404, 681, 810, 807, 805, 404, 404, 677, 803, 20677,
	674, 660, 655, 740, 802, 413, 721, 662, 653, 19895,
	1329, 762, -1000, -1000, 2462, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 628, 1327, -1000, -1000,
	1324, -1000, -1000, 1186, -1000, 1180, 926, 15187, 62, 62,
	15187, 15187, 15187, 1323, 244, -1000, 15187, 1564, 720, -1000,
	-1000, -1000, -1000, 623, -1000, 622, -1000, 177, -106, -109,
	-1000, 1611, -102, 1609, 1608, 19895, 565, -1000, 89, -1000,
	-1000, -1000, 13047, 13047, -1000, -1000, -1000, -1000, 785, 784,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 128, 19895, 1178, -1000, 424, 921, 5662, -228,
	15187, -1000, 778, -1000, -1000, 1167, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1162, 1146, 1130, 15187, -1000, -1000, -1000,
	64, 99, -1000, -1000, 1564, 918, 897, 1318, 616, -96,
	1606, -1000, 565, 1604, 565, 565, 1128, -1000, -1000, 58,
	173, 165, -1000, 233, -1000, -1000, -1000, -1000, -1000, -1000,
	125, 1125, -1000, 762, 725, -1000, 712, 1480, -1000, -26,
	1115, -1000, -1000, -1000, -1000, -1000, 1087, -1000, -1000, 404,
	717, 28, -1000, -1000, -1000, -1000, -1000, 1543, 12619, -118,
	-1000, 668, -1000, 565, -1000, -1000, -1000, 19895, 56, 603,
	6538, 1313, 6538, 1312, 66, 1302, -1000, -1000, -1000, -1000,
	-1000, 244, -1000, -1000, 1479, 1478, 1645, -1000, -1000, -1000,
	-1000, 99, 99, 99, 99, -24, 602, -1000, 886, -1000,
	19895, -1000, 1084, -1000, -1000, -1000, 301, -1000, -1000, -1000,
	-1000, 1298, 1603, -1000, 1746, 19895, 1453, 19895, 1206, 401,
	6538, -1000, -1000, 1651, -1000, 1649, 304, 304, -1000, -1000,
	-1000, 955, -1000, 400, -1000, 14759, 19895, -1000, 147, 61,
	-1000, 1042, -1000, 1028, 19895, 597, 1413, -1000, -1000, -1000,
	647, 79, -1000, 19895, 3904, -1000, 298, 989, -1000, 911,
	44, -1000, -1000, 951, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 658, 19895, -1000, 147, 1536, -1000, 595, -1000, -1000,
	-1000, 21369, 144, -1000, -1000, 21369, 54, -1000, 141, -1000,
	-1000, 938, -1000, 760, 1172, -1000, 54, 21505, 5662, -1000,
	21505, 924, -1000,
}

var yyPgo = [...]int{
	0, 108, 2043, 2042, 103, 101, 2041, 2040, 2038, 2037,
	2035, 2034, 2033, 2030, 2029, 2021, 2012, 2011, 2010, 2009,
	2008, 2007, 2006, 2002, 2001, 2000, 1999, 1998, 1997, 1996,
	1995, 1994, 1992, 1991, 98, 1990, 1989, 1988, 1986, 1985,
	1984, 138, 1982, 1981, 1980, 1979, 1978, 1964, 1963, 1962,
	1960, 130, 46, 111, 665, 43, 184, 159, 124, 1959,
	86, 165, 1958, 1955, 28, 112, 1940, 121, 118, 87,
	145, 93, 88, 57, 1939, 1937, 1935, 136, 1934, 1933,
	1932, 1931, 56, 1930, 73, 39, 29, 1928, 83, 1927,
	1921, 1915, 1913, 1912, 77, 1911, 67, 58, 1909, 1908,
	1907, 1901, 1898, 33, 1895, 49, 1890, 1889, 1885, 1884,
	1883, 1882, 1881, 15, 17, 19, 1880, 1878, 16, 3,
	1877, 140, 75, 78, 95, 1875, 174, 1874, 1859, 1858,
	150, 1844, 126, 1843, 1842, 1840, 1838, 9, 1837, 38,
	1833, 1832, 1831, 48, 1830, 1829, 1805, 90, 36, 59,
	89, 1802, 1800, 1799, 137, 20, 227, 0, 139, 37,
	1798, 134, 133, 1797, 105, 233, 129, 53, 1796, 40,
	66, 1795, 1793, 1792, 97, 65, 11, 1791, 82, 1790,
	45, 85, 1789, 96, 1788, 117, 2, 92, 1786, 141,
	1784, 1783, 1782, 110, 1781, 1780, 54, 113, 1779, 1777,
	1776, 26, 1775, 32, 30, 1774, 143, 149, 1773, 1772,
	1771, 114, 107, 81, 1770, 1768, 68, 1767, 109, 69,
	122, 1766, 671, 106, 62, 18, 1765, 147, 1764, 242,
	144, 131, 1763, 1762, 148, 1525, 146, 1760, 135, 10,
	1758, 1757, 12, 1756, 23, 1754, 1752, 1751, 1750, 6,
	1749, 1748, 1747, 1, 5, 1744, 4, 100, 1743, 79,
	60, 1741, 55, 64, 1740, 1739, 1738, 1737, 1736, 162,
	1735, 1734, 1733, 1729, 1726, 1723, 1720, 76, 1719, 1718,
	1715, 1714, 61, 1713, 1712, 1709, 1708, 1707, 31, 1705,
	1704, 21, 1703, 25, 1700, 1699, 1698, 13, 1697, 1696,
	14, 1695, 1694, 7, 8, 1693, 1692, 52, 34, 35,
	72, 71, 1691, 22, 1688, 91, 1687, 1685, 115, 1684,
	94, 1683, 1682, 142, 161, 1681, 127, 1678, 1675, 1674,
	1673, 1672, 1668, 1665, 1663, 1661, 132, 1656,
}

//line mysql_sql.y:6491
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 334, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 49, 306, 306, 305, 305, 304, 304, 303, 303,
	303, 302, 302, 302, 301, 301, 300, 300, 298, 298,
	299, 297, 296, 296, 294, 294, 292, 292, 293, 293,
	287, 287, 290, 290, 288, 288, 288, 288, 291, 286,
	286, 286, 285, 285, 48, 48, 48, 224, 224, 47,
	47, 238, 238, 238, 238, 238, 236, 236, 236, 236,
	235, 235, 234, 234, 239, 239, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 42,
	42, 42, 42, 45, 46, 232, 232, 232, 232, 232,
	233, 233, 233, 43, 44, 44, 223, 223, 228, 228,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 231, 231, 231, 230, 230, 229, 229, 36,
	36, 36, 39, 38, 222, 222, 222, 222, 222, 222,
	222, 222, 37, 37, 37, 37, 37, 37, 35, 35,
	34, 221, 221, 220, 41, 41, 41, 41, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 160, 160, 160,
	325, 325, 326, 327, 328, 328, 328, 50, 7, 33,
	33, 269, 269, 171, 171, 172, 172, 170, 170, 170,
	170, 170, 170, 272, 273, 167, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 25, 25, 32,
	335, 335, 335, 30, 31, 268, 268, 268, 29, 28,
	27, 26, 26, 24, 23, 23, 164, 164, 166, 166,
	162, 336, 336, 244, 244, 165, 165, 22, 22, 163,
	163, 144, 161, 161, 161, 6, 8, 8, 8, 8,
	8, 13, 12, 11, 10, 9, 5, 4, 276, 276,
	276, 276, 276, 276, 314, 314, 314, 315, 76, 76,
	71, 71, 277, 277, 187, 316, 316, 284, 284, 283,
	283, 282, 282, 74, 74, 75, 75, 63, 63, 51,
	51, 289, 289, 289, 289, 295, 295, 266, 266, 110,
	110, 140, 140, 141, 141, 52, 52, 53, 53, 53,
	53, 53, 53, 322, 322, 324, 324, 323, 73, 73,
	69, 69, 70, 70, 70, 68, 68, 67, 66, 66,
	65, 64, 64, 64, 55, 55, 54, 54, 54, 54,
	54, 126, 126, 126, 56, 56, 330, 330, 330, 270,
	270, 270, 275, 275, 123, 123, 124, 124, 122, 122,
	57, 57, 58, 58, 58, 58, 121, 121, 120, 59,
	59, 60, 60, 62, 62, 62, 62, 131, 131, 130,
	130, 130, 130, 79, 79, 129, 128, 128, 128, 78,
	78, 77, 77, 72, 72, 61, 61, 127, 337, 337,
	125, 153, 153, 153, 159, 159, 152, 152, 152, 152,
	152, 158, 158, 154, 154, 155, 155, 155, 3, 3,
	3, 16, 16, 16, 16, 20, 20, 332, 332, 14,
	218, 218, 217, 217, 219, 219, 219, 219, 213, 213,
	214, 214, 214, 214, 215, 215, 215, 216, 216, 216,
	216, 212, 212, 211, 209, 209, 209, 210, 210, 210,
	210, 210, 210, 156, 156, 15, 206, 206, 207, 207,
	207, 208, 208, 200, 200, 200, 200, 19, 204, 204,
	205, 205, 205, 205, 205, 201, 201, 203, 203, 199,
	199, 199, 199, 199, 18, 198, 198, 196, 196, 194,
	194, 195, 195, 193, 193, 193, 197, 197, 17, 271,
	271, 240, 240, 243, 243, 250, 250, 251, 251, 249,
	249, 256, 256, 255, 255, 254, 254, 253, 253, 252,
	252, 247, 247, 246, 246, 241, 241, 241, 241, 241,
	242, 242, 245, 245, 248, 248, 101, 101, 102, 102,
	102, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	312, 312, 313, 104, 104, 104, 108, 108, 108, 108,
	108, 108, 103, 103, 105, 105, 86, 86, 85, 85,
	80, 80, 81, 81, 82, 82, 83, 83, 84, 84,
	84, 84, 84, 84, 226, 226, 310, 310, 311, 311,
	307, 307, 307, 309, 309, 309, 309, 309, 308, 308,
	87, 138, 138, 138, 157, 157, 157, 137, 137, 137,
	100, 100, 99, 99, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 225, 225, 168,
	168, 169, 169, 118, 116, 116, 117, 117, 117, 117,
	114, 115, 113, 113, 113, 113, 113, 112, 112, 111,
	111, 111, 202, 202, 109, 109, 107, 107, 107, 106,
	106, 106, 257, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 179, 179, 184, 184,
	321, 321, 320, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 96, 96, 96, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	281, 281, 281, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 333, 333, 333, 317, 317,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 135,
	135, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 188, 188, 189, 189, 278, 278,
	278, 278, 278, 278, 279, 279, 280, 280, 280, 280,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 177, 132,
	132, 132, 190, 185, 185, 186, 186, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 182, 182, 182, 182,
	182, 174, 174, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 181, 181, 183, 183, 192, 192, 192, 191,
	191, 191, 191, 191, 191, 191, 98, 98, 98, 98,
	258, 173, 173, 173, 173, 173, 173, 173, 173, 89,
	89, 89, 89, 93, 93, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 94,
	94, 94, 94, 92, 92, 92, 92, 92, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 91, 139, 139, 259, 259, 262, 262,
	260, 260, 261, 263, 263, 263, 264, 264, 264, 265,
	265, 265, 267, 267, 143, 143, 143, 149, 149, 142,
	142, 150, 150, 151, 151, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 329, 329,
	329, 331, 331,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 14, 0, 2, 1, 3, 3, 3, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 3, 0, 3, 0, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 9, 4, 7, 0, 3, 7,
	4, 1, 3, 3, 3, 1, 0, 1, 1, 1,
	1, 3, 1, 4, 1, 3, 1, 2, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 6, 3, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 0, 4, 2, 4, 1, 5,
	3, 2, 1, 2, 2, 4, 4, 5, 2, 1,
	7, 1, 3, 3, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 1, 7,
	9, 0, 2, 0, 1, 1, 2, 2, 2, 1,
	4, 2, 2, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 5,
	1, 1, 1, 5, 5, 0, 1, 1, 2, 2,
	3, 6, 7, 4, 7, 8, 0, 2, 0, 2,
	2, 1, 1, 1, 1, 0, 1, 4, 5, 1,
	3, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 4, 4, 6, 4, 4, 6, 4, 2, 1,
	5, 4, 4, 2, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 4, 3, 4,
	5, 4, 5, 2, 3, 1, 3, 6, 0, 3,
	0, 1, 2, 4, 4, 0, 1, 3, 1, 3,
	2, 0, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 7, 7, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 0, 2, 1, 1, 2, 2, 0,
	1, 2, 4, 1, 3, 1, 4, 3, 0, 1,
	2, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 8, 11, 0, 1, 6,
	0, 2, 1, 2, 2, 2, 2, 2, 0, 1,
	2, 2, 2, 2, 1, 3, 2, 2, 2, 2,
	2, 1, 3, 2, 1, 3, 2, 0, 3, 3,
	5, 5, 4, 1, 1, 4, 1, 3, 1, 3,
	2, 1, 1, 0, 1, 1, 1, 11, 0, 2,
	3, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 5, 1, 1, 0, 3, 0,
	1, 1, 2, 4, 4, 4, 0, 1, 10, 0,
	1, 0, 6, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	6, 0, 2, 0, 2, 4, 5, 4, 5, 1,
	6, 5, 0, 3, 0, 1, 0, 1, 1, 3,
	2, 3, 3, 4, 4, 3, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 5, 4,
	1, 3, 3, 0, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	0, 1, 1, 3, 1, 1, 2, 1, 7, 7,
	7, 7, 8, 5, 0, 1, 0, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 2, 1, 2, 2, 1, 1, 2,
	2, 2, 2, 2, 1, 5, 6, 1, 2, 0,
	1, 1, 2, 5, 0, 1, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 1, 1, 2, 5, 6,
	6, 6, 1, 1, 1, 1, 0, 2, 0, 1,
	1, 2, 4, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 1, 5, 4, 4, 5, 5,
	5, 5, 4, 5, 5, 5, 5, 5, 5, 5,
	1, 1, 1, 4, 4, 6, 8, 6, 4, 5,
	5, 4, 6, 6, 7, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 2, 3, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 2, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 3, 3, 3,
	2, 3, 4, 3, 4, 1, 3, 4, 3, 4,
	1, 1, 1, 3, 4, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 1, 1, 3, 0, 1, 0, 3,
	0, 3, 3, 0, 3, 5, 0, 3, 5, 0,
	1, 1, 0, 1, 1, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -334, -2, -1, -3, -4, -5, -6, -40, -21,
	-7, -50, -34, -35, -36, -42, -47, -48, -49, -52,
	-16, -15, -14, 8, 10, -8, -160, -22, -23, -24,
	-26, -27, -28, -29, -30, -31, -32, -25, -33, 184,
	9, 48, -37, -38, -39, -43, -44, -45, -46, 292,
	298, 335, -53, -55, -17, -18, -19, -20, 180, -9,
	-10, -11, -12, -13, 202, 201, 26, 200, 181, 119,
	120, 122, 123, 30, -54, -322, 53, 182, -56, 407,
	6, 452, -63, 27, -85, -157, 57, -145, -148, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 425, 426, 427, 428, 429, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 404, 219, 243, 246, 253,
	119, 136, 130, 158, 150, 127, 223, 224, 64, 122,
	363, 74, 349, 334, 125, 238, 240, 242, 245, 225,
	146, 141, 237, 221, 139, 226, 28, 227, 163, 228,
	229, 409, 345, 274, 367, 351, 250, 140, 346, 241,
	348, 164, 168, 355, 298, 134, 135, 353, 357, 162,
	199, 32, 406, 211, 358, 166, 161, 157, 366, 254,
	252, 160, 133, 156, 222, 37, 170, 169, 171, 328,
	329, 330, 331, 230, 231, 286, 354, 153, 142, 278,
	128, 18, 361, 206, 350, 299, 232, 247, 209, 255,
	165, 167, 213, 218, 408, 251, 359, 138, 210, 239,
	205, 362, 129, 292, 301, 233, 123, 244, 356, 365,
	36, 314, 132, 126, 196, 120, 215, 220, 234, 235,
	236, 257, 256, 248, 154, 212, 159, 131, 155, 121,
	214, 364, 315, 451, 276, 317, 152, 149, 216, 189,
	360, 352, 124, 321, 316, 147, 258, 448, 449, 450,
	287, 273, 259, 260, 145, 203, 11, -161, 19, 332,
	-41, 333, 184, 53, -157, -5, -4, -34, -52, 187,
	-60, -61, -62, -125, -127, -85, 53, -157, -235, -206,
	-234, -207, -237, -208, -156, 20, 181, 180, 214, 10,
	182, 296, 188, 8, 6, 297, 200, 9, 298, 300,
	301, 304, 305, 306, 31, 309, 310, 57, 60, -157,
	-235, -206, 218, 225, -67, -68, -126, 15, 5, -271,
	317, 217, -200, -198, 307, 197, 196, 75, 369, 186,
	402, -143, -335, -268, 352, 351, -165, 350, 343, 345,
	180, 74, 151, 148, 188, 353, 32, 355, 356, 346,
	317, 124, 121, -222, 79, 129, 128, -222, 217, 29,
	-228, 327, -227, -229, 355, 356, 366, 58, 59, 354,
	-143, -157, 74, -68, -126, -67, -54, -55, -53, -55,
	317, 217, 188, 187, 369, -324, 401, -323, -157, -270,
	-330, 20, -275, 177, 178, 179, 21, 22, -1, -74,
	209, -85, 118, -60, -137, -157, 334, 88, -41, -41,
	333, -325, -326, -327, -329, 184, 333, 332, 118, -85,
	30, -128, -129, -130, -131, 40, 44, 46, 41, 42,
	43, 47, -337, 23, -153, -159, 23, -154, 60, -155,
	-148, 57, 58, 59, -53, -55, 50, 54, 11, 54,
	53, 453, 58, 294, 308, 317, 295, 307, 189, 217,
	308, 217, 343, 189, 299, 302, 303, 344, 50, 190,
	50, -285, 366, -51, 27, -70, 17, -56, -55, 16,
	20, 21, -332, 187, 401, -196, 192, -196, 188, -196,
	-164, 96, -164, -336, 11, 98, 216, 215, 347, 344,
	-244, 348, 349, -165, -164, -165, 187, 369, 30, 30,
	-269, 192, 359, 407, 127, 128, 129, -232, 20, 29,
	326, -206, 217, 54, 88, 19, -230, 88, 99, -229,
	-229, -229, -230, -230, -103, 29, -156, 115, 60, -103,
	29, 118, -69, -70, -56, -55, -68, -67, -68, 55,
	55, -269, -269, -269, -269, -269, 54, -324, -73, 53,
	-57, -58, 106, -180, -157, 80, -182, 57, -175, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 74, 286, 317, 147, 287, 145,
	203, -176, -178, -303, -298, -173, 53, 104, 105, 112,
	81, -177, -257, 24, 83, 377, -133, -134, -135, -136,
	-299, -297, 60, 65, 69, 71, 72, 70, 67, 143,
	117, -55, -317, -146, -274, -280, 186, -278, 148, 144,
	8, 110, 327, 115, -281, 59, 58, 280, 281, 282,
	369, 277, 283, 192, 332, 42, 284, 285, 288, 376,
	289, 43, 290, 279, 207, 291, 380, 379, 381, 373,
	370, 368, 371, 372, 374, 375, -57, -276, 33, -52,
	53, 30, 53, -157, -122, 12, 118, 65, 60, -41,
	55, 54, -328, 71, 72, -331, 162, 154, -157, 53,
	-221, -220, -137, -61, -61, -61, -61, 40, 40, 40,
	45, 40, 45, 40, -130, -157, -159, 55, -236, 187,
	293, 213, -234, 214, 298, 301, -212, -211, -209, -156,
	-207, -239, -137, -156, 344, -236, -212, -211, 336, 447,
	-51, -180, -157, -66, -65, -180, 189, -196, -212, 80,
	-206, -155, -157, -122, -178, -122, -85, -164, -164, -166,
	-336, -162, -336, 344, -122, -244, -163, -157, -196, -212,
	317, 24, 360, 361, 125, 128, 127, 367, -233, 326,
	20, -206, -227, -223, 60, 327, -211, -231, 50, 115,
	-282, -180, 29, -230, -230, -230, -231, -231, 114, -157,
	-51, -69, -51, -70, -212, -206, -157, -86, -85, -158,
	-155, -148, -323, 23, -72, -157, -121, 54, -120, 11,
	-152, 79, 77, 78, -157, 23, 60, 118, -180, 95,
	-191, 88, 89, 90, 91, 92, 93, 94, 53, 53,
	53, 53, 53, 53, 53, 53, -189, 53, 53, 53,
	53, 53, 53, 53, -189, 53, 53, 53, 53, 53,
	60, 60, 101, 100, 111, 104, 105, 106, 107, 108,
	109, 110, 102, 103, 98, 80, 96, 97, 82, -55,
	-180, -186, -178, -178, -178, -178, -257, -184, -180, 53,
	-180, 53, 53, 53, -279, 53, 53, -188, -189, 53,
	60, 53, 53, 53, -178, 53, -121, -277, -187, -316,
	446, -76, 55, -71, -157, -314, -315, -71, -75, -157,
	-68, -180, -150, -151, -142, -147, -154, -155, -148, 275,
	185, 20, 79, 23, 25, 280, 312, 82, 115, 16,
	83, 148, 114, 282, 377, 281, 180, 46, 379, 381,
	380, 370, 368, 319, 323, 325, 322, 369, 343, 29,
	10, 26, 201, 21, 22, 108, 182, 86, 87, 204,
	24, 202, 72, 19, 49, 11, 332, 13, 14, 283,
	318, 192, 191, 98, 336, 188, 44, 8, 117, 27,
	95, 320, 40, 76, 42, 96, 17, 371, 372, 31,
	335, 403, 208, 110, 284, 285, 47, 80, 326, 70,
	50, 77, 15, 45, 97, 183, 376, 43, 217, 324,
	288, 290, 401, 289, 186, 6, 279, 378, 30, 200,
	41, 187, 344, 85, 190, 71, 207, 144, 5, 75,
	9, 48, 51, 373, 374, 375, 33, 84, 12, 291,
	407, 327, 337, 338, 339, 340, 341, 342, 172, 173,
	174, 175, 176, 249, 195, 193, 197, 198, 446, 447,
	177, 178, 270, 272, 151, 19, -41, -326, 118, -72,
	-122, 54, 88, -78, -77, 50, 51, -79, 50, -77,
	40, 40, -73, -238, 106, 57, 54, -210, 318, 453,
	58, 55, 54, -238, 190, 60, 60, 54, 18, 118,
	54, -64, 25, 26, -85, 192, -85, -213, -214, 324,
	24, -199, 51, -194, -195, -193, -197, 29, -122, -122,
	-122, -164, -158, -166, -161, -166, -162, 118, -144, -157,
	-213, 53, 126, 129, 129, 128, -206, 190, 53, 88,
	-231, -231, -231, 29, -156, -51, -51, 50, 54, 53,
	55, 54, -122, -58, -59, -60, -180, -180, -180, -157,
	60, -157, 106, -174, 80, 273, 70, 71, 72, -175,
	-192, 20, 259, 260, -185, -186, -180, -132, 21, 20,
	-132, -132, -180, -132, 106, -186, -186, 55, -258, 65,
	-318, -319, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 392, 284, 279, 285, 283, 277, 291, 286,
	287, 147, 399, 400, 393, 394, 395, 396, 397, 398,
	-132, -132, -132, -132, -132, -180, -333, 271, 270, 272,
	-132, -132, -132, -132, -176, -176, -176, -176, -176, -176,
	-176, -176, -176, -176, -176, -176, -183, -190, -257, 53,
	98, 96, 97, 82, -178, -176, -176, 55, 54, -321,
	-320, 84, -180, -318, -185, -180, -185, -185, 55, 55,
	-186, -185, -176, -185, -132, -122, 54, 53, 55, 54,
	33, 118, 54, 88, 55, 54, -69, 118, 334, -157,
	55, -68, -220, -180, -180, 53, -180, 11, 118, 118,
	-211, 16, 407, -156, -137, 190, -212, -286, 191, 376,
	-289, 348, -180, -180, -157, -65, -73, 80, 53, -218,
	407, 326, 325, 321, -215, -216, 320, 322, 319, 323,
	50, 265, 266, 267, 268, -193, -143, 114, 228, -122,
	-164, -164, -166, -157, -218, 55, 129, -212, -167, 60,
	-223, -85, -85, -1, -157, -124, 13, 54, 118, -174,
	273, 70, -257, 55, 54, -180, -180, -180, 23, -186,
	55, 55, 55, 55, 11, -180, -180, -180, -180, -180,
	55, 11, 11, -180, -180, -180, -180, -180, -186, -183,
	-178, -176, -176, -181, 204, 79, -180, -179, -320, 86,
	-180, 54, 51, 55, 11, 55, 55, 55, 51, 55,
	54, 55, -180, -124, -187, -284, -283, -282, 33, -52,
	-71, -277, -157, -315, -282, -157, -150, -147, -155, -148,
	65, -69, -72, -212, 106, 106, 57, -156, 327, -156,
	-212, -224, 407, 27, -295, 342, 337, 339, 118, 23,
	24, -80, -81, -82, -87, -83, -137, -169, -84, 195,
	193, 197, -311, 75, 198, 249, 76, 188, -217, -219,
	328, 329, 330, 331, 79, -216, 60, 60, 60, 60,
	-85, -149, 88, -149, -149, -122, -122, -164, -171, -172,
	-170, 275, -272, 327, 318, 55, 55, -123, 14, 16,
	-60, -157, 106, -180, 55, 55, 55, -88, -94, 115,
	148, 203, 147, 146, 144, 314, 315, 139, 140, 141,
	138, 55, -180, 55, 55, 55, 55, 55, -180, -180,
	11, 55, 55, 55, 55, 55, -181, 79, -178, -175,
	55, 87, -180, 85, -88, -103, -180, -103, -176, 55,
	-123, 55, 54, -277, 55, -156, 16, 23, -213, 298,
	187, -266, 448, -293, 337, 16, 16, -52, -85, 55,
	54, -89, -93, -90, -92, -91, -95, -94, 148, 149,
	115, 152, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 30, 203, 144, 145, 146, 147, 164, 130,
	150, 405, 172, 131, 173, 132, 174, 133, 175, 134,
	135, 176, 136, -84, -157, 76, -310, -311, -196, -310,
	76, 53, -219, 65, 65, 65, 65, -216, 53, -103,
	-105, -156, 115, 60, -122, -170, 276, 31, 117, 278,
	29, 274, 16, -180, -186, 55, -259, -261, 53, -260,
	53, -259, -259, -259, -96, 135, 134, -96, -263, 53,
	-263, -264, 53, -263, 55, 55, 55, -180, -175, -180,
	55, 55, 55, 19, 55, 55, -282, -156, -156, -224,
	299, -85, -110, 449, 60, 16, 60, -291, 60, -73,
	-101, -102, -119, 312, 219, -197, 223, 64, 224, 334,
	225, 188, 227, 228, 229, 199, 230, 231, 232, 327,
	233, 234, 235, 236, 295, 5, 261, -82, -100, -99,
	-97, 70, 80, 29, 312, -98, 64, 114, 242, 220,
	243, -118, -168, 193, 75, 76, 300, -169, -265, 315,
	314, -259, -260, -260, -259, -259, 53, 53, -259, -262,
	53, -262, -259, -307, -308, -157, -308, -157, -307, -307,
	-196, -180, -201, -203, -137, 53, 65, -273, -167, 65,
	65, 65, 65, 55, -180, -287, -244, -140, 450, 65,
	60, 339, 23, -240, 209, 54, -119, -149, -149, -143,
	114, -149, -149, -149, -149, 226, 226, -149, -149, -149,
	-149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
	-149, 53, -97, 70, -176, 60, -105, -106, 29, 241,
	237, -107, 29, 221, 222, -109, 53, 249, 76, 76,
	-85, -267, 316, -139, 60, -139, 65, 53, 51, 258,
	53, 53, 53, -308, 55, 55, 54, -259, -180, 277,
	55, 55, 55, 54, 55, 54, 55, -294, 342, -290,
	-288, 337, 338, 339, 340, 53, 16, -52, 16, -119,
	65, 65, -149, -149, 65, 60, 60, 60, -149, -149,
	65, 60, -159, 65, 65, 65, 65, 29, 60, -108,
	29, 237, 241, 238, 239, 240, 65, 29, 65, 29,
	65, 29, -157, 53, -312, -313, 60, 65, 53, -202,
	53, 55, 54, 55, 55, -201, -309, 265, 266, 267,
	269, 268, -309, -201, -201, -201, 53, -226, -225, 250,
	80, -204, -203, -64, 55, 65, 65, -296, 191, -292,
	341, -288, 16, 339, 16, 16, -141, -157, -291, -241,
	251, 252, -242, -248, 254, -103, -103, 60, 60, -104,
	220, -86, 55, 54, 88, 55, -180, -112, -111, 403,
	-201, 60, 55, 55, 55, 55, -201, 250, -205, 199,
	64, 407, 263, 264, -64, 55, 55, -302, 53, 65,
	-293, 16, -291, 16, -291, -291, 55, 54, -246, 255,
	53, -244, 53, -244, 76, 266, 221, 222, 55, -313,
	60, 55, -116, -117, -114, -115, 50, 346, 247, 248,
	55, -204, -204, -204, -204, 55, -149, 60, 262, -306,
	30, 55, -301, -300, -138, -297, -157, 342, 60, -291,
	-157, -243, 256, 65, -176, 53, -176, 53, -245, 253,
	53, -225, -115, 50, -114, 50, 10, 9, -118, 65,
	-155, -305, -304, -303, 55, 54, 118, -250, 53, 16,
	55, -239, 55, -239, 53, 88, -176, -113, 244, 245,
	30, 128, -113, 54, 88, -300, -157, -251, -249, 209,
	-242, 55, 55, -239, 65, 55, 70, 29, 246, -304,
	29, -180, 118, 55, 54, 57, -247, 257, 55, -157,
	-249, -252, 33, 65, -256, -253, 53, -119, 211, -256,
	-119, -255, -254, 256, 212, 55, 54, 57, 53, -254,
	-253, -186, 55,
}

var yyDef = [...]int{
	20, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	448, 449, 450, 0, 0, 275, 0, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 208, 0,
	0, 179, 159, 160, 161, 119, 120, 121, 122, 0,
	0, 0, 335, -2, 451, 452, 453, 454, -2, 276,
	277, 278, 279, 280, 197, 198, 199, -2, 0, 172,
	0, 164, 164, 0, 355, 0, 0, 0, 366, 0,
	379, 20, 313, 0, 318, 628, 664, 665, 666, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
	1383, 1384, 1385, 1386, 1387, 1181, 1182, 1183, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 0, 188, 0, 0,
	192, 0, 0, 0, 272, 184, 185, 186, 187, 0,
	0, 401, 402, 425, 428, 431, 0, 178, 0, 0,
	80, 496, 82, 498, 0, 86, 88, 89, -2, 93,
	94, 95, 96, 97, 98, 99, 0, 101, 1230, 103,
	1290, 106, 107, 108, 0, 117, 118, -2, -2, 493,
	0, 0, 1279, 62, -2, 0, 0, 0, 371, 457,
	527, 527, 0, 527, 540, 504, 505, 506, 525, 526,
	256, 256, 0, 0, 248, 249, 0, 265, 256, 265,
	0, 1024, 0, 0, 240, 241, 242, 246, 247, 266,
	211, 173, 174, 163, 0, 168, 0, 162, 0, 0,
	133, 0, 138, 0, 1229, 1294, 1244, 0, 0, 1262,
	0, 157, -2, 350, 0, 356, 355, 355, 0, 355,
	211, 211, 211, 211, 211, 343, 0, 345, 348, 0,
	0, 380, 381, 376, 377, 378, 382, 383, 3, 0,
	0, 317, 0, 388, 189, 667, 0, 0, 193, 194,
	0, 0, 200, 0, 203, 1388, 1389, 1390, 0, 0,
	0, 0, 0, 0, 0, 416, 0, 0, 415, 0,
	0, 0, 0, 429, 430, 432, 0, 434, 435, 443,
	444, 445, 446, 447, 0, 355, 76, 0, 0, 0,
	0, 0, 500, 87, 116, 90, 91, 0, 111, 113,
	115, 114, 100, 112, 102, 104, 105, 110, 76, 0,
	0, 0, 63, 338, 0, 319, 0, 368, 370, 0,
	372, 373, 0, 527, 458, 0, 0, 0, 0, 0,
	388, 0, 388, 0, 261, 262, 256, 256, 250, 258,
	0, 263, 264, 0, 388, 0, 0, 527, 1025, 1026,
	0, 0, 0, 0, 166, 0, 171, 123, 128, 126,
	127, 129, 0, 0, 0, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 146, 149, 622, 623, 494, 150,
	151, 0, 319, 351, 367, 369, 350, -2, 0, 364,
	365, 0, 0, 0, 0, 0, 0, 344, 0, 0,
	396, 390, 392, 436, 28, 0, 915, 664, 920, -2,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, -2, 1361, -2,
	-2, 1364, 1365, 1366, 1368, -2, -2, -2, -2, -2,
	-2, 1375, -2, -2, -2, 1379, 1380, -2, -2, 1383,
	1384, 1385, 1386, 1387, -2, -2, -2, -2, -2, -2,
	-2, 931, 735, 736, 737, 738, 0, 0, 0, 0,
	0, 745, 746, 0, 758, 0, 752, 753, 754, 755,
	38, 39, 951, 952, 953, 954, 955, 956, 957, 958,
	879, 722, 0, 0, 0, 864, 0, 854, 0, 892,
	0, 0, 0, 0, 0, 40, 41, 870, 872, 873,
	875, 876, 877, 878, 880, 881, 882, 883, 886, 887,
	888, 889, 890, 891, 894, 896, 866, 867, 868, 869,
	858, 859, 860, 861, 862, 863, 396, 287, 305, 289,
	0, 294, 0, 629, 355, 0, 0, 190, 0, 195,
	0, 0, 202, 204, 205, 206, 1391, 1392, 273, 0,
	388, 181, 0, 419, 413, 0, 406, 417, 418, 409,
	0, 411, 0, 407, 408, 348, 433, 427, 0, 77,
	78, 79, 81, 92, 0, 0, 70, 481, 487, 484,
	497, 0, 84, 499, 109, 0, 65, 0, 0, 0,
	339, 352, 28, 357, 358, 361, 0, 0, 468, 0,
	495, 519, -2, 237, 257, 238, 388, 388, 388, 256,
	0, 258, 0, 258, 253, 0, 267, 269, 0, 468,
	1321, 212, 175, 176, 0, 0, 170, 0, 0, 130,
	131, 132, 139, 134, 136, 0, 0, 140, 152, 153,
	154, 311, 312, 0, 0, 0, 144, 145, 0, 158,
	337, 319, 341, 319, 281, 282, 0, 284, 626, 285,
	441, 442, 346, 0, 0, 423, 388, 0, 397, 0,
	393, 0, 0, 0, 437, 0, 439, 0, 910, 0,
	0, 939, 940, 941, 942, 943, 944, 945, 903, 899,
	899, 899, 0, 899, 0, 0, 839, 0, 0, 899,
	899, 899, 899, 899, 840, 0, 899, 899, 899, 899,
	853, 847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	905, 0, 741, 742, 743, 744, 747, 0, 759, 0,
	0, 903, 903, 903, 842, 0, 0, 844, 855, 0,
	848, 903, 0, 903, 852, 899, 388, 288, 302, 0,
	306, 0, 0, 298, 300, 293, 295, 0, 0, 315,
	350, 389, 668, 0, 1031, -2, 1033, -2, -2, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
	1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
	1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
	1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 0, 196, 201, 0, 0,
	355, 0, 0, 403, 420, 0, 0, 404, 0, 405,
	410, 412, 426, 0, 71, 75, 0, 483, 0, 0,
	486, 83, 0, 0, 0, 59, 321, 0, 0, 0,
	0, 360, 362, 363, 348, 0, 0, 460, 469, 0,
	528, 0, 0, 524, -2, 531, 0, 537, 239, 243,
	244, 388, 259, 256, 260, 256, 258, 0, 268, 271,
	460, 0, 177, 165, 167, 0, 125, 0, 0, 0,
	141, 142, 143, 147, 148, 340, 342, 0, 0, 20,
	349, 0, 386, 391, 398, 399, 907, 908, 909, 438,
	440, 29, 394, 911, 0, 913, 916, 921, 922, 918,
	0, 936, -2, -2, 0, 904, 905, 0, 900, 901,
	0, 0, 0, 0, 0, 0, 0, 856, 0, 950,
	0, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	0, 0, 0, 0, 0, 0, 0, 805, 806, 807,
	0, 0, 0, 0, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 923, 934, 935, 0,
	0, 0, 0, 0, 932, 927, 0, 739, 0, 756,
	760, 0, 0, 898, 0, 905, 0, 0, 865, 843,
	0, 0, 0, 0, 0, 386, 305, 307, 0, 0,
	305, 0, 0, 0, 314, 0, 286, 0, 0, 274,
	207, 350, 182, 183, 421, 0, 414, 0, 0, 0,
	482, 0, 0, 485, 85, 0, 67, 0, 60, 61,
	325, 0, 353, 354, 29, 359, 0, 0, 630, 459,
	0, 470, 471, 472, 473, 474, 0, 0, 0, 0,
	0, 520, 521, 522, 523, 532, 1027, 1027, 1027, 251,
	388, 388, 256, 270, 213, 0, 169, 124, 0, 225,
	135, 283, 627, 0, 424, 384, 0, 0, 0, 912,
	914, 917, 919, 793, 0, 0, 0, 0, 0, 0,
	782, 776, 777, 857, 0, 0, 0, 0, 0, 0,
	801, 0, 0, 0, 0, 0, 0, 0, 0, 924,
	932, 928, 0, 925, 0, 0, 906, 0, 761, 0,
	0, 0, 0, 794, 0, 798, 841, 845, 0, 849,
	0, 851, 0, 384, 303, 0, 308, 309, 305, 292,
	299, 291, 301, 296, 297, 316, 669, 1032, 1029, 1030,
	191, 180, 0, 69, 72, 73, 74, 488, 0, 489,
	468, 66, 0, 0, 327, 48, 0, 0, 0, 0,
	0, 0, 631, 632, 634, 635, 0, 0, 637, 691,
	0, 646, 527, 646, 0, 0, 648, 649, 461, 462,
	0, 0, 0, 0, 0, 476, 477, 478, 479, 480,
	0, 0, 1028, 0, 0, 254, 252, 388, 209, 214,
	215, 0, 219, 0, 0, 137, 347, 374, 0, 0,
	400, 30, 395, 906, 778, 779, 780, 0, 763, 1006,
	1010, 766, 1006, 1006, 1006, 772, 772, 1013, 1013, 1016,
	1013, 781, 0, 800, 783, 784, 787, 785, 0, 0,
	0, 799, 788, 789, 775, 902, 926, 0, 933, 929,
	740, 748, 757, 0, 0, 0, 0, 0, 0, 786,
	375, 304, 0, 290, 422, 492, 0, 0, 67, 0,
	0, 329, 0, 326, 0, 0, 0, 455, 348, -2,
	0, -2, 1019, 960, 961, 962, 1006, 964, 1010, 1010,
	1006, 1006, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 0, 0, 983, 1006, 1008, 1008, 1006, 1003, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 636, 692, 658, 658, 647, 658, 658,
	527, 0, 463, 464, 465, 466, 467, 475, 0, 533,
	534, 624, 625, 535, 255, 216, 217, 218, 0, 221,
	222, 224, 0, 385, 387, 749, 764, 1007, 0, 765,
	0, 767, 768, 769, 770, 773, 774, 771, 979, 0,
	980, 981, 0, 982, 797, 802, 803, 0, 930, 762,
	750, 751, 795, 0, 846, 850, 310, 490, 491, 64,
	68, 50, 331, 0, 328, 0, 322, 324, 58, 0,
	541, -2, 578, 1027, 1027, 0, 1027, 1027, 1027, 1027,
	0, 0, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
	1027, 1027, 1027, 1027, 1027, 1027, 0, 633, 660, -2,
	672, 674, 0, 0, 677, 678, 0, 0, 0, 0,
	714, 684, 0, 0, 948, 949, 0, 690, 1022, 1020,
	1021, 963, 988, 989, 990, 991, 0, 0, 984, 985,
	0, 986, 987, 0, 650, 659, 0, 659, 0, 0,
	658, 0, 0, 515, 1006, 0, 0, 223, 210, 0,
	0, 0, 0, 804, 0, 44, 0, 320, 0, 330,
	49, 0, 0, 538, 0, 536, 580, 0, 0, 1027,
	1027, 0, 0, 0, 0, 1027, 1027, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 673, 675, 676, 679, 680, 681, 719, 720,
	721, 682, 716, 717, 718, 683, 0, 0, 946, 947,
	712, 959, 1023, 0, 1004, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 644, 508, 0, 361, 0, 220,
	1012, 1011, 1014, 0, 1017, 0, 796, 42, 46, 51,
	52, 0, 0, 0, 0, 0, 0, 456, 574, 579,
	581, 582, 0, 0, 585, 586, 587, 588, 0, 0,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	616, 617, 618, 619, 620, 621, 601, 602, 603, 604,
	605, 606, 613, 0, 0, 610, 0, 0, 0, 707,
	0, 1001, 0, 1002, 1009, 0, 651, 653, 654, 655,
	656, 657, 652, 0, 0, 0, 0, 643, 645, 687,
	0, 507, 516, 517, 361, 0, 0, 31, 0, 48,
	0, 53, 0, 0, 0, 0, 0, 333, 323, 563,
	0, 0, 569, 0, 575, 583, 584, 589, 590, 607,
	0, 0, 609, 0, 0, 715, 0, 694, 708, 0,
	0, 1005, 508, 508, 508, 508, 0, 688, 509, 1027,
	0, 0, 513, 514, 518, 1015, 1018, 22, 0, 0,
	45, 0, 54, 0, 56, 57, 332, 0, 543, 0,
	0, 0, 0, 0, 572, 0, 614, 615, 608, 611,
	612, 685, 693, 695, 696, 697, 0, 709, 710, 711,
	713, 638, 639, 640, 641, 0, 0, 511, 0, 21,
	0, 32, 0, 34, 36, 37, 661, 43, 47, 55,
	334, 545, 0, 564, 0, 0, 0, 0, 0, 0,
	0, 686, 698, 0, 699, 0, 0, 0, 642, 510,
	512, 23, 24, 0, 33, 0, 0, 542, 0, 574,
	565, 0, 567, 0, 0, 0, 0, 700, 702, 703,
	0, 0, 701, 0, 0, 35, 662, 0, 547, 0,
	561, 566, 568, 0, 573, 571, 704, 706, 705, 25,
	26, 27, 0, 546, 0, 559, 544, 0, 570, 663,
	548, -2, 0, 562, 549, -2, 0, 557, 0, 550,
	558, 0, 553, 0, 0, 552, 0, -2, 0, 554,
	-2, 0, 560,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 109, 101, 3,
	53, 55, 106, 104, 54, 105, 118, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 452,
	89, 88, 90, 3, 453, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:504
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:510
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:533
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:537
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 21:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:543
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:558
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:562
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:568
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:572
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:578
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:585
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:594
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:598
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:602
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:607
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:615
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:621
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:630
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:641
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:645
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:651
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:655
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:661
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:685
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:704
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:708
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:713
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:717
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:725
		{
			yyVAL.str = ""
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:729
		{
			yyVAL.str = yyDollar[3].str
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:734
		{
			yyVAL.str = "\n"
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:738
		{
			yyVAL.str = yyDollar[3].str
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:743
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:747
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:771
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:775
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:781
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:787
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:805
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:822
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:845
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:849
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:853
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:858
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:862
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:878
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:886
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:896
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:900
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:920
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:930
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:936
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:942
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:949
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:957
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:965
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:969
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:973
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:977
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:983
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:987
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:993
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1000
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1009
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1013
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1019
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1023
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1027
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1031
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1035
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1039
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1043
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1047
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1051
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1055
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1059
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1063
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1067
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1071
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1075
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1079
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1083
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1087
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1159
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1165
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1173
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1177
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1181
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1185
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1189
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1195
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1209
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1215
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1226
		{
			yyVAL.str = yyDollar[3].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1232
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1236
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1250
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1267
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1275
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1298
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1321
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1328
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1335
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1343
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1350
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1357
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1366
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1370
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1374
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1380
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1384
		{
			yyVAL.str = yyDollar[1].str
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1391
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1402
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1408
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1413
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1417
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1421
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1425
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1429
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1433
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1437
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1441
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1447
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1451
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1455
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1459
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1469
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1475
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1479
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1485
		{
			yyLOCAL = &tree.Update{
				Table:   yyDollar[2].tableExprUnion(),
				Exprs:   yyDollar[4].updateExprsUnion(),
				Where:   yyDollar[5].whereUnion(),
				OrderBy: yyDollar[6].orderByUnion(),
				Limit:   yyDollar[7].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1498
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1502
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1508
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1517
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1523
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1528
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1533
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1537
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1541
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1545
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt

		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1554
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1562
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1572
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1585
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1589
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1595
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1601
		{
			yyVAL.str = yyDollar[1].str
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1606
		{
			yyVAL.str = "true"
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1607
		{
			yyVAL.str = "false"
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1608
		{
			yyVAL.str = yyDollar[1].str
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1613
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1623
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1634
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1647
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1651
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1656
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1660
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1666
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1670
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1676
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1680
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1684
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1688
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1692
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1696
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1702
		{
			yyVAL.item = nil
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1707
		{
			yyVAL.item = nil
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1729
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1733
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1739
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1753
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1763
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1772
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1776
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1780
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1786
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1792
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1798
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1804
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1814
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1826
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1832
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1844
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1857
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1861
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1866
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1870
		{
			yyVAL.str = yyDollar[2].str
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1876
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1889
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1893
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1899
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1903
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1909
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1913
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1922
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1926
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1930
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1946
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1955
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1964
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1974
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1980
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1986
		{
			yyLOCAL = &tree.Delete{
				Table:   yyDollar[3].tableExprUnion(),
				Where:   yyDollar[4].whereUnion(),
				OrderBy: yyDollar[5].orderByUnion(),
				Limit:   yyDollar[6].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2001
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2010
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2017
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2023
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2031
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2038
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2045
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2064
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2068
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2072
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2078
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2087
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2091
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2097
		{
			yyVAL.str = yyDollar[1].str
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2101
		{
			yyVAL.str = yyDollar[3].str
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2107
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2111
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2117
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2122
		{
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2126
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2133
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2137
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2144
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2149
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2153
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2163
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2169
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2173
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2182
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2195
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2202
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2209
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2227
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2246
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2252
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2259
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2263
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2276
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2280
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2285
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2289
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2296
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2301
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2308
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2314
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2318
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2322
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2326
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2330
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2334
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2340
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2347
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2356
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2360
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2366
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2374
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2378
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2383
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2387
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2393
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2397
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2401
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2406
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2410
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2416
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2422
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2426
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2432
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2437
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2441
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2445
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2452
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2456
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2462
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2476
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2496
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2516
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2524
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2545
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2563
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2567
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2571
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2580
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2584
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2589
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2593
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2598
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2608
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2612
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2618
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2622
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2626
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2630
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2635
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2643
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2649
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2657
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2661
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2671
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2680
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2690
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2699
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2709
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2713
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2723
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2727
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2731
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2735
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2741
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2745
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2751
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2757
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2761
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2765
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2771
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2775
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2781
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2785
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2791
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2795
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2801
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2805
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:2818
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2823
		{
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2824
		{
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:2828
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2840
		{
			yyVAL.str = ""
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2844
		{
			yyVAL.str = yyDollar[1].str
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2848
		{
			yyVAL.str = yyDollar[2].str
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2857
		{
			yyVAL.str = ""
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2861
		{
			yyVAL.str = yyDollar[1].str
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2865
		{
			yyVAL.str = yyDollar[2].str
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2869
		{
			yyVAL.str = yyDollar[1].str
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2873
		{
			yyVAL.str = yyDollar[2].str
		}
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2903
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2913
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2924
		{
		}
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2929
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2939
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2943
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2949
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2953
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2959
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2963
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2967
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2971
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2977
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2984
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2989
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2994
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2999
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3005
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3009
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3013
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3019
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3023
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3027
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3031
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3037
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3041
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3047
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3060
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3064
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3068
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3073
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3077
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3084
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3090
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3098
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3105
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3117
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3126
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3130
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3136
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3140
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3144
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3153
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3157
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3161
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3165
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3171
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3190
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3194
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3216
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3220
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3224
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3228
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3232
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3238
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3242
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3248
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3253
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3258
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3262
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3266
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3270
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3274
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3280
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3294
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3298
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3303
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3307
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3313
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3317
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3323
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3327
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3331
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3336
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3340
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3346
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3358
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3362
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3367
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3371
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3381
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3385
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3394
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3398
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3404
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3408
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3414
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3423
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3433
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3437
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3443
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3447
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3453
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3460
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3469
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3473
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3478
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3482
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3487
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3491
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3501
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3505
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3516
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3524
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3532
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3540
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3551
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3561
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3571
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3575
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3580
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3584
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3589
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3593
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3599
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3603
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3607
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3613
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3617
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3621
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3625
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3629
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3633
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3637
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3641
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3645
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3649
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3653
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3657
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3661
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3665
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3669
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3673
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3677
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3681
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3685
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3689
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3693
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3697
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3701
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3705
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3709
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3713
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3717
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3721
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3725
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3732
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3736
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3742
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3747
		{
			yyVAL.str = ""
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3751
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3755
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3761
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3765
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3769
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3773
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3777
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3781
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3795
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3799
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3808
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3813
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3819
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3826
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3830
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3836
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3840
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3846
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3856
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3862
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3871
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3880
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3903
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3912
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3922
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3930
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3936
		{
			yyVAL.str = ""
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3940
		{
			yyVAL.str = yyDollar[1].str
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3950
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3956
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3962
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3976
		{
			yyVAL.str = ""
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:3983
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3989
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3993
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3997
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4008
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4012
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4016
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4021
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4025
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4031
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4035
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4041
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4045
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4049
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4053
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4057
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4061
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4065
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4069
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4073
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4077
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4081
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4085
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4089
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4099
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4103
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4108
		{
			yyVAL.str = ""
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4112
		{
			yyVAL.str = yyDollar[1].str
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4118
		{
			yyVAL.str = ""
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4122
		{
			yyVAL.str = yyDollar[2].str
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4128
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4139
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4149
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4156
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4163
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4170
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4179
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4185
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4191
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4195
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4199
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4203
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4207
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4212
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4219
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4223
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4227
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4232
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4236
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4241
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4245
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4261
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4267
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4271
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4275
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4279
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4283
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4287
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4291
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4295
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4299
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4303
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4307
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4311
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4315
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4321
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4325
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4329
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4333
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4337
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4341
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4345
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4349
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4353
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4357
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4361
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4365
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4370
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4378
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4382
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4386
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4395
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4399
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4403
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4407
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4412
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4416
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4421
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4425
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4431
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4435
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4441
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4451
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4464
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4477
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4489
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4503
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          0,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4518
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4533
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4546
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4561
		{
		}
	case 775:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4567
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4576
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4584
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4592
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4601
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4610
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4619
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4628
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4637
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4646
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4655
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4664
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4673
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4682
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4691
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4707
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4715
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4723
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4731
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4739
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4748
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4756
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4765
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4774
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4782
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4790
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4799
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4819
		{
			yyVAL.str = yyDollar[1].str
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4855
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4867
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4881
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4889
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4896
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4903
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4915
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4923
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4934
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4943
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4952
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4960
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4970
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4978
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4986
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4996
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5000
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5006
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5010
		{
			yyLOCAL = yyDollar[2].numValUnion()
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5023
		{
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5025
		{
		}
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5065
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5075
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5079
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5083
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5089
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5094
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5098
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5104
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5108
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5115
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5119
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5123
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5127
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5131
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5135
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5139
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5144
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5149
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5155
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5159
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5163
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5167
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5174
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5178
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5184
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5188
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5192
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5196
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5200
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5204
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5208
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5212
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5218
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5222
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5228
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5232
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5239
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5243
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5247
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5253
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5257
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5261
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5265
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5269
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5273
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5277
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5283
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5287
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5291
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5295
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.NumVal
//line mysql_sql.y:5301
		{
			ival, errStr := util.GetInt64(yyDollar[1].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			if ival > 0 {
				yyLOCAL = tree.NewNumValWithResInt(constant.MakeInt64(ival), yylex.(*Lexer).scanner.LastToken, false, ival)
				yyLOCAL.ValType = tree.P_int64
			} else {
				yyLOCAL = tree.NewNumValWithResInt(constant.MakeInt64(ival), yylex.(*Lexer).scanner.LastToken, true, ival)
				yyLOCAL.ValType = tree.P_int64
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5318
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5322
		{
			ival := util.GetUint64(yyDollar[1].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(ival), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5327
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5332
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5336
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5340
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5344
		{
			ival := util.GetUint64(yyDollar[1].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(ival), yylex.(*Lexer).scanner.LastToken, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5349
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal128)
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5358
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5369
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5374
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5380
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5392
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5404
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5416
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5429
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5442
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5455
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5468
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5481
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5494
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5507
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5520
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5533
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5546
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5561
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5584
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5621
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5669
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5686
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5698
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5713
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5733
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5753
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5769
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5782
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5795
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5808
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5821
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5833
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5845
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5857
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5869
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5881
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5893
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5905
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5917
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5929
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5942
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5957
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5980
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5985
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:5991
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:5998
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6002
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6007
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6011
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6017
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6023
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6030
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6037
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6046
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6053
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6060
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6069
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6073
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6077
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6083
		{
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6085
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6095
		{
			yyVAL.str = ""
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6099
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
