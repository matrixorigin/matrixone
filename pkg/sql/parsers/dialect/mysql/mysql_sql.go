// Code generated by goyacc -o mysql_sql.go -c mysql mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"go/constant"
	"strconv"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const DISTINCTROW = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const SUBQUERY_AS_EXPR = 57395
const ID = 57396
const AT_ID = 57397
const AT_AT_ID = 57398
const STRING = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const INTEGRAL = 57404
const HEX = 57405
const HEXNUM = 57406
const BIT_LITERAL = 57407
const FLOAT = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const EMPTY_FROM_CLAUSE = 57412
const LOWER_THAN_CHARSET = 57413
const CHARSET = 57414
const UNIQUE = 57415
const KEY = 57416
const OR = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const ASSIGNMENT = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const BEGIN = 57445
const START = 57446
const TRANSACTION = 57447
const COMMIT = 57448
const ROLLBACK = 57449
const WORK = 57450
const CONSISTENT = 57451
const SNAPSHOT = 57452
const CHAIN = 57453
const NO = 57454
const RELEASE = 57455
const BIT = 57456
const TINYINT = 57457
const SMALLINT = 57458
const MEDIUMINT = 57459
const INT = 57460
const INTEGER = 57461
const BIGINT = 57462
const INTNUM = 57463
const REAL = 57464
const DOUBLE = 57465
const FLOAT_TYPE = 57466
const DECIMAL = 57467
const NUMERIC = 57468
const DECIMAL_VALUE = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const TEXT = 57480
const TINYTEXT = 57481
const MEDIUMTEXT = 57482
const LONGTEXT = 57483
const BLOB = 57484
const TINYBLOB = 57485
const MEDIUMBLOB = 57486
const LONGBLOB = 57487
const JSON = 57488
const ENUM = 57489
const GEOMETRY = 57490
const POINT = 57491
const LINESTRING = 57492
const POLYGON = 57493
const GEOMETRYCOLLECTION = 57494
const MULTIPOINT = 57495
const MULTILINESTRING = 57496
const MULTIPOLYGON = 57497
const INT1 = 57498
const INT2 = 57499
const INT3 = 57500
const INT4 = 57501
const INT8 = 57502
const SQL_SMALL_RESULT = 57503
const SQL_BIG_RESULT = 57504
const SQL_BUFFER_RESULT = 57505
const CREATE = 57506
const ALTER = 57507
const DROP = 57508
const RENAME = 57509
const ANALYZE = 57510
const ADD = 57511
const SCHEMA = 57512
const TABLE = 57513
const INDEX = 57514
const VIEW = 57515
const TO = 57516
const IGNORE = 57517
const IF = 57518
const PRIMARY = 57519
const COLUMN = 57520
const CONSTRAINT = 57521
const SPATIAL = 57522
const FULLTEXT = 57523
const FOREIGN = 57524
const KEY_BLOCK_SIZE = 57525
const SHOW = 57526
const DESCRIBE = 57527
const EXPLAIN = 57528
const DATE = 57529
const ESCAPE = 57530
const REPAIR = 57531
const OPTIMIZE = 57532
const TRUNCATE = 57533
const MAXVALUE = 57534
const PARTITION = 57535
const REORGANIZE = 57536
const LESS = 57537
const THAN = 57538
const PROCEDURE = 57539
const TRIGGER = 57540
const STATUS = 57541
const VARIABLES = 57542
const ROLE = 57543
const PROXY = 57544
const AVG_ROW_LENGTH = 57545
const STORAGE = 57546
const DISK = 57547
const MEMORY = 57548
const CHECKSUM = 57549
const COMPRESSION = 57550
const DATA = 57551
const DIRECTORY = 57552
const DELAY_KEY_WRITE = 57553
const ENCRYPTION = 57554
const ENGINE = 57555
const MAX_ROWS = 57556
const MIN_ROWS = 57557
const PACK_KEYS = 57558
const ROW_FORMAT = 57559
const STATS_AUTO_RECALC = 57560
const STATS_PERSISTENT = 57561
const STATS_SAMPLE_PAGES = 57562
const DYNAMIC = 57563
const COMPRESSED = 57564
const REDUNDANT = 57565
const COMPACT = 57566
const FIXED = 57567
const COLUMN_FORMAT = 57568
const AUTO_RANDOM = 57569
const RESTRICT = 57570
const CASCADE = 57571
const ACTION = 57572
const PARTIAL = 57573
const SIMPLE = 57574
const CHECK = 57575
const ENFORCED = 57576
const RANGE = 57577
const LIST = 57578
const ALGORITHM = 57579
const LINEAR = 57580
const PARTITIONS = 57581
const SUBPARTITION = 57582
const SUBPARTITIONS = 57583
const TYPE = 57584
const ANY = 57585
const SOME = 57586
const PROPERTIES = 57587
const PARSER = 57588
const VISIBLE = 57589
const INVISIBLE = 57590
const BTREE = 57591
const HASH = 57592
const RTREE = 57593
const BSI = 57594
const ZONEMAP = 57595
const LEADING = 57596
const BOTH = 57597
const TRAILING = 57598
const UNKNOWN = 57599
const EXPIRE = 57600
const ACCOUNT = 57601
const UNLOCK = 57602
const DAY = 57603
const NEVER = 57604
const SECOND = 57605
const ASCII = 57606
const COALESCE = 57607
const COLLATION = 57608
const HOUR = 57609
const MICROSECOND = 57610
const MINUTE = 57611
const MONTH = 57612
const QUARTER = 57613
const REPEAT = 57614
const REVERSE = 57615
const ROW_COUNT = 57616
const WEEK = 57617
const REVOKE = 57618
const FUNCTION = 57619
const PRIVILEGES = 57620
const TABLESPACE = 57621
const EXECUTE = 57622
const SUPER = 57623
const GRANT = 57624
const OPTION = 57625
const REFERENCES = 57626
const REPLICATION = 57627
const SLAVE = 57628
const CLIENT = 57629
const USAGE = 57630
const RELOAD = 57631
const FILE = 57632
const TEMPORARY = 57633
const ROUTINE = 57634
const EVENT = 57635
const SHUTDOWN = 57636
const NULLX = 57637
const AUTO_INCREMENT = 57638
const APPROXNUM = 57639
const SIGNED = 57640
const UNSIGNED = 57641
const ZEROFILL = 57642
const USER = 57643
const IDENTIFIED = 57644
const CIPHER = 57645
const ISSUER = 57646
const X509 = 57647
const SUBJECT = 57648
const SAN = 57649
const REQUIRE = 57650
const SSL = 57651
const NONE = 57652
const PASSWORD = 57653
const MAX_QUERIES_PER_HOUR = 57654
const MAX_UPDATES_PER_HOUR = 57655
const MAX_CONNECTIONS_PER_HOUR = 57656
const MAX_USER_CONNECTIONS = 57657
const FORMAT = 57658
const VERBOSE = 57659
const CONNECTION = 57660
const LOAD = 57661
const INFILE = 57662
const TERMINATED = 57663
const OPTIONALLY = 57664
const ENCLOSED = 57665
const ESCAPED = 57666
const STARTING = 57667
const LINES = 57668
const DATABASES = 57669
const TABLES = 57670
const EXTENDED = 57671
const FULL = 57672
const PROCESSLIST = 57673
const FIELDS = 57674
const COLUMNS = 57675
const OPEN = 57676
const ERRORS = 57677
const WARNINGS = 57678
const INDEXES = 57679
const NAMES = 57680
const GLOBAL = 57681
const SESSION = 57682
const ISOLATION = 57683
const LEVEL = 57684
const READ = 57685
const WRITE = 57686
const ONLY = 57687
const REPEATABLE = 57688
const COMMITTED = 57689
const UNCOMMITTED = 57690
const SERIALIZABLE = 57691
const LOCAL = 57692
const EXCEPT = 57693
const CURRENT_TIMESTAMP = 57694
const DATABASE = 57695
const CURRENT_TIME = 57696
const LOCALTIME = 57697
const LOCALTIMESTAMP = 57698
const UTC_DATE = 57699
const UTC_TIME = 57700
const UTC_TIMESTAMP = 57701
const REPLACE = 57702
const CONVERT = 57703
const SEPARATOR = 57704
const CURRENT_DATE = 57705
const CURRENT_USER = 57706
const CURRENT_ROLE = 57707
const SECOND_MICROSECOND = 57708
const MINUTE_MICROSECOND = 57709
const MINUTE_SECOND = 57710
const HOUR_MICROSECOND = 57711
const HOUR_SECOND = 57712
const HOUR_MINUTE = 57713
const DAY_MICROSECOND = 57714
const DAY_SECOND = 57715
const DAY_MINUTE = 57716
const DAY_HOUR = 57717
const YEAR_MONTH = 57718
const SQL_TSI_HOUR = 57719
const SQL_TSI_DAY = 57720
const SQL_TSI_WEEK = 57721
const SQL_TSI_MONTH = 57722
const SQL_TSI_QUARTER = 57723
const SQL_TSI_YEAR = 57724
const SQL_TSI_SECOND = 57725
const SQL_TSI_MINUTE = 57726
const RECURSIVE = 57727
const MATCH = 57728
const AGAINST = 57729
const BOOLEAN = 57730
const LANGUAGE = 57731
const WITH = 57732
const QUERY = 57733
const EXPANSION = 57734
const ADDDATE = 57735
const BIT_AND = 57736
const BIT_OR = 57737
const BIT_XOR = 57738
const CAST = 57739
const COUNT = 57740
const APPROX_COUNT_DISTINCT = 57741
const APPROX_PERCENTILE = 57742
const CURDATE = 57743
const CURTIME = 57744
const DATE_ADD = 57745
const DATE_SUB = 57746
const EXTRACT = 57747
const GROUP_CONCAT = 57748
const MAX = 57749
const MID = 57750
const MIN = 57751
const NOW = 57752
const POSITION = 57753
const SESSION_USER = 57754
const STD = 57755
const STDDEV = 57756
const STDDEV_POP = 57757
const STDDEV_SAMP = 57758
const SUBDATE = 57759
const SUBSTR = 57760
const SUBSTRING = 57761
const SUM = 57762
const SYSDATE = 57763
const SYSTEM_USER = 57764
const TRANSLATE = 57765
const TRIM = 57766
const VARIANCE = 57767
const VAR_POP = 57768
const VAR_SAMP = 57769
const AVG = 57770
const ROW = 57771
const OUTFILE = 57772
const HEADER = 57773
const MAX_FILE_SIZE = 57774
const FORCE_QUOTE = 57775
const UNUSED = 57776

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"HEXNUM",
	"BIT_LITERAL",
	"FLOAT",
	"NULL",
	"TRUE",
	"FALSE",
	"EMPTY_FROM_CLAUSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6500

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	17, 354,
	-2, 335,
	-1, 57,
	189, 502,
	-2, 538,
	-1, 66,
	216, 244,
	217, 244,
	-2, 264,
	-1, 316,
	58, 1322,
	453, 1322,
	-2, 92,
	-1, 335,
	58, 665,
	453, 665,
	-2, 500,
	-1, 336,
	58, 493,
	453, 493,
	-2, 501,
	-1, 342,
	17, 355,
	-2, 318,
	-1, 572,
	17, 355,
	-2, 318,
	-1, 594,
	54, 1349,
	-2, 1356,
	-1, 602,
	54, 1350,
	-2, 1364,
	-1, 604,
	54, 1346,
	-2, 1366,
	-1, 605,
	54, 1347,
	-2, 1367,
	-1, 610,
	54, 1348,
	-2, 1373,
	-1, 611,
	54, 1351,
	-2, 1374,
	-1, 612,
	54, 1352,
	-2, 1375,
	-1, 613,
	54, 791,
	-2, 1376,
	-1, 614,
	54, 792,
	-2, 1377,
	-1, 615,
	54, 793,
	-2, 1378,
	-1, 617,
	54, 1353,
	-2, 1380,
	-1, 618,
	54, 810,
	-2, 1381,
	-1, 619,
	54, 809,
	-2, 1382,
	-1, 622,
	54, 1354,
	-2, 1385,
	-1, 623,
	54, 1355,
	-2, 1386,
	-1, 629,
	54, 884,
	-2, 1267,
	-1, 630,
	54, 895,
	-2, 1327,
	-1, 631,
	54, 897,
	-2, 1337,
	-1, 632,
	54, 885,
	-2, 1342,
	-1, 787,
	1, 528,
	56, 528,
	452, 528,
	-2, 535,
	-1, 910,
	17, 354,
	-2, 723,
	-1, 960,
	119, 1037,
	-2, 1035,
	-1, 962,
	119, 442,
	-2, 1032,
	-1, 963,
	119, 443,
	-2, 1033,
	-1, 1161,
	1, 529,
	56, 529,
	452, 529,
	-2, 535,
	-1, 1219,
	54, 940,
	-2, 1344,
	-1, 1220,
	54, 941,
	-2, 1345,
	-1, 1619,
	75, 535,
	115, 535,
	149, 535,
	152, 535,
	-2, 575,
	-1, 1621,
	250, 690,
	-2, 671,
	-1, 1742,
	75, 535,
	115, 535,
	149, 535,
	152, 535,
	-2, 576,
	-1, 1770,
	250, 690,
	-2, 672,
	-1, 2162,
	55, 550,
	56, 550,
	-2, 535,
	-1, 2166,
	55, 550,
	56, 550,
	-2, 535,
	-1, 2178,
	55, 554,
	56, 554,
	-2, 535,
	-1, 2181,
	55, 555,
	56, 555,
	-2, 535,
}

const yyPrivate = 57344

const yyLast = 20072

var yyAct = [...]int{
	777, 2166, 1222, 2168, 2165, 2173, 2139, 635, 2113, 1815,
	766, 2003, 633, 653, 2084, 2128, 1782, 2065, 1979, 2066,
	559, 1982, 1738, 1956, 84, 524, 1613, 292, 1148, 840,
	1911, 1813, 557, 1814, 1805, 303, 87, 1967, 1507, 462,
	84, 305, 1884, 1771, 393, 1680, 296, 19, 1397, 337,
	337, 1697, 1804, 1800, 763, 512, 1700, 583, 1709, 83,
	1503, 593, 823, 1491, 1705, 1540, 663, 52, 1373, 1519,
	1512, 1531, 1666, 394, 1558, 1508, 1154, 1547, 1557, 415,
	718, 942, 634, 84, 1442, 298, 528, 847, 567, 957,
	1223, 960, 951, 52, 943, 1307, 1404, 1293, 1210, 644,
	3, 952, 1237, 312, 312, 760, 295, 12, 293, 6,
	294, 5, 1746, 816, 1367, 1162, 779, 1224, 428, 343,
	51, 761, 586, 342, 1221, 735, 500, 19, 793, 307,
	791, 1130, 792, 285, 1121, 464, 842, 288, 439, 820,
	879, 404, 406, 849, 414, 568, 385, 52, 309, 752,
	1137, 308, 450, 80, 299, 479, 549, 1829, 1734, 1612,
	774, 945, 533, 585, 1133, 535, 79, 2031, 23, 39,
	24, 1349, 412, 1492, 1368, 79, 2020, 531, 510, 339,
	1356, 425, 810, 79, 499, 77, 65, 12, 344, 6,
	72, 5, 79, 400, 79, 362, 405, 402, 79, 2053,
	23, 39, 24, 805, 806, 355, 1359, 715, 372, 40,
	712, 795, 536, 79, 75, 23, 39, 24, 769, 1468,
	410, 409, 523, 75, 2051, 522, 525, 526, 525, 526,
	494, 714, 386, 2069, 2070, 1912, 1913, 1914, 1915, 490,
	75, 2088, 75, 1909, 1495, 1991, 75, 1496, 1994, 1497,
	408, 1832, 1614, 773, 1336, 442, 1520, 1521, 1522, 1523,
	433, 75, 401, 1376, 1374, 1371, 1375, 1377, 1541, 1370,
	1369, 817, 1376, 1374, 1544, 1375, 1377, 1135, 373, 1883,
	68, 69, 1133, 70, 71, 84, 432, 1791, 1790, 481,
	480, 485, 1787, 1731, 491, 431, 1609, 1524, 84, 492,
	493, 1900, 753, 2030, 1692, 1688, 2079, 1691, 2174, 1890,
	1213, 1214, 1215, 2158, 2093, 2055, 357, 2050, 2005, 486,
	1543, 1211, 1981, 2100, 466, 2028, 354, 353, 755, 1878,
	2149, 1847, 2068, 446, 1968, 1969, 1970, 1972, 1971, 1846,
	467, 57, 67, 76, 341, 38, 2011, 349, 2001, 2002,
	407, 2005, 369, 2057, 2058, 1559, 52, 52, 406, 532,
	545, 66, 64, 63, 488, 1357, 2175, 2033, 2034, 2169,
	430, 472, 2140, 442, 1379, 1380, 1381, 1382, 1570, 1567,
	1568, 1569, 337, 1835, 1564, 427, 1563, 1562, 1560, 394,
	394, 394, 511, 489, 521, 520, 1689, 483, 1443, 513,
	1353, 534, 411, 444, 443, 514, 1989, 516, 754, 484,
	487, 505, 405, 1184, 415, 1141, 781, 589, 589, 482,
	1410, 1214, 1215, 1516, 1941, 471, 562, 435, 436, 1869,
	717, 515, 476, 1610, 1873, 297, 312, 352, 1707, 1706,
	1182, 1181, 1395, 1561, 1180, 539, 732, 348, 432, 84,
	84, 84, 84, 48, 537, 538, 808, 736, 809, 49,
	749, 1179, 807, 374, 2131, 375, 2153, 2117, 570, 831,
	1498, 1407, 1347, 713, 1346, 1335, 337, 337, 432, 337,
	1329, 1174, 1146, 1115, 466, 860, 720, 767, 564, 502,
	445, 517, 1980, 52, 525, 526, 50, 337, 337, 356,
	467, 366, 429, 750, 52, 2056, 895, 588, 588, 367,
	2032, 544, 529, 337, 1212, 337, 1492, 787, 84, 525,
	526, 444, 443, 571, 573, 1484, 437, 402, 572, 2135,
	504, 312, 800, 768, 337, 1517, 786, 1376, 1374, 818,
	1375, 1377, 2126, 548, 552, 1136, 337, 394, 556, 337,
	478, 1687, 1156, 788, 1565, 1566, 798, 1690, 1532, 527,
	2015, 530, 1350, 2132, 518, 832, 782, 78, 496, 312,
	576, 577, 578, 579, 580, 723, 78, 337, 337, 839,
	84, 710, 415, 1331, 78, 848, 582, 569, 801, 857,
	1186, 1119, 401, 78, 776, 78, 1486, 780, 434, 78,
	312, 843, 771, 737, 738, 739, 740, 789, 790, 796,
	397, 748, 797, 547, 78, 841, 1591, 844, 783, 772,
	854, 553, 554, 555, 1409, 765, 756, 1874, 1875, 775,
	1513, 1516, 312, 1942, 1944, 1945, 1946, 1943, 1871, 802,
	824, 912, 1870, 824, 785, 770, 1485, 824, 727, 728,
	1385, 550, 519, 377, 1132, 1226, 1225, 794, 1880, 1308,
	834, 397, 551, 923, 364, 1365, 365, 372, 856, 854,
	819, 363, 361, 360, 368, 814, 370, 371, 1879, 2129,
	2130, 861, 837, 1308, 399, 1448, 784, 1387, 418, 423,
	424, 1670, 826, 815, 833, 1665, 830, 1864, 2148, 835,
	1952, 1841, 379, 378, 1131, 910, 2164, 838, 1950, 2145,
	827, 828, 829, 2110, 73, 949, 949, 954, 376, 836,
	2146, 1234, 913, 914, 915, 916, 845, 1948, 1451, 911,
	1236, 1450, 731, 1739, 848, 399, 1951, 919, 1387, 2147,
	730, 962, 1231, 1517, 1949, 917, 2094, 2040, 1510, 563,
	1987, 1986, 1511, 1514, 855, 856, 854, 963, 938, 405,
	1958, 1938, 887, 1947, 1386, 894, 893, 903, 904, 896,
	897, 898, 899, 900, 901, 902, 895, 468, 469, 470,
	560, 406, 84, 84, 1417, 468, 469, 470, 560, 403,
	380, 52, 855, 856, 854, 292, 558, 1937, 468, 469,
	470, 1682, 1176, 1936, 1515, 1935, 2089, 1129, 1934, 931,
	956, 337, 1931, 843, 1925, 1117, 948, 1151, 1153, 1922,
	1921, 1116, 1149, 1150, 468, 469, 470, 560, 1887, 844,
	1830, 1823, 337, 1822, 2078, 405, 561, 1821, 955, 855,
	856, 854, 402, 2123, 561, 1820, 420, 421, 422, 1817,
	1676, 589, 1300, 84, 941, 1675, 961, 1683, 1674, 1206,
	1673, 1208, 1113, 1480, 1114, 312, 1298, 1299, 1297, 1165,
	1166, 1167, 1312, 721, 1126, 855, 856, 854, 1168, 1177,
	1232, 1233, 2061, 561, 1957, 2022, 1191, 2009, 894, 893,
	903, 904, 896, 897, 898, 899, 900, 901, 902, 895,
	1163, 2008, 1140, 1939, 1932, 938, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 824, 824,
	824, 1302, 1303, 1928, 1170, 1216, 1172, 1173, 1171, 1169,
	1199, 794, 1927, 1926, 1885, 1318, 1866, 1724, 1202, 1831,
	1183, 588, 468, 469, 470, 1203, 1204, 1205, 1398, 1320,
	893, 903, 904, 896, 897, 898, 899, 900, 901, 902,
	895, 1192, 1642, 1193, 1737, 1735, 1229, 1187, 1188, 1189,
	855, 856, 854, 1200, 1723, 1684, 1529, 1528, 1593, 1272,
	896, 897, 898, 899, 900, 901, 902, 895, 1430, 1774,
	1301, 1227, 1228, 1527, 1230, 2062, 855, 856, 854, 2178,
	1267, 1268, 1269, 1270, 1271, 1295, 1526, 1277, 1278, 1279,
	1280, 1309, 1143, 1142, 939, 934, 1314, 855, 856, 854,
	2156, 933, 1323, 1985, 1777, 1310, 1311, 2037, 722, 2036,
	1772, 1458, 2016, 1429, 1413, 1457, 1785, 1786, 1413, 2183,
	1965, 1773, 1902, 1580, 1334, 855, 856, 854, 1630, 1901,
	1313, 1315, 1316, 2177, 2176, 855, 856, 854, 1322, 1725,
	1319, 1722, 1321, 1649, 1653, 1655, 1657, 1659, 1660, 1662,
	1721, 1570, 1567, 1568, 1569, 1778, 1696, 1644, 1645, 1646,
	1647, 1628, 1629, 1650, 1619, 1631, 1601, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1648, 898, 899,
	900, 901, 902, 895, 1546, 1652, 1654, 1656, 1658, 1661,
	855, 856, 854, 1139, 2159, 1545, 1337, 1461, 1145, 432,
	864, 865, 866, 867, 868, 869, 870, 862, 736, 1907,
	2155, 2154, 1459, 1454, 337, 346, 1643, 337, 1139, 2143,
	432, 906, 337, 909, 1456, 345, 1455, 1362, 1453, 1352,
	1422, 855, 856, 854, 1784, 1144, 1509, 907, 908, 905,
	1895, 894, 893, 903, 904, 896, 897, 898, 899, 900,
	901, 902, 895, 2121, 1419, 1392, 1139, 2142, 855, 856,
	854, 1780, 855, 856, 854, 337, 575, 2116, 2115, 1897,
	2076, 1351, 1897, 2071, 1412, 84, 84, 1195, 2059, 1403,
	855, 856, 854, 1779, 1781, 2048, 2047, 1394, 1384, 1364,
	1341, 1897, 2026, 1342, 1897, 2025, 1344, 1317, 894, 893,
	903, 904, 896, 897, 898, 899, 900, 901, 902, 895,
	1400, 1401, 1460, 1418, 751, 1360, 1361, 1339, 780, 1897,
	2024, 402, 574, 19, 1340, 1824, 2134, 1354, 1717, 1388,
	1897, 2023, 2014, 2013, 495, 1348, 473, 1389, 474, 1390,
	474, 1787, 852, 52, 1363, 1963, 1964, 855, 856, 854,
	855, 856, 854, 1775, 1163, 1963, 1962, 1383, 894, 893,
	903, 904, 896, 897, 898, 899, 900, 901, 902, 895,
	1396, 1413, 1393, 1906, 1905, 1904, 1903, 1402, 1716, 1437,
	1399, 1715, 719, 12, 1391, 6, 850, 5, 1897, 1896,
	1408, 475, 1440, 1441, 1324, 1414, 1599, 1411, 1415, 1416,
	855, 856, 854, 855, 856, 854, 1198, 1604, 949, 1620,
	1472, 949, 1413, 1585, 1475, 1413, 1571, 1651, 855, 856,
	854, 1413, 1421, 1133, 848, 1118, 337, 1413, 1420, 1602,
	337, 337, 1198, 1338, 337, 476, 1478, 1406, 1424, 1425,
	1426, 1427, 1428, 910, 1432, 1333, 1332, 432, 1433, 1434,
	1435, 1436, 1479, 1469, 1327, 1326, 1506, 1198, 1197, 84,
	476, 1439, 1139, 1138, 725, 724, 1330, 1305, 1467, 1195,
	1147, 581, 79, 52, 1474, 1438, 1445, 1295, 546, 1449,
	2179, 2125, 1447, 2119, 1487, 1489, 2101, 84, 1551, 2163,
	1471, 1590, 2098, 1462, 1530, 1452, 824, 405, 2096, 1464,
	1463, 1584, 824, 1473, 1583, 1476, 2039, 1477, 1481, 1470,
	1582, 1482, 1977, 855, 856, 854, 1961, 1959, 1954, 1916,
	75, 1525, 1699, 855, 856, 854, 855, 856, 854, 1893,
	1892, 1483, 855, 856, 854, 1891, 1888, 1533, 1534, 1490,
	903, 904, 896, 897, 898, 899, 900, 901, 902, 895,
	1535, 1536, 1581, 1598, 1877, 1862, 1801, 1798, 1537, 1797,
	1701, 584, 1710, 1889, 1595, 1577, 1713, 1678, 1671, 337,
	1296, 1597, 1550, 1576, 855, 856, 854, 75, 1366, 1551,
	1343, 84, 1325, 1196, 1553, 1185, 1589, 855, 856, 854,
	1664, 1575, 1178, 940, 1572, 855, 856, 854, 937, 936,
	935, 1578, 1579, 1159, 1586, 1574, 1588, 932, 880, 1594,
	929, 927, 926, 855, 856, 854, 1618, 1573, 925, 1592,
	920, 1600, 892, 1605, 891, 1596, 1617, 855, 856, 854,
	1603, 890, 1695, 889, 1681, 888, 1556, 886, 885, 855,
	856, 854, 884, 883, 1679, 882, 52, 1608, 1668, 881,
	2106, 878, 1555, 322, 877, 321, 325, 317, 855, 856,
	854, 1627, 1667, 1663, 1667, 876, 1669, 313, 1672, 875,
	874, 873, 872, 1677, 855, 856, 854, 871, 332, 733,
	306, 716, 1554, 477, 2104, 1686, 2067, 337, 337, 1378,
	1304, 84, 719, 1194, 1702, 1703, 1704, 1125, 1685, 1122,
	1123, 432, 497, 1743, 855, 856, 854, 1711, 1128, 1714,
	1506, 1708, 855, 856, 854, 745, 1127, 742, 741, 1694,
	746, 452, 455, 456, 457, 453, 1732, 454, 458, 1719,
	338, 1328, 452, 455, 456, 457, 453, 1726, 454, 458,
	1788, 1728, 1729, 743, 2081, 1727, 1806, 1808, 744, 1806,
	1806, 1718, 1730, 565, 566, 1164, 1740, 447, 1792, 432,
	1493, 1768, 1795, 1796, 1720, 1793, 1794, 501, 452, 455,
	456, 457, 453, 824, 454, 458, 1799, 1149, 1150, 1803,
	1802, 1807, 894, 893, 903, 904, 896, 897, 898, 899,
	900, 901, 902, 895, 747, 1500, 456, 457, 1606, 1157,
	804, 1809, 1810, 1833, 1499, 1607, 1811, 894, 893, 903,
	904, 896, 897, 898, 899, 900, 901, 902, 895, 846,
	460, 1112, 1819, 1226, 1225, 503, 1837, 345, 315, 314,
	318, 507, 508, 2120, 2044, 2042, 320, 1996, 1827, 1995,
	1993, 1919, 1812, 1917, 1736, 1693, 1616, 1615, 324, 1549,
	346, 506, 1548, 1405, 719, 2108, 2107, 459, 1423, 1345,
	345, 284, 757, 2107, 2108, 358, 1, 1865, 84, 1273,
	509, 1840, 729, 417, 441, 726, 440, 438, 74, 1681,
	1306, 1238, 664, 944, 950, 1955, 2080, 2112, 2038, 1788,
	2083, 652, 1808, 636, 1863, 1825, 1838, 1839, 1988, 1842,
	1843, 1844, 1845, 1881, 1867, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1494,
	1920, 1886, 1908, 1990, 1910, 1358, 1894, 1826, 1355, 498,
	1465, 1466, 677, 667, 928, 668, 711, 419, 666, 1818,
	1542, 1953, 347, 416, 319, 323, 758, 1898, 327, 759,
	359, 466, 329, 330, 331, 1882, 1611, 333, 334, 1789,
	1918, 1712, 1698, 1235, 2172, 2162, 2138, 467, 2118, 432,
	1933, 2004, 432, 432, 432, 2157, 2049, 2099, 432, 2092,
	52, 2000, 1834, 310, 811, 540, 383, 1899, 1978, 391,
	734, 1518, 1923, 1924, 1372, 1155, 1134, 1998, 1929, 1930,
	1966, 1587, 762, 1974, 1975, 1976, 311, 1984, 1973, 2029,
	1960, 1983, 350, 1158, 351, 1161, 1160, 1217, 863, 1294,
	1999, 1992, 894, 893, 903, 904, 896, 897, 898, 899,
	900, 901, 902, 895, 930, 84, 2006, 2007, 918, 591,
	1446, 643, 432, 637, 1539, 1538, 1783, 799, 26, 461,
	853, 958, 665, 1444, 86, 1175, 959, 1997, 432, 1828,
	2085, 651, 650, 649, 2012, 648, 451, 449, 448, 302,
	841, 301, 851, 2021, 894, 893, 903, 904, 896, 897,
	898, 899, 900, 901, 902, 895, 2064, 2063, 2018, 2027,
	2019, 1733, 1876, 1940, 2035, 1872, 2043, 2041, 2045, 2046,
	1868, 2010, 1742, 1741, 1769, 1770, 1776, 2052, 2054, 1626,
	1622, 1624, 1625, 1623, 1621, 1504, 1505, 1502, 2060, 1501,
	2087, 1124, 1120, 946, 953, 2072, 2073, 2074, 2075, 2091,
	2017, 426, 778, 2086, 81, 300, 1201, 11, 18, 17,
	16, 47, 46, 45, 2095, 44, 2097, 2090, 15, 8,
	43, 42, 41, 14, 13, 37, 36, 35, 34, 33,
	32, 2102, 31, 30, 2105, 2103, 29, 28, 27, 2114,
	9, 56, 55, 2109, 54, 53, 20, 432, 21, 432,
	2111, 22, 2077, 62, 61, 60, 767, 2122, 767, 2124,
	59, 58, 25, 10, 2127, 7, 4, 2087, 2137, 2,
	0, 0, 0, 0, 2133, 0, 432, 0, 0, 0,
	2086, 2136, 2141, 0, 0, 767, 2144, 0, 0, 0,
	0, 0, 2114, 2150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2160, 0, 0, 0, 0, 0,
	0, 0, 2161, 0, 0, 0, 0, 0, 0, 0,
	2171, 2170, 0, 0, 0, 0, 0, 0, 0, 0,
	2181, 0, 2182, 2180, 0, 2171, 0, 0, 0, 0,
	0, 1075, 1062, 0, 1024, 1077, 996, 1012, 1085, 1014,
	1015, 1049, 974, 1033, 211, 1010, 966, 999, 1000, 968,
	1007, 969, 997, 1026, 155, 995, 1065, 1036, 180, 1083,
	182, 0, 0, 240, 195, 0, 2152, 1029, 1067, 1031,
	1054, 1023, 1050, 982, 1043, 1078, 1011, 1047, 1079, 0,
	0, 0, 0, 468, 469, 470, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 1046, 1072, 1009, 0,
	0, 983, 1076, 1030, 1048, 0, 967, 1044, 0, 972,
	975, 1084, 1070, 1004, 1005, 0, 0, 0, 0, 0,
	0, 0, 1027, 1032, 1051, 1020, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1001, 0, 1040, 0, 0,
	0, 977, 973, 0, 1025, 0, 129, 245, 259, 139,
	236, 272, 143, 243, 135, 210, 232, 131, 257, 242,
	192, 174, 175, 130, 0, 227, 153, 166, 150, 208,
	0, 1074, 1111, 149, 275, 976, 267, 133, 134, 266,
	207, 254, 258, 193, 187, 132, 256, 191, 186, 178,
	157, 170, 220, 185, 221, 171, 197, 196, 198, 1095,
	1096, 1097, 1098, 1099, 1107, 1108, 0, 981, 0, 1002,
	1052, 0, 965, 1061, 1068, 1022, 269, 1071, 1019, 1018,
	1102, 0, 1101, 244, 1103, 1104, 179, 1066, 998, 1008,
	1003, 1006, 230, 213, 1073, 1039, 218, 228, 183, 255,
	222, 260, 246, 268, 1055, 223, 125, 247, 152, 194,
	136, 137, 148, 154, 156, 158, 159, 203, 204, 216,
	235, 248, 249, 250, 151, 144, 229, 145, 168, 146,
	126, 237, 147, 127, 217, 253, 1100, 165, 225, 190,
	128, 189, 219, 252, 251, 276, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1109, 0, 1110,
	281, 162, 964, 264, 0, 209, 1063, 970, 980, 978,
	1016, 1041, 1042, 205, 280, 1057, 1060, 1058, 1086, 233,
	0, 0, 0, 0, 0, 173, 215, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	0, 241, 262, 274, 265, 1017, 989, 1028, 273, 992,
	990, 1056, 991, 1045, 1088, 199, 200, 201, 202, 1013,
	0, 142, 1037, 1021, 1089, 1090, 1091, 1092, 1093, 1094,
	994, 1069, 161, 167, 0, 169, 141, 214, 164, 271,
	176, 206, 172, 238, 177, 184, 226, 270, 212, 231,
	140, 261, 239, 188, 163, 988, 993, 987, 1034, 1035,
	1080, 1081, 1082, 1053, 979, 1064, 984, 986, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1059, 1038,
	124, 0, 181, 1087, 224, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 672, 0,
	0, 0, 1105, 1106, 277, 278, 279, 263, 211, 0,
	0, 0, 0, 0, 645, 0, 0, 0, 155, 0,
	0, 0, 180, 0, 182, 0, 0, 240, 195, 0,
	0, 0, 0, 689, 695, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 0, 0, 592, 679, 678,
	654, 0, 0, 0, 138, 655, 0, 660, 0, 656,
	659, 657, 658, 0, 0, 681, 0, 0, 0, 0,
	0, 590, 642, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 639, 640, 0, 0, 0,
	0, 673, 0, 641, 0, 0, 675, 0, 662, 0,
	129, 245, 259, 139, 236, 272, 143, 243, 135, 210,
	232, 131, 257, 242, 192, 174, 175, 130, 0, 227,
	153, 166, 150, 208, 661, 671, 676, 149, 631, 669,
	267, 133, 134, 266, 207, 254, 258, 193, 187, 132,
	256, 191, 186, 178, 157, 170, 220, 185, 221, 171,
	197, 196, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 687, 0, 0, 0, 244, 0, 0,
	179, 0, 0, 0, 670, 0, 230, 213, 698, 0,
	218, 228, 183, 255, 222, 260, 246, 268, 0, 223,
	125, 247, 152, 194, 136, 137, 148, 154, 156, 158,
	159, 203, 204, 216, 235, 248, 249, 250, 151, 144,
	229, 145, 168, 146, 126, 237, 147, 127, 217, 253,
	0, 165, 225, 190, 128, 189, 219, 252, 251, 276,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1275, 1274, 1276, 281, 162, 0, 264, 685, 209,
	697, 680, 682, 683, 686, 690, 691, 629, 632, 692,
	694, 696, 699, 233, 0, 0, 0, 0, 0, 173,
	215, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 262, 274, 630, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 674, 199,
	200, 201, 202, 688, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 167, 0, 169,
	141, 214, 164, 271, 176, 206, 172, 238, 177, 184,
	226, 270, 212, 231, 140, 261, 239, 188, 163, 705,
	684, 704, 706, 707, 703, 708, 709, 693, 647, 0,
	701, 700, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 181, 0, 224, 160,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 103, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 0, 0, 277, 278,
	279, 263, 79, 0, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	645, 0, 0, 0, 155, 0, 0, 0, 180, 0,
	182, 0, 0, 240, 195, 0, 0, 0, 0, 689,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	638, 0, 0, 592, 679, 678, 654, 0, 0, 0,
	138, 655, 0, 660, 0, 656, 659, 657, 658, 0,
	0, 681, 0, 0, 0, 0, 0, 590, 642, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 639, 640, 0, 0, 0, 0, 673, 0, 641,
	0, 0, 675, 0, 662, 0, 129, 245, 259, 139,
	236, 272, 143, 243, 135, 210, 232, 131, 257, 242,
	192, 174, 175, 130, 0, 227, 153, 166, 150, 208,
	661, 671, 676, 149, 631, 669, 267, 133, 134, 266,
	207, 254, 258, 193, 187, 132, 256, 191, 186, 178,
	157, 170, 220, 185, 221, 171, 197, 196, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 687,
	0, 0, 0, 244, 0, 0, 179, 0, 0, 0,
	670, 0, 230, 213, 698, 0, 218, 228, 183, 255,
	222, 260, 246, 268, 0, 223, 125, 247, 152, 194,
	136, 137, 148, 154, 156, 158, 159, 203, 204, 216,
	235, 248, 249, 250, 151, 144, 229, 145, 168, 146,
	126, 237, 147, 127, 217, 253, 0, 165, 225, 190,
	128, 189, 219, 252, 251, 276, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 162, 0, 264, 685, 209, 697, 680, 682, 683,
	686, 690, 691, 629, 632, 692, 694, 696, 699, 233,
	0, 0, 0, 0, 0, 173, 215, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 262, 274, 630, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 674, 199, 200, 201, 202, 688,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 167, 0, 169, 141, 214, 164, 271,
	176, 206, 172, 238, 177, 184, 226, 270, 212, 231,
	140, 261, 239, 188, 163, 705, 684, 704, 706, 707,
	703, 708, 709, 693, 647, 0, 701, 700, 702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 181, 78, 224, 160, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 103, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 672, 0, 277, 278, 279, 263, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 645, 0,
	0, 0, 155, 825, 0, 0, 180, 0, 182, 0,
	0, 240, 195, 0, 0, 0, 0, 689, 695, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 638, 0,
	0, 592, 679, 678, 654, 0, 0, 0, 138, 655,
	0, 660, 0, 656, 659, 657, 658, 0, 0, 681,
	0, 0, 0, 0, 0, 590, 642, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 639,
	640, 0, 0, 0, 0, 673, 0, 641, 0, 0,
	822, 0, 662, 0, 129, 245, 259, 139, 236, 272,
	143, 243, 135, 210, 232, 131, 257, 242, 192, 174,
	175, 130, 0, 227, 153, 166, 150, 208, 661, 671,
	676, 149, 631, 669, 267, 133, 134, 266, 207, 254,
	258, 193, 187, 132, 256, 191, 186, 178, 157, 170,
	220, 185, 221, 171, 197, 196, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 687, 0, 0,
	0, 244, 0, 0, 179, 0, 0, 0, 670, 0,
	230, 213, 698, 0, 218, 228, 183, 255, 222, 260,
	246, 268, 0, 223, 125, 247, 152, 194, 136, 137,
	148, 154, 156, 158, 159, 203, 204, 216, 235, 248,
	249, 250, 151, 144, 229, 145, 168, 146, 126, 237,
	147, 127, 217, 253, 0, 165, 225, 190, 128, 189,
	219, 252, 251, 276, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 162,
	0, 264, 685, 209, 697, 680, 682, 683, 686, 690,
	691, 629, 632, 692, 694, 696, 699, 233, 0, 0,
	0, 0, 0, 173, 215, 0, 234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	262, 274, 630, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 674, 199, 200, 201, 202, 688, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 167, 0, 169, 141, 214, 164, 271, 176, 206,
	172, 238, 177, 184, 226, 270, 212, 231, 140, 261,
	239, 188, 163, 705, 684, 704, 706, 707, 703, 708,
	709, 693, 647, 0, 701, 700, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	181, 0, 224, 160, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607, 608, 103,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	672, 0, 277, 278, 279, 263, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 645, 0, 0, 0,
	155, 2151, 0, 0, 180, 0, 182, 0, 0, 240,
	195, 0, 0, 0, 0, 689, 695, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 638, 0, 0, 592,
	679, 678, 654, 0, 0, 0, 138, 655, 0, 660,
	0, 656, 659, 657, 658, 0, 0, 681, 0, 0,
	0, 0, 0, 590, 642, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 639, 640, 0,
	0, 0, 0, 673, 0, 641, 0, 0, 675, 0,
	662, 0, 129, 245, 259, 139, 236, 272, 143, 243,
	135, 210, 232, 131, 257, 242, 192, 174, 175, 130,
	0, 227, 153, 166, 150, 208, 661, 671, 676, 149,
	631, 669, 267, 133, 134, 266, 207, 254, 258, 193,
	187, 132, 256, 191, 186, 178, 157, 170, 220, 185,
	221, 171, 197, 196, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 687, 0, 0, 0, 244,
	0, 0, 179, 0, 0, 0, 670, 0, 230, 213,
	698, 0, 218, 228, 183, 255, 222, 260, 246, 268,
	0, 223, 125, 247, 152, 194, 136, 137, 148, 154,
	156, 158, 159, 203, 204, 216, 235, 248, 249, 250,
	151, 144, 229, 145, 168, 146, 126, 237, 147, 127,
	217, 253, 0, 165, 225, 190, 128, 189, 219, 252,
	251, 276, 282, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 162, 0, 264,
	685, 209, 697, 680, 682, 683, 686, 690, 691, 629,
	632, 692, 694, 696, 699, 233, 0, 0, 0, 0,
	0, 173, 215, 0, 234, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 262, 274,
	630, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	674, 199, 200, 201, 202, 688, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 167,
	0, 169, 141, 214, 164, 271, 176, 206, 172, 238,
	177, 184, 226, 270, 212, 231, 140, 261, 239, 188,
	163, 705, 684, 704, 706, 707, 703, 708, 709, 693,
	647, 0, 701, 700, 702, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 181, 0,
	224, 160, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, 608, 103, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 672, 0,
	277, 278, 279, 263, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 645, 0, 0, 0, 155, 825,
	0, 0, 180, 0, 182, 0, 0, 240, 195, 0,
	0, 0, 0, 689, 695, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 0, 0, 592, 679, 678,
	654, 0, 0, 0, 138, 655, 0, 660, 0, 656,
	659, 657, 658, 0, 0, 681, 0, 0, 0, 0,
	0, 590, 642, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 639, 640, 0, 0, 0,
	0, 673, 0, 641, 0, 0, 675, 0, 662, 0,
	129, 245, 259, 139, 236, 272, 143, 243, 135, 210,
	232, 131, 257, 242, 192, 174, 175, 130, 0, 227,
	153, 166, 150, 208, 661, 671, 676, 149, 631, 669,
	267, 133, 134, 266, 207, 254, 258, 193, 187, 132,
	256, 191, 186, 178, 157, 170, 220, 185, 221, 171,
	197, 196, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 687, 0, 0, 0, 244, 0, 0,
	179, 0, 0, 0, 670, 0, 230, 213, 698, 0,
	218, 228, 183, 255, 222, 260, 246, 268, 0, 223,
	125, 247, 152, 194, 136, 137, 148, 154, 156, 158,
	159, 203, 204, 216, 235, 248, 249, 250, 151, 144,
	229, 145, 168, 146, 126, 237, 147, 127, 217, 253,
	0, 165, 225, 190, 128, 189, 219, 252, 251, 276,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 162, 0, 264, 685, 209,
	697, 680, 682, 683, 686, 690, 691, 629, 632, 692,
	694, 696, 699, 233, 0, 0, 0, 0, 0, 173,
	215, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 262, 274, 630, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 674, 199,
	200, 201, 202, 688, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 167, 0, 169,
	141, 214, 164, 271, 176, 206, 172, 238, 177, 184,
	226, 270, 212, 231, 140, 261, 239, 188, 163, 705,
	684, 704, 706, 707, 703, 708, 709, 693, 647, 0,
	701, 700, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 181, 0, 224, 160,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 103, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 0, 0, 277, 278,
	279, 263, 672, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 645, 0,
	0, 0, 155, 0, 0, 0, 180, 0, 182, 0,
	0, 240, 195, 0, 0, 0, 0, 689, 695, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 638, 0,
	0, 592, 679, 678, 654, 0, 0, 0, 138, 655,
	0, 660, 0, 656, 659, 657, 658, 0, 0, 681,
	0, 0, 0, 0, 0, 590, 642, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 639,
	640, 0, 0, 0, 0, 673, 0, 641, 0, 0,
	675, 0, 662, 0, 129, 245, 259, 139, 236, 272,
	143, 243, 135, 210, 232, 131, 257, 242, 192, 174,
	175, 130, 0, 227, 153, 166, 150, 208, 661, 671,
	676, 149, 631, 669, 267, 133, 134, 266, 207, 254,
	258, 193, 187, 132, 256, 191, 186, 178, 157, 170,
	220, 185, 221, 171, 197, 196, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 687, 0, 0,
	0, 244, 0, 0, 179, 0, 0, 0, 670, 0,
	230, 213, 698, 0, 218, 228, 183, 255, 222, 260,
	246, 268, 0, 223, 125, 247, 152, 194, 136, 137,
	148, 154, 156, 158, 159, 203, 204, 216, 235, 248,
	249, 250, 151, 144, 229, 145, 168, 146, 126, 237,
	147, 127, 217, 253, 0, 165, 225, 190, 128, 189,
	219, 252, 251, 276, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 162,
	0, 264, 685, 209, 697, 680, 682, 683, 686, 690,
	691, 629, 632, 692, 694, 696, 699, 233, 0, 0,
	0, 0, 0, 173, 215, 0, 234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	262, 274, 630, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 674, 199, 200, 201, 202, 688, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 167, 0, 169, 141, 214, 164, 271, 176, 206,
	172, 238, 177, 184, 226, 270, 212, 231, 140, 261,
	239, 188, 163, 705, 684, 704, 706, 707, 703, 708,
	709, 693, 647, 0, 701, 700, 702, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	181, 0, 224, 160, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607, 608, 103,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	672, 0, 277, 278, 279, 263, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 645, 0, 0, 0,
	155, 0, 0, 0, 180, 0, 182, 0, 0, 240,
	195, 0, 0, 0, 0, 689, 695, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 638, 0, 0, 592,
	679, 678, 654, 0, 0, 0, 138, 655, 0, 660,
	0, 656, 659, 657, 658, 0, 0, 681, 0, 0,
	0, 0, 0, 590, 642, 0, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 639, 640, 587,
	0, 0, 0, 673, 0, 641, 0, 0, 675, 0,
	662, 0, 129, 245, 259, 139, 236, 272, 143, 243,
	135, 210, 232, 131, 257, 242, 192, 174, 175, 130,
	0, 227, 153, 166, 150, 208, 661, 671, 676, 149,
	631, 669, 267, 133, 134, 266, 207, 254, 258, 193,
	187, 132, 256, 191, 186, 178, 157, 170, 220, 185,
	221, 171, 197, 196, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 687, 0, 0, 0, 244,
	0, 0, 179, 0, 0, 0, 670, 0, 230, 213,
	698, 0, 218, 228, 183, 255, 222, 260, 246, 268,
	0, 223, 125, 247, 152, 194, 136, 137, 148, 154,
	156, 158, 159, 203, 204, 216, 235, 248, 249, 250,
	151, 144, 229, 145, 168, 146, 126, 237, 147, 127,
	217, 253, 0, 165, 225, 190, 128, 189, 219, 252,
	251, 276, 282, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 162, 0, 264,
	685, 209, 697, 680, 682, 683, 686, 690, 691, 629,
	632, 692, 694, 696, 699, 233, 0, 0, 0, 0,
	0, 173, 215, 0, 234, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 262, 274,
	630, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	674, 199, 200, 201, 202, 688, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 167,
	0, 169, 141, 214, 164, 271, 176, 206, 172, 238,
	177, 184, 226, 270, 212, 231, 140, 261, 239, 188,
	163, 705, 684, 704, 706, 707, 703, 708, 709, 693,
	647, 0, 701, 700, 702, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 181, 0,
	224, 160, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, 608, 103, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 672, 0,
	277, 278, 279, 263, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 645, 0, 0, 0, 155, 0,
	0, 0, 180, 0, 182, 0, 0, 240, 195, 0,
	0, 0, 0, 689, 695, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 0, 0, 592, 679, 678,
	654, 0, 0, 0, 138, 655, 0, 660, 0, 656,
	659, 657, 658, 0, 0, 681, 0, 0, 0, 0,
	0, 590, 642, 0, 646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 639, 640, 0, 0, 0,
	0, 673, 0, 641, 0, 0, 675, 0, 662, 0,
	129, 245, 259, 139, 236, 272, 143, 243, 135, 210,
	232, 131, 257, 242, 192, 174, 175, 130, 0, 227,
	153, 166, 150, 208, 661, 671, 676, 149, 631, 669,
	267, 133, 134, 266, 207, 254, 258, 193, 187, 132,
	256, 191, 186, 178, 157, 170, 220, 185, 221, 171,
	197, 196, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 687, 0, 0, 0, 244, 0, 0,
	179, 0, 0, 0, 670, 0, 230, 213, 698, 0,
	218, 228, 183, 255, 222, 260, 246, 268, 0, 223,
	125, 247, 152, 194, 136, 137, 148, 154, 156, 158,
	159, 203, 204, 216, 235, 248, 249, 250, 151, 144,
	229, 145, 168, 146, 126, 237, 147, 127, 217, 253,
	0, 165, 225, 190, 128, 189, 219, 252, 251, 276,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 162, 0, 264, 685, 209,
	697, 680, 682, 683, 686, 690, 691, 629, 632, 692,
	694, 696, 699, 233, 0, 0, 0, 0, 0, 173,
	215, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 262, 274, 630, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 674, 199,
	200, 201, 202, 688, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 167, 0, 169,
	141, 214, 164, 271, 176, 206, 172, 238, 177, 184,
	226, 270, 212, 231, 140, 261, 239, 188, 163, 705,
	684, 704, 706, 707, 703, 708, 709, 693, 647, 0,
	701, 700, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 181, 0, 224, 160,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 103, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 672, 0, 277, 278,
	279, 263, 0, 0, 0, 0, 211, 0, 1218, 0,
	0, 0, 645, 0, 0, 0, 155, 0, 0, 0,
	180, 0, 182, 0, 0, 240, 195, 0, 0, 0,
	0, 689, 695, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 638, 0, 0, 592, 679, 678, 654, 0,
	0, 0, 138, 655, 0, 660, 0, 656, 659, 657,
	658, 0, 0, 681, 0, 0, 0, 0, 0, 0,
	642, 0, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 639, 640, 0, 0, 0, 0, 673,
	0, 641, 0, 0, 675, 0, 662, 0, 129, 245,
	259, 139, 236, 272, 143, 243, 135, 210, 232, 131,
	257, 242, 192, 174, 175, 130, 0, 227, 153, 166,
	150, 208, 661, 671, 676, 149, 631, 669, 267, 133,
	134, 266, 207, 254, 258, 193, 187, 132, 256, 191,
	186, 178, 157, 170, 220, 185, 221, 171, 197, 196,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 687, 0, 0, 0, 244, 0, 0, 179, 0,
	0, 0, 670, 0, 230, 213, 698, 0, 218, 228,
	183, 255, 222, 260, 246, 268, 0, 223, 125, 247,
	152, 194, 136, 137, 148, 154, 156, 158, 159, 203,
	204, 216, 235, 248, 249, 250, 151, 144, 229, 145,
	168, 146, 126, 237, 147, 127, 217, 253, 0, 165,
	225, 190, 128, 189, 219, 252, 251, 276, 1219, 1220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 162, 0, 264, 685, 209, 697, 680,
	682, 683, 686, 690, 691, 629, 632, 692, 694, 696,
	699, 233, 0, 0, 0, 0, 0, 173, 215, 0,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 262, 274, 630, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 674, 199, 200, 201,
	202, 688, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 167, 0, 169, 141, 214,
	164, 271, 176, 206, 172, 238, 177, 184, 226, 270,
	212, 231, 140, 261, 239, 188, 163, 705, 684, 704,
	706, 707, 703, 708, 709, 693, 647, 0, 701, 700,
	702, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 181, 0, 224, 160, 594, 595,
	596, 597, 598, 599, 600, 601, 602, 603, 604, 605,
	606, 607, 608, 103, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 672, 0, 277, 278, 279, 263,
	0, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	645, 0, 0, 0, 155, 0, 0, 0, 180, 0,
	182, 0, 0, 240, 195, 0, 0, 0, 0, 689,
	695, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	638, 0, 0, 592, 679, 678, 654, 0, 0, 0,
	138, 655, 0, 660, 0, 656, 659, 657, 658, 0,
	0, 681, 0, 0, 0, 0, 0, 0, 642, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 639, 640, 0, 0, 0, 0, 673, 0, 641,
	0, 0, 675, 0, 662, 0, 129, 245, 259, 139,
	236, 272, 143, 243, 135, 210, 232, 131, 257, 242,
	192, 174, 175, 130, 0, 227, 153, 166, 150, 208,
	661, 671, 676, 149, 631, 669, 267, 133, 134, 266,
	207, 254, 258, 193, 187, 132, 256, 191, 186, 178,
	157, 170, 220, 185, 221, 171, 197, 196, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 687,
	0, 0, 0, 244, 0, 0, 179, 0, 0, 0,
	670, 0, 230, 213, 698, 0, 218, 228, 183, 255,
	222, 260, 246, 268, 0, 223, 125, 247, 152, 194,
	136, 137, 148, 154, 156, 158, 159, 203, 204, 216,
	235, 248, 249, 250, 151, 144, 229, 145, 168, 146,
	126, 237, 147, 127, 217, 253, 0, 165, 225, 190,
	128, 189, 219, 252, 251, 276, 282, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 162, 0, 264, 685, 209, 697, 680, 682, 683,
	686, 690, 691, 629, 632, 692, 694, 696, 699, 233,
	0, 0, 0, 0, 0, 173, 215, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 241, 262, 274, 630, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 674, 199, 200, 201, 202, 688,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 167, 0, 169, 141, 214, 164, 271,
	176, 206, 172, 238, 177, 184, 226, 270, 212, 231,
	140, 261, 239, 188, 163, 705, 684, 704, 706, 707,
	703, 708, 709, 693, 647, 0, 701, 700, 702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 181, 0, 224, 160, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 103, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 0, 0, 277, 278, 279, 263, 322, 0,
	321, 325, 317, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 332, 180, 0, 182, 0, 0, 240,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 336, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 245, 259, 139, 236, 272, 143, 243,
	135, 210, 232, 131, 257, 242, 192, 174, 175, 130,
	0, 227, 153, 166, 150, 208, 0, 0, 1258, 149,
	275, 0, 267, 133, 134, 266, 207, 254, 258, 193,
	187, 132, 256, 191, 186, 178, 157, 170, 220, 185,
	221, 171, 197, 196, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 314, 318, 0, 0, 0, 0,
	0, 320, 269, 0, 0, 0, 0, 0, 0, 244,
	0, 0, 179, 324, 0, 0, 0, 0, 230, 213,
	0, 0, 218, 228, 183, 255, 222, 316, 246, 268,
	0, 340, 125, 247, 152, 194, 136, 137, 148, 154,
	156, 158, 159, 203, 204, 216, 235, 248, 249, 250,
	151, 144, 229, 145, 168, 146, 126, 237, 147, 127,
	217, 253, 0, 165, 225, 190, 128, 189, 219, 252,
	251, 276, 282, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 162, 1254, 264,
	1251, 209, 0, 0, 1253, 1250, 1252, 1256, 1257, 205,
	280, 0, 1255, 0, 0, 233, 0, 0, 0, 319,
	323, 326, 215, 327, 328, 0, 0, 329, 330, 331,
	0, 0, 333, 334, 0, 0, 0, 241, 262, 274,
	265, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 199, 200, 201, 202, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 167,
	0, 169, 141, 214, 164, 271, 176, 206, 172, 238,
	177, 184, 226, 270, 212, 231, 140, 261, 239, 188,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1261, 1262, 1263, 1264, 1265, 1266,
	1259, 1260, 0, 0, 0, 0, 124, 0, 181, 0,
	224, 160, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 0, 0,
	277, 278, 279, 263, 322, 0, 321, 325, 317, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 313, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 332,
	180, 0, 182, 0, 0, 240, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 336, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 245,
	259, 139, 236, 272, 143, 243, 135, 210, 232, 131,
	257, 242, 192, 174, 175, 130, 0, 227, 153, 166,
	150, 208, 0, 0, 0, 149, 275, 0, 267, 133,
	134, 266, 207, 254, 258, 193, 187, 132, 256, 191,
	186, 178, 157, 170, 220, 185, 221, 171, 197, 196,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	314, 318, 0, 0, 0, 0, 0, 320, 269, 0,
	0, 0, 0, 0, 0, 244, 0, 0, 179, 324,
	0, 0, 0, 0, 230, 213, 0, 0, 218, 228,
	183, 255, 222, 316, 246, 268, 0, 223, 125, 247,
	152, 194, 136, 137, 148, 154, 156, 158, 159, 203,
	204, 216, 235, 248, 249, 250, 151, 144, 229, 145,
	168, 146, 126, 237, 147, 127, 217, 253, 0, 165,
	225, 190, 128, 189, 219, 252, 251, 276, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 162, 0, 264, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 205, 280, 0, 0, 0,
	0, 233, 0, 0, 0, 319, 323, 326, 215, 327,
	328, 0, 0, 329, 330, 331, 0, 0, 333, 334,
	0, 0, 0, 241, 262, 274, 265, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 199, 200, 201,
	202, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 167, 0, 169, 141, 214,
	164, 271, 176, 206, 172, 238, 177, 184, 226, 270,
	212, 231, 140, 261, 239, 188, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 181, 0, 224, 160, 88, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 0, 0, 277, 278, 279, 263,
	79, 0, 23, 39, 24, 0, 0, 0, 0, 0,
	0, 0, 211, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 180, 0, 182, 0,
	0, 240, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 245, 259, 139, 236, 272,
	143, 243, 135, 210, 232, 131, 257, 242, 192, 174,
	175, 130, 0, 227, 153, 166, 150, 208, 0, 0,
	0, 149, 275, 0, 267, 133, 134, 266, 207, 254,
	258, 193, 187, 132, 256, 191, 186, 178, 157, 170,
	220, 185, 221, 171, 197, 196, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 244, 0, 0, 179, 0, 0, 0, 0, 0,
	230, 213, 0, 0, 218, 228, 183, 255, 222, 260,
	246, 268, 0, 223, 125, 247, 152, 194, 136, 137,
	148, 154, 156, 158, 159, 203, 204, 216, 235, 248,
	249, 250, 151, 144, 229, 145, 168, 146, 126, 237,
	147, 127, 217, 253, 0, 165, 225, 190, 128, 189,
	219, 252, 251, 276, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 162,
	0, 264, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 205, 280, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 173, 215, 0, 234, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 241,
	262, 274, 265, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 199, 200, 201, 202, 287, 289, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 167, 0, 169, 141, 214, 164, 271, 176, 206,
	172, 238, 177, 184, 226, 270, 212, 231, 140, 261,
	239, 188, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	181, 78, 224, 160, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	211, 0, 277, 278, 279, 263, 0, 0, 0, 0,
	155, 0, 0, 0, 180, 0, 182, 0, 0, 240,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1513, 1516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 245, 259, 139, 236, 272, 143, 243,
	135, 210, 232, 131, 257, 242, 192, 174, 175, 130,
	0, 227, 153, 166, 150, 208, 0, 0, 0, 149,
	275, 0, 267, 133, 134, 266, 207, 254, 258, 193,
	187, 132, 256, 191, 186, 178, 157, 170, 220, 185,
	221, 171, 197, 196, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 269, 0, 0, 0, 1510, 0, 1509, 244,
	1511, 1514, 179, 0, 0, 0, 0, 0, 230, 213,
	0, 0, 218, 228, 183, 255, 222, 260, 246, 268,
	0, 223, 125, 247, 152, 194, 136, 137, 148, 154,
	156, 158, 159, 203, 204, 216, 235, 248, 249, 250,
	151, 144, 229, 145, 168, 146, 126, 237, 147, 127,
	217, 253, 1515, 165, 225, 190, 128, 189, 219, 252,
	251, 276, 282, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 162, 0, 264,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 205,
	280, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 173, 215, 0, 234, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 262, 274,
	265, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 199, 200, 201, 202, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 167,
	0, 169, 141, 214, 164, 271, 176, 206, 172, 238,
	177, 184, 226, 270, 212, 231, 140, 261, 239, 188,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 181, 0,
	224, 160, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 211, 0,
	277, 278, 279, 263, 0, 0, 0, 0, 155, 382,
	0, 0, 180, 0, 182, 0, 0, 240, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 395, 396,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 397, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 245, 259, 139, 236, 272, 143, 243, 135, 210,
	232, 131, 257, 242, 192, 174, 175, 130, 0, 227,
	153, 166, 150, 208, 0, 0, 387, 149, 275, 399,
	267, 133, 398, 266, 207, 254, 258, 193, 187, 132,
	256, 191, 186, 178, 157, 170, 220, 185, 221, 171,
	197, 196, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 244, 0, 0,
	179, 0, 0, 0, 0, 0, 230, 213, 0, 0,
	218, 228, 183, 255, 222, 260, 246, 268, 381, 223,
	125, 247, 152, 194, 136, 137, 148, 154, 156, 158,
	159, 203, 204, 216, 235, 248, 249, 250, 151, 144,
	229, 145, 168, 146, 126, 237, 147, 127, 217, 253,
	0, 165, 225, 190, 128, 189, 219, 252, 251, 276,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 162, 0, 264, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 205, 280, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 173,
	215, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 262, 274, 265, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 384, 199,
	200, 201, 202, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 167, 0, 169,
	141, 214, 164, 271, 176, 392, 388, 389, 177, 184,
	226, 270, 212, 231, 140, 261, 239, 390, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 181, 0, 224, 160,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 0, 211, 277, 278,
	279, 263, 858, 0, 0, 0, 0, 155, 0, 0,
	0, 180, 0, 182, 0, 0, 240, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 859,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 856, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	245, 259, 139, 236, 272, 143, 243, 135, 210, 232,
	131, 257, 242, 192, 174, 175, 130, 0, 227, 153,
	166, 150, 208, 0, 0, 0, 149, 275, 0, 267,
	133, 134, 266, 207, 254, 258, 193, 187, 132, 256,
	191, 186, 178, 157, 170, 220, 185, 221, 171, 197,
	196, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 244, 0, 0, 179,
	0, 0, 0, 0, 0, 230, 213, 0, 0, 218,
	228, 183, 255, 222, 260, 246, 268, 0, 223, 125,
	247, 152, 194, 136, 137, 148, 154, 156, 158, 159,
	203, 204, 216, 235, 248, 249, 250, 151, 144, 229,
	145, 168, 146, 126, 237, 147, 127, 217, 253, 0,
	165, 225, 190, 128, 189, 219, 252, 251, 276, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 162, 0, 264, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 205, 280, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 173, 215,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 241, 262, 274, 265, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 199, 200,
	201, 202, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 167, 0, 169, 141,
	214, 164, 271, 176, 206, 172, 238, 177, 184, 226,
	270, 212, 231, 140, 261, 239, 188, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 181, 0, 224, 160, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 211, 0, 277, 278, 279,
	263, 0, 0, 0, 0, 155, 0, 0, 0, 180,
	0, 182, 0, 0, 240, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 395, 396, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 397, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 245, 259,
	139, 236, 272, 143, 243, 135, 210, 232, 131, 257,
	242, 192, 174, 175, 130, 0, 227, 153, 166, 150,
	208, 0, 0, 387, 149, 275, 399, 267, 133, 398,
	266, 207, 254, 258, 193, 187, 132, 256, 191, 186,
	178, 157, 170, 220, 185, 221, 171, 197, 196, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 244, 0, 0, 179, 0, 0,
	0, 0, 0, 230, 213, 0, 0, 218, 228, 183,
	255, 222, 260, 246, 268, 0, 223, 125, 247, 152,
	194, 136, 137, 148, 154, 156, 158, 159, 203, 204,
	216, 235, 248, 249, 250, 151, 144, 229, 145, 168,
	146, 126, 237, 147, 127, 217, 253, 0, 165, 225,
	190, 128, 189, 219, 252, 251, 276, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 162, 0, 264, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 205, 280, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 0, 173, 215, 0, 234,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 262, 274, 265, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 199, 200, 201, 202,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 167, 0, 169, 141, 214, 164,
	271, 176, 392, 388, 389, 177, 184, 226, 270, 212,
	231, 140, 261, 239, 390, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 181, 0, 224, 160, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 79, 0, 277, 278, 279, 263, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 180,
	0, 182, 0, 0, 240, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 947, 85, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 245, 259,
	139, 236, 272, 143, 243, 135, 210, 232, 131, 257,
	242, 192, 174, 175, 130, 0, 227, 153, 166, 150,
	208, 0, 0, 0, 149, 275, 0, 267, 133, 134,
	266, 207, 254, 258, 193, 187, 132, 256, 191, 186,
	178, 157, 170, 220, 185, 221, 171, 197, 196, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 244, 0, 0, 179, 0, 0,
	0, 0, 0, 230, 213, 0, 0, 218, 228, 183,
	255, 222, 260, 246, 268, 0, 223, 125, 247, 152,
	194, 136, 137, 148, 154, 156, 158, 159, 203, 204,
	216, 235, 248, 249, 250, 151, 144, 229, 145, 168,
	146, 126, 237, 147, 127, 217, 253, 0, 165, 225,
	190, 128, 189, 219, 252, 251, 276, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 162, 0, 264, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 205, 280, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 0, 173, 215, 0, 234,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 262, 274, 265, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 199, 200, 201, 202,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 167, 0, 169, 141, 214, 164,
	271, 176, 206, 172, 238, 177, 184, 226, 270, 212,
	231, 140, 261, 239, 188, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 181, 78, 224, 160, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 0, 0, 277, 278, 279, 263, 211,
	0, 541, 0, 0, 0, 0, 0, 0, 0, 155,
	542, 0, 0, 180, 0, 182, 0, 0, 240, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 336, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 245, 259, 139, 236, 272, 143, 243, 135,
	210, 232, 131, 257, 242, 192, 174, 175, 130, 0,
	227, 153, 166, 150, 208, 0, 0, 0, 149, 275,
	0, 267, 133, 134, 266, 207, 254, 258, 193, 187,
	132, 256, 191, 186, 178, 157, 170, 220, 185, 221,
	171, 197, 196, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 244, 0,
	0, 179, 0, 0, 0, 0, 0, 230, 213, 0,
	0, 218, 228, 183, 255, 222, 260, 246, 268, 0,
	223, 125, 247, 152, 194, 136, 137, 148, 154, 156,
	158, 159, 203, 204, 216, 235, 248, 249, 250, 151,
	144, 229, 145, 168, 146, 126, 237, 147, 127, 217,
	253, 0, 165, 225, 190, 128, 189, 219, 252, 251,
	276, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 162, 0, 264, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 205, 280,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	173, 215, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 241, 262, 274, 265,
	0, 0, 0, 273, 0, 0, 0, 0, 543, 0,
	199, 200, 201, 202, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 167, 0,
	169, 141, 214, 164, 271, 176, 206, 172, 238, 177,
	184, 226, 270, 212, 231, 140, 261, 239, 188, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 181, 0, 224,
	160, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 211, 0, 277,
	278, 279, 263, 0, 0, 0, 0, 155, 0, 0,
	0, 180, 0, 182, 0, 0, 240, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 921,
	0, 0, 0, 138, 922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 924, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	245, 259, 139, 236, 272, 143, 243, 135, 210, 232,
	131, 257, 242, 192, 174, 175, 130, 0, 227, 153,
	166, 150, 208, 0, 0, 0, 149, 275, 0, 267,
	133, 134, 266, 207, 254, 258, 193, 187, 132, 256,
	191, 186, 178, 157, 170, 220, 185, 221, 171, 197,
	196, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 244, 0, 0, 179,
	0, 0, 0, 0, 0, 230, 213, 0, 0, 218,
	228, 183, 255, 222, 260, 246, 268, 0, 223, 125,
	247, 152, 194, 136, 137, 148, 154, 156, 158, 159,
	203, 204, 216, 235, 248, 249, 250, 151, 144, 229,
	145, 168, 146, 126, 237, 147, 127, 217, 253, 0,
	165, 225, 190, 128, 189, 219, 252, 251, 276, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 162, 0, 264, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 205, 280, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 173, 215,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 241, 262, 274, 265, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 199, 200,
	201, 202, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 167, 0, 169, 141,
	214, 164, 271, 176, 206, 172, 238, 177, 184, 226,
	270, 212, 231, 140, 261, 239, 188, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 181, 0, 224, 160, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 0, 0, 277, 278, 279,
	263, 211, 0, 813, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 180, 0, 182, 0, 0,
	240, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 336, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 245, 259, 139, 236, 272, 143,
	243, 135, 210, 232, 131, 257, 242, 192, 174, 175,
	130, 0, 227, 153, 166, 150, 208, 0, 0, 0,
	149, 275, 0, 267, 133, 134, 266, 207, 254, 258,
	193, 187, 132, 256, 191, 186, 178, 157, 170, 220,
	185, 221, 171, 197, 196, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	244, 0, 0, 179, 0, 0, 0, 0, 0, 230,
	213, 0, 0, 218, 228, 183, 255, 222, 260, 246,
	268, 0, 223, 125, 247, 152, 194, 136, 137, 148,
	154, 156, 158, 159, 203, 204, 216, 235, 248, 249,
	250, 151, 144, 229, 145, 168, 146, 126, 237, 147,
	127, 217, 253, 0, 165, 225, 190, 128, 189, 219,
	252, 251, 276, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 162, 0,
	264, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	205, 280, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 173, 215, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 241, 262,
	274, 265, 0, 0, 0, 273, 0, 0, 0, 0,
	812, 0, 199, 200, 201, 202, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	167, 0, 169, 141, 214, 164, 271, 176, 206, 172,
	238, 177, 184, 226, 270, 212, 231, 140, 261, 239,
	188, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 181,
	0, 224, 160, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 211,
	0, 277, 278, 279, 263, 0, 0, 0, 0, 155,
	0, 0, 0, 180, 0, 182, 0, 0, 240, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2082, 85, 679,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 245, 259, 139, 236, 272, 143, 243, 135,
	210, 232, 131, 257, 242, 192, 174, 175, 130, 0,
	227, 153, 166, 150, 208, 0, 0, 0, 149, 275,
	0, 267, 133, 134, 266, 207, 254, 258, 193, 187,
	132, 256, 191, 186, 178, 157, 170, 220, 185, 221,
	171, 197, 196, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 244, 0,
	0, 179, 0, 0, 0, 0, 0, 230, 213, 0,
	0, 218, 228, 183, 255, 222, 260, 246, 268, 0,
	223, 125, 247, 152, 194, 136, 137, 148, 154, 156,
	158, 159, 203, 204, 216, 235, 248, 249, 250, 151,
	144, 229, 145, 168, 146, 126, 237, 147, 127, 217,
	253, 0, 165, 225, 190, 128, 189, 219, 252, 251,
	276, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 162, 0, 264, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 205, 280,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	173, 215, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 241, 262, 274, 265,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	199, 200, 201, 202, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 167, 0,
	169, 141, 214, 164, 271, 176, 206, 172, 238, 177,
	184, 226, 270, 212, 231, 140, 261, 239, 188, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 181, 0, 224,
	160, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 211, 0, 277,
	278, 279, 263, 0, 0, 0, 0, 155, 0, 0,
	0, 180, 0, 182, 0, 0, 240, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 764,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	245, 259, 139, 236, 272, 143, 243, 135, 210, 232,
	131, 257, 242, 192, 174, 175, 130, 0, 227, 153,
	166, 150, 208, 0, 0, 0, 149, 275, 0, 267,
	133, 134, 266, 207, 254, 258, 193, 187, 132, 256,
	191, 186, 178, 157, 170, 220, 185, 221, 171, 197,
	196, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 244, 0, 0, 179,
	0, 0, 0, 0, 0, 230, 213, 0, 0, 218,
	228, 183, 255, 222, 260, 246, 268, 0, 223, 125,
	247, 152, 194, 136, 137, 148, 154, 156, 158, 159,
	203, 204, 216, 235, 248, 249, 250, 151, 144, 229,
	145, 168, 146, 126, 237, 147, 127, 217, 253, 0,
	165, 225, 190, 128, 189, 219, 252, 251, 276, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 162, 0, 264, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 205, 280, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 173, 215,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 241, 262, 274, 265, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 1488, 199, 200,
	201, 202, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 167, 0, 169, 141,
	214, 164, 271, 176, 206, 172, 238, 177, 184, 226,
	270, 212, 231, 140, 261, 239, 188, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 181, 0, 224, 160, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 211, 0, 277, 278, 279,
	263, 0, 0, 0, 0, 155, 1190, 0, 0, 180,
	0, 182, 0, 0, 240, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 764, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 245, 259,
	139, 236, 272, 143, 243, 135, 210, 232, 131, 257,
	242, 192, 174, 175, 130, 0, 227, 153, 166, 150,
	208, 0, 0, 0, 149, 275, 0, 267, 133, 134,
	266, 207, 254, 258, 193, 187, 132, 256, 191, 186,
	178, 157, 170, 220, 185, 221, 171, 197, 196, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 244, 0, 0, 179, 0, 0,
	0, 0, 0, 230, 213, 0, 0, 218, 228, 183,
	255, 222, 260, 246, 268, 0, 223, 125, 247, 152,
	194, 136, 137, 148, 154, 156, 158, 159, 203, 204,
	216, 235, 248, 249, 250, 151, 144, 229, 145, 168,
	146, 126, 237, 147, 127, 217, 253, 0, 165, 225,
	190, 128, 189, 219, 252, 251, 276, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 162, 0, 264, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 205, 280, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 0, 173, 215, 0, 234,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 262, 274, 265, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 199, 200, 201, 202,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 167, 0, 169, 141, 214, 164,
	271, 176, 206, 172, 238, 177, 184, 226, 270, 212,
	231, 140, 261, 239, 188, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 181, 0, 224, 160, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 211, 0, 277, 278, 279, 263, 0,
	0, 0, 0, 155, 0, 0, 0, 180, 0, 182,
	0, 0, 240, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 679, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 245, 259, 139, 236,
	272, 143, 243, 135, 210, 232, 131, 257, 242, 192,
	174, 175, 130, 0, 227, 153, 166, 150, 208, 0,
	0, 0, 149, 275, 0, 267, 133, 134, 266, 207,
	254, 258, 193, 187, 132, 256, 191, 186, 178, 157,
	170, 220, 185, 221, 171, 197, 196, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 244, 0, 0, 179, 0, 0, 0, 0,
	0, 230, 213, 0, 0, 218, 228, 183, 255, 222,
	260, 246, 268, 0, 223, 125, 247, 152, 194, 136,
	137, 148, 154, 156, 158, 159, 203, 204, 216, 235,
	248, 249, 250, 151, 144, 229, 145, 168, 146, 126,
	237, 147, 127, 217, 253, 0, 165, 225, 190, 128,
	189, 219, 252, 251, 276, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	162, 0, 264, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 205, 280, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 0, 173, 215, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	241, 262, 274, 265, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 199, 200, 201, 202, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 167, 0, 169, 141, 214, 164, 271, 176,
	206, 172, 238, 177, 184, 226, 270, 212, 231, 140,
	261, 239, 188, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 181, 0, 224, 160, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 211, 0, 277, 278, 279, 263, 0, 0, 0,
	0, 155, 0, 0, 0, 180, 0, 182, 0, 0,
	240, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1816, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 245, 259, 139, 236, 272, 143,
	243, 135, 210, 232, 131, 257, 242, 192, 174, 175,
	130, 0, 227, 153, 166, 150, 208, 0, 0, 0,
	149, 275, 0, 267, 133, 134, 266, 207, 254, 258,
	193, 187, 132, 256, 191, 186, 178, 157, 170, 220,
	185, 221, 171, 197, 196, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	244, 0, 0, 179, 0, 0, 0, 0, 0, 230,
	213, 0, 0, 218, 228, 183, 255, 222, 260, 246,
	268, 0, 223, 125, 247, 152, 194, 136, 137, 148,
	154, 156, 158, 159, 203, 204, 216, 235, 248, 249,
	250, 151, 144, 229, 145, 168, 146, 126, 237, 147,
	127, 217, 253, 0, 165, 225, 190, 128, 189, 219,
	252, 251, 276, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 162, 0,
	264, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	205, 280, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 173, 215, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 241, 262,
	274, 265, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 199, 200, 201, 202, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	167, 0, 169, 141, 214, 164, 271, 176, 206, 172,
	238, 177, 184, 226, 270, 212, 231, 140, 261, 239,
	188, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 181,
	0, 224, 160, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 211,
	0, 277, 278, 279, 263, 0, 0, 0, 0, 155,
	0, 0, 0, 180, 0, 182, 0, 0, 240, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 764, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 245, 259, 139, 236, 272, 143, 243, 135,
	210, 232, 131, 257, 242, 192, 174, 175, 130, 0,
	227, 153, 166, 150, 208, 0, 0, 0, 149, 275,
	0, 267, 133, 134, 266, 207, 254, 258, 193, 187,
	132, 256, 191, 186, 178, 157, 170, 220, 185, 221,
	171, 197, 196, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 244, 0,
	0, 179, 0, 0, 0, 0, 0, 230, 213, 0,
	0, 218, 228, 183, 255, 222, 260, 246, 268, 0,
	223, 125, 247, 152, 194, 136, 137, 148, 154, 156,
	158, 159, 203, 204, 216, 235, 248, 249, 250, 151,
	144, 229, 145, 168, 146, 126, 237, 147, 127, 217,
	253, 0, 165, 225, 190, 128, 189, 219, 252, 251,
	276, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 162, 0, 264, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 205, 280,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	173, 215, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 241, 262, 274, 265,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	199, 200, 201, 202, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 167, 0,
	169, 141, 214, 164, 271, 176, 206, 172, 238, 177,
	184, 226, 270, 212, 231, 140, 261, 239, 188, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 181, 0, 224,
	160, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 211, 0, 277,
	278, 279, 263, 0, 0, 0, 0, 155, 0, 0,
	0, 180, 0, 182, 0, 0, 240, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	245, 259, 139, 236, 272, 143, 243, 135, 210, 232,
	131, 257, 242, 192, 174, 175, 130, 0, 227, 153,
	166, 150, 208, 0, 0, 0, 149, 275, 0, 267,
	133, 134, 266, 207, 254, 258, 193, 187, 132, 256,
	191, 186, 178, 157, 170, 220, 185, 221, 171, 197,
	196, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 244, 0, 0, 179,
	0, 0, 0, 0, 0, 230, 213, 0, 0, 218,
	228, 183, 255, 222, 260, 246, 268, 0, 223, 125,
	247, 152, 194, 136, 137, 148, 154, 156, 158, 159,
	203, 204, 216, 235, 248, 249, 250, 151, 144, 229,
	145, 168, 146, 126, 237, 147, 127, 217, 253, 0,
	165, 225, 190, 128, 189, 219, 252, 251, 276, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 162, 0, 264, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 205, 280, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 173, 215,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 241, 262, 274, 265, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 199, 200,
	201, 202, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 167, 0, 169, 141,
	214, 164, 271, 176, 206, 172, 238, 177, 184, 226,
	270, 212, 231, 140, 261, 239, 188, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 181, 0, 224, 160, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 211, 0, 277, 278, 279,
	263, 0, 0, 0, 0, 155, 0, 0, 0, 180,
	0, 182, 0, 0, 240, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 245, 259,
	139, 236, 272, 143, 243, 135, 210, 232, 131, 257,
	242, 192, 174, 175, 130, 0, 227, 153, 166, 150,
	208, 0, 0, 0, 149, 275, 0, 267, 133, 134,
	266, 207, 254, 258, 193, 187, 132, 256, 191, 186,
	178, 157, 170, 220, 185, 221, 171, 197, 196, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 244, 0, 0, 179, 0, 0,
	0, 0, 0, 230, 213, 0, 0, 218, 228, 183,
	255, 222, 260, 246, 268, 0, 223, 125, 247, 152,
	194, 136, 137, 148, 154, 156, 158, 159, 203, 204,
	216, 235, 248, 249, 250, 151, 144, 229, 145, 168,
	146, 126, 237, 147, 127, 217, 253, 0, 165, 225,
	190, 128, 189, 219, 252, 251, 276, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 162, 0, 264, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 205, 280, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 0, 173, 215, 0, 234,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 262, 274, 265, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 199, 200, 201, 202,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 167, 0, 169, 141, 214, 164,
	271, 176, 206, 172, 238, 177, 184, 226, 270, 212,
	231, 140, 261, 239, 188, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 181, 0, 224, 160, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 211, 0, 277, 278, 279, 263, 0,
	0, 0, 0, 155, 0, 0, 0, 180, 0, 182,
	0, 0, 240, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 245, 259, 139, 236,
	272, 143, 243, 135, 210, 232, 131, 257, 242, 192,
	174, 175, 130, 0, 227, 153, 166, 150, 208, 0,
	0, 0, 149, 275, 0, 267, 133, 134, 266, 207,
	254, 258, 193, 187, 132, 256, 191, 186, 178, 157,
	170, 220, 185, 221, 171, 197, 196, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 244, 0, 0, 179, 0, 0, 0, 0,
	0, 230, 213, 0, 0, 218, 228, 183, 255, 222,
	260, 246, 268, 0, 223, 125, 247, 152, 194, 136,
	137, 148, 154, 156, 158, 159, 203, 204, 216, 235,
	248, 249, 250, 151, 144, 229, 145, 168, 146, 126,
	237, 147, 127, 217, 253, 0, 165, 225, 190, 128,
	189, 219, 252, 251, 276, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	162, 0, 264, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 205, 280, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 0, 173, 215, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	241, 262, 274, 265, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 199, 200, 201, 202, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 167, 0, 169, 141, 214, 164, 271, 176,
	206, 172, 238, 177, 184, 226, 270, 212, 231, 140,
	261, 239, 188, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 181, 0, 224, 160, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 211, 0, 277, 278, 279, 263, 0, 0, 0,
	0, 155, 0, 0, 0, 180, 0, 182, 0, 0,
	240, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 1207, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 245, 259, 139, 236, 272, 143,
	243, 135, 210, 232, 131, 257, 242, 192, 174, 175,
	130, 0, 227, 153, 166, 150, 208, 0, 0, 0,
	149, 275, 0, 267, 133, 134, 266, 207, 254, 258,
	193, 187, 132, 256, 191, 186, 178, 157, 170, 220,
	185, 221, 171, 197, 196, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	244, 0, 0, 179, 0, 0, 0, 0, 0, 230,
	213, 0, 0, 218, 228, 183, 255, 222, 260, 246,
	268, 0, 223, 125, 247, 152, 194, 136, 137, 148,
	154, 156, 158, 159, 203, 204, 216, 235, 248, 249,
	250, 151, 144, 229, 145, 168, 146, 126, 237, 147,
	127, 217, 253, 0, 165, 225, 190, 128, 189, 219,
	252, 251, 276, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 162, 0,
	264, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	205, 280, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 173, 215, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 241, 262,
	274, 265, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 199, 200, 201, 202, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	167, 0, 169, 141, 214, 164, 271, 176, 206, 172,
	238, 177, 184, 226, 270, 212, 231, 140, 261, 239,
	188, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 181,
	0, 224, 160, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 211,
	0, 277, 278, 279, 263, 0, 0, 0, 0, 155,
	0, 0, 0, 180, 0, 182, 0, 0, 240, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 336, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 245, 259, 139, 236, 272, 143, 243, 135,
	210, 232, 131, 257, 242, 192, 174, 175, 130, 0,
	227, 153, 166, 150, 208, 0, 0, 0, 149, 275,
	0, 267, 133, 134, 266, 207, 254, 258, 193, 187,
	132, 256, 191, 186, 178, 157, 170, 220, 185, 221,
	171, 197, 196, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 244, 0,
	0, 179, 0, 0, 0, 0, 0, 230, 213, 0,
	0, 218, 228, 183, 255, 222, 260, 246, 268, 0,
	223, 125, 247, 152, 194, 136, 137, 148, 154, 156,
	158, 159, 203, 204, 216, 235, 248, 249, 250, 151,
	144, 229, 145, 168, 146, 126, 237, 147, 127, 217,
	253, 0, 165, 225, 190, 128, 189, 219, 252, 251,
	276, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 162, 0, 264, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 205, 280,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	173, 215, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 241, 262, 274, 265,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	199, 200, 201, 202, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 167, 0,
	169, 141, 214, 164, 271, 176, 206, 172, 238, 177,
	184, 226, 270, 212, 231, 140, 261, 239, 188, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 181, 0, 224,
	160, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 211, 0, 277,
	278, 279, 263, 0, 0, 0, 0, 155, 0, 0,
	0, 180, 0, 182, 0, 0, 240, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	245, 259, 139, 236, 272, 143, 243, 135, 210, 232,
	131, 257, 242, 192, 174, 175, 130, 0, 227, 153,
	166, 150, 208, 0, 0, 0, 149, 275, 0, 267,
	133, 134, 266, 207, 254, 258, 193, 187, 132, 256,
	191, 186, 178, 157, 170, 220, 185, 221, 171, 197,
	196, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 1152, 0, 0, 0, 244, 0, 0, 179,
	0, 0, 0, 0, 0, 230, 213, 0, 0, 218,
	228, 183, 255, 222, 260, 246, 268, 0, 223, 125,
	247, 152, 194, 136, 137, 148, 154, 156, 158, 159,
	203, 204, 216, 235, 248, 249, 250, 151, 144, 229,
	145, 168, 146, 126, 237, 147, 127, 217, 253, 0,
	165, 225, 190, 128, 189, 219, 252, 251, 276, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 162, 0, 264, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 205, 280, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 173, 215,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 241, 262, 274, 265, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 199, 200,
	201, 202, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 167, 0, 169, 141,
	214, 164, 271, 176, 206, 172, 238, 177, 184, 226,
	270, 212, 231, 140, 261, 239, 188, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 181, 0, 224, 160, 88,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 211, 0, 277, 278, 279,
	263, 0, 0, 0, 0, 155, 0, 0, 0, 180,
	0, 182, 0, 0, 240, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 764, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 245, 259,
	139, 236, 272, 143, 243, 135, 210, 232, 131, 257,
	242, 192, 174, 175, 130, 0, 227, 153, 166, 150,
	208, 0, 0, 0, 149, 275, 0, 267, 133, 134,
	266, 207, 254, 258, 193, 187, 132, 256, 191, 186,
	178, 157, 170, 220, 185, 221, 171, 197, 196, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 244, 0, 0, 179, 0, 0,
	0, 0, 0, 230, 213, 0, 0, 218, 228, 183,
	255, 222, 260, 246, 268, 0, 223, 125, 247, 152,
	194, 136, 137, 148, 154, 156, 158, 159, 203, 204,
	216, 235, 248, 249, 250, 151, 144, 229, 145, 168,
	146, 126, 237, 147, 127, 217, 253, 0, 165, 225,
	190, 128, 189, 219, 252, 251, 276, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 162, 0, 264, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 205, 280, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 0, 173, 215, 0, 234,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 262, 274, 803, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 199, 200, 201, 202,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 167, 0, 169, 141, 214, 164,
	271, 176, 206, 172, 238, 177, 184, 226, 270, 212,
	231, 140, 261, 239, 188, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 181, 0, 224, 160, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 211, 0, 277, 278, 279, 263, 0,
	0, 0, 0, 155, 0, 0, 0, 180, 0, 182,
	0, 0, 240, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 245, 259, 139, 236,
	272, 143, 243, 135, 210, 232, 131, 257, 242, 192,
	174, 175, 130, 0, 227, 153, 166, 150, 208, 0,
	0, 0, 149, 275, 0, 267, 133, 134, 266, 207,
	254, 258, 193, 187, 132, 256, 191, 186, 178, 157,
	170, 220, 185, 221, 171, 197, 196, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 244, 0, 0, 179, 0, 0, 0, 0,
	0, 230, 213, 0, 0, 218, 228, 183, 255, 222,
	260, 246, 268, 0, 223, 125, 247, 152, 194, 136,
	137, 148, 154, 156, 158, 159, 203, 204, 216, 235,
	248, 249, 250, 151, 144, 229, 145, 168, 146, 126,
	237, 147, 127, 217, 253, 0, 165, 225, 190, 128,
	189, 219, 252, 251, 276, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	162, 0, 264, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 205, 280, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 0, 173, 215, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	241, 262, 274, 265, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 199, 200, 201, 202, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 167, 0, 169, 141, 214, 164, 271, 176,
	206, 172, 238, 177, 184, 226, 270, 212, 231, 140,
	261, 239, 188, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 0, 124,
	0, 181, 0, 224, 160, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 211, 0, 277, 278, 279, 263, 0, 0, 0,
	82, 155, 0, 0, 0, 180, 0, 182, 0, 0,
	240, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 245, 259, 139, 236, 272, 143,
	243, 135, 210, 232, 131, 257, 242, 192, 174, 175,
	130, 0, 227, 153, 166, 150, 208, 0, 0, 0,
	149, 275, 0, 267, 133, 134, 266, 207, 254, 258,
	193, 187, 132, 256, 191, 186, 178, 157, 170, 220,
	185, 221, 171, 197, 196, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	244, 0, 0, 179, 0, 0, 0, 0, 0, 230,
	213, 0, 0, 218, 228, 183, 255, 222, 260, 246,
	268, 0, 223, 125, 247, 152, 194, 136, 137, 148,
	154, 156, 158, 159, 203, 204, 216, 235, 248, 249,
	250, 151, 144, 229, 145, 168, 146, 126, 237, 147,
	127, 217, 253, 0, 165, 225, 190, 128, 189, 219,
	252, 251, 276, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 162, 0,
	264, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	205, 280, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 173, 215, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 241, 262,
	274, 265, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 199, 200, 201, 202, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	167, 0, 169, 141, 214, 164, 271, 176, 206, 172,
	238, 177, 184, 226, 270, 212, 231, 140, 261, 239,
	188, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 181,
	0, 224, 160, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 211,
	0, 277, 278, 279, 263, 0, 0, 0, 0, 155,
	0, 0, 0, 180, 0, 182, 0, 0, 240, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 245, 259, 139, 236, 272, 143, 243, 135,
	210, 232, 131, 257, 242, 192, 174, 175, 130, 0,
	227, 153, 166, 150, 208, 0, 0, 0, 149, 275,
	0, 267, 133, 134, 266, 207, 254, 258, 193, 187,
	132, 256, 191, 186, 178, 157, 170, 220, 185, 221,
	171, 197, 196, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 244, 0,
	0, 179, 0, 0, 0, 0, 0, 230, 213, 0,
	0, 218, 228, 183, 255, 222, 260, 246, 268, 0,
	223, 125, 247, 152, 194, 136, 137, 148, 154, 156,
	158, 159, 203, 204, 216, 235, 248, 249, 250, 151,
	144, 229, 145, 168, 146, 126, 237, 147, 127, 217,
	253, 0, 165, 225, 190, 128, 189, 219, 252, 251,
	276, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 162, 0, 264, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 205, 280,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	173, 215, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 241, 262, 274, 265,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	199, 200, 201, 202, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 167, 0,
	169, 141, 214, 164, 271, 176, 206, 172, 238, 177,
	184, 226, 270, 212, 231, 140, 261, 239, 188, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 181, 0, 224,
	160, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 0, 211, 277,
	278, 279, 263, 463, 0, 0, 0, 0, 155, 0,
	0, 0, 180, 0, 182, 0, 0, 240, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 468, 469, 470,
	465, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 245, 259, 139, 236, 272, 143, 243, 135, 210,
	232, 131, 257, 242, 192, 174, 175, 130, 0, 227,
	153, 166, 150, 208, 0, 0, 0, 149, 275, 0,
	267, 133, 134, 266, 207, 254, 258, 193, 187, 132,
	256, 191, 186, 178, 157, 170, 220, 185, 221, 171,
	197, 196, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 244, 0, 0,
	179, 0, 0, 0, 0, 0, 230, 213, 0, 0,
	218, 228, 183, 255, 222, 260, 246, 268, 0, 223,
	125, 247, 152, 194, 136, 137, 148, 154, 156, 158,
	159, 203, 204, 216, 235, 248, 249, 250, 151, 144,
	229, 145, 168, 146, 126, 237, 147, 127, 217, 253,
	0, 165, 225, 190, 128, 189, 219, 252, 251, 276,
	282, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 162, 0, 264, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 205, 280, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 173,
	215, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 262, 274, 265, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 199,
	200, 201, 202, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 167, 0, 169,
	141, 214, 164, 271, 176, 206, 172, 238, 177, 184,
	226, 270, 212, 231, 140, 261, 239, 188, 163, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 180, 0, 182, 0, 0,
	240, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 181, 0, 224, 160,
	468, 469, 470, 465, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 245, 259, 139, 236, 272, 143,
	243, 135, 210, 232, 131, 257, 242, 192, 174, 175,
	130, 0, 227, 153, 166, 150, 208, 0, 0, 0,
	149, 275, 0, 267, 133, 134, 266, 207, 254, 258,
	193, 187, 132, 256, 191, 186, 178, 157, 170, 220,
	185, 221, 171, 197, 196, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	244, 0, 0, 179, 0, 0, 0, 0, 0, 230,
	213, 0, 0, 218, 228, 183, 255, 222, 260, 246,
	268, 0, 223, 125, 247, 152, 194, 136, 137, 148,
	154, 156, 158, 159, 203, 204, 216, 235, 248, 249,
	250, 151, 144, 229, 145, 168, 146, 126, 237, 147,
	127, 217, 253, 0, 165, 225, 190, 128, 189, 219,
	252, 251, 276, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 162, 0,
	264, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	205, 280, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 173, 215, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 241, 262,
	274, 265, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 199, 200, 201, 202, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	167, 0, 169, 141, 214, 164, 271, 176, 206, 172,
	238, 177, 184, 226, 270, 212, 231, 140, 261, 239,
	188, 163, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 180, 0,
	182, 0, 0, 240, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 181,
	0, 224, 160, 468, 469, 470, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 245, 259, 139,
	236, 272, 143, 243, 135, 210, 232, 131, 257, 242,
	192, 174, 175, 130, 0, 227, 153, 166, 150, 208,
	0, 0, 0, 149, 275, 0, 267, 133, 134, 266,
	207, 254, 258, 193, 187, 132, 256, 191, 186, 178,
	157, 170, 220, 185, 221, 171, 197, 196, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 244, 0, 0, 179, 0, 0, 0,
	0, 0, 230, 213, 0, 0, 218, 228, 183, 255,
	222, 260, 246, 268, 0, 223, 125, 247, 152, 194,
	136, 137, 148, 154, 156, 158, 159, 203, 204, 216,
	235, 248, 249, 250, 151, 144, 229, 145, 168, 146,
	126, 237, 147, 127, 217, 253, 0, 165, 225, 190,
	128, 189, 219, 252, 251, 276, 282, 283, 1766, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 162, 0, 264, 0, 209, 0, 0, 0, 1766,
	0, 0, 1164, 205, 280, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 173, 215, 0, 234, 0,
	0, 0, 0, 1164, 0, 0, 0, 2167, 0, 0,
	0, 241, 262, 274, 265, 0, 0, 1748, 273, 0,
	0, 0, 0, 0, 0, 199, 200, 201, 202, 1836,
	0, 142, 0, 0, 0, 0, 0, 0, 1748, 0,
	0, 0, 161, 167, 0, 169, 141, 214, 164, 271,
	176, 206, 172, 238, 177, 184, 226, 270, 212, 231,
	140, 261, 239, 188, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1766, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 181, 0, 224, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1752, 0, 277, 278, 279, 263, 0, 0,
	1748, 0, 0, 1756, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1745, 1756, 0, 0, 1747, 1749, 1751,
	0, 1753, 1754, 1755, 1757, 1758, 1759, 1761, 1762, 1763,
	1764, 0, 0, 0, 1745, 0, 0, 0, 1747, 1749,
	1751, 0, 1753, 1754, 1755, 1757, 1758, 1759, 1761, 1762,
	1763, 1764, 0, 0, 0, 1767, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1767, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1744, 0, 0, 0,
	1765, 0, 0, 0, 0, 1752, 0, 0, 0, 0,
	0, 1760, 0, 0, 0, 0, 1756, 1744, 1750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1760, 0, 0, 0, 1745, 0, 0, 1750,
	1747, 1749, 1751, 0, 1753, 1754, 1755, 1757, 1758, 1759,
	1761, 1762, 1763, 1764, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1744,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1760, 0, 0, 0, 0, 0,
	0, 1750,
}

var yyPact = [...]int{
	160, -1000, -299, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 17783, 1770, -1000, 7914, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 247, 14787,
	18211, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7468, 7022,
	118, -1000, 1765, -1000, -1000, -1000, -1000, 129, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 320, -40, 338, 343,
	573, 573, 8770, 1765, 1386, 169, 32, -1000, 17355, 668,
	160, 175, 18211, -1000, 383, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14787, 18211, -75, 509, -1000, 207,
	192, 188, 371, -1000, -1000, -1000, -1000, 18211, 1647, -1000,
	-1000, -1000, 1717, 18640, 169, -1000, 1205, 1300, -1000, -1000,
	1549, -1000, 97, -5, -20, 101, -1000, -1000, 146, -1000,
	-1000, -1000, -1000, -1000, 49, -1000, -6, -1000, -4, -1000,
	-1000, -1000, -115, -1000, -1000, -1000, -1000, -1000, 1203, 377,
	1571, -183, 1660, 1728, 1386, 1755, 1731, -10, 206, 206,
	242, 206, -1000, -1000, -1000, -1000, -1000, -1000, 553, 178,
	-1000, -1000, -123, -139, 415, -139, -11, -1000, -1000, -1000,
	-1000, -1000, -1000, 208, -1000, -195, -1000, 326, -1000, 315,
	-1000, 10501, 142, 1343, 524, -1000, 562, 562, 18211, 18211,
	18211, 562, 767, 720, 369, -1000, -1000, -1000, 1643, 1644,
	1728, 1386, -1000, 1765, 1765, 1186, 1130, 208, 208, 208,
	208, 208, 1336, 18211, -1000, 1427, 5262, 5262, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 177, 1547, -1000, 18211,
	1600, -1000, 367, 808, 968, -1000, -1000, 207, 1329, -1000,
	577, -1000, -1000, -1000, -1000, 18211, 1545, 18211, 14787, 14787,
	14787, 14787, -1000, 1597, 1596, -1000, 1622, 1594, 1673, 18211,
	-1000, -1000, -1000, 18993, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1178, 1765, 114, 1567, 13931, 16071, 18211, 13931, -1000,
	-1000, -1000, -1000, -1000, -127, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 114, 13931, 13931, -84, -1000,
	-1000, -287, 1660, 5700, -1000, -1000, 5700, -1000, -1000, 226,
	206, -1000, 13931, 605, 16071, 885, 18211, 18211, -1000, -1000,
	415, 415, -1000, 553, 553, -1000, -1000, -134, 1762, 6576,
	-121, 18211, 206, 16927, 1696, -158, 336, 327, 330, -1000,
	-1000, -186, -1000, -1000, 1325, 11363, 9627, 211, 13931, 3504,
	-1000, -1000, 3504, 562, 562, 562, 3504, 354, -1000, -1000,
	-1000, -1000, -1000, -1000, 18211, -1000, -1000, 1660, -1000, -1000,
	-1000, 1728, 1660, 1728, -1000, -1000, 13931, 16071, 18211, 18211,
	19346, 18211, 1336, 1716, 18211, 1251, -1000, -1000, 9199, 366,
	5700, 1031, 1543, -1000, -1000, 1538, 1537, 1536, 1535, 1531,
	1520, 1517, -1000, 1474, -1000, -1000, 1515, 1511, 1509, 1508,
	-1000, -1000, -1000, -1000, -1000, -1000, 1504, -1000, -1000, -1000,
	1503, 1474, -1000, -1000, 1501, 1499, 1497, 1490, 1488, -1000,
	-1000, -1000, -1000, 1060, -1000, -1000, -1000, -1000, 3066, 6576,
	6576, 6576, 6576, -1000, -1000, 1443, 5700, 1486, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10929, -1000, 1484, 1478, 1477, 1476, 1474, 1473,
	961, 955, 1466, 1465, 1464, 6576, 954, 1459, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1251, -1000, -285, -1000, 10067, 18211, 18211, -1000, 1732, 5700,
	2186, -1000, 1722, -1000, 207, 70, -1000, -1000, -1000, -1000,
	-1000, -1000, 364, 18211, 1290, -1000, 502, 1568, 1566, 1568,
	-1000, -1000, -1000, -1000, 1595, -1000, 1587, -1000, -1000, 1427,
	-1000, -1000, 597, -1000, -1000, -1000, -1000, -1000, -6, -4,
	1288, -1000, -42, 92, -1000, -1000, 1327, -1000, -1000, -1000,
	597, 1288, 224, 953, 952, -1000, 1100, 363, 1335, -1000,
	797, 16499, 18211, 227, 1695, 1325, 1471, 1646, 1762, 1762,
	1762, 415, 19346, 553, 18211, 553, -1000, -1000, 553, -1000,
	362, 18211, 227, 1458, -1000, -1000, -1000, 334, 314, 311,
	16071, 222, -1000, -1000, 1325, -1000, -1000, -1000, 1451, 501,
	-1000, -1000, 6576, -1000, 714, -1000, -1000, 3504, 3504, 3504,
	-1000, 12647, -1000, -1000, 1660, -1000, 1660, 1288, 1325, 1562,
	1334, -1000, -1000, -1000, -1000, -1000, 1449, 1322, -1000, 1762,
	5262, -1000, 14787, -1000, 5700, 5700, 5700, -1000, 15643, -1000,
	15215, -1000, 240, 6138, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5700, 1723, 1723, 1723, 5700, 635, 5700, 5700, -1000,
	665, 7020, 1723, 1723, 1723, 1723, 1723, -1000, 2620, 1723,
	1723, 1723, 1723, 6576, 6576, 6576, 6576, 6576, 6576, 6576,
	6576, 6576, 6576, 6576, 6576, 1436, 769, 6576, 6576, 6576,
	1130, 1554, 1332, -1000, -1000, -1000, -1000, -1000, 574, 714,
	5700, -1000, 7020, 7020, 807, 5700, 5700, 5700, -1000, 1161,
	-1000, -1000, 5700, -1000, -1000, 5700, 6576, 5700, -1000, -1000,
	1723, 1762, 1259, -1000, 1448, -1000, 1319, 1618, -1000, 361,
	1331, -1000, 494, 1310, -1000, 1728, 714, -1000, 356, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -81, -1000, -1000, 18211, 1297, 1732, 18211, 5700,
	-1000, -1000, 5700, 1446, -1000, 5700, -1000, -1000, -1000, -1000,
	1768, 355, 353, 13931, -1000, 155, 13931, -1000, -1000, 18211,
	209, 13931, -12, -143, 5700, 5700, 18211, 5700, -1000, -1000,
	-1000, 1427, 584, 1444, -233, -1000, -57, -1000, 1558, 108,
	-1000, 1646, -1000, 535, -1000, -1000, -1000, -1000, 1762, -1000,
	415, -1000, 415, 553, 18211, -1000, -1000, -233, 1151, -1000,
	-1000, -1000, 312, 1325, 13931, 888, 211, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 18211, 18211, 160, -1000, 18211, 1760,
	-1000, 1302, 1611, -1000, 589, 540, -1000, -1000, 352, -1000,
	-1000, 350, -1000, -1000, -1000, -1000, -1000, 1443, -1000, -1000,
	-1000, 1138, 1236, 714, 5700, -1000, -1000, 5700, 5700, 761,
	5700, 1118, 1292, 1286, -1000, 1094, -1000, 1767, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5700, 5700, 5700,
	5700, 5700, 977, 4824, -1000, -1000, -1000, 5700, 5700, 5700,
	5700, 1357, 848, -1000, 991, 991, 394, 394, 394, 394,
	394, 875, 875, -1000, -1000, -1000, 3066, 1436, 6576, 6576,
	6576, 193, 1626, 1893, -1000, 5700, 598, -1000, 5700, 676,
	-1000, -1000, 7020, 1092, 1122, 1090, 1088, -1000, 979, 1076,
	1177, 1061, 5700, 1760, -285, 4380, 186, 18211, -285, 18211,
	18211, 4380, -1000, 18211, -1000, 2186, 798, -1000, -1000, 1728,
	-1000, 714, 714, 18211, 714, 13931, 418, 539, -1000, 12219,
	13931, -1000, -1000, 13931, 109, 1653, -1000, -1000, -99, -91,
	714, 714, 351, -1000, 1701, 1691, 8342, -1000, -73, -1000,
	-1000, -1000, 217, -1000, 946, 933, 917, 916, 18211, -1000,
	-1000, -1000, -1000, -1000, 469, 469, 469, 1643, -1000, 1762,
	1762, 415, -1000, -8, -45, -1000, 1288, 1059, -1000, -1000,
	-1000, -1000, 1048, -1000, 1758, 1753, 14787, 14359, -1000, -1000,
	-1000, -1000, -1000, 5700, 1546, 1516, 1500, 239, 1280, -1000,
	-1000, -1000, -1000, 5700, 1481, 1469, 1455, 1437, 1429, -1000,
	5700, 5700, 1032, 1416, 1374, 1368, 1365, 1277, -1000, 193,
	1626, 1841, -1000, 6576, 6576, 1355, 528, -1000, 5700, 892,
	239, 728, -1000, -1000, 5700, -1000, -1000, -1000, 728, -1000,
	6576, -1000, 1260, 1758, -1000, 1030, 1294, -1000, -285, -1000,
	-1000, 1259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1271, 1288, -1000, -1000, -1000, -1000, 13931, 1702,
	227, -1000, -3, 245, -289, -86, 1751, 1750, 18211, 169,
	18211, 1028, 1274, -1000, -1000, -1000, 932, 554, -1000, 18211,
	618, 346, 206, 346, 614, 1434, -1000, -1000, -73, -1000,
	795, 793, 790, 785, -48, -1000, -1000, -1000, -1000, -1000,
	1433, 728, -1000, 741, 915, -1000, -1000, 1762, -1000, -8,
	-1000, 274, 278, 29, 1749, -1000, -1000, -1000, 5700, 5700,
	1611, -1000, -1000, 714, -1000, -1000, -1000, 1020, -1000, 1388,
	1426, -1000, 1388, 1388, 1388, 303, 303, 1428, 1428, 1432,
	1428, -1000, 1245, -1000, -1000, -1000, -1000, -1000, 1242, 1192,
	5700, -1000, -1000, -1000, -1000, -1000, -1000, 6576, -1000, -1000,
	-1000, -1000, 714, 5700, 1014, 1005, 918, 1003, 1601, -1000,
	-1000, -1000, 4380, 1259, -1000, -1000, 13931, 13931, -234, -7,
	18211, -291, 905, -1000, 1748, 904, 673, -1000, 1427, 19736,
	8342, 960, -28, -1000, -1000, -1000, 1388, -1000, 1426, 1426,
	1388, 1388, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1425, 1423, -1000, 1388, 1422, 1422, 1388, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18211, 18211, -1000, 18211, 18211,
	206, 5700, -1000, -1000, -1000, -1000, -1000, -1000, 13503, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 784,
	-1000, -1000, -1000, 888, 714, 1236, -1000, -1000, -1000, 780,
	-1000, 772, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	768, -1000, -1000, 766, -1000, -1000, -1000, -1000, 1189, -1000,
	714, -1000, -1000, -1000, 5700, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -121, -293, 765, -1000, 879, -89, -1000, -1000,
	1700, 173, 19624, -1000, 469, 469, 586, 469, 469, 469,
	469, 112, 104, 469, 469, 469, 469, 469, 469, 469,
	469, 469, 469, 469, 469, 469, 469, 1421, -1000, -1000,
	960, -1000, -1000, 627, 6576, -1000, -1000, 876, 741, 400,
	405, 1420, -1000, 79, 601, 581, -1000, 18211, -1000, -38,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 874, 874, -1000,
	-1000, 763, -1000, -1000, 1402, 1431, 50, 1401, -1000, 1396,
	1395, 18211, 1104, 1253, -1000, 1388, 5700, 23, -1000, -1000,
	993, 986, 1240, 1238, -1000, 1073, -100, -103, -1000, 1385,
	-1000, -1000, 1747, 169, -1000, 1745, 19736, -1000, 755, 754,
	469, 469, 749, 873, 872, 863, 469, 469, 747, 844,
	18993, 743, 740, 738, 732, 843, 395, 698, 679, 671,
	18211, 1384, 824, -1000, -1000, 1626, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 695, 1383, -1000,
	-1000, 1382, -1000, -1000, 1220, -1000, 1210, 984, 13503, 68,
	68, 13503, 13503, 13503, 1378, 241, -1000, 13503, 1672, 967,
	-1000, -1000, -1000, -1000, 686, -1000, 685, -1000, 214, -97,
	-103, -1000, 1744, -92, 1743, 1741, 18211, 673, -1000, 96,
	-1000, -1000, -1000, 728, 728, -1000, -1000, -1000, -1000, 841,
	827, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 125, 18211, 1197, -1000, 471, 976, 5700,
	-227, 13503, -1000, 825, -1000, -1000, 1195, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1184, 1159, 1156, 13503, -1000, -1000,
	-1000, 74, 103, -1000, -1000, 1672, 973, 971, 1372, 682,
	-86, 1739, -1000, 673, 1738, 673, 673, 1150, -1000, -1000,
	61, 170, 145, -1000, 238, -1000, -1000, -1000, -1000, -1000,
	-1000, 131, 1142, -1000, 824, 822, -1000, 939, 1555, -1000,
	-15, 1137, -1000, -1000, -1000, -1000, -1000, 1134, -1000, -1000,
	469, 774, 43, -1000, -1000, -1000, -1000, -1000, 1634, 11791,
	-102, -1000, 746, -1000, 673, -1000, -1000, -1000, 18211, 57,
	681, 6576, 1364, 6576, 1358, 69, 1352, -1000, -1000, -1000,
	-1000, -1000, 241, -1000, -1000, 1553, 1519, 1766, -1000, -1000,
	-1000, -1000, 103, 103, 103, 103, -9, 648, -1000, 885,
	-1000, 18211, -1000, 1132, -1000, -1000, -1000, 348, -1000, -1000,
	-1000, -1000, 1349, 1737, -1000, 1117, 18211, 787, 18211, 1347,
	453, 6576, -1000, -1000, 1775, -1000, 1773, 434, 434, -1000,
	-1000, -1000, 1191, -1000, 440, -1000, 13075, 18211, -1000, 162,
	63, -1000, 1121, -1000, 1083, 18211, 644, 664, -1000, -1000,
	-1000, 669, 83, -1000, 18211, 3942, -1000, 347, 1075, -1000,
	963, 55, -1000, -1000, 1058, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 714, 18211, -1000, 162, 1376, -1000, 641, -1000,
	-1000, -1000, 19603, 157, -1000, -1000, 19603, 51, -1000, 153,
	-1000, -1000, 998, -1000, 942, 1346, -1000, 51, 19736, 5700,
	-1000, 19736, 983, -1000,
}

var yyPgo = [...]int{
	0, 100, 2119, 2116, 110, 108, 2115, 2113, 2112, 2111,
	2110, 2105, 2104, 2103, 2101, 2098, 2096, 2095, 2094, 2092,
	2091, 2090, 2088, 2087, 2086, 2083, 2082, 2080, 2079, 2078,
	2077, 2076, 2075, 106, 2074, 2073, 2072, 2071, 2070, 2069,
	137, 2068, 2065, 2063, 2062, 2061, 2060, 2059, 2058, 2057,
	126, 46, 120, 714, 66, 185, 163, 122, 2056, 85,
	154, 2055, 2054, 28, 116, 2052, 123, 119, 88, 145,
	101, 87, 57, 2051, 2044, 2043, 134, 2042, 2041, 2039,
	2037, 60, 2036, 75, 35, 29, 2035, 78, 2034, 2033,
	2032, 2031, 2030, 74, 2029, 64, 43, 2026, 2025, 2024,
	2023, 2022, 32, 2021, 45, 2020, 2015, 2013, 2012, 2011,
	2010, 2008, 15, 17, 19, 2007, 2006, 16, 3, 1992,
	143, 80, 77, 96, 1991, 188, 1989, 1988, 1987, 152,
	1986, 117, 1985, 1983, 1982, 1981, 9, 1980, 42, 1979,
	1977, 1976, 44, 1975, 1974, 1972, 91, 36, 71, 89,
	1971, 1970, 1969, 135, 20, 54, 0, 136, 39, 1968,
	133, 128, 1967, 86, 195, 130, 48, 1966, 38, 65,
	1965, 1964, 1963, 98, 61, 12, 1961, 82, 1960, 90,
	84, 1959, 97, 1958, 124, 2, 94, 1954, 140, 1939,
	1938, 1937, 115, 1936, 1935, 55, 112, 1934, 1933, 1932,
	31, 1930, 33, 21, 1929, 129, 148, 1926, 1922, 1916,
	121, 105, 76, 1915, 1914, 68, 1911, 114, 69, 125,
	1910, 718, 1909, 113, 63, 18, 1908, 146, 1906, 232,
	156, 139, 1905, 1904, 151, 1600, 149, 1903, 131, 10,
	1902, 1901, 11, 1899, 25, 1897, 1896, 1895, 1891, 6,
	1888, 1886, 1885, 1, 5, 1884, 4, 99, 1883, 51,
	56, 1882, 53, 58, 1881, 1879, 1876, 1875, 1870, 162,
	1863, 1862, 1860, 1859, 1858, 1857, 1856, 81, 1855, 1854,
	1853, 1852, 62, 1851, 1850, 1849, 1848, 1847, 30, 1845,
	1844, 22, 1843, 26, 1842, 1839, 1818, 13, 1813, 1811,
	14, 1810, 1808, 7, 8, 1807, 1806, 52, 34, 37,
	72, 70, 1805, 23, 1804, 92, 1803, 1802, 102, 1801,
	95, 1800, 1798, 144, 172, 1797, 138, 1796, 1795, 1794,
	1793, 1792, 1790, 1789, 1786, 1785, 132, 1777,
}

//line mysql_sql.y:6500
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 334, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 48, 306, 306, 305, 305, 304, 304, 303, 303,
	303, 302, 302, 302, 301, 301, 300, 300, 298, 298,
	299, 297, 296, 296, 294, 294, 292, 292, 293, 293,
	287, 287, 290, 290, 288, 288, 288, 288, 291, 286,
	286, 286, 285, 285, 47, 47, 47, 224, 224, 46,
	46, 238, 238, 238, 238, 238, 236, 236, 236, 236,
	235, 235, 234, 234, 239, 239, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 41,
	41, 41, 41, 44, 45, 232, 232, 232, 232, 232,
	233, 233, 233, 42, 43, 43, 223, 223, 228, 228,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 222, 222, 231, 231, 231, 230, 230, 229,
	229, 35, 35, 35, 38, 37, 221, 221, 221, 221,
	221, 221, 221, 221, 36, 36, 36, 36, 36, 36,
	34, 34, 33, 220, 220, 219, 40, 40, 40, 40,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 159,
	159, 159, 325, 325, 326, 327, 328, 328, 328, 49,
	7, 32, 32, 269, 269, 170, 170, 171, 171, 169,
	169, 169, 169, 169, 169, 272, 273, 166, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 31, 335,
	335, 335, 29, 30, 268, 268, 268, 28, 27, 26,
	25, 25, 24, 23, 23, 163, 163, 165, 165, 161,
	336, 336, 244, 244, 164, 164, 22, 22, 162, 162,
	143, 160, 160, 160, 6, 8, 8, 8, 8, 8,
	13, 12, 11, 10, 9, 5, 4, 276, 276, 276,
	276, 276, 276, 314, 314, 314, 315, 75, 75, 70,
	70, 277, 277, 186, 316, 316, 284, 284, 283, 283,
	282, 282, 73, 73, 74, 74, 62, 62, 50, 50,
	289, 289, 289, 289, 295, 295, 266, 266, 109, 109,
	139, 139, 140, 140, 51, 51, 52, 52, 52, 52,
	52, 52, 322, 322, 324, 324, 323, 72, 72, 68,
	68, 69, 69, 69, 67, 67, 66, 65, 65, 64,
	63, 63, 63, 54, 54, 53, 53, 53, 53, 53,
	125, 125, 125, 55, 55, 330, 330, 330, 270, 270,
	270, 275, 275, 122, 122, 123, 123, 121, 121, 56,
	56, 57, 57, 57, 57, 120, 120, 119, 58, 58,
	59, 59, 61, 61, 61, 61, 130, 130, 129, 129,
	129, 129, 78, 78, 128, 127, 127, 127, 77, 77,
	76, 76, 71, 71, 60, 60, 126, 337, 337, 124,
	152, 152, 152, 158, 158, 151, 151, 151, 151, 151,
	157, 157, 153, 153, 154, 154, 154, 3, 3, 3,
	16, 16, 16, 16, 20, 20, 332, 332, 14, 217,
	217, 216, 216, 218, 218, 218, 218, 212, 212, 213,
	213, 213, 213, 214, 214, 214, 215, 215, 215, 215,
	211, 211, 210, 208, 208, 208, 209, 209, 209, 209,
	209, 209, 155, 155, 15, 205, 205, 206, 206, 206,
	207, 207, 199, 199, 199, 199, 19, 203, 203, 204,
	204, 204, 204, 204, 200, 200, 202, 202, 198, 198,
	198, 198, 198, 18, 197, 197, 195, 195, 193, 193,
	194, 194, 192, 192, 192, 196, 196, 17, 271, 271,
	240, 240, 243, 243, 250, 250, 251, 251, 249, 249,
	256, 256, 255, 255, 254, 254, 253, 253, 252, 252,
	247, 247, 246, 246, 241, 241, 241, 241, 241, 242,
	242, 245, 245, 248, 248, 100, 100, 101, 101, 101,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 312,
	312, 313, 103, 103, 103, 107, 107, 107, 107, 107,
	107, 102, 102, 102, 104, 104, 104, 85, 85, 84,
	84, 79, 79, 80, 80, 81, 81, 82, 82, 83,
	83, 83, 83, 83, 83, 226, 226, 310, 310, 311,
	311, 307, 307, 307, 309, 309, 309, 309, 309, 308,
	308, 86, 137, 137, 137, 156, 156, 156, 136, 136,
	136, 99, 99, 98, 98, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 225, 225,
	167, 167, 168, 168, 117, 115, 115, 116, 116, 116,
	116, 113, 114, 112, 112, 112, 112, 112, 111, 111,
	110, 110, 110, 201, 201, 108, 108, 106, 106, 106,
	105, 105, 105, 257, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 178, 178, 183,
	183, 321, 321, 320, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 95, 95, 95, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 281, 281, 281, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 333, 333, 333, 317,
	317, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	134, 134, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 187, 187, 188, 188, 278, 278,
	278, 278, 278, 278, 279, 279, 280, 280, 280, 280,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 274, 176, 176,
	176, 176, 131, 131, 131, 189, 184, 184, 185, 185,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 181,
	181, 181, 181, 181, 173, 173, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 180, 180, 182, 182, 191,
	191, 191, 190, 190, 190, 190, 190, 190, 190, 97,
	97, 97, 97, 258, 172, 172, 172, 172, 172, 172,
	172, 172, 88, 88, 88, 88, 92, 92, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 93, 93, 93, 93, 91, 91, 91, 91,
	91, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 90, 138, 138, 259,
	259, 262, 262, 260, 260, 261, 263, 263, 263, 264,
	264, 264, 265, 265, 265, 267, 267, 142, 142, 142,
	148, 148, 141, 141, 149, 149, 150, 150, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 329, 329, 329, 331, 331,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 14, 0, 2, 1, 3, 3, 3, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 3, 0, 3, 0, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 9, 4, 7, 0, 3, 7,
	4, 1, 3, 3, 3, 1, 0, 1, 1, 1,
	1, 3, 1, 4, 1, 3, 1, 2, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 6, 3, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 3, 4, 4, 4, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 0, 4, 2, 4,
	1, 5, 3, 2, 1, 2, 2, 4, 4, 5,
	2, 1, 7, 1, 3, 3, 1, 1, 1, 1,
	2, 3, 4, 7, 2, 3, 3, 4, 5, 1,
	1, 1, 1, 3, 2, 1, 1, 1, 1, 6,
	1, 7, 9, 0, 2, 0, 1, 1, 2, 2,
	2, 1, 4, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 5, 1,
	1, 1, 5, 5, 0, 1, 1, 2, 2, 3,
	6, 7, 4, 7, 8, 0, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 5, 1, 3,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	4, 4, 6, 4, 4, 6, 4, 2, 1, 5,
	4, 4, 2, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 4, 3, 4, 5,
	4, 5, 2, 3, 1, 3, 6, 0, 3, 0,
	1, 2, 4, 4, 0, 1, 3, 1, 3, 2,
	0, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 4, 4, 4, 3, 2, 2, 2, 3,
	2, 3, 0, 2, 1, 1, 2, 2, 0, 1,
	2, 4, 1, 3, 1, 4, 3, 0, 1, 2,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 8, 11, 0, 1, 6, 0,
	2, 1, 2, 2, 2, 2, 2, 0, 1, 2,
	2, 2, 2, 1, 3, 2, 2, 2, 2, 2,
	1, 3, 2, 1, 3, 2, 0, 3, 3, 5,
	5, 4, 1, 1, 4, 1, 3, 1, 3, 2,
	1, 1, 0, 1, 1, 1, 11, 0, 2, 3,
	2, 3, 1, 1, 1, 3, 3, 4, 0, 2,
	2, 2, 2, 5, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 10, 0, 1,
	0, 6, 0, 4, 0, 3, 1, 3, 4, 5,
	0, 3, 1, 3, 2, 3, 1, 2, 0, 6,
	0, 2, 0, 2, 4, 5, 4, 5, 1, 6,
	5, 0, 3, 0, 1, 0, 1, 1, 3, 2,
	3, 3, 4, 4, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 5, 4, 1,
	3, 3, 0, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 1, 7,
	7, 7, 7, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 0,
	1, 3, 1, 3, 5, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 2, 1, 2, 2, 1, 1,
	2, 2, 2, 2, 2, 1, 5, 6, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 1, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	2, 2, 2, 0, 3, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	3, 5, 2, 2, 2, 2, 1, 1, 2, 5,
	6, 6, 6, 1, 1, 1, 1, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	2, 2, 2, 0, 1, 1, 5, 4, 4, 5,
	5, 5, 5, 4, 5, 5, 5, 5, 5, 5,
	5, 1, 1, 1, 4, 4, 6, 8, 6, 4,
	5, 5, 4, 6, 6, 7, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 2, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	3, 4, 0, 1, 1, 3, 0, 1, 1, 3,
	3, 3, 3, 2, 3, 4, 3, 4, 1, 3,
	4, 3, 4, 1, 1, 1, 3, 4, 4, 5,
	3, 4, 5, 6, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 1, 1, 3, 0,
	1, 0, 3, 0, 3, 3, 0, 3, 5, 0,
	3, 5, 0, 1, 1, 0, 1, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -334, -2, -1, -3, -4, -5, -6, -39, -21,
	-7, -49, -33, -34, -35, -41, -46, -47, -48, -51,
	-16, -15, -14, 8, 10, -8, -159, -22, -23, -24,
	-25, -26, -27, -28, -29, -30, -31, -32, 185, 9,
	49, -36, -37, -38, -42, -43, -44, -45, 293, 299,
	336, -52, -54, -17, -18, -19, -20, 181, -9, -10,
	-11, -12, -13, 203, 202, 26, 201, 182, 120, 121,
	123, 124, 30, -53, -322, 54, 183, -55, 407, 6,
	452, -62, 27, -84, -156, 57, -144, -147, 410, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	422, 423, 424, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 404, 220, 244, 247, 254, 120,
	137, 131, 159, 151, 152, 128, 224, 225, 64, 123,
	364, 350, 335, 126, 239, 241, 243, 246, 226, 147,
	142, 238, 222, 140, 227, 28, 228, 164, 229, 230,
	409, 346, 275, 368, 352, 251, 141, 347, 242, 349,
	165, 169, 356, 299, 135, 136, 354, 358, 163, 200,
	32, 406, 34, 212, 359, 167, 162, 158, 367, 255,
	253, 161, 134, 157, 223, 38, 171, 170, 172, 329,
	330, 331, 332, 231, 232, 287, 355, 154, 143, 279,
	129, 18, 362, 207, 351, 300, 233, 248, 210, 256,
	166, 168, 214, 219, 408, 252, 360, 139, 211, 240,
	206, 363, 130, 293, 302, 234, 124, 245, 357, 366,
	37, 315, 133, 127, 197, 121, 216, 221, 235, 236,
	237, 258, 257, 249, 155, 213, 160, 132, 156, 122,
	215, 365, 316, 451, 277, 318, 153, 150, 217, 190,
	361, 353, 125, 322, 317, 148, 259, 448, 449, 450,
	288, 274, 260, 261, 11, -160, 19, 333, -40, 334,
	185, 54, -156, -5, -4, -33, -51, 188, -59, -60,
	-61, -124, -126, -84, 54, -156, -235, -205, -234, -206,
	-237, -207, -155, 20, 182, 181, 215, 10, 183, 297,
	189, 8, 6, 298, 201, 9, 299, 301, 302, 305,
	306, 307, 31, 310, 311, 57, 60, -156, -235, -205,
	219, 226, -66, -67, -125, 15, 5, -271, 318, 218,
	-199, -197, 308, 198, 197, 76, 370, 187, -335, -268,
	353, 352, -164, 351, 344, 346, 181, 189, 354, 32,
	356, 357, 347, 318, 125, 122, -221, 80, 130, 129,
	-221, 218, 29, -228, 328, -227, -229, 146, 356, 357,
	367, -222, 355, -142, -156, 58, 59, 75, 152, 149,
	-67, -125, -66, -53, -54, -52, -54, 318, 218, 189,
	188, 370, -324, 402, -323, -156, -270, -330, 20, -275,
	178, 179, 180, 21, 22, -1, -73, 210, -84, 119,
	-59, -136, -156, 335, 89, -40, -40, 334, -325, -326,
	-327, -329, 185, 334, 333, 119, -84, 30, -127, -128,
	-129, -130, 41, 45, 47, 42, 43, 44, 48, -337,
	23, -152, -158, 23, -153, 60, -154, -147, 57, 58,
	59, -52, -54, 51, 55, 11, 55, 54, 453, 58,
	295, 309, 318, 296, 308, 190, 218, 309, 218, 344,
	190, 300, 303, 304, 345, 51, 191, 51, -285, 367,
	-50, 27, -69, 17, -55, -54, 16, 20, 21, -332,
	188, 402, -195, 193, -195, 189, -195, -336, 11, 99,
	217, 216, 348, 345, -244, 349, 350, -164, -163, 97,
	-164, 188, 370, -269, 193, 360, 407, 128, 129, 130,
	-232, 20, 29, 327, -205, 218, 55, 89, 19, -230,
	89, 100, -230, -229, -229, -229, -230, -102, 29, -154,
	60, 116, -102, 29, 119, 30, 30, -68, -69, -55,
	-54, -67, -66, -67, 56, 56, -269, -269, -269, -269,
	-269, 55, -324, -72, 54, -56, -57, 107, -179, -156,
	81, -181, 57, -174, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 426,
	427, 428, 429, 430, 431, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 444, 445, 287,
	318, 148, 288, -175, -177, -303, -298, -172, 54, 105,
	106, 113, 82, -176, -257, 24, 84, 378, -132, -133,
	-134, -135, -299, -297, 60, 65, 69, 71, 72, 70,
	67, 144, 118, -54, -317, -145, -274, -280, -278, 149,
	204, 145, 8, 111, 328, 116, 146, -281, 59, 58,
	281, 75, 282, 283, 370, 278, 284, 193, 333, 43,
	285, 286, 289, 377, 290, 44, 291, 280, 208, 292,
	381, 380, 382, 374, 371, 369, 372, 373, 375, 376,
	-56, -276, 33, -51, 54, 30, 54, -156, -121, 12,
	119, 65, 60, -40, 56, 55, -328, 71, 72, -331,
	163, 155, -156, 54, -220, -219, -136, -60, -60, -60,
	-60, 41, 41, 41, 46, 41, 46, 41, -129, -156,
	-158, 56, -236, 188, 294, 214, -234, 215, 299, 302,
	-211, -210, -208, -155, 60, -206, -239, -136, -155, 345,
	-236, -211, -210, 337, 447, -50, -179, -156, -65, -64,
	-179, 190, -195, -211, 81, -205, -154, -156, -84, -163,
	-163, -165, -336, -161, -336, 345, -121, -177, -244, -162,
	-156, -195, -211, 318, 24, 361, 362, 126, 129, 128,
	368, -233, 327, 20, -205, -227, -223, 60, 328, -210,
	-231, 51, 116, -282, -179, 29, -231, -230, -230, -230,
	-231, 115, -156, -50, -68, -50, -69, -211, -205, -156,
	-85, -84, -157, -154, -147, -323, 23, -71, -156, -120,
	55, -119, 11, -151, 80, 78, 79, -156, 23, 60,
	119, -179, 96, -190, 89, 90, 91, 92, 93, 94,
	95, 54, 54, 54, 54, 54, 54, 54, 54, -188,
	54, 54, 54, 54, 54, 54, 54, -188, 54, 54,
	54, 54, 54, 102, 101, 112, 105, 106, 107, 108,
	109, 110, 111, 103, 104, 99, 81, 97, 98, 83,
	-54, -179, -185, -177, -177, -177, -177, -257, -183, -179,
	54, 60, 65, -156, 106, 54, 54, 54, -279, 54,
	-187, -188, 54, 60, 60, 54, 54, 54, -177, 60,
	54, -120, -277, -186, -316, 446, -75, 56, -70, -156,
	-314, -315, -70, -74, -156, -67, -179, -149, -150, -141,
	-146, -153, -154, -147, 276, 186, 20, 80, 23, 25,
	281, 313, 83, 116, 16, 84, 149, 115, 283, 378,
	282, 181, 47, 75, 380, 382, 381, 371, 369, 320,
	324, 326, 323, 370, 344, 29, 10, 26, 202, 21,
	22, 109, 183, 204, 87, 88, 205, 24, 203, 72,
	19, 50, 11, 333, 13, 14, 284, 319, 193, 192,
	99, 337, 189, 45, 8, 118, 27, 96, 321, 41,
	77, 43, 97, 17, 372, 373, 31, 336, 403, 209,
	111, 285, 286, 48, 81, 327, 70, 51, 78, 15,
	46, 98, 184, 377, 44, 218, 325, 289, 291, 402,
	290, 187, 6, 280, 379, 30, 201, 42, 188, 345,
	86, 191, 71, 208, 145, 5, 76, 9, 49, 52,
	374, 375, 376, 33, 85, 12, 292, 407, 328, 338,
	339, 340, 341, 342, 343, 173, 174, 175, 176, 177,
	250, 196, 194, 198, 199, 446, 447, 178, 179, 271,
	273, 146, 19, -40, -326, 119, -71, -121, 55, 89,
	-77, -76, 51, 52, -78, 51, -76, 41, 41, -72,
	-238, 107, 57, 55, -209, 319, 453, 58, 56, 55,
	-238, 191, 60, 60, 55, 18, 119, 55, -63, 25,
	26, -84, 193, -84, -212, -213, 325, 24, -198, 52,
	-193, -194, -192, -196, 29, -121, -121, -121, -163, -157,
	-165, -160, -165, -161, 119, -143, -156, -212, 54, 127,
	130, 130, 129, -205, 191, 54, 89, -231, -231, -231,
	29, -155, -50, -50, 51, 55, 54, 56, 55, -121,
	-57, -58, -59, -179, -179, -179, -156, 60, -156, 107,
	-173, 81, 274, 70, 71, 72, -174, -191, 20, 260,
	261, -184, -185, -179, -131, 21, 20, -131, -131, -179,
	-131, 107, -185, -185, 56, -258, 65, -318, -319, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 392, 393,
	285, 280, 286, 284, 278, 292, 287, 288, 148, 400,
	401, 394, 395, 396, 397, 398, 399, -131, -131, -131,
	-131, -131, -179, -333, 272, 271, 273, -131, -131, -131,
	-131, -175, -175, -175, -175, -175, -175, -175, -175, -175,
	-175, -175, -175, -182, -189, -257, 54, 99, 97, 98,
	83, -177, -175, -175, 56, 55, -321, -320, 85, -179,
	-318, -318, 65, -184, -179, -184, -184, 56, -185, -184,
	-175, -184, -131, -121, 55, 54, 56, 55, 33, 119,
	55, 89, 56, 55, -68, 119, 335, -156, 56, -67,
	-219, -179, -179, 54, -179, 11, 119, 119, -210, 16,
	407, -155, -136, 191, -211, -286, 192, 377, -289, 349,
	-179, -179, -156, -64, -72, 81, 54, -217, 407, 327,
	326, 322, -214, -215, 321, 323, 320, 324, 51, 266,
	267, 268, 269, -192, -142, 115, 229, 152, -121, -163,
	-163, -165, -156, -217, 56, 130, -211, -166, 60, -223,
	-84, -84, -1, -156, -123, 13, 55, 119, -173, 274,
	70, -257, 56, 55, -179, -179, -179, 23, -185, 56,
	56, 56, 56, 11, -179, -179, -179, -179, -179, 56,
	11, 11, -179, -179, -179, -179, -179, -185, -182, -177,
	-175, -175, -180, 205, 80, -179, -178, -320, 87, -179,
	55, 52, -318, 56, 11, 56, 56, 56, 52, 56,
	55, 56, -179, -123, -186, -284, -283, -282, 33, -51,
	-70, -277, -156, -315, -282, -156, -149, -146, -154, -147,
	65, -68, -71, -211, 107, 107, 57, -155, 328, -155,
	-211, -224, 407, 27, -295, 343, 338, 340, 119, 23,
	24, -79, -80, -81, -86, -82, -136, -168, -83, 196,
	194, 198, -311, 76, 199, 250, 77, 189, -216, -218,
	329, 330, 331, 332, 80, -215, 60, 60, 60, 60,
	-84, -148, 89, -148, -148, -121, -121, -163, -170, -171,
	-169, 276, -272, 328, 319, 56, 56, -122, 14, 16,
	-59, -156, 107, -179, 56, 56, 56, -87, -93, 116,
	149, 204, 148, 147, 145, 315, 316, 140, 141, 142,
	139, 56, -179, 56, 56, 56, 56, 56, -179, -179,
	11, 56, 56, 56, 56, 56, -180, 80, -177, -174,
	56, 88, -179, 86, -87, -102, -179, -102, -175, 56,
	-122, 56, 55, -277, 56, -155, 16, 23, -212, 299,
	188, -266, 448, -293, 338, 16, 16, -51, -84, 56,
	55, -88, -92, -89, -91, -90, -94, -93, 149, 150,
	116, 153, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 30, 204, 145, 146, 147, 148, 165, 131,
	151, 405, 173, 132, 174, 133, 175, 134, 176, 135,
	136, 177, 137, -83, -156, 77, -310, -311, -195, -310,
	77, 54, -218, 65, 65, 65, 65, -215, 54, -102,
	-104, -154, 60, 116, 60, -121, -169, 277, 31, 118,
	279, 29, 275, 16, -179, -185, 56, -259, -261, 54,
	-260, 54, -259, -259, -259, -95, 136, 135, -95, -263,
	54, -263, -264, 54, -263, 56, 56, 56, -179, -174,
	-179, 56, 56, 56, 19, 56, 56, -282, -155, -155,
	-224, 300, -84, -109, 449, 60, 16, 60, -291, 60,
	-72, -100, -101, -118, 313, 220, -196, 224, 64, 225,
	335, 226, 189, 228, 229, 230, 200, 231, 232, 233,
	328, 234, 235, 236, 237, 296, 5, 262, -81, -99,
	-98, -96, 70, 81, 29, 313, -97, 64, 115, 243,
	221, 244, -117, -167, 194, 76, 77, 301, -168, -265,
	316, 315, -259, -260, -260, -259, -259, 54, 54, -259,
	-262, 54, -262, -259, -307, -308, -156, -308, -156, -307,
	-307, -195, -179, -200, -202, -136, 54, 65, -273, -166,
	65, 65, 65, 65, 56, -179, -287, -244, -139, 450,
	65, 60, 340, 23, -240, 210, 55, -118, -148, -148,
	-142, 115, -148, -148, -148, -148, 227, 227, -148, -148,
	-148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
	-148, -148, 54, -96, 70, -175, 60, -104, -105, 29,
	242, 238, -106, 29, 222, 223, -108, 54, 250, 77,
	77, -84, -267, 317, -138, 60, -138, 65, 54, 52,
	259, 54, 54, 54, -308, 56, 56, 55, -259, -179,
	278, 56, 56, 56, 55, 56, 55, 56, -294, 343,
	-290, -288, 338, 339, 340, 341, 54, 16, -51, 16,
	-118, 65, 65, -148, -148, 65, 60, 60, 60, -148,
	-148, 65, 60, -158, 65, 65, 65, 65, 29, 60,
	-107, 29, 238, 242, 239, 240, 241, 65, 29, 65,
	29, 65, 29, -156, 54, -312, -313, 60, 65, 54,
	-201, 54, 56, 55, 56, 56, -200, -309, 266, 267,
	268, 270, 269, -309, -200, -200, -200, 54, -226, -225,
	251, 81, -203, -202, -63, 56, 65, 65, -296, 192,
	-292, 342, -288, 16, 340, 16, 16, -140, -156, -291,
	-241, 252, 253, -242, -248, 255, -102, -102, 60, 60,
	-103, 221, -85, 56, 55, 89, 56, -179, -111, -110,
	403, -200, 60, 56, 56, 56, 56, -200, 251, -204,
	200, 64, 407, 264, 265, -63, 56, 56, -302, 54,
	65, -293, 16, -291, 16, -291, -291, 56, 55, -246,
	256, 54, -244, 54, -244, 77, 267, 222, 223, 56,
	-313, 60, 56, -115, -116, -113, -114, 51, 347, 248,
	249, 56, -203, -203, -203, -203, 56, -148, 60, 263,
	-306, 30, 56, -301, -300, -137, -297, -156, 343, 60,
	-291, -156, -243, 257, 65, -175, 54, -175, 54, -245,
	254, 54, -225, -114, 51, -113, 51, 10, 9, -117,
	65, -154, -305, -304, -303, 56, 55, 119, -250, 54,
	16, 56, -239, 56, -239, 54, 89, -175, -112, 245,
	246, 30, 129, -112, 55, 89, -300, -156, -251, -249,
	210, -242, 56, 56, -239, 65, 56, 70, 29, 247,
	-304, 29, -179, 119, 56, 55, 57, -247, 258, 56,
	-156, -249, -252, 33, 65, -256, -253, 54, -118, 212,
	-256, -118, -255, -254, 257, 213, 56, 55, 57, 54,
	-254, -253, -185, 56,
}

var yyDef = [...]int{
	20, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	447, 448, 449, 0, 0, 274, 0, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 210, 0, 0,
	181, 161, 162, 163, 119, 120, 121, 122, 0, 0,
	0, 334, -2, 450, 451, 452, 453, -2, 275, 276,
	277, 278, 279, 199, 200, 201, -2, 0, 174, 0,
	166, 166, 0, 354, 0, 0, 0, 365, 0, 378,
	20, 312, 0, 317, 629, 665, 666, 667, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 0, 190, 0, 0, 194, 0,
	0, 0, 271, 186, 187, 188, 189, 0, 0, 400,
	401, 424, 427, 430, 0, 180, 0, 0, 80, 495,
	82, 497, 0, 86, 88, 89, -2, 93, 94, 95,
	96, 97, 98, 99, 0, 101, 1235, 103, 1296, 106,
	107, 108, 0, 117, 118, -2, -2, 492, 0, 0,
	1285, 62, -2, 0, 0, 0, 370, 456, 526, 526,
	0, 526, 539, 503, 504, 505, 524, 525, 0, 0,
	247, 248, 0, 264, 255, 264, 0, 239, 240, 241,
	245, 246, 265, 213, 175, 176, 165, 0, 170, 0,
	164, 0, 0, 133, 0, 138, 0, 0, 1234, 1300,
	1250, 0, 1268, 0, 159, 152, 153, 1027, 1196, 0,
	349, 0, 355, 354, 354, 0, 354, 213, 213, 213,
	213, 213, 342, 0, 344, 347, 0, 0, 379, 380,
	375, 376, 377, 381, 382, 3, 0, 0, 316, 0,
	387, 191, 668, 0, 0, 195, 196, 0, 0, 202,
	0, 205, 1392, 1393, 1394, 0, 0, 0, 0, 0,
	0, 0, 415, 0, 0, 414, 0, 0, 0, 0,
	428, 429, 431, 0, 433, 434, 442, 443, 444, 445,
	446, 0, 354, 76, 0, 0, 0, 0, 0, 499,
	87, 116, 90, 91, 0, 111, 113, 115, 114, 100,
	112, 102, 104, 105, 110, 76, 0, 0, 0, 63,
	337, 0, 318, 0, 367, 369, 0, 371, 372, 0,
	526, 457, 0, 0, 0, 0, 0, 0, 260, 261,
	255, 255, 249, 257, 0, 262, 263, 0, 387, 0,
	0, 0, 526, 0, 0, 0, 0, 168, 0, 173,
	123, 128, 126, 127, 129, 0, 0, 0, 0, 0,
	157, 158, 0, 0, 0, 0, 0, 146, 149, 621,
	622, 623, 150, 151, 0, 1028, 1029, 318, 350, 366,
	368, 349, -2, 0, 363, 364, 0, 0, 0, 0,
	0, 0, 343, 0, 0, 395, 389, 391, 435, 28,
	0, 918, 665, 923, -2, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, -2, 1365, -2, -2, 1368, 1369, 1370, 1372,
	-2, -2, -2, -2, -2, -2, 1379, -2, -2, -2,
	1383, 1384, -2, -2, 1387, 1388, 1389, 1390, 1391, -2,
	-2, -2, -2, 934, 736, 737, 738, 739, 0, 0,
	0, 0, 0, 746, 747, 0, 759, 0, 753, 754,
	755, 756, 38, 39, 954, 955, 956, 957, 958, 959,
	960, 961, 879, 723, 0, 0, 0, 864, 854, 0,
	874, 892, 0, 0, 0, 0, 893, 0, 40, 41,
	870, 871, 872, 873, 875, 876, 877, 878, 880, 881,
	882, 883, 886, 887, 888, 889, 890, 891, 894, 896,
	866, 867, 868, 869, 858, 859, 860, 861, 862, 863,
	395, 286, 304, 288, 0, 293, 0, 630, 354, 0,
	0, 192, 0, 197, 0, 0, 204, 206, 207, 208,
	1395, 1396, 272, 0, 387, 183, 0, 418, 412, 0,
	405, 416, 417, 408, 0, 410, 0, 406, 407, 347,
	432, 426, 0, 77, 78, 79, 81, 92, 0, 0,
	70, 480, 486, 483, 493, 496, 0, 84, 498, 109,
	0, 65, 0, 0, 0, 338, 351, 28, 356, 357,
	360, 0, 0, 467, 0, 494, 518, -2, 387, 387,
	387, 255, 0, 257, 0, 257, 252, 256, 0, 266,
	268, 0, 467, 1327, 214, 177, 178, 0, 0, 172,
	0, 0, 130, 131, 132, 139, 134, 136, 0, 0,
	140, 154, 155, 156, 310, 311, 141, 0, 0, 0,
	145, 0, 160, 336, 318, 340, 318, 280, 281, 0,
	283, 627, 284, 440, 441, 345, 0, 0, 422, 387,
	0, 396, 0, 392, 0, 0, 0, 436, 0, 438,
	0, 913, 0, 0, 942, 943, 944, 945, 946, 947,
	948, 906, 902, 902, 902, 0, 902, 0, 0, 840,
	0, 0, 902, 902, 902, 902, 902, 841, 0, 902,
	902, 902, 902, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 908, 0, 742, 743, 744, 745, 748, 0, 760,
	0, 898, 0, 0, 0, 906, 906, 906, 843, 0,
	844, 855, 0, 847, 848, 906, 0, 906, 852, 853,
	902, 387, 287, 301, 0, 305, 0, 0, 297, 299,
	292, 294, 0, 0, 314, 349, 388, 669, 0, 1034,
	-2, 1036, -2, -2, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
	1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
	1184, 1185, 0, 198, 203, 0, 0, 354, 0, 0,
	402, 419, 0, 0, 403, 0, 404, 409, 411, 425,
	0, 71, 75, 0, 482, 0, 0, 485, 83, 0,
	0, 0, 59, 320, 0, 0, 0, 0, 359, 361,
	362, 347, 0, 0, 459, 468, 0, 527, 0, 0,
	523, -2, 530, 0, 536, 238, 242, 243, 387, 258,
	255, 259, 255, 257, 0, 267, 270, 459, 0, 179,
	167, 169, 0, 125, 0, 0, 0, 142, 143, 144,
	147, 148, 339, 341, 0, 0, 20, 348, 0, 385,
	390, 397, 398, 910, 911, 912, 437, 439, 29, 393,
	914, 0, 916, 919, 924, 925, 921, 0, 939, -2,
	-2, 0, 907, 908, 0, 903, 904, 0, 0, 0,
	0, 0, 0, 0, 856, 0, 953, 0, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 0, 0, 0,
	0, 0, 0, 0, 806, 807, 808, 0, 0, 0,
	0, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 926, 937, 938, 0, 0, 0, 0,
	0, 935, 930, 0, 740, 0, 757, 761, 0, 0,
	899, 900, 0, 0, 908, 0, 0, 865, 0, 0,
	0, 0, 0, 385, 304, 306, 0, 0, 304, 0,
	0, 0, 313, 0, 285, 0, 0, 273, 209, 349,
	184, 185, 420, 0, 413, 0, 0, 0, 481, 0,
	0, 484, 85, 0, 67, 0, 60, 61, 324, 0,
	352, 353, 29, 358, 0, 0, 631, 458, 0, 469,
	470, 471, 472, 473, 0, 0, 0, 0, 0, 519,
	520, 521, 522, 531, 1030, 1030, 1030, 0, 250, 387,
	387, 255, 269, 215, 0, 171, 124, 0, 227, 135,
	282, 628, 0, 423, 383, 0, 0, 0, 915, 917,
	920, 922, 794, 0, 0, 0, 0, 0, 0, 783,
	777, 778, 857, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 927, 935,
	931, 0, 928, 0, 0, 909, 0, 762, 0, 0,
	0, 0, 901, 795, 0, 799, 842, 845, 0, 849,
	0, 851, 0, 383, 302, 0, 307, 308, 304, 291,
	298, 290, 300, 295, 296, 315, 670, 1035, 1032, 1033,
	193, 182, 0, 69, 72, 73, 74, 487, 0, 488,
	467, 66, 0, 0, 326, 48, 0, 0, 0, 0,
	0, 0, 632, 633, 635, 636, 0, 0, 638, 692,
	0, 647, 526, 647, 0, 0, 649, 650, 460, 461,
	0, 0, 0, 0, 0, 475, 476, 477, 478, 479,
	0, 0, 1031, 0, 0, 253, 251, 387, 211, 216,
	217, 0, 221, 0, 0, 137, 346, 373, 0, 0,
	399, 30, 394, 909, 779, 780, 781, 0, 764, 1009,
	1013, 767, 1009, 1009, 1009, 773, 773, 1016, 1016, 1019,
	1016, 782, 0, 801, 784, 785, 788, 786, 0, 0,
	0, 800, 789, 790, 776, 905, 929, 0, 936, 932,
	741, 749, 758, 0, 0, 0, 0, 0, 0, 787,
	374, 303, 0, 289, 421, 491, 0, 0, 67, 0,
	0, 328, 0, 325, 0, 0, 0, 454, 347, -2,
	0, -2, 1022, 963, 964, 965, 1009, 967, 1013, 1013,
	1009, 1009, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 0, 0, 986, 1009, 1011, 1011, 1009, 1006, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 637, 693, 659, 659, 648, 659, 659,
	526, 0, 462, 463, 464, 465, 466, 474, 0, 532,
	533, 624, 625, 626, 534, 254, 218, 219, 220, 0,
	223, 224, 226, 0, 384, 386, 750, 765, 1010, 0,
	766, 0, 768, 769, 770, 771, 774, 775, 772, 982,
	0, 983, 984, 0, 985, 798, 803, 804, 0, 933,
	763, 751, 752, 796, 0, 846, 850, 309, 489, 490,
	64, 68, 50, 330, 0, 327, 0, 321, 323, 58,
	0, 540, -2, 577, 1030, 1030, 0, 1030, 1030, 1030,
	1030, 0, 0, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 0, 634, 661,
	-2, 673, 675, 0, 0, 678, 679, 0, 0, 0,
	0, 715, 685, 0, 0, 951, 952, 0, 691, 1025,
	1023, 1024, 966, 991, 992, 993, 994, 0, 0, 987,
	988, 0, 989, 990, 0, 651, 660, 0, 660, 0,
	0, 659, 0, 0, 514, 1009, 0, 0, 225, 212,
	0, 0, 0, 0, 805, 0, 44, 0, 319, 0,
	329, 49, 0, 0, 537, 0, 535, 579, 0, 0,
	1030, 1030, 0, 0, 0, 0, 1030, 1030, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 676, 677, 680, 681, 682, 720,
	721, 722, 683, 717, 718, 719, 684, 0, 0, 949,
	950, 713, 962, 1026, 0, 1007, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 645, 507, 0, 360, 0,
	222, 1015, 1014, 1017, 0, 1020, 0, 797, 42, 46,
	51, 52, 0, 0, 0, 0, 0, 0, 455, 573,
	578, 580, 581, 0, 0, 584, 585, 586, 587, 0,
	0, 590, 591, 592, 593, 594, 595, 596, 597, 598,
	599, 615, 616, 617, 618, 619, 620, 600, 601, 602,
	603, 604, 605, 612, 0, 0, 609, 0, 0, 0,
	708, 0, 1004, 0, 1005, 1012, 0, 652, 654, 655,
	656, 657, 658, 653, 0, 0, 0, 0, 644, 646,
	688, 0, 506, 515, 516, 360, 0, 0, 31, 0,
	48, 0, 53, 0, 0, 0, 0, 0, 332, 322,
	562, 0, 0, 568, 0, 574, 582, 583, 588, 589,
	606, 0, 0, 608, 0, 0, 716, 0, 695, 709,
	0, 0, 1008, 507, 507, 507, 507, 0, 689, 508,
	1030, 0, 0, 512, 513, 517, 1018, 1021, 22, 0,
	0, 45, 0, 54, 0, 56, 57, 331, 0, 542,
	0, 0, 0, 0, 0, 571, 0, 613, 614, 607,
	610, 611, 686, 694, 696, 697, 698, 0, 710, 711,
	712, 714, 639, 640, 641, 642, 0, 0, 510, 0,
	21, 0, 32, 0, 34, 36, 37, 662, 43, 47,
	55, 333, 544, 0, 563, 0, 0, 0, 0, 0,
	0, 0, 687, 699, 0, 700, 0, 0, 0, 643,
	509, 511, 23, 24, 0, 33, 0, 0, 541, 0,
	573, 564, 0, 566, 0, 0, 0, 0, 701, 703,
	704, 0, 0, 702, 0, 0, 35, 663, 0, 546,
	0, 560, 565, 567, 0, 572, 570, 705, 707, 706,
	25, 26, 27, 0, 545, 0, 558, 543, 0, 569,
	664, 547, -2, 0, 561, 548, -2, 0, 556, 0,
	549, 557, 0, 552, 0, 0, 551, 0, -2, 0,
	553, -2, 0, 559,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 110, 102, 3,
	54, 56, 107, 105, 55, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 452,
	90, 89, 91, 3, 453, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:505
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:511
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:534
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:538
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 21:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:544
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:559
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:563
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:569
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:573
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:579
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:586
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:595
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:599
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:603
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:608
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:612
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:616
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:622
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:631
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:642
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:646
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:652
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:656
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:662
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:686
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:705
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:709
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:714
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:718
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:726
		{
			yyVAL.str = ""
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:730
		{
			yyVAL.str = yyDollar[3].str
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:735
		{
			yyVAL.str = "\n"
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:739
		{
			yyVAL.str = yyDollar[3].str
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:744
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:748
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:772
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:776
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:782
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:788
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:806
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:823
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:846
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:850
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:854
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:859
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:863
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:869
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:887
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:897
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:901
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:911
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:921
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:931
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:937
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:943
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:950
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:958
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:966
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:970
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:974
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:978
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:984
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:988
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:994
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1001
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1010
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1014
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1020
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1024
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1028
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1032
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1036
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1040
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1044
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1048
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1052
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1056
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1060
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1064
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1068
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1072
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1076
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1080
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1160
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1166
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1174
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1178
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1182
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1186
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1196
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1210
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1216
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1220
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1227
		{
			yyVAL.str = yyDollar[3].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1233
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1237
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1243
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1251
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1268
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1276
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1284
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1307
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1314
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1321
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1329
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1336
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1343
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1356
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1360
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1364
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1370
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1374
		{
			yyVAL.str = yyDollar[1].str
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1381
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1392
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1398
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1403
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1407
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1411
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1415
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1419
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1423
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1427
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1431
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1437
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1441
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1445
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1449
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1454
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1459
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1465
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1469
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1475
		{
			yyLOCAL = &tree.Update{
				Table:   yyDollar[2].tableExprUnion(),
				Exprs:   yyDollar[4].updateExprsUnion(),
				Where:   yyDollar[5].whereUnion(),
				OrderBy: yyDollar[6].orderByUnion(),
				Limit:   yyDollar[7].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1488
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1492
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1498
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1507
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1513
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1518
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1523
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1527
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1531
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1535
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt

		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1544
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1552
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1562
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1575
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1579
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1585
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1591
		{
			yyVAL.str = yyDollar[1].str
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1596
		{
			yyVAL.str = "true"
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1597
		{
			yyVAL.str = "false"
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1598
		{
			yyVAL.str = yyDollar[1].str
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1603
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1613
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1624
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1637
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1641
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1646
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1650
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1656
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1660
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1666
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1670
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1674
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1678
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1682
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1686
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1692
		{
			yyVAL.item = nil
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1697
		{
			yyVAL.item = nil
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1718
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1732
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1742
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1751
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1755
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1759
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1765
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1771
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1777
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1783
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1793
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1805
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1811
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1823
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1836
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1840
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1845
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1849
		{
			yyVAL.str = yyDollar[2].str
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1855
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1868
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1872
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1878
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1882
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1888
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1892
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1901
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1905
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1909
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1934
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1943
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1953
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1959
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1965
		{
			yyLOCAL = &tree.Delete{
				Table:   yyDollar[3].tableExprUnion(),
				Where:   yyDollar[4].whereUnion(),
				OrderBy: yyDollar[5].orderByUnion(),
				Limit:   yyDollar[6].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1980
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:1989
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:1996
		{
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(yyDollar[1].selectUnion(), nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2002
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2010
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2017
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(yyDollar[4].selectUnion(), nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2024
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2043
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2047
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2051
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2057
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2066
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2070
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2076
		{
			yyVAL.str = yyDollar[1].str
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2080
		{
			yyVAL.str = yyDollar[3].str
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2086
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2090
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2096
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2101
		{
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2105
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2112
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2116
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2123
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2128
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2132
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2138
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2142
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2148
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2152
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2157
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2161
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2174
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2181
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2188
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2206
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2225
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2231
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2238
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2242
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2255
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2259
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2264
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2268
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2275
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2280
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2287
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2293
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2297
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2301
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2305
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2309
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2313
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2319
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2326
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2335
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2339
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2345
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2353
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2357
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2362
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2366
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2372
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2376
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2380
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2385
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2389
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2395
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2401
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2405
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2411
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2416
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2420
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2424
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2431
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2435
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2441
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2445
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2455
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2465
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2475
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2487
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2495
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2503
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2524
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2542
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2546
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2550
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2559
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2563
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2568
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2572
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2577
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2581
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2587
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2591
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2597
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2601
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2605
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2609
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2615
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier("dual"), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2623
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2629
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2637
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2641
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2651
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2660
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2670
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2679
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2689
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2693
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2703
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2707
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2711
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2715
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2721
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2725
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2731
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2737
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2741
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2745
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2751
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2755
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2761
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2765
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2771
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2775
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2781
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2785
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:2798
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2803
		{
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2804
		{
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:2808
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2820
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2824
		{
			yyVAL.str = yyDollar[1].str
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2828
		{
			yyVAL.str = yyDollar[2].str
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2837
		{
			yyVAL.str = ""
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2841
		{
			yyVAL.str = yyDollar[1].str
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2845
		{
			yyVAL.str = yyDollar[2].str
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2849
		{
			yyVAL.str = yyDollar[1].str
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2853
		{
			yyVAL.str = yyDollar[2].str
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2883
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2893
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2904
		{
		}
	case 458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2909
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2919
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2923
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2929
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2933
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2939
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2943
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2947
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2951
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2957
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2964
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2969
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2974
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2979
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2985
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2989
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2993
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:2999
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3003
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3007
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3011
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3017
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3021
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3027
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3040
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3044
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3048
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3053
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3057
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3064
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3070
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3078
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3085
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3106
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3110
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3116
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3120
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3124
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3133
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3137
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3141
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3145
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3151
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3170
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3174
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3196
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3200
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3204
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3208
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3212
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3218
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3222
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3228
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3233
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3238
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3242
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3246
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3250
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3254
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3260
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3274
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3278
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3283
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3287
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3293
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3297
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3303
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3307
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3311
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3316
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3320
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3326
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3338
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3342
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3347
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3351
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3361
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3365
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3374
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3378
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3384
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3388
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3394
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3403
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3413
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3417
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3423
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3427
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3433
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3440
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3449
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3453
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3458
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3462
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3467
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3471
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3481
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3485
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3496
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3504
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3512
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3520
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3531
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3541
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3551
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3555
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3560
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3564
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3569
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3573
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3579
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3583
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3587
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3593
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3597
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3601
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3605
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3609
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3613
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3617
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3621
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3625
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3629
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3633
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3637
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3641
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3645
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3649
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3653
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3657
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3661
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3665
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3669
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3673
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3677
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3681
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3685
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3689
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3693
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3697
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3701
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3705
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3712
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3716
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3722
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3727
		{
			yyVAL.str = ""
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3731
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3735
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3741
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3745
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3749
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3753
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3757
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3761
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3777
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3781
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3790
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3795
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3801
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3808
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3812
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3818
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3822
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3828
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3838
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3844
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3853
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3862
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3885
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3894
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3904
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3912
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3918
		{
			yyVAL.str = ""
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3922
		{
			yyVAL.str = yyDollar[1].str
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3932
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3938
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3944
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3958
		{
			yyVAL.str = ""
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:3965
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3971
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3975
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3979
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3990
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3994
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3998
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4003
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4007
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4013
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4017
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4023
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4027
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4031
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4035
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4039
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4043
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4047
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4051
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4055
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4059
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4063
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4067
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4071
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4081
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4085
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4090
		{
			yyVAL.str = ""
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4094
		{
			yyVAL.str = yyDollar[1].str
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4100
		{
			yyVAL.str = ""
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4104
		{
			yyVAL.str = yyDollar[2].str
		}
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4110
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4121
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4131
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4138
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4145
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4152
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4161
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4167
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4173
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4177
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4181
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4185
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4189
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4194
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4201
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4205
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4209
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4214
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4218
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4223
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4227
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4243
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4249
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4253
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4257
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4261
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4265
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4269
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4273
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4277
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4281
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4285
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4289
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4293
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4297
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4303
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4307
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4311
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4315
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4319
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4323
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4327
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4331
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4335
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4339
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4343
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4347
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4352
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4360
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4364
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4368
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4377
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4381
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4385
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4389
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4394
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4398
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4403
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4407
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4413
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4417
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4423
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4433
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4446
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4459
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4471
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4485
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          0,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4500
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4515
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4528
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4543
		{
		}
	case 776:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4549
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4558
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4566
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4574
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4583
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4592
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4601
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4610
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4619
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4628
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4637
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4646
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4655
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4664
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4673
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4689
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4697
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4705
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4713
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4721
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4730
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4738
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4747
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4756
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4764
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4772
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4781
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4801
		{
			yyVAL.str = yyDollar[1].str
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4837
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4849
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4863
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4871
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4878
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4890
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4898
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4909
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4918
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4927
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4935
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4945
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4953
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4961
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4971
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4975
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4981
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4985
		{
			yyLOCAL = yyDollar[2].numValUnion()
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4998
		{
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5000
		{
		}
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5040
		{
			name := tree.SetUnresolvedName("interval")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5049
		{
			str := strconv.FormatInt(yyDollar[2].item.(int64), 10)
			str += " " + yyDollar[3].str
			name := tree.SetUnresolvedName("interval")
			es := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5060
		{
			str := yyDollar[2].str
			str += " " + yyDollar[3].str
			name := tree.SetUnresolvedName("interval")
			es := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5071
		{
			str := strconv.FormatInt(-yyDollar[3].item.(int64), 10)
			str += " " + yyDollar[4].str
			name := tree.SetUnresolvedName("interval")
			es := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5083
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5087
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5091
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5097
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5102
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5106
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5112
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5116
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5123
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5127
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5131
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5135
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5139
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5143
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5147
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5152
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5157
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5163
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5167
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5171
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5175
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5182
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5186
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5192
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5196
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5200
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5204
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5208
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5212
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5216
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5220
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5226
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5230
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5236
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5240
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5247
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5251
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5255
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5261
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5265
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5269
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5273
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5277
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5281
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5285
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5291
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5295
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5299
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5303
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.NumVal
//line mysql_sql.y:5309
		{
			ival, errStr := util.GetInt64(yyDollar[1].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			if ival > 0 {
				yyLOCAL = tree.NewNumValWithResInt(constant.MakeInt64(ival), yylex.(*Lexer).scanner.LastToken, false, ival)
				yyLOCAL.ValType = tree.P_int64
			} else {
				yyLOCAL = tree.NewNumValWithResInt(constant.MakeInt64(ival), yylex.(*Lexer).scanner.LastToken, true, ival)
				yyLOCAL.ValType = tree.P_int64
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5326
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5330
		{
			ival := util.GetUint64(yyDollar[1].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(ival), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5335
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5340
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5344
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5348
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5352
		{
			ival := util.GetUint64(yyDollar[1].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(ival), yylex.(*Lexer).scanner.LastToken, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5357
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal128)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5366
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5377
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5382
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5388
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5400
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5412
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5424
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5437
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5450
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5463
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5476
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5489
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5502
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5515
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5528
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5541
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5554
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5569
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5592
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5629
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5677
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5694
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5706
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5721
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5741
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5761
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5777
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5790
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5803
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5816
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5829
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5841
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5853
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5865
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5877
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5889
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5901
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5913
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5925
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5937
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5950
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5965
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5988
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5993
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:5999
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6006
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6010
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6015
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6019
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6025
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6031
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6038
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6045
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6054
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6061
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6068
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6077
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6081
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6085
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6091
		{
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6093
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6103
		{
			yyVAL.str = ""
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6107
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
