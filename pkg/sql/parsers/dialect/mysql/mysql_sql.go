// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const INTEGRAL = 57437
const HEX = 57438
const FLOAT = 57439
const HEXNUM = 57440
const BIT_LITERAL = 57441
const NULL = 57442
const TRUE = 57443
const FALSE = 57444
const LOWER_THAN_CHARSET = 57445
const CHARSET = 57446
const UNIQUE = 57447
const KEY = 57448
const OR = 57449
const PIPE_CONCAT = 57450
const XOR = 57451
const AND = 57452
const NOT = 57453
const BETWEEN = 57454
const CASE = 57455
const WHEN = 57456
const THEN = 57457
const ELSE = 57458
const END = 57459
const ELSEIF = 57460
const LOWER_THAN_EQ = 57461
const LE = 57462
const GE = 57463
const NE = 57464
const NULL_SAFE_EQUAL = 57465
const IS = 57466
const LIKE = 57467
const REGEXP = 57468
const IN = 57469
const ASSIGNMENT = 57470
const ILIKE = 57471
const SHIFT_LEFT = 57472
const SHIFT_RIGHT = 57473
const DIV = 57474
const MOD = 57475
const UNARY = 57476
const COLLATE = 57477
const BINARY = 57478
const UNDERSCORE_BINARY = 57479
const INTERVAL = 57480
const OUT = 57481
const INOUT = 57482
const BEGIN = 57483
const START = 57484
const TRANSACTION = 57485
const COMMIT = 57486
const ROLLBACK = 57487
const WORK = 57488
const CONSISTENT = 57489
const SNAPSHOT = 57490
const CHAIN = 57491
const NO = 57492
const RELEASE = 57493
const PRIORITY = 57494
const QUICK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const DECIMAL_VALUE = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const BOOL = 57516
const CHARACTER = 57517
const VARBINARY = 57518
const NCHAR = 57519
const TEXT = 57520
const TINYTEXT = 57521
const MEDIUMTEXT = 57522
const LONGTEXT = 57523
const BLOB = 57524
const TINYBLOB = 57525
const MEDIUMBLOB = 57526
const LONGBLOB = 57527
const JSON = 57528
const ENUM = 57529
const UUID = 57530
const VECF32 = 57531
const VECF64 = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const INT1 = 57541
const INT2 = 57542
const INT3 = 57543
const INT4 = 57544
const INT8 = 57545
const S3OPTION = 57546
const STAGEOPTION = 57547
const SQL_SMALL_RESULT = 57548
const SQL_BIG_RESULT = 57549
const SQL_BUFFER_RESULT = 57550
const LOW_PRIORITY = 57551
const HIGH_PRIORITY = 57552
const DELAYED = 57553
const CREATE = 57554
const ALTER = 57555
const DROP = 57556
const RENAME = 57557
const ANALYZE = 57558
const ADD = 57559
const RETURNS = 57560
const SCHEMA = 57561
const TABLE = 57562
const SEQUENCE = 57563
const INDEX = 57564
const VIEW = 57565
const TO = 57566
const IGNORE = 57567
const IF = 57568
const PRIMARY = 57569
const COLUMN = 57570
const CONSTRAINT = 57571
const SPATIAL = 57572
const FULLTEXT = 57573
const FOREIGN = 57574
const KEY_BLOCK_SIZE = 57575
const SHOW = 57576
const DESCRIBE = 57577
const EXPLAIN = 57578
const DATE = 57579
const ESCAPE = 57580
const REPAIR = 57581
const OPTIMIZE = 57582
const TRUNCATE = 57583
const MAXVALUE = 57584
const PARTITION = 57585
const REORGANIZE = 57586
const LESS = 57587
const THAN = 57588
const PROCEDURE = 57589
const TRIGGER = 57590
const STATUS = 57591
const VARIABLES = 57592
const ROLE = 57593
const PROXY = 57594
const AVG_ROW_LENGTH = 57595
const STORAGE = 57596
const DISK = 57597
const MEMORY = 57598
const CHECKSUM = 57599
const COMPRESSION = 57600
const DATA = 57601
const DIRECTORY = 57602
const DELAY_KEY_WRITE = 57603
const ENCRYPTION = 57604
const ENGINE = 57605
const MAX_ROWS = 57606
const MIN_ROWS = 57607
const PACK_KEYS = 57608
const ROW_FORMAT = 57609
const STATS_AUTO_RECALC = 57610
const STATS_PERSISTENT = 57611
const STATS_SAMPLE_PAGES = 57612
const DYNAMIC = 57613
const COMPRESSED = 57614
const REDUNDANT = 57615
const COMPACT = 57616
const FIXED = 57617
const COLUMN_FORMAT = 57618
const AUTO_RANDOM = 57619
const ENGINE_ATTRIBUTE = 57620
const SECONDARY_ENGINE_ATTRIBUTE = 57621
const INSERT_METHOD = 57622
const RESTRICT = 57623
const CASCADE = 57624
const ACTION = 57625
const PARTIAL = 57626
const SIMPLE = 57627
const CHECK = 57628
const ENFORCED = 57629
const RANGE = 57630
const LIST = 57631
const ALGORITHM = 57632
const LINEAR = 57633
const PARTITIONS = 57634
const SUBPARTITION = 57635
const SUBPARTITIONS = 57636
const CLUSTER = 57637
const TYPE = 57638
const ANY = 57639
const SOME = 57640
const EXTERNAL = 57641
const LOCALFILE = 57642
const URL = 57643
const PREPARE = 57644
const DEALLOCATE = 57645
const RESET = 57646
const EXTENSION = 57647
const INCREMENT = 57648
const CYCLE = 57649
const MINVALUE = 57650
const PUBLICATION = 57651
const SUBSCRIPTIONS = 57652
const PUBLICATIONS = 57653
const PROPERTIES = 57654
const PARSER = 57655
const VISIBLE = 57656
const INVISIBLE = 57657
const BTREE = 57658
const HASH = 57659
const RTREE = 57660
const BSI = 57661
const IVFFLAT = 57662
const MASTER = 57663
const ZONEMAP = 57664
const LEADING = 57665
const BOTH = 57666
const TRAILING = 57667
const UNKNOWN = 57668
const LISTS = 57669
const OP_TYPE = 57670
const REINDEX = 57671
const EXPIRE = 57672
const ACCOUNT = 57673
const ACCOUNTS = 57674
const UNLOCK = 57675
const DAY = 57676
const NEVER = 57677
const PUMP = 57678
const MYSQL_COMPATIBILITY_MODE = 57679
const MODIFY = 57680
const CHANGE = 57681
const SECOND = 57682
const ASCII = 57683
const COALESCE = 57684
const COLLATION = 57685
const HOUR = 57686
const MICROSECOND = 57687
const MINUTE = 57688
const MONTH = 57689
const QUARTER = 57690
const REPEAT = 57691
const REVERSE = 57692
const ROW_COUNT = 57693
const WEEK = 57694
const REVOKE = 57695
const FUNCTION = 57696
const PRIVILEGES = 57697
const TABLESPACE = 57698
const EXECUTE = 57699
const SUPER = 57700
const GRANT = 57701
const OPTION = 57702
const REFERENCES = 57703
const REPLICATION = 57704
const SLAVE = 57705
const CLIENT = 57706
const USAGE = 57707
const RELOAD = 57708
const FILE = 57709
const TEMPORARY = 57710
const ROUTINE = 57711
const EVENT = 57712
const SHUTDOWN = 57713
const NULLX = 57714
const AUTO_INCREMENT = 57715
const APPROXNUM = 57716
const SIGNED = 57717
const UNSIGNED = 57718
const ZEROFILL = 57719
const ENGINES = 57720
const LOW_CARDINALITY = 57721
const AUTOEXTEND_SIZE = 57722
const ADMIN_NAME = 57723
const RANDOM = 57724
const SUSPEND = 57725
const ATTRIBUTE = 57726
const HISTORY = 57727
const REUSE = 57728
const CURRENT = 57729
const OPTIONAL = 57730
const FAILED_LOGIN_ATTEMPTS = 57731
const PASSWORD_LOCK_TIME = 57732
const UNBOUNDED = 57733
const SECONDARY = 57734
const RESTRICTED = 57735
const USER = 57736
const IDENTIFIED = 57737
const CIPHER = 57738
const ISSUER = 57739
const X509 = 57740
const SUBJECT = 57741
const SAN = 57742
const REQUIRE = 57743
const SSL = 57744
const NONE = 57745
const PASSWORD = 57746
const SHARED = 57747
const EXCLUSIVE = 57748
const MAX_QUERIES_PER_HOUR = 57749
const MAX_UPDATES_PER_HOUR = 57750
const MAX_CONNECTIONS_PER_HOUR = 57751
const MAX_USER_CONNECTIONS = 57752
const FORMAT = 57753
const VERBOSE = 57754
const CONNECTION = 57755
const TRIGGERS = 57756
const PROFILES = 57757
const LOAD = 57758
const INLINE = 57759
const INFILE = 57760
const TERMINATED = 57761
const OPTIONALLY = 57762
const ENCLOSED = 57763
const ESCAPED = 57764
const STARTING = 57765
const LINES = 57766
const ROWS = 57767
const IMPORT = 57768
const DISCARD = 57769
const JSONTYPE = 57770
const MODUMP = 57771
const OVER = 57772
const PRECEDING = 57773
const FOLLOWING = 57774
const GROUPS = 57775
const DATABASES = 57776
const TABLES = 57777
const SEQUENCES = 57778
const EXTENDED = 57779
const FULL = 57780
const PROCESSLIST = 57781
const FIELDS = 57782
const COLUMNS = 57783
const OPEN = 57784
const ERRORS = 57785
const WARNINGS = 57786
const INDEXES = 57787
const SCHEMAS = 57788
const NODE = 57789
const LOCKS = 57790
const ROLES = 57791
const TABLE_NUMBER = 57792
const COLUMN_NUMBER = 57793
const TABLE_VALUES = 57794
const TABLE_SIZE = 57795
const NAMES = 57796
const GLOBAL = 57797
const PERSIST = 57798
const SESSION = 57799
const ISOLATION = 57800
const LEVEL = 57801
const READ = 57802
const WRITE = 57803
const ONLY = 57804
const REPEATABLE = 57805
const COMMITTED = 57806
const UNCOMMITTED = 57807
const SERIALIZABLE = 57808
const LOCAL = 57809
const EVENTS = 57810
const PLUGINS = 57811
const CURRENT_TIMESTAMP = 57812
const DATABASE = 57813
const CURRENT_TIME = 57814
const LOCALTIME = 57815
const LOCALTIMESTAMP = 57816
const UTC_DATE = 57817
const UTC_TIME = 57818
const UTC_TIMESTAMP = 57819
const REPLACE = 57820
const CONVERT = 57821
const SEPARATOR = 57822
const TIMESTAMPDIFF = 57823
const CURRENT_DATE = 57824
const CURRENT_USER = 57825
const CURRENT_ROLE = 57826
const SECOND_MICROSECOND = 57827
const MINUTE_MICROSECOND = 57828
const MINUTE_SECOND = 57829
const HOUR_MICROSECOND = 57830
const HOUR_SECOND = 57831
const HOUR_MINUTE = 57832
const DAY_MICROSECOND = 57833
const DAY_SECOND = 57834
const DAY_MINUTE = 57835
const DAY_HOUR = 57836
const YEAR_MONTH = 57837
const SQL_TSI_HOUR = 57838
const SQL_TSI_DAY = 57839
const SQL_TSI_WEEK = 57840
const SQL_TSI_MONTH = 57841
const SQL_TSI_QUARTER = 57842
const SQL_TSI_YEAR = 57843
const SQL_TSI_SECOND = 57844
const SQL_TSI_MINUTE = 57845
const RECURSIVE = 57846
const CONFIG = 57847
const DRAINER = 57848
const SOURCE = 57849
const STREAM = 57850
const HEADERS = 57851
const CONNECTOR = 57852
const CONNECTORS = 57853
const DAEMON = 57854
const PAUSE = 57855
const CANCEL = 57856
const TASK = 57857
const RESUME = 57858
const MATCH = 57859
const AGAINST = 57860
const BOOLEAN = 57861
const LANGUAGE = 57862
const WITH = 57863
const QUERY = 57864
const EXPANSION = 57865
const WITHOUT = 57866
const VALIDATION = 57867
const ADDDATE = 57868
const BIT_AND = 57869
const BIT_OR = 57870
const BIT_XOR = 57871
const CAST = 57872
const COUNT = 57873
const APPROX_COUNT = 57874
const APPROX_COUNT_DISTINCT = 57875
const SERIAL_EXTRACT = 57876
const APPROX_PERCENTILE = 57877
const CURDATE = 57878
const CURTIME = 57879
const DATE_ADD = 57880
const DATE_SUB = 57881
const EXTRACT = 57882
const GROUP_CONCAT = 57883
const MAX = 57884
const MID = 57885
const MIN = 57886
const NOW = 57887
const POSITION = 57888
const SESSION_USER = 57889
const STD = 57890
const STDDEV = 57891
const MEDIAN = 57892
const CLUSTER_CENTERS = 57893
const KMEANS = 57894
const STDDEV_POP = 57895
const STDDEV_SAMP = 57896
const SUBDATE = 57897
const SUBSTR = 57898
const SUBSTRING = 57899
const SUM = 57900
const SYSDATE = 57901
const SYSTEM_USER = 57902
const TRANSLATE = 57903
const TRIM = 57904
const VARIANCE = 57905
const VAR_POP = 57906
const VAR_SAMP = 57907
const AVG = 57908
const RANK = 57909
const ROW_NUMBER = 57910
const DENSE_RANK = 57911
const BIT_CAST = 57912
const NEXTVAL = 57913
const SETVAL = 57914
const CURRVAL = 57915
const LASTVAL = 57916
const ARROW = 57917
const ROW = 57918
const OUTFILE = 57919
const HEADER = 57920
const MAX_FILE_SIZE = 57921
const FORCE_QUOTE = 57922
const PARALLEL = 57923
const UNUSED = 57924
const BINDINGS = 57925
const DO = 57926
const DECLARE = 57927
const LOOP = 57928
const WHILE = 57929
const LEAVE = 57930
const ITERATE = 57931
const UNTIL = 57932
const CALL = 57933
const PREV = 57934
const SLIDING = 57935
const FILL = 57936
const SPBEGIN = 57937
const BACKEND = 57938
const SERVERS = 57939
const HANDLER = 57940
const PERCENT = 57941
const SAMPLE = 57942
const KILL = 57943
const BACKUP = 57944
const FILESYSTEM = 57945
const PARALLELISM = 57946
const QUERY_RESULT = 57947

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11339

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 118,
	11, 710,
	22, 710,
	-2, 703,
	-1, 138,
	237, 1100,
	239, 1001,
	-2, 1048,
	-1, 162,
	43, 538,
	239, 538,
	266, 545,
	267, 545,
	462, 538,
	-2, 572,
	-1, 203,
	626, 1846,
	-2, 454,
	-1, 499,
	626, 1963,
	-2, 348,
	-1, 557,
	626, 2022,
	-2, 346,
	-1, 558,
	626, 2023,
	-2, 347,
	-1, 559,
	626, 2024,
	-2, 349,
	-1, 685,
	318, 136,
	434, 136,
	435, 136,
	-2, 1751,
	-1, 750,
	82, 1538,
	-2, 1901,
	-1, 751,
	82, 1556,
	-2, 1872,
	-1, 755,
	82, 1557,
	-2, 1900,
	-1, 783,
	82, 1468,
	-2, 2094,
	-1, 784,
	82, 1469,
	-2, 2093,
	-1, 785,
	82, 1470,
	-2, 2083,
	-1, 786,
	82, 2055,
	-2, 2076,
	-1, 787,
	82, 2056,
	-2, 2077,
	-1, 788,
	82, 2057,
	-2, 2085,
	-1, 789,
	82, 2058,
	-2, 2065,
	-1, 790,
	82, 2059,
	-2, 2074,
	-1, 791,
	82, 2060,
	-2, 2086,
	-1, 792,
	82, 2061,
	-2, 2087,
	-1, 793,
	82, 2062,
	-2, 2092,
	-1, 794,
	82, 2063,
	-2, 2097,
	-1, 795,
	82, 2064,
	-2, 2098,
	-1, 796,
	82, 1534,
	-2, 1937,
	-1, 797,
	82, 1535,
	-2, 1735,
	-1, 798,
	82, 1536,
	-2, 1946,
	-1, 799,
	82, 1537,
	-2, 1744,
	-1, 801,
	82, 1540,
	-2, 1752,
	-1, 802,
	82, 1541,
	-2, 1970,
	-1, 804,
	82, 1544,
	-2, 1771,
	-1, 806,
	82, 1546,
	-2, 1982,
	-1, 807,
	82, 1547,
	-2, 1981,
	-1, 808,
	82, 1548,
	-2, 1815,
	-1, 809,
	82, 1549,
	-2, 1896,
	-1, 812,
	82, 1552,
	-2, 1993,
	-1, 814,
	82, 1554,
	-2, 1996,
	-1, 815,
	82, 1555,
	-2, 1998,
	-1, 816,
	82, 1558,
	-2, 2006,
	-1, 817,
	82, 1559,
	-2, 1881,
	-1, 818,
	82, 1560,
	-2, 1926,
	-1, 819,
	82, 1561,
	-2, 1891,
	-1, 820,
	82, 1562,
	-2, 1916,
	-1, 831,
	82, 1446,
	-2, 2088,
	-1, 832,
	82, 1447,
	-2, 2089,
	-1, 833,
	82, 1448,
	-2, 2090,
	-1, 919,
	457, 572,
	458, 572,
	-2, 539,
	-1, 965,
	123, 1735,
	134, 1735,
	154, 1735,
	-2, 1709,
	-1, 1075,
	22, 737,
	-2, 686,
	-1, 1179,
	11, 710,
	22, 710,
	-2, 1330,
	-1, 1255,
	22, 737,
	-2, 686,
	-1, 1572,
	82, 1609,
	-2, 1898,
	-1, 1573,
	82, 1610,
	-2, 1899,
	-1, 1718,
	83, 887,
	-2, 893,
	-1, 2133,
	106, 1040,
	150, 1040,
	189, 1040,
	192, 1040,
	279, 1040,
	-2, 1033,
	-1, 2280,
	11, 710,
	22, 710,
	-2, 830,
	-1, 2312,
	83, 1695,
	155, 1695,
	-2, 1883,
	-1, 2313,
	83, 1695,
	155, 1695,
	-2, 1882,
	-1, 2314,
	83, 1671,
	155, 1671,
	-2, 1869,
	-1, 2315,
	83, 1672,
	155, 1672,
	-2, 1874,
	-1, 2316,
	83, 1673,
	155, 1673,
	-2, 1803,
	-1, 2317,
	83, 1674,
	155, 1674,
	-2, 1797,
	-1, 2318,
	83, 1675,
	155, 1675,
	-2, 1725,
	-1, 2319,
	83, 1676,
	155, 1676,
	-2, 1871,
	-1, 2320,
	83, 1677,
	155, 1677,
	-2, 1801,
	-1, 2321,
	83, 1678,
	155, 1678,
	-2, 1796,
	-1, 2322,
	83, 1679,
	155, 1679,
	-2, 1785,
	-1, 2323,
	83, 1695,
	155, 1695,
	-2, 1786,
	-1, 2324,
	83, 1695,
	155, 1695,
	-2, 1787,
	-1, 2326,
	83, 1684,
	155, 1684,
	-2, 1916,
	-1, 2327,
	83, 1662,
	155, 1662,
	-2, 1901,
	-1, 2328,
	83, 1693,
	155, 1693,
	-2, 1872,
	-1, 2329,
	83, 1693,
	155, 1693,
	-2, 1900,
	-1, 2330,
	83, 1693,
	155, 1693,
	-2, 1753,
	-1, 2331,
	83, 1691,
	155, 1691,
	-2, 1891,
	-1, 2332,
	83, 1688,
	155, 1688,
	-2, 1776,
	-1, 2333,
	82, 1643,
	83, 1643,
	155, 1643,
	392, 1643,
	393, 1643,
	394, 1643,
	-2, 1724,
	-1, 2334,
	82, 1644,
	83, 1644,
	155, 1644,
	392, 1644,
	393, 1644,
	394, 1644,
	-2, 1726,
	-1, 2335,
	82, 1645,
	83, 1645,
	155, 1645,
	392, 1645,
	393, 1645,
	394, 1645,
	-2, 1942,
	-1, 2336,
	82, 1647,
	83, 1647,
	155, 1647,
	392, 1647,
	393, 1647,
	394, 1647,
	-2, 1873,
	-1, 2337,
	82, 1649,
	83, 1649,
	155, 1649,
	392, 1649,
	393, 1649,
	394, 1649,
	-2, 1855,
	-1, 2338,
	82, 1651,
	83, 1651,
	155, 1651,
	392, 1651,
	393, 1651,
	394, 1651,
	-2, 1802,
	-1, 2339,
	82, 1653,
	83, 1653,
	155, 1653,
	392, 1653,
	393, 1653,
	394, 1653,
	-2, 1781,
	-1, 2340,
	82, 1654,
	83, 1654,
	155, 1654,
	392, 1654,
	393, 1654,
	394, 1654,
	-2, 1782,
	-1, 2341,
	82, 1656,
	83, 1656,
	155, 1656,
	392, 1656,
	393, 1656,
	394, 1656,
	-2, 1723,
	-1, 2342,
	83, 1698,
	155, 1698,
	392, 1698,
	393, 1698,
	394, 1698,
	-2, 1758,
	-1, 2343,
	83, 1698,
	155, 1698,
	392, 1698,
	393, 1698,
	394, 1698,
	-2, 1772,
	-1, 2344,
	83, 1701,
	155, 1701,
	392, 1701,
	393, 1701,
	394, 1701,
	-2, 1754,
	-1, 2345,
	83, 1701,
	155, 1701,
	392, 1701,
	393, 1701,
	394, 1701,
	-2, 1818,
	-1, 2346,
	83, 1698,
	155, 1698,
	392, 1698,
	393, 1698,
	394, 1698,
	-2, 1839,
	-1, 2540,
	106, 1040,
	150, 1040,
	189, 1040,
	192, 1040,
	279, 1040,
	-2, 1034,
	-1, 2556,
	80, 631,
	155, 631,
	-2, 1213,
	-1, 2942,
	192, 1040,
	303, 1298,
	-2, 1270,
	-1, 3099,
	106, 1040,
	150, 1040,
	189, 1040,
	192, 1040,
	-2, 1156,
	-1, 3101,
	106, 1040,
	150, 1040,
	189, 1040,
	192, 1040,
	-2, 1156,
	-1, 3113,
	80, 631,
	155, 631,
	-2, 1214,
	-1, 3134,
	192, 1040,
	303, 1298,
	-2, 1271,
	-1, 3271,
	106, 1040,
	150, 1040,
	189, 1040,
	192, 1040,
	-2, 1157,
	-1, 3297,
	83, 1118,
	155, 1118,
	-2, 1040,
	-1, 3425,
	83, 1118,
	155, 1118,
	-2, 1040,
	-1, 3571,
	83, 1122,
	155, 1122,
	-2, 1040,
	-1, 3618,
	83, 1123,
	155, 1123,
	-2, 1040,
}

const yyPrivate = 57344

const yyLast = 45650

var yyAct = [...]int{
	717, 695, 3664, 719, 3638, 2585, 192, 3657, 3575, 3119,
	1802, 1552, 3478, 3212, 3582, 3581, 3574, 3425, 2928, 703,
	3504, 3463, 3534, 697, 3028, 3148, 2961, 3403, 2579, 2398,
	3424, 1398, 3457, 1213, 1336, 3029, 1548, 3257, 3482, 3254,
	591, 3353, 3325, 747, 1076, 2582, 3256, 3394, 3464, 3216,
	1342, 607, 3466, 612, 612, 1474, 964, 3207, 3086, 612,
	629, 638, 3261, 3273, 638, 1750, 2178, 3135, 2937, 3278,
	2559, 1555, 2901, 3268, 56, 3238, 3026, 2864, 36, 3102,
	2692, 2890, 2693, 2310, 3075, 2675, 1892, 2609, 2957, 2939,
	3104, 2685, 1609, 2433, 2946, 2754, 1998, 649, 1857, 3014,
	2308, 1484, 1960, 2994, 2688, 643, 2529, 2181, 2871, 2945,
	2691, 177, 2865, 1889, 2714, 687, 2874, 1278, 2274, 2869,
	2867, 2866, 1391, 2909, 2144, 1068, 2541, 117, 2258, 2112,
	1907, 1470, 2798, 2101, 1994, 2379, 35, 1969, 635, 2588,
	1982, 895, 1696, 2211, 692, 2100, 2862, 2727, 1968, 1934,
	2737, 1961, 1885, 2362, 1475, 1860, 2263, 1478, 2513, 2275,
	1858, 1993, 2518, 2611, 1309, 2590, 591, 2179, 1792, 1463,
	732, 118, 958, 6, 1781, 2551, 118, 188, 8, 187,
	7, 2306, 2143, 1726, 1546, 1020, 1995, 2028, 1437, 1501,
	2005, 1377, 192, 1407, 192, 696, 1011, 1012, 606, 2124,
	1762, 686, 1602, 612, 2466, 1586, 1537, 1950, 1967, 1444,
	1089, 1964, 590, 1924, 2174, 693, 26, 688, 1551, 927,
	1545, 704, 957, 1374, 894, 1725, 15, 618, 2282, 694,
	118, 1376, 1483, 621, 835, 1610, 14, 1321, 651, 1761,
	1430, 1345, 1436, 22, 973, 1325, 23, 1337, 652, 1346,
	13, 178, 16, 871, 10, 168, 637, 32, 877, 1214,
	174, 914, 1253, 624, 648, 892, 2284, 3116, 2916, 2002,
	2769, 1973, 1071, 1972, 1008, 3089, 634, 3388, 2499, 2012,
	646, 2499, 2499, 3021, 898, 2421, 630, 2368, 2366, 1311,
	2363, 1709, 2365, 1451, 1004, 176, 633, 970, 1447, 1003,
	608, 2099, 1272, 1007, 837, 1009, 972, 688, 1004, 1004,
	632, 2846, 617, 2843, 2848, 838, 2845, 631, 3649, 1359,
	641, 2491, 2489, 1703, 1268, 1148, 1149, 1150, 1147, 3205,
	175, 52, 164, 139, 1449, 2750, 2748, 1939, 1071, 3360,
	971, 2465, 1148, 1149, 1150, 1147, 3354, 118, 165, 3208,
	1002, 3027, 1979, 897, 8, 157, 7, 1752, 3468, 166,
	3138, 2493, 118, 937, 118, 1963, 836, 1208, 1037, 2825,
	2219, 847, 1273, 175, 3243, 3410, 175, 1111, 116, 175,
	3239, 175, 175, 52, 164, 139, 2407, 1999, 2415, 3103,
	2135, 3378, 3515, 104, 3556, 2547, 175, 1417, 3150, 169,
	1416, 976, 689, 175, 52, 164, 139, 1415, 974, 975,
	2823, 3141, 175, 175, 52, 164, 139, 647, 2010, 3411,
	1301, 3136, 2128, 2300, 2770, 3380, 3158, 3159, 1145, 2762,
	2721, 2722, 3137, 1274, 175, 52, 164, 139, 175, 52,
	164, 139, 2545, 1902, 116, 169, 939, 2301, 169, 938,
	169, 169, 1284, 2288, 2720, 1869, 2287, 1522, 2380, 2289,
	116, 1870, 1871, 1710, 1711, 169, 1378, 1087, 1380, 3142,
	1343, 1344, 169, 968, 936, 121, 122, 1510, 123, 124,
	848, 169, 169, 1776, 969, 2847, 923, 2844, 1023, 1554,
	2932, 1143, 1013, 826, 899, 825, 827, 828, 1084, 829,
	830, 3585, 3586, 169, 967, 2515, 966, 169, 1045, 1049,
	1051, 1053, 1055, 1056, 1058, 2516, 1063, 1059, 1060, 1061,
	1062, 901, 1040, 1041, 1042, 1043, 1021, 1022, 1046, 3229,
	1024, 3471, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1036, 1038, 1034, 1035, 1044, 138, 163, 173, 3470,
	102, 3469, 3553, 1048, 1050, 1052, 1054, 1057, 1333, 3471,
	3547, 175, 175, 3157, 2514, 2182, 2930, 2494, 162, 156,
	155, 1450, 1448, 1355, 3536, 58, 1356, 3470, 3546, 1499,
	1491, 3469, 3545, 1283, 922, 921, 2088, 1644, 3606, 3549,
	3146, 1039, 1005, 1006, 1138, 3642, 3643, 1010, 138, 1341,
	173, 3455, 2755, 1340, 1343, 1344, 920, 3030, 3539, 1496,
	1488, 612, 3143, 3147, 3145, 3144, 2756, 896, 2757, 3357,
	162, 612, 1080, 3458, 3459, 3460, 3461, 2402, 900, 932,
	1498, 1490, 1092, 3558, 3559, 3030, 158, 159, 160, 3536,
	638, 638, 1558, 612, 1081, 2630, 3554, 3555, 2014, 3475,
	3152, 3153, 928, 1886, 2521, 3584, 3044, 1876, 1533, 3076,
	2006, 2885, 1358, 2252, 3248, 3083, 3228, 167, 3382, 2875,
	2123, 2011, 1119, 1014, 3230, 1121, 1947, 2788, 883, 2492,
	1457, 1456, 1131, 1126, 2505, 1132, 1127, 112, 929, 933,
	3160, 161, 3551, 113, 1900, 1901, 1368, 3160, 1141, 1142,
	2786, 1271, 973, 1122, 635, 635, 1140, 2412, 917, 3139,
	915, 919, 936, 1134, 1129, 3151, 916, 913, 912, 161,
	918, 903, 904, 902, 905, 906, 907, 908, 1880, 934,
	2217, 935, 2883, 1114, 2679, 2255, 1285, 3206, 2749, 1073,
	1972, 1072, 930, 931, 1106, 1072, 2254, 3387, 3047, 1080,
	114, 2792, 2498, 1538, 1331, 970, 1542, 3385, 1557, 1556,
	2000, 1079, 1092, 51, 972, 3245, 946, 2259, 2879, 2000,
	2000, 2503, 1217, 973, 3175, 2960, 2934, 3613, 3172, 926,
	1541, 682, 2899, 1115, 684, 925, 1004, 2880, 2881, 683,
	1004, 1004, 1004, 1130, 1124, 2910, 118, 118, 971, 3415,
	1181, 1004, 1004, 2882, 3497, 1136, 1137, 2504, 1117, 3407,
	2001, 1072, 53, 2958, 2959, 2013, 3409, 2364, 3492, 1086,
	1120, 1123, 2552, 636, 1357, 640, 970, 1094, 1093, 639,
	3372, 1135, 3373, 636, 1452, 972, 2017, 2019, 2020, 2684,
	3557, 2130, 634, 634, 3165, 3156, 1116, 170, 171, 3381,
	172, 3483, 630, 630, 636, 140, 1133, 1125, 636, 2929,
	1281, 607, 633, 633, 1543, 1343, 1344, 3499, 2490, 1179,
	924, 3120, 1095, 1047, 2584, 3127, 632, 632, 836, 1251,
	2877, 1075, 1256, 631, 631, 53, 3375, 1540, 1218, 1083,
	1085, 3244, 3505, 1103, 895, 53, 1099, 1100, 140, 170,
	171, 140, 172, 1320, 140, 2416, 140, 140, 3474, 942,
	940, 1105, 941, 3176, 3155, 3660, 53, 3374, 115, 39,
	53, 140, 1074, 1118, 2963, 50, 2229, 1187, 140, 1183,
	1184, 1185, 1186, 969, 1128, 119, 120, 140, 140, 2184,
	3316, 1343, 1344, 612, 3675, 1370, 2303, 2197, 1339, 3305,
	2228, 591, 591, 2177, 2200, 3219, 3416, 1094, 1093, 140,
	591, 591, 2520, 140, 1402, 1402, 3408, 612, 2580, 2581,
	1097, 2584, 2886, 2527, 3372, 1387, 3373, 1332, 2876, 3383,
	1386, 1288, 1289, 1290, 1291, 1292, 1887, 1294, 2789, 638,
	1431, 607, 3367, 1300, 1440, 1440, 1404, 3550, 947, 1104,
	1400, 1400, 2935, 3311, 1539, 192, 1318, 2249, 2250, 1258,
	1317, 2199, 937, 1409, 591, 1316, 1226, 1227, 2524, 2525,
	943, 1335, 1334, 3506, 2631, 3573, 2632, 2633, 3249, 885,
	3375, 886, 3429, 2523, 3395, 2938, 1564, 1567, 1568, 2533,
	2536, 2537, 2538, 2534, 2535, 1877, 1534, 1565, 1069, 2842,
	2220, 3661, 3105, 2029, 2198, 2177, 2897, 2716, 2718, 1282,
	3203, 3374, 1279, 647, 3533, 1482, 1375, 1485, 2958, 2959,
	2954, 2408, 1493, 3033, 2292, 1458, 2183, 2018, 1111, 2878,
	2215, 2185, 2003, 945, 1396, 1397, 140, 140, 1293, 2732,
	2733, 2791, 1299, 1151, 2187, 939, 1298, 1520, 938, 1257,
	1255, 1180, 3326, 3327, 3328, 3332, 3330, 3331, 3329, 1189,
	1297, 1402, 1296, 1402, 1080, 2962, 1879, 642, 3069, 1500,
	2194, 1287, 3318, 1382, 1384, 2628, 889, 890, 891, 1306,
	2015, 2016, 1394, 1395, 1197, 2186, 2501, 3368, 2955, 2104,
	1411, 3465, 1277, 973, 618, 1369, 1713, 1489, 973, 1515,
	1516, 1714, 1497, 1327, 1328, 1322, 1326, 1326, 1326, 1308,
	944, 3428, 2800, 2799, 1110, 635, 2103, 1360, 1361, 937,
	2106, 2105, 1712, 1472, 1473, 118, 850, 1529, 1347, 1322,
	1322, 1350, 3658, 3659, 2241, 2898, 1453, 1314, 937, 1432,
	887, 1461, 1319, 1464, 1465, 1608, 3307, 2650, 2651, 1329,
	3306, 1385, 3572, 851, 1466, 1467, 3279, 1348, 1349, 1657,
	1351, 1352, 1353, 1286, 3676, 1477, 1275, 1276, 1481, 2659,
	1480, 1364, 1365, 2717, 1367, 2188, 1371, 1372, 1373, 617,
	1410, 3543, 2214, 1753, 3312, 3313, 1423, 1441, 3671, 118,
	3666, 1519, 3655, 2272, 118, 1429, 1146, 1550, 2991, 1518,
	2126, 1111, 939, 1553, 1077, 938, 1442, 118, 1418, 1419,
	1420, 1421, 1422, 1077, 1424, 1425, 1426, 1427, 1428, 118,
	1080, 939, 1434, 1435, 938, 2382, 2987, 1566, 3072, 1715,
	884, 3368, 3620, 2915, 1431, 3369, 1694, 1753, 3046, 1724,
	1402, 1728, 1729, 1642, 1731, 1732, 612, 1531, 1569, 3593,
	3034, 612, 2093, 634, 1402, 1647, 1648, 1649, 895, 2115,
	2008, 1751, 3667, 630, 3621, 1528, 1402, 2062, 1663, 2649,
	2061, 1664, 1370, 633, 1503, 1525, 2193, 629, 1508, 1547,
	2191, 1511, 2116, 2117, 2407, 1674, 1675, 632, 2956, 2557,
	2967, 1697, 2965, 2852, 631, 1527, 1656, 1775, 1544, 1524,
	1509, 1526, 1693, 1523, 3621, 948, 1782, 1782, 2558, 1370,
	1549, 1370, 1370, 1927, 2125, 612, 612, 2273, 1724, 1724,
	2273, 3594, 1402, 1854, 1855, 1867, 3587, 1574, 1575, 1576,
	1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 591,
	1730, 1402, 1146, 1597, 1598, 1588, 1439, 1439, 1146, 1723,
	3569, 1779, 1720, 1721, 1722, 1595, 1596, 1252, 2160, 1705,
	1148, 1149, 1150, 1147, 1734, 1735, 1736, 1737, 3525, 612,
	1724, 1402, 1535, 1912, 2991, 612, 612, 612, 1917, 1918,
	1804, 1639, 1640, 854, 1643, 1922, 1923, 3500, 2850, 1666,
	1929, 1536, 1658, 2273, 1903, 1700, 2735, 192, 3391, 3488,
	192, 192, 1108, 192, 2507, 1665, 2821, 1667, 995, 1000,
	1001, 2495, 2397, 2387, 1668, 2303, 2660, 2662, 2663, 2664,
	2661, 1999, 3570, 1868, 3448, 1784, 3082, 2558, 1849, 1850,
	1148, 1149, 1150, 1147, 853, 1881, 2170, 1695, 856, 855,
	3391, 1657, 1657, 1971, 1148, 1149, 1150, 1147, 1109, 1657,
	1657, 1925, 3447, 3442, 1701, 1873, 1984, 1875, 1727, 2008,
	1895, 1896, 840, 841, 842, 843, 2098, 1893, 1894, 1911,
	2092, 3489, 1743, 2091, 1719, 1888, 2038, 2066, 1109, 1747,
	1909, 1783, 1748, 1751, 1756, 1978, 1990, 1402, 1997, 1898,
	2159, 1307, 1754, 1755, 3441, 1866, 3449, 2184, 2187, 1559,
	1560, 1561, 1562, 1563, 1758, 1914, 1915, 1916, 1938, 1785,
	1764, 1941, 1942, 1600, 1944, 973, 1322, 1763, 3440, 1765,
	1766, 3439, 1388, 973, 2148, 3391, 1768, 3683, 3342, 1111,
	1326, 3668, 3419, 1772, 840, 841, 842, 843, 1773, 1413,
	1727, 635, 1326, 1604, 1605, 1606, 1607, 1853, 1991, 1974,
	1786, 1787, 1641, 1856, 3418, 3116, 3390, 1759, 1760, 3181,
	1651, 1882, 2739, 1872, 2560, 1874, 3391, 118, 970, 2410,
	118, 118, 2409, 118, 1769, 1770, 970, 972, 1966, 3129,
	3095, 2401, 2165, 3062, 2057, 972, 1966, 3058, 2042, 1547,
	3391, 1910, 2975, 3391, 1780, 1989, 1932, 2711, 2472, 997,
	998, 999, 1920, 1935, 2008, 1933, 2464, 1698, 2423, 845,
	2405, 971, 2393, 1505, 973, 2041, 1194, 1096, 1066, 971,
	1064, 1163, 2389, 2384, 2377, 2375, 2008, 1952, 3391, 2188,
	2373, 2303, 3179, 118, 2183, 2177, 2182, 1767, 2180, 2185,
	2371, 2022, 2147, 1980, 1148, 1149, 1150, 1147, 1897, 2920,
	2172, 3130, 3096, 1774, 1913, 3063, 1777, 1778, 1977, 3059,
	1975, 2094, 3493, 3280, 2976, 2073, 2072, 970, 687, 2273,
	1146, 612, 612, 612, 1988, 2060, 972, 1323, 1146, 634,
	1146, 845, 2148, 2051, 2385, 612, 612, 612, 612, 630,
	2040, 1771, 1992, 2186, 2390, 2385, 2378, 2376, 2145, 633,
	2783, 3108, 2372, 1354, 1986, 2363, 3494, 3281, 2152, 1370,
	1179, 1312, 2372, 632, 2148, 1313, 3677, 3106, 852, 2050,
	631, 2067, 2068, 1594, 2070, 2049, 1987, 2007, 1512, 1646,
	1645, 2077, 3646, 2093, 2030, 1370, 2911, 1146, 1146, 1591,
	1593, 1590, 2021, 1592, 1698, 3109, 2023, 1146, 1390, 1698,
	1698, 2212, 2206, 3389, 2034, 1146, 3364, 3309, 2441, 2026,
	2027, 3107, 1588, 3308, 1646, 1645, 3294, 1669, 1670, 1671,
	1672, 2024, 2025, 1676, 1677, 1678, 1679, 1681, 1682, 1683,
	1684, 1685, 1686, 1687, 1688, 3250, 1063, 1059, 1060, 1061,
	1062, 1146, 2446, 1324, 2445, 2444, 2442, 1146, 1937, 2008,
	1513, 1940, 1312, 3088, 1943, 2992, 1313, 1945, 1392, 720,
	730, 2213, 2912, 2277, 2277, 1867, 2277, 2985, 721, 1393,
	722, 726, 729, 725, 723, 724, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1163, 591, 591, 2980, 3423, 3019, 1680,
	2977, 2095, 1080, 857, 2087, 2089, 2090, 1389, 1402, 612,
	1166, 1167, 1168, 1169, 1170, 1163, 2913, 1983, 2892, 2681,
	2531, 2443, 2500, 2420, 612, 1217, 2176, 2175, 2127, 2109,
	1080, 2347, 607, 727, 1673, 2388, 1440, 2430, 1867, 2184,
	2187, 2352, 2294, 2354, 2298, 1303, 1302, 192, 1082, 973,
	1162, 1161, 1171, 1172, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1163, 2357, 2218, 2169, 728, 2221, 2222, 2223, 2224,
	2225, 2226, 2227, 2281, 1936, 2230, 2231, 2232, 2233, 2234,
	2235, 2236, 2237, 2238, 2239, 2240, 1603, 2242, 2243, 2244,
	2245, 2246, 2279, 2247, 2283, 2166, 1603, 2290, 2035, 2291,
	2403, 2741, 970, 1997, 1148, 1149, 1150, 1147, 2153, 1716,
	1402, 972, 1402, 2032, 1402, 3022, 2036, 2295, 2296, 1080,
	2156, 2189, 2190, 3544, 2195, 2162, 1147, 2422, 2163, 1148,
	1149, 1150, 1147, 1150, 1147, 2164, 2351, 3321, 3320, 1326,
	2367, 1218, 1445, 2758, 1936, 2280, 2620, 2618, 2413, 2596,
	2594, 3300, 1402, 2450, 2305, 3251, 3252, 2048, 2358, 2447,
	2448, 1661, 1196, 2256, 3246, 2055, 1382, 1384, 2457, 2311,
	2285, 2188, 2161, 1402, 1195, 1662, 2183, 2177, 2182, 3674,
	2180, 2185, 3651, 2449, 2069, 2483, 3080, 2484, 1400, 2074,
	2075, 2076, 3650, 3597, 2079, 2080, 2081, 2082, 2083, 2084,
	2085, 2086, 2299, 2302, 2458, 3568, 3567, 3495, 1866, 1400,
	1148, 1149, 1150, 1147, 3444, 3432, 3422, 118, 1865, 3020,
	3247, 3412, 2461, 2462, 2350, 1080, 3355, 2154, 2155, 1080,
	2348, 2434, 3283, 2434, 2530, 2186, 1402, 2157, 2158, 2528,
	3673, 2671, 3081, 2438, 3282, 1724, 1148, 1149, 1150, 1147,
	3121, 3110, 3079, 2556, 2884, 2432, 2779, 2753, 2417, 2562,
	2752, 1148, 1149, 1150, 1147, 2654, 2149, 2399, 2400, 2419,
	2359, 611, 611, 2669, 2667, 2414, 2572, 619, 2395, 1148,
	1149, 1150, 1147, 2653, 2652, 1080, 2428, 2644, 1446, 2406,
	2487, 2638, 2637, 2593, 2411, 2636, 2404, 2670, 2635, 2496,
	1080, 1080, 1080, 1782, 2802, 2656, 1080, 2542, 2604, 2605,
	2606, 2607, 1080, 2614, 2097, 2615, 2616, 1955, 2617, 1954,
	2619, 973, 2424, 2425, 1953, 2546, 1949, 3670, 1547, 2668,
	2666, 2614, 1948, 1906, 1905, 2553, 2440, 1904, 1506, 1148,
	1149, 1150, 1147, 2277, 1804, 1171, 1172, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1163, 2543, 1270, 2672, 3087, 2563,
	2686, 2655, 2574, 2870, 2508, 591, 3669, 3213, 2311, 2427,
	1724, 1080, 1867, 1867, 1867, 1867, 3644, 2517, 1148, 1149,
	1150, 1147, 3612, 1080, 1867, 3611, 1698, 2277, 1698, 3608,
	2459, 3477, 2349, 2814, 2510, 3255, 2512, 2587, 2591, 3462,
	3453, 2356, 2591, 1402, 3436, 682, 1698, 1698, 684, 2592,
	2509, 3431, 2598, 683, 612, 612, 3430, 118, 3386, 2526,
	3384, 619, 3356, 1148, 1149, 1150, 1147, 118, 3302, 3264,
	2561, 1445, 3233, 3232, 8, 2555, 7, 3211, 1439, 3209,
	2599, 2600, 3188, 3185, 3183, 2603, 2676, 3078, 3077, 2576,
	2586, 2610, 2813, 2573, 1727, 3074, 2589, 3596, 3055, 3053,
	2595, 3037, 2986, 2707, 2982, 2973, 2972, 2626, 2627, 2893,
	192, 1148, 1149, 1150, 1147, 192, 2857, 2602, 1148, 1149,
	1150, 1147, 2642, 2643, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1152, 2856, 2854, 2634, 2053, 1657, 2102, 1657, 2793,
	2039, 2768, 2646, 2790, 2751, 2736, 2678, 2725, 2665, 2657,
	2694, 2647, 2778, 2645, 2641, 2640, 2571, 2639, 1402, 2497,
	2677, 2785, 2694, 2396, 2467, 2468, 782, 781, 3512, 2682,
	2473, 2392, 2695, 2696, 2697, 2698, 2391, 2680, 2706, 2708,
	1957, 1951, 1866, 1866, 1866, 1866, 2710, 1708, 2431, 2709,
	1707, 2437, 1507, 2564, 1866, 1494, 1225, 2726, 2451, 2452,
	1221, 2052, 2569, 2570, 2723, 1220, 2454, 2455, 3578, 973,
	1067, 1472, 1473, 2763, 1148, 1149, 1150, 1147, 973, 2460,
	1697, 2742, 2771, 849, 3508, 2767, 2746, 1148, 1149, 1150,
	1147, 3377, 3376, 1465, 1148, 1149, 1150, 1147, 175, 2765,
	164, 139, 3365, 1466, 1467, 1559, 1698, 2772, 1477, 3235,
	2807, 1481, 2809, 1480, 3220, 2855, 2782, 2740, 3101, 3100,
	2743, 2787, 1080, 2456, 2565, 2744, 3099, 2719, 2873, 2568,
	3071, 3067, 3065, 2764, 3064, 3481, 2761, 3061, 2888, 3060,
	118, 3054, 2774, 612, 2759, 118, 2766, 3052, 2775, 3035,
	3025, 3024, 2781, 2773, 3010, 2902, 1080, 3234, 3009, 1080,
	1080, 1148, 1149, 1150, 1147, 118, 3222, 169, 1867, 2145,
	2921, 2919, 2566, 2567, 118, 2860, 2849, 2794, 2819, 2801,
	2812, 2795, 2804, 1148, 1149, 1150, 1147, 2808, 2803, 2206,
	2810, 2811, 1148, 1149, 1150, 1147, 2797, 3221, 2851, 2734,
	2506, 2944, 2859, 2947, 2374, 2947, 2947, 2370, 2369, 2896,
	1080, 2078, 2071, 2065, 2542, 1148, 1149, 1150, 1147, 2063,
	2059, 2805, 2806, 1148, 1149, 1150, 1147, 3169, 2058, 2968,
	973, 2056, 973, 2047, 2044, 973, 2905, 1402, 1402, 2908,
	2045, 2931, 2933, 2853, 2964, 2043, 1956, 2858, 1691, 1690,
	2966, 1689, 3050, 1148, 1149, 1150, 1147, 1660, 1659, 2817,
	973, 1650, 1414, 1412, 2927, 1215, 2917, 2889, 2969, 2970,
	3507, 175, 3450, 1400, 1400, 3438, 3433, 2895, 1148, 1149,
	1150, 1147, 2942, 970, 612, 1148, 1149, 1150, 1147, 2873,
	2914, 2816, 972, 2918, 1460, 2943, 3336, 3319, 2952, 3315,
	1724, 1724, 2904, 3293, 3524, 2906, 2907, 2926, 2176, 2175,
	3277, 3196, 3194, 3167, 2948, 2949, 992, 1148, 1149, 1150,
	1147, 3166, 2953, 3163, 2950, 2815, 971, 3162, 118, 1070,
	3291, 118, 1148, 1149, 1150, 1147, 3128, 3125, 1866, 1078,
	169, 3123, 3090, 2037, 1471, 1462, 1080, 1476, 1479, 1468,
	2450, 1148, 1149, 1150, 1147, 1310, 118, 2673, 2597, 3023,
	2549, 1102, 1162, 1161, 1171, 1172, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1163, 2548, 2544, 2745, 2511, 2747, 2482,
	2383, 2064, 2293, 1162, 1161, 1171, 1172, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1163, 2248, 1698, 2979, 2146, 2118,
	2984, 1698, 612, 2096, 2988, 2989, 1589, 2978, 169, 2983,
	1983, 2999, 1919, 2981, 2974, 2826, 2827, 1148, 1149, 1150,
	1147, 2828, 2829, 2830, 2831, 2481, 2832, 2833, 2834, 2835,
	2836, 2837, 2838, 2839, 3006, 3007, 3008, 2480, 3003, 1718,
	1704, 1532, 1492, 1469, 1269, 2796, 3012, 1254, 1250, 1249,
	3018, 1148, 1149, 1150, 1147, 1248, 1247, 3522, 987, 982,
	977, 981, 985, 1148, 1149, 1150, 1147, 1246, 1245, 2818,
	1244, 2925, 2479, 1243, 1242, 3036, 2478, 1241, 1240, 1239,
	3039, 1238, 1237, 3038, 1236, 2311, 990, 2426, 3042, 3043,
	980, 1235, 1234, 1233, 1232, 3056, 2434, 1231, 1148, 1149,
	1150, 1147, 1148, 1149, 1150, 1147, 3048, 2477, 1230, 1229,
	3094, 1162, 1161, 1171, 1172, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1163, 1228, 1224, 2277, 1867, 3113, 1223, 1222,
	1219, 1212, 2922, 1148, 1149, 1150, 1147, 2923, 2924, 3520,
	2476, 988, 1211, 1209, 3518, 2475, 973, 1208, 991, 3131,
	3070, 1207, 1080, 973, 1206, 3068, 1205, 3073, 2474, 1204,
	1203, 2944, 1202, 1201, 1200, 1080, 1148, 1149, 1150, 1147,
	978, 1148, 1149, 1150, 1147, 1199, 1080, 2471, 3178, 1198,
	1193, 1192, 1402, 1191, 1148, 1149, 1150, 1147, 1190, 1113,
	1065, 3085, 3164, 989, 2470, 2995, 2996, 2151, 1724, 2132,
	3115, 1101, 1080, 1148, 1149, 1150, 1147, 3626, 2469, 3624,
	2951, 3583, 2463, 3180, 2998, 2532, 3154, 2304, 1400, 3161,
	1148, 1149, 1150, 1147, 3112, 1959, 1112, 3118, 3001, 3000,
	2700, 192, 2699, 979, 1148, 1149, 1150, 1147, 1148, 1149,
	1150, 1147, 118, 3111, 1080, 3190, 3298, 3200, 2394, 118,
	3091, 3092, 3093, 3170, 3173, 3168, 3097, 3098, 2386, 2703,
	2990, 1366, 2701, 3177, 2704, 1304, 2453, 2702, 1745, 1746,
	3198, 2429, 3182, 103, 3184, 3002, 3187, 2705, 3199, 2269,
	2270, 2891, 2777, 1080, 3191, 1408, 1740, 1741, 1742, 3192,
	1599, 3132, 1148, 1149, 1150, 1147, 1866, 1148, 1149, 1150,
	1147, 1080, 1402, 1402, 3171, 3186, 2216, 2902, 3189, 55,
	986, 54, 3218, 609, 3174, 2610, 1148, 1149, 1150, 1147,
	3272, 2940, 3272, 2941, 3214, 3013, 3215, 3197, 3202, 1841,
	614, 3266, 3267, 3260, 1080, 3287, 1080, 1454, 1400, 3262,
	2381, 2694, 3204, 2622, 2418, 3290, 983, 3292, 2108, 984,
	2623, 2624, 2625, 1402, 3040, 3041, 3122, 1502, 3124, 3242,
	3241, 3240, 1486, 3237, 2399, 2400, 615, 613, 616, 3231,
	1921, 612, 1107, 1080, 1080, 2868, 2861, 1080, 1080, 3265,
	2575, 2550, 3275, 2694, 973, 3276, 2168, 2141, 3269, 3262,
	3289, 1749, 1717, 3635, 3115, 1646, 1645, 3435, 3286, 1265,
	1266, 118, 1263, 1264, 2971, 1751, 3338, 3347, 3154, 3296,
	2257, 3161, 3299, 1261, 1262, 3303, 3351, 3352, 3333, 3323,
	3324, 1259, 1260, 3334, 3335, 2253, 1852, 3049, 1363, 1402,
	1362, 1139, 3005, 2728, 3051, 3344, 2107, 1985, 1315, 1295,
	3258, 1338, 3603, 1162, 1161, 1171, 1172, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1163, 3601, 3343, 3371, 2260, 3561,
	3363, 3541, 3540, 3066, 3538, 1400, 3484, 3451, 3350, 3349,
	3345, 3288, 3015, 1553, 3210, 1553, 3057, 3032, 3362, 3031,
	118, 3016, 2201, 3358, 2171, 3114, 3366, 1504, 3404, 2738,
	3370, 1753, 3398, 3117, 2780, 2265, 2268, 2269, 2270, 2266,
	2134, 2267, 2271, 2046, 1080, 3628, 3627, 3628, 1098, 3627,
	3317, 3011, 3258, 3258, 1077, 3421, 3258, 3258, 3427, 2265,
	2268, 2269, 2270, 2266, 3392, 2267, 2271, 179, 3, 3340,
	1330, 63, 2, 3341, 3401, 3400, 3647, 3648, 1, 3413,
	3399, 2488, 3218, 1702, 3417, 1267, 844, 1080, 840, 841,
	842, 843, 1402, 1077, 3295, 973, 839, 1379, 2286, 3396,
	1899, 1406, 1706, 846, 3301, 2712, 2713, 3004, 2715, 2502,
	2004, 3434, 1161, 1171, 1172, 1164, 1165, 1166, 1167, 1168,
	1169, 1170, 1163, 3445, 2683, 2251, 2122, 2887, 1400, 3473,
	1305, 888, 1652, 3443, 1698, 1517, 994, 3467, 3339, 1091,
	1514, 1090, 1080, 1088, 3223, 1698, 3224, 1601, 3193, 734,
	3452, 3195, 1962, 2674, 1733, 2648, 3346, 3634, 3485, 1738,
	3663, 3595, 3637, 1530, 718, 3532, 3454, 3599, 3201, 3456,
	3361, 2009, 3480, 1144, 2760, 910, 772, 745, 3476, 3479,
	1210, 1495, 1487, 1553, 2824, 2822, 3502, 996, 744, 1080,
	3487, 118, 3084, 2522, 2731, 3406, 993, 1402, 3496, 911,
	3527, 3530, 3517, 3519, 3521, 3523, 3501, 1946, 3359, 1455,
	1459, 2167, 3414, 3503, 3297, 3531, 2936, 2583, 3510, 3284,
	3285, 3498, 3126, 1788, 1789, 3227, 3258, 3225, 3526, 3226,
	653, 1878, 589, 1400, 955, 3516, 3446, 1402, 3337, 3537,
	3404, 3535, 1162, 1161, 1171, 1172, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1163, 1958, 654, 3571, 2150, 3552, 3437,
	868, 3560, 3579, 3562, 3565, 3566, 2131, 3564, 3563, 869,
	861, 2540, 2539, 1400, 1570, 1153, 1587, 1908, 2840, 2841,
	1188, 3258, 691, 1908, 1908, 1908, 2033, 2519, 3149, 1148,
	1149, 1150, 1147, 3486, 2724, 62, 61, 60, 3490, 3491,
	59, 3592, 3602, 1928, 3604, 3605, 200, 736, 3600, 3598,
	199, 3588, 1080, 3589, 3467, 3590, 3607, 3591, 3253, 3529,
	3639, 716, 715, 714, 713, 712, 711, 2264, 3258, 3511,
	2262, 3616, 3427, 2261, 1862, 1861, 1926, 2900, 2613, 3618,
	3619, 3617, 2608, 1793, 1791, 3633, 3623, 3641, 3625, 2601,
	3640, 3629, 3630, 3631, 3632, 3622, 2196, 2203, 1790, 3580,
	3513, 3514, 3314, 2658, 3652, 3217, 1080, 3645, 1630, 1739,
	2192, 1810, 175, 52, 164, 139, 3654, 3653, 2629, 3502,
	3656, 1807, 1806, 2621, 3310, 3304, 3662, 3665, 1838, 3402,
	165, 3271, 3133, 3134, 3140, 2140, 1019, 157, 1015, 1017,
	1018, 166, 1016, 2439, 2173, 2863, 2114, 2113, 2111, 2110,
	3672, 1280, 3393, 3472, 3548, 3236, 2309, 2307, 3641, 3679,
	116, 3640, 3678, 2997, 2993, 1970, 1981, 2776, 3665, 3680,
	1863, 1859, 2133, 3379, 3684, 104, 1174, 1744, 1178, 862,
	2129, 169, 49, 100, 153, 48, 90, 3609, 3610, 89,
	99, 3614, 151, 47, 1175, 1177, 1173, 184, 1176, 1162,
	1161, 1171, 1172, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1163, 183, 186, 185, 182, 2360, 2361, 181, 1443, 180,
	1037, 3542, 3274, 834, 38, 37, 33, 12, 11, 34,
	1839, 21, 20, 1521, 19, 1800, 25, 31, 30, 111,
	110, 29, 109, 108, 107, 1553, 106, 105, 28, 2820,
	18, 42, 41, 40, 9, 98, 96, 121, 122, 27,
	123, 124, 97, 94, 95, 1841, 1809, 93, 1197, 91,
	74, 1626, 73, 72, 87, 1842, 1843, 1623, 86, 85,
	84, 1625, 1622, 1624, 1628, 1629, 83, 82, 80, 1627,
	81, 909, 71, 70, 69, 68, 67, 92, 78, 88,
	79, 1808, 1162, 1161, 1171, 1172, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1163, 77, 76, 1816, 75, 66, 2119,
	2120, 2121, 65, 64, 137, 136, 3509, 135, 138, 163,
	173, 134, 102, 2136, 2137, 2138, 2139, 133, 131, 132,
	1023, 130, 129, 128, 127, 126, 125, 43, 44, 45,
	162, 156, 155, 46, 147, 146, 148, 58, 150, 152,
	1045, 1049, 1051, 1053, 1055, 1056, 1058, 1630, 1063, 1059,
	1060, 1061, 1062, 149, 1040, 1041, 1042, 1043, 1021, 1022,
	1046, 154, 1024, 1832, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1036, 1038, 1034, 1035, 1044, 144, 142,
	3576, 145, 143, 141, 57, 1048, 1050, 1052, 1054, 1057,
	101, 17, 24, 4, 0, 0, 0, 0, 158, 159,
	160, 0, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
	1619, 1620, 1621, 1633, 1634, 1635, 1636, 1637, 1638, 1631,
	1632, 0, 0, 1039, 0, 0, 0, 0, 0, 167,
	1630, 0, 0, 0, 1799, 1801, 1798, 0, 1795, 0,
	0, 0, 0, 1820, 0, 0, 3576, 0, 0, 112,
	0, 0, 0, 161, 1826, 113, 0, 0, 0, 0,
	0, 0, 1811, 0, 1794, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1814, 1848, 0, 1408, 1815, 1817,
	1819, 0, 1821, 1822, 1823, 1827, 1828, 1829, 1831, 1834,
	1835, 1836, 1908, 0, 3576, 0, 0, 0, 0, 1824,
	1833, 1825, 0, 0, 0, 0, 0, 0, 0, 0,
	1626, 1803, 114, 2031, 0, 0, 1623, 0, 0, 0,
	1625, 1622, 1624, 1628, 1629, 51, 0, 0, 1627, 0,
	0, 0, 0, 1840, 0, 0, 0, 1162, 1161, 1171,
	1172, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1163, 0,
	3682, 0, 0, 0, 0, 0, 0, 0, 0, 1796,
	1797, 2435, 2436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 1837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1626, 1813, 0, 0, 0, 0, 1623,
	0, 1812, 0, 1625, 1622, 1624, 1628, 1629, 0, 170,
	171, 1627, 172, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 0, 1830, 0, 0, 0, 0,
	0, 0, 0, 0, 1818, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1845, 1844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	1620, 1621, 1633, 1634, 1635, 1636, 1637, 1638, 1631, 1632,
	115, 39, 0, 0, 0, 0, 0, 50, 0, 0,
	0, 5, 0, 0, 0, 0, 0, 119, 120, 0,
	1805, 0, 0, 0, 0, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1847, 0, 0, 1846, 0, 0, 0, 0,
	0, 0, 0, 0, 752, 1633, 1634, 1635, 1636, 1637,
	1638, 1631, 1632, 359, 0, 483, 516, 505, 588, 471,
	0, 0, 0, 0, 0, 0, 705, 0, 0, 0,
	299, 0, 0, 329, 520, 502, 512, 503, 488, 489,
	490, 497, 309, 491, 492, 493, 464, 494, 465, 495,
	496, 743, 519, 470, 390, 343, 537, 536, 0, 0,
	805, 813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 0, 733, 782, 781, 720, 730,
	0, 0, 272, 198, 466, 584, 467, 721, 0, 722,
	726, 729, 725, 723, 724, 0, 797, 0, 0, 0,
	0, 0, 0, 690, 702, 0, 706, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 700, 2729, 2730, 0, 0, 753, 0, 701, 0,
	0, 748, 727, 731, 0, 0, 0, 0, 262, 395,
	412, 273, 386, 425, 278, 393, 268, 358, 382, 0,
	0, 264, 410, 392, 340, 319, 320, 263, 0, 377,
	297, 311, 294, 356, 728, 751, 755, 293, 819, 749,
	420, 266, 0, 419, 355, 406, 411, 341, 335, 265,
	408, 339, 334, 323, 301, 820, 324, 325, 315, 367,
	333, 368, 316, 345, 344, 346, 0, 0, 0, 0,
	0, 448, 449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 746, 0, 581, 0,
	422, 0, 0, 803, 0, 0, 0, 394, 0, 0,
	326, 0, 0, 0, 750, 0, 380, 361, 816, 0,
	0, 378, 331, 407, 369, 413, 396, 421, 374, 370,
	257, 397, 296, 342, 269, 271, 291, 298, 300, 302,
	303, 351, 352, 364, 385, 398, 399, 400, 295, 279,
	379, 280, 313, 281, 258, 287, 285, 288, 387, 289,
	260, 365, 404, 0, 308, 375, 338, 261, 337, 366,
	403, 402, 270, 429, 435, 436, 524, 0, 441, 602,
	603, 604, 450, 455, 456, 457, 459, 460, 461, 462,
	525, 542, 509, 479, 443, 533, 476, 480, 481, 545,
	1654, 1653, 1655, 434, 327, 328, 0, 306, 254, 255,
	598, 801, 357, 547, 580, 472, 0, 815, 796, 798,
	799, 802, 806, 807, 808, 809, 810, 812, 814, 818,
	597, 2894, 526, 541, 600, 540, 594, 363, 0, 384,
	538, 485, 0, 530, 504, 0, 531, 500, 535, 0,
	474, 0, 391, 415, 427, 444, 447, 475, 560, 561,
	562, 259, 446, 564, 565, 566, 567, 568, 569, 570,
	563, 817, 507, 484, 510, 426, 487, 486, 0, 0,
	521, 754, 522, 523, 347, 348, 349, 350, 804, 548,
	277, 445, 373, 0, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 513, 514, 511, 605, 0, 571, 572,
	0, 0, 439, 440, 305, 312, 458, 314, 276, 362,
	307, 424, 321, 0, 451, 515, 452, 574, 577, 575,
	576, 354, 317, 318, 388, 322, 332, 376, 423, 360,
	381, 274, 414, 389, 336, 501, 528, 826, 800, 825,
	827, 828, 824, 829, 830, 811, 710, 0, 758, 822,
	821, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1908, 556, 555, 554, 553, 552, 551, 550,
	549, 0, 0, 498, 401, 286, 251, 282, 283, 290,
	595, 592, 405, 596, 0, 256, 478, 330, 0, 371,
	304, 543, 544, 789, 765, 766, 767, 707, 768, 762,
	763, 708, 764, 790, 756, 786, 787, 735, 759, 769,
	785, 770, 788, 791, 792, 831, 832, 776, 760, 223,
	833, 773, 793, 784, 783, 771, 757, 794, 795, 742,
	737, 774, 775, 761, 777, 778, 779, 709, 738, 739,
	740, 741, 0, 0, 0, 430, 431, 432, 454, 416,
	477, 593, 0, 0, 0, 0, 0, 0, 0, 527,
	539, 573, 0, 582, 583, 585, 587, 780, 0, 599,
	468, 469, 579, 0, 752, 0, 0, 0, 0, 0,
	3045, 0, 0, 359, 0, 483, 516, 505, 588, 471,
	0, 0, 0, 0, 0, 0, 705, 0, 0, 0,
	299, 1699, 0, 329, 520, 502, 512, 503, 488, 489,
	490, 497, 309, 491, 492, 493, 464, 494, 465, 495,
	496, 743, 519, 470, 390, 343, 537, 536, 0, 0,
	805, 813, 0, 0, 0, 0, 0, 0, 0, 1890,
	0, 0, 698, 0, 0, 733, 782, 781, 720, 730,
	0, 0, 272, 198, 466, 584, 467, 721, 0, 722,
	726, 729, 725, 723, 724, 0, 797, 0, 0, 0,
	0, 0, 0, 690, 702, 0, 706, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 700, 0, 0, 0, 0, 753, 0, 701, 0,
	0, 1891, 727, 731, 0, 0, 0, 0, 262, 395,
	412, 273, 386, 425, 278, 393, 268, 358, 382, 0,
	0, 264, 410, 392, 340, 319, 320, 263, 0, 377,
	297, 311, 294, 356, 728, 751, 755, 293, 819, 749,
	420, 266, 0, 419, 355, 406, 411, 341, 335, 265,
	408, 339, 334, 323, 301, 820, 324, 325, 315, 367,
	333, 368, 316, 345, 344, 346, 0, 0, 0, 0,
	0, 448, 449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 746, 0, 581, 0,
	422, 0, 0, 803, 0, 0, 0, 394, 0, 0,
	326, 0, 0, 0, 750, 0, 380, 361, 816, 0,
	0, 378, 331, 407, 369, 413, 396, 421, 374, 370,
	257, 397, 296, 342, 269, 271, 291, 298, 300, 302,
	303, 351, 352, 364, 385, 398, 399, 400, 295, 279,
	379, 280, 313, 281, 258, 287, 285, 288, 387, 289,
	260, 365, 404, 0, 308, 375, 338, 261, 337, 366,
	403, 402, 270, 429, 435, 436, 524, 0, 441, 602,
	603, 604, 450, 455, 456, 457, 459, 460, 461, 462,
	525, 542, 509, 479, 443, 533, 476, 480, 481, 545,
	0, 0, 0, 434, 327, 328, 0, 306, 254, 255,
	598, 801, 357, 547, 580, 472, 0, 815, 796, 798,
	799, 802, 806, 807, 808, 809, 810, 812, 814, 818,
	597, 0, 526, 541, 600, 540, 594, 363, 0, 384,
	538, 485, 0, 530, 504, 0, 531, 500, 535, 3322,
	474, 0, 391, 415, 427, 444, 447, 475, 560, 561,
	562, 259, 446, 564, 565, 566, 567, 568, 569, 570,
	563, 817, 507, 484, 510, 426, 487, 486, 0, 0,
	521, 754, 522, 523, 347, 348, 349, 350, 804, 548,
	277, 445, 373, 0, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 513, 514, 511, 605, 0, 571, 572,
	0, 0, 439, 440, 305, 312, 458, 314, 276, 362,
	307, 424, 321, 0, 451, 515, 452, 574, 577, 575,
	576, 354, 317, 318, 388, 322, 332, 376, 423, 360,
	381, 274, 414, 389, 336, 501, 528, 826, 800, 825,
	827, 828, 824, 829, 830, 811, 710, 0, 758, 822,
	821, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 556, 555, 554, 553, 552, 551, 550,
	549, 0, 0, 498, 401, 286, 251, 282, 283, 290,
	595, 592, 405, 596, 0, 256, 478, 330, 0, 371,
	304, 543, 544, 789, 765, 766, 767, 707, 768, 762,
	763, 708, 764, 790, 756, 786, 787, 735, 759, 769,
	785, 770, 788, 791, 792, 831, 832, 776, 760, 223,
	833, 773, 793, 784, 783, 771, 757, 794, 795, 742,
	737, 774, 775, 761, 777, 778, 779, 709, 738, 739,
	740, 741, 0, 0, 0, 430, 431, 432, 454, 416,
	477, 593, 0, 0, 0, 0, 0, 0, 0, 527,
	539, 573, 0, 582, 583, 585, 587, 780, 0, 599,
	468, 469, 579, 175, 752, 0, 0, 0, 0, 0,
	0, 0, 0, 359, 0, 483, 516, 505, 588, 471,
	0, 0, 0, 0, 0, 0, 705, 0, 0, 0,
	299, 0, 0, 329, 520, 502, 512, 503, 488, 489,
	490, 497, 309, 491, 492, 493, 464, 494, 465, 495,
	496, 1182, 519, 470, 390, 343, 537, 536, 0, 0,
	805, 813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 0, 733, 782, 781, 720, 730,
	0, 0, 272, 198, 466, 584, 467, 721, 0, 722,
	726, 729, 725, 723, 724, 0, 797, 0, 0, 0,
	0, 0, 0, 690, 702, 0, 706, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 700, 0, 0, 0, 0, 753, 0, 701, 0,
	0, 748, 727, 731, 0, 0, 0, 0, 262, 395,
	412, 273, 386, 425, 278, 393, 268, 358, 382, 0,
	0, 264, 410, 392, 340, 319, 320, 263, 0, 377,
	297, 311, 294, 356, 728, 751, 755, 293, 819, 749,
	420, 266, 0, 419, 355, 406, 411, 341, 335, 265,
	408, 339, 334, 323, 301, 820, 324, 325, 315, 367,
	333, 368, 316, 345, 344, 346, 0, 0, 0, 0,
	0, 448, 449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 746, 0, 581, 0,
	422, 0, 0, 803, 0, 0, 0, 394, 0, 0,
	326, 0, 0, 0, 750, 0, 380, 361, 816, 0,
	0, 378, 331, 407, 369, 413, 396, 421, 374, 370,
	257, 397, 296, 342, 269, 271, 291, 298, 300, 302,
	303, 351, 352, 364, 385, 398, 399, 400, 295, 279,
	379, 280, 313, 281, 258, 287, 285, 288, 387, 289,
	260, 365, 404, 0, 308, 375, 338, 261, 337, 366,
	403, 402, 270, 429, 435, 436, 524, 0, 441, 602,
	603, 604, 450, 455, 456, 457, 459, 460, 461, 462,
	525, 542, 509, 479, 443, 533, 476, 480, 481, 545,
	0, 0, 0, 434, 327, 328, 0, 306, 254, 255,
	598, 801, 357, 547, 580, 472, 0, 815, 796, 798,
	799, 802, 806, 807, 808, 809, 810, 812, 814, 818,
	597, 0, 526, 541, 600, 540, 594, 363, 0, 384,
	538, 485, 0, 530, 504, 0, 531, 500, 535, 0,
	474, 0, 391, 415, 427, 444, 447, 475, 560, 561,
	562, 259, 446, 564, 565, 566, 567, 568, 569, 570,
	563, 817, 507, 484, 510, 426, 487, 486, 0, 0,
	521, 754, 522, 523, 347, 348, 349, 350, 804, 548,
	277, 445, 373, 0, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 513, 514, 511, 605, 0, 571, 572,
	0, 0, 439, 440, 305, 312, 458, 314, 276, 362,
	307, 424, 321, 0, 451, 515, 452, 574, 577, 575,
	576, 354, 317, 318, 388, 322, 332, 376, 423, 360,
	381, 274, 414, 389, 336, 501, 528, 826, 800, 825,
	827, 828, 824, 829, 830, 811, 710, 0, 758, 822,
	821, 823, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 556, 555, 554, 553, 552, 551, 550,
	549, 0, 0, 498, 401, 286, 251, 282, 283, 290,
	595, 592, 405, 596, 0, 256, 478, 330, 140, 371,
	304, 543, 544, 789, 765, 766, 767, 707, 768, 762,
	763, 708, 764, 790, 756, 786, 787, 735, 759, 769,
	785, 770, 788, 791, 792, 831, 832, 776, 760, 223,
	833, 773, 793, 784, 783, 771, 757, 794, 795, 742,
	737, 774, 775, 761, 777, 778, 779, 709, 738, 739,
	740, 741, 0, 0, 0, 430, 431, 432, 454, 416,
	477, 593, 0, 0, 0, 0, 0, 0, 0, 527,
	539, 573, 0, 582, 583, 585, 587, 780, 752, 599,
	468, 469, 579, 0, 0, 0, 0, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	705, 0, 0, 0, 299, 3681, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 743, 519, 470, 390, 343,
	537, 536, 0, 0, 805, 813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 698, 0, 0, 733,
	782, 781, 720, 730, 0, 0, 272, 198, 466, 584,
	467, 721, 0, 722, 726, 729, 725, 723, 724, 0,
	797, 0, 0, 0, 0, 0, 0, 690, 702, 0,
	706, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 699, 700, 0, 0, 0, 0,
	753, 0, 701, 0, 0, 748, 727, 731, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 728, 751,
	755, 293, 819, 749, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 820,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	746, 0, 581, 0, 422, 0, 0, 803, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 750, 0,
	380, 361, 816, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 801, 357, 547, 580, 472,
	0, 815, 796, 798, 799, 802, 806, 807, 808, 809,
	810, 812, 814, 818, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 817, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 754, 522, 523, 347, 348,
	349, 350, 804, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 826, 800, 825, 827, 828, 824, 829, 830, 811,
	710, 0, 758, 822, 821, 823, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 789, 765, 766,
	767, 707, 768, 762, 763, 708, 764, 790, 756, 786,
	787, 735, 759, 769, 785, 770, 788, 791, 792, 831,
	832, 776, 760, 223, 833, 773, 793, 784, 783, 771,
	757, 794, 795, 742, 737, 774, 775, 761, 777, 778,
	779, 709, 738, 739, 740, 741, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 780, 752, 599, 468, 469, 579, 0, 0, 0,
	0, 359, 0, 483, 516, 505, 588, 471, 0, 0,
	0, 0, 0, 0, 705, 0, 0, 0, 299, 0,
	0, 329, 520, 502, 512, 503, 488, 489, 490, 497,
	309, 491, 492, 493, 464, 494, 465, 495, 496, 743,
	519, 470, 390, 343, 537, 536, 0, 0, 805, 813,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 0, 0, 733, 782, 781, 720, 730, 0, 0,
	272, 198, 466, 584, 467, 721, 0, 722, 726, 729,
	725, 723, 724, 0, 797, 0, 0, 0, 0, 0,
	0, 690, 702, 0, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 699, 700,
	0, 0, 0, 0, 753, 0, 701, 0, 0, 748,
	727, 731, 0, 0, 0, 0, 262, 395, 412, 273,
	386, 425, 278, 393, 268, 358, 382, 0, 0, 264,
	410, 392, 340, 319, 320, 263, 0, 377, 297, 311,
	294, 356, 728, 751, 755, 293, 819, 749, 420, 266,
	0, 419, 355, 406, 411, 341, 335, 265, 408, 339,
	334, 323, 301, 820, 324, 325, 315, 367, 333, 368,
	316, 345, 344, 346, 0, 0, 0, 0, 0, 448,
	449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 578, 746, 0, 581, 0, 422, 0,
	0, 803, 0, 0, 0, 394, 0, 0, 326, 0,
	0, 0, 750, 0, 380, 361, 816, 3577, 0, 378,
	331, 407, 369, 413, 396, 421, 374, 370, 257, 397,
	296, 342, 269, 271, 291, 298, 300, 302, 303, 351,
	352, 364, 385, 398, 399, 400, 295, 279, 379, 280,
	313, 281, 258, 287, 285, 288, 387, 289, 260, 365,
	404, 0, 308, 375, 338, 261, 337, 366, 403, 402,
	270, 429, 435, 436, 524, 0, 441, 602, 603, 604,
	450, 455, 456, 457, 459, 460, 461, 462, 525, 542,
	509, 479, 443, 533, 476, 480, 481, 545, 0, 0,
	0, 434, 327, 328, 0, 306, 254, 255, 598, 801,
	357, 547, 580, 472, 0, 815, 796, 798, 799, 802,
	806, 807, 808, 809, 810, 812, 814, 818, 597, 0,
	526, 541, 600, 540, 594, 363, 0, 384, 538, 485,
	0, 530, 504, 0, 531, 500, 535, 0, 474, 0,
	391, 415, 427, 444, 447, 475, 560, 561, 562, 259,
	446, 564, 565, 566, 567, 568, 569, 570, 563, 817,
	507, 484, 510, 426, 487, 486, 0, 0, 521, 754,
	522, 523, 347, 348, 349, 350, 804, 548, 277, 445,
	373, 0, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 513, 514, 511, 605, 0, 571, 572, 0, 0,
	439, 440, 305, 312, 458, 314, 276, 362, 307, 424,
	321, 0, 451, 515, 452, 574, 577, 575, 576, 354,
	317, 318, 388, 322, 332, 376, 423, 360, 381, 274,
	414, 389, 336, 501, 528, 826, 800, 825, 827, 828,
	824, 829, 830, 811, 710, 0, 758, 822, 821, 823,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 556, 555, 554, 553, 552, 551, 550, 549, 0,
	0, 498, 401, 286, 251, 282, 283, 290, 595, 592,
	405, 596, 0, 256, 478, 330, 0, 371, 304, 543,
	544, 789, 765, 766, 767, 707, 768, 762, 763, 708,
	764, 790, 756, 786, 787, 735, 759, 769, 785, 770,
	788, 791, 792, 831, 832, 776, 760, 223, 833, 773,
	793, 784, 783, 771, 757, 794, 795, 742, 737, 774,
	775, 761, 777, 778, 779, 709, 738, 739, 740, 741,
	0, 0, 0, 430, 431, 432, 454, 416, 477, 593,
	0, 0, 0, 0, 0, 0, 0, 527, 539, 573,
	0, 582, 583, 585, 587, 780, 752, 599, 468, 469,
	579, 0, 0, 0, 0, 359, 0, 483, 516, 505,
	588, 471, 0, 0, 0, 0, 0, 0, 705, 0,
	0, 0, 299, 1699, 0, 329, 520, 502, 512, 503,
	488, 489, 490, 497, 309, 491, 492, 493, 464, 494,
	465, 495, 496, 743, 519, 470, 390, 343, 537, 536,
	0, 0, 805, 813, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 0, 733, 782, 781,
	720, 730, 0, 0, 272, 198, 466, 584, 467, 721,
	0, 722, 726, 729, 725, 723, 724, 0, 797, 0,
	0, 0, 0, 0, 0, 690, 702, 0, 706, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 700, 0, 0, 0, 0, 753, 0,
	701, 0, 0, 748, 727, 731, 0, 0, 0, 0,
	262, 395, 412, 273, 386, 425, 278, 393, 268, 358,
	382, 0, 0, 264, 410, 392, 340, 319, 320, 263,
	0, 377, 297, 311, 294, 356, 728, 751, 755, 293,
	819, 749, 420, 266, 0, 419, 355, 406, 411, 341,
	335, 265, 408, 339, 334, 323, 301, 820, 324, 325,
	315, 367, 333, 368, 316, 345, 344, 346, 0, 0,
	0, 0, 0, 448, 449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 578, 746, 0,
	581, 0, 422, 0, 0, 803, 0, 0, 0, 394,
	0, 0, 326, 0, 0, 0, 750, 0, 380, 361,
	816, 0, 0, 378, 331, 407, 369, 413, 396, 421,
	374, 370, 257, 397, 296, 342, 269, 271, 291, 298,
	300, 302, 303, 351, 352, 364, 385, 398, 399, 400,
	295, 279, 379, 280, 313, 281, 258, 287, 285, 288,
	387, 289, 260, 365, 404, 0, 308, 375, 338, 261,
	337, 366, 403, 402, 270, 429, 435, 436, 524, 0,
	441, 602, 603, 604, 450, 455, 456, 457, 459, 460,
	461, 462, 525, 542, 509, 479, 443, 533, 476, 480,
	481, 545, 0, 0, 0, 434, 327, 328, 0, 306,
	254, 255, 598, 801, 357, 547, 580, 472, 0, 815,
	796, 798, 799, 802, 806, 807, 808, 809, 810, 812,
	814, 818, 597, 0, 526, 541, 600, 540, 594, 363,
	0, 384, 538, 485, 0, 530, 504, 0, 531, 500,
	535, 0, 474, 0, 391, 415, 427, 444, 447, 475,
	560, 561, 562, 259, 446, 564, 565, 566, 567, 568,
	569, 570, 563, 817, 507, 484, 510, 426, 487, 486,
	0, 0, 521, 754, 522, 523, 347, 348, 349, 350,
	804, 548, 277, 445, 373, 0, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 513, 514, 511, 605, 0,
	571, 572, 0, 0, 439, 440, 305, 312, 458, 314,
	276, 362, 307, 424, 321, 0, 451, 515, 452, 574,
	577, 575, 576, 354, 317, 318, 388, 322, 332, 376,
	423, 360, 381, 274, 414, 389, 336, 501, 528, 826,
	800, 825, 827, 828, 824, 829, 830, 811, 710, 0,
	758, 822, 821, 823, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 556, 555, 554, 553, 552,
	551, 550, 549, 0, 0, 498, 401, 286, 251, 282,
	283, 290, 595, 592, 405, 596, 0, 256, 478, 330,
	0, 371, 304, 543, 544, 789, 765, 766, 767, 707,
	768, 762, 763, 708, 764, 790, 756, 786, 787, 735,
	759, 769, 785, 770, 788, 791, 792, 831, 832, 776,
	760, 223, 833, 773, 793, 784, 783, 771, 757, 794,
	795, 742, 737, 774, 775, 761, 777, 778, 779, 709,
	738, 739, 740, 741, 0, 0, 0, 430, 431, 432,
	454, 416, 477, 593, 0, 0, 0, 0, 0, 0,
	0, 527, 539, 573, 0, 582, 583, 585, 587, 780,
	752, 599, 468, 469, 579, 0, 0, 0, 0, 359,
	0, 483, 516, 505, 588, 471, 0, 0, 0, 0,
	0, 0, 705, 0, 0, 0, 299, 0, 0, 329,
	520, 502, 512, 503, 488, 489, 490, 497, 309, 491,
	492, 493, 464, 494, 465, 495, 496, 743, 519, 470,
	390, 343, 537, 536, 0, 0, 805, 813, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
	0, 733, 782, 781, 720, 730, 0, 0, 272, 198,
	466, 584, 467, 721, 0, 722, 726, 729, 725, 723,
	724, 0, 797, 0, 0, 0, 0, 0, 0, 690,
	702, 0, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 699, 700, 1438, 0,
	0, 0, 753, 0, 701, 0, 0, 748, 727, 731,
	0, 0, 0, 0, 262, 395, 412, 273, 386, 425,
	278, 393, 268, 358, 382, 0, 0, 264, 410, 392,
	340, 319, 320, 263, 0, 377, 297, 311, 294, 356,
	728, 751, 755, 293, 819, 749, 420, 266, 0, 419,
	355, 406, 411, 341, 335, 265, 408, 339, 334, 323,
	301, 820, 324, 325, 315, 367, 333, 368, 316, 345,
	344, 346, 0, 0, 0, 0, 0, 448, 449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 578, 746, 0, 581, 0, 422, 0, 0, 803,
	0, 0, 0, 394, 0, 0, 326, 0, 0, 0,
	750, 0, 380, 361, 816, 0, 0, 378, 331, 407,
	369, 413, 396, 421, 374, 370, 257, 397, 296, 342,
	269, 271, 291, 298, 300, 302, 303, 351, 352, 364,
	385, 398, 399, 400, 295, 279, 379, 280, 313, 281,
	258, 287, 285, 288, 387, 289, 260, 365, 404, 0,
	308, 375, 338, 261, 337, 366, 403, 402, 270, 429,
	435, 436, 524, 0, 441, 602, 603, 604, 450, 455,
	456, 457, 459, 460, 461, 462, 525, 542, 509, 479,
	443, 533, 476, 480, 481, 545, 0, 0, 0, 434,
	327, 328, 0, 306, 254, 255, 598, 801, 357, 547,
	580, 472, 0, 815, 796, 798, 799, 802, 806, 807,
	808, 809, 810, 812, 814, 818, 597, 0, 526, 541,
	600, 540, 594, 363, 0, 384, 538, 485, 0, 530,
	504, 0, 531, 500, 535, 0, 474, 0, 391, 415,
	427, 444, 447, 475, 560, 561, 562, 259, 446, 564,
	565, 566, 567, 568, 569, 570, 563, 817, 507, 484,
	510, 426, 487, 486, 0, 0, 521, 754, 522, 523,
	347, 348, 349, 350, 804, 548, 277, 445, 373, 0,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 513,
	514, 511, 605, 0, 571, 572, 0, 0, 439, 440,
	305, 312, 458, 314, 276, 362, 307, 424, 321, 0,
	451, 515, 452, 574, 577, 575, 576, 354, 317, 318,
	388, 322, 332, 376, 423, 360, 381, 274, 414, 389,
	336, 501, 528, 826, 800, 825, 827, 828, 824, 829,
	830, 811, 710, 0, 758, 822, 821, 823, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 556,
	555, 554, 553, 552, 551, 550, 549, 0, 0, 498,
	401, 286, 251, 282, 283, 290, 595, 592, 405, 596,
	0, 256, 478, 330, 0, 371, 304, 543, 544, 789,
	765, 766, 767, 707, 768, 762, 763, 708, 764, 790,
	756, 786, 787, 735, 759, 769, 785, 770, 788, 791,
	792, 831, 832, 776, 760, 223, 833, 773, 793, 784,
	783, 771, 757, 794, 795, 742, 737, 774, 775, 761,
	777, 778, 779, 709, 738, 739, 740, 741, 0, 0,
	0, 430, 431, 432, 454, 416, 477, 593, 0, 0,
	0, 0, 0, 0, 0, 527, 539, 573, 0, 582,
	583, 585, 587, 780, 0, 599, 468, 469, 579, 752,
	0, 0, 2054, 0, 0, 0, 0, 0, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 705, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 743, 519, 470, 390,
	343, 537, 536, 0, 0, 805, 813, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 0,
	733, 782, 781, 720, 730, 0, 0, 272, 198, 466,
	584, 467, 721, 0, 722, 726, 729, 725, 723, 724,
	0, 797, 0, 0, 0, 0, 0, 0, 690, 702,
	0, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 699, 700, 0, 0, 0,
	0, 753, 0, 701, 0, 0, 748, 727, 731, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 728,
	751, 755, 293, 819, 749, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	820, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 746, 0, 581, 0, 422, 0, 0, 803, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 750,
	0, 380, 361, 816, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 801, 357, 547, 580,
	472, 0, 815, 796, 798, 799, 802, 806, 807, 808,
	809, 810, 812, 814, 818, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 817, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 754, 522, 523, 347,
	348, 349, 350, 804, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 826, 800, 825, 827, 828, 824, 829, 830,
	811, 710, 0, 758, 822, 821, 823, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 789, 765,
	766, 767, 707, 768, 762, 763, 708, 764, 790, 756,
	786, 787, 735, 759, 769, 785, 770, 788, 791, 792,
	831, 832, 776, 760, 223, 833, 773, 793, 784, 783,
	771, 757, 794, 795, 742, 737, 774, 775, 761, 777,
	778, 779, 709, 738, 739, 740, 741, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 780, 752, 599, 468, 469, 579, 0, 0,
	0, 0, 359, 0, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 0, 705, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	743, 519, 470, 390, 343, 537, 536, 0, 0, 805,
	813, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 698, 0, 0, 733, 782, 781, 720, 730, 0,
	0, 272, 198, 466, 584, 467, 721, 0, 722, 726,
	729, 725, 723, 724, 0, 797, 0, 0, 0, 0,
	0, 0, 690, 702, 0, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	700, 1692, 0, 0, 0, 753, 0, 701, 0, 0,
	748, 727, 731, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 728, 751, 755, 293, 819, 749, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 820, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 746, 0, 581, 0, 422,
	0, 0, 803, 0, 0, 0, 394, 0, 0, 326,
	0, 0, 0, 750, 0, 380, 361, 816, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	801, 357, 547, 580, 472, 0, 815, 796, 798, 799,
	802, 806, 807, 808, 809, 810, 812, 814, 818, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	817, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	754, 522, 523, 347, 348, 349, 350, 804, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 826, 800, 825, 827,
	828, 824, 829, 830, 811, 710, 0, 758, 822, 821,
	823, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 0, 371, 304,
	543, 544, 789, 765, 766, 767, 707, 768, 762, 763,
	708, 764, 790, 756, 786, 787, 735, 759, 769, 785,
	770, 788, 791, 792, 831, 832, 776, 760, 223, 833,
	773, 793, 784, 783, 771, 757, 794, 795, 742, 737,
	774, 775, 761, 777, 778, 779, 709, 738, 739, 740,
	741, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 780, 752, 599, 468,
	469, 579, 0, 0, 0, 0, 359, 0, 483, 516,
	505, 588, 471, 0, 0, 0, 0, 0, 0, 705,
	0, 0, 0, 299, 0, 0, 329, 520, 502, 512,
	503, 488, 489, 490, 497, 309, 491, 492, 493, 464,
	494, 465, 495, 496, 743, 519, 470, 390, 343, 537,
	536, 0, 0, 805, 813, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 698, 0, 0, 733, 782,
	781, 720, 730, 0, 0, 272, 198, 466, 584, 467,
	721, 0, 722, 726, 729, 725, 723, 724, 0, 797,
	0, 0, 0, 0, 0, 0, 690, 702, 0, 706,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 699, 700, 0, 0, 0, 0, 753,
	0, 701, 0, 0, 748, 727, 731, 0, 0, 0,
	0, 262, 395, 412, 273, 386, 425, 278, 393, 268,
	358, 382, 0, 0, 264, 410, 392, 340, 319, 320,
	263, 0, 377, 297, 311, 294, 356, 728, 751, 755,
	293, 819, 749, 420, 266, 0, 419, 355, 406, 411,
	341, 335, 265, 408, 339, 334, 323, 301, 820, 324,
	325, 315, 367, 333, 368, 316, 345, 344, 346, 0,
	0, 0, 0, 0, 448, 449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 578, 746,
	0, 581, 0, 422, 0, 0, 803, 0, 0, 0,
	394, 0, 0, 326, 0, 0, 0, 750, 0, 380,
	361, 816, 0, 0, 378, 331, 407, 369, 413, 396,
	421, 374, 370, 257, 397, 296, 342, 269, 271, 291,
	298, 300, 302, 303, 351, 352, 364, 385, 398, 399,
	400, 295, 279, 379, 280, 313, 281, 258, 287, 285,
	288, 387, 289, 260, 365, 404, 0, 308, 375, 338,
	261, 337, 366, 403, 402, 270, 429, 435, 436, 524,
	0, 441, 602, 603, 604, 450, 455, 456, 457, 459,
	460, 461, 462, 525, 542, 509, 479, 443, 533, 476,
	480, 481, 545, 0, 0, 0, 434, 327, 328, 0,
	306, 254, 255, 598, 801, 357, 547, 580, 472, 0,
	815, 796, 798, 799, 802, 806, 807, 808, 809, 810,
	812, 814, 818, 597, 0, 526, 541, 600, 540, 594,
	363, 0, 384, 538, 485, 0, 530, 504, 0, 531,
	500, 535, 0, 474, 0, 391, 415, 427, 444, 447,
	475, 560, 561, 562, 259, 446, 564, 565, 566, 567,
	568, 569, 570, 563, 817, 507, 484, 510, 426, 487,
	486, 0, 0, 521, 754, 522, 523, 347, 348, 349,
	350, 804, 548, 277, 445, 373, 0, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 513, 514, 511, 605,
	0, 571, 572, 0, 0, 439, 440, 305, 312, 458,
	314, 276, 362, 307, 424, 321, 0, 451, 515, 452,
	574, 577, 575, 576, 354, 317, 318, 388, 322, 332,
	376, 423, 360, 381, 274, 414, 389, 336, 501, 528,
	826, 800, 825, 827, 828, 824, 829, 830, 811, 710,
	0, 758, 822, 821, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 556, 555, 554, 553,
	552, 551, 550, 549, 0, 0, 498, 401, 286, 251,
	282, 283, 290, 595, 592, 405, 596, 0, 256, 478,
	330, 0, 371, 304, 543, 544, 789, 765, 766, 767,
	707, 768, 762, 763, 708, 764, 790, 756, 786, 787,
	735, 759, 769, 785, 770, 788, 791, 792, 831, 832,
	776, 760, 223, 833, 773, 793, 784, 783, 771, 757,
	794, 795, 742, 737, 774, 775, 761, 777, 778, 779,
	709, 738, 739, 740, 741, 0, 0, 0, 430, 431,
	432, 454, 416, 477, 593, 0, 0, 0, 0, 0,
	0, 0, 527, 539, 573, 0, 582, 583, 585, 587,
	780, 752, 599, 468, 469, 579, 0, 0, 0, 0,
	359, 0, 483, 516, 505, 588, 471, 0, 0, 0,
	0, 0, 0, 705, 0, 0, 0, 299, 0, 0,
	329, 520, 502, 512, 503, 488, 489, 490, 497, 309,
	491, 492, 493, 464, 494, 465, 495, 496, 743, 519,
	470, 390, 343, 537, 536, 0, 0, 805, 813, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 0, 733, 782, 781, 720, 730, 0, 0, 272,
	198, 466, 584, 467, 2485, 0, 2486, 726, 729, 725,
	723, 724, 0, 797, 0, 0, 0, 0, 0, 0,
	690, 702, 0, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 699, 700, 0,
	0, 0, 0, 753, 0, 701, 0, 0, 748, 727,
	731, 0, 0, 0, 0, 262, 395, 412, 273, 386,
	425, 278, 393, 268, 358, 382, 0, 0, 264, 410,
	392, 340, 319, 320, 263, 0, 377, 297, 311, 294,
	356, 728, 751, 755, 293, 819, 749, 420, 266, 0,
	419, 355, 406, 411, 341, 335, 265, 408, 339, 334,
	323, 301, 820, 324, 325, 315, 367, 333, 368, 316,
	345, 344, 346, 0, 0, 0, 0, 0, 448, 449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 578, 746, 0, 581, 0, 422, 0, 0,
	803, 0, 0, 0, 394, 0, 0, 326, 0, 0,
	0, 750, 0, 380, 361, 816, 0, 0, 378, 331,
	407, 369, 413, 396, 421, 374, 370, 257, 397, 296,
	342, 269, 271, 291, 298, 300, 302, 303, 351, 352,
	364, 385, 398, 399, 400, 295, 279, 379, 280, 313,
	281, 258, 287, 285, 288, 387, 289, 260, 365, 404,
	0, 308, 375, 338, 261, 337, 366, 403, 402, 270,
	429, 435, 436, 524, 0, 441, 602, 603, 604, 450,
	455, 456, 457, 459, 460, 461, 462, 525, 542, 509,
	479, 443, 533, 476, 480, 481, 545, 0, 0, 0,
	434, 327, 328, 0, 306, 254, 255, 598, 801, 357,
	547, 580, 472, 0, 815, 796, 798, 799, 802, 806,
	807, 808, 809, 810, 812, 814, 818, 597, 0, 526,
	541, 600, 540, 594, 363, 0, 384, 538, 485, 0,
	530, 504, 0, 531, 500, 535, 0, 474, 0, 391,
	415, 427, 444, 447, 475, 560, 561, 562, 259, 446,
	564, 565, 566, 567, 568, 569, 570, 563, 817, 507,
	484, 510, 426, 487, 486, 0, 0, 521, 754, 522,
	523, 347, 348, 349, 350, 804, 548, 277, 445, 373,
	0, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 514, 511, 605, 0, 571, 572, 0, 0, 439,
	440, 305, 312, 458, 314, 276, 362, 307, 424, 321,
	0, 451, 515, 452, 574, 577, 575, 576, 354, 317,
	318, 388, 322, 332, 376, 423, 360, 381, 274, 414,
	389, 336, 501, 528, 826, 800, 825, 827, 828, 824,
	829, 830, 811, 710, 0, 758, 822, 821, 823, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	556, 555, 554, 553, 552, 551, 550, 549, 0, 0,
	498, 401, 286, 251, 282, 283, 290, 595, 592, 405,
	596, 0, 256, 478, 330, 0, 371, 304, 543, 544,
	789, 765, 766, 767, 707, 768, 762, 763, 708, 764,
	790, 756, 786, 787, 735, 759, 769, 785, 770, 788,
	791, 792, 831, 832, 776, 760, 223, 833, 773, 793,
	784, 783, 771, 757, 794, 795, 742, 737, 774, 775,
	761, 777, 778, 779, 709, 738, 739, 740, 741, 0,
	0, 0, 430, 431, 432, 454, 416, 477, 593, 0,
	0, 0, 0, 0, 0, 0, 527, 539, 573, 0,
	582, 583, 585, 587, 780, 752, 599, 468, 469, 579,
	0, 0, 0, 0, 359, 0, 483, 516, 505, 588,
	471, 0, 0, 1571, 0, 0, 0, 705, 0, 0,
	0, 299, 0, 0, 329, 520, 502, 512, 503, 488,
	489, 490, 497, 309, 491, 492, 493, 464, 494, 465,
	495, 496, 743, 519, 470, 390, 343, 537, 536, 0,
	0, 805, 813, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 0, 0, 733, 782, 781, 720,
	730, 0, 0, 272, 198, 466, 584, 467, 721, 0,
	722, 726, 729, 725, 723, 724, 0, 797, 0, 0,
	0, 0, 0, 0, 0, 702, 0, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 699, 700, 0, 0, 0, 0, 753, 0, 701,
	0, 0, 748, 727, 731, 0, 0, 0, 0, 262,
	395, 412, 273, 386, 425, 278, 393, 268, 358, 382,
	0, 0, 264, 410, 392, 340, 319, 320, 263, 0,
	377, 297, 311, 294, 356, 728, 751, 755, 293, 819,
	749, 420, 266, 0, 419, 355, 406, 411, 341, 335,
	265, 408, 339, 334, 323, 301, 820, 324, 325, 315,
	367, 333, 368, 316, 345, 344, 346, 0, 0, 0,
	0, 0, 448, 449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 578, 746, 0, 581,
	0, 422, 0, 0, 803, 0, 0, 0, 394, 0,
	0, 326, 0, 0, 0, 750, 0, 380, 361, 816,
	0, 0, 378, 331, 407, 369, 413, 396, 421, 374,
	370, 257, 397, 296, 342, 269, 271, 291, 298, 300,
	302, 303, 351, 352, 364, 385, 398, 399, 400, 295,
	279, 379, 280, 313, 281, 258, 287, 285, 288, 387,
	289, 260, 365, 404, 0, 308, 375, 338, 261, 337,
	366, 403, 402, 270, 429, 1572, 1573, 524, 0, 441,
	602, 603, 604, 450, 455, 456, 457, 459, 460, 461,
	462, 525, 542, 509, 479, 443, 533, 476, 480, 481,
	545, 0, 0, 0, 434, 327, 328, 0, 306, 254,
	255, 598, 801, 357, 547, 580, 472, 0, 815, 796,
	798, 799, 802, 806, 807, 808, 809, 810, 812, 814,
	818, 597, 0, 526, 541, 600, 540, 594, 363, 0,
	384, 538, 485, 0, 530, 504, 0, 531, 500, 535,
	0, 474, 0, 391, 415, 427, 444, 447, 475, 560,
	561, 562, 259, 446, 564, 565, 566, 567, 568, 569,
	570, 563, 817, 507, 484, 510, 426, 487, 486, 0,
	0, 521, 754, 522, 523, 347, 348, 349, 350, 804,
	548, 277, 445, 373, 0, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 513, 514, 511, 605, 0, 571,
	572, 0, 0, 439, 440, 305, 312, 458, 314, 276,
	362, 307, 424, 321, 0, 451, 515, 452, 574, 577,
	575, 576, 354, 317, 318, 388, 322, 332, 376, 423,
	360, 381, 274, 414, 389, 336, 501, 528, 826, 800,
	825, 827, 828, 824, 829, 830, 811, 710, 0, 758,
	822, 821, 823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 556, 555, 554, 553, 552, 551,
	550, 549, 0, 0, 498, 401, 286, 251, 282, 283,
	290, 595, 592, 405, 596, 0, 256, 478, 330, 0,
	371, 304, 543, 544, 789, 765, 766, 767, 707, 768,
	762, 763, 708, 764, 790, 756, 786, 787, 735, 759,
	769, 785, 770, 788, 791, 792, 831, 832, 776, 760,
	223, 833, 773, 793, 784, 783, 771, 757, 794, 795,
	742, 737, 774, 775, 761, 777, 778, 779, 709, 738,
	739, 740, 741, 0, 0, 0, 430, 431, 432, 454,
	416, 477, 593, 0, 0, 0, 0, 0, 0, 0,
	527, 539, 573, 0, 582, 583, 585, 587, 780, 752,
	599, 468, 469, 579, 0, 0, 0, 0, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 705, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 743, 519, 470, 390,
	343, 537, 536, 0, 0, 805, 813, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 0,
	733, 782, 781, 720, 730, 0, 0, 272, 198, 466,
	584, 467, 721, 0, 722, 726, 729, 725, 723, 724,
	0, 797, 0, 0, 0, 0, 0, 0, 0, 702,
	0, 706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 699, 700, 0, 0, 0,
	0, 753, 0, 701, 0, 0, 748, 727, 731, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 728,
	751, 755, 293, 819, 749, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	820, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 746, 0, 581, 0, 422, 0, 0, 803, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 750,
	0, 380, 361, 816, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 801, 357, 547, 580,
	472, 0, 815, 796, 798, 799, 802, 806, 807, 808,
	809, 810, 812, 814, 818, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 817, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 754, 522, 523, 347,
	348, 349, 350, 804, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 826, 800, 825, 827, 828, 824, 829, 830,
	811, 710, 0, 758, 822, 821, 823, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 789, 765,
	766, 767, 707, 768, 762, 763, 708, 764, 790, 756,
	786, 787, 735, 759, 769, 785, 770, 788, 791, 792,
	831, 832, 776, 760, 223, 833, 773, 793, 784, 783,
	771, 757, 794, 795, 742, 737, 774, 775, 761, 777,
	778, 779, 709, 738, 739, 740, 741, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 780, 752, 599, 468, 469, 579, 0, 0,
	0, 0, 359, 0, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 0, 705, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	743, 519, 470, 390, 343, 537, 536, 0, 0, 805,
	813, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 782, 781, 720, 730, 0,
	0, 272, 198, 466, 584, 467, 721, 0, 722, 726,
	729, 725, 723, 724, 0, 797, 0, 0, 0, 0,
	0, 0, 690, 702, 0, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	700, 0, 0, 0, 0, 753, 0, 701, 0, 0,
	748, 727, 731, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 728, 751, 755, 293, 819, 749, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 820, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 746, 0, 581, 0, 422,
	0, 0, 803, 0, 0, 0, 394, 0, 0, 326,
	0, 0, 0, 750, 0, 380, 361, 816, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	801, 357, 547, 580, 472, 0, 815, 796, 798, 799,
	802, 806, 807, 808, 809, 810, 812, 814, 818, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	817, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	754, 522, 523, 347, 348, 349, 350, 804, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 826, 800, 825, 827,
	828, 824, 829, 830, 811, 710, 0, 758, 822, 821,
	823, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 0, 371, 304,
	543, 544, 789, 765, 766, 767, 707, 768, 762, 763,
	708, 764, 790, 756, 786, 787, 735, 759, 769, 785,
	770, 788, 791, 792, 831, 832, 776, 760, 223, 833,
	773, 793, 784, 783, 771, 757, 794, 795, 742, 737,
	774, 775, 761, 777, 778, 779, 709, 738, 739, 740,
	741, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 780, 0, 599, 468,
	469, 579, 175, 52, 164, 139, 0, 0, 0, 0,
	0, 0, 359, 0, 483, 516, 505, 588, 471, 0,
	165, 0, 0, 0, 0, 0, 0, 157, 0, 299,
	0, 166, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	116, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 169, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 272, 198, 466, 584, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 0, 409, 437, 293, 428, 0, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 453, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 138, 163,
	173, 0, 102, 0, 578, 0, 0, 581, 0, 422,
	0, 0, 190, 0, 0, 0, 394, 0, 0, 326,
	162, 156, 155, 438, 0, 380, 361, 202, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 557, 558,
	559, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 417,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 193, 529, 532, 463, 203,
	0, 526, 541, 499, 540, 204, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	442, 522, 523, 347, 348, 349, 350, 310, 548, 277,
	445, 373, 114, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 201, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 372,
	267, 405, 383, 0, 256, 478, 330, 140, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	205, 39, 191, 194, 196, 195, 0, 50, 527, 539,
	573, 5, 582, 583, 585, 587, 586, 119, 206, 468,
	469, 579, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 359, 0, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	116, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 272, 198, 466, 584, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 2184, 2187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 0, 409, 437, 293, 428, 0, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 453, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 581, 2188, 422,
	0, 0, 0, 2183, 0, 2182, 394, 2180, 2185, 326,
	0, 0, 0, 438, 0, 380, 361, 601, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 2186, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 0, 529, 532, 463, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	442, 522, 523, 347, 348, 349, 350, 310, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 140, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 586, 0, 599, 468,
	469, 579, 359, 0, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	0, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1216, 0, 0, 197, 0, 0, 720, 730, 0,
	0, 272, 198, 466, 584, 467, 721, 0, 722, 726,
	729, 725, 723, 724, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 728, 409, 437, 293, 428, 0, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 453, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 581, 0, 422,
	0, 0, 0, 0, 0, 0, 394, 0, 0, 326,
	0, 0, 0, 438, 0, 380, 361, 601, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 0, 529, 532, 463, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	442, 522, 523, 347, 348, 349, 350, 310, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 0, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 586, 0, 599, 468,
	469, 579, 175, 52, 164, 139, 0, 0, 0, 0,
	0, 0, 359, 622, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	0, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 628, 0, 0, 0,
	0, 627, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 272, 198, 466, 584, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 0, 409, 437, 293, 428, 0, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 453, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 626, 0, 578, 0, 0, 581, 0, 422,
	0, 0, 0, 0, 0, 0, 394, 0, 0, 326,
	0, 0, 0, 438, 0, 380, 361, 601, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 0, 529, 532, 463, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	442, 522, 523, 347, 348, 349, 350, 623, 625, 277,
	445, 373, 636, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 140, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 586, 0, 599, 468,
	469, 579, 359, 0, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	0, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 272, 198, 466, 584, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 2184, 2187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 0, 409, 437, 293, 428, 0, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 453, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 581, 2188, 422,
	0, 0, 0, 2183, 0, 2182, 394, 2180, 2185, 326,
	0, 0, 0, 438, 0, 380, 361, 601, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 2186, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 0, 529, 532, 463, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	442, 522, 523, 347, 348, 349, 350, 310, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 0, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 586, 0, 599, 468,
	469, 579, 359, 0, 483, 516, 505, 588, 471, 0,
	1037, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	0, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 272, 198, 466, 584, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	2333, 2336, 2337, 2338, 2339, 2340, 2341, 0, 2346, 2342,
	2343, 2344, 2345, 0, 2328, 2329, 2330, 2331, 1021, 2312,
	2334, 0, 2313, 355, 2314, 2315, 2316, 2317, 2318, 2319,
	2320, 2321, 2322, 2325, 2326, 2323, 2324, 2332, 367, 333,
	368, 316, 345, 344, 346, 1048, 1050, 1052, 1054, 1057,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 581, 0, 422,
	0, 0, 0, 0, 0, 0, 394, 0, 0, 326,
	0, 0, 0, 2327, 0, 380, 361, 601, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 0, 529, 532, 463, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	442, 522, 523, 347, 348, 349, 350, 310, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 2335, 330, 0, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 586, 0, 599, 468,
	469, 579, 359, 0, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	0, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 272, 198, 466, 584, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 2205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 0, 409, 437, 293, 428, 0, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 453, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 581, 2204, 422,
	0, 0, 0, 2210, 2207, 2209, 394, 0, 2208, 326,
	0, 0, 0, 438, 0, 380, 361, 601, 0, 2202,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 0, 529, 532, 463, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	442, 522, 523, 347, 348, 349, 350, 310, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 0, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 586, 0, 599, 468,
	469, 579, 359, 0, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	0, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 272, 198, 466, 584, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 2205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 0, 409, 437, 293, 428, 0, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 453, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 581, 2204, 422,
	0, 0, 0, 2210, 2207, 2209, 394, 0, 2208, 326,
	0, 0, 0, 438, 0, 380, 361, 601, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 0, 529, 532, 463, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	442, 522, 523, 347, 348, 349, 350, 310, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 0, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 586, 0, 599, 468,
	469, 579, 359, 0, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 1930, 0, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	0, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 1931, 0, 0,
	0, 272, 198, 466, 584, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 1148, 1149,
	1150, 1147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 0, 409, 437, 293, 428, 0, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 453, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 581, 0, 422,
	0, 0, 0, 0, 0, 0, 394, 0, 0, 326,
	0, 0, 0, 438, 0, 380, 361, 601, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 0, 529, 532, 463, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	442, 522, 523, 347, 348, 349, 350, 310, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 0, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 586, 175, 599, 468,
	469, 579, 0, 0, 0, 0, 0, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 116, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 1976, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 140, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 175, 599, 468, 469, 579, 0, 0, 0,
	0, 0, 359, 0, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	116, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 1965, 0, 197, 0, 0, 0, 0, 0,
	0, 272, 198, 466, 584, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 395, 412,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 0, 409, 437, 293, 428, 0, 420,
	266, 0, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 453, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 581, 0, 422,
	0, 0, 0, 0, 0, 0, 394, 0, 0, 326,
	0, 0, 0, 438, 0, 380, 361, 601, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 374, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 0, 529, 532, 463, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 570, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	442, 522, 523, 347, 348, 349, 350, 310, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	354, 317, 318, 388, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 336, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 140, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 586, 0, 599, 468,
	469, 579, 359, 0, 483, 516, 505, 588, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	954, 0, 329, 520, 502, 512, 503, 488, 489, 490,
	497, 309, 491, 492, 493, 464, 494, 465, 495, 496,
	0, 519, 470, 390, 343, 537, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 961, 962, 0, 0, 0,
	0, 272, 198, 466, 584, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 395, 949,
	273, 386, 425, 278, 393, 268, 358, 382, 0, 0,
	264, 410, 392, 340, 319, 320, 263, 0, 377, 297,
	311, 294, 356, 0, 409, 437, 293, 428, 939, 420,
	266, 938, 419, 355, 406, 411, 341, 335, 265, 408,
	339, 334, 323, 301, 453, 324, 325, 315, 367, 333,
	368, 316, 345, 344, 346, 0, 0, 0, 0, 0,
	448, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 581, 0, 422,
	0, 0, 0, 0, 0, 0, 394, 0, 0, 326,
	0, 0, 0, 438, 0, 380, 361, 601, 0, 0,
	378, 331, 407, 369, 413, 396, 421, 952, 370, 257,
	397, 296, 342, 269, 271, 291, 298, 300, 302, 303,
	351, 352, 364, 385, 398, 399, 400, 295, 279, 379,
	280, 313, 281, 258, 287, 285, 288, 387, 289, 260,
	365, 404, 0, 308, 375, 338, 261, 337, 366, 403,
	402, 270, 429, 435, 436, 524, 0, 441, 602, 603,
	604, 450, 455, 456, 457, 459, 460, 461, 462, 525,
	542, 509, 479, 443, 533, 476, 480, 481, 545, 0,
	0, 0, 434, 327, 328, 0, 306, 254, 255, 598,
	292, 357, 547, 580, 472, 0, 534, 473, 482, 284,
	506, 518, 517, 353, 433, 0, 529, 532, 463, 597,
	0, 526, 541, 600, 540, 594, 363, 0, 384, 538,
	485, 0, 530, 504, 0, 531, 500, 535, 0, 474,
	0, 391, 415, 427, 444, 447, 475, 560, 561, 562,
	259, 446, 564, 565, 566, 567, 568, 569, 953, 563,
	418, 507, 484, 510, 426, 487, 486, 0, 0, 521,
	956, 522, 523, 347, 348, 349, 350, 310, 548, 277,
	445, 373, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 513, 514, 511, 605, 0, 571, 572, 0,
	0, 439, 440, 305, 312, 458, 314, 276, 362, 307,
	424, 321, 0, 451, 515, 452, 574, 577, 575, 576,
	963, 950, 959, 951, 322, 332, 376, 423, 360, 381,
	274, 414, 389, 960, 501, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 556, 555, 554, 553, 552, 551, 550, 549,
	0, 0, 498, 401, 286, 251, 282, 283, 290, 595,
	592, 405, 596, 0, 256, 478, 330, 0, 371, 304,
	543, 544, 207, 208, 209, 210, 211, 212, 213, 214,
	252, 215, 216, 217, 218, 219, 220, 221, 224, 225,
	226, 227, 228, 229, 230, 231, 546, 222, 223, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 0, 0, 0, 253, 247, 248, 249,
	250, 0, 0, 0, 430, 431, 432, 454, 416, 477,
	593, 0, 0, 0, 0, 0, 0, 0, 527, 539,
	573, 0, 582, 583, 585, 587, 586, 175, 599, 468,
	469, 579, 0, 0, 0, 0, 0, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 116, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1864, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 140, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	961, 962, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 939, 420, 266, 938, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 963, 1883, 959, 1884, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 960, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 2687, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 2690, 0, 0, 2689, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 1405, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 1403, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1401, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 1399, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 1403, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1401, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3636, 0, 197,
	782, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 1403, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1401, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 1403, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3263, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 2276,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 2278, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 2297, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 1403, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	782, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3615, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 3405, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 3528, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3259, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3420, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 3348, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 2903, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2920, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1864, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 2872, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2784, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 1403, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 2278, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 2612, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 0, 599, 468, 469, 579, 359, 0, 483,
	516, 505, 588, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 329, 520, 502,
	512, 503, 488, 489, 490, 497, 309, 491, 492, 493,
	464, 494, 465, 495, 496, 0, 519, 470, 390, 343,
	537, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 2353, 0, 0, 0, 272, 198, 466, 584,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 395, 412, 273, 386, 425, 278, 393,
	268, 358, 382, 0, 0, 264, 410, 392, 340, 319,
	320, 263, 0, 377, 297, 311, 294, 356, 0, 409,
	437, 293, 428, 0, 420, 266, 0, 419, 355, 406,
	411, 341, 335, 265, 408, 339, 334, 323, 301, 453,
	324, 325, 315, 367, 333, 368, 316, 345, 344, 346,
	0, 0, 0, 0, 0, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 581, 0, 422, 0, 0, 0, 0, 0,
	0, 394, 0, 0, 326, 0, 0, 0, 438, 0,
	380, 361, 601, 0, 0, 378, 331, 407, 369, 413,
	396, 421, 374, 370, 257, 397, 296, 342, 269, 271,
	291, 298, 300, 302, 303, 351, 352, 364, 385, 398,
	399, 400, 295, 279, 379, 280, 313, 281, 258, 287,
	285, 288, 387, 289, 260, 365, 404, 0, 308, 375,
	338, 261, 337, 366, 403, 402, 270, 429, 435, 436,
	524, 0, 441, 602, 603, 604, 450, 455, 456, 457,
	459, 460, 461, 462, 525, 542, 509, 479, 443, 533,
	476, 480, 481, 545, 0, 0, 0, 434, 327, 328,
	0, 306, 254, 255, 598, 292, 357, 547, 580, 472,
	0, 534, 473, 482, 284, 506, 518, 517, 353, 433,
	0, 529, 532, 463, 597, 0, 526, 541, 600, 540,
	594, 363, 0, 384, 538, 485, 0, 530, 504, 0,
	531, 500, 535, 0, 474, 0, 391, 415, 427, 444,
	447, 475, 560, 561, 562, 259, 446, 564, 565, 566,
	567, 568, 569, 570, 563, 418, 507, 484, 510, 426,
	487, 486, 0, 0, 521, 442, 522, 523, 347, 348,
	349, 350, 310, 548, 277, 445, 373, 0, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 513, 514, 511,
	605, 0, 571, 572, 0, 0, 439, 440, 305, 312,
	458, 314, 276, 362, 307, 424, 321, 0, 451, 515,
	452, 574, 577, 575, 576, 354, 317, 318, 388, 322,
	332, 376, 423, 360, 381, 274, 414, 389, 336, 501,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 556, 555, 554,
	553, 552, 551, 550, 549, 0, 0, 498, 401, 286,
	251, 282, 283, 290, 595, 592, 405, 596, 0, 256,
	478, 330, 0, 371, 304, 543, 544, 207, 208, 209,
	210, 211, 212, 213, 214, 252, 215, 216, 217, 218,
	219, 220, 221, 224, 225, 226, 227, 228, 229, 230,
	231, 546, 222, 223, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 0, 0,
	0, 253, 247, 248, 249, 250, 0, 0, 0, 430,
	431, 432, 454, 416, 477, 593, 0, 0, 0, 0,
	0, 0, 0, 527, 539, 573, 0, 582, 583, 585,
	587, 586, 2142, 599, 468, 469, 579, 0, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 1851, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 1403, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 1757, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 1433, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 620, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 893, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 610, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 1383, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 1381, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 374, 370, 257, 397, 296, 342, 269,
	271, 685, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 570, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 0, 0, 0,
	0, 0, 0, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 359, 0,
	483, 516, 505, 588, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 329, 520,
	502, 512, 503, 488, 489, 490, 497, 309, 491, 492,
	493, 464, 494, 465, 495, 496, 0, 519, 470, 390,
	343, 537, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 272, 198, 466,
	584, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 395, 412, 273, 386, 425, 278,
	393, 268, 358, 382, 0, 0, 264, 410, 392, 340,
	319, 320, 263, 0, 377, 297, 311, 294, 356, 0,
	409, 437, 293, 428, 0, 420, 266, 0, 419, 355,
	406, 411, 341, 335, 265, 408, 339, 334, 323, 301,
	453, 324, 325, 315, 367, 333, 368, 316, 345, 344,
	346, 0, 0, 0, 0, 0, 448, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 581, 0, 422, 0, 0, 0, 0,
	0, 0, 394, 0, 0, 326, 0, 0, 0, 438,
	0, 380, 361, 601, 0, 0, 378, 331, 407, 369,
	413, 396, 421, 644, 370, 257, 397, 296, 342, 269,
	271, 291, 298, 300, 302, 303, 351, 352, 364, 385,
	398, 399, 400, 295, 279, 379, 280, 313, 281, 258,
	287, 285, 288, 387, 289, 260, 365, 404, 0, 308,
	375, 338, 261, 337, 366, 403, 402, 270, 429, 435,
	436, 524, 0, 441, 602, 603, 604, 450, 455, 456,
	457, 459, 460, 461, 462, 525, 542, 509, 479, 443,
	533, 476, 480, 481, 545, 0, 0, 0, 434, 327,
	328, 0, 306, 254, 255, 598, 292, 357, 547, 580,
	472, 0, 534, 473, 482, 284, 506, 518, 517, 353,
	433, 0, 529, 532, 463, 597, 0, 526, 541, 600,
	540, 594, 363, 0, 384, 538, 485, 0, 530, 504,
	0, 531, 500, 535, 0, 474, 0, 391, 415, 427,
	444, 447, 475, 560, 561, 562, 259, 446, 564, 565,
	566, 567, 568, 569, 645, 563, 418, 507, 484, 510,
	426, 487, 486, 0, 0, 521, 442, 522, 523, 347,
	348, 349, 350, 310, 548, 277, 445, 373, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 513, 514,
	511, 605, 0, 571, 572, 0, 0, 439, 440, 305,
	312, 458, 314, 276, 362, 307, 424, 321, 0, 451,
	515, 452, 574, 577, 575, 576, 354, 317, 318, 388,
	322, 332, 376, 423, 360, 381, 274, 414, 389, 336,
	501, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1037, 0, 0, 556, 555,
	554, 553, 552, 551, 550, 549, 0, 0, 498, 401,
	286, 251, 282, 283, 290, 595, 592, 405, 596, 0,
	256, 478, 330, 0, 371, 304, 543, 544, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 215, 216, 217,
	218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
	230, 231, 546, 222, 223, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	0, 0, 253, 247, 248, 249, 250, 0, 0, 0,
	430, 431, 432, 454, 416, 477, 593, 1839, 0, 0,
	0, 0, 1800, 0, 527, 539, 573, 0, 582, 583,
	585, 587, 586, 0, 599, 468, 469, 579, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 1841, 1809, 0, 0, 0, 0, 0, 0,
	0, 0, 1842, 1843, 0, 1045, 1049, 1051, 1053, 1055,
	1056, 1058, 0, 1063, 1059, 1060, 1061, 1062, 0, 1040,
	1041, 1042, 1043, 1021, 1022, 1046, 0, 1024, 1808, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1038,
	1034, 1035, 1044, 1816, 0, 0, 0, 0, 0, 0,
	1048, 1050, 1052, 1054, 1057, 0, 0, 0, 0, 0,
	0, 885, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1839, 0, 1039, 0,
	0, 0, 0, 175, 0, 0, 0, 0, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1832, 0, 880, 0, 876, 3270, 0, 0, 0, 0,
	0, 1841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	858, 0, 1816, 0, 0, 0, 0, 0, 0, 0,
	0, 1799, 2578, 1798, 0, 2577, 0, 0, 0, 0,
	1820, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1814, 1848, 0, 0, 1815, 1817, 1819, 0, 1821,
	1822, 1823, 1827, 1828, 1829, 1831, 1834, 1835, 1836, 1832,
	0, 882, 0, 875, 0, 0, 1824, 1833, 1825, 0,
	1839, 0, 879, 878, 0, 0, 0, 0, 1803, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	1840, 0, 0, 0, 0, 1841, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 1839, 0, 0, 0, 1796, 1797, 0, 0,
	0, 0, 884, 0, 0, 0, 0, 873, 0, 1820,
	0, 872, 0, 0, 1837, 0, 3426, 859, 0, 0,
	1826, 865, 0, 0, 0, 0, 1816, 1841, 0, 0,
	0, 1813, 0, 0, 0, 0, 0, 0, 1812, 0,
	1814, 1848, 0, 863, 1815, 1817, 1819, 0, 1821, 1822,
	1823, 1827, 1828, 1829, 1831, 1834, 1835, 1836, 0, 0,
	1047, 0, 1830, 0, 0, 1824, 1833, 1825, 0, 0,
	0, 1818, 0, 0, 0, 0, 0, 0, 1816, 0,
	883, 0, 0, 0, 1845, 1844, 0, 0, 0, 0,
	0, 0, 0, 1832, 0, 0, 0, 0, 0, 1840,
	664, 663, 670, 660, 0, 0, 864, 0, 0, 0,
	0, 0, 667, 668, 0, 669, 673, 0, 0, 655,
	0, 1839, 0, 0, 0, 0, 0, 0, 0, 678,
	0, 0, 0, 0, 0, 0, 0, 1805, 0, 0,
	0, 3397, 0, 1837, 0, 1832, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1841, 0, 0, 0,
	1813, 0, 0, 0, 0, 0, 0, 1812, 0, 0,
	0, 0, 682, 1820, 0, 684, 0, 0, 0, 1847,
	683, 0, 1846, 881, 1826, 0, 0, 0, 0, 0,
	0, 1830, 0, 0, 0, 0, 0, 0, 0, 0,
	1818, 0, 0, 0, 1814, 1848, 0, 1816, 1815, 1817,
	1819, 0, 1821, 1822, 1823, 1827, 1828, 1829, 1831, 1834,
	1835, 1836, 870, 0, 0, 1820, 0, 0, 0, 1824,
	1833, 1825, 0, 0, 0, 0, 1826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1814, 1848, 0, 0,
	1815, 1817, 1819, 1840, 1821, 1822, 1823, 1827, 1828, 1829,
	1831, 1834, 1835, 1836, 1832, 664, 663, 670, 660, 0,
	0, 1824, 1833, 1825, 0, 0, 0, 667, 668, 0,
	669, 673, 0, 0, 655, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 678, 0, 0, 1837, 140, 0,
	0, 0, 0, 0, 0, 1840, 656, 658, 657, 0,
	0, 0, 0, 0, 1813, 0, 662, 0, 0, 0,
	0, 1812, 0, 0, 664, 663, 670, 660, 666, 0,
	0, 0, 0, 0, 0, 681, 667, 668, 0, 669,
	673, 0, 659, 655, 1820, 1830, 650, 0, 0, 1837,
	0, 0, 0, 678, 1818, 1826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1813, 0, 0, 0,
	0, 0, 0, 1812, 0, 1814, 1848, 0, 0, 1815,
	1817, 1819, 0, 1821, 1822, 1823, 1827, 1828, 1829, 1831,
	1834, 1835, 1836, 0, 0, 0, 682, 1830, 0, 684,
	1824, 1833, 1825, 0, 683, 0, 1818, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 661, 665, 671, 0, 672, 674, 0, 0, 675,
	676, 677, 0, 0, 679, 680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1837, 0,
	0, 656, 658, 657, 0, 0, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 1813, 0, 0, 0, 0,
	0, 0, 1812, 666, 0, 0, 0, 0, 0, 0,
	681, 0, 0, 0, 0, 0, 0, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 1830, 0, 0, 0,
	0, 0, 0, 0, 0, 1818, 0, 0, 0, 0,
	656, 658, 657, 0, 0, 0, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 666, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 0, 0, 0, 0, 659, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 661, 665, 671, 0,
	672, 674, 0, 0, 675, 676, 677, 0, 0, 679,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 661, 665, 671, 0, 672,
	674, 0, 0, 675, 676, 677, 0, 0, 679, 680,
}

var yyPact = [...]int{
	3609, -1000, -1000, -1000, -328, 12749, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41585,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41585, -322, 40985, 40985, -1000, -1000, 2475, -1000, 39785, 14569,
	41585, 510, 506, 41585, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 880, -1000, 43985, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 820, 45027, 43385, 9723, -227, -1000, 1578, -59,
	2385, 1013, 1043, 1321, 1321, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44635, 900,
	40385, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 257, 672, 900, 19379, 54, 52, 1578, 383,
	-121, -120, -128, 2612, -1000, 1426, 317, 179, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9723,
	9723, 12749, -352, 12749, 9723, 41585, 41585, -1000, -1000, -1000,
	-1000, -322, 39785, 820, 45027, 9723, 2385, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -120, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -121, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -128, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 52, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 337,
	-1000, 1516, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2898, 1514, 2372, 788,
	41585, -1000, 118, 788, -1000, -1000, -1000, 1578, 3332, -1000,
	41585, 41585, 214, 1815, -1000, 421, 390, 399, 345, 1513,
	-1000, -1000, -1000, -1000, -1000, -1000, 694, 3281, -1000, 41585,
	41585, 2911, 41585, -1000, 2210, 731, 45261, 3126, 1373, 923,
	2937, -1000, -1000, 2897, -1000, 361, 435, 446, 445, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 354, -1000, 3194, -1000,
	-1000, 329, -1000, -1000, 318, -1000, -1000, -1000, 39, -1000,
	-1000, -1000, -1000, -1000, -1000, -56, -1000, -1000, 1091, 2252,
	9723, 2251, -1000, 3573, -1000, -1000, -1000, -1000, 5490, 11535,
	11535, 11535, 11535, -1000, -1000, 2716, 9723, 2896, 2891, 2889,
	2888, -1000, -1000, -1000, -1000, -1000, -1000, 1512, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1964, -1000, -1000,
	-1000, 12139, -1000, 2887, 2883, 2872, 2871, 2870, 2868, 2867,
	2864, 2862, 2859, 2855, 2851, 2850, 2839, 2573, 13959, 2838,
	2367, 2362, 2837, 2836, 2832, 2358, 2573, 2573, 2831, 2817,
	2816, 2805, 2802, 2801, 2800, 2799, 2792, 2790, 2789, 2787,
	2786, 2785, 2782, 2781, 2778, 2776, 2775, 2764, 2763, 2757,
	2756, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1252, -1000, 2755, 3293, 2648, -1000,
	3179, 3171, 3160, 3157, -286, 2752, 2149, -1000, -1000, 81,
	-1000, -105, -1000, -1000, 1050, -1000, 974, -1000, 819, 41585,
	41585, 212, 973, 819, 819, 819, 819, 819, 849, 819,
	3205, 875, 873, 859, 855, 819, -75, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1813, 1812, 2996, 959, -1000, -1000,
	-1000, -1000, 1386, 41585, -1000, 2663, 1630, 1630, 3204, 749,
	744, 740, 1630, 597, -1000, 1710, 1710, 1710, 1710, 1630,
	515, 755, 3209, 3209, 147, 1710, 19, 1630, 1630, 19,
	1630, 1630, 1721, 336, -295, -1000, -1000, -1000, -1000, 1710,
	1710, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3189, 3187,
	820, 820, 41585, 174, 41585, 820, 820, 820, 824, -9,
	42785, 42185, 2210, 712, 707, 1417, 1774, -1000, 1735, 41585,
	41585, 1735, 1735, 22384, 21784, -1000, 41585, -1000, 3293, 2648,
	2570, 1506, 2569, 2648, -125, -132, -135, 820, 820, 820,
	820, 820, 293, 820, 820, 820, 820, 820, 41585, 41585,
	39185, 820, 820, 7906, 7906, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12749, 2204, 2060, 178, -32, -314,
	233, -1000, -1000, 41585, 3086, 288, -1000, -1000, -1000, 2602,
	-1000, 2653, 2653, 2653, 2653, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2653, 2653, 2657, 2751, -1000, -1000,
	2652, 2652, 2652, 2602, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2655,
	2655, 2656, 2656, 2655, 41585, 9723, 41585, 3113, 549, 2750,
	-1000, 41585, 2357, 548, 3293, 3108, 3209, 3256, -1000, -1000,
	1509, 2131, 2354, -1000, 345, -1000, 400, 345, 1695, -1000,
	1046, -1000, -1000, -1000, -1000, -1000, 41585, -56, 369, -1000,
	-1000, 2330, 2749, -1000, 626, 1343, 1424, -1000, 516, 45202,
	33784, 2210, 33784, 41585, -1000, -1000, -1000, -1000, -1000, -1000,
	37, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 324, -1000, 9723, 9723, 9723, 9723,
	9723, -1000, 934, 10931, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11535, 11535, 11535, 11535, 11535, 11535, 11535, 11535, 11535,
	11535, 11535, 11535, 2714, 1658, 11535, 11535, 11535, 11535, 1506,
	2997, 1408, 285, -1000, -1000, -1000, -1000, -1000, 1859, 2252,
	9723, 9723, 9723, 9723, 41585, -1000, -1000, 3430, 9723, 9723,
	3689, 9723, 3153, 9723, 9723, 9723, 2568, 4270, 41585, 9723,
	-1000, 2565, 2564, -1000, -1000, 1968, 9723, -1000, -1000, 9723,
	-1000, -1000, 9723, 11535, 9723, -1000, -1000, -1000, 3772, 3153,
	3153, 3153, 1782, 9723, 9723, 3153, 3153, 3153, 1747, 3153,
	3153, 3153, 3153, 3153, 3153, 3153, 3153, 2558, 2556, 2555,
	9119, 3209, -227, -1000, 7302, 3108, 3209, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -288, 2748, 41585,
	2352, 2349, -333, -15, 1008, 979, 985, -1000, 41585, 1886,
	3147, -1000, 2747, 41585, 819, 819, 819, -1000, 41585, 33784,
	41585, 41585, 2210, 41585, 41585, 41585, 819, 819, 819, 819,
	41585, -1000, 3023, 33784, 3002, 824, -1000, 41585, 1386, 3146,
	41585, 3263, 11535, 11535, -1000, 38585, 1710, 1630, 1630, -1000,
	-1000, 41585, -1000, -1000, -1000, 1710, 41585, 1710, 1710, 3263,
	1710, -1000, -1000, -1000, 1630, 1630, -1000, -1000, 9723, -1000,
	-1000, 1710, 1710, -1000, -1000, 3263, 41585, 31, 3263, 3263,
	13, -1000, -1000, -1000, 1630, 41585, 41585, 819, 41585, -1000,
	41585, 41585, -1000, -1000, 41585, 41585, 3734, 41585, 37985, 3185,
	-1000, 33784, 41585, 41585, 31384, -1000, 1318, -1000, -21, -1000,
	-17, -9, 1735, -9, 1735, -1000, 625, 696, 20584, 565,
	33784, 4880, -1000, -1000, 1735, 1735, 4880, 4880, 1548, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1384, -1000, 217, 3209,
	-1000, -1000, -1000, -1000, -1000, 2130, 2127, 2126, 41585, 41585,
	33784, 2210, 41585, 820, 41585, 41585, 41585, 41585, 41585, -1000,
	2720, 1498, -1000, 3124, 41585, 41585, 1346, -1000, -1000, 17569,
	1492, 1346, -1000, 1915, -1000, 9723, 12749, -266, 9723, 12749,
	12749, 9723, 12749, -1000, 9723, 282, -1000, -1000, -1000, -1000,
	2125, -1000, 2119, -1000, -1000, -1000, -1000, -1000, 2343, 2343,
	-1000, 2117, -1000, -1000, -1000, -1000, 2112, -1000, -1000, 2110,
	-1000, -1000, -1000, 2553, 1091, -1000, 2342, 2936, -228, -1000,
	18779, 41585, 41585, -354, -356, -1000, -228, -1000, 18174, 41585,
	3209, -1000, -242, 3108, 9723, 41585, -1000, 3203, -1000, -1000,
	345, -1000, 425, 529, -1000, -1000, -1000, -1000, -1000, -1000,
	1491, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1381, -1000, 41585, -1000, -1000, 516, 33784, 35584, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 232, -1000, -1000, 183, -1000,
	841, 248, 1694, -1000, -1000, 176, 191, 220, 909, 2252,
	-1000, 1912, 1912, 1904, -1000, 734, -1000, -1000, -1000, -1000,
	2716, -1000, -1000, -1000, 2097, 3225, -1000, 1758, 1758, 1524,
	1524, 1524, 1524, 1524, 1736, 1736, -1000, -1000, -1000, 5490,
	2714, 11535, 11535, 11535, 11535, 798, 798, 3356, 3931, -1000,
	9723, 1869, -1000, 9723, 2698, 1371, 2355, 1585, 1484, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2552,
	2541, 2613, 3276, 2540, 9723, -1000, -1000, 1692, 1686, 1650,
	-1000, 2368, 8515, -1000, -1000, -1000, 2538, 1480, 2535, -1000,
	-1000, -1000, 2527, 1642, 1237, 2526, 2616, 2520, 1372, 9723,
	9723, 9723, 9723, 2519, 1633, 1632, 9723, 9723, 9723, 9723,
	2518, 9723, 9723, 9723, 9723, 9723, 9723, 9723, 9723, 139,
	139, 139, 1368, 1365, -1000, -1000, 1628, -1000, 2252, -1000,
	-1000, 3108, -1000, 2711, 2107, 1361, -1000, -1000, -320, 2299,
	-1000, -1000, 1001, 971, 1003, 3202, 3102, 41585, 1176, 2707,
	41585, 41585, 41585, 272, -1000, 1209, -1000, 248, -66, 523,
	1096, 2909, 3273, -148, 41585, 41585, 41585, 41585, 3142, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 37385, -1000, 2706,
	1609, -1000, -1000, 9723, -1000, -1000, 2907, 41585, 41585, 3263,
	3263, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1710, 3263,
	3263, 1385, 1630, 1710, -1000, -1000, 1710, -1000, -1000, 1710,
	-1000, -1000, 1478, -1000, 41585, -1000, -1000, -1000, 3141, 2663,
	1331, -1000, -1000, -1000, 3253, 1440, 810, 810, 1085, 708,
	3251, 16369, -1000, 1678, 1082, 839, 3053, 357, -1000, 1678,
	-172, 790, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 673,
	649, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
	1678, 1678, 1024, 1678, 1678, 1678, 1678, 1678, -1000, 1678,
	2703, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 735, 265,
	3184, 392, 381, 1209, 3169, 419, 3217, 1212, -1000, -1000,
	-1000, -1000, 24784, 24784, 19984, 24784, -1000, 184, -9, -24,
	-1000, -1000, 1318, 4880, 1318, 4880, -1000, -1000, 833, -1000,
	-1000, 1096, -1000, 41585, 41585, -1000, -1000, 2690, 1809, -1000,
	-1000, 13959, -1000, 4880, 4880, -1000, -1000, 25384, 41585, -1000,
	-61, -1000, -31, 3108, -1000, -1000, -1000, 1310, -1000, -1000,
	1316, 1096, 2928, 41585, 1310, 1310, 1310, -1000, -1000, 15769,
	41585, 41585, -1000, -1000, 3263, 7906, -1000, 31384, -1000, -1000,
	36784, -1000, 36184, 3263, 1832, -1000, 12749, 2042, 169, -1000,
	216, -315, 168, 1910, 167, 2252, -1000, -1000, 2515, 2514,
	1607, -1000, 1597, 2511, 1592, 1591, -1000, 1, -1000, 3090,
	1120, -1000, 2688, -1000, 1590, 2987, -1000, 1308, -1000, 1802,
	1589, -1000, 2338, 2333, 1120, 1579, 2977, 1308, 3108, 2325,
	-1000, 1307, -1000, 2120, 1477, 197, -1000, -1000, -1000, 41585,
	2330, 1577, 35584, 1179, -1000, 830, 1468, 1465, -1000, 33784,
	331, 33784, -1000, 33784, -1000, -1000, 367, -1000, 41585, 3095,
	-1000, -1000, -1000, 2299, 1790, -339, 41585, -1000, -1000, -1000,
	-1000, -1000, 1575, -1000, 798, 798, 3356, 2765, -1000, 11535,
	-1000, 11535, 2978, 1807, -1000, 9723, 2027, 3699, 9723, 3699,
	1657, 23584, 41585, -1000, -1000, 9723, 9723, -1000, 2973, -1000,
	-1000, -1000, -1000, 9723, 9723, 2496, -1000, 41585, -1000, -1000,
	-1000, -1000, 23584, -1000, 11535, -1000, 9723, 1243, 1243, 2919,
	1573, 139, 139, 139, 2915, 2901, 2884, 1565, 139, 2865,
	2852, 2847, 2814, 2783, 2779, 2744, 2732, -1000, 2687, -1000,
	-1000, 1978, 10327, 7302, -1000, -1000, 259, 1306, 2092, 2321,
	127, -1000, 1789, -1000, -1000, -1000, 968, 459, -1000, 300,
	2507, 1299, -1000, -1000, 41585, -1000, -1000, -1000, 15769, 2663,
	2685, 2663, 105, 1678, 612, 33784, 705, -1000, 41585, 2029,
	1787, 2926, 706, 3078, 41585, 2683, 360, 2682, 2668, 3136,
	499, 44464, 41585, 1322, -1000, 1460, 317, -1000, 41585, 2252,
	-1000, 2210, -1000, 1630, -1000, -1000, 3263, -1000, -1000, 9723,
	9723, 3263, 1630, 1630, 1710, 41585, -1000, 499, 44464, 3135,
	44581, 663, 2258, -1000, 41585, -1000, -1000, -1000, 832, -1000,
	986, 819, 41585, 1932, 986, 1931, 2666, -1000, -1000, 41585,
	41585, 41585, 41585, -1000, -1000, 41585, -1000, 41585, 41585, 41585,
	41585, 41585, 34984, -1000, 41585, 41585, -1000, 41585, 1929, 41585,
	1928, 3092, -1000, 1678, 1678, 933, -1000, -1000, 604, -1000,
	34984, 2091, 2088, 2085, 2084, 2319, 2317, 2316, 1678, 1678,
	2080, 2315, 34384, 2313, 1152, 2077, 2076, 2058, 2154, 2311,
	1178, -1000, 2310, 2123, 2122, 2090, 41585, 2665, 2248, -1000,
	-1000, 105, 1678, 380, 41585, 1786, 612, 521, 2158, 21184,
	41585, 31384, 31384, 31384, 31384, -1000, 2954, 2952, -1000, 2984,
	2981, 2999, 41585, 31384, 2663, -1000, 34384, -1000, -1000, -1000,
	1506, 1564, 3241, 981, 9723, -1000, -1000, -23, -51, -1000,
	-1000, -1000, 33784, 2309, 565, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3199, 41585, 41585, 791, 2506, 1291, -1000, -1000,
	-1000, 44464, 2653, 2653, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2653, 2653, 2657, -1000, -1000, 2652, 2652,
	2652, 2602, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2655, 2655, 2656, 2656, 2655, -1000, -1000, 3260,
	-1000, 1288, -1000, -1000, 1458, -1000, 3260, 1875, -329, 12749,
	1845, 1634, -1000, 9723, 12749, 9723, -267, 372, -269, -1000,
	-1000, -1000, 2306, -1000, -1000, -1000, 2053, -1000, 2050, 161,
	180, 1925, -228, 7302, 368, 41585, -228, 41585, 7302, -1000,
	41585, -357, -1000, 363, -228, 3199, 1, 9723, 3028, -1000,
	-1000, 41585, 2049, -1000, -1000, -1000, 3267, 33784, 2210, 1608,
	33184, -1000, 323, -1000, 231, 589, 2305, -1000, 854, 126,
	2301, 2299, -1000, -1000, -1000, -1000, 11535, -1000, -1000, -1000,
	-1000, 2252, 9723, 2503, -1000, 987, 987, 2159, 2495, 2489,
	-1000, 2653, 2653, -1000, 2602, 2652, 2602, 987, 987, 2487,
	-1000, 2259, 2632, -1000, 2598, 2566, 9723, -1000, 2485, 3676,
	1301, -87, -200, 139, 139, -1000, -1000, -1000, -1000, 139,
	139, 139, 139, -1000, 139, 139, 139, 139, 139, 139,
	139, 139, 789, -129, -300, -131, -302, -1000, 2483, 1283,
	-1000, -1000, -1000, -1000, -1000, 3689, 1188, -1000, -1000, 2299,
	2295, -1000, -1000, -1000, 41585, 2294, 2278, 1176, 44464, 2482,
	3131, 15169, 3130, 2161, -1000, -1000, -1000, 32584, 577, -1000,
	-1000, -1000, 727, 385, 2047, 564, -1000, 41585, 419, 3019,
	1785, 2271, 41585, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3078, -1000, 906, 456, 30184, 13359, -1000, 366, 15169, 15169,
	366, 470, 1765, -1000, 788, 1203, 114, 31384, 41585, -1000,
	30784, 2477, -1000, 1096, 3263, -1000, 2252, 2252, -1000, 3263,
	3263, 1630, -1000, 470, -1000, 366, -1000, 1822, 16969, 550,
	484, 408, -1000, 668, -1000, -1000, 775, 3066, 44464, -1000,
	41585, -1000, 41585, -1000, 41585, 41585, 819, 9723, 3066, 41585,
	829, -1000, -1000, 1107, 482, 438, 811, 811, 1187, -1000,
	3117, -1000, -1000, 1185, -1000, -1000, -1000, -1000, 41585, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 23584, 23584, 3163, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2268, 2267, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 41585, 1559, -1000, 1767, 2161, 32584, 1763,
	1735, 2266, 577, 2029, 1744, -1000, 2264, -1000, 1121, 41585,
	41585, -1000, 1269, -1000, 1732, 2906, 2925, 2906, -1000, -1000,
	-1000, -1000, 2951, -1000, 2950, -1000, -1000, 1269, -1000, -1000,
	-1000, -1000, -1000, 981, -1000, 3198, 986, 986, 986, 2465,
	-1000, -1000, -1000, 1179, 2461, -1000, -1000, -1000, 3286, -1000,
	-1000, -1000, -1000, -1000, -1000, 15769, 3074, 3242, 3250, 31984,
	3242, -1000, -329, 1768, -1000, 1991, 163, 1885, 41585, -1000,
	-1000, -1000, 2458, 2457, -244, 171, 3248, 3246, 1058, -1000,
	2456, 1147, -228, -1000, -1000, 1120, -1000, -1000, -1000, 2263,
	-228, -1000, 1120, -1000, 161, -1000, -1000, 3099, -1000, -1000,
	2210, -1000, 222, -1000, -1000, -1000, -1000, -1000, -1000, 235,
	-1000, 41585, -1000, 1133, 123, -1000, 2252, -1000, -1000, -1000,
	-1000, -1000, 3699, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 9723, -1000, -1000, -1000, 2559, -1000,
	-1000, 9723, 2454, 2261, 2448, 2260, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3293, -1000, 3245, 1554, 2446, 2444, 1550, 2441, 2439, -1000,
	9723, 2438, 3689, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	883, 366, 2437, 1123, -1000, -1000, -1000, -1000, 366, -1000,
	2257, 247, -1000, -1000, -1000, 2250, 2249, 2045, -1000, -1000,
	2035, 1323, 261, -1000, -1000, -1000, -1000, -1000, -1000, 2158,
	2156, 1730, -349, -1000, 2650, -1000, 1678, 1678, 1678, 41585,
	1547, -1000, 1678, 1678, 2433, -1000, 2426, 2425, -149, 793,
	1670, 1654, -1000, 2044, 24784, 31384, 30784, 1215, -1000, 1451,
	-1000, -1000, -1000, -1000, -1000, 3263, 793, -1000, 561, 2043,
	11535, 2649, 11535, 2645, 568, 2644, 1546, -1000, 41585, -1000,
	-1000, 41585, 319, 2635, -1000, 2631, 2902, 531, 2629, 2621,
	41585, 2534, -1000, 3066, 41585, 737, 3063, -1000, -1000, -1000,
	430, -1000, -1000, 609, -1000, 41585, -1000, 41585, -1000, 1532,
	-1000, 23584, -1000, -1000, 1526, -1000, 2248, 2246, -1000, 247,
	2245, 4880, -1000, -1000, 3019, 2244, -1000, 41585, 1121, 1121,
	3293, 41585, 7302, -1000, -1000, 9723, 2620, -1000, 9723, -1000,
	-1000, -1000, -1000, -1000, 2619, 3049, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1771, -1000, 9723, 9723, -1000, -1000, 817,
	12749, -275, 371, -1000, -1000, -1000, -247, 2241, -1000, -1000,
	3243, 2239, 2169, 41585, -1000, -1000, 1120, -1000, 1120, -244,
	-1000, -1000, 1096, -1000, -1000, 1063, 679, -1000, 2421, 2504,
	-1000, 2473, 139, -1000, 139, -1000, 224, 9723, -1000, 2235,
	-1000, -1000, -1000, 2234, -1000, -1000, 2464, -1000, 2416, 44464,
	-158, -149, 15169, -158, -1000, -1000, 353, -1000, -1000, 414,
	-1000, -1000, 2013, 623, -1000, -1000, -1000, 1712, 1942, 2197,
	28384, 23584, 24184, 2231, -1000, -1000, 30184, 1771, 1771, 44710,
	324, 45055, -1000, 2618, 1047, 1616, -1000, 2037, -1000, 2025,
	-1000, 3263, 1215, 113, -1000, -1000, 1557, -1000, 1047, 2258,
	3240, -1000, 3097, 41585, 2637, 41585, 2611, 1693, 11535, -1000,
	775, 2975, -1000, -1000, 319, -1000, -1000, 1939, 11535, -1000,
	-1000, 2230, 24184, 908, 1690, 1684, 962, 2607, -1000, 637,
	3285, -1000, -1000, -1000, 930, 2605, -1000, 1920, 1919, -1000,
	41585, -1000, 28384, 28384, 769, 769, 28384, 28384, 2604, 811,
	-1000, -1000, 11535, -1000, -1000, 1678, -1000, -1000, -1000, 1678,
	1428, -1000, -1000, -1000, -1000, -1000, -1000, 2156, -1000, -1000,
	3209, -1000, -1000, 2252, 41585, 2252, 29584, -1000, 3238, 3237,
	-1000, 2252, 1091, -1000, -329, 41585, 41585, -251, 2019, -1000,
	2224, 181, -1000, -1000, 1093, -247, -259, 13, 23584, 1683,
	-1000, -1000, -1000, -1000, -1000, 2409, -1000, 877, -1000, -1000,
	-1000, 1091, 2399, 2398, -1000, -1000, -146, -1000, -1000, 365,
	-1000, -1000, -1000, 580, 2222, -1000, -1000, 406, -1000, -1000,
	2220, -1000, -1000, 122, -1000, 1680, 1523, -1000, 2602, 9723,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 774, -1000,
	366, 44926, -1000, 1082, -1000, 1063, 774, 27184, 642, 278,
	-1000, 2014, -1000, -1000, 3293, -1000, 632, -1000, 566, -1000,
	1521, -1000, 1499, 28984, 2009, 1804, -1000, 44874, 899, -1000,
	-1000, 3356, -1000, -1000, -1000, -1000, -1000, -1000, 2218, 2213,
	-1000, -1000, -1000, -1000, -1000, 2008, 2584, 6, 3156, 2206,
	-1000, -1000, 2583, 1488, 1485, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1461, 1420, 28384, -1000, -1000, 3356,
	2007, 23584, 1678, -1000, -1000, 1419, 1391, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2580, -1000, -1000, 3236, -251, -1000,
	2202, 160, 187, -1000, 2201, -1000, -1000, 733, -235, 103,
	101, 83, -1000, -1000, -1000, 9723, -1000, -1000, 41585, 605,
	-1000, -1000, -1000, 228, -1000, -1000, -1000, -1000, 2197, 2193,
	-1000, 28384, 3117, 2442, 539, 3235, -1000, 45055, -1000, 1678,
	-1000, 539, 1366, -1000, 1678, 1678, -1000, 494, -1000, 1615,
	-1000, 2000, -1000, 3209, -1000, 480, -1000, 556, -1000, -1000,
	-1000, 1354, -1000, -1000, -1000, 44874, 582, -1000, 760, 2578,
	-1000, -1000, 2391, 9723, 2573, 1678, 2335, -142, 28384, 2854,
	2849, 2767, 2614, 1335, -1000, -1000, 23584, -1000, -1000, 27784,
	41585, 2169, -1000, -1000, 822, 199, 187, -1000, 3233, 170,
	3231, 3230, 1076, 1901, -1000, 133, 129, 111, -1000, -1000,
	-1000, -1000, 554, -1000, 315, -1000, -1000, -1000, 302, -1000,
	-1000, 3117, -1000, 3228, 663, -1000, 23584, -1000, -1000, 27184,
	1771, 1771, -1000, -1000, 1999, -1000, -1000, -1000, -1000, 1998,
	-1000, -1000, -1000, 1317, -1000, 41585, 943, 6698, -1000, 2375,
	-1000, 41585, -1000, 2922, -1000, 200, 1293, 302, 769, 302,
	769, 302, 769, 302, 769, 312, -1000, -1000, -1000, 1216,
	-1000, -1000, 2265, 1986, 171, 134, 3224, -1000, 2169, 3211,
	2169, 2169, -1000, 143, 733, -1000, -1000, -1000, 2191, -1000,
	-1000, -1000, -1000, 1678, 1678, 2187, 2184, 447, -1000, -1000,
	-1000, 26584, 550, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	582, 45055, -1000, 6698, 1199, -1000, 2252, -1000, 811, -1000,
	-1000, 2920, 2918, 3280, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 41585, 3152, 22984, 154, -1000, -1000,
	-1000, 2178, -1000, 2169, -1000, -1000, 1659, -1000, -297, 1985,
	1975, -1000, -1000, 41585, -1000, 41585, 561, -1000, 45055, 1159,
	-1000, 6698, -1000, -1000, 3282, -1000, 3283, 884, 884, 302,
	302, 302, 302, -1000, -1000, 41585, -1000, 1157, -1000, -1000,
	-1000, 1427, -1000, -1000, -1000, -1000, 2168, -1000, -1000, 2129,
	-1000, -1000, -1000, 1155, 2258, -1000, -1000, -1000, -1000, -1000,
	2028, 644, -1000, 1059, -1000, 1643, -1000, 25984, 41585, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 41585, 6094, -1000, 1423,
	-1000, -1000, 2252, 41585, -1000,
}

var yyPgo = [...]int{
	0, 173, 3317, 251, 179, 3923, 111, 254, 250, 226,
	252, 3922, 3921, 3920, 3101, 3099, 3914, 3913, 3912, 3911,
	3909, 3908, 3891, 3883, 3869, 3868, 3866, 3865, 3864, 3863,
	3859, 3858, 3857, 3856, 3855, 3854, 3853, 3852, 3851, 3849,
	3848, 3847, 3841, 3837, 3835, 3834, 246, 3833, 3832, 3828,
	3827, 3825, 3824, 3810, 3809, 3808, 3807, 3806, 3805, 3804,
	3803, 3802, 3801, 3800, 3798, 3797, 3796, 3790, 3789, 3788,
	3784, 3783, 3782, 3780, 3779, 3777, 3774, 3773, 3772, 216,
	3769, 3063, 3766, 3765, 3764, 3763, 3762, 3761, 3760, 263,
	3758, 3757, 3756, 3754, 3753, 3752, 3751, 3750, 3749, 3748,
	3747, 257, 3746, 3744, 3743, 3742, 243, 3741, 236, 3739,
	177, 136, 3738, 3737, 3736, 3735, 3734, 3733, 234, 189,
	71, 3732, 49, 3731, 3729, 209, 3728, 149, 3727, 153,
	3726, 3725, 3724, 3723, 3722, 3721, 3707, 3703, 3702, 3700,
	3699, 3696, 3695, 3694, 3693, 3692, 3690, 91, 3689, 258,
	3687, 75, 3683, 3682, 128, 78, 127, 255, 170, 260,
	242, 188, 182, 98, 3681, 3103, 3680, 160, 228, 155,
	29, 3677, 140, 3676, 262, 44, 34, 247, 137, 65,
	164, 125, 3675, 211, 104, 103, 3674, 3673, 147, 240,
	181, 3667, 100, 3666, 3665, 3664, 3663, 3661, 201, 198,
	3659, 3658, 129, 3657, 3656, 146, 3655, 77, 121, 167,
	120, 3654, 2108, 124, 130, 112, 93, 3653, 83, 3652,
	3650, 3649, 3648, 185, 3646, 3645, 132, 67, 3644, 3643,
	3642, 73, 3641, 79, 3639, 31, 3638, 62, 3635, 3634,
	3633, 3632, 3631, 3628, 3621, 3620, 3619, 3615, 3613, 3612,
	57, 3611, 3610, 7, 15, 14, 3609, 25, 3608, 168,
	3607, 3606, 3599, 3594, 3593, 89, 87, 3592, 88, 163,
	3588, 10, 27, 72, 3587, 3586, 213, 357, 99, 150,
	3585, 315, 3584, 3583, 3580, 156, 3577, 587, 3576, 3575,
	3574, 3573, 3572, 3571, 139, 3570, 207, 41, 3569, 133,
	145, 3568, 39, 56, 200, 239, 3560, 3557, 3556, 143,
	214, 118, 36, 0, 3553, 159, 3550, 3547, 3546, 256,
	3545, 233, 245, 174, 289, 261, 241, 3544, 3538, 66,
	3537, 162, 23, 52, 144, 215, 19, 229, 3536, 402,
	8, 187, 3532, 205, 3530, 232, 16, 101, 151, 3529,
	3528, 33, 259, 3526, 3525, 3524, 126, 3522, 3521, 117,
	63, 3520, 3519, 3516, 3510, 46, 3509, 37, 12, 3508,
	97, 3507, 248, 3505, 218, 134, 184, 183, 161, 220,
	225, 82, 80, 3504, 1768, 152, 96, 26, 3488, 222,
	3484, 172, 122, 3482, 113, 3481, 238, 264, 206, 3480,
	186, 11, 47, 38, 28, 45, 9, 341, 204, 3479,
	3477, 21, 48, 3475, 50, 3472, 18, 3471, 3467, 68,
	5, 3466, 3464, 17, 20, 3463, 30, 221, 175, 123,
	90, 69, 3462, 3461, 55, 169, 3460, 131, 154, 157,
	3459, 76, 3458, 3457, 3449, 280, 3446, 253, 3445, 3444,
	3443, 3442, 3438, 3437, 3435, 3434, 3432, 3431, 102, 43,
	3430, 3427, 3426, 3425, 86, 142, 3424, 3423, 3421, 3420,
	32, 135, 3419, 13, 3417, 24, 22, 35, 3416, 95,
	3415, 3, 195, 3414, 3413, 4, 3412, 3411, 1, 2,
	3410, 3407, 109, 3406, 94, 42, 165, 107, 3405, 3403,
	85, 208, 148, 3402, 3399, 92, 235, 202, 3397, 74,
	224, 265, 3393, 210, 3391, 3390, 3389, 3386, 3385, 3382,
	1190, 3381, 3380, 223, 70, 110, 108, 3377, 3376, 3375,
	84, 158, 119, 116, 58, 81, 3374, 106, 190, 3360,
	199, 3359, 3358, 3357, 114, 3356, 3355, 3353, 3352, 193,
	3351, 3350, 191, 231, 3348, 3347, 304, 3346, 3336, 3335,
	3333, 3331, 3328, 3327, 3326, 3322, 3321, 237, 249, 3320,
}

//line mysql_sql.y:11339
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 562, 565, 565, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 116, 116, 145, 541, 541, 115, 547,
	547, 547, 548, 548, 112, 134, 133, 136, 136, 135,
	135, 132, 132, 128, 131, 131, 130, 130, 129, 124,
	126, 126, 125, 127, 127, 113, 101, 114, 491, 491,
	490, 490, 489, 489, 442, 442, 488, 488, 488, 487,
	487, 487, 486, 486, 485, 485, 484, 484, 482, 482,
	483, 481, 480, 480, 480, 478, 478, 478, 474, 474,
	476, 475, 475, 477, 469, 469, 472, 472, 470, 470,
	470, 470, 473, 468, 468, 468, 467, 467, 100, 100,
	100, 386, 386, 99, 99, 400, 400, 400, 400, 400,
	398, 398, 398, 398, 398, 398, 397, 397, 396, 396,
	401, 401, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 90, 90, 90, 90, 90, 95, 95, 95,
	553, 553, 552, 552, 554, 554, 554, 554, 555, 555,
	93, 93, 93, 94, 395, 395, 395, 91, 92, 92,
	385, 385, 390, 390, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 394, 394, 394,
	392, 392, 391, 391, 393, 393, 84, 84, 84, 87,
	86, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	85, 85, 85, 85, 85, 85, 80, 80, 80, 80,
	80, 79, 79, 81, 81, 382, 382, 381, 96, 96,
	97, 550, 550, 549, 551, 551, 551, 551, 98, 104,
	104, 104, 104, 104, 104, 104, 103, 103, 106, 106,
	105, 107, 89, 89, 89, 89, 89, 89, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 516, 516, 516, 518, 518, 317, 318, 566, 320,
	316, 316, 316, 512, 512, 513, 514, 515, 515, 515,
	102, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	78, 83, 83, 258, 258, 263, 263, 264, 264, 264,
	269, 269, 270, 270, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 245, 245, 245, 240,
	240, 240, 240, 241, 241, 242, 242, 243, 243, 243,
	243, 244, 244, 310, 310, 265, 265, 265, 267, 267,
	266, 262, 260, 260, 260, 260, 260, 260, 260, 261,
	261, 261, 261, 268, 268, 76, 82, 82, 82, 529,
	529, 77, 540, 540, 445, 445, 331, 331, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 450, 451, 327, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 53, 56, 52,
	52, 52, 371, 371, 51, 567, 567, 305, 305, 64,
	63, 55, 65, 66, 67, 68, 69, 70, 50, 62,
	62, 62, 62, 62, 62, 62, 62, 73, 463, 463,
	569, 569, 569, 71, 72, 444, 444, 444, 61, 60,
	59, 58, 57, 57, 49, 49, 48, 48, 54, 140,
	141, 141, 324, 324, 324, 326, 326, 322, 568, 568,
	414, 414, 325, 325, 47, 47, 47, 47, 74, 323,
	323, 304, 321, 321, 321, 12, 12, 10, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 25, 26, 28, 379, 379, 376, 27, 19,
	18, 18, 22, 21, 17, 17, 20, 23, 24, 24,
	9, 9, 9, 9, 14, 14, 15, 162, 162, 213,
	213, 524, 524, 520, 520, 521, 521, 521, 522, 522,
	523, 523, 108, 457, 457, 457, 457, 457, 457, 8,
	184, 184, 456, 456, 456, 456, 456, 456, 383, 383,
	383, 501, 501, 501, 502, 183, 183, 178, 178, 458,
	458, 348, 503, 503, 466, 466, 465, 465, 464, 464,
	181, 181, 182, 182, 165, 165, 119, 119, 471, 471,
	471, 471, 479, 479, 441, 441, 250, 250, 297, 297,
	298, 298, 155, 155, 156, 156, 156, 156, 156, 156,
	556, 556, 557, 558, 559, 559, 560, 560, 560, 561,
	561, 561, 561, 561, 509, 509, 511, 511, 510, 180,
	180, 176, 176, 177, 177, 177, 175, 175, 174, 173,
	173, 172, 170, 170, 170, 171, 171, 171, 188, 188,
	158, 158, 158, 157, 157, 157, 157, 157, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	159, 159, 517, 517, 517, 446, 446, 446, 453, 453,
	278, 278, 279, 279, 277, 277, 160, 160, 161, 161,
	161, 161, 276, 276, 275, 163, 163, 169, 168, 168,
	164, 164, 164, 164, 286, 286, 285, 285, 285, 285,
	111, 117, 117, 118, 187, 187, 284, 283, 283, 283,
	186, 186, 185, 185, 179, 179, 167, 167, 167, 167,
	282, 166, 280, 546, 546, 545, 545, 544, 542, 542,
	542, 543, 543, 543, 543, 493, 493, 493, 493, 493,
	311, 311, 311, 315, 315, 314, 314, 314, 314, 314,
	319, 7, 7, 7, 7, 7, 7, 7, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 38, 197, 198, 39, 199, 199, 200, 200, 201,
	201, 202, 203, 204, 204, 204, 204, 37, 189, 189,
	190, 190, 191, 191, 192, 193, 193, 193, 196, 194,
	195, 195, 564, 564, 563, 36, 36, 29, 148, 148,
	149, 149, 149, 151, 151, 246, 246, 246, 150, 150,
	152, 152, 152, 525, 528, 526, 526, 530, 530, 530,
	531, 531, 531, 531, 532, 532, 30, 137, 142, 535,
	535, 535, 534, 534, 536, 536, 537, 537, 301, 301,
	302, 302, 146, 147, 147, 144, 139, 154, 154, 154,
	154, 154, 138, 143, 527, 533, 533, 533, 380, 380,
	377, 378, 378, 375, 374, 374, 374, 539, 539, 538,
	538, 538, 312, 312, 31, 370, 370, 372, 373, 373,
	373, 364, 364, 364, 364, 35, 368, 368, 369, 369,
	369, 369, 369, 369, 369, 365, 365, 367, 367, 363,
	363, 363, 363, 363, 363, 363, 34, 153, 153, 362,
	362, 359, 359, 357, 357, 358, 358, 356, 356, 356,
	360, 360, 42, 75, 43, 44, 45, 41, 361, 361,
	33, 33, 33, 33, 33, 33, 33, 33, 121, 120,
	120, 120, 120, 120, 123, 123, 300, 300, 299, 299,
	122, 247, 247, 40, 225, 225, 433, 433, 428, 428,
	428, 428, 428, 448, 448, 448, 429, 429, 429, 430,
	430, 430, 432, 432, 432, 431, 431, 431, 431, 431,
	447, 447, 449, 449, 449, 402, 402, 403, 403, 403,
	406, 406, 420, 420, 421, 421, 419, 419, 426, 426,
	425, 425, 424, 424, 423, 423, 422, 422, 422, 422,
	417, 417, 416, 416, 404, 404, 404, 404, 404, 405,
	405, 405, 415, 415, 418, 418, 274, 274, 273, 273,
	233, 233, 234, 234, 272, 272, 231, 231, 232, 232,
	232, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 499, 499, 500, 236,
	236, 248, 248, 248, 248, 248, 248, 235, 235, 237,
	237, 214, 214, 212, 212, 212, 212, 205, 205, 206,
	206, 207, 207, 207, 211, 211, 210, 210, 210, 210,
	208, 208, 209, 209, 209, 209, 209, 209, 388, 388,
	496, 496, 497, 497, 492, 492, 492, 495, 495, 495,
	495, 495, 495, 495, 498, 498, 498, 494, 494, 215,
	295, 295, 295, 313, 313, 313, 313, 294, 294, 294,
	230, 230, 229, 229, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 387, 387, 328, 328,
	329, 329, 257, 256, 256, 256, 256, 256, 254, 255,
	253, 253, 253, 253, 253, 252, 252, 251, 251, 251,
	366, 366, 249, 249, 239, 239, 239, 238, 238, 238,
	427, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 292, 292,
	292, 293, 293, 293, 293, 293, 293, 293, 293, 338,
	338, 344, 344, 508, 508, 507, 216, 216, 216, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 226, 226,
	226, 411, 411, 411, 411, 412, 412, 412, 412, 413,
	413, 413, 409, 409, 410, 410, 349, 350, 350, 454,
	454, 455, 455, 407, 407, 408, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 462, 462, 462, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 519, 519, 519, 504, 504,
	504, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 506, 506, 506, 506, 506, 506, 506,
	506, 506, 506, 506, 506, 506, 506, 506, 506, 506,
	290, 290, 290, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 351, 351,
	352, 352, 459, 459, 459, 459, 459, 459, 460, 460,
	461, 461, 461, 461, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 336, 287, 287, 287, 353, 345, 345,
	346, 346, 347, 347, 339, 339, 339, 339, 339, 339,
	340, 340, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 341, 341, 343, 343, 355, 355,
	355, 354, 354, 354, 354, 354, 354, 354, 228, 228,
	228, 228, 333, 333, 333, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 218, 218, 218,
	218, 222, 222, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 223, 223, 223,
	223, 223, 221, 221, 221, 221, 221, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 109, 110, 110, 220, 296,
	296, 434, 434, 437, 437, 435, 435, 436, 438, 438,
	438, 439, 439, 439, 440, 440, 440, 443, 443, 303,
	303, 303, 309, 309, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 6, 1, 2, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 10, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 3, 4, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 10,
	7, 4, 4, 1, 3, 1, 6, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 8, 8, 0,
	4, 7, 0, 3, 0, 2, 0, 1, 1, 1,
	1, 4, 2, 2, 3, 3, 4, 5, 3, 4,
	4, 2, 2, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 6, 7, 4, 4, 7, 8, 3, 3,
	3, 4, 0, 2, 2, 0, 2, 2, 1, 1,
	1, 1, 0, 1, 4, 4, 5, 4, 3, 1,
	3, 1, 1, 3, 5, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 4, 1, 3, 1, 4, 6,
	6, 4, 4, 4, 4, 4, 3, 6, 3, 5,
	1, 1, 2, 2, 11, 8, 9, 1, 3, 2,
	4, 0, 2, 0, 1, 1, 1, 1, 0, 1,
	0, 1, 4, 2, 1, 5, 4, 4, 2, 5,
	1, 3, 2, 1, 5, 4, 4, 2, 0, 5,
	4, 0, 1, 3, 3, 1, 3, 1, 3, 1,
	3, 4, 0, 1, 0, 1, 1, 3, 1, 1,
	0, 4, 1, 3, 2, 1, 0, 8, 0, 4,
	7, 4, 0, 2, 0, 2, 0, 2, 0, 4,
	1, 3, 1, 1, 6, 4, 5, 7, 4, 5,
	0, 1, 3, 8, 0, 6, 0, 4, 6, 1,
	1, 1, 1, 1, 2, 3, 1, 3, 6, 0,
	3, 0, 1, 2, 4, 4, 0, 1, 3, 1,
	3, 3, 0, 1, 1, 0, 2, 2, 0, 2,
	3, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	7, 7, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 2, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 3, 1, 1, 1,
	4, 4, 4, 3, 2, 2, 2, 3, 2, 3,
	4, 1, 3, 4, 0, 2, 1, 1, 2, 2,
	0, 1, 2, 4, 1, 3, 1, 3, 2, 3,
	1, 4, 3, 0, 1, 1, 2, 5, 2, 2,
	2, 0, 2, 3, 3, 0, 1, 3, 1, 3,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 1, 7, 1, 3, 0, 1, 1,
	3, 1, 3, 0, 1, 1, 1, 14, 1, 3,
	0, 1, 1, 3, 1, 1, 2, 4, 1, 1,
	1, 1, 0, 1, 2, 9, 9, 7, 1, 2,
	3, 3, 3, 0, 4, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 4, 1, 1, 3, 4, 3,
	0, 1, 1, 1, 0, 2, 7, 8, 8, 0,
	3, 3, 0, 3, 0, 3, 0, 5, 1, 3,
	0, 3, 3, 0, 2, 9, 6, 0, 2, 2,
	3, 3, 4, 4, 1, 0, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 3, 2, 0, 1, 3,
	4, 3, 1, 1, 4, 1, 3, 1, 1, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 3,
	2, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 6, 0, 4, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 8, 2, 4, 4, 4, 9, 0, 2,
	11, 9, 11, 8, 6, 9, 7, 10, 2, 2,
	9, 4, 5, 3, 0, 4, 1, 3, 0, 3,
	6, 0, 2, 10, 0, 2, 0, 2, 0, 3,
	2, 4, 3, 0, 2, 1, 0, 2, 3, 0,
	2, 3, 0, 2, 1, 0, 3, 2, 4, 3,
	0, 1, 0, 1, 1, 0, 6, 0, 3, 5,
	0, 4, 0, 3, 1, 3, 4, 5, 0, 3,
	1, 3, 2, 3, 1, 2, 0, 4, 6, 5,
	0, 2, 0, 2, 4, 5, 4, 5, 1, 5,
	6, 5, 0, 3, 0, 1, 1, 3, 3, 3,
	0, 4, 1, 3, 3, 3, 0, 1, 1, 3,
	2, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 5, 4, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 5, 7, 0, 1, 1,
	3, 1, 1, 1, 1, 1, 7, 9, 7, 9,
	2, 1, 7, 9, 7, 9, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 3,
	1, 3, 5, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 2, 1, 2, 2, 1, 1, 2,
	2, 2, 3, 3, 2, 2, 1, 5, 6, 4,
	1, 1, 1, 5, 4, 1, 1, 2, 0, 1,
	1, 2, 5, 0, 1, 1, 2, 2, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 2, 2, 2,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 2,
	2, 2, 2, 1, 1, 2, 5, 6, 8, 6,
	6, 6, 1, 1, 1, 1, 1, 1, 4, 4,
	4, 7, 9, 7, 7, 7, 9, 7, 7, 0,
	2, 0, 1, 1, 2, 4, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 2, 2, 2, 0, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 5, 0, 1, 3, 0, 1, 0,
	2, 0, 2, 0, 1, 6, 8, 8, 6, 6,
	5, 5, 5, 6, 6, 6, 6, 5, 6, 6,
	6, 6, 6, 6, 6, 6, 1, 1, 1, 4,
	4, 6, 8, 6, 4, 5, 4, 4, 4, 3,
	4, 6, 6, 7, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 8, 4, 2, 3, 2, 4, 2, 2,
	4, 6, 2, 2, 4, 6, 4, 2, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 3, 0, 1,
	1, 3, 1, 3, 3, 3, 3, 3, 2, 1,
	1, 1, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 1, 3, 4, 4, 5, 4, 5, 3,
	4, 5, 6, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 4, 1, 2, 3, 5, 1, 1,
	3, 0, 1, 0, 3, 0, 3, 3, 0, 3,
	5, 0, 3, 5, 0, 1, 1, 0, 1, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -562, -565, -2, -5, 612, -1, -4, -110, -84,
	-7, -112, -113, -8, -108, -9, -10, -12, -88, -103,
	-105, -107, -106, -46, -11, -102, -79, -80, -90, -96,
	-99, -100, -101, -114, -109, -111, -155, -115, -116, 602,
	-85, -86, -87, -32, -31, -30, -29, -137, -142, -145,
	608, 446, 14, 495, -14, -15, -509, -16, 258, -316,
	-317, -318, -320, -566, -47, -48, -49, -57, -58, -59,
	-60, -61, -71, -72, -73, -50, -51, -52, -55, -53,
	-64, -63, -65, -66, -67, -68, -69, -70, -54, -140,
	-141, -74, -56, -75, -77, -76, -82, -78, -83, -139,
	-144, -13, 233, -81, 76, -91, -92, -93, -94, -95,
	-97, -98, 370, 376, 433, 601, 61, -156, -158, 618,
	619, 158, 159, 161, 162, -33, -34, -35, -36, -37,
	-38, -40, -39, -41, -42, -43, -44, -45, 229, 16,
	538, -17, -20, -18, -21, -19, -27, -28, -26, -23,
	-25, -138, -24, -143, -22, 253, 252, 38, 319, 320,
	321, 374, 251, 230, 15, 31, 42, 350, -157, 82,
	530, 531, 533, 231, -159, 13, 623, -6, -3, -2,
	-124, -128, -132, -135, -136, -133, -134, -4, -110, 116,
	243, 603, -313, 366, 604, 606, 605, 85, 93, -306,
	-308, 446, 258, 370, 376, 601, 619, 543, 544, 545,
	546, 547, 548, 549, 550, 552, 553, 554, 555, 556,
	557, 558, 568, 569, 559, 560, 561, 562, 563, 564,
	565, 566, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 498, 588, 589, 590,
	591, 526, 551, 587, 348, 349, 535, 270, 294, 401,
	300, 307, 158, 177, 171, 199, 191, 531, 166, 274,
	312, 275, 92, 161, 481, 106, 458, 430, 164, 289,
	291, 293, 527, 528, 360, 296, 525, 295, 297, 299,
	529, 276, 351, 187, 182, 288, 272, 180, 277, 40,
	278, 204, 279, 280, 540, 454, 347, 460, 304, 52,
	428, 181, 455, 292, 457, 208, 212, 472, 473, 175,
	176, 462, 475, 203, 206, 207, 250, 344, 345, 43,
	537, 262, 476, 210, 202, 198, 484, 308, 306, 201,
	174, 197, 273, 65, 214, 213, 215, 424, 425, 426,
	427, 281, 282, 364, 471, 194, 183, 352, 167, 23,
	479, 257, 459, 377, 283, 301, 309, 209, 211, 264,
	269, 539, 530, 432, 268, 305, 477, 179, 261, 290,
	256, 480, 168, 533, 379, 284, 162, 298, 474, 483,
	64, 392, 173, 165, 247, 159, 266, 271, 285, 286,
	287, 524, 311, 310, 302, 532, 195, 263, 200, 185,
	172, 196, 160, 265, 482, 393, 599, 350, 411, 193,
	190, 267, 240, 478, 461, 163, 415, 394, 188, 313,
	595, 596, 597, 365, 343, 314, 315, 186, 254, 452,
	453, 318, 421, 334, 395, 431, 402, 396, 221, 222,
	322, 464, 466, 205, 598, 323, 324, 325, 456, 326,
	327, 328, 329, 369, 56, 58, 94, 96, 620, 621,
	63, 29, 355, 358, 390, 397, 336, 600, 536, 333,
	337, 338, 359, 25, 413, 381, 417, 416, 48, 49,
	50, 53, 54, 55, 57, 59, 60, 51, 523, 374,
	387, 485, 45, 47, 384, 27, 361, 412, 434, 332,
	414, 445, 46, 443, 444, 465, 26, 363, 362, 62,
	44, 420, 422, 423, 316, 330, 372, 609, 486, 367,
	383, 386, 368, 335, 357, 388, 67, 66, 380, 610,
	375, 373, 331, 541, 542, 339, 567, 353, 429, 520,
	519, 518, 517, 516, 515, 514, 513, 319, 320, 321,
	398, 399, 400, 410, 403, 404, 405, 406, 407, 408,
	409, 448, 449, 611, 467, 469, 470, 468, 235, 622,
	354, 238, 613, 614, 95, 615, 617, 616, 28, -393,
	-391, -313, 531, 601, 376, 530, 533, 370, 350, 619,
	374, 258, 319, 320, 321, 446, -199, -313, 622, -165,
	39, -212, -313, -165, -81, -15, -14, -157, -158, -212,
	237, -321, 24, 428, -89, 429, 233, 82, 77, -313,
	-9, -101, -8, -108, -79, -155, 433, -319, -313, 319,
	319, -319, 237, -313, 268, 409, -445, 243, -397, -370,
	269, -396, -372, -399, -373, 32, 229, 231, 230, 265,
	16, 374, 239, 14, 13, 375, 251, 25, 26, 28,
	15, 376, 378, 29, 379, 382, 383, 384, 42, 387,
	388, 258, 85, 93, 88, 276, -198, -313, -347, -339,
	113, -342, -334, -335, -337, -488, -482, -332, 82, 140,
	141, 148, 114, -336, -427, 36, 116, 547, 551, 587,
	496, -288, -289, -290, -291, -292, -293, -313, -483, -481,
	88, 97, 99, 103, 104, 102, 100, 152, 184, 101,
	89, 153, -158, 85, -504, 557, -307, 580, 588, 589,
	590, 591, 579, 61, -452, -461, 236, -459, 151, 189,
	254, 185, 14, 146, 421, 186, 554, 576, 498, 558,
	568, 583, 549, 550, 552, 544, 545, 546, 548, 559,
	561, 575, -462, 571, 581, 582, 567, 584, 585, 586,
	617, 87, 86, 574, 573, 560, 555, 556, 562, 543,
	553, 563, 564, 572, 577, 578, 358, 106, 359, 360,
	488, 351, 361, 243, 428, 70, 362, 363, 364, 365,
	366, 495, 367, 71, 368, 357, 258, 411, 369, 188,
	205, 500, 499, 501, 492, 489, 487, 490, 491, 493,
	494, 565, 566, 570, -117, -118, 593, -556, -281, -557,
	6, 7, 8, 9, -558, 153, -547, 430, 539, 88,
	163, 160, -384, 163, 112, 168, 167, -384, 165, 322,
	264, -361, -148, 348, 411, 326, 94, 268, -364, -362,
	527, -447, 316, 312, 288, 238, 109, -149, 248, 247,
	107, 488, 236, 385, 307, 56, 58, -520, -521, 226,
	227, 228, -511, 521, -510, -313, 360, 96, 27, 237,
	371, 264, 466, 464, 465, 467, 468, 469, 470, -62,
	-463, -444, 461, 460, -325, 453, 459, 451, 463, 454,
	349, 328, 327, 229, 613, 528, 522, -303, 395, 431,
	485, 486, 372, 432, 472, 474, 455, 106, 192, 189,
	238, 240, 237, 348, 488, 411, 94, 326, -520, 160,
	472, 474, 268, 409, 41, -390, 421, -389, -391, 473,
	484, 86, 87, 471, -303, 106, 452, 452, -556, -281,
	-156, -158, -111, -509, 529, 529, 529, 238, 348, 411,
	268, 239, 237, 524, 527, 240, 488, 236, 319, 371,
	264, 326, 94, -446, -517, 32, -453, 223, 224, 225,
	33, 34, -1, 120, 623, -339, -339, -6, 626, -6,
	-339, -313, -313, 155, -218, -222, -219, -221, -220, -224,
	-223, 189, 190, 151, 193, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 206, 207, 204, 31, 205, 254,
	185, 186, 187, 188, 208, 171, 191, 536, 216, 172,
	217, 173, 218, 174, 219, 175, 176, 220, 177, 180,
	181, 182, 183, 179, 154, 82, 154, 88, -181, 260,
	-212, 154, 627, -181, -556, -174, -175, 11, -212, -294,
	-313, 430, 123, -89, 77, -89, 429, 77, -512, -513,
	-514, -516, 233, 429, 428, -106, 154, 276, 17, -319,
	-319, 80, -212, -372, 268, -397, -370, 36, 79, 155,
	241, 155, 79, 82, 372, 348, 411, 373, 488, 237,
	385, 240, 268, 386, 348, 411, 237, 240, 488, 268,
	348, 237, 240, 411, 268, 386, 451, 452, 240, 27,
	377, 380, 381, 452, -467, 484, 155, 112, 109, 110,
	111, -339, 130, -354, 123, 124, 125, 126, 127, 128,
	129, 137, 136, 147, 140, 141, 142, 143, 144, 145,
	146, 138, 139, 133, 113, 131, 135, 132, 115, -158,
	-339, -347, 61, -337, -337, -337, -337, -427, -344, -339,
	82, 82, 82, 82, 154, 100, 88, -339, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	-460, 82, 82, -351, -352, 82, 82, -332, -294, 82,
	88, 88, 82, 82, 82, 88, -352, -352, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, -175, 155, -174, 82, -174, -175, -159, -158, 32,
	33, 32, 33, 32, 33, 32, 33, -559, 610, 82,
	97, 620, 221, 477, 538, 166, 167, 168, -359, 243,
	-197, -313, -199, 371, 240, 524, 240, -149, -359, -359,
	-359, -359, -359, 239, -359, 24, 237, 237, 237, 237,
	-359, 495, 123, 123, 59, -522, 170, 155, -511, -180,
	82, -324, 131, 135, -324, 24, 266, 266, 266, -324,
	306, -567, -568, 17, 133, -322, -568, -322, -322, -324,
	-569, 239, 462, 43, 267, 266, -176, -177, 22, -176,
	456, 452, -414, 457, 458, -326, -568, -325, -324, -324,
	-325, -324, -324, -324, 32, 237, 240, 488, 326, 614,
	-567, -567, 31, 31, -445, -445, -212, -445, 522, -304,
	-313, -445, -445, -445, -523, 242, -553, -552, 475, -555,
	477, 160, -391, 160, -391, -372, 268, 268, 155, 123,
	24, -392, 123, 134, -391, -391, -392, -392, -235, 41,
	-312, 151, -313, 88, -235, 41, -550, -549, -212, -175,
	-159, -158, 83, 83, 83, 532, 532, 532, -445, -445,
	-445, -445, -445, -447, -445, -445, -445, -445, -445, -319,
	-189, -313, -199, 243, -445, -445, -160, -161, 142, -339,
	-313, -160, -3, -126, -125, 117, 118, 120, 604, 366,
	603, 607, 601, -391, 41, -440, 393, 392, -434, -436,
	82, -435, 82, -435, -435, -435, -435, -435, 82, 82,
	-437, 82, -437, -437, -434, -438, 82, -438, -439, 82,
	-439, -438, -313, -345, -347, -313, 39, -456, 61, -155,
	82, 31, 82, -313, 88, -457, 61, -155, 82, 31,
	-175, -119, 39, -177, 21, 154, 97, 88, -106, -89,
	77, -106, 83, 155, -515, 103, 104, -518, 203, 195,
	-313, -104, 88, -7, -8, -9, -10, -46, -79, -155,
	-484, -482, 82, 32, 420, 79, 17, -398, 237, 488,
	371, 264, 240, 348, -396, -379, -376, -374, -312, -372,
	-375, -374, -401, -294, 452, -120, 435, 434, 318, -339,
	-339, -339, -339, -339, 102, 113, 343, 103, 104, -334,
	-355, 32, 314, 315, -335, -335, -335, -335, -335, -335,
	-335, -335, -335, -335, -335, -335, -343, -353, -427, 82,
	133, 131, 135, 132, 115, -337, -337, -335, -335, 83,
	155, -508, -507, 117, -339, -339, -339, -339, -313, -505,
	-506, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 362, 357, 363, 361, 351, 369, 364, 365,
	188, 519, 520, 513, 514, 515, 516, 517, 518, -345,
	-345, -339, -505, -345, -287, 33, 32, -347, -347, -347,
	83, -339, -519, 341, 340, 342, -178, -313, -345, 83,
	83, 83, 97, -347, -347, -345, -335, -345, -506, -287,
	-287, -287, -287, 142, -347, -347, -287, -287, -287, -287,
	142, -287, -287, -287, -287, -287, -287, -287, -287, 83,
	83, 83, 142, -347, -176, -118, -465, -464, -339, 41,
	-119, -177, -560, 611, 82, -294, -548, 88, 88, 624,
	478, 479, 164, 167, 166, -313, 113, 35, 82, -189,
	-359, -359, -359, -525, -313, -380, -377, -374, -313, -313,
	-370, -313, -313, -212, -359, -359, -359, -359, -212, -246,
	53, 54, 55, -374, -150, 56, 57, -523, -510, 35,
	-179, -313, -277, 18, -337, -337, -374, 268, -567, -324,
	-324, -305, -304, -326, -321, -326, -326, -277, -322, -324,
	-324, -339, -326, -322, -277, -313, 452, -277, -277, -414,
	-324, -323, -313, -323, -359, -304, -305, -305, -212, -212,
	-258, -263, -259, -264, 260, 234, 355, 356, 232, 230,
	11, 231, -271, 307, -360, 496, -241, -242, 77, 42,
	-244, 258, 397, 390, 270, 274, 92, 275, 430, 276,
	239, 278, 279, 280, 295, 297, 250, 281, 282, 283,
	421, 284, 159, 296, 285, 286, 287, 373, -236, 6,
	329, 41, 51, 52, 444, 443, 541, 538, 271, -525,
	-525, 31, 31, -380, -313, -313, -168, -163, -167, -164,
	-169, -280, -282, -166, 82, -212, -158, -313, 155, 476,
	478, 479, -553, -392, -553, -392, 32, 420, -395, 420,
	32, -370, -389, 472, 474, -385, 88, 421, -375, -394,
	79, 151, -464, -392, -392, -394, -394, 150, 155, -551,
	477, 478, 226, -176, 97, 97, 97, -214, -212, -525,
	-379, -370, -313, -445, -214, -214, -214, -313, -313, 82,
	154, 36, -313, -313, -276, 155, -275, 17, -314, -313,
	35, 88, 154, -276, -127, -125, 119, -339, -6, 603,
	-339, -6, -6, -339, -6, -339, -443, 394, 97, 97,
	-296, 88, -296, 97, 97, 97, 83, 88, -383, 79,
	-458, -348, -503, 593, -183, 83, -178, -501, -502, -178,
	-182, -313, 627, 627, -458, -183, 83, -501, -176, 594,
	-119, -173, -172, -339, -313, 24, -106, -89, -513, 154,
	155, -179, -398, -378, -375, -400, 142, -313, -386, 155,
	538, 627, 86, 241, -539, -538, 412, 83, 155, -468,
	242, 495, 88, 624, 428, 221, 222, 102, 343, 103,
	104, -427, -347, -343, -337, -337, -335, -335, -341, 255,
	-341, 112, -339, -338, -507, 119, -339, 35, 155, 35,
	155, 80, 154, 83, 83, 17, 17, 83, -339, 83,
	83, 83, 83, 17, 17, -339, 83, 154, 83, 83,
	83, 83, 80, 83, 155, 83, 155, -347, -347, -339,
	-347, 83, 83, 83, -339, -339, -339, -347, 83, -339,
	-339, -339, -339, -339, -339, -339, -339, -408, 447, -408,
	-408, 155, 155, 155, 83, -119, 82, 97, 155, 621,
	-300, -299, 88, 165, 168, 168, 167, 24, 36, -198,
	-200, -201, -202, -203, -204, 133, 156, 157, 82, -212,
	-212, -212, -528, 398, -540, 155, 41, -538, 488, -146,
	318, -363, 80, -153, 17, 538, -212, -212, -212, -212,
	-225, 35, 17, -162, -213, -313, 82, 83, 155, -339,
	-371, 80, -313, -305, -277, -277, -326, -277, -277, 155,
	23, -324, -326, -326, -322, 154, -304, -433, 35, -180,
	155, 21, 260, -211, -310, -208, -210, 245, -329, -209,
	248, -497, 246, 244, 107, 249, 303, 108, 239, -310,
	-310, 245, -245, 241, 35, -310, -261, 239, 346, 303,
	246, 21, 260, -260, 239, 108, -313, 245, 249, 246,
	244, -309, 123, -303, 150, 241, 43, 373, -309, 542,
	260, -309, -309, -309, -309, -309, -309, -309, 277, 277,
	-309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
	-309, 160, -309, -309, -309, -309, -309, -309, 82, 272,
	273, -529, 398, 31, 354, 354, -540, 31, -154, 348,
	31, -283, -284, -285, -286, 68, 72, 74, 69, 70,
	71, 75, 31, 155, -311, -315, 35, -313, 88, -311,
	-158, -163, -168, -311, 82, -552, -554, 480, 477, 483,
	-394, -394, 241, 82, 123, -394, -394, 41, -312, -549,
	484, 478, -119, 155, 79, -214, -190, -191, -192, -193,
	-218, -294, 190, 193, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 206, 207, 204, 205, 254, 185, 186,
	187, 188, 208, 171, 191, 536, 172, 173, 174, 175,
	176, 177, 180, 181, 182, 183, 179, -313, -199, -277,
	-161, -163, -313, 88, -313, 142, -277, 120, -6, 118,
	-131, -130, -129, 121, 601, 607, 120, 120, 120, 83,
	83, 83, 155, 83, 83, 83, 155, 83, 155, -471,
	457, 40, 155, 82, 83, 155, 61, 155, 123, 83,
	155, 88, 88, 83, 61, -119, 88, 155, -170, 37,
	38, 154, 430, -313, -482, 83, -400, 155, 241, 154,
	154, -376, 376, -312, -378, 21, 538, -294, 39, -300,
	123, 624, -313, 83, -341, -341, 112, -337, -334, 83,
	120, -339, 118, -216, -218, 392, 393, -339, -216, -217,
	-223, 151, 189, 254, 188, 187, 185, 392, 393, -235,
	-313, -339, -339, 83, -339, -339, 17, -313, -235, -335,
	-339, -175, -175, 83, 83, -407, -408, -407, -407, 83,
	83, 83, 83, -407, 83, 83, 83, 83, 83, 83,
	83, 83, 82, 97, 99, 97, 99, -464, -561, 63,
	609, 62, 420, 102, 308, 155, 97, 88, 625, 155,
	123, 168, -541, 312, 348, 384, 83, 155, -294, -190,
	-180, 82, -180, -531, 459, 400, 410, -309, -331, -330,
	350, 42, -450, 421, 406, 407, -377, 268, -313, -537,
	95, 123, 79, 333, 337, 338, 334, 335, 336, -357,
	-358, -356, -360, -525, 82, 82, -155, 35, 82, 82,
	35, -428, 323, -218, -212, -162, -313, 17, 155, -524,
	154, -1, -313, -370, -324, -277, -339, -339, -277, -324,
	-324, -326, -313, -428, -218, 35, -259, 234, 231, -404,
	305, 306, -405, -418, 308, -420, 82, -215, -294, -209,
	-496, -497, -359, -313, 108, -496, 108, 82, -215, -294,
	-294, -262, -323, -294, -313, -313, -313, -313, -267, -266,
	-294, -269, 32, -270, -313, -313, -313, -313, 108, -313,
	108, -240, 41, 48, 49, 50, -309, -309, 192, -243,
	41, 420, 422, 423, -269, 97, 97, 97, 97, 88,
	88, 88, -309, -309, 97, 88, -315, 88, -498, 167,
	45, 46, 97, 97, 97, 97, 41, 88, -248, 41,
	288, 292, 289, 290, 291, 88, 97, 41, 97, 41,
	97, 41, -313, 82, -499, -500, 88, -531, -309, 354,
	-391, 123, -331, -536, 318, -147, 92, 32, -184, 234,
	231, -525, -382, -381, -294, -167, -167, -167, -167, 68,
	68, 68, 73, 68, 73, 68, -285, -382, -169, -180,
	-315, 83, -546, -545, -544, -542, 76, 242, 77, -345,
	477, 481, 482, -378, -327, 88, -385, -188, 24, -212,
	-212, -449, 298, 299, 83, 155, -218, -279, 19, 154,
	-279, 116, -6, -127, -129, -339, -6, -339, 603, 366,
	604, 88, 97, 97, -479, 441, 436, 438, 108, -348,
	-466, -465, 61, -155, -178, -458, -502, -464, -313, 627,
	61, -155, -458, -188, -471, -172, -171, 44, -313, 97,
	17, -375, -370, 142, 142, -313, 377, -386, 88, 399,
	88, 237, 625, 88, -300, -334, -339, 83, -226, 176,
	175, -226, 35, 83, 83, -435, -435, -434, -437, -434,
	-226, -226, 83, 83, 24, 83, 83, 83, -339, 83,
	83, 155, -454, 497, -455, 569, -407, -407, -407, -407,
	-407, -407, -407, -407, -407, -407, -407, -407, -407, -407,
	-350, -349, 260, 442, 616, 616, 442, 616, 616, 83,
	155, -505, 155, -299, 88, -313, 88, 88, -202, -218,
	83, 35, -205, -206, -207, -215, -208, -210, 35, -532,
	92, -526, 88, -313, -533, 92, 401, 153, 352, 41,
	402, 403, 418, 347, 97, 97, 408, -527, -313, -154,
	-535, 52, 123, 88, -212, -356, -303, 150, 279, 326,
	-274, -273, -313, 88, -205, -155, -205, -205, -155, -429,
	325, 21, 97, 141, -181, 80, 154, -163, -213, -313,
	142, 83, -277, -277, -277, -324, -429, -155, -416, 309,
	82, -414, 82, -414, 108, 334, -421, -419, 260, -265,
	45, 47, -218, -494, -313, -492, -494, -313, -492, -492,
	-359, -339, -265, -215, 241, 31, 231, -268, 331, 332,
	337, -387, 304, 113, -387, 155, -170, 155, -313, -235,
	-235, 31, 88, 88, -214, 83, 155, 123, -532, -526,
	123, -392, 88, -533, -537, 123, 88, 155, -184, -184,
	-277, 155, 123, -186, -185, 79, 80, -187, 79, -185,
	68, 68, -277, -544, -543, 24, -497, -497, -497, 83,
	83, 15, -192, 41, -278, 20, 21, 142, -278, 120,
	118, 120, 120, -313, 83, 83, -441, 595, -475, -477,
	436, 21, 21, 15, 242, 83, -458, 88, -458, -479,
	45, 46, -370, -386, 421, -212, 155, 625, -216, -339,
	83, -339, 83, 88, 83, 88, -175, 21, 83, 155,
	83, 83, 83, 155, 83, 83, -339, 83, -505, 235,
	-155, 83, 155, -155, 88, -530, 412, 88, 88, 97,
	41, 97, 153, 404, -451, -147, -534, 92, 123, 624,
	82, -309, -309, -309, -313, 83, 155, -309, -309, 83,
	83, 83, -233, 538, -430, 259, 97, 141, 97, 141,
	97, -311, -163, -313, -277, -524, 154, -277, -430, -406,
	310, 97, -335, 82, -335, 82, -415, 307, 82, 83,
	155, -313, -294, -230, -229, -227, 102, 113, 41, 390,
	-228, 92, 150, 293, 296, 295, 271, 294, -257, -328,
	79, 396, 331, 332, -360, 595, 526, 244, 107, 108,
	378, -329, 82, 82, 80, 313, 82, 82, -494, 83,
	-265, -294, 41, -268, 41, 344, 304, -266, -313, 150,
	-235, 83, -500, 88, -530, 88, -394, -535, 88, -525,
	-175, -381, -464, -339, 82, -339, 82, 68, 11, 19,
	-332, -339, -347, 243, -6, 604, 366, -250, 596, 88,
	21, 88, -473, 88, -382, -441, -122, -247, -303, 276,
	83, 83, 83, -407, -407, -410, -409, -413, 442, 305,
	450, -347, 88, 88, 83, 83, -194, -218, -151, 538,
	-233, -207, -151, 21, 538, 351, 41, 97, 41, 405,
	123, 103, 104, -301, -302, 88, -365, -367, -294, 82,
	-235, -237, -312, 151, 88, -273, -332, -332, -231, -155,
	35, -232, -271, -360, -121, -120, -231, 82, -431, 159,
	97, 141, 97, 97, -277, -277, -431, -420, 21, 83,
	-401, 83, -401, 82, 123, -335, -419, -422, 61, -227,
	102, -335, 88, -237, -238, 41, 292, 288, 123, 123,
	-239, 41, 272, 273, -249, 82, 303, 15, 192, 82,
	108, 108, -212, -365, -365, -495, 333, 334, 335, 339,
	337, 338, 336, -495, -365, -365, 82, -388, -387, -335,
	-309, -309, 150, -534, -176, -179, -493, -313, 244, 21,
	21, -313, -313, -297, 597, 97, 88, 438, -250, -442,
	598, -469, -414, -235, 123, 83, -412, 115, 404, 408,
	-333, -336, 97, 99, 184, 153, 83, 83, 537, -152,
	60, 484, 88, 399, 88, 351, 88, 625, 155, 123,
	83, 155, -434, -339, -402, 260, -155, 155, -271, -303,
	-122, -402, -234, -272, -313, 88, -448, 167, 324, 538,
	97, 141, 97, -175, -432, 167, 324, -405, 83, 83,
	83, -401, 97, 83, -426, -423, 82, -271, 262, 133,
	88, 88, 97, 82, -459, 31, 88, -366, 82, 83,
	83, 83, 83, -365, 97, -235, -309, 83, 83, 155,
	82, 21, -297, 88, -478, 441, -472, -470, 436, 437,
	438, 439, 88, -411, -412, 408, -333, -336, 593, 448,
	448, 448, -196, -313, 303, 421, -302, 88, -368, -367,
	-170, 83, -403, 312, 21, -271, -309, -403, 83, 155,
	-309, -309, 324, 97, 141, 97, -176, 324, -417, 311,
	83, -426, -271, -425, -424, 310, 263, 82, 83, -339,
	-351, -309, 83, -252, -251, 534, -365, -368, 80, -368,
	80, -368, 80, -368, 80, 83, -235, -313, 244, -298,
	-313, -473, -480, 242, -476, -477, 440, -470, 21, 438,
	21, 21, -123, 155, 112, 449, 449, 449, -195, 35,
	443, 377, -369, 250, 344, 345, 92, 538, 331, 332,
	-170, 21, -404, -235, -272, -332, -332, 97, 97, 83,
	155, -313, 259, 82, -346, -340, -339, 259, 83, -313,
	-256, -254, -255, 79, 455, 301, 302, 83, -495, -495,
	-495, -495, -257, 83, 155, -487, 82, 97, -475, -474,
	-476, 21, -473, 21, -473, -473, 445, -411, 88, -309,
	-309, 88, 88, 330, -294, 82, -416, -424, -423, -346,
	83, 155, -387, -255, 79, -254, 79, 16, 15, -368,
	-368, -368, -368, -313, -491, 31, 83, -486, -485, -295,
	-481, -313, 441, 442, 88, -473, 123, -564, -563, 615,
	97, 97, -313, -401, -406, 83, -340, -253, 298, 299,
	31, 167, -253, -490, -489, -488, 83, 155, 154, 88,
	88, 83, -420, 102, 41, 300, 155, 123, -485, -313,
	-489, 41, -339, 154, -313,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	266, 267, 268, 861, 862, 863, 864, 865, 866, 867,
	0, 0, 0, 0, 620, 621, 0, 587, 0, 0,
	0, 0, 0, 0, 477, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 361, 362, 363, 364, 365, 366,
	367, 368, 0, 291, 287, 212, 213, 214, 215, 216,
	298, 299, 454, 0, 0, 0, 0, 702, -2, 59,
	0, 280, 0, 271, 271, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, -2, 633,
	0, 588, 589, 590, 591, 592, 593, 594, 595, 596,
	597, 598, 599, 600, 601, 350, 351, 352, 346, 347,
	349, 348, -2, 0, 633, 0, 0, 0, 710, 0,
	0, 0, 0, 0, 753, 775, 23, 0, 7, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	0, 19, 0, 19, 0, 0, 0, 1263, 1264, 1265,
	1266, 2036, 2006, -2, 1780, 1757, 1931, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097,
	2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107,
	2108, 2109, 2110, 2111, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
	1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
	1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
	1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, -2,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, -2, -2, -2,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 0,
	264, 262, 1727, 1757, 1780, 1834, 1845, 1846, 1880, 1931,
	1963, 2006, 2022, 2023, 2024, 2036, 0, 885, 0, 680,
	0, 685, 1213, 680, 292, 622, 623, 710, 736, 585,
	0, 328, 0, 1771, 332, 2013, 0, 0, 0, 582,
	322, 323, 324, 325, 326, 327, 0, 0, 860, 0,
	0, 318, 0, 286, 1836, 2035, 0, 0, 0, 0,
	0, 156, 995, 158, 997, 162, 169, 0, 0, 174,
	175, 178, 179, 180, 181, 182, 0, 186, 0, 188,
	191, 0, 193, 194, 0, 197, 198, 199, 0, 209,
	210, 211, 998, 999, 1000, -2, 87, 883, 1685, 1572,
	0, 1579, 1592, 1603, 1343, 1344, 1345, 1346, 0, 0,
	0, 0, 0, 1353, 1354, 0, 1381, 2069, 2110, 2111,
	0, 1362, 1363, 1364, 1365, 1366, 1367, 96, 108, 109,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 0, 1633, 1634,
	1635, 1543, 1330, 1263, 0, 2078, 0, 2100, 2105, 2106,
	2107, 2108, 2099, 0, 0, 1528, 0, 1518, 0, 0,
	-2, -2, 0, 0, 1905, -2, 2075, 2096, 2104, 2079,
	2080, 2103, 2071, 2072, 2073, 2066, 2067, 2068, 2070, 2082,
	2084, 2095, 0, 2091, 2101, 2102, 2011, 0, 0, 0,
	2052, 110, 111, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1539, -2, -2, 1542, -2, 1545, -2, -2, -2, -2,
	1550, 1551, -2, 1553, -2, -2, -2, -2, -2, -2,
	-2, 1530, 1531, 1532, 1533, 1522, 1523, 1524, 1525, 1526,
	1527, -2, -2, -2, 736, 811, 0, 736, 0, 711,
	758, 761, 764, 767, 714, 0, 0, 60, 61, 0,
	281, 282, 270, 272, 0, 276, 0, 269, 1031, 0,
	0, 0, 0, 1031, 1031, 1031, 1031, 1031, 0, 1031,
	0, 0, 0, 0, 0, 1031, 0, 918, 1002, 1003,
	1004, 1029, 1030, 1101, 0, 0, 0, 638, 634, 635,
	636, 637, 724, 0, 726, 729, 562, 562, 509, 0,
	0, 0, 562, 0, 523, 515, 0, 0, 0, 562,
	0, 0, 731, 731, 0, 565, 572, 562, 562, -2,
	562, 562, 562, 0, 0, 1043, 529, 530, 531, 515,
	515, 534, 535, 536, 546, 547, 573, 1709, 0, 0,
	454, 454, 0, 454, 0, 454, 454, 454, 640, 1875,
	1778, 1851, 1836, 2035, 0, 237, 1905, 242, 0, 1779,
	1798, 0, 0, 1816, 0, -2, 0, 308, 736, 0,
	0, 710, 0, 0, 0, 0, 0, 454, 454, 454,
	454, 454, 1100, 454, 454, 454, 454, 454, 0, 0,
	0, 454, 454, 0, 0, 776, 777, 772, 773, 774,
	778, 779, 5, 6, 19, 0, 0, 0, 0, 0,
	0, 66, 65, 0, 1686, 1704, 1638, 1639, 1640, 1691,
	1642, 1695, 1695, 1695, 1695, 1671, 1672, 1673, 1674, 1675,
	1676, 1677, 1678, 1679, 1695, 1695, 0, 0, 1684, 1662,
	1693, 1693, 1693, 1691, 1688, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1698,
	1698, 1701, 1701, 1698, 0, 1568, 0, 0, 0, 0,
	684, 0, 0, 0, 736, -2, 0, 0, 586, 329,
	1267, 0, 0, 333, 0, 334, 0, 0, 0, 353,
	0, 356, 341, 342, 343, 337, 0, 136, 0, 320,
	321, 0, 0, 288, 0, 0, 0, 455, 0, 0,
	0, 0, 0, 0, 166, 163, 170, 173, 183, 190,
	0, 202, 204, 207, 164, 171, 176, 177, 184, 205,
	165, 167, 168, 172, 206, 208, 185, 189, 203, 187,
	192, 195, 196, 201, 0, 137, 0, 0, 0, 0,
	0, 1578, 0, 0, 1611, 1612, 1613, 1614, 1615, 1616,
	1617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	1572, 0, 0, 1349, 1350, 1351, 1352, 1355, 0, 1382,
	0, 0, 0, 0, 0, 1632, 1636, 0, 1568, 1568,
	0, 1568, 1564, 0, 0, 0, 0, 0, 0, 1568,
	1504, 0, 0, 1506, 1519, 0, 0, 1508, 1509, 0,
	1512, 1513, 1568, 0, 1568, 1517, 1500, 1501, 0, 1564,
	1564, 1564, 1564, 0, 0, 1564, 1564, 1564, 1564, 1564,
	1564, 1564, 1564, 1564, 1564, 1564, 1564, 0, 0, 0,
	0, 731, 0, 737, 0, -2, 0, 755, 757, 759,
	760, 762, 763, 765, 766, 768, 769, 716, 0, 0,
	62, 0, 0, 0, 0, 274, 0, 279, 0, 0,
	0, 882, 0, 0, 1031, 1031, 1031, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 1031, 1031, 1031, 1031,
	0, 1049, 0, 0, 0, 640, 639, 0, 725, 0,
	0, 784, 0, 0, 508, 0, 515, 562, 562, 521,
	522, 517, 516, 568, 569, 565, 0, 565, 565, 784,
	0, 540, 541, 542, 562, 562, 548, 732, 0, 549,
	550, 565, 0, 570, 571, 784, 0, 0, 784, 784,
	0, 558, 559, 560, 562, 0, 0, 1031, 0, 578,
	517, 517, 1710, 1711, 0, 0, 1040, 0, 0, 0,
	581, 0, 0, 0, 0, 641, 217, 220, 0, 223,
	0, 1875, 0, 1875, 0, 230, 0, 0, 0, 0,
	0, 0, 260, 261, 0, 0, 0, 0, 251, 254,
	1207, 1208, 992, 993, 255, 256, 300, 301, 0, 731,
	754, 756, 750, 751, 752, 0, 0, 0, 0, 0,
	0, 0, 0, 454, 0, 0, 0, 0, 0, 616,
	0, 898, 618, 0, 0, 0, 792, 786, 788, 855,
	96, 792, 8, 83, 80, 0, 19, 0, 0, 19,
	19, 0, 19, 265, 0, 1707, 1705, 1706, 1641, 1692,
	0, 1667, 0, 1668, 1669, 1670, 1680, 1681, 0, 0,
	1663, 0, 1664, 1665, 1666, 1657, 0, 1658, 1659, 0,
	1660, 1661, 263, 0, 1569, 886, 0, 658, 672, 653,
	0, 661, 0, 1214, 0, 642, 672, 644, 0, 661,
	731, 708, 0, 686, 0, 0, 330, 0, 338, 335,
	0, 339, 0, 0, 355, 357, 358, 359, 344, 345,
	583, 316, 317, 309, 310, 311, 312, 313, 314, 315,
	319, 106, 0, 289, 290, 0, 0, 0, 150, 151,
	152, 153, 154, 155, 157, 141, 605, 607, 984, 996,
	0, 987, 0, 160, 200, 133, 0, 0, 0, 1573,
	1574, 1575, 1576, 1577, 1582, 0, 1584, 1586, 1588, 1590,
	0, 1608, -2, -2, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1593, 1606, 1607, 0,
	0, 0, 0, 0, 0, 1604, 1604, 1599, 0, 1347,
	0, 1379, 1383, 0, 0, 0, 0, 0, 97, 1563,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 0,
	0, 1572, 0, 0, 0, 1565, 1566, 0, 0, 0,
	1459, 0, 0, 1465, 1466, 1467, 0, 667, 0, 1529,
	1505, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 812, 0, 676, 678, 679,
	705, 686, 712, 0, 0, 0, 58, 63, 0, 1068,
	283, 284, 0, 0, 278, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 933, 452, 978, 0, 0, 0,
	994, 1019, 1027, 0, 0, 0, 0, 0, 1074, 920,
	925, 926, 927, 921, 922, 928, 929, 0, 727, 0,
	0, 824, 507, 0, 563, 564, 512, 1836, 517, 784,
	784, 524, 518, 525, 567, 526, 527, 528, 565, 784,
	784, 733, 562, 565, 551, 566, 565, 554, 555, 0,
	561, 574, 579, 575, 0, 577, 532, 533, 1076, 729,
	371, 372, 373, 375, 0, 423, 423, 423, 406, 423,
	0, 0, 394, 1712, 0, 0, 0, 0, 403, 1712,
	0, 0, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 0,
	0, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712,
	1712, 1712, 0, 1712, 1712, 1712, 1712, 1712, 1193, 1712,
	0, 1041, 413, 414, 415, 416, 421, 422, 0, 449,
	0, 0, 0, 452, 0, 967, 797, 0, 798, 799,
	795, 826, 850, 850, 0, 850, 830, 1213, 0, 0,
	228, 229, 218, 0, 219, 0, 231, 232, 0, 234,
	235, 236, 243, 1778, 1851, 238, 240, 0, 0, 244,
	257, 258, 259, 0, 0, 249, 250, 0, 0, 303,
	304, 306, 0, 686, 1044, 1045, 1046, 602, 1211, 603,
	604, 608, 0, 0, 611, 612, 613, 614, 615, 900,
	0, 0, 972, 973, 784, 0, 793, 0, 789, 856,
	0, 858, 0, 784, 0, 81, 19, 0, 74, 71,
	0, 0, 0, 0, 0, 1687, 1637, 1708, 0, 0,
	0, 1689, 0, 0, 0, 0, 64, 688, 649, 0,
	652, 669, 0, 673, 0, 0, 665, 657, 662, 0,
	0, 682, 0, 0, 643, 0, 0, 648, 686, 0,
	709, 738, 739, 742, 1268, 0, 340, 336, 354, 0,
	0, 0, 0, 144, 981, 0, 145, 149, 139, 0,
	0, 0, 986, 0, 983, 988, 0, 159, 0, 0,
	134, 135, 1059, 1068, 0, 0, 0, 1583, 1585, 1587,
	1589, 1591, 0, 1594, 1604, 1604, 1600, 0, 1595, 0,
	1597, 0, 1573, 0, 1384, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 1450, 0, 0, 1454, 0, 1456,
	1457, 1458, 1460, 0, 0, 0, 1464, 0, 1503, 1521,
	1507, 1510, 0, 1514, 0, 1516, 0, 736, 736, 0,
	0, 1423, 1423, 1423, 0, 0, 0, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 0, 1368, 0, 1369,
	1370, 0, 0, 0, 813, 706, 0, 0, 0, 0,
	0, 1066, 0, 285, 273, 275, 0, 0, 1032, 0,
	0, 888, 889, 891, 0, 894, 895, 896, 900, 729,
	0, 729, 940, 1712, 456, 0, 0, 980, 0, 956,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 627, 631, 23, 730, 0, 785,
	510, 0, 511, 562, 519, 520, 784, 543, 544, 0,
	0, 784, 562, 562, 565, 0, 576, 1078, 0, 0,
	1040, 1144, 1112, 384, 0, 1224, 1225, 424, 0, 1231,
	1240, 1031, 1300, 0, 1240, 0, 0, 1242, 1243, 0,
	0, 0, 0, 407, 408, 0, 393, 0, 0, 0,
	0, 0, 0, 392, 0, 0, 434, 0, 0, 0,
	0, 0, 1713, 1712, 1712, 0, 401, 402, 0, 405,
	0, 0, 0, 0, 0, 0, 0, 0, 1712, 1712,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1184, 0, 0, 0, 0, 0, 0, 0, 1199,
	1200, 940, 1712, 0, 0, 0, 456, 954, 963, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 816, 0,
	0, 0, 0, 0, 729, 851, 0, 853, 854, 828,
	-2, 0, 797, 833, 1568, 221, 222, 0, 0, 227,
	245, 247, 0, 0, 0, 246, 248, 252, 253, 302,
	305, 307, 748, 0, 0, 1102, 0, 901, 902, 904,
	905, 0, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1762, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 899, 619, 782,
	787, 794, 857, 859, 97, 790, 782, 0, 84, 19,
	83, 75, 76, 0, 19, 0, 0, 0, 0, 1697,
	1696, 1682, 0, 1683, 1694, 1699, 0, 1702, 0, 692,
	0, 0, 672, 674, 0, 0, 672, 0, 0, 681,
	0, 0, 1215, 0, 672, 748, 688, 0, 745, 743,
	744, 0, 0, 584, 107, 360, 0, 0, 0, 0,
	0, 606, 0, 985, 141, 0, 0, 161, 0, 0,
	0, 1068, 1063, 1567, 1596, 1598, 0, 1605, 1601, 1348,
	1356, 1380, 0, 0, 1386, 1398, 1398, 0, 0, 0,
	1389, 1695, 1695, 1392, 1691, 1693, 1691, 1398, 1398, 0,
	98, 0, 0, 1455, 0, 0, 0, 668, 0, 0,
	0, 1419, 1421, 1423, 1423, 1430, 1424, 1431, 1432, 1423,
	1423, 1423, 1423, 1437, 1423, 1423, 1423, 1423, 1423, 1423,
	1423, 1423, 1417, 0, 0, 1626, 1627, 677, 0, 0,
	719, 720, 721, 722, 723, 0, 0, 53, 54, 1068,
	0, 277, 55, 56, 0, 0, 0, 893, 0, 0,
	0, 1217, 0, 944, 941, 942, 943, 0, 975, 457,
	458, 459, 460, 0, 0, 0, 979, 0, 967, 949,
	0, 0, 0, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	-2, 1035, 0, 0, 0, 1217, 1054, 0, 1217, 1217,
	0, 1086, 0, 1075, 680, 0, -2, 0, 0, 629,
	0, 0, 825, 513, 784, 537, 734, 735, 552, 784,
	784, 562, 580, 1086, 1077, 0, 374, 423, 0, 1132,
	0, 0, 1138, 0, 1145, 377, 0, 425, 0, 1230,
	1257, 1241, 1257, 1301, 1257, 1257, 1031, 0, 425, 0,
	0, 395, 431, 0, 0, 0, 0, 0, 391, 428,
	742, 378, 380, 381, 382, 432, 433, 435, 0, 437,
	438, 397, 409, 410, 411, 412, 0, 0, 0, 404,
	417, 418, 419, 420, 379, 1161, 1162, 1163, 1166, 1167,
	1168, 1169, 0, 0, 1172, 1173, 1174, 1175, 1176, 1254,
	1255, 1256, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1201,
	1202, 1203, 1204, 1205, 1206, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 0, 0, 1196, 0, 944, 0, 0,
	0, 0, 975, 956, 0, 966, 0, 968, 969, 0,
	0, 650, 784, 295, 0, 820, 814, 0, 803, 818,
	819, 806, 0, 808, 0, 804, 805, 784, 796, 827,
	852, 829, 832, 834, 835, 841, 0, 0, 0, 0,
	224, 225, 226, 233, 0, 476, 239, 704, 0, 1212,
	609, 610, 1103, 1104, 617, 0, 906, 780, 0, 0,
	780, 79, 82, 0, 77, 0, 0, 0, 0, 69,
	67, 1690, 0, 0, 694, 121, 0, 0, 0, 670,
	0, 675, 672, 656, 666, 655, 663, 664, 683, 0,
	672, 647, 646, 707, 692, 740, 741, 0, 1269, 331,
	0, 982, 141, 146, 147, 148, 142, 140, 989, 0,
	991, 0, 1061, 0, 0, 1602, 1385, 1357, 1387, 1399,
	1400, 1388, 0, 1359, 1360, 1390, 1391, 1393, 1394, 1395,
	1396, 1397, 1361, 1451, 0, 1453, 1461, 1462, 0, 1511,
	1515, 0, 0, 0, 0, 0, 1428, 1429, 1433, 1434,
	1435, 1436, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	736, 1418, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 0, 1067, 1069, 57, 881, 884, 890, 892,
	0, 0, 0, 1218, 1219, 1221, 1222, 1223, 0, 917,
	0, 0, 935, 936, 946, 0, 0, 0, 462, 463,
	0, 0, 0, 475, 471, 472, 473, 453, 974, 963,
	952, 0, 0, 962, 0, 1036, 1712, 1712, 1712, 0,
	0, 1146, 1712, 1712, 0, 1056, 0, 0, 1150, 1089,
	0, 0, 1080, 0, 850, 0, 0, 784, 628, 631,
	632, 728, 514, 556, 553, 784, 1089, 370, 1110, 0,
	0, 0, 0, 0, 1142, 0, 0, 1114, 0, 396,
	426, 0, -2, 0, 1258, 0, 1244, 1258, 0, 0,
	1257, 0, 385, 425, 0, 0, 0, 439, 443, 444,
	0, 441, 1296, 0, 442, 0, 430, 0, 436, 1164,
	1165, 0, 1170, 1171, 0, 1195, 0, 0, 445, 0,
	0, 0, 446, 451, 949, 0, 964, 0, 970, 971,
	736, 0, 0, 800, 821, 0, 0, 801, 0, 802,
	807, 809, 294, 836, 0, 0, 838, 839, 840, 831,
	241, 749, 903, 0, 770, 0, 0, 791, 771, 0,
	19, 0, 0, 72, 1700, 1703, 696, 0, 693, 122,
	0, 0, 0, 0, 660, 671, 654, 1216, 645, 694,
	746, 747, 143, 138, 990, 1071, 0, 1062, 0, 0,
	1463, 0, 1423, 1420, 1423, 1422, 1414, 0, 1371, 0,
	1373, 1374, 1375, 0, 1377, 1378, 0, 715, 0, 0,
	923, 1150, 0, 923, 945, 934, 0, 976, 977, 0,
	464, 465, 0, 468, 474, 947, 948, 0, 0, 960,
	0, 0, 0, 0, 1028, 1042, 0, 0, 0, -2,
	0, -2, 1053, 0, 1095, 0, 1087, 0, 1079, 0,
	1082, 784, 784, -2, 625, 630, 0, 557, 1095, 1112,
	0, 1133, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 1126, 427, 1259, -2, 1272, 1274, 0, 1041, 1277,
	1278, 0, 0, 0, 0, 0, 0, 1322, 1286, 0,
	0, 1290, 1291, 1292, 0, 0, 1295, 0, 1620, 1621,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 1238,
	386, 387, 0, 389, 390, 1712, 1297, 429, 383, 1712,
	399, 1194, 1197, 1198, 450, 447, 448, 952, 955, 651,
	731, 296, 297, 822, 0, 815, 845, 842, 0, 0,
	907, 781, 783, 73, 78, 0, 0, 698, 0, 695,
	0, 689, 691, 132, 659, 696, 94, 124, 0, 0,
	1358, 1452, 1502, 1426, 1427, 0, 1415, 0, 1409, 1410,
	1411, 1416, 0, 0, 718, 713, 0, 909, 916, 930,
	1047, 1220, 915, 0, 0, 461, 466, 0, 469, 470,
	0, 950, 951, 0, 958, 0, 0, 1015, 1691, 0,
	1037, 1038, 1209, 1210, 1039, 1147, 1148, 1149, 1105, 1055,
	0, -2, 1158, 0, 1051, 1071, 1105, 0, 1083, 0,
	1090, 0, 1088, 1081, 736, 626, 1092, 376, 1144, 1134,
	0, 1136, 0, 0, 0, 0, 1115, -2, 0, 1273,
	1275, 1276, 1279, 1280, 1281, 1327, 1328, 1329, 0, 0,
	1284, 1324, 1325, 1326, 1285, 0, 0, 0, 0, 0,
	1618, 1619, 1320, 0, 0, 1245, 1247, 1248, 1249, 1250,
	1251, 1252, 1253, 1246, 0, 0, 0, 1237, 1239, 388,
	0, 0, 1712, 965, 293, 0, 0, 846, 848, 843,
	844, 68, 70, 85, 0, 697, 123, 0, 698, 86,
	0, 115, 0, 1072, 0, 1425, 1412, 0, 0, 0,
	0, 0, 1622, 1623, 1624, 0, 1372, 1376, 0, 0,
	931, 932, 937, 0, 939, 467, 953, 957, 960, 0,
	1006, 0, 742, 0, 1107, 0, 1057, 1040, 1160, 1712,
	1058, 1107, 0, 1152, 1712, 1712, 1073, 0, 1085, 0,
	1097, 0, 1091, 731, 369, 0, 1094, 1130, 1135, 1137,
	1139, 0, 1143, 1141, 1116, -2, 0, 1124, 0, 0,
	1282, 1283, 0, 0, 1518, 1712, 0, 1315, 0, 1006,
	1006, 1006, 1006, 0, 440, 398, 0, 823, 837, 0,
	0, 0, 687, 95, 112, 0, 125, 126, 0, 0,
	0, 0, 1064, 0, 1401, 0, 0, 0, 1405, 1406,
	1407, 1408, 0, 908, 0, 938, 959, 961, 1005, 1016,
	1017, 742, 1050, 0, 1144, 1159, 0, 1052, 1151, 0,
	0, 0, 1084, 1096, 0, 1099, 624, 1093, 1111, 0,
	1140, 1117, 1125, 0, 1120, 0, 0, 0, 1323, 0,
	1289, 0, 1294, 1303, 1316, 0, 0, 1226, 0, 1228,
	0, 1232, 0, 1234, 0, 0, 400, 847, 849, 0,
	700, 690, 99, 0, 121, 118, 0, 127, 0, 0,
	0, 0, 1060, 0, 0, 1402, 1403, 1404, 0, 910,
	911, 924, 1007, 1712, 1712, 0, 0, 0, 1013, 1014,
	1018, 0, 1132, 1164, 1153, 1154, 1155, 1098, 1131, 1119,
	0, -2, 1127, 0, 0, 1570, 1580, 1581, 1287, 1293,
	1302, 1304, 1305, 0, 1317, 1318, 1319, 1321, 1006, 1006,
	1006, 1006, 1236, 699, 0, 88, 0, 0, 116, 117,
	119, 0, 128, 0, 130, 131, 0, 1413, 912, 0,
	0, 1010, 1011, 0, 1108, 0, 1110, 1121, -2, 0,
	1129, 0, 1288, 1306, 0, 1307, 0, 0, 0, 1227,
	1229, 1233, 1235, 701, 1070, 0, 100, 0, 102, 104,
	105, 1260, 113, 114, 120, 129, 0, 897, 913, 0,
	1008, 1009, 1012, 0, 1112, 1128, 1571, 1308, 1310, 1311,
	0, 0, 1309, 89, 90, 0, 101, 0, 0, 1065,
	914, 1109, 1106, 1312, 1314, 1313, 0, 0, 103, 1261,
	91, 92, 93, 0, 1262,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 114, 3, 3, 3, 145, 137, 3,
	82, 83, 142, 140, 155, 141, 154, 143, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 626, 623,
	124, 123, 125, 3, 627, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 147, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 624, 136, 625, 148,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	115, 116, 117, 118, 119, 120, 121, 122, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 138, 139,
	144, 146, 149, 150, 151, 152, 153, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:800
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:807
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:813
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:821
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:827
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:831
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:850
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:856
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:865
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:905
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp:   yyDollar[2].str,
				IsS3:        false,
				Dir:         yyDollar[4].str,
				Parallelism: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:914
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      true,
				Option:    yyDollar[5].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:924
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:934
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:944
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:977
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:983
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:990
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:998
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1004
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1013
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1031
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1039
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1047
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1065
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1075
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1082
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1091
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1101
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1105
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1111
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1115
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1130
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1140
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1144
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1150
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1159
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1163
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1169
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1214
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1220
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1224
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1245
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1249
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1263
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1267
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1271
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1276
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1280
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1284
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1290
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1299
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1310
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1314
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1320
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1324
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1330
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1334
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1340
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1364
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1383
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1387
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1391
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1396
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1400
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1409
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1419
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1426
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1431
		{
			yyVAL.str = "\n"
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1438
		{
			yyVAL.str = yyDollar[3].str
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1443
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1447
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1475
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1479
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1485
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1493
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1513
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1532
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1557
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1561
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1565
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1570
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1574
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1580
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1593
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1604
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1617
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1621
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1631
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1644
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1657
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1663
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1669
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1676
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1684
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1693
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1697
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1701
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1705
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1709
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1713
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1720
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1724
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1730
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1737
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1746
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1750
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1756
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1760
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1764
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1768
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1772
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1776
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1780
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1784
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1788
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1792
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1796
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1800
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1804
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1808
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1812
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1816
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1820
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1824
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1828
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1832
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1836
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1840
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1844
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1848
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1852
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1856
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1860
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1864
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1868
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1872
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1876
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1880
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1884
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1888
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1892
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1896
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1900
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1904
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1908
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1912
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1916
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1920
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1924
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1928
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1932
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1936
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1940
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1944
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1948
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1952
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1965
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1972
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1979
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1989
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1993
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1999
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2006
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2014
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2018
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2022
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2026
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2042
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2049
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2056
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2065
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2095
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2099
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2103
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2109
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2115
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2119
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2126
		{
			yyVAL.str = yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2132
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2136
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2142
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2150
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2159
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2168
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2176
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2184
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2207
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2230
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2237
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2244
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2252
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2259
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2266
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2283
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2289
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2293
		{
			yyVAL.str = yyDollar[1].str
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2299
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2303
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2309
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2313
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2324
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2330
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2335
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2339
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2343
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2347
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2351
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2355
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2359
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2363
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2367
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2377
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2381
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2385
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2390
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2401
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2427
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2440
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2453
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2469
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2476
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2487
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2498
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2502
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2508
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2524
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2528
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2534
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2540
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2544
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2548
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2552
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2558
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2570
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2576
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2580
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2586
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2590
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2596
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2602
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2613
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2623
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2627
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2635
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2639
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2647
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2655
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2665
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2677
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2681
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2689
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2697
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2736
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2740
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2746
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2752
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2757
		{
			yyVAL.str = "true"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2758
		{
			yyVAL.str = "false"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2759
		{
			yyVAL.str = yyDollar[1].str
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2764
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2781
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2804
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2814
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2821
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2830
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2834
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2840
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2844
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			partitionDef := &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2863
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2873
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2889
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2907
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2911
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2917
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2921
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2927
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2933
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2941
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2951
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2959
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2969
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2979
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2989
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2996
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3008
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3012
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3019
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3025
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3029
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3033
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3037
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3041
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3045
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3049
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3053
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3058
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3089
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3093
		{
			yyVAL.str = string("COLUMN")
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3098
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3104
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3110
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3118
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3122
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3128
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3136
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3143
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3149
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3155
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3161
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3167
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3174
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3181
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3189
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3195
		{
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = int64(yyDollar[6].item.(int64))
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3202
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3208
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3216
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3220
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3227
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3245
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3259
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3273
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3286
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3292
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3303
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3316
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3320
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3325
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3329
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3334
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3338
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3354
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3358
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3362
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3366
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3370
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3374
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3378
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3382
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3386
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3390
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3394
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3398
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3402
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3406
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3410
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3414
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3420
		{
			yyVAL.item = nil
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3425
		{
			yyVAL.item = nil
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3466
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3475
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3483
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3487
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3491
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{tree.NewRole(yyDollar[5].cstrUnion().Compare())}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3500
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3504
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3510
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3515
		{
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3519
		{
		}
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3524
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3534
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3544
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3552
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3558
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3564
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3570
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3576
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3582
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3588
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3597
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3601
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3605
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3609
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3613
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3617
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3621
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3625
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3631
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3640
		{
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3642
		{
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3651
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3661
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3670
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3674
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3678
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3684
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3690
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3696
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3702
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3711
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3721
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3733
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3743
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3755
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3769
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3775
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3782
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3786
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3791
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3795
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3799
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3804
		{
			yyVAL.str = ""
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3808
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3814
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3827
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3831
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3837
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3842
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3846
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3850
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3856
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3862
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3866
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3872
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3878
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3882
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3886
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3892
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3896
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3921
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3929
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3937
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3945
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3949
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3955
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3964
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3972
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3981
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3987
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3995
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4003
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4011
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4017
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4025
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4031
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4039
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4045
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4055
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4060
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4067
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4083
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4096
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4107
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4111
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4117
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4122
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4129
		{
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4131
		{
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4134
		{
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4143
		{
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4147
		{
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4152
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4161
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4168
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4174
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4182
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4189
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4196
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4216
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4226
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4230
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4236
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4243
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4249
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4257
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4264
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4271
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4290
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4294
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4298
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4303
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4307
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4311
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4317
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4326
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4330
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4336
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4340
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4346
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4350
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4356
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4361
		{
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4372
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4376
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4383
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4388
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4392
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4398
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4402
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4408
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4412
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4417
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4421
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4434
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4445
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4456
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4478
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4501
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4509
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4518
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4522
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4535
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4539
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4544
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4548
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4555
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4560
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4567
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4573
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4577
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4581
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4585
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4589
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4593
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4598
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4602
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4608
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4618
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4633
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4637
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4651
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4655
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4661
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4670
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4674
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4678
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4682
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4686
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4692
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4699
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4708
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4712
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4718
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4726
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4730
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4735
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4739
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4745
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4749
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4753
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4758
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4762
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4768
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4774
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4778
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4784
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4789
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4793
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4797
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4802
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4806
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4810
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4815
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4819
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4827
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4831
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4835
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4849
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4853
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4863
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4873
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4883
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4895
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4903
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4911
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4920
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4928
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4936
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4944
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4952
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4960
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4968
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4976
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4984
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4994
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5005
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5019
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5023
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5027
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5032
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5036
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5040
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5049
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5053
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5058
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5062
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5067
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5071
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5077
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5081
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5087
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5091
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5096
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5100
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5105
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5113
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5119
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5127
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5135
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5145
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5151
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5160
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5169
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5178
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5188
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5192
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5202
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5206
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5210
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5214
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5220
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5230
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5234
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5240
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5246
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5250
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5256
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5262
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5266
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5270
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5276
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5280
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5286
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5290
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5296
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5300
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5306
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5310
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5320
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5333
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5339
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5345
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5358
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5376
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5380
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5386
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5396
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5400
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5404
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5409
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5413
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5417
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5421
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5426
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5430
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5434
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5438
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5442
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5447
		{
			yyVAL.str = ""
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5451
		{
			yyVAL.str = yyDollar[1].str
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5455
		{
			yyVAL.str = yyDollar[2].str
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5461
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5467
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5471
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5475
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5479
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5483
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5489
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 881:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5529
		{
			yyLOCAL = &tree.CreateExtension{
				Language: yyDollar[3].str,
				Name:     tree.Identifier(yyDollar[5].str),
				Filename: tree.Identifier(yyDollar[7].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5539
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5545
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 884:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5551
		{
			yyLOCAL = &tree.CreateProcedure{
				Name: yyDollar[3].procNameUnion(),
				Args: yyDollar[5].procArgsUnion(),
				Body: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5561
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5566
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5572
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5579
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5583
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5589
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5595
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5600
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5604
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5608
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5612
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5619
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				return 1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				return 1
			}

			yyLOCAL = &tree.CreateFunction{
				Replace:    yyDollar[2].sourceOptionalUnion(),
				Name:       yyDollar[4].functionNameUnion(),
				Args:       yyDollar[6].funcArgsUnion(),
				ReturnType: yyDollar[9].funcReturnUnion(),
				Language:   yyDollar[11].str,
				Import:     yyDollar[12].boolValUnion(),
				Body:       yyDollar[13].str,
				Handler:    yyDollar[14].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5643
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5648
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5654
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5661
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5665
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5671
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5677
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5681
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5685
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5691
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5697
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5703
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5707
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5713
		{
			yyVAL.str = ""
		}
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5720
		{
			yyVAL.str = yyDollar[2].str
		}
	case 915:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5726
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5735
		{
			yyLOCAL = &tree.CreateView{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5747
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5759
		{
			yyVAL.str = yyDollar[1].str
		}
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5763
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5769
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5773
		{
			yyVAL.str = "DEFINER = "
		}
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5777
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5782
		{
			yyVAL.str = ""
		}
	case 924:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5786
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5800
		{
			yyVAL.str = ""
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5808
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5814
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5824
		{
			yyVAL.str = yyDollar[1].str
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5828
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5834
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5841
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5847
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5855
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5861
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5868
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5875
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusRestricted,
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5883
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5889
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5898
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5910
		{
			yyLOCAL = &tree.CreatePublication{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Database:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				AccountsSet: yyDollar[7].accountsSetOptionUnion(),
				Comment:     yyDollar[8].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5922
		{
			yyLOCAL = &tree.CreateStage{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Url:         yyDollar[5].str,
				Credentials: yyDollar[6].stageCredentialsUnion(),
				Status:      yyDollar[7].stageStatusUnion(),
				Comment:     yyDollar[8].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5934
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5940
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5947
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5955
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5961
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5969
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5975
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5983
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5989
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5998
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6002
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6007
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6011
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6018
		{
			yyVAL.str = yyDollar[3].str
		}
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6023
		{
			yyVAL.str = ""
		}
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6027
		{
			yyVAL.str = yyDollar[2].str
		}
	case 965:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6033
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6046
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6055
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6059
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6065
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6071
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6077
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6086
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6094
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6102
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6107
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6113
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6121
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6227
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6231
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6237
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6247
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6251
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6257
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6267
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6271
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6275
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6280
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6284
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6290
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6297
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6303
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6312
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 994:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6319
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6328
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6332
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6338
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6352
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6356
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6360
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6365
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6369
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6373
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6377
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6383
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = &tree.IndexOption{IType: tree.INDEX_TYPE_INVALID}
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Table:       yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6404
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6408
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6434
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6438
		{
			yyLOCAL = &tree.IndexOption{AlgoParamList: int64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6442
		{
			yyLOCAL = &tree.IndexOption{AlgoParamVectorOpType: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6446
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6450
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6454
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6458
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6464
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6468
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6474
		{
			// Order is parsed but just ignored as MySQL dtree.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6479
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6484
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6488
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6492
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6496
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6500
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6504
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6508
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6514
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Name:               tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SubscriptionOption: yyDollar[5].subscriptionOptionUnion(),
				CreateOptions:      yyDollar[6].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6529
		{
			yyLOCAL = &tree.SubscriptionOption{From: tree.Identifier(yyDollar[2].str), Publication: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6539
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6543
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6548
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6552
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6558
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6562
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6568
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6572
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6576
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6581
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6585
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6591
		{
			yyLOCAL = &tree.CreateConnector{
				TableName: yyDollar[4].tableNameUnion(),
				Options:   yyDollar[7].connectorOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6600
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6606
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6624
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6642
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6660
		{
			yyLOCAL = &tree.CreateSource{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				SourceName:  yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Options:     yyDollar[9].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6671
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6675
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6681
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6693
		{
			yyLOCAL = &tree.CreateTable{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Param:       yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6702
		{
			yyLOCAL = &tree.CreateTable{
				IsClusterTable:  true,
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6714
		{
			yyLOCAL = &tree.CreateTable{
				IsDynamicTable: true,
				IfNotExists:    yyDollar[4].ifNotExistsUnion(),
				Table:          *yyDollar[5].tableNameUnion(),
				AsSource:       yyDollar[7].selectUnion(),
				DTOptions:      yyDollar[8].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6724
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				AsSource:    yyDollar[6].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6734
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				AsSource:    yyDollar[9].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6745
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				AsSource:    yyDollar[7].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6755
		{
			yyLOCAL = &tree.CreateTable{
				IsAsSelect:  true,
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				AsSource:    yyDollar[10].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6768
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6775
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6785
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6798
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6806
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6815
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6824
		{
			yyVAL.str = ""
		}
	case 1065:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6828
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6834
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6838
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6843
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6847
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:6854
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6866
		{
			yyVAL.str = ""
		}
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6870
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1073:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6876
		{
			yyLOCAL = &tree.CreateSequence{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].columnTypeUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6889
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6903
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6907
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6911
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6917
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6921
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6928
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6935
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6942
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6949
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6953
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6957
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6961
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6965
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6972
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6979
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6983
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6990
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6997
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7001
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7007
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7013
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7017
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7024
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7031
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7038
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7045
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7049
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7054
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7058
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7062
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7067
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7071
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7081
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7085
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()},
			}

		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7092
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: yyDollar[4].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7099
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7103
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7116
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7122
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7126
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7132
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7141
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7151
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7155
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7161
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7165
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7171
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7178
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7187
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7191
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7196
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7200
		{
			expr := tree.NewMaxValue()
			yyLOCAL = &tree.ValuesLessThan{ValueList: tree.Exprs{expr}}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7205
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7209
		{
			yyLOCAL = &tree.ValuesIn{ValueList: yyDollar[4].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7214
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7218
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7228
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7232
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7243
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7251
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7259
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7267
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7278
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:    yyDollar[1].boolValUnion(),
					Algorithm: yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7287
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7297
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7307
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7311
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7316
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7320
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7326
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7330
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7336
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7340
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7345
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7349
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7355
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7359
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7365
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7369
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7374
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7378
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7384
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7388
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7392
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7398
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7402
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7406
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7410
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7414
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7418
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7422
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7427
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7431
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7435
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7439
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7443
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7447
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7451
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7455
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7459
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7463
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7467
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7471
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7475
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7479
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7483
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7487
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7491
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7495
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7499
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7503
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7507
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7511
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7515
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7519
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7523
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7527
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7531
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7535
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7541
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7545
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7551
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7557
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7561
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7567
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7571
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7575
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7579
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7583
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7587
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7601
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7605
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7614
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7619
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7624
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atType := tree.ATTIMESTAMPNONE
			if yyDollar[3].str != "" {
				t := strings.ToLower(yyDollar[3].str)
				switch t {
				case "timestamp":
					atType = tree.ATTIMESTAMPTIME
				case "snapshot":
					atType = tree.ATTIMESTAMPSNAPSHOT
				default:
					yylex.Error("Invalid the type of at timestamp")
					return 1
				}
			}
			atTs := &tree.AtTimeStampClause{
				TimeStampExpr: &tree.TimeStampExpr{
					Type: atType,
					Expr: yyDollar[5].str,
				},
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7648
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atType := tree.ATTIMESTAMPNONE
			if yyDollar[5].str != "" {
				t := strings.ToLower(yyDollar[5].str)
				switch t {
				case "timestamp":
					atType = tree.ATTIMESTAMPTIME
				case "snapshot":
					atType = tree.ATTIMESTAMPSNAPSHOT
				default:
					yylex.Error("Invalid the type of at timestamp")
					return 1
				}
			}
			atTs := &tree.AtTimeStampClause{
				TimeStampExpr: &tree.TimeStampExpr{
					Type: atType,
					Expr: yyDollar[7].str,
				},
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7673
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7680
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7684
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7690
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7694
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7698
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7704
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7708
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7714
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7723
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7732
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7765
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7800
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7814
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7820
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7829
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7838
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7847
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7856
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7866
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7874
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7880
		{
			yyVAL.str = ""
		}
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7884
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7894
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7900
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7906
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7927
		{
			yyVAL.str = ""
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7931
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:7937
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7943
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7947
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7951
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7957
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7961
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7965
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7969
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7975
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7979
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7983
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7988
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7992
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7998
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8002
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8008
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8012
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8016
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8020
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8024
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8028
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8033
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8037
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8041
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8045
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8049
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8053
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8057
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8061
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8065
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8069
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8082
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8086
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8090
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8094
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8098
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8102
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8108
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8112
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8117
		{
			yyVAL.str = ""
		}
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8121
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8127
		{
			yyVAL.str = ""
		}
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8131
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1302:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8137
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8149
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8156
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8163
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8170
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8177
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8186
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8192
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8198
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8202
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8206
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8210
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8214
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8219
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8226
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8230
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8234
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8239
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8243
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8248
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8252
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8268
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8274
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8278
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8282
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8286
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8290
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8294
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8298
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8302
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8306
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8310
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8314
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8318
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8322
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8328
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8332
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8336
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8340
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8344
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8348
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8352
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8356
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8360
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8364
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8368
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8372
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8377
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8385
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8389
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8393
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8397
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8401
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8410
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8414
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8418
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8422
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8426
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8430
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8436
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8444
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8452
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8462
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8472
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8482
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8491
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8501
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8511
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8521
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8530
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8540
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8544
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8549
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8553
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8559
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8563
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8569
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8578
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8590
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8607
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8624
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8637
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8650
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8662
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8676
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8691
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8706
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8723
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8738
		{
		}
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8745
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8749
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8753
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8759
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8763
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8767
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8771
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8777
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8781
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8785
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8791
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8799
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8809
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8813
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8820
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8825
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8829
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8834
		{
			yyVAL.str = ","
		}
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8838
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8843
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8847
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1423:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8859
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8885
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8896
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8907
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8917
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8927
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8937
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8946
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8955
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8965
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8975
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8985
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8995
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9005
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9015
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9025
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9035
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9045
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9055
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9065
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9075
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9094
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9102
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9110
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9118
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9126
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9136
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9144
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9153
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9161
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9169
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9177
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9185
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9196
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9206
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9218
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9229
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9251
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9287
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9299
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9311
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9322
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9330
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9337
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9344
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9356
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9364
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9374
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9384
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9392
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9403
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9412
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9421
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9429
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9439
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9447
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9457
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9461
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9467
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9471
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9490
		{
		}
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9492
		{
		}
	case 1563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9533
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9544
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9548
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9552
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9558
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9563
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9567
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9573
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9577
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9583
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9587
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9594
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9598
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9602
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9610
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9614
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9618
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9623
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9627
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9633
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9637
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9641
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9645
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9649
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9653
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9657
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9661
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9665
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9669
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9677
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9681
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9685
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9689
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9693
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9697
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9701
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9705
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9709
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9713
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9719
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9723
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9729
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9733
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9740
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9744
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9748
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9754
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9758
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9762
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9766
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9770
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9774
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9778
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9784
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9788
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9792
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9796
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9802
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9815
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9820
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9826
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9830
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9843
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9848
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9852
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9856
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9860
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9864
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9871
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9875
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9879
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9883
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9890
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9901
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9906
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9912
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9924
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9936
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9948
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9961
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9974
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9987
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10000
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10013
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10026
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10039
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10052
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10065
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10078
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10093
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10120
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10162
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10198
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10234
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10251
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10263
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10283
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10303
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10323
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10339
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10352
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10365
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10378
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10391
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10403
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10415
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10427
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10439
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10451
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10463
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10475
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10487
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10499
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10512
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10525
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10538
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10551
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10566
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10574
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10583
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10593
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10616
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10621
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10627
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10634
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10638
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10643
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10647
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10653
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10659
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10666
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10673
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10682
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10689
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10696
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10705
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10709
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10713
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10719
		{
		}
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10721
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10731
		{
			yyVAL.str = ""
		}
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10735
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
