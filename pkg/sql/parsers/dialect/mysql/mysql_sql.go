// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const ADDDATE = 57869
const BIT_AND = 57870
const BIT_OR = 57871
const BIT_XOR = 57872
const CAST = 57873
const COUNT = 57874
const APPROX_COUNT = 57875
const APPROX_COUNT_DISTINCT = 57876
const SERIAL_EXTRACT = 57877
const APPROX_PERCENTILE = 57878
const CURDATE = 57879
const CURTIME = 57880
const DATE_ADD = 57881
const DATE_SUB = 57882
const EXTRACT = 57883
const GROUP_CONCAT = 57884
const MAX = 57885
const MID = 57886
const MIN = 57887
const NOW = 57888
const POSITION = 57889
const SESSION_USER = 57890
const STD = 57891
const STDDEV = 57892
const MEDIAN = 57893
const CLUSTER_CENTERS = 57894
const KMEANS = 57895
const STDDEV_POP = 57896
const STDDEV_SAMP = 57897
const SUBDATE = 57898
const SUBSTR = 57899
const SUBSTRING = 57900
const SUM = 57901
const SYSDATE = 57902
const SYSTEM_USER = 57903
const TRANSLATE = 57904
const TRIM = 57905
const VARIANCE = 57906
const VAR_POP = 57907
const VAR_SAMP = 57908
const AVG = 57909
const RANK = 57910
const ROW_NUMBER = 57911
const DENSE_RANK = 57912
const BIT_CAST = 57913
const BITMAP_BIT_POSITION = 57914
const BITMAP_BUCKET_NUMBER = 57915
const BITMAP_COUNT = 57916
const BITMAP_CONSTRUCT_AGG = 57917
const BITMAP_OR_AGG = 57918
const NEXTVAL = 57919
const SETVAL = 57920
const CURRVAL = 57921
const LASTVAL = 57922
const ARROW = 57923
const ROW = 57924
const OUTFILE = 57925
const HEADER = 57926
const MAX_FILE_SIZE = 57927
const FORCE_QUOTE = 57928
const PARALLEL = 57929
const UNUSED = 57930
const BINDINGS = 57931
const DO = 57932
const DECLARE = 57933
const LOOP = 57934
const WHILE = 57935
const LEAVE = 57936
const ITERATE = 57937
const UNTIL = 57938
const CALL = 57939
const PREV = 57940
const SLIDING = 57941
const FILL = 57942
const SPBEGIN = 57943
const BACKEND = 57944
const SERVERS = 57945
const HANDLER = 57946
const PERCENT = 57947
const SAMPLE = 57948
const KILL = 57949
const BACKUP = 57950
const FILESYSTEM = 57951
const PARALLELISM = 57952
const QUERY_RESULT = 57953

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11738

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 119,
	11, 714,
	22, 714,
	-2, 707,
	-1, 139,
	238, 1107,
	240, 1008,
	-2, 1055,
	-1, 164,
	43, 540,
	240, 540,
	267, 547,
	268, 547,
	463, 540,
	-2, 574,
	-1, 205,
	632, 1860,
	-2, 454,
	-1, 505,
	632, 1978,
	-2, 348,
	-1, 563,
	632, 2037,
	-2, 346,
	-1, 564,
	632, 2038,
	-2, 347,
	-1, 565,
	632, 2039,
	-2, 349,
	-1, 692,
	319, 136,
	435, 136,
	436, 136,
	-2, 1765,
	-1, 758,
	82, 1552,
	-2, 1915,
	-1, 759,
	82, 1570,
	-2, 1886,
	-1, 763,
	82, 1571,
	-2, 1914,
	-1, 796,
	82, 1479,
	-2, 2109,
	-1, 797,
	82, 1480,
	-2, 2108,
	-1, 798,
	82, 1481,
	-2, 2098,
	-1, 799,
	82, 2070,
	-2, 2091,
	-1, 800,
	82, 2071,
	-2, 2092,
	-1, 801,
	82, 2072,
	-2, 2100,
	-1, 802,
	82, 2073,
	-2, 2080,
	-1, 803,
	82, 2074,
	-2, 2089,
	-1, 804,
	82, 2075,
	-2, 2101,
	-1, 805,
	82, 2076,
	-2, 2102,
	-1, 806,
	82, 2077,
	-2, 2107,
	-1, 807,
	82, 2078,
	-2, 2112,
	-1, 808,
	82, 2079,
	-2, 2113,
	-1, 809,
	82, 1548,
	-2, 1952,
	-1, 810,
	82, 1549,
	-2, 1749,
	-1, 811,
	82, 1550,
	-2, 1961,
	-1, 812,
	82, 1551,
	-2, 1758,
	-1, 814,
	82, 1554,
	-2, 1766,
	-1, 815,
	82, 1555,
	-2, 1985,
	-1, 817,
	82, 1558,
	-2, 1785,
	-1, 819,
	82, 1560,
	-2, 1997,
	-1, 820,
	82, 1561,
	-2, 1996,
	-1, 821,
	82, 1562,
	-2, 1829,
	-1, 822,
	82, 1563,
	-2, 1910,
	-1, 825,
	82, 1566,
	-2, 2008,
	-1, 827,
	82, 1568,
	-2, 2011,
	-1, 828,
	82, 1569,
	-2, 2013,
	-1, 829,
	82, 1572,
	-2, 2021,
	-1, 830,
	82, 1573,
	-2, 1895,
	-1, 831,
	82, 1574,
	-2, 1940,
	-1, 832,
	82, 1575,
	-2, 1905,
	-1, 833,
	82, 1576,
	-2, 1930,
	-1, 844,
	82, 1457,
	-2, 2103,
	-1, 845,
	82, 1458,
	-2, 2104,
	-1, 846,
	82, 1459,
	-2, 2105,
	-1, 933,
	458, 574,
	459, 574,
	-2, 541,
	-1, 979,
	124, 1749,
	135, 1749,
	155, 1749,
	-2, 1723,
	-1, 1091,
	22, 741,
	-2, 690,
	-1, 1196,
	11, 714,
	22, 714,
	-2, 1337,
	-1, 1278,
	22, 741,
	-2, 690,
	-1, 1599,
	82, 1623,
	-2, 1912,
	-1, 1600,
	82, 1624,
	-2, 1913,
	-1, 1754,
	83, 891,
	-2, 897,
	-1, 2179,
	107, 1047,
	151, 1047,
	190, 1047,
	193, 1047,
	280, 1047,
	-2, 1040,
	-1, 2325,
	11, 714,
	22, 714,
	-2, 834,
	-1, 2357,
	83, 1709,
	156, 1709,
	-2, 1897,
	-1, 2358,
	83, 1709,
	156, 1709,
	-2, 1896,
	-1, 2359,
	83, 1685,
	156, 1685,
	-2, 1883,
	-1, 2360,
	83, 1686,
	156, 1686,
	-2, 1888,
	-1, 2361,
	83, 1687,
	156, 1687,
	-2, 1817,
	-1, 2362,
	83, 1688,
	156, 1688,
	-2, 1811,
	-1, 2363,
	83, 1689,
	156, 1689,
	-2, 1739,
	-1, 2364,
	83, 1690,
	156, 1690,
	-2, 1885,
	-1, 2365,
	83, 1691,
	156, 1691,
	-2, 1815,
	-1, 2366,
	83, 1692,
	156, 1692,
	-2, 1810,
	-1, 2367,
	83, 1693,
	156, 1693,
	-2, 1799,
	-1, 2368,
	83, 1709,
	156, 1709,
	-2, 1800,
	-1, 2369,
	83, 1709,
	156, 1709,
	-2, 1801,
	-1, 2371,
	83, 1698,
	156, 1698,
	-2, 1930,
	-1, 2372,
	83, 1676,
	156, 1676,
	-2, 1915,
	-1, 2373,
	83, 1707,
	156, 1707,
	-2, 1886,
	-1, 2374,
	83, 1707,
	156, 1707,
	-2, 1914,
	-1, 2375,
	83, 1707,
	156, 1707,
	-2, 1767,
	-1, 2376,
	83, 1705,
	156, 1705,
	-2, 1905,
	-1, 2377,
	83, 1702,
	156, 1702,
	-2, 1790,
	-1, 2378,
	82, 1657,
	83, 1657,
	156, 1657,
	393, 1657,
	394, 1657,
	395, 1657,
	-2, 1738,
	-1, 2379,
	82, 1658,
	83, 1658,
	156, 1658,
	393, 1658,
	394, 1658,
	395, 1658,
	-2, 1740,
	-1, 2380,
	82, 1659,
	83, 1659,
	156, 1659,
	393, 1659,
	394, 1659,
	395, 1659,
	-2, 1957,
	-1, 2381,
	82, 1661,
	83, 1661,
	156, 1661,
	393, 1661,
	394, 1661,
	395, 1661,
	-2, 1887,
	-1, 2382,
	82, 1663,
	83, 1663,
	156, 1663,
	393, 1663,
	394, 1663,
	395, 1663,
	-2, 1869,
	-1, 2383,
	82, 1665,
	83, 1665,
	156, 1665,
	393, 1665,
	394, 1665,
	395, 1665,
	-2, 1816,
	-1, 2384,
	82, 1667,
	83, 1667,
	156, 1667,
	393, 1667,
	394, 1667,
	395, 1667,
	-2, 1795,
	-1, 2385,
	82, 1668,
	83, 1668,
	156, 1668,
	393, 1668,
	394, 1668,
	395, 1668,
	-2, 1796,
	-1, 2386,
	82, 1670,
	83, 1670,
	156, 1670,
	393, 1670,
	394, 1670,
	395, 1670,
	-2, 1737,
	-1, 2387,
	83, 1712,
	156, 1712,
	393, 1712,
	394, 1712,
	395, 1712,
	-2, 1772,
	-1, 2388,
	83, 1712,
	156, 1712,
	393, 1712,
	394, 1712,
	395, 1712,
	-2, 1786,
	-1, 2389,
	83, 1715,
	156, 1715,
	393, 1715,
	394, 1715,
	395, 1715,
	-2, 1768,
	-1, 2390,
	83, 1715,
	156, 1715,
	393, 1715,
	394, 1715,
	395, 1715,
	-2, 1832,
	-1, 2391,
	83, 1712,
	156, 1712,
	393, 1712,
	394, 1712,
	395, 1712,
	-2, 1853,
	-1, 2586,
	107, 1047,
	151, 1047,
	190, 1047,
	193, 1047,
	280, 1047,
	-2, 1041,
	-1, 2602,
	80, 634,
	156, 634,
	-2, 1220,
	-1, 2990,
	193, 1047,
	304, 1305,
	-2, 1277,
	-1, 3146,
	107, 1047,
	151, 1047,
	190, 1047,
	193, 1047,
	-2, 1163,
	-1, 3148,
	107, 1047,
	151, 1047,
	190, 1047,
	193, 1047,
	-2, 1163,
	-1, 3160,
	80, 634,
	156, 634,
	-2, 1221,
	-1, 3181,
	193, 1047,
	304, 1305,
	-2, 1278,
	-1, 3316,
	107, 1047,
	151, 1047,
	190, 1047,
	193, 1047,
	-2, 1164,
	-1, 3342,
	83, 1125,
	156, 1125,
	-2, 1047,
	-1, 3470,
	83, 1125,
	156, 1125,
	-2, 1047,
	-1, 3616,
	83, 1129,
	156, 1129,
	-2, 1047,
	-1, 3663,
	83, 1130,
	156, 1130,
	-2, 1047,
}

const yyPrivate = 57344

const yyLast = 47723

var yyAct = [...]int{
	725, 702, 3709, 727, 3683, 2631, 194, 3702, 1839, 3620,
	1579, 3166, 3523, 3259, 3627, 3626, 3619, 3470, 2976, 711,
	3549, 3508, 3579, 2634, 3076, 3448, 3009, 2442, 3370, 1423,
	3195, 3502, 704, 2625, 1231, 1575, 3077, 3469, 3527, 3304,
	597, 3303, 3398, 3301, 755, 1361, 2628, 1092, 1500, 978,
	3439, 613, 3509, 619, 619, 3263, 3511, 36, 3254, 619,
	636, 645, 1787, 1367, 645, 3133, 2223, 1626, 3182, 2985,
	3323, 2605, 3313, 2949, 3285, 56, 1582, 3318, 2912, 3074,
	3149, 2738, 1930, 2938, 2739, 3122, 700, 1510, 2655, 2721,
	2987, 1903, 2737, 3005, 2994, 3151, 2731, 2477, 2038, 1927,
	2800, 656, 3062, 2353, 2226, 2760, 650, 1895, 3042, 2575,
	179, 1640, 2319, 1999, 2734, 2922, 694, 642, 2919, 2913,
	2993, 2957, 2917, 1083, 2915, 2190, 1416, 2910, 1945, 2587,
	2303, 2158, 2256, 2146, 1489, 2914, 2147, 2844, 2022, 1732,
	2424, 2008, 908, 2773, 618, 618, 2407, 2000, 118, 2007,
	626, 35, 1923, 1496, 1973, 1504, 2033, 2783, 2034, 1898,
	2320, 2559, 1896, 2657, 2564, 2636, 2224, 2308, 597, 1829,
	1818, 2597, 6, 2355, 1501, 2189, 190, 8, 189, 7,
	1763, 2351, 2035, 1035, 699, 703, 1573, 1463, 1301, 1528,
	1332, 1509, 1432, 1402, 194, 693, 194, 2068, 1026, 1027,
	2170, 2045, 612, 1633, 695, 619, 2510, 1799, 1564, 1613,
	1105, 2219, 1798, 701, 941, 2006, 1513, 712, 2003, 1989,
	1963, 1470, 22, 1572, 1401, 971, 14, 1762, 2327, 26,
	2509, 907, 628, 1455, 1346, 23, 848, 32, 1641, 659,
	1362, 16, 15, 1399, 658, 644, 631, 987, 13, 10,
	1462, 905, 884, 170, 176, 928, 180, 890, 1232, 1276,
	655, 1338, 2042, 3433, 2545, 2545, 1334, 1164, 1165, 1166,
	1163, 972, 2545, 1164, 1165, 1166, 1163, 2329, 1164, 1165,
	1166, 1163, 1023, 3136, 3163, 2964, 640, 1370, 2052, 641,
	1087, 2465, 3069, 1350, 2413, 695, 626, 638, 2411, 2012,
	1745, 2408, 637, 2410, 1022, 1477, 1024, 1473, 639, 648,
	624, 596, 1018, 1019, 178, 177, 52, 166, 140, 1019,
	984, 1019, 614, 986, 177, 52, 166, 140, 2145, 850,
	1578, 851, 2894, 167, 1371, 2891, 2896, 2893, 3694, 1295,
	159, 1384, 167, 615, 168, 1739, 1291, 2537, 2535, 159,
	1087, 1017, 3252, 168, 2796, 8, 1475, 7, 1164, 1165,
	1166, 1163, 2794, 117, 1164, 1165, 1166, 1163, 1978, 3405,
	3399, 3255, 117, 3075, 2019, 3513, 2002, 1226, 105, 849,
	2871, 2264, 1006, 1127, 171, 3455, 177, 105, 2539, 177,
	52, 166, 140, 171, 898, 3290, 899, 620, 177, 860,
	3286, 2451, 2039, 696, 1517, 1296, 3150, 2181, 3423, 3560,
	2459, 1442, 1441, 1440, 990, 988, 989, 2869, 654, 177,
	52, 166, 140, 177, 52, 166, 140, 177, 1307, 3456,
	1324, 3601, 879, 2174, 1514, 2345, 177, 1161, 177, 2050,
	3425, 177, 1380, 177, 1940, 1381, 893, 1907, 889, 2593,
	177, 2767, 2768, 1537, 1007, 1516, 1526, 2333, 171, 2346,
	2332, 122, 123, 2334, 124, 125, 1297, 171, 2766, 2425,
	122, 123, 2980, 124, 125, 177, 52, 166, 140, 950,
	177, 52, 166, 140, 117, 1813, 1523, 1103, 171, 2816,
	1581, 2808, 171, 1403, 1549, 1405, 2591, 1159, 117, 2561,
	982, 981, 983, 1154, 871, 171, 980, 1525, 861, 2562,
	171, 2895, 171, 2134, 2892, 1908, 1909, 1746, 1747, 171,
	3516, 1358, 1368, 1369, 3515, 1001, 996, 991, 995, 999,
	3276, 1383, 139, 165, 175, 3514, 103, 3651, 3594, 1100,
	3581, 139, 165, 175, 171, 103, 1366, 3687, 3688, 171,
	1365, 1368, 1369, 1004, 164, 158, 157, 994, 2560, 1306,
	3500, 58, 2801, 164, 158, 157, 2978, 3630, 3631, 3078,
	58, 3516, 3592, 3515, 3591, 895, 839, 888, 838, 840,
	841, 3078, 842, 843, 3584, 3581, 892, 891, 1142, 3402,
	3598, 1143, 3514, 3590, 2540, 1020, 1021, 2446, 1476, 1474,
	1025, 1108, 2802, 873, 2803, 2676, 1097, 880, 1002, 3503,
	3504, 3505, 3506, 1585, 2054, 1005, 1924, 619, 619, 1145,
	3520, 3091, 160, 161, 162, 3123, 1914, 887, 619, 1096,
	1560, 160, 161, 162, 2046, 2933, 139, 992, 175, 3130,
	2297, 2923, 3295, 3427, 1986, 896, 897, 645, 645, 2169,
	619, 886, 1095, 169, 2551, 885, 3207, 1108, 164, 2567,
	1003, 872, 169, 2456, 1918, 878, 163, 3275, 2834, 1483,
	1482, 3603, 3604, 113, 3596, 3277, 2832, 163, 1156, 114,
	1157, 1158, 113, 2262, 3599, 3600, 163, 876, 114, 1130,
	642, 642, 2051, 1382, 3253, 1938, 1939, 1393, 2795, 1140,
	993, 1565, 2725, 2300, 1569, 3417, 2538, 3418, 618, 1086,
	987, 1204, 1308, 2299, 1152, 1153, 2931, 689, 1356, 1094,
	691, 3629, 3430, 3412, 896, 690, 2304, 3292, 1568, 1584,
	1583, 2549, 3222, 3008, 3006, 3007, 115, 3542, 3432, 3094,
	2838, 1118, 3658, 1294, 1089, 115, 2982, 2544, 2947, 51,
	877, 2927, 1591, 1594, 1595, 1122, 3537, 1096, 51, 2012,
	1088, 3420, 1141, 1592, 3219, 1088, 2040, 2550, 2958, 1029,
	2598, 2928, 2929, 647, 646, 2730, 2176, 1000, 3212, 3528,
	1236, 987, 3460, 984, 2040, 2040, 986, 2930, 2815, 1235,
	3167, 3452, 3419, 1198, 2073, 3544, 1110, 1109, 53, 2013,
	1019, 3550, 1019, 2977, 2630, 3174, 1019, 53, 1019, 2041,
	643, 1345, 1570, 997, 3223, 1019, 998, 2057, 2059, 2060,
	1019, 2626, 2627, 3519, 2630, 1088, 3454, 894, 3361, 2274,
	2053, 3720, 3011, 172, 173, 1567, 174, 3350, 2273, 1144,
	1102, 141, 172, 173, 643, 174, 3266, 3705, 1368, 1369,
	141, 1113, 1110, 1109, 984, 2409, 2348, 986, 1111, 640,
	640, 1478, 641, 641, 2925, 3426, 883, 1343, 2294, 2295,
	638, 638, 53, 1304, 613, 637, 637, 2573, 3602, 1099,
	1101, 639, 639, 1342, 1412, 1091, 1135, 1411, 898, 1137,
	899, 1119, 1115, 1116, 849, 1274, 643, 1120, 1279, 960,
	2536, 643, 3356, 2229, 3551, 1341, 53, 908, 3474, 116,
	39, 3440, 141, 3291, 1121, 141, 50, 1138, 116, 39,
	1200, 1201, 1202, 1203, 141, 50, 120, 121, 2460, 5,
	1147, 1205, 2986, 1148, 3618, 120, 121, 172, 173, 3461,
	174, 1357, 1368, 1369, 1084, 141, 2934, 3595, 3453, 141,
	1925, 2924, 1566, 141, 1090, 3428, 983, 619, 53, 1395,
	1085, 1150, 141, 53, 141, 597, 597, 141, 2566, 141,
	2705, 3152, 2983, 1364, 597, 597, 141, 2890, 1427, 1427,
	2835, 619, 2265, 2242, 3706, 2677, 2239, 2678, 2679, 2222,
	2245, 1360, 1359, 1593, 3417, 1195, 3418, 1131, 2222, 2778,
	2779, 141, 3250, 645, 1456, 613, 141, 3296, 1429, 1466,
	1466, 3081, 3413, 1425, 1425, 1915, 3414, 1302, 3578, 1561,
	194, 654, 1133, 3010, 2570, 2571, 1247, 1248, 3002, 597,
	1434, 951, 1400, 2452, 1136, 1139, 2337, 3473, 1316, 2569,
	2228, 1146, 1127, 956, 954, 2230, 955, 2244, 1391, 2260,
	3420, 2043, 2837, 1917, 3116, 3006, 3007, 2232, 2058, 1322,
	1132, 2762, 2764, 2926, 1321, 1311, 1312, 1313, 1314, 1315,
	3363, 1317, 1433, 1309, 1320, 2945, 1305, 1323, 1319, 1151,
	1508, 3419, 1511, 1484, 649, 3352, 2055, 2056, 1520, 3351,
	2243, 3371, 3372, 3373, 3377, 3375, 3376, 3374, 3003, 2231,
	2069, 1167, 1421, 1422, 1149, 2674, 1280, 1329, 951, 1197,
	1278, 2547, 3617, 1547, 953, 3703, 3704, 952, 1207, 2579,
	2582, 2583, 2584, 2580, 2581, 2846, 2845, 1427, 1126, 1427,
	1096, 2150, 961, 1310, 3357, 3358, 1300, 1134, 1527, 1749,
	897, 1515, 1750, 1215, 1010, 1015, 1016, 1524, 902, 903,
	904, 1542, 1543, 1580, 957, 2152, 2151, 2149, 1331, 987,
	642, 951, 2696, 2697, 1748, 987, 1394, 1298, 1299, 863,
	2286, 1487, 1556, 1490, 1491, 864, 3324, 1337, 1385, 1386,
	3721, 900, 2603, 1344, 1492, 1493, 1372, 2963, 2233, 1375,
	1354, 953, 3588, 2238, 952, 1162, 1427, 2236, 1373, 1374,
	2161, 1376, 1377, 1378, 2946, 2259, 1410, 1457, 1093, 1519,
	1498, 1499, 3039, 1639, 2317, 1352, 1353, 959, 2706, 2708,
	2709, 2710, 2707, 2162, 2163, 1127, 2427, 1688, 2763, 1562,
	1966, 1627, 1563, 1506, 3035, 867, 1407, 1409, 1435, 3082,
	3119, 624, 1339, 1546, 953, 1419, 1420, 952, 1454, 1448,
	1503, 1545, 3093, 1507, 1347, 1351, 1351, 1351, 1339, 2103,
	1467, 2139, 2102, 2604, 1601, 1602, 1603, 1604, 1605, 1606,
	1607, 1608, 1609, 1610, 1611, 1612, 1468, 2451, 1347, 1347,
	1624, 1625, 3716, 1093, 3015, 2695, 866, 1577, 2229, 2232,
	869, 868, 3711, 1096, 958, 853, 854, 855, 856, 3004,
	1479, 3413, 1751, 1558, 3013, 3510, 1125, 1456, 2172, 1678,
	1679, 1680, 1760, 1427, 1765, 1766, 1741, 1768, 1769, 619,
	1730, 2604, 1694, 1535, 619, 1695, 1538, 1427, 1697, 640,
	1673, 908, 641, 1530, 1788, 1162, 1012, 1013, 1014, 2318,
	638, 1427, 1708, 1709, 1555, 637, 2082, 1395, 962, 1536,
	1554, 639, 636, 1162, 1596, 2048, 1553, 1552, 3700, 2900,
	1733, 1729, 3665, 1551, 1550, 3712, 2898, 1576, 1687, 1964,
	1571, 1127, 1812, 2318, 2781, 2553, 1164, 1165, 1166, 1163,
	2318, 1819, 1819, 3638, 1395, 3632, 1395, 1395, 2541, 2441,
	619, 619, 3614, 1887, 1887, 1124, 3039, 1427, 1892, 1893,
	1905, 1164, 1165, 1166, 1163, 1622, 1623, 1615, 1670, 1671,
	1770, 1674, 1465, 1465, 597, 1775, 1427, 1767, 3570, 1689,
	2233, 3545, 2081, 2171, 2432, 2228, 2222, 2227, 1275, 2225,
	2230, 3666, 1696, 2348, 1698, 3666, 1699, 1700, 1701, 1816,
	3533, 2217, 2205, 858, 619, 1887, 1427, 2867, 1950, 2039,
	619, 619, 619, 1955, 1956, 3493, 3639, 1574, 3436, 1906,
	1960, 1961, 1962, 2215, 2144, 3615, 1968, 2138, 1736, 1841,
	2137, 3492, 1125, 194, 2110, 2030, 194, 194, 3487, 194,
	1941, 1825, 1826, 3486, 2231, 1886, 1888, 1936, 1702, 1330,
	3485, 3436, 1521, 1630, 2048, 1413, 1756, 1757, 1758, 1164,
	1165, 1166, 1163, 3728, 853, 854, 855, 856, 1771, 1772,
	1773, 1774, 1731, 3534, 1919, 3484, 3713, 1688, 1688, 2010,
	1737, 1933, 1934, 3163, 2785, 2606, 1688, 1688, 3494, 1164,
	1165, 1166, 1163, 2024, 1911, 1946, 1913, 1947, 3464, 2454,
	1755, 1946, 1946, 1946, 2194, 2079, 1931, 1932, 1949, 1790,
	1791, 3436, 1820, 2453, 2445, 3129, 3436, 2229, 2232, 2210,
	1788, 3463, 1785, 3436, 1427, 2037, 1586, 1587, 1588, 1589,
	1590, 1821, 1784, 2018, 1926, 2204, 1795, 1515, 1952, 1953,
	1954, 1438, 3435, 1977, 1801, 2098, 1980, 1981, 3436, 1983,
	3228, 1822, 987, 3176, 2083, 987, 1789, 642, 1823, 1824,
	3142, 987, 3109, 2029, 3387, 3105, 3023, 2757, 1631, 1796,
	1797, 2048, 1635, 1636, 1637, 1638, 1804, 1971, 1958, 1532,
	2516, 1672, 2031, 1212, 1891, 1112, 1806, 1807, 1894, 1682,
	2508, 1910, 1811, 1912, 2048, 1814, 1815, 2014, 1800, 1920,
	1802, 1803, 1081, 1764, 2467, 2449, 1817, 1079, 2437, 1805,
	2434, 2429, 858, 2422, 1809, 3436, 3226, 1780, 2005, 1195,
	1935, 1810, 1179, 2348, 2968, 984, 3177, 2005, 986, 1948,
	2829, 1793, 2420, 3143, 984, 3110, 1347, 986, 3106, 3024,
	2318, 1734, 2418, 2416, 3538, 1348, 2408, 2959, 1972, 2233,
	1351, 1974, 987, 1162, 2228, 2222, 2227, 2193, 2225, 2230,
	1415, 2485, 1351, 1162, 2062, 2140, 2117, 2066, 2067, 1335,
	2116, 2101, 865, 1336, 2092, 1991, 2091, 1162, 2194, 3722,
	2020, 2430, 3691, 2435, 2430, 2257, 2423, 1764, 3539, 1078,
	1074, 1075, 1076, 1077, 3434, 2490, 2011, 2489, 2488, 2486,
	3409, 1417, 2017, 1792, 2015, 2421, 2090, 3067, 3354, 3325,
	2047, 2028, 1418, 2231, 694, 2417, 2417, 619, 619, 619,
	2026, 1539, 1677, 1676, 2960, 984, 640, 1808, 986, 641,
	2194, 2032, 619, 619, 619, 619, 1574, 638, 2139, 1162,
	3155, 3353, 637, 1162, 1162, 2191, 2027, 1162, 639, 1162,
	2474, 2111, 2112, 3326, 2114, 2197, 1395, 728, 738, 3339,
	1414, 2121, 1349, 3297, 2487, 3135, 2402, 729, 2961, 730,
	734, 737, 733, 731, 732, 2061, 3040, 1677, 1676, 1162,
	1734, 2070, 1395, 2048, 3156, 1734, 1734, 2063, 3033, 3028,
	3153, 3025, 2064, 2065, 1540, 1615, 2075, 1975, 870, 2251,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1179, 2165, 2166,
	2167, 1177, 1187, 1188, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1179, 735, 2182, 2183, 2184, 2185, 1182, 1183, 1184,
	1185, 1186, 1179, 1714, 3154, 1976, 2940, 2727, 1979, 2577,
	1621, 1982, 2546, 2464, 1984, 2433, 2339, 1326, 1634, 1325,
	1098, 2258, 1752, 1634, 736, 2076, 1618, 1620, 1617, 653,
	1619, 2322, 2322, 1905, 2322, 1178, 1177, 1187, 1188, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1179, 2787, 1164, 1165,
	1166, 1163, 597, 597, 2105, 1166, 1163, 2141, 1707, 3070,
	1096, 3589, 2133, 2135, 2136, 2023, 1427, 619, 1471, 1163,
	1975, 3366, 2491, 2492, 1164, 1165, 1166, 1163, 3365, 2155,
	2804, 2666, 619, 1236, 2664, 2412, 1379, 2221, 1096, 2392,
	613, 2642, 1235, 2640, 3345, 1466, 2173, 1905, 2220, 3696,
	2397, 2343, 2399, 3298, 3299, 3719, 194, 1214, 987, 2263,
	3695, 2356, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 3642,
	1213, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283,
	2284, 2285, 3613, 2287, 2288, 2289, 2290, 2291, 2198, 2292,
	2326, 2335, 3612, 2336, 2324, 3540, 2328, 2214, 1187, 1188,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1179, 1433, 2211,
	2447, 2340, 2341, 2037, 2072, 3489, 3477, 3718, 2077, 3293,
	1427, 2500, 1427, 1946, 1427, 2234, 2235, 3467, 2240, 1096,
	2529, 984, 2530, 3457, 986, 3400, 1335, 2466, 2199, 2200,
	1336, 1164, 1165, 1166, 1163, 3328, 3327, 1692, 2202, 2203,
	3068, 3168, 2461, 3127, 2396, 2717, 2206, 2457, 3157, 2089,
	2350, 2715, 1693, 1427, 2494, 3126, 2403, 2096, 1164, 1165,
	1166, 1163, 2301, 2201, 2932, 2825, 3294, 2476, 2207, 2501,
	2330, 2208, 2799, 2086, 1427, 1164, 1165, 1166, 1163, 2113,
	2209, 2094, 2493, 1471, 2118, 2119, 2120, 2713, 1425, 2123,
	2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2344,
	3128, 2347, 2716, 2502, 1164, 1165, 1166, 1163, 2714, 1425,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1168, 2798, 2700,
	2699, 1351, 2395, 2702, 1164, 1165, 1166, 1163, 2698, 2505,
	2506, 1096, 2393, 2404, 2690, 1096, 2684, 1164, 1165, 1166,
	1163, 2683, 1427, 2682, 2712, 2574, 1472, 2093, 2482, 2681,
	2542, 1887, 2143, 1994, 2554, 1993, 1992, 2463, 2356, 2602,
	1988, 1987, 2503, 1407, 1409, 2608, 1164, 1165, 1166, 1163,
	2458, 2443, 2444, 3623, 1164, 1165, 1166, 1163, 2439, 1944,
	2701, 2618, 2848, 1943, 1942, 2450, 2448, 1533, 2576, 1293,
	1096, 689, 2533, 3134, 691, 2394, 2455, 2732, 2639, 690,
	1164, 1165, 1166, 1163, 2401, 1096, 1096, 1096, 1819, 2918,
	2592, 1096, 3715, 2650, 2651, 2652, 2653, 1096, 2660, 2080,
	2661, 2662, 2478, 2663, 2478, 2665, 2472, 2588, 987, 2645,
	2646, 3714, 2468, 2469, 2649, 2484, 2660, 3526, 3260, 3689,
	2656, 3657, 3557, 2589, 1164, 1165, 1166, 1163, 2322, 3656,
	2600, 3653, 3522, 2471, 3281, 740, 119, 1164, 1165, 1166,
	1163, 119, 2718, 1841, 1164, 1165, 1166, 1163, 2609, 3302,
	597, 3507, 2563, 3498, 3481, 1887, 1096, 1905, 1905, 1905,
	1905, 1164, 1165, 1166, 1163, 1734, 3476, 1734, 1096, 1905,
	3475, 3431, 2322, 2632, 1164, 1165, 1166, 1163, 3429, 2740,
	2637, 3401, 3347, 3309, 2637, 1734, 1734, 3280, 1427, 2633,
	3279, 2740, 625, 3258, 3256, 119, 2555, 2511, 2512, 619,
	619, 3235, 2572, 2517, 2644, 3232, 2556, 3230, 2558, 2722,
	3125, 2599, 3124, 3468, 2601, 2607, 3121, 2078, 1465, 8,
	1574, 7, 1178, 1177, 1187, 1188, 1180, 1181, 1182, 1183,
	1184, 1185, 1186, 1179, 2619, 2622, 3102, 2620, 3100, 3034,
	2635, 2672, 2673, 3030, 3021, 2641, 3020, 2941, 2905, 2753,
	1164, 1165, 1166, 1163, 2904, 194, 2688, 2689, 2648, 2902,
	194, 2148, 2839, 2836, 2797, 2638, 2436, 1178, 1177, 1187,
	1188, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1179, 2680,
	2724, 1688, 3269, 1688, 2771, 2711, 2814, 2860, 2692, 2703,
	2775, 2776, 1164, 1165, 1166, 1163, 2824, 2693, 2691, 2687,
	2686, 2685, 1427, 2543, 2440, 2831, 1996, 985, 2723, 1164,
	1165, 1166, 1163, 2611, 119, 2610, 2728, 1990, 2614, 2741,
	2742, 2743, 2744, 1744, 2615, 2616, 795, 794, 2754, 119,
	2475, 119, 2756, 2481, 2752, 1675, 1743, 2809, 1534, 1243,
	2495, 2496, 2772, 1491, 2769, 2817, 2859, 2617, 2498, 2499,
	1239, 3553, 1764, 1492, 1493, 987, 3268, 1238, 1082, 862,
	2755, 1733, 3422, 987, 2504, 2788, 2813, 3421, 3410, 3282,
	2792, 2765, 3267, 1164, 1165, 1166, 1163, 3148, 1498, 1499,
	2782, 3147, 3146, 1164, 1165, 1166, 1163, 2853, 3118, 2855,
	3114, 3112, 1586, 1734, 3111, 2811, 1506, 177, 3108, 166,
	140, 2903, 2818, 2790, 2828, 3107, 3101, 2833, 1096, 2786,
	2789, 3099, 3083, 1503, 2921, 3073, 1507, 3072, 2807, 3058,
	3057, 2726, 2810, 3216, 2936, 2805, 2969, 2908, 2897, 619,
	2821, 2820, 2812, 2819, 3097, 2865, 2858, 2850, 2849, 2843,
	2780, 2950, 1096, 2552, 2419, 1096, 1096, 2415, 2414, 2840,
	1164, 1165, 1166, 1163, 1905, 2191, 2863, 2967, 2612, 2613,
	2827, 1164, 1165, 1166, 1163, 2122, 171, 177, 2847, 2115,
	2851, 2852, 2109, 2108, 2107, 2251, 2106, 2104, 2100, 2856,
	2857, 2862, 2099, 1164, 1165, 1166, 1163, 2992, 2944, 2995,
	2097, 2995, 2995, 2854, 2088, 2085, 1096, 2084, 2861, 1995,
	1727, 2953, 1661, 2899, 2956, 2841, 1726, 1725, 1164, 1165,
	1166, 1163, 1691, 1690, 2588, 3016, 2527, 987, 1681, 987,
	2942, 2526, 987, 1427, 1427, 1164, 1165, 1166, 1163, 2975,
	3012, 1439, 2901, 1437, 3014, 2906, 171, 3641, 1233, 3552,
	2979, 2981, 3495, 1164, 1165, 1166, 1163, 987, 1164, 1165,
	1166, 1163, 3017, 3018, 3483, 2937, 3478, 1486, 1425, 1425,
	3381, 2965, 3336, 3364, 3360, 3338, 2943, 3322, 3243, 2952,
	619, 3241, 2954, 2955, 2962, 2921, 3214, 3213, 2907, 3210,
	2966, 2991, 3209, 3175, 3172, 3000, 1887, 1887, 2872, 2873,
	984, 2974, 3170, 986, 2874, 2875, 2876, 2877, 2221, 2878,
	2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2220,
	2525, 2996, 2997, 3569, 2524, 3001, 1178, 1177, 1187, 1188,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1179, 3137, 1497,
	1488, 1502, 1096, 1505, 1494, 1333, 2494, 1164, 1165, 1166,
	1163, 1164, 1165, 1166, 1163, 3071, 2719, 2643, 2595, 2594,
	2590, 2557, 2528, 2428, 2338, 2356, 2293, 2192, 2990, 2164,
	2142, 1946, 2791, 1616, 2793, 1657, 171, 1957, 1754, 1740,
	1559, 1654, 1518, 1495, 1292, 1656, 1653, 1655, 1659, 1660,
	1277, 2998, 1734, 1658, 1273, 1272, 1271, 1734, 619, 3032,
	1270, 1269, 1268, 3027, 3031, 2023, 3026, 1267, 3022, 1266,
	3036, 3037, 3047, 3029, 1389, 1390, 1265, 1392, 1264, 1396,
	1397, 1398, 1263, 1262, 1261, 3051, 1260, 3054, 3055, 3056,
	1259, 1258, 2970, 1257, 1256, 1255, 1254, 2971, 2972, 1253,
	2842, 2523, 1252, 1251, 2973, 3060, 2522, 1250, 1249, 3066,
	1246, 1443, 1444, 1445, 1446, 1447, 3334, 1449, 1450, 1451,
	1452, 1453, 1245, 1244, 2864, 1459, 1460, 1461, 1164, 1165,
	1166, 1163, 2521, 1164, 1165, 1166, 1163, 1242, 119, 119,
	985, 3086, 3084, 1241, 1240, 1237, 1230, 3090, 3089, 3092,
	3085, 1229, 1227, 1226, 1225, 1224, 3103, 1223, 1222, 1164,
	1165, 1166, 1163, 2520, 1221, 1220, 3095, 1219, 3141, 1218,
	1178, 1177, 1187, 1188, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1179, 1217, 2322, 1905, 3160, 2519, 3117, 1216, 1211,
	1164, 1165, 1166, 1163, 3120, 1210, 1209, 1664, 1665, 1666,
	1667, 1668, 1669, 1662, 1663, 987, 1208, 3178, 1129, 1080,
	1096, 1196, 987, 1164, 1165, 1166, 1163, 3567, 3671, 2992,
	3038, 2518, 3565, 1096, 3043, 3044, 3563, 3211, 2196, 2178,
	1117, 3669, 3115, 3179, 1096, 3050, 3225, 3628, 3046, 3049,
	1427, 2578, 2478, 2515, 2349, 1998, 3218, 1128, 1164, 1165,
	1166, 1163, 2514, 2749, 3132, 3048, 1887, 2656, 2750, 3162,
	1096, 2747, 2751, 2746, 2314, 2315, 2748, 2999, 2745, 3227,
	1164, 1165, 1166, 1163, 3343, 1425, 2438, 3208, 3245, 1164,
	1165, 1166, 1163, 2740, 2431, 3169, 3246, 3171, 3201, 194,
	3165, 3159, 1327, 1782, 1783, 3158, 2939, 3138, 3139, 3140,
	2513, 2823, 1096, 3144, 3145, 2261, 3237, 1777, 1778, 1779,
	3087, 3088, 3217, 3215, 3247, 3221, 104, 3220, 2988, 55,
	2989, 3061, 3224, 2507, 1878, 2740, 1480, 1164, 1165, 1166,
	1163, 2426, 54, 3231, 3229, 3244, 3234, 2462, 2497, 1529,
	1096, 2443, 2444, 3239, 3238, 2154, 1512, 2668, 3236, 3233,
	1164, 1165, 1166, 1163, 2669, 2670, 2671, 1281, 1096, 1427,
	1427, 1959, 3265, 1123, 2950, 1164, 1165, 1166, 1163, 2916,
	2909, 2621, 3249, 621, 2596, 3317, 622, 3317, 2473, 2213,
	2187, 3305, 1786, 3261, 1753, 3680, 3262, 3480, 3307, 623,
	3019, 1096, 3332, 1096, 1425, 1627, 2302, 3311, 3312, 3251,
	2298, 3335, 1890, 3337, 1388, 1164, 1165, 1166, 1163, 1387,
	1427, 1155, 3278, 3053, 1580, 3289, 1580, 1363, 3288, 3287,
	2774, 1629, 1677, 1676, 3314, 1288, 1289, 3308, 619, 2153,
	1096, 1096, 1286, 1287, 1096, 1096, 2025, 3310, 1284, 1285,
	1340, 3321, 987, 1318, 3320, 1627, 3648, 3161, 1164, 1165,
	1166, 1163, 3162, 3305, 3305, 3164, 3331, 3305, 3305, 1282,
	1283, 3378, 1788, 3383, 3392, 3646, 3606, 3341, 3208, 3586,
	3344, 3368, 3369, 3396, 3397, 3379, 3380, 3348, 3585, 3201,
	3583, 3529, 3340, 3496, 3096, 3395, 1427, 3394, 3333, 1436,
	3257, 3098, 3346, 625, 2310, 2313, 2314, 2315, 2311, 3104,
	2312, 2316, 3080, 3389, 2470, 3079, 3064, 1339, 2246, 2216,
	3284, 1531, 3063, 2784, 3416, 3408, 2826, 2305, 2180, 3367,
	3388, 1425, 3113, 2087, 3390, 119, 3384, 1114, 1178, 1177,
	1187, 1188, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1179,
	3672, 3403, 3673, 3449, 3362, 3443, 3059, 3411, 3407, 1093,
	3270, 3415, 3271, 1355, 2310, 2313, 2314, 2315, 2311, 1096,
	2312, 2316, 3673, 3672, 181, 3, 63, 2, 1951, 3466,
	3692, 3472, 3693, 1, 3437, 3385, 2534, 1738, 1290, 3386,
	857, 852, 1580, 1404, 2331, 1937, 1431, 1742, 3444, 119,
	3265, 859, 3446, 3441, 2758, 119, 3445, 3458, 2759, 3052,
	3462, 2761, 1096, 2548, 2044, 2729, 2296, 1427, 119, 2168,
	1759, 987, 853, 854, 855, 856, 2935, 1093, 1328, 901,
	119, 1683, 1544, 1009, 1107, 3305, 1541, 3479, 1106, 1104,
	1632, 742, 2001, 2720, 2694, 3391, 3490, 3679, 3708, 3640,
	3329, 3330, 1425, 3488, 3518, 3682, 1557, 726, 3577, 3499,
	3644, 3501, 3512, 1734, 3406, 2049, 1160, 1096, 2806, 924,
	783, 753, 1228, 1522, 1734, 2870, 3497, 3240, 2868, 1011,
	3242, 3530, 752, 3131, 2568, 2777, 3451, 1008, 925, 1985,
	3305, 3404, 1481, 1485, 2212, 3525, 3459, 3248, 3548, 3342,
	2984, 2629, 3543, 3173, 3274, 3272, 3524, 3521, 3273, 3547,
	660, 1916, 595, 969, 1096, 3532, 3382, 1997, 661, 2195,
	3597, 3482, 1427, 881, 2177, 3572, 3575, 3562, 3564, 3566,
	3568, 882, 874, 2586, 3541, 2585, 1597, 3305, 3546, 1169,
	3576, 1614, 2888, 2889, 3555, 2071, 1206, 698, 2074, 2565,
	3491, 3571, 3196, 2770, 62, 3561, 61, 1425, 60, 59,
	1967, 202, 1427, 3582, 744, 3449, 201, 3580, 3300, 1178,
	1177, 1187, 1188, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1179, 3616, 3574, 3684, 3605, 724, 723, 3624, 722, 721,
	3609, 3608, 720, 3607, 719, 2309, 2307, 1425, 3610, 3611,
	2306, 1900, 1899, 1965, 2948, 2659, 2654, 3531, 1830, 1828,
	2647, 2241, 3535, 3536, 2248, 1827, 3625, 3558, 3559, 3359,
	2704, 3264, 3633, 1776, 3634, 2237, 3635, 3647, 3636, 3649,
	3650, 3637, 1847, 3645, 3643, 2675, 1844, 1096, 1843, 3512,
	2667, 3652, 3355, 3556, 3349, 1875, 3447, 3316, 912, 3180,
	3181, 3187, 2186, 1034, 1030, 3472, 3661, 1032, 1033, 1031,
	3659, 2483, 2218, 2911, 3663, 3664, 3662, 2160, 2159, 2157,
	3678, 3668, 3686, 3670, 2156, 3685, 3674, 3675, 3676, 3677,
	3667, 1303, 3517, 3185, 3593, 3283, 2354, 2352, 3045, 3697,
	3041, 1096, 3690, 2009, 2021, 2822, 1901, 1897, 2179, 3424,
	1781, 3698, 3547, 3699, 875, 2175, 3701, 156, 49, 101,
	154, 3707, 3710, 48, 1580, 1904, 90, 910, 911, 89,
	100, 3197, 152, 47, 186, 185, 188, 187, 951, 184,
	2405, 2406, 183, 1469, 3188, 3717, 182, 3587, 3319, 847,
	3438, 38, 37, 3686, 3724, 3183, 3685, 3723, 33, 12,
	3205, 3206, 11, 3710, 3725, 34, 3184, 21, 20, 3729,
	1548, 3654, 3655, 19, 25, 31, 1703, 1704, 1705, 1706,
	30, 112, 1710, 1711, 1712, 1713, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 111, 29, 119, 110,
	109, 119, 119, 3189, 119, 108, 107, 1190, 106, 1194,
	28, 18, 42, 41, 40, 9, 2866, 99, 97, 27,
	98, 953, 95, 96, 952, 1191, 1193, 1189, 93, 1192,
	1178, 1177, 1187, 1188, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1179, 985, 91, 74, 119, 73, 72, 87, 86,
	85, 985, 84, 83, 82, 80, 81, 923, 71, 70,
	69, 937, 68, 67, 1215, 119, 94, 92, 78, 913,
	1178, 1177, 1187, 1188, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1179, 88, 79, 77, 76, 75, 66, 65, 64,
	138, 137, 136, 135, 134, 132, 915, 3204, 133, 2227,
	131, 130, 129, 128, 127, 126, 43, 44, 45, 46,
	148, 147, 149, 151, 153, 150, 155, 145, 143, 146,
	144, 142, 3554, 57, 3193, 102, 17, 24, 4, 0,
	1876, 0, 0, 0, 0, 1837, 0, 0, 0, 0,
	0, 0, 1196, 0, 0, 0, 3190, 3194, 3192, 3191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	935, 0, 0, 0, 0, 1878, 1846, 0, 0, 0,
	0, 0, 0, 0, 0, 1879, 1880, 0, 0, 0,
	0, 934, 0, 0, 3199, 3200, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 0, 3621, 0, 0, 0,
	0, 1845, 0, 914, 946, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	0, 3207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3186, 0, 0, 0, 0, 0, 3198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3621, 943, 947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 931, 1869, 929, 933, 950, 0, 0,
	0, 930, 927, 926, 0, 932, 917, 918, 916, 919,
	920, 921, 922, 0, 948, 0, 949, 1876, 0, 0,
	3621, 0, 1837, 0, 0, 0, 0, 944, 945, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1878, 1846, 0, 0, 0, 0, 0, 0,
	0, 0, 1879, 1880, 940, 1836, 1838, 1835, 0, 1832,
	939, 0, 0, 0, 1857, 0, 3727, 0, 0, 0,
	0, 0, 0, 0, 0, 1863, 0, 0, 1845, 3203,
	0, 0, 0, 1848, 0, 1831, 0, 0, 0, 0,
	0, 0, 0, 1853, 0, 1851, 1885, 0, 0, 1852,
	1854, 1856, 0, 1858, 1859, 1860, 1864, 1865, 1866, 1868,
	1871, 1872, 1873, 0, 0, 0, 0, 0, 0, 0,
	1861, 1870, 1862, 0, 0, 0, 0, 0, 2325, 0,
	0, 0, 1840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 670, 677, 667, 0, 0, 0,
	938, 0, 0, 3202, 1877, 674, 675, 0, 676, 680,
	0, 1869, 662, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 685, 0, 0, 0, 0, 0, 0, 0,
	1833, 1834, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1904, 0, 0, 0, 0, 0, 1874, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1850, 0, 0, 0, 0,
	0, 0, 1849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1836, 2624, 1835, 0, 2623, 0, 0, 0,
	0, 1857, 0, 0, 0, 0, 1867, 0, 0, 0,
	0, 0, 1863, 0, 0, 1855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1882, 1881,
	0, 0, 1851, 1885, 0, 0, 1852, 1854, 1856, 0,
	1858, 1859, 1860, 1864, 1865, 1866, 1868, 1871, 1872, 1873,
	0, 0, 0, 0, 0, 0, 0, 1861, 1870, 1862,
	0, 0, 0, 0, 0, 0, 1052, 0, 0, 1840,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1833, 1834, 0,
	663, 665, 664, 1884, 0, 0, 1883, 0, 0, 0,
	669, 0, 0, 0, 0, 1874, 0, 0, 0, 0,
	0, 0, 673, 0, 0, 0, 0, 0, 0, 688,
	0, 0, 1850, 0, 0, 0, 666, 0, 0, 1849,
	0, 0, 0, 0, 1052, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 1867, 0, 0, 0, 1038, 0, 0,
	0, 0, 1855, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1661, 0, 0, 1882, 1881, 1060, 1064, 1066,
	1068, 1070, 1071, 1073, 0, 1078, 1074, 1075, 1076, 1077,
	0, 1055, 1056, 1057, 1058, 1036, 1037, 1061, 0, 1039,
	0, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1051, 1053, 1049, 1050, 1059, 0, 0, 0, 0, 0,
	0, 0, 1063, 1065, 1067, 1069, 1072, 0, 1842, 0,
	0, 0, 0, 0, 0, 668, 672, 678, 0, 679,
	681, 0, 0, 682, 683, 684, 0, 0, 686, 687,
	0, 0, 0, 0, 0, 1038, 0, 0, 0, 1028,
	1054, 1052, 1904, 1904, 1904, 1904, 0, 0, 0, 0,
	1884, 0, 0, 1883, 1904, 1060, 1064, 1066, 1068, 1070,
	1071, 1073, 0, 1078, 1074, 1075, 1076, 1077, 0, 1055,
	1056, 1057, 1058, 1036, 1037, 1061, 0, 1039, 0, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053,
	1049, 1050, 1059, 1164, 1165, 1166, 1163, 0, 0, 0,
	1063, 1065, 1067, 1069, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1657, 0, 0, 0, 0,
	0, 1654, 0, 0, 0, 1656, 1653, 1655, 1659, 1660,
	0, 0, 0, 1658, 0, 0, 0, 0, 1054, 0,
	119, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1876, 0, 1038, 0, 0, 119, 0, 177, 0, 0,
	0, 0, 1661, 119, 0, 0, 0, 0, 2479, 2480,
	0, 0, 1060, 1064, 1066, 1068, 1070, 1071, 1073, 3315,
	1078, 1074, 1075, 1076, 1077, 1878, 1055, 1056, 1057, 1058,
	1036, 1037, 1061, 0, 1039, 0, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1051, 1053, 1049, 1050, 1059,
	0, 0, 0, 0, 0, 0, 0, 1063, 1065, 1067,
	1069, 1072, 0, 0, 0, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1054, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1664, 1665, 1666,
	1667, 1668, 1669, 1662, 1663, 0, 0, 0, 0, 0,
	0, 671, 670, 677, 667, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 675, 0, 676, 680, 0, 0,
	662, 0, 0, 0, 1869, 0, 0, 0, 0, 0,
	685, 0, 1062, 0, 0, 0, 0, 985, 0, 119,
	0, 0, 119, 0, 0, 1657, 0, 0, 0, 1904,
	0, 1654, 0, 0, 0, 1656, 1653, 1655, 1659, 1660,
	0, 0, 0, 1658, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 689, 0, 0, 691, 0, 0, 0,
	0, 690, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 1851, 1885, 0, 0, 1852,
	1854, 1856, 0, 1858, 1859, 1860, 1864, 1865, 1866, 1868,
	1871, 1872, 1873, 0, 0, 0, 0, 0, 0, 0,
	1861, 1870, 1862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1877, 0, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1664, 1665, 1666,
	1667, 1668, 1669, 1662, 1663, 0, 0, 0, 663, 665,
	664, 0, 0, 0, 0, 0, 0, 0, 669, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1874, 0,
	673, 0, 0, 0, 0, 0, 0, 688, 0, 0,
	0, 0, 0, 0, 666, 1850, 0, 1062, 657, 0,
	0, 0, 1849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1867, 0, 0, 0,
	0, 0, 0, 0, 0, 1855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 119, 668, 672, 678, 0, 679, 681, 0,
	0, 682, 683, 684, 0, 0, 686, 687, 0, 0,
	0, 0, 0, 0, 0, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 141, 0, 0, 0, 713, 0, 1904,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 751, 525, 476, 395, 348, 543, 542, 0,
	0, 818, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 0, 0, 741, 795, 794, 728,
	738, 0, 0, 277, 200, 471, 590, 473, 472, 729,
	0, 730, 734, 737, 733, 731, 732, 0, 810, 0,
	0, 0, 0, 0, 0, 697, 709, 0, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 706, 707, 119, 0, 0, 0, 761, 0,
	708, 0, 0, 756, 735, 739, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 736, 759, 763, 298,
	832, 757, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 833, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 119, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 754, 0,
	587, 0, 427, 0, 0, 816, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 758, 0, 385, 366,
	829, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 1685, 1684, 1686, 439, 332, 333, 0, 311,
	259, 260, 604, 814, 362, 553, 586, 478, 0, 828,
	809, 811, 812, 815, 819, 820, 821, 822, 823, 825,
	827, 831, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 119, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 830, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 762, 528, 529, 352, 353, 354, 355,
	817, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 839,
	813, 838, 840, 841, 837, 842, 843, 824, 718, 0,
	769, 835, 834, 836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 802, 776, 777, 778, 715,
	779, 773, 774, 716, 775, 803, 767, 799, 800, 743,
	770, 780, 798, 781, 801, 804, 805, 844, 845, 787,
	771, 225, 846, 784, 806, 797, 796, 782, 768, 807,
	808, 750, 745, 785, 786, 772, 790, 791, 792, 717,
	764, 765, 766, 788, 789, 746, 747, 748, 749, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 793, 760, 605, 474, 475, 585,
	0, 710, 0, 0, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 713, 0, 0,
	0, 304, 1735, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 751, 525, 476, 395, 348, 543, 542, 0,
	0, 818, 826, 0, 0, 0, 0, 0, 0, 0,
	1928, 0, 0, 705, 0, 0, 741, 795, 794, 728,
	738, 0, 0, 277, 200, 471, 590, 473, 472, 729,
	0, 730, 734, 737, 733, 731, 732, 0, 810, 0,
	0, 0, 0, 0, 0, 697, 709, 0, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 706, 707, 0, 0, 0, 0, 761, 0,
	708, 0, 0, 1929, 735, 739, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 736, 759, 763, 298,
	832, 757, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 833, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 754, 0,
	587, 0, 427, 0, 0, 816, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 758, 0, 385, 366,
	829, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 814, 362, 553, 586, 478, 0, 828,
	809, 811, 812, 815, 819, 820, 821, 822, 823, 825,
	827, 831, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 830, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 762, 528, 529, 352, 353, 354, 355,
	817, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 839,
	813, 838, 840, 841, 837, 842, 843, 824, 718, 0,
	769, 835, 834, 836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 802, 776, 777, 778, 715,
	779, 773, 774, 716, 775, 803, 767, 799, 800, 743,
	770, 780, 798, 781, 801, 804, 805, 844, 845, 787,
	771, 225, 846, 784, 806, 797, 796, 782, 768, 807,
	808, 750, 745, 785, 786, 772, 790, 791, 792, 717,
	764, 765, 766, 788, 789, 746, 747, 748, 749, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 793, 0, 605, 474, 475, 585,
	0, 710, 177, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	1199, 525, 476, 395, 348, 543, 542, 0, 0, 818,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 705, 0, 0, 741, 795, 794, 728, 738, 0,
	0, 277, 200, 471, 590, 473, 472, 729, 0, 730,
	734, 737, 733, 731, 732, 0, 810, 0, 0, 0,
	0, 0, 0, 697, 709, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 707, 0, 0, 0, 0, 761, 0, 708, 0,
	0, 756, 735, 739, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 736, 759, 763, 298, 832, 757,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 833, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 754, 0, 587, 0,
	427, 0, 0, 816, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 758, 0, 385, 366, 829, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 814, 362, 553, 586, 478, 0, 828, 809, 811,
	812, 815, 819, 820, 821, 822, 823, 825, 827, 831,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 830, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 762, 528, 529, 352, 353, 354, 355, 817, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 839, 813, 838,
	840, 841, 837, 842, 843, 824, 718, 0, 769, 835,
	834, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 141, 376,
	309, 549, 550, 802, 776, 777, 778, 715, 779, 773,
	774, 716, 775, 803, 767, 799, 800, 743, 770, 780,
	798, 781, 801, 804, 805, 844, 845, 787, 771, 225,
	846, 784, 806, 797, 796, 782, 768, 807, 808, 750,
	745, 785, 786, 772, 790, 791, 792, 717, 764, 765,
	766, 788, 789, 746, 747, 748, 749, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 793, 760, 605, 474, 475, 585, 0, 710,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 0, 304,
	3726, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	751, 525, 476, 395, 348, 543, 542, 0, 0, 818,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 705, 0, 0, 741, 795, 794, 728, 738, 0,
	0, 277, 200, 471, 590, 473, 472, 729, 0, 730,
	734, 737, 733, 731, 732, 0, 810, 0, 0, 0,
	0, 0, 0, 697, 709, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 707, 0, 0, 0, 0, 761, 0, 708, 0,
	0, 756, 735, 739, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 736, 759, 763, 298, 832, 757,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 833, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 754, 0, 587, 0,
	427, 0, 0, 816, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 758, 0, 385, 366, 829, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 814, 362, 553, 586, 478, 0, 828, 809, 811,
	812, 815, 819, 820, 821, 822, 823, 825, 827, 831,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 830, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 762, 528, 529, 352, 353, 354, 355, 817, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 839, 813, 838,
	840, 841, 837, 842, 843, 824, 718, 0, 769, 835,
	834, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 802, 776, 777, 778, 715, 779, 773,
	774, 716, 775, 803, 767, 799, 800, 743, 770, 780,
	798, 781, 801, 804, 805, 844, 845, 787, 771, 225,
	846, 784, 806, 797, 796, 782, 768, 807, 808, 750,
	745, 785, 786, 772, 790, 791, 792, 717, 764, 765,
	766, 788, 789, 746, 747, 748, 749, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 793, 760, 605, 474, 475, 585, 0, 710,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	751, 525, 476, 395, 348, 543, 542, 0, 0, 818,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 705, 0, 0, 741, 795, 794, 728, 738, 0,
	0, 277, 200, 471, 590, 473, 472, 729, 0, 730,
	734, 737, 733, 731, 732, 0, 810, 0, 0, 0,
	0, 0, 0, 697, 709, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 707, 0, 0, 0, 0, 761, 0, 708, 0,
	0, 756, 735, 739, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 736, 759, 763, 298, 832, 757,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 833, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 754, 0, 587, 0,
	427, 0, 0, 816, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 758, 0, 385, 366, 829, 3622,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 814, 362, 553, 586, 478, 0, 828, 809, 811,
	812, 815, 819, 820, 821, 822, 823, 825, 827, 831,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 830, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 762, 528, 529, 352, 353, 354, 355, 817, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 839, 813, 838,
	840, 841, 837, 842, 843, 824, 718, 0, 769, 835,
	834, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 802, 776, 777, 778, 715, 779, 773,
	774, 716, 775, 803, 767, 799, 800, 743, 770, 780,
	798, 781, 801, 804, 805, 844, 845, 787, 771, 225,
	846, 784, 806, 797, 796, 782, 768, 807, 808, 750,
	745, 785, 786, 772, 790, 791, 792, 717, 764, 765,
	766, 788, 789, 746, 747, 748, 749, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 793, 760, 605, 474, 475, 585, 0, 710,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 0, 304,
	1735, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	751, 525, 476, 395, 348, 543, 542, 0, 0, 818,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 705, 0, 0, 741, 795, 794, 728, 738, 0,
	0, 277, 200, 471, 590, 473, 472, 729, 0, 730,
	734, 737, 733, 731, 732, 0, 810, 0, 0, 0,
	0, 0, 0, 697, 709, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 707, 0, 0, 0, 0, 761, 0, 708, 0,
	0, 756, 735, 739, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 736, 759, 763, 298, 832, 757,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 833, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 754, 0, 587, 0,
	427, 0, 0, 816, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 758, 0, 385, 366, 829, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 814, 362, 553, 586, 478, 0, 828, 809, 811,
	812, 815, 819, 820, 821, 822, 823, 825, 827, 831,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 830, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 762, 528, 529, 352, 353, 354, 355, 817, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 839, 813, 838,
	840, 841, 837, 842, 843, 824, 718, 0, 769, 835,
	834, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 802, 776, 777, 778, 715, 779, 773,
	774, 716, 775, 803, 767, 799, 800, 743, 770, 780,
	798, 781, 801, 804, 805, 844, 845, 787, 771, 225,
	846, 784, 806, 797, 796, 782, 768, 807, 808, 750,
	745, 785, 786, 772, 790, 791, 792, 717, 764, 765,
	766, 788, 789, 746, 747, 748, 749, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 793, 760, 605, 474, 475, 585, 0, 710,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	751, 525, 476, 395, 348, 543, 542, 0, 0, 818,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 705, 0, 0, 741, 795, 794, 728, 738, 0,
	0, 277, 200, 471, 590, 473, 472, 729, 0, 730,
	734, 737, 733, 731, 732, 0, 810, 0, 0, 0,
	0, 0, 0, 697, 709, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 707, 1464, 0, 0, 0, 761, 0, 708, 0,
	0, 756, 735, 739, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 736, 759, 763, 298, 832, 757,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 833, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 754, 0, 587, 0,
	427, 0, 0, 816, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 758, 0, 385, 366, 829, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 814, 362, 553, 586, 478, 0, 828, 809, 811,
	812, 815, 819, 820, 821, 822, 823, 825, 827, 831,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 830, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 762, 528, 529, 352, 353, 354, 355, 817, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 839, 813, 838,
	840, 841, 837, 842, 843, 824, 718, 0, 769, 835,
	834, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 802, 776, 777, 778, 715, 779, 773,
	774, 716, 775, 803, 767, 799, 800, 743, 770, 780,
	798, 781, 801, 804, 805, 844, 845, 787, 771, 225,
	846, 784, 806, 797, 796, 782, 768, 807, 808, 750,
	745, 785, 786, 772, 790, 791, 792, 717, 764, 765,
	766, 788, 789, 746, 747, 748, 749, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 793, 0, 605, 474, 475, 585, 760, 710,
	0, 2095, 0, 0, 0, 0, 0, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	713, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 751, 525, 476, 395, 348,
	543, 542, 0, 0, 818, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 705, 0, 0, 741,
	795, 794, 728, 738, 0, 0, 277, 200, 471, 590,
	473, 472, 729, 0, 730, 734, 737, 733, 731, 732,
	0, 810, 0, 0, 0, 0, 0, 0, 697, 709,
	0, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 707, 0, 0, 0,
	0, 761, 0, 708, 0, 0, 756, 735, 739, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 736,
	759, 763, 298, 832, 757, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	833, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 754, 0, 587, 0, 427, 0, 0, 816, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 758,
	0, 385, 366, 829, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 814, 362, 553, 586,
	478, 0, 828, 809, 811, 812, 815, 819, 820, 821,
	822, 823, 825, 827, 831, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 830, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 762, 528, 529, 352,
	353, 354, 355, 817, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 839, 813, 838, 840, 841, 837, 842, 843,
	824, 718, 0, 769, 835, 834, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 802, 776,
	777, 778, 715, 779, 773, 774, 716, 775, 803, 767,
	799, 800, 743, 770, 780, 798, 781, 801, 804, 805,
	844, 845, 787, 771, 225, 846, 784, 806, 797, 796,
	782, 768, 807, 808, 750, 745, 785, 786, 772, 790,
	791, 792, 717, 764, 765, 766, 788, 789, 746, 747,
	748, 749, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 793, 760, 605,
	474, 475, 585, 0, 710, 0, 0, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	713, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 751, 525, 476, 395, 348,
	543, 542, 0, 0, 818, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 705, 0, 0, 741,
	795, 794, 728, 738, 0, 0, 277, 200, 471, 590,
	473, 472, 729, 0, 730, 734, 737, 733, 731, 732,
	0, 810, 0, 0, 0, 0, 0, 0, 697, 709,
	0, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 707, 1728, 0, 0,
	0, 761, 0, 708, 0, 0, 756, 735, 739, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 736,
	759, 763, 298, 832, 757, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	833, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 754, 0, 587, 0, 427, 0, 0, 816, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 758,
	0, 385, 366, 829, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 814, 362, 553, 586,
	478, 0, 828, 809, 811, 812, 815, 819, 820, 821,
	822, 823, 825, 827, 831, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 830, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 762, 528, 529, 352,
	353, 354, 355, 817, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 839, 813, 838, 840, 841, 837, 842, 843,
	824, 718, 0, 769, 835, 834, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 802, 776,
	777, 778, 715, 779, 773, 774, 716, 775, 803, 767,
	799, 800, 743, 770, 780, 798, 781, 801, 804, 805,
	844, 845, 787, 771, 225, 846, 784, 806, 797, 796,
	782, 768, 807, 808, 750, 745, 785, 786, 772, 790,
	791, 792, 717, 764, 765, 766, 788, 789, 746, 747,
	748, 749, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 793, 760, 605,
	474, 475, 585, 0, 710, 0, 0, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	713, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 751, 525, 476, 395, 348,
	543, 542, 0, 0, 818, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 705, 0, 0, 741,
	795, 794, 728, 738, 0, 0, 277, 200, 471, 590,
	473, 472, 729, 0, 730, 734, 737, 733, 731, 732,
	0, 810, 0, 0, 0, 0, 0, 0, 697, 709,
	0, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 707, 0, 0, 0,
	0, 761, 0, 708, 0, 0, 756, 735, 739, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 736,
	759, 763, 298, 832, 757, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	833, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 754, 0, 587, 0, 427, 0, 0, 816, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 758,
	0, 385, 366, 829, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 814, 362, 553, 586,
	478, 0, 828, 809, 811, 812, 815, 819, 820, 821,
	822, 823, 825, 827, 831, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 830, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 762, 528, 529, 352,
	353, 354, 355, 817, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 839, 813, 838, 840, 841, 837, 842, 843,
	824, 718, 0, 769, 835, 834, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 802, 776,
	777, 778, 715, 779, 773, 774, 716, 775, 803, 767,
	799, 800, 743, 770, 780, 798, 781, 801, 804, 805,
	844, 845, 787, 771, 225, 846, 784, 806, 797, 796,
	782, 768, 807, 808, 750, 745, 785, 786, 772, 790,
	791, 792, 717, 764, 765, 766, 788, 789, 746, 747,
	748, 749, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 793, 760, 605,
	474, 475, 585, 0, 710, 0, 0, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	713, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 751, 525, 476, 395, 348,
	543, 542, 0, 0, 818, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 705, 0, 0, 741,
	795, 794, 728, 738, 0, 0, 277, 200, 471, 590,
	473, 472, 2531, 0, 2532, 734, 737, 733, 731, 732,
	0, 810, 0, 0, 0, 0, 0, 0, 697, 709,
	0, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 707, 0, 0, 0,
	0, 761, 0, 708, 0, 0, 756, 735, 739, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 736,
	759, 763, 298, 832, 757, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	833, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 754, 0, 587, 0, 427, 0, 0, 816, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 758,
	0, 385, 366, 829, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 814, 362, 553, 586,
	478, 0, 828, 809, 811, 812, 815, 819, 820, 821,
	822, 823, 825, 827, 831, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 830, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 762, 528, 529, 352,
	353, 354, 355, 817, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 839, 813, 838, 840, 841, 837, 842, 843,
	824, 718, 0, 769, 835, 834, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 802, 776,
	777, 778, 715, 779, 773, 774, 716, 775, 803, 767,
	799, 800, 743, 770, 780, 798, 781, 801, 804, 805,
	844, 845, 787, 771, 225, 846, 784, 806, 797, 796,
	782, 768, 807, 808, 750, 745, 785, 786, 772, 790,
	791, 792, 717, 764, 765, 766, 788, 789, 746, 747,
	748, 749, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 793, 760, 605,
	474, 475, 585, 0, 710, 0, 0, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 1598, 0, 0, 0,
	713, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 751, 525, 476, 395, 348,
	543, 542, 0, 0, 818, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 705, 0, 0, 741,
	795, 794, 728, 738, 0, 0, 277, 200, 471, 590,
	473, 472, 729, 0, 730, 734, 737, 733, 731, 732,
	0, 810, 0, 0, 0, 0, 0, 0, 0, 709,
	0, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 707, 0, 0, 0,
	0, 761, 0, 708, 0, 0, 756, 735, 739, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 736,
	759, 763, 298, 832, 757, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	833, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 754, 0, 587, 0, 427, 0, 0, 816, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 758,
	0, 385, 366, 829, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 1599,
	1600, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 814, 362, 553, 586,
	478, 0, 828, 809, 811, 812, 815, 819, 820, 821,
	822, 823, 825, 827, 831, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 830, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 762, 528, 529, 352,
	353, 354, 355, 817, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 839, 813, 838, 840, 841, 837, 842, 843,
	824, 718, 0, 769, 835, 834, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 802, 776,
	777, 778, 715, 779, 773, 774, 716, 775, 803, 767,
	799, 800, 743, 770, 780, 798, 781, 801, 804, 805,
	844, 845, 787, 771, 225, 846, 784, 806, 797, 796,
	782, 768, 807, 808, 750, 745, 785, 786, 772, 790,
	791, 792, 717, 764, 765, 766, 788, 789, 746, 747,
	748, 749, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 793, 760, 605,
	474, 475, 585, 0, 710, 0, 0, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	713, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 751, 525, 476, 395, 348,
	543, 542, 0, 0, 818, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 705, 0, 0, 741,
	795, 794, 728, 738, 0, 0, 277, 200, 471, 590,
	473, 472, 729, 0, 730, 734, 737, 733, 731, 732,
	0, 810, 0, 0, 0, 0, 0, 0, 0, 709,
	0, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 707, 0, 0, 0,
	0, 761, 0, 708, 0, 0, 756, 735, 739, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 736,
	759, 763, 298, 832, 757, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	833, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 754, 0, 587, 0, 427, 0, 0, 816, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 758,
	0, 385, 366, 829, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 814, 362, 553, 586,
	478, 0, 828, 809, 811, 812, 815, 819, 820, 821,
	822, 823, 825, 827, 831, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 830, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 762, 528, 529, 352,
	353, 354, 355, 817, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 839, 813, 838, 840, 841, 837, 842, 843,
	824, 718, 0, 769, 835, 834, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 802, 776,
	777, 778, 715, 779, 773, 774, 716, 775, 803, 767,
	799, 800, 743, 770, 780, 798, 781, 801, 804, 805,
	844, 845, 787, 771, 225, 846, 784, 806, 797, 796,
	782, 768, 807, 808, 750, 745, 785, 786, 772, 790,
	791, 792, 717, 764, 765, 766, 788, 789, 746, 747,
	748, 749, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 793, 760, 605,
	474, 475, 585, 0, 710, 0, 0, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	713, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 751, 525, 476, 395, 348,
	543, 542, 0, 0, 818, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	795, 794, 728, 738, 0, 0, 277, 200, 471, 590,
	473, 472, 729, 0, 730, 734, 737, 733, 731, 732,
	0, 810, 0, 0, 0, 0, 0, 0, 697, 709,
	0, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 706, 707, 0, 0, 0,
	0, 761, 0, 708, 0, 0, 756, 735, 739, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 736,
	759, 763, 298, 832, 757, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	833, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 754, 0, 587, 0, 427, 0, 0, 816, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 758,
	0, 385, 366, 829, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 814, 362, 553, 586,
	478, 0, 828, 809, 811, 812, 815, 819, 820, 821,
	822, 823, 825, 827, 831, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 830, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 762, 528, 529, 352,
	353, 354, 355, 817, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 839, 813, 838, 840, 841, 837, 842, 843,
	824, 718, 0, 769, 835, 834, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 802, 776,
	777, 778, 715, 779, 773, 774, 716, 775, 803, 767,
	799, 800, 743, 770, 780, 798, 781, 801, 804, 805,
	844, 845, 787, 771, 225, 846, 784, 806, 797, 796,
	782, 768, 807, 808, 750, 745, 785, 786, 772, 790,
	791, 792, 717, 764, 765, 766, 788, 789, 746, 747,
	748, 749, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 793, 0, 605,
	474, 475, 585, 0, 710, 177, 52, 166, 140, 0,
	0, 0, 0, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 167, 0, 0, 0, 0, 0, 0,
	159, 0, 304, 0, 168, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 117, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 171, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 139, 165, 175, 0, 103, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 192, 0, 0, 0,
	399, 0, 0, 331, 164, 158, 157, 443, 0, 385,
	366, 204, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 563, 564, 565, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 422, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 195,
	535, 538, 468, 205, 0, 532, 547, 505, 546, 206,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 115, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 203,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 377, 272, 410, 388, 0, 261, 484,
	335, 141, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 207,
	39, 193, 196, 198, 197, 0, 50, 533, 545, 579,
	5, 588, 589, 591, 593, 592, 120, 208, 474, 475,
	585, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 117,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 2229, 2232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 2233, 427,
	0, 0, 0, 2228, 0, 2227, 399, 2225, 2230, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 2231, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 141, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1234, 0, 0, 199,
	0, 0, 728, 738, 0, 0, 277, 200, 471, 590,
	473, 472, 729, 0, 730, 734, 737, 733, 731, 732,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 736,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 0, 427, 0, 0, 0, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 177, 52, 166, 140, 0, 0, 0,
	0, 0, 0, 364, 629, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 635, 0, 0,
	0, 0, 634, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 633, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 630,
	632, 282, 450, 378, 643, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 141,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 2229, 2232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 417, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 2233, 427, 0, 0,
	0, 2228, 0, 2227, 399, 2225, 2230, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	2231, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1038, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 2378, 2381, 2382, 2383, 2384, 2385,
	2386, 0, 2391, 2387, 2388, 2389, 2390, 0, 2373, 2374,
	2375, 2376, 1036, 2357, 2379, 0, 2358, 360, 2359, 2360,
	2361, 2362, 2363, 2364, 2365, 2366, 2367, 2370, 2371, 2368,
	2369, 2377, 372, 338, 373, 321, 350, 349, 351, 1063,
	1065, 1067, 1069, 1072, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 2372, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 2380,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 2250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 2249, 427,
	0, 0, 0, 2255, 2252, 2254, 399, 0, 2253, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 2247,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 277, 200, 471, 590,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 2250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 0,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 2249, 427, 0, 0, 0, 2255,
	2252, 2254, 399, 0, 2253, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 364, 0, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 1969, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 1970, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	1164, 1165, 1166, 1163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 0,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 177, 605, 474, 475, 585, 0,
	0, 0, 0, 0, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 117, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 2016, 0, 199, 0, 0, 0,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	141, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 177, 605, 474, 475, 585,
	0, 0, 0, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 117, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 2004, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 141, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 968,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 975, 976, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 963,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 953, 425,
	271, 952, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 966, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 967, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	970, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	977, 964, 973, 965, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 974, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 177, 605, 474, 475, 585, 0, 0, 0,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	117, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1902, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 141, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 975, 976, 0, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 953, 425, 271, 952, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 977, 1921, 973,
	1922, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	974, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 2733, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 2736, 0, 0, 2735, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 1430, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 1428, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 1424, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 1428, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3681, 0, 199, 795, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 1428, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 1428,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1628, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 2321, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 2323, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 2342, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 1428, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 617, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 616, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 795, 0, 0, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3660, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 3450, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 3573, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3306, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3465, 0,
	199, 0, 0, 0, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 3393, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 2951, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1902, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 2920,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 1428, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 2323, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 2658, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2036, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 2398, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 2188, 605, 474,
	475, 585, 0, 364, 0, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 0,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 1889, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 417, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 0, 427, 0, 0,
	0, 0, 0, 0, 399, 0, 0, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	1428, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 1794, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 1761, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 277, 200, 471, 590,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 0,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 0, 427, 0, 0, 1458, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 364, 0, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 617,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 0,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 417, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 627, 587, 0, 427, 0, 0,
	0, 0, 0, 0, 399, 0, 0, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 906, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 277, 200, 471, 590,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 400, 1408, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 0,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 0, 427, 0, 0, 0, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 364, 0, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 1406, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 0,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 417, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 0, 427, 0, 0,
	0, 0, 0, 0, 399, 0, 0, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 692, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 651, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 652, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	1876, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 0, 0, 0, 0, 1878, 0, 0, 1876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1878, 0, 0, 3471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 670, 677, 667, 0, 0,
	0, 0, 0, 0, 1853, 0, 674, 675, 0, 676,
	680, 0, 0, 662, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 685, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 689, 0, 3442, 691,
	0, 0, 1869, 0, 690, 0, 0, 0, 0, 0,
	0, 0, 1878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1863, 0, 0, 0, 0,
	0, 0, 0, 1853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1851, 1885, 0, 0, 1852,
	1854, 1856, 1857, 1858, 1859, 1860, 1864, 1865, 1866, 1868,
	1871, 1872, 1873, 1863, 0, 0, 0, 0, 0, 0,
	1861, 1870, 1862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1851, 1885, 0, 0, 1852, 1854, 1856,
	0, 1858, 1859, 1860, 1864, 1865, 1866, 1868, 1871, 1872,
	1873, 1869, 0, 0, 1877, 0, 0, 0, 1861, 1870,
	1862, 663, 665, 664, 0, 0, 0, 0, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 673, 0, 0, 0, 0, 0, 0,
	688, 0, 1877, 0, 0, 0, 0, 666, 1874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1850, 0, 0, 0, 0,
	0, 0, 1849, 0, 0, 0, 0, 0, 0, 0,
	0, 1857, 0, 0, 0, 0, 1874, 0, 0, 0,
	0, 0, 1863, 0, 0, 0, 1867, 0, 0, 0,
	0, 0, 0, 1850, 0, 1855, 0, 0, 0, 0,
	1849, 0, 1851, 1885, 0, 0, 1852, 1854, 1856, 0,
	1858, 1859, 1860, 1864, 1865, 1866, 1868, 1871, 1872, 1873,
	0, 0, 0, 0, 1867, 0, 0, 1861, 1870, 1862,
	0, 0, 0, 1855, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 668, 672, 678, 0,
	679, 681, 0, 0, 682, 683, 684, 0, 0, 686,
	687, 1877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1850, 0, 0, 0, 0, 0, 0, 1849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1867, 0, 0, 0, 0, 0, 0,
	0, 0, 1855,
}

var yyPact = [...]int{
	311, -1000, -1000, -1000, -315, 13772, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44108,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	44108, -306, 27139, 42290, -1000, -1000, 2534, -1000, 42896, 15610,
	44108, 454, 453, 44108, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 846, -1000, 46532, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 777, 4828, 45926, 10714, -220, -1000, 1289,
	-32, 2421, 1005, 1014, 1122, 1122, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 338,
	921, 43502, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3591, 805, 921, 20468, 53, 48,
	1289, 437, -115, -114, -116, 288, -1000, 1112, 302, 191,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10714, 10714, 13772, -350, 13772, 10714, 44108, 44108, -1000,
	-1000, -1000, -1000, -306, 42896, 777, 4828, 10714, 2421, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -114, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -115, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -116, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 48, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4433, -1000, 1492, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2907, 1487, 2420, 683, 42290, 44108, -1000, 135,
	683, -1000, -1000, -1000, 1289, 3386, -1000, 44108, 44108, 175,
	1766, -1000, 462, 410, 423, 291, 1470, -1000, -1000, -1000,
	-1000, -1000, -1000, 574, 3290, -1000, 44108, 44108, 2930, 44108,
	-1000, 2136, 628, 47231, 3107, 1316, 886, 2948, -1000, -1000,
	2906, -1000, 316, 648, 350, 692, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 262, -1000, 3164, -1000, -1000, 300, -1000,
	-1000, 299, -1000, -1000, -1000, 44, -1000, -1000, -1000, -1000,
	-1000, -1000, -48, -1000, -1000, 1039, 2290, 10714, 2016, -1000,
	3653, 1508, -1000, -1000, -1000, 6439, 12544, 12544, 12544, 12544,
	44108, -1000, -1000, 2734, 10714, 2904, 2894, 2893, 2887, -1000,
	-1000, -1000, -1000, -1000, -1000, 1468, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1889, -1000, -1000, -1000, 13154,
	-1000, 2886, 2880, 2867, 2865, 2863, 2862, 2856, 2855, 2853,
	2852, 2851, 2850, 2849, 2844, 2606, 14994, 2843, 2419, 2412,
	2842, 2841, 2835, 2401, 2821, 2820, 2808, 2606, 2606, 2806,
	2805, 2801, 2800, 2797, 2794, 2793, 2792, 2791, 2789, 2788,
	2784, 2782, 2781, 2780, 2776, 2774, 2767, 2765, 2760, 2759,
	2758, 2754, 2753, 2752, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1272, -1000, 2748,
	3318, 2604, -1000, 3207, 3186, 3180, 3173, -270, 2742, 2121,
	-1000, -1000, 117, -1000, -73, -1000, -1000, 1000, -1000, 967,
	-1000, 773, 44108, 44108, 187, 832, 773, 773, 773, 773,
	773, 798, 773, 3199, 840, 836, 826, 821, 773, -66,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1765, 1763, 3013,
	936, -1000, -1000, -1000, -1000, 1333, 44108, -1000, 2703, 1577,
	1577, 3269, 3196, 638, 616, 600, 1577, 504, -1000, 1668,
	1668, 1668, 1668, 1577, 478, 724, 3175, 3175, 93, 1668,
	23, 1577, 1577, 23, 1577, 1577, 1924, 204, -279, -1000,
	-1000, -1000, -1000, 1668, 1668, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3158, 3153, 777, 777, 44108, 174, 44108, 777,
	777, 777, 789, 17, 45320, 44714, 2136, 618, 615, 1339,
	1676, -1000, 1617, 44108, 44108, 1617, 1617, 23503, 22897, -1000,
	44108, -1000, 3318, 2604, 2600, 1498, 2598, 2604, -120, -121,
	-122, 777, 777, 777, 777, 777, 259, 777, 777, 777,
	777, 777, 44108, 44108, 41684, 777, 777, 777, 8879, 8879,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13772,
	1995, 2057, 186, -11, -308, 254, -1000, -1000, 44108, 3065,
	276, -1000, -1000, -1000, 2625, -1000, 2698, 2698, 2698, 2698,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2698,
	2698, 2702, 2741, -1000, -1000, 2697, 2697, 2697, 2625, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2699, 2699, 2701, 2701, 2699, 44108,
	10714, 44108, 3087, 373, 2740, 683, -1000, 44108, 10714, 425,
	3318, 3080, 3175, 3270, -1000, -1000, 1464, 2119, 2400, -1000,
	291, -1000, 376, 291, 1678, -1000, 1047, -1000, -1000, -1000,
	-1000, -1000, 44108, -48, 406, -1000, -1000, 2390, 2738, -1000,
	598, 1150, 1215, -1000, 463, 4190, 35623, 2136, 35623, 44108,
	-1000, -1000, -1000, -1000, -1000, -1000, 37, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	294, -1000, 10714, 10714, 10714, 10714, 10714, -1000, 649, 11934,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12544, 12544, 12544,
	12544, 12544, 12544, 12544, 12544, 12544, 12544, 12544, 12544, 2731,
	1764, 12544, 12544, 12544, 12544, 25321, 1498, 3118, 1337, 295,
	1508, 1508, 1508, 1508, 10714, -1000, 1770, 2290, 10714, 10714,
	10714, 10714, 44108, -1000, -1000, 4533, 10714, 10714, 4313, 10714,
	3170, 10714, 10714, 10714, 2585, 5211, 44108, 10714, -1000, 2580,
	2579, -1000, -1000, 1984, 10714, -1000, -1000, 10714, -1000, -1000,
	10714, 12544, 10714, -1000, 10714, 10714, 10714, -1000, -1000, 2463,
	3170, 3170, 3170, 1785, 10714, 10714, 3170, 3170, 3170, 1730,
	3170, 3170, 3170, 3170, 3170, 3170, 3170, 3170, 3170, 3170,
	2574, 2573, 2567, 10104, 3175, -220, -1000, 8269, 3080, 3175,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-272, 2737, 44108, 2398, 2385, -330, 38, 999, 971, 975,
	-1000, 44108, 1778, 3129, -1000, 2736, 44108, 773, 773, 773,
	-1000, 41078, 35623, 44108, 44108, 2136, 44108, 44108, 44108, 773,
	773, 773, 773, 44108, -1000, 3034, 35623, 3017, 789, -1000,
	44108, 1333, 3127, 44108, 3269, 12544, 12544, -1000, -1000, 10714,
	40472, 1668, 1577, 1577, -1000, -1000, 44108, -1000, -1000, -1000,
	1668, 44108, 1668, 1668, 3269, 1668, -1000, -1000, -1000, 1577,
	1577, -1000, -1000, 10714, -1000, -1000, 1668, 1668, -1000, -1000,
	3269, 44108, 32, 3269, 3269, 64, -1000, -1000, -1000, 1577,
	44108, 44108, 773, 44108, -1000, 44108, 44108, -1000, -1000, 44108,
	44108, 3884, 44108, 39866, 3151, -1000, 35623, 44108, 44108, 33199,
	-1000, 1303, -1000, -30, -1000, 36, 17, 1617, 17, 1617,
	-1000, 594, 632, 21685, 528, 35623, 5821, -1000, -1000, 1617,
	1617, 5821, 5821, 1509, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1331, -1000, 217, 3175, -1000, -1000, -1000, -1000, -1000,
	2116, 2115, 2111, 44108, 44108, 35623, 2136, 44108, 777, 44108,
	44108, 44108, 44108, 44108, -1000, 2735, 1463, -1000, 3105, 44108,
	44108, 44108, 1213, -1000, -1000, 18640, 1462, 1213, -1000, 1820,
	-1000, 10714, 13772, -241, 10714, 13772, 13772, 10714, 13772, -1000,
	10714, 249, -1000, -1000, -1000, -1000, 2093, -1000, 2092, -1000,
	-1000, -1000, -1000, -1000, 2379, 2379, -1000, 2088, -1000, -1000,
	-1000, -1000, 2087, -1000, -1000, 2085, -1000, -1000, -1000, 2566,
	1039, -1000, 2368, 2946, -223, -1000, 19862, 44108, 44108, 373,
	-331, 168, -1000, -223, -1000, 19251, 44108, 3175, -1000, -226,
	3080, 10714, 44108, -1000, 3192, -1000, -1000, 291, -1000, 467,
	367, -1000, -1000, -1000, -1000, -1000, -1000, 1448, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1319, -1000, 44108,
	-1000, -1000, 463, 35623, 37441, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 246, -1000, -1000, 176, -1000, 809, 221, 1667,
	-1000, -1000, 196, 200, 185, 864, 2290, -1000, 1813, 1813,
	1826, -1000, 714, -1000, -1000, -1000, -1000, 2734, -1000, -1000,
	-1000, 1879, 1713, -1000, 1724, 1724, 1514, 1514, 1514, 1514,
	1514, 1699, 1699, -1000, -1000, -1000, 6439, 2731, 12544, 12544,
	12544, 12544, 844, 844, 2235, 3402, -1000, -1000, -1000, -1000,
	10714, 163, 1775, -1000, 10714, 2332, 1389, 2214, 1266, 1439,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2564, 2562, 2086, 3286, 2561, 10714, -1000, -1000, 1663, 1633,
	1631, -1000, 2094, 9494, -1000, -1000, -1000, 2557, 1430, 2549,
	-1000, -1000, -1000, 2545, 1628, 1179, 2544, 1768, 2543, 2541,
	2540, 2539, 1318, 10714, 10714, 10714, 10714, 2536, 1627, 1623,
	10714, 10714, 10714, 10714, 2532, 10714, 10714, 10714, 10714, 10714,
	10714, 10714, 10714, 10714, 10714, 65, 65, 65, 1314, 1311,
	-1000, -1000, 1622, -1000, 2290, -1000, -1000, 3080, -1000, 2728,
	2084, 1308, -1000, -1000, -299, 2323, -1000, -1000, 991, 962,
	987, 3185, 3089, 44108, 1066, 2727, 44108, 44108, 44108, 250,
	-1000, -1000, 1267, -1000, 221, -56, 457, 1069, 2929, 3281,
	-132, 44108, 44108, 44108, 44108, 3125, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 39260, -1000, 2725, 1614, -1000, -1000,
	1508, 1508, 2290, 2928, 44108, 44108, 3269, 3269, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1668, 3269, 3269, 1419, 1577,
	1668, -1000, -1000, 1668, -1000, -1000, 1668, -1000, -1000, 1404,
	-1000, 44108, -1000, -1000, -1000, 3124, 2703, 1307, -1000, -1000,
	-1000, 3268, 1180, 752, 752, 951, 743, 3267, 17428, -1000,
	1601, 1054, 807, 3042, 309, -1000, 1601, -162, 721, 1601,
	1601, 1601, 1601, 1601, 1601, 1601, 560, 551, 1601, 1601,
	1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1009,
	1601, 1601, 1601, 1601, 1601, -1000, 1601, 2724, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 595, 241, -1000, 3149, 358,
	348, 1267, 3145, 377, 3266, 1183, -1000, -1000, -1000, -1000,
	25927, 25927, 21079, 25927, -1000, 195, 17, -21, -1000, -1000,
	1303, 5821, 1303, 5821, -1000, -1000, 794, -1000, -1000, 1069,
	-1000, 44108, 44108, -1000, -1000, 2722, 1762, -1000, -1000, 14994,
	-1000, 5821, 5821, -1000, -1000, 26533, 44108, -1000, -50, -1000,
	-20, 3080, -1000, -1000, -1000, 1277, -1000, -1000, 1293, 1069,
	2945, 44108, 1277, 1277, 1277, -1000, -1000, 16822, 44108, 44108,
	-1000, -1000, -1000, 3269, 8879, -1000, 33199, -1000, -1000, 38653,
	-1000, 38047, 3269, 1685, -1000, 13772, 2044, 179, -1000, 248,
	-310, 177, 1834, 173, 2290, -1000, -1000, 2515, 2514, 1600,
	-1000, 1599, 2511, 1589, 1570, -1000, 11, -1000, 3071, 1070,
	-1000, 2721, -1000, 1568, 3003, -1000, 1268, -1000, 1761, 1567,
	-1000, -1000, 10714, -1000, 1070, 1565, 2995, 1268, 3080, 2366,
	-1000, 1233, -1000, 2164, 1399, 166, -1000, -1000, -1000, 44108,
	2390, 1562, 37441, 1121, -1000, 791, 1398, 1384, -1000, 35623,
	286, 35623, -1000, 35623, -1000, -1000, 389, -1000, 44108, 3078,
	-1000, -1000, -1000, 2323, 1759, -339, 44108, -1000, -1000, -1000,
	-1000, -1000, 1561, -1000, 844, 844, 2235, 3171, -1000, 12544,
	-1000, 12544, 3075, -1000, 1669, -1000, 10714, 1978, 4335, 10714,
	4335, 1549, 24715, 44108, -1000, -1000, 10714, 10714, -1000, 3035,
	-1000, -1000, -1000, -1000, 10714, 10714, 2024, -1000, 44108, -1000,
	-1000, -1000, -1000, 24715, -1000, 12544, -1000, -1000, -1000, -1000,
	10714, 1197, 1197, 3020, 1547, 65, 65, 65, 2997, 2949,
	2940, 1537, 65, 2918, 2883, 2860, 2829, 2803, 2798, 2681,
	2677, 2588, 2583, -1000, 2720, -1000, -1000, 1952, 11324, 8269,
	-1000, -1000, 285, 1232, 2082, 2365, 116, -1000, 1758, -1000,
	-1000, -1000, 942, 418, -1000, 269, 2510, 1219, -1000, -1000,
	44108, -1000, -1000, -1000, 16822, 2703, 2719, 2703, 98, 1601,
	617, 35623, 608, -1000, 44108, 2123, 1755, 2942, 785, 3063,
	44108, 2718, 414, 2717, 2716, 3119, 446, 4560, 44108, 1165,
	-1000, 1370, 302, -1000, 44108, -1000, 2136, -1000, 1577, -1000,
	-1000, 3269, -1000, -1000, 10714, 10714, 3269, 1577, 1577, 1668,
	44108, -1000, 446, 4560, 3116, 4061, 515, 2241, -1000, 44108,
	-1000, -1000, -1000, 795, -1000, 948, 773, 44108, 1854, 948,
	1852, 2715, -1000, -1000, 44108, 44108, 44108, 44108, -1000, -1000,
	44108, -1000, 44108, 44108, 44108, 44108, 44108, 36835, -1000, 44108,
	44108, -1000, 44108, 1845, 44108, 1842, 3086, -1000, 1601, 1601,
	912, -1000, -1000, 564, -1000, 36835, 2081, 2075, 2073, 2068,
	2363, 2362, 2361, 1601, 1601, 2066, 2360, 36229, 2359, 1117,
	2060, 2052, 2051, 2112, 2351, 929, -1000, 2347, 2076, 2040,
	2034, 44108, 2714, 2271, -1000, -1000, 98, 1601, 347, 44108,
	1753, 617, 456, 2135, 22291, 44108, 33199, 33199, 33199, 33199,
	-1000, 2980, 2975, -1000, 2973, 2965, 2974, 44108, 33199, 2703,
	-1000, 36229, -1000, -1000, -1000, 1498, 1524, 3206, 985, 10714,
	-1000, -1000, -10, -31, -1000, -1000, -1000, 35623, 2346, 528,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3176, 44108, 44108,
	700, 2507, 1218, -1000, -1000, -1000, 4560, 2698, 2698, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2698, 2698,
	2702, -1000, -1000, 2697, 2697, 2697, 2625, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2699, 2699, 2701,
	2701, 2699, -1000, -1000, 3274, -1000, 1217, -1000, -1000, 1369,
	-1000, 3274, 1800, -316, 13772, 1717, 1564, -1000, 10714, 13772,
	10714, -247, 331, -256, -1000, -1000, -1000, 2326, -1000, -1000,
	-1000, 2050, -1000, 2004, 120, 165, 1841, -223, 8269, 430,
	44108, -223, 44108, 8269, -1000, 44108, 157, 428, -223, 3176,
	11, 10714, 3037, -1000, -1000, 44108, 1997, -1000, -1000, -1000,
	3279, 35623, 2136, 1527, 35017, -1000, 298, -1000, 245, 580,
	2325, -1000, 814, 109, 2324, 2323, -1000, -1000, -1000, -1000,
	12544, 1508, -1000, -1000, -1000, 2290, 10714, 2506, -1000, 949,
	949, 2177, 2505, 2504, -1000, 2698, 2698, -1000, 2625, 2697,
	2625, 949, 949, 2503, -1000, 2413, 2565, -1000, 2548, 2523,
	10714, -1000, 2502, 3693, 1291, -81, -190, 65, 65, -1000,
	-1000, -1000, -1000, 65, 65, 65, 65, -1000, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 716, -108,
	-285, -111, -286, -1000, 2495, 1210, -1000, -1000, -1000, -1000,
	-1000, 4313, 1203, -1000, -1000, 2323, 2321, -1000, -1000, -1000,
	44108, 2316, 2310, 1066, 4560, 2494, 3115, 16216, 3114, 2147,
	-1000, -1000, -1000, 34411, 549, -1000, -1000, -1000, 710, 368,
	1996, 537, -1000, 44108, 377, 3024, 1752, 2309, 44108, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3063, -1000, 924, 421,
	31987, 14388, -1000, 385, 16216, 16216, 385, 442, 1666, -1000,
	683, 1107, 130, 33199, 44108, -1000, 32593, 2493, -1000, 1069,
	3269, -1000, 2290, 2290, -1000, 3269, 3269, 1577, -1000, 442,
	-1000, 385, -1000, 1449, 18034, 493, 484, 390, -1000, 637,
	-1000, -1000, 671, 3053, 4560, -1000, 44108, -1000, 44108, -1000,
	44108, 44108, 773, 10714, 3053, 44108, 786, -1000, -1000, 1067,
	402, 395, 718, 718, 1148, -1000, 3084, -1000, -1000, 1128,
	-1000, -1000, -1000, -1000, 44108, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 24715, 24715, 3139, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2308, 2306,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44108,
	1523, -1000, 1707, 2147, 34411, 1705, 1617, 2305, 549, 2123,
	1704, -1000, 2301, -1000, 1078, 44108, 44108, -1000, 1240, -1000,
	1692, 2925, 2939, 2925, -1000, -1000, -1000, -1000, 2967, -1000,
	2951, -1000, -1000, 1240, -1000, -1000, -1000, -1000, -1000, 985,
	-1000, 3169, 948, 948, 948, 2487, -1000, -1000, -1000, 1121,
	2486, -1000, -1000, -1000, 3311, -1000, -1000, -1000, -1000, -1000,
	-1000, 16822, 3060, 3272, 3265, 33805, 3272, -1000, -316, 1626,
	-1000, 1951, 171, 1808, 44108, -1000, -1000, -1000, 2484, 2482,
	-228, 132, 3264, 3261, 996, -1000, 2479, 1105, -223, -1000,
	-1000, 1070, -1000, -1000, -1000, -1000, -223, -1000, 1070, -1000,
	120, -1000, -1000, 3045, -1000, -1000, 2136, -1000, 227, -1000,
	-1000, -1000, -1000, -1000, -1000, 199, -1000, 44108, -1000, 1096,
	108, -1000, 2290, -1000, -1000, -1000, -1000, -1000, 4335, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10714, -1000, -1000, -1000, 2501, -1000, -1000, 10714, 2478, 2300,
	2473, 2298, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3318, -1000,
	3258, 1522, 2472, 2465, 1519, 2461, 2458, -1000, 10714, 2457,
	4313, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 818, 385,
	2455, 1084, -1000, -1000, -1000, -1000, 385, -1000, 2278, 212,
	-1000, -1000, -1000, 2274, 2272, 1987, -1000, -1000, 2032, 1401,
	234, -1000, -1000, -1000, -1000, -1000, -1000, 2135, 2131, 1681,
	-347, -1000, 2696, -1000, 1601, 1601, 1601, 44108, 1517, -1000,
	1601, 1601, 2449, -1000, 2448, 2444, -133, 711, 1732, 1682,
	-1000, 1980, 25927, 33199, 32593, 1224, -1000, 1368, -1000, -1000,
	-1000, -1000, -1000, 3269, 711, -1000, 479, 1973, 12544, 2660,
	12544, 2652, 497, 2651, 1510, -1000, 44108, -1000, -1000, 44108,
	3612, 2650, -1000, 2647, 2927, 464, 2645, 2644, 44108, 2490,
	-1000, 3053, 44108, 723, 3054, -1000, -1000, -1000, 387, -1000,
	-1000, 509, -1000, 44108, -1000, 44108, -1000, 1505, -1000, 24715,
	-1000, -1000, 1507, -1000, 2271, 2269, -1000, 212, 2267, 5821,
	-1000, -1000, 3024, 2263, -1000, 44108, 1078, 1078, 3318, 44108,
	8269, -1000, -1000, 10714, 2639, -1000, 10714, -1000, -1000, -1000,
	-1000, -1000, 2636, 3047, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1709, -1000, 10714, 10714, -1000, -1000, 758, 13772, -258,
	327, -1000, -1000, -1000, -231, 2256, -1000, -1000, 3249, 2255,
	2180, 44108, -1000, -1000, 1070, 1070, -228, -1000, -1000, 1069,
	-1000, -1000, 1001, 569, -1000, 2439, 2423, -1000, 2349, 65,
	-1000, 65, -1000, 224, 10714, -1000, 2252, -1000, -1000, -1000,
	2249, -1000, -1000, 2201, -1000, 2436, 4560, -139, -133, 16216,
	-139, -1000, -1000, 374, -1000, -1000, 375, -1000, -1000, 1998,
	601, -1000, -1000, -1000, 1679, 1869, 2211, 30169, 24715, 25321,
	2245, -1000, -1000, 31987, 1709, 1709, 4704, 294, 47291, -1000,
	2635, 1016, 1651, -1000, 1968, -1000, 1967, -1000, 3269, 1224,
	129, -1000, -1000, 1521, -1000, 1016, 2241, 3247, -1000, 2813,
	44108, 2629, 44108, 2633, 1675, 12544, -1000, 671, 2993, -1000,
	-1000, 3612, -1000, -1000, 1861, 12544, -1000, -1000, 2244, 25321,
	796, 1657, 1624, 861, 2632, -1000, 524, 3309, -1000, -1000,
	-1000, 877, 2631, -1000, 1839, 1832, -1000, 44108, -1000, 30169,
	30169, 757, 757, 30169, 30169, 2628, 718, -1000, -1000, 12544,
	-1000, -1000, 1601, -1000, -1000, -1000, 1601, 1453, -1000, -1000,
	-1000, -1000, -1000, -1000, 2131, -1000, -1000, 3175, -1000, -1000,
	2290, 44108, 2290, 31381, -1000, 3246, 3244, -1000, 2290, 1039,
	-1000, -316, 44108, 44108, -233, 1957, -1000, 2243, 150, -1000,
	-1000, 1056, -231, -235, 64, 24715, 1616, -1000, -1000, -1000,
	-1000, -1000, 2435, -1000, 607, -1000, -1000, -1000, 1039, 2434,
	2429, -1000, -1000, -130, -1000, -1000, 380, -1000, -1000, -1000,
	555, 2240, -1000, -1000, 370, -1000, -1000, 2233, -1000, -1000,
	107, -1000, 1610, 1499, -1000, 2625, 10714, -1000, -1000, -1000,
	-1000, -1000, -1000, 650, -1000, 385, 47162, -1000, 1054, -1000,
	1001, 650, 28957, 623, 287, -1000, 1955, -1000, -1000, 3318,
	-1000, 614, -1000, 495, -1000, 1478, -1000, 1455, 30775, 1949,
	2280, -1000, 47124, 774, -1000, -1000, 2235, -1000, -1000, -1000,
	-1000, -1000, -1000, 2232, 2228, -1000, -1000, -1000, -1000, -1000,
	1938, 2624, 88, 3136, 2216, -1000, -1000, 2622, 1432, 1407,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1400,
	1395, 30169, -1000, -1000, 2235, 1937, 24715, 1601, -1000, -1000,
	1388, 1372, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2610,
	-1000, -1000, 3242, -233, -1000, 2215, 118, 172, -1000, 2213,
	-1000, -1000, 896, -224, 86, 75, 71, -1000, -1000, -1000,
	10714, -1000, -1000, 44108, 519, -1000, -1000, -1000, 198, -1000,
	-1000, -1000, -1000, 2211, 2194, -1000, 30169, 3084, 2184, 466,
	3240, -1000, 47291, -1000, 1601, -1000, 466, 1357, -1000, 1601,
	1601, -1000, 431, -1000, 1586, -1000, 1917, -1000, 3175, -1000,
	412, -1000, 483, -1000, -1000, -1000, 1338, -1000, -1000, -1000,
	47124, 490, -1000, 640, 2607, -1000, -1000, 2418, 10714, 2606,
	1601, 2189, -126, 30169, 2926, 2922, 2917, 2683, 1335, -1000,
	-1000, 24715, -1000, -1000, 29563, 44108, 2180, -1000, -1000, 775,
	144, 172, -1000, 3239, 145, 3237, 3228, 1036, 1818, -1000,
	143, 124, 122, -1000, -1000, -1000, -1000, 503, -1000, 296,
	-1000, -1000, -1000, 339, -1000, -1000, 3084, -1000, 3225, 515,
	-1000, 24715, -1000, -1000, 28957, 1709, 1709, -1000, -1000, 1914,
	-1000, -1000, -1000, -1000, 1904, -1000, -1000, -1000, 1309, -1000,
	44108, 852, 7659, -1000, 2120, -1000, 44108, -1000, 2938, -1000,
	265, 1302, 339, 757, 339, 757, 339, 757, 339, 757,
	277, -1000, -1000, -1000, 1300, -1000, -1000, 2605, 1891, 132,
	99, 3224, -1000, 2180, 3205, 2180, 2180, -1000, 91, 896,
	-1000, -1000, -1000, 2193, -1000, -1000, -1000, -1000, 1601, 1601,
	2191, 2183, 411, -1000, -1000, -1000, 28351, 493, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 490, 47291, -1000, 7659, 1279,
	-1000, 2290, -1000, 718, -1000, -1000, 2932, 2919, 3327, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44108,
	3134, 24109, 105, -1000, -1000, -1000, 2181, -1000, 2180, -1000,
	-1000, 1598, -1000, -283, 1882, 1871, -1000, -1000, 44108, -1000,
	44108, 479, -1000, 47291, 1275, -1000, 7659, -1000, -1000, 3307,
	-1000, 3304, 816, 816, 339, 339, 339, 339, -1000, -1000,
	44108, -1000, 1209, -1000, -1000, -1000, 1361, -1000, -1000, -1000,
	-1000, 2173, -1000, -1000, 2154, -1000, -1000, -1000, 1199, 2241,
	-1000, -1000, -1000, -1000, -1000, 1934, 530, -1000, 1024, -1000,
	1595, -1000, 27745, 44108, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44108, 7049, -1000, 1348, -1000, -1000, 2290, 44108, -1000,
}

var yyPgo = [...]int{
	0, 172, 3344, 256, 178, 3888, 110, 249, 248, 242,
	241, 3887, 3886, 3885, 3112, 3099, 3883, 3881, 3880, 3879,
	3878, 3877, 3876, 3875, 3874, 3873, 3872, 3871, 3870, 3869,
	3868, 3867, 3866, 3865, 3864, 3863, 3862, 3861, 3860, 3858,
	3855, 3854, 3853, 3852, 3851, 3850, 235, 3849, 3848, 3847,
	3846, 3845, 3844, 3843, 3842, 3828, 3827, 3826, 3823, 3822,
	3820, 3819, 3818, 3817, 3816, 3815, 3814, 3813, 3812, 3810,
	3809, 3808, 3807, 3806, 3804, 3803, 3788, 3783, 3782, 3780,
	229, 3779, 3096, 3778, 3777, 3775, 3774, 3773, 3772, 3771,
	246, 3770, 3768, 3766, 3765, 3760, 3759, 3757, 3756, 3741,
	3740, 3735, 237, 3734, 3733, 3730, 3728, 222, 3727, 226,
	3725, 176, 151, 3722, 3719, 3718, 3712, 3711, 3709, 236,
	189, 76, 3708, 55, 3707, 3706, 221, 3703, 154, 3702,
	146, 3701, 3700, 3699, 3697, 3696, 3695, 3694, 3693, 3692,
	3690, 3689, 3686, 3683, 3680, 3679, 3678, 3677, 3675, 96,
	3674, 257, 3670, 74, 3669, 3668, 130, 57, 148, 253,
	2285, 254, 250, 187, 175, 107, 3667, 343, 3666, 162,
	228, 159, 27, 3665, 138, 3664, 259, 47, 45, 240,
	141, 62, 190, 123, 3663, 218, 114, 108, 3660, 3658,
	143, 233, 181, 3657, 103, 3656, 3655, 3654, 3652, 3651,
	195, 202, 3644, 3639, 131, 3638, 3637, 127, 3633, 78,
	135, 166, 124, 3632, 91, 125, 128, 119, 97, 3631,
	173, 3629, 3628, 3627, 3624, 183, 3623, 3622, 137, 68,
	3621, 3620, 3619, 72, 3617, 80, 3616, 29, 3615, 67,
	3614, 3612, 3610, 3608, 3606, 3605, 3602, 3595, 3593, 3591,
	3590, 3589, 58, 3588, 3587, 7, 15, 14, 3586, 30,
	3585, 169, 3584, 3581, 3580, 3579, 3578, 90, 88, 3576,
	93, 163, 3575, 8, 25, 73, 3574, 3573, 220, 261,
	102, 157, 3572, 331, 3571, 3570, 3566, 167, 3565, 2485,
	3564, 3562, 3559, 3558, 3556, 3555, 23, 3553, 219, 42,
	3552, 136, 133, 3538, 43, 49, 207, 212, 3536, 3534,
	3531, 132, 211, 112, 35, 0, 3530, 160, 3529, 3528,
	3526, 245, 3524, 232, 293, 170, 266, 255, 287, 3523,
	3522, 66, 3519, 164, 32, 56, 184, 86, 19, 213,
	3518, 403, 9, 197, 3517, 209, 3516, 191, 16, 87,
	147, 3513, 3512, 34, 258, 3511, 3509, 3506, 129, 3505,
	3503, 188, 77, 3502, 3501, 3494, 3493, 41, 3491, 39,
	12, 3490, 101, 3489, 239, 3488, 330, 158, 186, 180,
	156, 223, 227, 84, 81, 3487, 1712, 152, 98, 26,
	3486, 225, 3483, 271, 126, 3482, 99, 3481, 244, 260,
	208, 3480, 182, 10, 50, 38, 33, 46, 11, 230,
	206, 3478, 3475, 21, 52, 3474, 63, 3473, 18, 3472,
	3471, 69, 5, 3470, 3469, 17, 20, 3468, 37, 217,
	171, 121, 95, 70, 3466, 3464, 48, 134, 3463, 153,
	174, 155, 3462, 79, 3461, 3459, 3458, 1899, 3457, 252,
	3456, 3455, 3454, 3453, 3452, 3449, 3448, 3445, 216, 3443,
	113, 44, 3442, 3441, 3440, 3439, 82, 139, 3438, 3436,
	3435, 3434, 31, 140, 3431, 13, 3430, 24, 22, 36,
	3429, 100, 3428, 3, 185, 3427, 3426, 4, 3425, 3419,
	1, 2, 3418, 3417, 120, 3415, 94, 28, 165, 104,
	3414, 3413, 89, 215, 149, 3412, 3411, 111, 238, 203,
	3410, 75, 231, 251, 3409, 210, 3408, 3406, 3404, 3403,
	3402, 3401, 1181, 3399, 3398, 243, 71, 92, 118, 3396,
	3390, 3389, 3386, 85, 161, 122, 115, 65, 83, 3385,
	109, 201, 3384, 200, 3383, 3381, 3379, 105, 3378, 3374,
	3371, 3367, 192, 3366, 3365, 193, 224, 3364, 3363, 329,
	3361, 3360, 3358, 3357, 3356, 3353, 3352, 3350, 3347, 3346,
	234, 334, 3333,
}

//line mysql_sql.y:11738
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 565, 568, 568, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 117, 117, 146, 544, 544, 116, 550,
	550, 550, 551, 551, 113, 135, 134, 137, 137, 136,
	136, 133, 133, 129, 132, 132, 131, 131, 130, 125,
	127, 127, 126, 128, 128, 114, 102, 115, 493, 493,
	492, 492, 491, 491, 444, 444, 490, 490, 490, 489,
	489, 489, 488, 488, 487, 487, 486, 486, 484, 484,
	485, 483, 482, 482, 482, 480, 480, 480, 476, 476,
	478, 477, 477, 479, 471, 471, 474, 474, 472, 472,
	472, 472, 475, 470, 470, 470, 469, 469, 101, 101,
	101, 388, 388, 100, 100, 402, 402, 402, 402, 402,
	400, 400, 400, 400, 400, 400, 399, 399, 398, 398,
	403, 403, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 91, 91, 91, 91, 91, 96, 96, 96,
	556, 556, 555, 555, 557, 557, 557, 557, 558, 558,
	94, 94, 94, 95, 397, 397, 397, 92, 93, 93,
	387, 387, 392, 392, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 396, 396, 396,
	394, 394, 393, 393, 395, 395, 85, 85, 85, 88,
	87, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	86, 86, 86, 86, 86, 86, 81, 81, 81, 81,
	81, 80, 80, 82, 82, 384, 384, 383, 97, 97,
	98, 553, 553, 552, 554, 554, 554, 554, 99, 105,
	105, 105, 105, 105, 105, 105, 104, 104, 107, 107,
	106, 108, 90, 90, 90, 90, 90, 90, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 518, 518, 518, 520, 520, 319, 320, 569, 322,
	318, 318, 318, 514, 514, 515, 516, 517, 517, 517,
	103, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	79, 84, 84, 260, 260, 265, 265, 266, 266, 266,
	271, 271, 272, 272, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 247, 247, 247, 242,
	242, 242, 242, 243, 243, 244, 244, 245, 245, 245,
	245, 246, 246, 312, 312, 267, 267, 267, 269, 269,
	268, 264, 262, 262, 262, 262, 262, 262, 262, 263,
	263, 263, 263, 270, 270, 77, 83, 83, 83, 532,
	532, 78, 543, 543, 447, 447, 333, 333, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 452, 453, 329, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 53, 56,
	57, 52, 52, 52, 373, 373, 51, 570, 570, 307,
	307, 65, 64, 55, 66, 67, 68, 69, 70, 71,
	50, 63, 63, 63, 63, 63, 63, 63, 63, 74,
	465, 465, 572, 572, 572, 72, 73, 446, 446, 446,
	62, 61, 60, 59, 58, 58, 49, 49, 48, 48,
	54, 141, 142, 142, 326, 326, 326, 328, 328, 324,
	571, 571, 416, 416, 327, 327, 47, 47, 47, 47,
	75, 325, 325, 306, 323, 323, 323, 12, 12, 10,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 25, 26, 28, 381, 381,
	378, 27, 19, 18, 18, 22, 21, 17, 17, 20,
	23, 24, 24, 9, 9, 9, 9, 14, 14, 15,
	164, 164, 215, 215, 526, 526, 522, 522, 523, 523,
	523, 524, 524, 525, 525, 109, 459, 459, 459, 459,
	459, 459, 8, 8, 186, 186, 458, 458, 458, 458,
	458, 458, 385, 385, 385, 503, 503, 503, 504, 185,
	185, 180, 180, 460, 460, 350, 505, 505, 468, 468,
	467, 467, 466, 466, 183, 183, 184, 184, 167, 167,
	120, 120, 473, 473, 473, 473, 481, 481, 443, 443,
	252, 252, 299, 299, 300, 300, 157, 157, 158, 158,
	158, 158, 158, 158, 559, 559, 560, 561, 562, 562,
	563, 563, 563, 564, 564, 564, 564, 564, 511, 511,
	513, 513, 512, 182, 182, 178, 178, 179, 179, 179,
	177, 177, 176, 175, 175, 174, 172, 172, 172, 173,
	173, 173, 190, 190, 160, 160, 160, 159, 159, 159,
	159, 159, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 161, 161, 519, 519, 519, 448,
	448, 448, 455, 455, 280, 280, 281, 281, 279, 279,
	162, 162, 163, 163, 163, 163, 278, 278, 277, 165,
	165, 171, 170, 170, 166, 166, 166, 166, 288, 288,
	287, 287, 287, 287, 112, 118, 118, 119, 189, 189,
	286, 285, 285, 285, 188, 188, 187, 187, 181, 181,
	169, 169, 169, 169, 284, 168, 282, 549, 549, 548,
	548, 547, 545, 545, 545, 546, 546, 546, 546, 495,
	495, 495, 495, 495, 313, 313, 313, 317, 317, 316,
	316, 316, 316, 316, 321, 7, 7, 7, 7, 7,
	7, 7, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 38, 199, 200, 39, 201,
	201, 202, 202, 203, 203, 204, 205, 206, 206, 206,
	206, 37, 191, 191, 192, 192, 193, 193, 194, 195,
	195, 195, 198, 196, 197, 197, 567, 567, 566, 36,
	36, 29, 150, 150, 151, 151, 151, 153, 153, 248,
	248, 248, 152, 152, 154, 154, 154, 527, 530, 530,
	531, 528, 528, 533, 533, 533, 534, 534, 534, 534,
	535, 535, 30, 138, 143, 538, 538, 538, 537, 537,
	539, 539, 540, 540, 303, 303, 304, 304, 148, 149,
	149, 145, 140, 156, 156, 156, 156, 156, 139, 144,
	147, 529, 536, 536, 536, 382, 382, 379, 380, 380,
	377, 376, 376, 376, 542, 542, 541, 541, 541, 314,
	314, 31, 372, 372, 374, 375, 375, 375, 366, 366,
	366, 366, 35, 370, 370, 371, 371, 371, 371, 371,
	371, 371, 367, 367, 369, 369, 365, 365, 365, 365,
	365, 365, 365, 34, 155, 155, 364, 364, 361, 361,
	359, 359, 360, 360, 358, 358, 358, 362, 362, 42,
	76, 43, 44, 45, 41, 363, 363, 33, 33, 33,
	33, 33, 33, 33, 33, 122, 121, 121, 121, 121,
	121, 124, 124, 302, 302, 301, 301, 123, 249, 249,
	40, 227, 227, 435, 435, 430, 430, 430, 430, 430,
	450, 450, 450, 431, 431, 431, 432, 432, 432, 434,
	434, 434, 433, 433, 433, 433, 433, 449, 449, 451,
	451, 451, 404, 404, 405, 405, 405, 408, 408, 422,
	422, 423, 423, 421, 421, 428, 428, 427, 427, 426,
	426, 425, 425, 424, 424, 424, 424, 419, 419, 418,
	418, 406, 406, 406, 406, 406, 407, 407, 407, 417,
	417, 420, 420, 276, 276, 275, 275, 235, 235, 236,
	236, 274, 274, 233, 233, 234, 234, 234, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 501, 501, 502, 238, 238, 250, 250,
	250, 250, 250, 250, 237, 237, 239, 239, 216, 216,
	214, 214, 214, 214, 207, 207, 208, 208, 209, 209,
	209, 213, 213, 212, 212, 212, 212, 210, 210, 211,
	211, 211, 211, 211, 211, 390, 390, 498, 498, 499,
	499, 494, 494, 494, 497, 497, 497, 497, 497, 497,
	497, 500, 500, 500, 496, 496, 217, 297, 297, 297,
	315, 315, 315, 315, 296, 296, 296, 232, 232, 231,
	231, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 389, 389, 330, 330, 331, 331, 259,
	258, 258, 258, 258, 258, 256, 257, 255, 255, 255,
	255, 255, 254, 254, 253, 253, 253, 368, 368, 251,
	251, 241, 241, 241, 240, 240, 240, 429, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 294, 294, 294,
	295, 295, 295, 295, 295, 295, 295, 295, 340, 340,
	346, 346, 510, 510, 509, 218, 218, 218, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 228, 228, 228,
	413, 413, 413, 413, 414, 414, 414, 414, 415, 415,
	415, 411, 411, 412, 412, 351, 352, 352, 456, 456,
	457, 457, 409, 409, 410, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 464, 464, 464,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 521, 521, 521, 506,
	506, 506, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 507, 507, 508, 508, 508, 508, 508, 508,
	508, 508, 508, 508, 508, 508, 508, 508, 508, 508,
	508, 292, 292, 292, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 353, 353, 354, 354, 461, 461, 461, 461,
	461, 461, 462, 462, 463, 463, 463, 463, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 338, 289, 289,
	289, 355, 347, 347, 348, 348, 349, 349, 341, 341,
	341, 341, 341, 341, 342, 342, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 343, 343,
	345, 345, 357, 357, 357, 356, 356, 356, 356, 356,
	356, 356, 230, 230, 230, 230, 335, 335, 335, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 220, 220, 220, 220, 224, 224, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 225, 225, 225, 225, 225, 223, 223, 223, 223,
	223, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 110,
	111, 111, 222, 298, 298, 436, 436, 439, 439, 437,
	437, 438, 440, 440, 440, 441, 441, 441, 442, 442,
	442, 445, 445, 305, 305, 305, 311, 311, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 6, 1, 2, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 10, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 3, 4, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 10,
	7, 4, 4, 1, 3, 1, 6, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 8, 8, 0,
	4, 7, 0, 3, 0, 2, 0, 1, 1, 1,
	1, 4, 2, 2, 3, 3, 4, 5, 3, 4,
	4, 2, 2, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 6, 7, 4, 4, 7, 8,
	3, 3, 3, 4, 0, 2, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 4, 5, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 5, 1, 3, 2, 1, 5, 4,
	4, 2, 0, 5, 4, 0, 1, 3, 3, 1,
	3, 1, 3, 1, 3, 4, 0, 1, 0, 1,
	1, 3, 1, 1, 0, 4, 1, 3, 2, 1,
	0, 8, 0, 4, 7, 4, 0, 2, 0, 2,
	0, 2, 0, 4, 1, 3, 1, 1, 6, 4,
	5, 7, 4, 5, 0, 1, 3, 8, 0, 6,
	0, 4, 6, 1, 1, 1, 1, 1, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 3, 0, 1, 1, 0,
	2, 2, 0, 2, 3, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 7, 7, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 4, 4, 4, 3, 2, 2,
	2, 3, 2, 3, 4, 1, 3, 4, 0, 2,
	1, 1, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 1, 7, 1,
	3, 0, 1, 1, 3, 1, 3, 0, 1, 1,
	1, 14, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 4, 1, 1, 1, 1, 0, 1, 2, 9,
	9, 7, 1, 2, 3, 3, 3, 0, 4, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	4, 1, 1, 3, 4, 3, 0, 1, 1, 1,
	0, 2, 7, 8, 8, 0, 3, 3, 0, 3,
	0, 3, 0, 5, 1, 3, 0, 3, 3, 0,
	2, 9, 6, 0, 2, 2, 3, 3, 4, 4,
	4, 1, 0, 2, 2, 1, 3, 2, 1, 3,
	2, 1, 3, 2, 0, 1, 3, 4, 3, 1,
	1, 4, 1, 3, 1, 1, 1, 1, 0, 1,
	1, 1, 11, 0, 2, 3, 3, 2, 2, 3,
	1, 1, 1, 3, 3, 4, 0, 2, 2, 2,
	2, 2, 2, 6, 0, 4, 1, 1, 0, 3,
	0, 1, 1, 2, 4, 4, 4, 0, 1, 8,
	2, 4, 4, 4, 9, 0, 2, 11, 9, 11,
	8, 6, 9, 7, 10, 2, 2, 9, 4, 5,
	3, 0, 4, 1, 3, 0, 3, 6, 0, 2,
	10, 0, 2, 0, 2, 0, 3, 2, 4, 3,
	0, 2, 1, 0, 2, 3, 0, 2, 3, 0,
	2, 1, 0, 3, 2, 4, 3, 0, 1, 0,
	1, 1, 0, 6, 0, 3, 5, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 4, 6, 5, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 5, 6, 5, 0,
	3, 0, 1, 1, 3, 3, 3, 0, 4, 1,
	3, 3, 3, 0, 1, 1, 3, 2, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 5, 4, 1, 3, 3, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 4, 6, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 3,
	3, 2, 2, 1, 5, 6, 4, 1, 1, 1,
	5, 4, 1, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	4, 1, 1, 2, 5, 6, 8, 6, 6, 6,
	1, 1, 1, 1, 1, 1, 3, 4, 4, 4,
	7, 9, 7, 7, 7, 9, 7, 7, 0, 2,
	0, 1, 1, 2, 4, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 2, 2, 2, 0, 1, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 5, 0, 1, 3, 0, 1, 0, 2,
	0, 2, 0, 1, 6, 8, 8, 6, 6, 5,
	5, 5, 6, 6, 6, 6, 5, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 1, 1, 1,
	4, 4, 6, 8, 6, 4, 5, 4, 4, 4,
	3, 4, 6, 6, 7, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 8, 4, 2, 3, 2, 4, 2,
	2, 4, 6, 2, 2, 4, 6, 4, 2, 4,
	4, 4, 0, 1, 2, 3, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 3, 0, 1, 1, 3, 1, 3, 3, 3,
	3, 3, 2, 1, 1, 1, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 1, 3, 4, 4,
	5, 4, 5, 3, 4, 5, 6, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 4, 1, 2,
	3, 5, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -565, -568, -2, -5, 618, -1, -4, -111, -85,
	-7, -113, -114, -8, -109, -9, -10, -12, -89, -104,
	-106, -108, -107, -46, -11, -103, -80, -81, -91, -97,
	-100, -101, -102, -115, -110, -112, -157, -116, -117, 608,
	-86, -87, -88, -32, -31, -30, -29, -138, -143, -146,
	614, 447, 14, 496, -14, -15, -511, -16, 259, -318,
	-319, -320, -322, -569, -47, -48, -49, -58, -59, -60,
	-61, -62, -72, -73, -74, -50, -51, -52, -55, -53,
	-65, -64, -66, -67, -68, -69, -70, -71, -54, -141,
	-142, -75, -56, -76, -57, -78, -77, -83, -79, -84,
	-140, -145, -13, 234, -82, 76, -92, -93, -94, -95,
	-96, -98, -99, 371, 377, 434, 607, 61, -158, -160,
	624, 625, 159, 160, 162, 163, -33, -34, -35, -36,
	-37, -38, -40, -39, -41, -42, -43, -44, -45, 230,
	16, 539, -17, -20, -18, -21, -19, -27, -28, -26,
	-23, -25, -139, -24, -144, -22, -147, 254, 253, 38,
	320, 321, 322, 375, 252, 231, 15, 31, 42, 351,
	-159, 82, 531, 532, 534, 232, -161, 13, 629, -6,
	-3, -2, -125, -129, -133, -136, -137, -134, -135, -4,
	-111, 117, 244, 609, -315, 367, 610, 612, 611, 85,
	93, -308, -310, 447, 259, 371, 377, 607, 625, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 555,
	556, 557, 558, 559, 569, 570, 560, 561, 562, 563,
	564, 565, 566, 567, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 499, 594,
	595, 596, 597, 527, 552, 588, 589, 590, 591, 349,
	350, 536, 271, 295, 402, 301, 308, 159, 178, 172,
	200, 192, 532, 167, 275, 313, 276, 92, 162, 482,
	107, 459, 431, 165, 290, 292, 294, 528, 529, 361,
	297, 526, 296, 298, 300, 530, 277, 352, 188, 183,
	289, 273, 181, 278, 40, 279, 205, 280, 281, 541,
	455, 348, 461, 305, 52, 429, 182, 456, 293, 458,
	209, 213, 473, 474, 176, 177, 463, 476, 204, 207,
	208, 251, 345, 346, 43, 538, 263, 477, 211, 203,
	199, 485, 309, 307, 202, 175, 198, 274, 65, 215,
	214, 216, 425, 426, 427, 428, 282, 283, 365, 472,
	195, 184, 353, 168, 23, 480, 258, 460, 378, 284,
	302, 310, 210, 212, 265, 270, 540, 531, 433, 269,
	306, 478, 180, 262, 291, 257, 481, 169, 534, 380,
	285, 163, 299, 475, 484, 64, 393, 174, 166, 248,
	160, 267, 272, 286, 287, 288, 525, 312, 311, 303,
	533, 196, 264, 201, 186, 173, 197, 161, 266, 483,
	394, 605, 351, 412, 194, 191, 268, 241, 479, 462,
	164, 416, 395, 189, 314, 601, 602, 603, 366, 344,
	315, 316, 187, 255, 453, 454, 319, 422, 335, 396,
	432, 403, 397, 222, 223, 323, 465, 467, 206, 604,
	324, 325, 326, 457, 327, 328, 329, 330, 370, 56,
	58, 94, 97, 96, 626, 627, 63, 29, 356, 359,
	391, 398, 337, 606, 537, 334, 338, 339, 360, 25,
	414, 382, 418, 417, 48, 49, 50, 53, 54, 55,
	57, 59, 60, 51, 524, 375, 388, 486, 45, 47,
	385, 27, 362, 413, 435, 333, 415, 446, 46, 444,
	445, 466, 26, 364, 363, 62, 44, 421, 423, 424,
	317, 331, 373, 615, 487, 368, 384, 387, 369, 336,
	358, 389, 67, 66, 381, 616, 376, 374, 332, 542,
	543, 340, 568, 354, 430, 521, 520, 519, 518, 517,
	516, 515, 514, 320, 321, 322, 399, 400, 401, 411,
	404, 405, 406, 407, 408, 409, 410, 449, 450, 617,
	468, 470, 471, 469, 236, 628, 355, 239, 619, 620,
	95, 621, 623, 622, 28, -395, -393, -315, 532, 607,
	377, 531, 534, 371, 351, 625, 375, 259, 320, 321,
	322, 447, -201, -315, 628, -167, 243, 39, -214, -315,
	-167, -82, -15, -14, -159, -160, -214, 238, -323, 24,
	429, -90, 430, 234, 82, 77, -315, -9, -102, -8,
	-109, -80, -157, 434, -321, -315, 320, 320, -321, 238,
	-315, 269, 410, -447, 244, -399, -372, 270, -398, -374,
	-401, -375, 32, 230, 232, 231, 266, 16, 375, 240,
	14, 13, 376, 252, 25, 26, 28, 15, 377, 379,
	29, 380, 383, 384, 385, 42, 388, 389, 259, 85,
	93, 88, 277, -200, -315, -349, -341, 114, -344, -336,
	-337, -339, -490, -484, -334, 82, 141, 142, 149, 115,
	630, -338, -429, 36, 117, 548, 552, 588, 497, -290,
	-291, -292, -293, -294, -295, -315, -485, -483, 88, 98,
	100, 104, 105, 103, 101, 153, 185, 102, 89, 154,
	-160, 85, -506, 558, -309, 581, 594, 595, 596, 597,
	580, 61, -454, -463, 237, -461, 152, 190, 255, 186,
	14, 147, 422, 187, 589, 590, 591, 555, 577, 499,
	559, 569, 584, 550, 551, 553, 545, 546, 547, 549,
	560, 562, 576, -464, 572, 582, 583, 568, 592, 593,
	585, 586, 587, 623, 87, 86, 575, 574, 561, 556,
	557, 563, 544, 554, 564, 565, 573, 578, 579, 359,
	107, 360, 361, 489, 352, 362, 244, 429, 70, 363,
	364, 365, 366, 367, 496, 368, 71, 369, 358, 259,
	412, 370, 189, 206, 501, 500, 502, 493, 490, 488,
	491, 492, 494, 495, 566, 567, 571, -118, -119, 599,
	-559, -283, -560, 6, 7, 8, 9, -561, 154, -550,
	431, 540, 88, 164, 161, -386, 164, 113, 169, 168,
	-386, 166, 323, 265, -363, -150, 349, 412, 327, 94,
	269, -366, -364, 528, -449, 317, 313, 289, 239, 110,
	-151, 249, 248, 108, 489, 237, 386, 308, 56, 58,
	-522, -523, 227, 228, 229, -513, 522, -512, -315, 361,
	96, 97, 27, 238, 372, 265, 467, 465, 466, 468,
	469, 470, 471, -63, -465, -446, 462, 461, -327, 454,
	460, 452, 464, 455, 350, 329, 328, 230, 619, 529,
	523, -305, 396, 432, 486, 487, 373, 433, 473, 475,
	456, 107, 193, 190, 239, 241, 238, 349, 489, 412,
	94, 327, -522, 161, 473, 475, 269, 410, 41, -392,
	422, -391, -393, 474, 485, 86, 87, 472, -305, 107,
	453, 453, -559, -283, -158, -160, -112, -511, 530, 530,
	530, 239, 349, 412, 269, 240, 238, 525, 528, 241,
	489, 237, 320, 372, 265, 327, 94, 166, -448, -519,
	32, -455, 224, 225, 226, 33, 34, -1, 121, 629,
	-341, -341, -6, 632, -6, -341, -315, -315, 156, -220,
	-224, -221, -223, -222, -226, -225, 190, 191, 152, 194,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 207,
	208, 205, 31, 206, 255, 186, 187, 188, 189, 209,
	172, 192, 537, 217, 173, 218, 174, 219, 175, 220,
	176, 177, 221, 178, 181, 182, 183, 184, 180, 155,
	82, 155, 88, -183, 261, -167, -214, 155, 630, -183,
	-559, -176, -177, 11, -214, -296, -315, 431, 124, -90,
	77, -90, 430, 77, -514, -515, -516, -518, 234, 430,
	429, -107, 155, 277, 17, -321, -321, 80, -214, -374,
	269, -399, -372, 36, 79, 156, 242, 156, 79, 82,
	373, 349, 412, 374, 489, 238, 386, 241, 269, 387,
	349, 412, 238, 241, 489, 269, 349, 238, 241, 412,
	269, 387, 452, 453, 241, 27, 378, 381, 382, 453,
	-469, 485, 156, 113, 110, 111, 112, -341, 131, -356,
	124, 125, 126, 127, 128, 129, 130, 138, 137, 148,
	141, 142, 143, 144, 145, 146, 147, 139, 140, 134,
	114, 132, 136, 133, 116, 151, -160, -341, -349, 61,
	-339, -339, -339, -339, -315, -429, -346, -341, 82, 82,
	82, 82, 155, 101, 88, -341, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, -462, 82,
	82, -353, -354, 82, 82, -334, -296, 82, 88, 88,
	82, 82, 82, 88, 82, 82, 82, -354, -354, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, -177, 156, -176, 82, -176, -177,
	-161, -160, 32, 33, 32, 33, 32, 33, 32, 33,
	-562, 616, 82, 98, 626, 222, 478, 539, 167, 168,
	169, -361, 244, -199, -315, -201, 372, 241, 525, 241,
	-151, -361, -361, -361, -361, -361, 240, -361, 24, 238,
	238, 238, 238, -361, 496, 124, 124, 59, -524, 171,
	156, -513, -182, 82, -326, 132, 136, -326, -279, 18,
	24, 267, 267, 267, -326, 307, -570, -571, 17, 134,
	-324, -571, -324, -324, -326, -572, 240, 463, 43, 268,
	267, -178, -179, 22, -178, 457, 453, -416, 458, 459,
	-328, -571, -327, -326, -326, -327, -326, -326, -326, 32,
	238, 241, 489, 327, 620, -570, -570, 31, 31, -447,
	-447, -214, -447, 523, -306, -315, -447, -447, -447, -525,
	243, -556, -555, 476, -558, 478, 161, -393, 161, -393,
	-374, 269, 269, 156, 124, 24, -394, 124, 135, -393,
	-393, -394, -394, -237, 41, -314, 152, -315, 88, -237,
	41, -553, -552, -214, -177, -161, -160, 83, 83, 83,
	533, 533, 533, -447, -447, -447, -447, -447, -449, -447,
	-447, -447, -447, -447, -321, -191, -315, -201, 244, -447,
	-447, -447, -162, -163, 143, -341, -315, -162, -3, -127,
	-126, 118, 119, 121, 610, 367, 609, 613, 607, -393,
	41, -442, 394, 393, -436, -438, 82, -437, 82, -437,
	-437, -437, -437, -437, 82, 82, -439, 82, -439, -439,
	-436, -440, 82, -440, -441, 82, -441, -440, -315, -347,
	-349, -315, 39, -458, 61, -157, 82, 31, 82, -183,
	-315, -341, -459, 61, -157, 82, 31, -177, -120, 39,
	-179, 21, 155, 98, 88, -107, -90, 77, -107, 83,
	156, -517, 104, 105, -520, 204, 196, -315, -105, 88,
	-7, -8, -9, -10, -46, -80, -157, -486, -484, 82,
	32, 421, 79, 17, -400, 238, 489, 372, 265, 241,
	349, -398, -381, -378, -376, -314, -374, -377, -376, -403,
	-296, 453, -121, 436, 435, 319, -341, -341, -341, -341,
	-341, 103, 114, 344, 104, 105, -336, -357, 32, 315,
	316, -337, -337, -337, -337, -337, -337, -337, -337, -337,
	-337, -337, -337, -345, -355, -429, 82, 134, 132, 136,
	133, 116, -339, -339, -337, -337, -239, -314, 152, 83,
	156, -341, -510, -509, 118, -341, -341, -341, -341, -315,
	-507, -508, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 363, 358, 364, 362, 352, 370, 365,
	366, 189, 520, 521, 514, 515, 516, 517, 518, 519,
	-347, -347, -341, -507, -347, -289, 33, 32, -349, -349,
	-349, 83, -341, -521, 342, 341, 343, -180, -315, -347,
	83, 83, 83, 98, -349, -349, -347, -337, -347, -347,
	-347, -347, -508, -289, -289, -289, -289, 143, -349, -349,
	-289, -289, -289, -289, 143, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, 83, 83, 83, 143, -349,
	-178, -119, -467, -466, -341, 41, -120, -179, -563, 617,
	82, -296, -551, 88, 88, 630, 479, 480, 165, 168,
	167, -315, 114, 35, 82, -191, -361, -361, -361, -530,
	-315, 89, -382, -379, -376, -315, -315, -372, -315, -315,
	-214, -361, -361, -361, -361, -214, -248, 53, 54, 55,
	-376, -152, 56, 57, -525, -512, 35, -181, -315, -279,
	-339, -339, -341, -376, 269, -570, -326, -326, -307, -306,
	-328, -323, -328, -328, -279, -324, -326, -326, -341, -328,
	-324, -279, -315, 453, -279, -279, -416, -326, -325, -315,
	-325, -361, -306, -307, -307, -214, -214, -260, -265, -261,
	-266, 261, 235, 356, 357, 233, 231, 11, 232, -273,
	308, -362, 497, -243, -244, 77, 42, -246, 259, 398,
	391, 271, 275, 92, 276, 431, 277, 240, 279, 280,
	281, 296, 298, 251, 282, 283, 284, 422, 285, 160,
	297, 286, 287, 288, 374, -238, 6, 330, 41, 51,
	52, 445, 444, 542, 539, 272, -527, -315, -527, 31,
	31, -382, -315, -315, -170, -165, -169, -166, -171, -282,
	-284, -168, 82, -214, -160, -315, 156, 477, 479, 480,
	-556, -394, -556, -394, 32, 421, -397, 421, 32, -372,
	-391, 473, 475, -387, 88, 422, -377, -396, 79, 152,
	-466, -394, -394, -396, -396, 151, 156, -554, 478, 479,
	227, -178, 98, 98, 98, -216, -214, -527, -381, -372,
	-315, -447, -216, -216, -216, -315, -315, 82, 155, 36,
	-315, -315, -315, -278, 156, -277, 17, -316, -315, 35,
	88, 155, -278, -128, -126, 120, -341, -6, 609, -341,
	-6, -6, -341, -6, -341, -445, 395, 98, 98, -298,
	88, -298, 98, 98, 98, 83, 88, -385, 79, -460,
	-350, -505, 599, -185, 83, -180, -503, -504, -180, -184,
	-315, -458, 630, 631, -460, -185, 83, -503, -178, 600,
	-120, -175, -174, -341, -315, 24, -107, -90, -515, 155,
	156, -181, -400, -380, -377, -402, 143, -315, -388, 156,
	539, 633, 86, 242, -542, -541, 413, 83, 156, -470,
	243, 496, 88, 630, 429, 222, 223, 103, 344, 104,
	105, -429, -349, -345, -339, -339, -337, -337, -343, 256,
	-343, 113, -341, 631, -340, -509, 120, -341, 35, 156,
	35, 156, 80, 155, 83, 83, 17, 17, 83, -341,
	83, 83, 83, 83, 17, 17, -341, 83, 155, 83,
	83, 83, 83, 80, 83, 156, 83, 83, 83, 83,
	156, -349, -349, -341, -349, 83, 83, 83, -341, -341,
	-341, -349, 83, -341, -341, -341, -341, -341, -341, -341,
	-341, -341, -341, -410, 448, -410, -410, 156, 156, 156,
	83, -120, 82, 98, 156, 627, -302, -301, 88, 166,
	169, 169, 168, 24, 36, -200, -202, -203, -204, -205,
	-206, 134, 157, 158, 82, -214, -214, -214, -531, 399,
	-543, 156, 41, -541, 489, -148, 319, -365, 80, -155,
	17, 539, -214, -214, -214, -214, -227, 35, 17, -164,
	-215, -315, 82, 83, 156, -373, 80, -315, -307, -279,
	-279, -328, -279, -279, 156, 23, -326, -328, -328, -324,
	155, -306, -435, 35, -182, 156, 21, 261, -213, -312,
	-210, -212, 246, -331, -211, 249, -499, 247, 245, 108,
	250, 304, 109, 240, -312, -312, 246, -247, 242, 35,
	-312, -263, 240, 347, 304, 247, 21, 261, -262, 240,
	109, -315, 246, 250, 247, 245, -311, 124, -305, 151,
	242, 43, 374, -311, 543, 261, -311, -311, -311, -311,
	-311, -311, -311, 278, 278, -311, -311, -311, -311, -311,
	-311, -311, -311, -311, -311, -311, 161, -311, -311, -311,
	-311, -311, -311, 82, 273, 274, -532, 399, 31, 355,
	355, -543, 31, -156, 349, 31, -285, -286, -287, -288,
	68, 72, 74, 69, 70, 71, 75, 31, 156, -313,
	-317, 35, -315, 88, -313, -160, -165, -170, -313, 82,
	-555, -557, 481, 478, 484, -396, -396, 242, 82, 124,
	-396, -396, 41, -314, -552, 485, 479, -120, 156, 79,
	-216, -192, -193, -194, -195, -220, -296, 191, 194, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 207, 208,
	205, 206, 255, 186, 187, 188, 189, 209, 172, 192,
	537, 173, 174, 175, 176, 177, 178, 181, 182, 183,
	184, 180, -315, -201, -279, -163, -165, -315, 88, -315,
	143, -279, 121, -6, 119, -132, -131, -130, 122, 607,
	613, 121, 121, 121, 83, 83, 83, 156, 83, 83,
	83, 156, 83, 156, -473, 458, 40, 156, 82, 83,
	156, 61, 156, 124, 83, 156, -341, 83, 61, -120,
	88, 156, -172, 37, 38, 155, 431, -315, -484, 83,
	-402, 156, 242, 155, 155, -378, 377, -314, -380, 21,
	539, -296, 39, -302, 124, 630, -315, 83, -343, -343,
	113, -339, -336, 83, 121, -341, 119, -218, -220, 393,
	394, -341, -218, -219, -225, 152, 190, 255, 189, 188,
	186, 393, 394, -237, -315, -341, -341, 83, -341, -341,
	17, -315, -237, -337, -341, -177, -177, 83, 83, -409,
	-410, -409, -409, 83, 83, 83, 83, -409, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 82, 98,
	100, 98, 100, -466, -564, 63, 615, 62, 421, 103,
	309, 156, 98, 88, 631, 156, 124, 169, -544, 313,
	349, 385, 83, 156, -296, -192, -182, 82, -182, -534,
	460, 401, 411, -311, -333, -332, 351, 42, -452, 422,
	407, 408, -379, 269, -315, -540, 95, 124, 79, 334,
	338, 339, 335, 336, 337, -359, -360, -358, -362, -527,
	82, 82, -157, 35, 82, 82, 35, -430, 324, -220,
	-214, -164, -315, 17, 156, -526, 155, -1, -315, -372,
	-326, -279, -341, -341, -279, -326, -326, -328, -315, -430,
	-220, 35, -261, 235, 232, -406, 306, 307, -407, -420,
	309, -422, 82, -217, -296, -211, -498, -499, -361, -315,
	109, -498, 109, 82, -217, -296, -296, -264, -325, -296,
	-315, -315, -315, -315, -269, -268, -296, -271, 32, -272,
	-315, -315, -315, -315, 109, -315, 109, -242, 41, 48,
	49, 50, -311, -311, 193, -245, 41, 421, 423, 424,
	-271, 98, 98, 98, 98, 88, 88, 88, -311, -311,
	98, 88, -317, 88, -500, 168, 45, 46, 98, 98,
	98, 98, 41, 88, -250, 41, 289, 293, 290, 291,
	292, 88, 98, 41, 98, 41, 98, 41, -315, 82,
	-501, -502, 88, -534, -311, 355, -393, 124, -333, -539,
	319, -149, 92, 32, -186, 235, 232, -527, -384, -383,
	-296, -169, -169, -169, -169, 68, 68, 68, 73, 68,
	73, 68, -287, -384, -171, -182, -317, 83, -549, -548,
	-547, -545, 76, 243, 77, -347, 478, 482, 483, -380,
	-329, 88, -387, -190, 24, -214, -214, -451, 299, 300,
	83, 156, -220, -281, 19, 155, -281, 117, -6, -128,
	-130, -341, -6, -341, 609, 367, 610, 88, 98, 98,
	-481, 442, 437, 439, 109, -350, -468, -467, 61, -157,
	-180, -460, -504, -466, -315, 631, 61, -157, -460, -190,
	-473, -174, -173, 44, -315, 98, 17, -377, -372, 143,
	143, -315, 378, -388, 88, 400, 88, 238, 631, 88,
	-302, -336, -341, 83, -228, 177, 176, -228, 35, 83,
	83, -437, -437, -436, -439, -436, -228, -228, 83, 83,
	24, 83, 83, 83, -341, 83, 83, 156, -456, 498,
	-457, 570, -409, -409, -409, -409, -409, -409, -409, -409,
	-409, -409, -409, -409, -409, -409, -409, -409, -352, -351,
	261, 443, 622, 622, 443, 622, 622, 83, 156, -507,
	156, -301, 88, -315, 88, 88, -204, -220, 83, 35,
	-207, -208, -209, -217, -210, -212, 35, -535, 92, -528,
	88, -315, -536, 92, 402, 154, 353, 41, 403, 404,
	419, 348, 98, 98, 409, -529, -315, -156, -538, 52,
	124, 88, -214, -358, -305, 151, 280, 327, -276, -275,
	-315, 88, -207, -157, -207, -207, -157, -431, 326, 21,
	98, 142, -183, 80, 155, -165, -215, -315, 143, 83,
	-279, -279, -279, -326, -431, -157, -418, 310, 82, -416,
	82, -416, 109, 335, -423, -421, 261, -267, 45, 47,
	-220, -496, -315, -494, -496, -315, -494, -494, -361, -341,
	-267, -217, 242, 31, 232, -270, 332, 333, 338, -389,
	305, 114, -389, 156, -172, 156, -315, -237, -237, 31,
	88, 88, -216, 83, 156, 124, -535, -528, 124, -394,
	88, -536, -540, 124, 88, 156, -186, -186, -279, 156,
	124, -188, -187, 79, 80, -189, 79, -187, 68, 68,
	-279, -547, -546, 24, -499, -499, -499, 83, 83, 15,
	-194, 41, -280, 20, 21, 143, -280, 121, 119, 121,
	121, -315, 83, 83, -443, 601, -477, -479, 437, 21,
	21, 15, 243, 83, -460, -460, -481, 45, 46, -372,
	-388, 422, -214, 156, 631, -218, -341, 83, -341, 83,
	88, 83, 88, -177, 21, 83, 156, 83, 83, 83,
	156, 83, 83, -341, 83, -507, 236, -157, 83, 156,
	-157, 88, -533, 413, 88, 88, 98, 41, 98, 154,
	405, -453, -149, -537, 92, 124, 630, 82, -311, -311,
	-311, -315, 83, 156, -311, -311, 83, 83, 83, -235,
	539, -432, 260, 98, 142, 98, 142, 98, -313, -165,
	-315, -279, -526, 155, -279, -432, -408, 311, 98, -337,
	82, -337, 82, -417, 308, 82, 83, 156, -315, -296,
	-232, -231, -229, 103, 114, 41, 391, -230, 92, 151,
	294, 297, 296, 272, 295, -259, -330, 79, 397, 332,
	333, -362, 601, 527, 245, 108, 109, 379, -331, 82,
	82, 80, 314, 82, 82, -496, 83, -267, -296, 41,
	-270, 41, 345, 305, -268, -315, 151, -237, 83, -502,
	88, -533, 88, -396, -538, 88, -527, -177, -383, -466,
	-341, 82, -341, 82, 68, 11, 19, -334, -341, -349,
	244, -6, 610, 367, -252, 602, 88, 21, 88, -475,
	88, -384, -443, -123, -249, -305, 277, 83, 83, 83,
	-409, -409, -412, -411, -415, 443, 306, 451, -349, 88,
	88, 83, 83, -196, -220, -153, 539, -235, -209, -153,
	21, 539, 352, 41, 98, 41, 406, 124, 104, 105,
	-303, -304, 88, -367, -369, -296, 82, -237, -239, 88,
	-275, -334, -334, -233, -157, 35, -234, -273, -362, -122,
	-121, -233, 82, -433, 160, 98, 142, 98, 98, -279,
	-279, -433, -422, 21, 83, -403, 83, -403, 82, 124,
	-337, -421, -424, 61, -229, 103, -337, 88, -239, -240,
	41, 293, 289, 124, 124, -241, 41, 273, 274, -251,
	82, 304, 15, 193, 82, 109, 109, -214, -367, -367,
	-497, 334, 335, 336, 340, 338, 339, 337, -497, -367,
	-367, 82, -390, -389, -337, -311, -311, 151, -537, -178,
	-181, -495, -315, 245, 21, 21, -315, -315, -299, 603,
	98, 88, 439, -252, -444, 604, -471, -416, -237, 124,
	83, -414, 116, 405, 409, -335, -338, 98, 100, 185,
	154, 83, 83, 538, -154, 60, 485, 88, 400, 88,
	352, 88, 631, 156, 124, 83, 156, -436, -341, -404,
	261, -157, 156, -273, -305, -123, -404, -236, -274, -315,
	88, -450, 168, 325, 539, 98, 142, 98, -177, -434,
	168, 325, -407, 83, 83, 83, -403, 98, 83, -428,
	-425, 82, -273, 263, 134, 88, 88, 98, 82, -461,
	31, 88, -368, 82, 83, 83, 83, 83, -367, 98,
	-237, -311, 83, 83, 156, 82, 21, -299, 88, -480,
	442, -474, -472, 437, 438, 439, 440, 88, -413, -414,
	409, -335, -338, 599, 449, 449, 449, -198, -315, 304,
	422, -304, 88, -370, -369, -172, 83, -405, 313, 21,
	-273, -311, -405, 83, 156, -311, -311, 325, 98, 142,
	98, -178, 325, -419, 312, 83, -428, -273, -427, -426,
	311, 264, 82, 83, -341, -353, -311, 83, -254, -253,
	535, -367, -370, 80, -370, 80, -370, 80, -370, 80,
	83, -237, -315, 245, -300, -315, -475, -482, 243, -478,
	-479, 441, -472, 21, 439, 21, 21, -124, 156, 113,
	450, 450, 450, -197, 35, 444, 378, -371, 251, 345,
	346, 92, 539, 332, 333, -172, 21, -406, -237, -274,
	-334, -334, 98, 98, 83, 156, -315, 260, 82, -348,
	-342, -341, 260, 83, -315, -258, -256, -257, 79, 456,
	302, 303, 83, -497, -497, -497, -497, -259, 83, 156,
	-489, 82, 98, -477, -476, -478, 21, -475, 21, -475,
	-475, 446, -413, 88, -311, -311, 88, 88, 331, -296,
	82, -418, -426, -425, -348, 83, 156, -389, -257, 79,
	-256, 79, 16, 15, -370, -370, -370, -370, -315, -493,
	31, 83, -488, -487, -297, -483, -315, 442, 443, 88,
	-475, 124, -567, -566, 621, 98, 98, -315, -403, -408,
	83, -342, -255, 299, 300, 31, 168, -255, -492, -491,
	-490, 83, 156, 155, 88, 88, 83, -422, 103, 41,
	301, 156, 124, -487, -315, -491, 41, -341, 155, -315,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	266, 267, 268, 865, 866, 867, 868, 869, 870, 871,
	0, 0, 0, 0, 623, 624, 0, 589, 0, 0,
	0, 0, 0, 0, 477, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 507, 361, 362, 363, 364, 365,
	366, 367, 368, 0, 291, 287, 212, 213, 214, 215,
	216, 298, 299, 454, 0, 0, 0, 0, 706, -2,
	59, 0, 280, 0, 271, 271, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, -2,
	636, 0, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 350, 351, 352,
	346, 347, 349, 348, -2, 0, 636, 0, 0, 0,
	714, 0, 0, 0, 0, 0, 757, 779, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1270,
	1271, 1272, 1273, 2051, 2021, -2, 1794, 1771, 1946, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 1728,
	1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,
	1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758,
	1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
	1769, 1770, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1861,
	1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
	1942, 1943, 1944, 1945, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, -2, 1979, 1980, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
	2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
	2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, -2, -2, -2, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2052, 2053, 2054,
	2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 2069, 0, 264, 262, 1741, 1771,
	1794, 1848, 1859, 1860, 1894, 1946, 1978, 2021, 2037, 2038,
	2039, 2051, 0, 889, 0, 684, 0, 0, 689, 1220,
	684, 292, 625, 626, 714, 740, 587, 0, 328, 0,
	1785, 332, 2028, 0, 0, 0, 584, 322, 323, 324,
	325, 326, 327, 0, 0, 864, 0, 0, 318, 0,
	286, 1850, 2050, 0, 0, 0, 0, 0, 156, 1002,
	158, 1004, 162, 169, 0, 0, 174, 175, 178, 179,
	180, 181, 182, 0, 186, 0, 188, 191, 0, 193,
	194, 0, 197, 198, 199, 0, 209, 210, 211, 1005,
	1006, 1007, -2, 87, 887, 1699, 1586, 0, 1593, 1606,
	1617, 1350, 1351, 1352, 1353, 0, 0, 0, 0, 0,
	0, 1361, 1362, 0, 1390, 2084, 2125, 2126, 0, 1370,
	1371, 1372, 1373, 1374, 1375, 96, 108, 109, 1639, 1640,
	1641, 1642, 1643, 1644, 1645, 0, 1647, 1648, 1649, 1557,
	1337, 1270, 0, 2093, 0, 2115, 2120, 2121, 2122, 2123,
	2114, 0, 0, 1542, 0, 1532, 0, 0, -2, -2,
	0, 0, 1919, -2, 2127, 2128, 2129, 2090, 2111, 2119,
	2094, 2095, 2118, 2086, 2087, 2088, 2081, 2082, 2083, 2085,
	2097, 2099, 2110, 0, 2106, 2116, 2117, 2026, 0, 0,
	0, 0, 0, 2067, 110, 111, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1553, -2, -2, 1556, -2, 1559, -2,
	-2, -2, -2, 1564, 1565, -2, 1567, -2, -2, -2,
	-2, -2, -2, -2, 1544, 1545, 1546, 1547, 1536, 1537,
	1538, 1539, 1540, 1541, -2, -2, -2, 740, 815, 0,
	740, 0, 715, 762, 765, 768, 771, 718, 0, 0,
	60, 61, 0, 281, 282, 270, 272, 0, 276, 0,
	269, 1038, 0, 0, 0, 0, 1038, 1038, 1038, 1038,
	1038, 0, 1038, 0, 0, 0, 0, 0, 1038, 0,
	922, 1009, 1010, 1011, 1036, 1037, 1108, 0, 0, 0,
	641, 637, 638, 639, 640, 728, 0, 730, 733, 564,
	564, 788, 511, 0, 0, 0, 564, 0, 525, 517,
	0, 0, 0, 564, 0, 0, 735, 735, 0, 567,
	574, 564, 564, -2, 564, 564, 564, 0, 0, 1050,
	531, 532, 533, 517, 517, 536, 537, 538, 548, 549,
	575, 1723, 0, 0, 454, 454, 0, 454, 0, 454,
	454, 454, 643, 1889, 1792, 1865, 1850, 2050, 0, 237,
	1919, 242, 0, 1793, 1812, 0, 0, 1830, 0, -2,
	0, 308, 740, 0, 0, 714, 0, 0, 0, 0,
	0, 454, 454, 454, 454, 454, 1107, 454, 454, 454,
	454, 454, 0, 0, 0, 454, 454, 454, 0, 0,
	780, 781, 776, 777, 778, 782, 783, 5, 6, 19,
	0, 0, 0, 0, 0, 0, 66, 65, 0, 1700,
	1718, 1652, 1653, 1654, 1705, 1656, 1709, 1709, 1709, 1709,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1709,
	1709, 0, 0, 1698, 1676, 1707, 1707, 1707, 1705, 1702,
	1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
	1667, 1668, 1669, 1670, 1712, 1712, 1715, 1715, 1712, 0,
	1582, 0, 0, 0, 0, 684, 688, 0, 0, 0,
	740, -2, 0, 0, 588, 329, 1274, 0, 0, 333,
	0, 334, 0, 0, 0, 353, 0, 356, 341, 342,
	343, 337, 0, 136, 0, 320, 321, 0, 0, 288,
	0, 0, 0, 455, 0, 0, 0, 0, 0, 0,
	166, 163, 170, 173, 183, 190, 0, 202, 204, 207,
	164, 171, 176, 177, 184, 205, 165, 167, 168, 172,
	206, 208, 185, 189, 203, 187, 192, 195, 196, 201,
	0, 137, 0, 0, 0, 0, 0, 1592, 0, 0,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1586, 0, 0,
	1356, 1357, 1358, 1359, 0, 1363, 0, 1391, 0, 0,
	0, 0, 0, 1646, 1650, 0, 1582, 1582, 0, 1582,
	1578, 0, 0, 0, 0, 0, 0, 1582, 1515, 0,
	0, 1517, 1533, 0, 0, 1519, 1520, 0, 1523, 1524,
	1582, 0, 1582, 1528, 1582, 1582, 1582, 1511, 1512, 0,
	1578, 1578, 1578, 1578, 0, 0, 1578, 1578, 1578, 1578,
	1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
	0, 0, 0, 0, 735, 0, 741, 0, -2, 0,
	759, 761, 763, 764, 766, 767, 769, 770, 772, 773,
	720, 0, 0, 62, 0, 0, 0, 0, 274, 0,
	279, 0, 0, 0, 886, 0, 0, 1038, 1038, 1038,
	923, 0, 0, 0, 0, 0, 0, 0, 0, 1038,
	1038, 1038, 1038, 0, 1056, 0, 0, 0, 643, 642,
	0, 729, 0, 0, 788, 0, 0, 509, 510, 0,
	0, 517, 564, 564, 523, 524, 519, 518, 570, 571,
	567, 0, 567, 567, 788, 0, 542, 543, 544, 564,
	564, 550, 736, 0, 551, 552, 567, 0, 572, 573,
	788, 0, 0, 788, 788, 0, 560, 561, 562, 564,
	0, 0, 1038, 0, 580, 519, 519, 1724, 1725, 0,
	0, 1047, 0, 0, 0, 583, 0, 0, 0, 0,
	644, 217, 220, 0, 223, 0, 1889, 0, 1889, 0,
	230, 0, 0, 0, 0, 0, 0, 260, 261, 0,
	0, 0, 0, 251, 254, 1214, 1215, 999, 1000, 255,
	256, 300, 301, 0, 735, 758, 760, 754, 755, 756,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 0, 619, 0, 902, 621, 0, 0,
	0, 0, 796, 790, 792, 859, 96, 796, 8, 83,
	80, 0, 19, 0, 0, 19, 19, 0, 19, 265,
	0, 1721, 1719, 1720, 1655, 1706, 0, 1681, 0, 1682,
	1683, 1684, 1694, 1695, 0, 0, 1677, 0, 1678, 1679,
	1680, 1671, 0, 1672, 1673, 0, 1674, 1675, 263, 0,
	1583, 890, 0, 662, 676, 657, 0, 665, 0, 0,
	1221, 0, 645, 676, 647, 0, 665, 735, 712, 0,
	690, 0, 0, 330, 0, 338, 335, 0, 339, 0,
	0, 355, 357, 358, 359, 344, 345, 585, 316, 317,
	309, 310, 311, 312, 313, 314, 315, 319, 106, 0,
	289, 290, 0, 0, 0, 150, 151, 152, 153, 154,
	155, 157, 141, 608, 610, 991, 1003, 0, 994, 0,
	160, 200, 133, 0, 0, 0, 1587, 1588, 1589, 1590,
	1591, 1596, 0, 1598, 1600, 1602, 1604, 0, 1622, -2,
	-2, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1607, 1620, 1621, 0, 0, 0, 0,
	0, 0, 1618, 1618, 1613, 0, 1376, 1216, 1217, 1354,
	0, 0, 1388, 1392, 0, 0, 0, 0, 0, 97,
	1577, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
	0, 0, 1586, 0, 0, 0, 1579, 1580, 0, 0,
	0, 1470, 0, 0, 1476, 1477, 1478, 0, 671, 0,
	1543, 1516, 1534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	814, 816, 0, 680, 682, 683, 709, 690, 716, 0,
	0, 0, 58, 63, 0, 1075, 283, 284, 0, 0,
	278, 0, 0, 0, -2, 0, 0, 0, 0, 0,
	938, 939, 452, 985, 0, 0, 0, 1001, 1026, 1034,
	0, 0, 0, 0, 0, 1081, 924, 929, 930, 931,
	925, 926, 932, 933, 0, 731, 0, 0, 828, 508,
	565, 566, 789, 514, 1850, 519, 788, 788, 526, 520,
	527, 569, 528, 529, 530, 567, 788, 788, 737, 564,
	567, 553, 568, 567, 556, 557, 0, 563, 576, 581,
	577, 0, 579, 534, 535, 1083, 733, 371, 372, 373,
	375, 0, 423, 423, 423, 406, 423, 0, 0, 394,
	1726, 0, 0, 0, 0, 403, 1726, 0, 0, 1726,
	1726, 1726, 1726, 1726, 1726, 1726, 0, 0, 1726, 1726,
	1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 0,
	1726, 1726, 1726, 1726, 1726, 1200, 1726, 0, 1048, 413,
	414, 415, 416, 421, 422, 0, 449, 937, 0, 0,
	0, 452, 0, 973, 801, 0, 802, 803, 799, 830,
	854, 854, 0, 854, 834, 1220, 0, 0, 228, 229,
	218, 0, 219, 0, 231, 232, 0, 234, 235, 236,
	243, 1792, 1865, 238, 240, 0, 0, 244, 257, 258,
	259, 0, 0, 249, 250, 0, 0, 303, 304, 306,
	0, 690, 1051, 1052, 1053, 605, 1218, 606, 607, 611,
	0, 0, 614, 615, 616, 617, 618, 904, 0, 0,
	978, 979, 980, 788, 0, 797, 0, 793, 860, 0,
	862, 0, 788, 0, 81, 19, 0, 74, 71, 0,
	0, 0, 0, 0, 1701, 1651, 1722, 0, 0, 0,
	1703, 0, 0, 0, 0, 64, 692, 652, 0, 656,
	673, 0, 677, 0, 0, 669, 661, 666, 0, 0,
	686, 653, 0, 1222, 646, 0, 0, 651, 690, 0,
	713, 742, 743, 746, 1275, 0, 340, 336, 354, 0,
	0, 0, 0, 144, 988, 0, 145, 149, 139, 0,
	0, 0, 993, 0, 990, 995, 0, 159, 0, 0,
	134, 135, 1066, 1075, 0, 0, 0, 1597, 1599, 1601,
	1603, 1605, 0, 1608, 1618, 1618, 1614, 0, 1609, 0,
	1611, 0, 1587, 1360, 0, 1393, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 1461, 0, 0, 1465, 0,
	1467, 1468, 1469, 1471, 0, 0, 0, 1475, 0, 1514,
	1535, 1518, 1521, 0, 1525, 0, 1527, 1529, 1530, 1531,
	0, 740, 740, 0, 0, 1432, 1432, 1432, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1377, 0, 1378, 1379, 0, 0, 0,
	817, 710, 0, 0, 0, 0, 0, 1073, 0, 285,
	273, 275, 0, 0, 1039, 0, 0, 892, 893, 895,
	0, 898, 899, 900, 904, 733, 0, 733, 946, 1726,
	456, 0, 0, 987, 0, 962, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	630, 634, 23, 734, 0, 512, 0, 513, 564, 521,
	522, 788, 545, 546, 0, 0, 788, 564, 564, 567,
	0, 578, 1085, 0, 0, 1047, 1151, 1119, 384, 0,
	1231, 1232, 424, 0, 1238, 1247, 1038, 1307, 0, 1247,
	0, 0, 1249, 1250, 0, 0, 0, 0, 407, 408,
	0, 393, 0, 0, 0, 0, 0, 0, 392, 0,
	0, 434, 0, 0, 0, 0, 0, 1727, 1726, 1726,
	0, 401, 402, 0, 405, 0, 0, 0, 0, 0,
	0, 0, 0, 1726, 1726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1191, 0, 0, 0,
	0, 0, 0, 0, 1206, 1207, 946, 1726, 0, 0,
	0, 456, 960, 969, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 820, 0, 0, 0, 0, 0, 733,
	855, 0, 857, 858, 832, -2, 0, 801, 837, 1582,
	221, 222, 0, 0, 227, 245, 247, 0, 0, 0,
	246, 248, 252, 253, 302, 305, 307, 752, 0, 0,
	1109, 0, 905, 906, 908, 909, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1776, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 903, 622, 786, 791, 798, 861, 863, 97,
	794, 786, 0, 84, 19, 83, 75, 76, 0, 19,
	0, 0, 0, 0, 1711, 1710, 1696, 0, 1697, 1708,
	1713, 0, 1716, 0, 696, 0, 0, 676, 678, 0,
	0, 676, 0, 0, 685, 0, 0, 0, 676, 752,
	692, 0, 749, 747, 748, 0, 0, 586, 107, 360,
	0, 0, 0, 0, 0, 609, 0, 992, 141, 0,
	0, 161, 0, 0, 0, 1075, 1070, 1581, 1610, 1612,
	0, 1619, 1615, 1355, 1364, 1389, 0, 0, 1395, 1407,
	1407, 0, 0, 0, 1398, 1709, 1709, 1401, 1705, 1707,
	1705, 1407, 1407, 0, 98, 0, 0, 1466, 0, 0,
	0, 672, 0, 0, 0, 1428, 1430, 1432, 1432, 1439,
	1433, 1440, 1441, 1432, 1432, 1432, 1432, 1446, 1432, 1432,
	1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1426, 0,
	0, 1640, 1641, 681, 0, 0, 723, 724, 725, 726,
	727, 0, 0, 53, 54, 1075, 0, 277, 55, 56,
	0, 0, 0, 897, 0, 0, 0, 1224, 0, 950,
	947, 948, 949, 0, 982, 457, 458, 459, 460, 0,
	0, 0, 986, 0, 973, 955, 0, 0, 0, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, -2, 1042, 0, 0,
	0, 1224, 1061, 0, 1224, 1224, 0, 1093, 0, 1082,
	684, 0, -2, 0, 0, 632, 0, 0, 829, 515,
	788, 539, 738, 739, 554, 788, 788, 564, 582, 1093,
	1084, 0, 374, 423, 0, 1139, 0, 0, 1145, 0,
	1152, 377, 0, 425, 0, 1237, 1264, 1248, 1264, 1308,
	1264, 1264, 1038, 0, 425, 0, 0, 395, 431, 0,
	0, 0, 0, 0, 391, 428, 746, 378, 380, 381,
	382, 432, 433, 435, 0, 437, 438, 397, 409, 410,
	411, 412, 0, 0, 0, 404, 417, 418, 419, 420,
	379, 1168, 1169, 1170, 1173, 1174, 1175, 1176, 0, 0,
	1179, 1180, 1181, 1182, 1183, 1261, 1262, 1263, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1208, 1209, 1210, 1211, 1212,
	1213, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 0,
	0, 1203, 0, 950, 0, 0, 0, 0, 982, 962,
	0, 972, 0, 974, 975, 0, 0, 654, 788, 295,
	0, 824, 818, 0, 807, 822, 823, 810, 0, 812,
	0, 808, 809, 788, 800, 831, 856, 833, 836, 838,
	839, 845, 0, 0, 0, 0, 224, 225, 226, 233,
	0, 476, 239, 708, 0, 1219, 612, 613, 1110, 1111,
	620, 0, 910, 784, 0, 0, 784, 79, 82, 0,
	77, 0, 0, 0, 0, 69, 67, 1704, 0, 0,
	698, 121, 0, 0, 0, 674, 0, 679, 676, 660,
	670, 659, 667, 668, 687, 1223, 676, 650, 649, 711,
	696, 744, 745, 0, 1276, 331, 0, 989, 141, 146,
	147, 148, 142, 140, 996, 0, 998, 0, 1068, 0,
	0, 1616, 1394, 1365, 1396, 1408, 1409, 1397, 0, 1367,
	1368, 1399, 1400, 1402, 1403, 1404, 1405, 1406, 1369, 1462,
	0, 1464, 1472, 1473, 0, 1522, 1526, 0, 0, 0,
	0, 0, 1437, 1438, 1442, 1443, 1444, 1445, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 740, 1427,
	0, 0, 0, 0, 0, 0, 0, 721, 0, 0,
	0, 1074, 1076, 57, 885, 888, 894, 896, 0, 0,
	0, 1225, 1226, 1228, 1229, 1230, 0, 921, 0, 0,
	941, 942, 952, 0, 0, 0, 462, 463, 0, 0,
	0, 475, 471, 472, 473, 453, 981, 969, 958, 0,
	0, 968, 0, 1043, 1726, 1726, 1726, 0, 0, 1153,
	1726, 1726, 0, 1063, 0, 0, 1157, 1096, 0, 0,
	1087, 0, 854, 0, 0, 788, 631, 634, 635, 732,
	516, 558, 555, 788, 1096, 370, 1117, 0, 0, 0,
	0, 0, 1149, 0, 0, 1121, 0, 396, 426, 0,
	-2, 0, 1265, 0, 1251, 1265, 0, 0, 1264, 0,
	385, 425, 0, 0, 0, 439, 443, 444, 0, 441,
	1303, 0, 442, 0, 430, 0, 436, 1171, 1172, 0,
	1177, 1178, 0, 1202, 0, 0, 445, 0, 0, 0,
	446, 451, 955, 0, 970, 0, 976, 977, 740, 0,
	0, 804, 825, 0, 0, 805, 0, 806, 811, 813,
	294, 840, 0, 0, 842, 843, 844, 835, 241, 753,
	907, 0, 774, 0, 0, 795, 775, 0, 19, 0,
	0, 72, 1714, 1717, 700, 0, 697, 122, 0, 0,
	0, 0, 664, 675, 658, 648, 698, 750, 751, 143,
	138, 997, 1078, 0, 1069, 0, 0, 1474, 0, 1432,
	1429, 1432, 1431, 1423, 0, 1380, 0, 1382, 1383, 1384,
	0, 1386, 1387, 0, 719, 0, 0, 927, 1157, 0,
	927, 951, 940, 0, 983, 984, 0, 464, 465, 0,
	468, 474, 953, 954, 0, 0, 966, 0, 0, 0,
	0, 1035, 1049, 0, 0, 0, -2, 0, -2, 1060,
	0, 1102, 0, 1094, 0, 1086, 0, 1089, 788, 788,
	-2, 628, 633, 0, 559, 1102, 1119, 0, 1140, 0,
	0, 0, 0, 0, 0, 0, 1120, 0, 1133, 427,
	1266, -2, 1279, 1281, 0, 1048, 1284, 1285, 0, 0,
	0, 0, 0, 0, 1329, 1293, 0, 0, 1297, 1298,
	1299, 0, 0, 1302, 0, 1634, 1635, 0, 1306, 0,
	0, 0, 0, 0, 0, 0, 1245, 386, 387, 0,
	389, 390, 1726, 1304, 429, 383, 1726, 399, 1201, 1204,
	1205, 450, 447, 448, 958, 961, 655, 735, 296, 297,
	826, 0, 819, 849, 846, 0, 0, 911, 785, 787,
	73, 78, 0, 0, 702, 0, 699, 0, 693, 695,
	132, 663, 700, 94, 124, 0, 0, 1366, 1463, 1513,
	1435, 1436, 0, 1424, 0, 1418, 1419, 1420, 1425, 0,
	0, 722, 717, 0, 913, 920, 934, 1054, 1227, 919,
	0, 0, 461, 466, 0, 469, 470, 0, 956, 957,
	0, 964, 0, 0, 1022, 1705, 0, 1044, 1045, 1046,
	1154, 1155, 1156, 1112, 1062, 0, -2, 1165, 0, 1058,
	1078, 1112, 0, 1090, 0, 1097, 0, 1095, 1088, 740,
	629, 1099, 376, 1151, 1141, 0, 1143, 0, 0, 0,
	0, 1122, -2, 0, 1280, 1282, 1283, 1286, 1287, 1288,
	1334, 1335, 1336, 0, 0, 1291, 1331, 1332, 1333, 1292,
	0, 0, 0, 0, 0, 1632, 1633, 1327, 0, 0,
	1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1253, 0,
	0, 0, 1244, 1246, 388, 0, 0, 1726, 971, 293,
	0, 0, 850, 852, 847, 848, 68, 70, 85, 0,
	701, 123, 0, 702, 86, 0, 115, 0, 1079, 0,
	1434, 1421, 0, 0, 0, 0, 0, 1636, 1637, 1638,
	0, 1381, 1385, 0, 0, 935, 936, 943, 0, 945,
	467, 959, 963, 966, 0, 1013, 0, 746, 0, 1114,
	0, 1064, 1047, 1167, 1726, 1065, 1114, 0, 1159, 1726,
	1726, 1080, 0, 1092, 0, 1104, 0, 1098, 735, 369,
	0, 1101, 1137, 1142, 1144, 1146, 0, 1150, 1148, 1123,
	-2, 0, 1131, 0, 0, 1289, 1290, 0, 0, 1532,
	1726, 0, 1322, 0, 1013, 1013, 1013, 1013, 0, 440,
	398, 0, 827, 841, 0, 0, 0, 691, 95, 112,
	0, 125, 126, 0, 0, 0, 0, 1071, 0, 1410,
	0, 0, 0, 1414, 1415, 1416, 1417, 0, 912, 0,
	944, 965, 967, 1012, 1023, 1024, 746, 1057, 0, 1151,
	1166, 0, 1059, 1158, 0, 0, 0, 1091, 1103, 0,
	1106, 627, 1100, 1118, 0, 1147, 1124, 1132, 0, 1127,
	0, 0, 0, 1330, 0, 1296, 0, 1301, 1310, 1323,
	0, 0, 1233, 0, 1235, 0, 1239, 0, 1241, 0,
	0, 400, 851, 853, 0, 704, 694, 99, 0, 121,
	118, 0, 127, 0, 0, 0, 0, 1067, 0, 0,
	1411, 1412, 1413, 0, 914, 915, 928, 1014, 1726, 1726,
	0, 0, 0, 1020, 1021, 1025, 0, 1139, 1171, 1160,
	1161, 1162, 1105, 1138, 1126, 0, -2, 1134, 0, 0,
	1584, 1594, 1595, 1294, 1300, 1309, 1311, 1312, 0, 1324,
	1325, 1326, 1328, 1013, 1013, 1013, 1013, 1243, 703, 0,
	88, 0, 0, 116, 117, 119, 0, 128, 0, 130,
	131, 0, 1422, 916, 0, 0, 1017, 1018, 0, 1115,
	0, 1117, 1128, -2, 0, 1136, 0, 1295, 1313, 0,
	1314, 0, 0, 0, 1234, 1236, 1240, 1242, 705, 1077,
	0, 100, 0, 102, 104, 105, 1267, 113, 114, 120,
	129, 0, 901, 917, 0, 1015, 1016, 1019, 0, 1119,
	1135, 1585, 1315, 1317, 1318, 0, 0, 1316, 89, 90,
	0, 101, 0, 0, 1072, 918, 1116, 1113, 1319, 1321,
	1320, 0, 0, 103, 1268, 91, 92, 93, 0, 1269,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 632, 629,
	125, 124, 126, 3, 633, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 630, 137, 631, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:802
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:809
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:815
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:823
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:829
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:833
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:848
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:852
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:858
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:863
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:867
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:899
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:907
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:916
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:927
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:937
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:947
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:960
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:980
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:986
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:993
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1001
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1007
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1016
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1026
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1042
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1060
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1068
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1078
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1085
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1094
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1104
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1108
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1114
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1118
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1124
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1133
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1143
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1147
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1153
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1162
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1166
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1172
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1193
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1206
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1213
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1217
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1223
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1227
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1233
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1248
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1252
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1266
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1270
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1274
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1279
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1283
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1287
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1293
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1302
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1313
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1317
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1323
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1327
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1333
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1337
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1343
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1367
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1386
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1390
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1394
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1399
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1403
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1412
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1422
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1429
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1434
		{
			yyVAL.str = "\n"
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1441
		{
			yyVAL.str = yyDollar[3].str
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1446
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1450
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1478
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1482
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1488
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1496
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1516
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1535
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1560
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1564
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1568
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1573
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1577
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1583
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1596
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1607
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1620
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1624
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1634
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1647
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1660
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1666
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1672
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1679
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1687
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1696
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1700
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1704
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1708
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1712
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1716
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1723
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1727
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1733
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1740
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1749
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1753
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1759
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1763
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1767
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1771
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1775
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1779
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1783
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1787
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1791
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1795
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1799
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1803
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1807
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1811
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1815
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1819
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1823
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1827
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1831
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1835
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1839
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1843
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1847
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1851
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1855
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1859
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1863
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1867
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1871
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1875
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1879
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1883
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1887
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1891
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1895
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1899
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1903
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1907
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1911
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1915
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1919
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1923
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1927
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1931
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1935
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1939
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1943
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1947
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1951
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1955
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1968
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1975
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1982
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1992
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1996
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2002
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2009
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2017
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2021
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2025
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2029
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2035
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2039
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2045
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2052
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2059
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2068
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2098
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2102
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2106
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2112
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2118
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2122
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2129
		{
			yyVAL.str = yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2135
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2139
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2145
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2153
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2162
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2171
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2179
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2187
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2210
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2233
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2240
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2247
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2255
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2262
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2269
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2286
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2292
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2296
		{
			yyVAL.str = yyDollar[1].str
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2302
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2306
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2312
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2316
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2327
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2333
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2338
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2342
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2346
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2350
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2354
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2358
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2362
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2366
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2370
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2376
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2380
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2384
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2388
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2393
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2398
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2404
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2417
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2430
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2443
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2456
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2472
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2479
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2501
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2505
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2511
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2527
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2531
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2537
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2543
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2547
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2551
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2555
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2561
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2573
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2579
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2583
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2589
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2593
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2599
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2605
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2616
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2622
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2630
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2634
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2638
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2642
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2650
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2658
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2668
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2680
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2684
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2692
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2700
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2739
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2743
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2749
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2755
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2760
		{
			yyVAL.str = "true"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2761
		{
			yyVAL.str = "false"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2762
		{
			yyVAL.str = yyDollar[1].str
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2767
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2784
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2807
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2817
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2824
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2833
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2837
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2843
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2847
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2871
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2881
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2897
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2915
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2919
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2925
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2929
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2935
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2941
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2949
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2959
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2967
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2977
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2987
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2997
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3008
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3012
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3016
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3020
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3027
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3033
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3037
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3041
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3045
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3049
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3053
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3057
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3061
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3066
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3097
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3101
		{
			yyVAL.str = string("COLUMN")
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3106
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3112
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3118
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3126
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3130
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3136
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3144
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3151
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3157
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3163
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3169
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3175
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3182
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3189
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3197
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3203
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3215
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3221
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3229
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3233
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3240
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3258
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3272
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3286
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3299
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3305
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3316
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3329
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3333
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3341
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3345
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3350
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3354
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3370
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3374
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3378
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3382
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3389
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3393
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3397
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3401
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3408
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3412
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3419
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3423
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3427
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3431
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3438
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3445
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3451
		{
			yyVAL.item = nil
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3456
		{
			yyVAL.item = nil
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3498
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3507
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3515
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3523
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3527
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3531
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3542
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3546
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3552
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3557
		{
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3561
		{
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3566
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3576
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3586
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3594
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3600
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3606
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3612
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3618
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3624
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3630
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3639
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3643
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3647
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3651
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3655
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3659
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3663
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3667
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3673
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3682
		{
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3684
		{
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3693
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3703
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3712
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3716
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3720
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3726
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3732
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3738
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3744
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3753
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3763
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3775
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3779
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3785
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3797
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3811
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3817
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3824
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3828
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3833
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3837
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3841
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3846
		{
			yyVAL.str = ""
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3850
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3856
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3869
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3873
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3879
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3884
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3888
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3892
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3898
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3904
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3908
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3914
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3920
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3924
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3928
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3934
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3938
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3964
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3972
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3980
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3988
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3992
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3998
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4011
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4019
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4028
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4034
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4042
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4050
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4058
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4064
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4072
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4078
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4086
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4092
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4102
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4107
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4114
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4130
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4143
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4154
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4158
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4164
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4169
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4176
		{
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4178
		{
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4181
		{
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4190
		{
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4194
		{
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4199
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4208
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4215
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4221
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4229
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4236
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4243
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4263
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4271
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4281
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4285
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4291
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4298
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4304
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4312
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4319
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4326
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4345
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4349
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4353
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4358
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4362
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4366
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4372
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4381
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4385
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4391
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4395
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4401
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4405
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4411
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4416
		{
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4420
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4427
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4431
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4438
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4443
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4447
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4453
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4457
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4463
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4467
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4472
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4476
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4489
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4500
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4511
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4533
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4556
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4564
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4573
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4577
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4590
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4594
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4599
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4603
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4610
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4615
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4622
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4628
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4632
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4636
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4640
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4644
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4648
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4653
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4657
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4663
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4673
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4688
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4692
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4706
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4710
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4716
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4725
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4729
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4733
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4737
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4741
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4747
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4754
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4763
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4767
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4773
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4781
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4785
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4790
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4794
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4800
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4804
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4808
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4813
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4817
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4823
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4829
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4833
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4839
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4844
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4848
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4852
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4857
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4861
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4865
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4870
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4874
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4882
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4886
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4890
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4904
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4908
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4918
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4928
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4938
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4950
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4958
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4966
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4975
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4983
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4991
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4999
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5007
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5015
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5023
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5031
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5039
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5049
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5060
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5074
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5078
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5082
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5087
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5091
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5095
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5104
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5108
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5113
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5117
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5122
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5126
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5132
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5136
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5142
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5146
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5151
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5155
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5160
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5168
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5174
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5182
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5190
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5200
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5206
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5215
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5224
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5233
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5243
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5247
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5257
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5261
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5265
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5269
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5275
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5285
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5289
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5295
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5301
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5305
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5311
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5317
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5321
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5325
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5331
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5335
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5341
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5345
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5351
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5355
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5361
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5365
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5375
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5388
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5394
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5400
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5413
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5424
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5431
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5435
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5441
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5451
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5455
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5459
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5464
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5468
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5472
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5476
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5481
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5485
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5489
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5493
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5497
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5502
		{
			yyVAL.str = ""
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5506
		{
			yyVAL.str = yyDollar[1].str
		}
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5510
		{
			yyVAL.str = yyDollar[2].str
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5516
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5522
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5526
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5530
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5534
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5538
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5544
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 885:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5584
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5597
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5603
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 888:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5609
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5622
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5627
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5633
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5640
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5644
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5650
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5656
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5661
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5665
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5669
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5673
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5680
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5713
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5718
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5724
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5731
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5735
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5741
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5747
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5751
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5755
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5761
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5767
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5773
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5777
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5783
		{
			yyVAL.str = ""
		}
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5790
		{
			yyVAL.str = yyDollar[2].str
		}
	case 919:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5796
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5811
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5828
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5845
		{
			yyVAL.str = yyDollar[1].str
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5849
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5855
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5859
		{
			yyVAL.str = "DEFINER = "
		}
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5863
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 927:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5868
		{
			yyVAL.str = ""
		}
	case 928:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5872
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5886
		{
			yyVAL.str = ""
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5894
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5900
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5905
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5911
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].str
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5924
		{
			yyVAL.str = yyDollar[1].str
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5928
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5934
		{
			var Typ = tree.AccountIdentifiedByPassword
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5943
		{
			var Typ = tree.AccountIdentifiedByRandomPassword
			var Str string
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5952
		{
			var Typ = tree.AccountIdentifiedWithSSL
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5962
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5968
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5975
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5982
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5990
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5996
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6005
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6022
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6039
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6057
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6063
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6070
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6078
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6084
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6092
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6098
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6106
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6112
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6121
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6125
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6130
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6134
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6141
		{
			yyVAL.str = yyDollar[3].str
		}
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6146
		{
			yyVAL.str = ""
		}
	case 970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6150
		{
			yyVAL.str = yyDollar[2].str
		}
	case 971:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6156
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6169
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6182
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6188
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6194
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6200
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6209
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6217
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6225
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6233
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 982:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6238
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6250
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6261
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6370
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6374
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6380
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6393
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6397
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6403
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6416
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6420
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6424
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6429
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6433
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6439
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6446
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6452
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6461
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1001:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6468
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6479
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6483
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6489
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6498
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6502
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6506
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6511
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6515
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6519
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6523
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6529
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6560
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6564
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6590
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6596
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6608
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6614
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6620
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6626
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6632
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6640
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6644
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6650
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6664
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6678
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6682
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6686
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6690
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6694
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6698
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6702
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6708
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6723
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6727
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6738
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6742
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6747
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6751
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6757
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6761
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6767
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6776
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6785
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6791
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6795
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6801
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6812
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6818
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6836
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6854
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6872
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6888
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6892
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6898
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6910
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6919
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6931
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6941
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6951
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6962
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6972
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6985
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6992
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7002
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7015
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7023
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7032
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7041
		{
			yyVAL.str = ""
		}
	case 1072:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7045
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7051
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7055
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7060
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7064
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7071
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7083
		{
			yyVAL.str = ""
		}
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7087
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1080:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7093
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7114
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7128
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7132
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7136
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7142
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7146
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7153
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7160
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7167
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7174
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7178
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7182
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7186
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7190
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7197
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7204
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7208
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7215
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7222
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7226
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7232
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7242
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7249
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7256
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7263
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7270
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7274
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7279
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7283
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7287
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7292
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7296
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7309
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7313
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7321
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7329
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7333
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7345
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7349
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7355
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7359
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7365
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7378
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7392
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7396
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7402
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7406
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7412
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7421
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7432
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7436
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7441
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7445
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7451
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7456
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7464
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7468
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7478
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7482
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7493
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7501
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7509
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7517
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7528
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7537
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7547
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7557
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7561
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7566
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7570
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7576
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7580
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7586
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7595
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7605
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7609
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7615
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7619
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7625
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7634
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7644
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7648
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7654
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7658
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7662
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7668
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7672
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7676
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7680
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7684
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7688
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7692
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7697
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7701
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7705
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7709
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7713
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7717
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7721
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7725
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7729
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7733
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7737
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7741
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7745
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7751
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7757
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7761
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7765
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7769
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7773
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7779
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7785
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7791
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7797
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7803
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7809
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7813
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7817
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7821
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7828
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7832
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7838
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7849
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7853
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7859
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7863
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7867
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7871
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7875
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7879
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7893
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7897
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7906
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7911
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7916
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[3].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7924
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7933
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7940
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7944
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7950
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7954
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7958
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7964
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7968
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7974
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7987
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8000
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8039
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8079
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8093
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8099
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8112
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8125
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8138
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8151
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8166
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8176
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8182
		{
			yyVAL.str = ""
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8186
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8196
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8202
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8208
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8229
		{
			yyVAL.str = ""
		}
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8233
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8239
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8245
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8249
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8253
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8259
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8263
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8267
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8271
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8277
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8281
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8285
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8290
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8294
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8300
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8304
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8310
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8314
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8318
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8322
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8326
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8330
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8335
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8339
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8343
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8347
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8351
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8355
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8359
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8363
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8367
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8371
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8384
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8388
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8392
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8396
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8400
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8404
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8410
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8414
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8419
		{
			yyVAL.str = ""
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8423
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8429
		{
			yyVAL.str = ""
		}
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8433
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1309:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8439
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8456
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8463
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8470
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8477
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8484
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8493
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8499
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8505
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8509
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8513
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8517
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8521
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8526
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8533
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8537
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8541
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8546
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8550
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8555
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8559
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8575
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8581
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8585
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8589
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8593
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8597
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8601
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8605
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8609
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8613
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8617
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8621
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8625
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8629
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8635
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8639
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8643
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8647
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8651
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8655
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8659
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8663
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8667
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8671
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8713
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8717
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8721
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8726
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8734
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8738
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8742
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8746
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8750
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8759
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8763
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8767
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8771
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8775
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8779
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8783
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8789
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8797
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8805
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8815
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8825
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8835
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8844
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8854
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8864
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8874
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8883
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8893
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8897
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8902
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8906
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8912
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8916
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8922
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8931
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8943
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8960
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8977
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8990
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9003
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9015
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9029
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9044
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9059
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9076
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9091
		{
		}
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9098
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9102
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9106
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9112
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9116
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9120
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9124
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9130
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9134
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9138
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9144
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9152
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9162
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9166
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9173
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9182
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9187
		{
			yyVAL.str = ","
		}
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9191
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9196
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9200
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1432:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9205
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9212
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9238
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9249
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9260
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9270
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9280
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9290
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9299
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9308
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9318
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9328
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9338
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9348
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9358
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9368
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9378
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9388
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9398
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9408
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9418
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9428
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9438
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9448
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9465
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9473
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9481
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9489
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9497
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9507
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9515
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9524
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9532
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9540
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9548
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9556
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9567
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9577
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9589
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9600
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9622
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9658
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9670
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9682
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9693
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9701
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9708
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9715
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9727
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9735
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9745
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9755
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9763
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9774
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9783
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9792
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9800
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9810
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9818
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9827
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9835
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9843
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9856
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9862
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9866
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9885
		{
		}
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9887
		{
		}
	case 1577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9928
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9939
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9943
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9947
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9953
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9958
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9962
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9968
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9972
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9978
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9982
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9989
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9993
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9997
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10005
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10009
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10013
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10018
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10022
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10028
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10032
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10036
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10040
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10044
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10048
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10052
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10056
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10060
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10064
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10072
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10076
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10080
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10084
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10088
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10092
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10096
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10100
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10104
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10108
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10114
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10118
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10124
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10128
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10135
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10139
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10143
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10149
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10153
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10157
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10161
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10165
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10169
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10173
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10179
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10183
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10187
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10191
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10197
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10210
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10215
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10221
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10225
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10238
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10243
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10247
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10251
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10255
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10259
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10266
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10270
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10274
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10278
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10285
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10296
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10301
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10307
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10319
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10331
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10343
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10356
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10369
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10382
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10395
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10408
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10421
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10434
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10447
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10460
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10473
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10488
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10515
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10557
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10593
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10629
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10646
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10658
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10678
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10698
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10718
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10734
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10747
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10760
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10773
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10786
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10798
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10810
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10822
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10834
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10846
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10858
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10870
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10882
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10894
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10907
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10920
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10933
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10946
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10961
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10969
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10978
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10988
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11011
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11016
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11022
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11029
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11033
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11038
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11042
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11048
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11054
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11061
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11068
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11077
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11084
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11091
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11100
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11104
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11108
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11114
		{
		}
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11116
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11126
		{
			yyVAL.str = ""
		}
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11130
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
